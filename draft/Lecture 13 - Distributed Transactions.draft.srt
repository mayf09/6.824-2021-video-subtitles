1
00:00:00,540 --> 00:00:03,090
0,630 630,900 1590,2040 2070,2400 2400,2550
{Okay,thank} you.| Okay, so good

2
00:00:03,090 --> 00:00:04,500
0,360 360,510 510,810 810,960 960,1410
afternoon, good evening, good morning,

3
00:00:04,500 --> 00:00:05,670
0,180 180,420 420,690 690,810 810,1170
good night, wherever you are,|

4
00:00:05,850 --> 00:00:07,530
0,750 840,1200 1200,1260 1260,1530 1530,1680
we're going to talk {today

5
00:00:07,530 --> 00:00:09,440
0,450 450,690 690,1410
-} about transactions.|

6
00:00:09,720 --> 00:00:12,570
0,510 930,1200 1200,1440 1440,2040 2040,2850
And you probably noticed the

7
00:00:12,600 --> 00:00:13,770
0,300 300,690 690,810 810,1080 1080,1170
reading material for today a

8
00:00:13,770 --> 00:00:14,850
0,150 150,270 270,420 420,990 990,1080
little bit more tutorial in

9
00:00:14,850 --> 00:00:16,590
0,480 510,990 990,1290 1290,1710 1710,1740
nature,| we're not studying a

10
00:00:16,590 --> 00:00:18,480
0,420 420,930 930,1050 1050,1350 1350,1890
particular system| and see how

11
00:00:18,930 --> 00:00:20,970
0,1200 1260,1500 1500,1590 1590,1950 1950,2040
a set of ideas are

12
00:00:20,970 --> 00:00:24,360
0,450 450,1950 1980,2310 2310,2730 2970,3390
implemented {in,that} system,| instead {}

13
00:00:24,360 --> 00:00:25,230
0,240 240,330 330,450 450,570 570,870
what we're gonna be doing

14
00:00:25,230 --> 00:00:27,210
0,150 150,510 510,1050 1080,1680 1680,1980
is talking about {} just

15
00:00:27,210 --> 00:00:29,520
0,60 60,450 450,510 510,1260 1620,2310
the concept of transactions, {}|

16
00:00:29,520 --> 00:00:31,710
0,360 360,1230 1440,1710 1710,1950 1950,2190
because it it shows up

17
00:00:31,710 --> 00:00:33,570
0,570 570,840 840,1170 1170,1350 1350,1860
in the next two papers,|

18
00:00:33,570 --> 00:00:35,430
0,210 210,420 420,660 660,1200 1560,1860
that we'll be studying those

19
00:00:35,430 --> 00:00:37,200
0,300 300,630 630,930 930,1260 1260,1770
two papers have a quite

20
00:00:37,230 --> 00:00:39,180
0,840 870,1320 1320,1380 1380,1830 1830,1950
a lot of material in

21
00:00:39,180 --> 00:00:41,880
0,270 270,630 630,1320 1320,1890 2130,2700
them| and assume a familiar

22
00:00:41,880 --> 00:00:43,950
0,150 150,930 1050,1500 1500,1650 1650,2070
with transactions,| {} in particular

23
00:00:43,950 --> 00:00:45,750
0,150 150,330 330,930 930,1380 1590,1800
that you're familiar with the

24
00:00:45,750 --> 00:00:47,130
0,360 360,660 660,1110 1110,1260 1260,1380
two core ideas that we'll

25
00:00:47,130 --> 00:00:48,930
0,270 270,510 510,900 900,1260 1260,1800
see the today's lecture,| mainly

26
00:00:49,280 --> 00:00:51,340
0,180 180,450 450,840 840,1470
{} {2-phase -} locking

27
00:00:56,240 --> 00:00:58,940
0,750 780,990 990,1260 1260,1710
and {2-phase -} commit,|

28
00:01:06,430 --> 00:01:07,780
0,150 150,510 510,630 630,690 690,1350
and sometimes they are abbreviated

29
00:01:07,780 --> 00:01:09,160
0,180 180,240 240,390 390,630 630,1380
as you know {2PC -}

30
00:01:09,280 --> 00:01:10,750
0,270 270,390 390,630 630,1110 1110,1470
for {2-phase -} commit| and

31
00:01:10,750 --> 00:01:12,610
0,150 150,660 660,1020 1440,1620 1620,1860
{2PL -} for {2-phase -}

32
00:01:12,610 --> 00:01:15,010
0,450 1140,1500 1500,2070 2070,2310 2310,2400
locking,| {} one point of

33
00:01:15,010 --> 00:01:17,680
0,720 1020,1560 1560,1860 1860,2280 2280,2670
confusion,| {} the two terms

34
00:01:17,680 --> 00:01:18,580
0,210 210,510 510,660 660,750 750,900
really don't have to do

35
00:01:18,580 --> 00:01:20,200
0,510 510,750 750,870 870,1290 1320,1620
much,| don't have to, don't

36
00:01:20,200 --> 00:01:21,160
0,390
it,|

37
00:01:21,380 --> 00:01:23,000
0,180 180,420 420,900 900,1080 1080,1620
I'm really not much related,|

38
00:01:23,030 --> 00:01:25,400
0,510 990,1170 1170,1650 1650,2100 2100,2370
{} you know they happen

39
00:01:25,400 --> 00:01:27,590
0,60 60,360 360,690 690,1740 1980,2190
to have both words two

40
00:01:27,590 --> 00:01:28,670
0,240 240,390 390,720 720,840 840,1080
words {2-phase -} in it,|

41
00:01:28,910 --> 00:01:30,320
0,450 450,720 720,990 990,1110 1110,1410
{} but {you,know} they show

42
00:01:30,320 --> 00:01:32,930
0,420 420,660 660,1290 1320,1830 2160,2610
completely different problems,| {} they

43
00:01:32,930 --> 00:01:33,920
0,330 330,480 480,600 600,780 780,990
they have to also show

44
00:01:33,920 --> 00:01:34,790
0,90 90,390 390,750 750,810 810,870
up on typically in the

45
00:01:34,790 --> 00:01:36,890
0,330 330,390 390,1140 1320,1860 1860,2100
context of transactions,| {} but

46
00:01:36,890 --> 00:01:37,760
0,180 180,300 300,510 510,810 810,870
there are even outside of

47
00:01:37,760 --> 00:01:40,520
0,540 540,840 840,1740 1770,2310 2310,2760
transactions,| they are good ideas

48
00:01:40,520 --> 00:01:42,300
0,330 330,690 690,1380
or worthwhile ideas,|

49
00:01:42,420 --> 00:01:43,800
0,150 150,510 540,780 780,960 960,1380
and so don't let your

50
00:01:44,040 --> 00:01:45,060
0,300 300,600 600,690 690,780 780,1020
self confused by the fact

51
00:01:45,060 --> 00:01:45,720
0,90 90,180 180,420 420,510 510,660
that they both have {2-phase

52
00:01:45,720 --> 00:01:47,190
0,330 330,480 480,690 900,1260 1260,1470
-} in it,| {} they're

53
00:01:47,190 --> 00:01:49,060
0,750 750,1350
pretty unrelated.|

54
00:01:50,090 --> 00:01:51,140
0,240 240,390 390,510 510,630 630,1050
Okay, so I'm just gonna

55
00:01:51,170 --> 00:01:52,370
0,480 480,570 570,660 660,870 870,1200
dive in a little bit|

56
00:01:52,370 --> 00:01:54,110
0,360 360,690 690,960 960,1170 1170,1740
and start talking about transactions

57
00:01:54,110 --> 00:01:57,320
0,180 180,750 1110,1830 2100,2790 2790,3210
in general,| {} and the

58
00:01:57,320 --> 00:01:58,670
0,300 300,450 450,1140 1170,1290 1290,1350
reason that we're going to

59
00:01:58,670 --> 00:02:00,260
0,390 390,600 600,1080 1080,1170 1170,1590
care about transactions a lot

60
00:02:00,440 --> 00:02:02,300
0,180 180,1170 1200,1530 1530,1710 1710,1860
{} is,| {} that we

61
00:02:02,300 --> 00:02:02,930
0,150 150,210 210,330 330,540 540,630
want to be able to

62
00:02:02,930 --> 00:02:06,000
0,300 330,900 900,1530 1560,2400
do {cross-machine -} operations.|

63
00:02:06,360 --> 00:02:07,350
0,240 240,450 450,810 810,930 930,990
So the problem that we're

64
00:02:07,350 --> 00:02:08,700
0,120 120,180 180,390 390,630 660,1350
going to try to tackle|

65
00:02:11,220 --> 00:02:12,330
0,180 180,570 570,720 720,960 960,1110
{in,this} lecture as well as

66
00:02:12,330 --> 00:02:14,190
0,180 180,630 660,870 870,1260 1260,1860
in the two upcoming papers|

67
00:02:14,460 --> 00:02:17,820
0,420 420,780 780,1470
is {cross-machine -}

68
00:02:20,830 --> 00:02:23,480
0,360 360,420 420,1200
{atomic -} ops.|

69
00:02:25,890 --> 00:02:27,210
0,540 540,720 720,900 900,960 960,1320
{} And so for example

70
00:02:27,210 --> 00:02:27,690
0,180 180,240 240,360 360,450 450,480
just to make it a

71
00:02:27,690 --> 00:02:29,400
0,150 150,270 270,840 870,1500 1500,1710
little bit concrete,| {} let's

72
00:02:29,400 --> 00:02:30,570
0,120 120,270 270,360 360,450 450,1170
say we have a client,|

73
00:02:31,250 --> 00:02:34,040
0,210 210,390 390,660 660,1770 1770,2790
{} we have two, {}

74
00:02:34,700 --> 00:02:35,750
0,180 180,270 270,330 330,840 840,1050
we have a sharded key

75
00:02:35,750 --> 00:02:37,460
0,390 390,960 1020,1230 1230,1470 1470,1710
value server,| {} so some

76
00:02:37,460 --> 00:02:39,260
0,150 150,480 630,1110 1110,1410 1410,1800
of the keys are on

77
00:02:39,260 --> 00:02:41,420
0,150 150,480 480,780 780,1320
key value server one,|

78
00:02:41,840 --> 00:02:43,160
0,300 300,540 540,840 840,1020 1020,1320
some are on key value

79
00:02:43,160 --> 00:02:44,620
0,360 360,900
server two,|

80
00:02:44,830 --> 00:02:46,000
0,180 180,300 300,570 570,660 660,1170
so the keys are split

81
00:02:46,030 --> 00:02:47,290
0,450 450,720 720,900 900,960 960,1260
across them,| so for example,

82
00:02:47,290 --> 00:02:49,150
0,480 690,1080 1080,1290 1290,1620 1620,1860
maybe {kv1 - -} has

83
00:02:49,150 --> 00:02:51,340
0,390 390,900 900,1380 1380,1590 1590,2190
x, {kv2 -} has y|

84
00:02:51,940 --> 00:02:53,170
0,510 510,660 660,810 810,870 870,1230
and we want to basically

85
00:02:53,170 --> 00:02:54,910
0,180 180,330 330,780 780,1260 1260,1740
want to atomic operation across

86
00:02:54,910 --> 00:02:56,980
0,330 330,630 630,1170 1170,1530 1770,2070
those two keys| and the

87
00:02:56,980 --> 00:02:58,300
0,300 300,480 480,630 630,810 810,1320
easy way or the classic

88
00:02:58,300 --> 00:03:00,100
0,660 660,1140 1140,1350 1350,1740 1740,1800
example in the context of

89
00:03:00,100 --> 00:03:01,900
0,720 900,1080 1080,1530 1530,1740 1740,1800
transactions is always doing a

90
00:03:01,900 --> 00:03:02,900
0,600
transfer.|

91
00:03:03,290 --> 00:03:04,280
0,180 180,360 360,480 480,570 570,990
So let's say the client

92
00:03:04,280 --> 00:03:06,140
0,180 180,270 270,690 750,960 960,1860
wants to do a transfer

93
00:03:06,380 --> 00:03:09,500
0,600 630,960 960,1080 1080,1650 2760,3120
from x to y,| {here's,our}

94
00:03:09,500 --> 00:03:12,320
0,690 1080,1830 1830,2130 2130,2340 2340,2820
client| and it's gonna do

95
00:03:12,320 --> 00:03:13,780
0,450 450,960
basically {a,put}

96
00:03:14,840 --> 00:03:16,970
0,360 360,540 540,1080 1080,1500 1530,2130
{you,know} to x,| to maybe

97
00:03:17,000 --> 00:03:20,300
0,660 1080,1740 1770,2310 2310,2490 2490,3300
{} add {} or subtract

98
00:03:20,300 --> 00:03:21,380
0,150 150,270 270,780 780,990 990,1080
from the account,| {so,let's,do} it

99
00:03:21,380 --> 00:03:23,900
0,240 240,540 540,1080 1710,2010 2010,2520
x {-1 -}| and then

100
00:03:23,900 --> 00:03:24,560
0,90 90,390 390,480 480,600 600,660
the client is going to

101
00:03:24,560 --> 00:03:27,680
0,210 210,270 270,840 1500,2160 2220,3120
do {} put of y

102
00:03:27,890 --> 00:03:29,000
0,270 270,480
{+1 -},|

103
00:03:29,430 --> 00:03:31,500
0,690 690,1110 1110,1320 1320,1710 1710,2070
transfer immediately one dollar from

104
00:03:31,500 --> 00:03:32,520
0,120 120,240 240,330 330,720 720,1020
you know the account x

105
00:03:32,520 --> 00:03:35,940
0,210 210,540 540,1530 1530,1950 2940,3420
to the account y| and

106
00:03:35,940 --> 00:03:36,960
0,180 180,480 480,540 540,900 900,1020
our goal is basically going

107
00:03:36,960 --> 00:03:38,120
0,120 120,630
to be,|

108
00:03:40,300 --> 00:03:41,230
0,240 240,360 360,570 570,750 750,930
{you,know} we want {atomicity -

109
00:03:41,230 --> 00:03:42,360
0,450
-}

110
00:03:44,860 --> 00:03:46,780
0,240 240,660 660,1350
with {respect,to} failures

111
00:03:49,030 --> 00:03:50,600
0,390 390,990
and concurrency.|

112
00:03:55,540 --> 00:03:58,120
0,480 510,780 780,1110 1110,1620 1650,2580
{} So even if a

113
00:03:58,120 --> 00:03:59,860
0,150 150,390 480,750 750,1320 1320,1740
you know a variable key

114
00:03:59,860 --> 00:04:00,970
0,300 300,450 450,660 660,900 900,1110
one of the first key

115
00:04:00,970 --> 00:04:03,280
0,360 360,1020 1020,1380 1380,1740 1740,2310
value server fails after the

116
00:04:03,310 --> 00:04:06,220
0,420 720,1590 1620,2610 2610,2760 2760,2910
put,| {} then we would

117
00:04:06,220 --> 00:04:07,450
0,120 120,270 270,600 600,810 810,1230
like to arrange it basically

118
00:04:07,450 --> 00:04:08,590
0,120 120,510 510,750 750,1020 1020,1140
the transfer didn't happen at

119
00:04:08,590 --> 00:04:10,060
0,270 300,570 570,960 960,1080 1080,1470
all,| so generally the semantics

120
00:04:10,060 --> 00:04:11,110
0,90 90,180 180,480 480,870 870,1050
that we're looking for is

121
00:04:11,110 --> 00:04:13,180
0,270 300,780 780,1320 1320,1770 1830,2070
that both operations happen| or

122
00:04:13,180 --> 00:04:14,620
0,300 300,540 540,630 630,810 810,1440
neither one of them happens.|

123
00:04:15,190 --> 00:04:16,540
0,240 240,360 360,870 870,1260 1260,1350
And so, similarly from a

124
00:04:16,540 --> 00:04:18,640
0,360 360,960 960,1320 1320,1740 1740,2100
concurrency perspective,| if another client

125
00:04:18,640 --> 00:04:19,690
0,90 90,390 390,510 510,720 720,1050
is running and also tries

126
00:04:19,690 --> 00:04:21,460
0,300 300,690 690,810 810,1380 1470,1770
to inspect these accounts| now

127
00:04:21,460 --> 00:04:22,150
0,210 210,330 330,420 420,600 600,690
what we would like to

128
00:04:22,150 --> 00:04:23,260
0,210 210,270 270,630 630,750 750,1110
be the case is| that

129
00:04:23,260 --> 00:04:25,930
0,450 450,960 1080,1650 1650,1920 1920,2670
both puts {} show atomically|

130
00:04:25,930 --> 00:04:28,480
0,240 240,570 570,1290 1470,2100 2100,2550
and so other transaction cannot

131
00:04:28,510 --> 00:04:30,430
0,510 510,630 630,1170 1170,1590 1590,1920
observe an intermediate results| where

132
00:04:30,430 --> 00:04:32,110
0,90 90,570 570,990 990,1110 1110,1680
an intermediate result, for example

133
00:04:32,170 --> 00:04:33,190
0,180 180,390 390,480 480,930 930,1020
the money is deducted from

134
00:04:33,190 --> 00:04:34,540
0,480 510,630 630,930 930,1050 1050,1350
x,| that hasn't been added

135
00:04:34,540 --> 00:04:35,620
0,90 90,300 300,720
to y yet.|

136
00:04:36,070 --> 00:04:37,450
0,480 750,930 930,1110 1110,1290 1290,1380
{} So, these are the

137
00:04:37,450 --> 00:04:38,260
0,210 210,300 300,540 540,660 660,810
type of things we want

138
00:04:38,260 --> 00:04:39,700
0,60 60,480 660,810 810,930 930,1440
to do| and it's complete

139
00:04:39,700 --> 00:04:41,230
0,450 450,600 600,990 990,1470 1470,1530
common in distributed systems,| you

140
00:04:41,230 --> 00:04:42,670
0,120 120,300 300,480 480,720 720,1440
know that you would like

141
00:04:42,760 --> 00:04:45,490
0,630 660,1140 1140,1680 1680,2040 2040,2730
to do operation across shards.|

142
00:04:48,130 --> 00:04:48,790
0,210 210,360 360,510 510,570 570,660
So that's sort of the

143
00:04:48,790 --> 00:04:52,180
0,750 2220,2730 2730,3030 3030,3180 3180,3390
context of what we'd like

144
00:04:52,180 --> 00:04:54,040
0,60 60,450 750,1230 1230,1500 1500,1860
to do| and the general

145
00:04:54,040 --> 00:04:55,840
0,480 480,840 840,1110 1110,1440 1440,1800
plan for doing this is

146
00:04:55,840 --> 00:04:57,070
0,240 240,540 540,720 720,810 810,1230
comes directly from the database

147
00:04:57,070 --> 00:04:59,440
0,540 960,1410 1410,1710 1710,2040 2040,2370
community,| {} this general plan

148
00:04:59,440 --> 00:05:01,220
0,360 390,1350
is transactions.|

149
00:05:09,780 --> 00:05:10,800
0,420 420,690 690,810 810,960 960,1020
And what we'd like to

150
00:05:10,800 --> 00:05:13,050
0,270 270,840 870,1590 1590,2100 2100,2250
do is basically group these

151
00:05:13,050 --> 00:05:14,430
0,600 600,810 810,1170 1170,1260 1260,1380
operations,| for example in the

152
00:05:14,430 --> 00:05:15,570
0,240 240,330 330,420 420,930 930,1140
case with the transfer two

153
00:05:15,570 --> 00:05:17,550
0,300 300,1110 1230,1590 1590,1650 1650,1980
put operations into a single

154
00:05:17,550 --> 00:05:18,700
0,570
transaction.|

155
00:05:18,700 --> 00:05:20,020
0,660 660,780 780,990 990,1170 1170,1320
And, {} we like, then

156
00:05:20,020 --> 00:05:21,400
0,90 90,540 540,690 690,840 840,1380
the property that this transaction

157
00:05:21,400 --> 00:05:24,100
0,750 870,1920 2130,2430 2430,2550 2550,2700
executes atomically,| so you know

158
00:05:24,100 --> 00:05:26,110
0,720 720,990 990,1350 1350,1560 1560,2010
typically this requires some programmer

159
00:05:26,110 --> 00:05:27,980
0,840
annotations.|

160
00:05:28,820 --> 00:05:30,740
0,210 210,480 480,1350
So {begin_x -}

161
00:05:30,740 --> 00:05:32,900
0,360 360,780 780,1410 1410,1620 1620,2160
{} to indicate that the

162
00:05:32,930 --> 00:05:34,130
0,420 420,660 660,870 870,1170 1170,1200
client wants to start a

163
00:05:34,130 --> 00:05:35,750
0,720 750,900 900,1110 1110,1260 1260,1620
transaction,| that may be then

164
00:05:36,670 --> 00:05:38,500
0,150 150,270 270,420 420,1110 1110,1830
you know the operations like

165
00:05:38,650 --> 00:05:40,840
0,660 1050,1200 1200,1650 1650,1860 1860,2190
add,| {you,know} add x {-1

166
00:05:40,840 --> 00:05:44,470
0,480 840,1020 1020,1470 2010,2490 2550,3630
-}| and then add y

167
00:05:44,500 --> 00:05:46,140
0,150 150,270 270,570 570,1050
you know {+1 -},|

168
00:05:46,570 --> 00:05:47,890
0,510 510,930 930,1140 1140,1260 1260,1320
and then you have to

169
00:05:47,890 --> 00:05:49,480
0,450 450,750 750,840 840,1500 1500,1590
indicate when the transaction is

170
00:05:49,480 --> 00:05:52,930
0,630 1770,2160 2160,2370 2370,2850 2850,3450
completed| and so typically we

171
00:05:54,430 --> 00:05:56,100
0,450 450,510 510,600 600,1020
{come,to} make of commit.|

172
00:05:56,410 --> 00:05:58,180
0,600 780,1290 1290,1470 1470,1620 1620,1770
And, {} and so the

173
00:05:58,180 --> 00:05:59,830
0,540 540,630 630,720 720,1080 1080,1650
semantics that we're looking for

174
00:05:59,920 --> 00:06:02,350
0,330 330,510 510,810 810,1830 2010,2430
is that,| these operations are

175
00:06:02,350 --> 00:06:04,000
0,450 450,870 870,1140 1170,1350 1350,1650
executed {atomically -} with respect

176
00:06:04,000 --> 00:06:05,710
0,90 90,720 720,930 930,1320 1320,1710
to concurrency and respect to

177
00:06:05,710 --> 00:06:07,750
0,330 360,810 1350,1800 1800,1980 1980,2040
a failure| and just to

178
00:06:07,750 --> 00:06:08,260
0,150 150,210 210,240 240,390 390,510
make it a little bit

179
00:06:08,260 --> 00:06:09,400
0,120 120,600 600,870 870,1050 1050,1140
more exciting,| let's look at

180
00:06:09,400 --> 00:06:10,600
0,180 180,450 450,960 960,1080 1080,1200
a second transaction,| so that

181
00:06:10,600 --> 00:06:11,560
0,90 90,240 240,540 540,630 630,960
we can look at some

182
00:06:11,830 --> 00:06:13,780
0,390 390,750 750,1080 1080,1470 1470,1950
{} case studies about how

183
00:06:13,780 --> 00:06:15,970
0,540 540,780 780,1380 1590,1980 1980,2190
transactions actually interact,| we might

184
00:06:15,970 --> 00:06:18,220
0,150 150,450 480,900 900,1770
have a second transaction

185
00:06:18,220 --> 00:06:19,960
0,390 390,1020
{begin_x -},|

186
00:06:19,960 --> 00:06:22,570
0,480 480,1290 1320,1770 1770,2070 2070,2610
{} which reads actually these

187
00:06:22,780 --> 00:06:24,120
0,780
accounts,|

188
00:06:24,460 --> 00:06:26,200
0,300 300,510 510,900 900,1080 1080,1740
so {t1 -} get x,

189
00:06:28,530 --> 00:06:34,140
0,1080 1110,1350 1350,1650 1650,2340 4590,5610
{and,then,t2} {you,know} gets y,| {and,print}

190
00:06:35,700 --> 00:06:37,770
0,390 390,960 990,1350 1350,1560 1560,2070
{t1 -} and {t2 -}|

191
00:06:37,950 --> 00:06:39,660
0,360 360,600 600,1020
and then end

192
00:06:41,160 --> 00:06:42,740
0,360 390,840
or commit.|

193
00:06:47,590 --> 00:06:48,400
0,180 180,270 270,420 420,540 540,810
So we have a second

194
00:06:48,400 --> 00:06:49,780
0,450 450,540 540,990 990,1290 1290,1380
transaction that basically reads the

195
00:06:49,780 --> 00:06:50,950
0,360 360,510 510,600 600,960 960,1170
account x and y and

196
00:06:50,950 --> 00:06:53,020
0,210 210,270 270,930 1230,1650 1650,2070
prints the values| and one

197
00:06:53,020 --> 00:06:54,820
0,210 210,330 330,1440 1470,1650 1650,1800
reason that we have two

198
00:06:54,820 --> 00:06:55,870
0,600 600,690 690,840 840,930 930,1050
transactions,| so that we can

199
00:06:55,870 --> 00:06:57,370
0,180 180,300 300,390 390,750 750,1500
look from the concurrency perspective,|

200
00:06:57,580 --> 00:06:59,860
0,390 390,810 840,1470 1470,1800 1800,2280
how these transactions actually ordered,|

201
00:06:59,860 --> 00:07:01,120
0,210 210,420 420,750 750,1140 1140,1260
what are legal outcome and

202
00:07:01,120 --> 00:07:02,650
0,150 150,420 420,600 600,870 870,1530
what are {illegal -} outcomes.|

203
00:07:03,540 --> 00:07:05,130
0,450 600,1230 1230,1410 1410,1530 1530,1590
{} Transactions turned out to

204
00:07:05,130 --> 00:07:08,400
0,420 720,1410 1410,2310 2760,3150 3150,3270
be a general,| almost like

205
00:07:08,400 --> 00:07:10,050
0,300 300,480 480,600 600,1140 1170,1650
a piece of magic,| basically

206
00:07:10,050 --> 00:07:12,450
0,750 1110,1560 1560,1830 1830,2250 2250,2400
programmers {} can annotate these

207
00:07:12,450 --> 00:07:15,270
0,480 480,1170 1200,2490 2610,2760 2760,2820
begin {and,end} operations| and it

208
00:07:15,270 --> 00:07:16,200
0,180 180,270 270,630 630,870 870,930
takes a whole group of

209
00:07:16,200 --> 00:07:18,750
0,870 1050,1650 1650,1860 1860,1980 1980,2550
operations together make them atomic|

210
00:07:18,870 --> 00:07:19,830
0,180 180,360 360,420 420,840 840,960
and use the system will

211
00:07:19,830 --> 00:07:20,760
0,180 180,420 420,480 480,810 810,930
take care of everything,| it

212
00:07:20,760 --> 00:07:21,420
0,120 120,300 300,450 450,540 540,660
will take care of the

213
00:07:21,420 --> 00:07:22,890
0,630 780,990 990,1230 1230,1380 1380,1470
locking, will take care of

214
00:07:22,890 --> 00:07:24,390
0,90 90,840 900,1080 1080,1350 1350,1500
the recovery,| it's all like

215
00:07:24,390 --> 00:07:25,260
0,60 60,420 420,660 660,780 780,870
the program doesn't have to

216
00:07:25,260 --> 00:07:26,520
0,270 270,510 510,720 900,1170 1170,1260
worry about it,| but the

217
00:07:26,520 --> 00:07:27,960
0,510 510,600 600,720 720,1110 1110,1440
transactions are a very very

218
00:07:27,960 --> 00:07:30,580
0,750 780,1560 1590,2250
powerful {} construct,

219
00:07:30,980 --> 00:07:33,140
0,510 690,900 900,1080 1080,1620 1620,2160
{} and they're useful in

220
00:07:33,200 --> 00:07:34,670
0,330 330,750 750,1260 1260,1350 1350,1470
non distributed systems,| you know

221
00:07:34,670 --> 00:07:36,410
0,210 210,450 450,870 930,1290 1290,1740
you have a single database

222
00:07:36,410 --> 00:07:38,030
0,600 600,780 780,1020 1020,1200 1200,1620
machine or {multi-core -} database

223
00:07:38,030 --> 00:07:39,680
0,570 570,780 780,1200 1200,1260 1260,1650
machine| and clients are submitting

224
00:07:39,680 --> 00:07:41,390
0,570 570,720 720,930 1320,1530 1530,1710
transactions to it,| {} then

225
00:07:41,390 --> 00:07:42,980
0,60 60,510 510,990 990,1200 1200,1590
the transaction systems will execute

226
00:07:42,980 --> 00:07:44,330
0,150 150,750 750,990 990,1170 1170,1350
these transactions in as much

227
00:07:44,330 --> 00:07:46,190
0,150 150,600 600,690 690,1410 1560,1860
as concurrently as possible, {}|

228
00:07:46,190 --> 00:07:47,690
0,150 150,660 660,990 990,1140 1140,1500
but also even if machine

229
00:07:47,690 --> 00:07:48,980
0,360 360,420 420,630 630,900 900,1290
fails, it comes back up,|

230
00:07:49,010 --> 00:07:50,630
0,270 270,420 420,540 540,990 990,1620
{you,know} you can actually expect

231
00:07:50,870 --> 00:07:52,910
0,690 900,1470 1470,1830 1830,1920 1920,2040
{} the results to be

232
00:07:52,910 --> 00:07:53,700
0,420
there.|

233
00:07:54,080 --> 00:07:56,090
0,540 900,1380 1380,1710 1710,1800 1800,2010
And our focus of course

234
00:07:56,090 --> 00:07:57,740
0,60 60,180 180,240 240,690 870,1650
is going to be distributed

235
00:07:57,740 --> 00:07:59,220
0,810
transactions.|

236
00:08:02,430 --> 00:08:04,320
0,570 570,690 690,1200 1200,1560 1560,1890
After {you,know} wanted I had

237
00:08:04,320 --> 00:08:06,700
0,120 120,510 510,870 930,1800
the previous slide| namely

238
00:08:08,150 --> 00:08:09,860
0,330 330,660 660,990 990,1320 1320,1710
{} one example across shards

239
00:08:09,860 --> 00:08:11,240
0,150 150,270 270,480 480,840 840,1380
which is a common case

240
00:08:11,240 --> 00:08:13,720
0,390 390,1200 1200,1440 1440,1980
{} in data centers.|

241
00:08:14,220 --> 00:08:16,830
0,390 720,1320 1320,1920 1920,2070 2070,2610
{} {The,typical} API of transaction

242
00:08:16,830 --> 00:08:18,450
0,330 330,450 450,780 780,1020 1020,1620
also has one more operation

243
00:08:18,450 --> 00:08:19,800
0,330 330,390 390,630 630,930 930,1350
that I didn't list here,|

244
00:08:19,950 --> 00:08:21,210
0,450 450,630 630,720 720,780 780,1260
and that is {abort -},|

245
00:08:23,700 --> 00:08:25,080
0,180 180,270 270,420 420,1080 1080,1380
so the two transactions shown

246
00:08:25,080 --> 00:08:26,670
0,270 270,330 330,570 570,1110 1290,1590
here are both committing {},|

247
00:08:26,670 --> 00:08:28,200
0,180 180,300 300,630 630,870 870,1530
you could easily have transaction

248
00:08:28,200 --> 00:08:29,760
0,390 390,810 810,930 930,1410 1440,1560
that decides to abort,| you

249
00:08:29,760 --> 00:08:32,010
0,90 90,180 180,870 1110,1800 1800,2250
know, for example {} you

250
00:08:32,010 --> 00:08:35,880
0,660 660,1260 1260,1860 1920,3630 3630,3870
might discover that,| {for,example} transaction

251
00:08:35,880 --> 00:08:37,380
0,150 150,600 690,1020 1020,1350 1350,1500
{T1 -} might check the

252
00:08:37,380 --> 00:08:38,940
0,660 660,990 990,1290 1290,1380 1380,1560
{x,has} sufficient money in it

253
00:08:38,940 --> 00:08:40,170
0,180 180,270 270,750 1020,1170 1170,1230
in the account| and if

254
00:08:40,170 --> 00:08:41,820
0,120 120,780 810,1140 1140,1440 1440,1650
have the account doesn't have

255
00:08:41,820 --> 00:08:43,920
0,450 450,900 1020,1560 1560,2040 2040,2100
sufficient money,| {} instead of

256
00:08:43,920 --> 00:08:45,150
0,390 390,780 780,960 960,1080 1080,1230
calling commit, it would call

257
00:08:45,150 --> 00:08:47,310
0,120 120,540 690,1080 1110,1770 1770,2160
{abort -}| and {at,that,point -}

258
00:08:47,310 --> 00:08:49,680
0,690 810,1080 1080,1500 1530,1800 1800,2370
{the,transaction} {} would be cancelled|

259
00:08:50,010 --> 00:08:51,420
0,540 540,810 810,900 900,960 960,1410
and even if the transaction

260
00:08:51,420 --> 00:08:52,350
0,510 510,630 630,720 720,870 870,930
aborts,| you know sort of

261
00:08:52,350 --> 00:08:53,970
0,420 420,1020 1080,1230 1230,1470 1470,1620
halfway through| and maybe has

262
00:08:53,970 --> 00:08:55,920
0,180 180,450 450,660 660,1500 1560,1950
done some put operations, {}|

263
00:08:55,920 --> 00:08:57,270
0,450 450,540 540,960 960,1110 1110,1350
{the,still} the semantics should be

264
00:08:57,270 --> 00:08:58,500
0,450 480,780 780,870 870,1050 1050,1230
that none of those put

265
00:08:58,500 --> 00:09:00,080
0,540 540,810 810,1290
operations actually happened.|

266
00:09:00,730 --> 00:09:02,680
0,510 930,1200 1200,1350 1350,1500 1500,1950
{} So in all cases

267
00:09:02,680 --> 00:09:04,030
0,210 210,330 330,390 390,960 990,1350
where it's {abort -} or

268
00:09:04,030 --> 00:09:05,890
0,510 660,1110 1110,1590 1590,1770 1770,1860
commit,| {} either all of

269
00:09:05,890 --> 00:09:06,820
0,90 90,420 420,600 600,840 840,930
them happen or none of

270
00:09:06,820 --> 00:09:08,830
0,150 150,420 690,1200 1200,1560 1560,2010
them happen, never partial result.|

271
00:09:09,710 --> 00:09:11,510
0,510 720,1290 1290,1500 1500,1680 1680,1800
{} Abort also might be

272
00:09:11,510 --> 00:09:13,310
0,570 600,930 930,1080 1080,1530 1530,1800
called by the transaction system

273
00:09:13,310 --> 00:09:15,500
0,720 960,1290 1290,1470 1470,2010 2010,2190
itself,| {} for example as

274
00:09:15,500 --> 00:09:17,360
0,120 120,300 300,750 750,1410 1680,1860
we'll see later,| if a

275
00:09:17,360 --> 00:09:19,130
0,270 270,690 870,1110 1110,1710 1710,1770
there's a, {} there's a

276
00:09:19,130 --> 00:09:21,260
0,570 570,870 870,960 960,1710 1860,2130
deadlock between two transactions,| then

277
00:09:21,260 --> 00:09:22,460
0,90 90,510 510,810 810,1080 1080,1200
the transaction system actually can

278
00:09:22,460 --> 00:09:24,020
0,390 390,570 570,660 660,750 750,1560
abort one of the transactions,|

279
00:09:24,170 --> 00:09:25,910
0,750 750,930 930,1290 1380,1560 1560,1740
{} in the, so that

280
00:09:25,910 --> 00:09:27,440
0,150 150,360 360,750 750,1410 1410,1530
the other transaction continue and

281
00:09:27,440 --> 00:09:28,970
0,240 240,330 330,750 750,1260 1320,1530
maybe {} retry later, {}|

282
00:09:28,970 --> 00:09:30,200
0,150 150,600 600,720 720,840 840,1230
the transaction that was abort.|

283
00:09:31,870 --> 00:09:33,250
0,630 840,1020 1020,1140 1140,1290 1290,1380
{} Okay, so this is

284
00:09:33,250 --> 00:09:35,560
0,390 390,1080 1080,1260 1260,1680 1680,2310
a primitives,| {you,know} {begin_x -}

285
00:09:35,560 --> 00:09:38,710
0,450 600,990 990,1470 2130,2760 2760,3150
commit and abort {three,key} {}

286
00:09:39,070 --> 00:09:42,130
0,600 930,2100 2490,2820 2820,2970 2970,3060
interface operations,| and then the

287
00:09:42,130 --> 00:09:46,360
0,780 810,1500 1980,3540 3540,3660 3660,4230
semantics of transactions are typically

288
00:09:46,360 --> 00:09:47,640
0,900
summarized

289
00:09:47,640 --> 00:09:50,160
0,750 750,1290 1290,1560 1560,2010 2040,2520
by a single word, namely

290
00:09:50,160 --> 00:09:51,360
0,570
ACID,|

291
00:09:53,570 --> 00:09:55,550
0,540 540,1170 1170,1470 1470,1650 1650,1980
and { -} that stands

292
00:09:55,550 --> 00:09:57,560
0,330 330,900 900,1320 1320,1860 1860,2010
for four key properties with

293
00:09:57,560 --> 00:09:59,740
0,810 840,1650
transactions.| One

294
00:10:00,370 --> 00:10:01,880
0,150 150,840
it's atomic,|

295
00:10:04,640 --> 00:10:06,290
0,270 270,540 540,810 810,1260 1260,1650
and here really atomic refers

296
00:10:06,290 --> 00:10:07,490
0,150 150,450 450,810 810,1110 1110,1200
to the case where we

297
00:10:07,490 --> 00:10:09,650
0,120 120,300 300,810 810,1290 1530,2160
have two transactions running, {}|

298
00:10:09,650 --> 00:10:11,450
0,330 330,540 540,930 930,1110 1110,1800
and one transaction does multiple

299
00:10:11,480 --> 00:10:13,850
0,1050 1050,1140 1140,1440 1440,1590 1590,2370
{put,operations} or multiple add operations,|

300
00:10:13,970 --> 00:10:15,260
0,270 270,540 540,750 750,1080 1080,1290
{} all those results will

301
00:10:15,260 --> 00:10:16,700
0,150 150,450 450,1080 1170,1320 1320,1440
be,| all visible to the

302
00:10:16,700 --> 00:10:18,020
0,150 150,630 630,750 750,1140 1140,1320
other transaction or none of

303
00:10:18,020 --> 00:10:19,400
0,210 210,360 360,450 450,900
them will be visible,|

304
00:10:19,660 --> 00:10:21,160
0,270 270,420 420,630 630,870 870,1500
{} so that's one aspect,

305
00:10:21,460 --> 00:10:23,400
0,570 750,1380
sorry, um,|

306
00:10:26,870 --> 00:10:27,890
0,240 240,390 390,630 630,840 840,1020
I say this, I said

307
00:10:27,890 --> 00:10:28,970
0,150 150,240 240,660 660,930 960,1080
this is wrong,| so the

308
00:10:28,970 --> 00:10:29,990
0,240 240,420 420,600 600,750 750,1020
actomic actually means to crash

309
00:10:29,990 --> 00:10:32,870
0,390 390,900 1140,1560 1560,2010 2010,2880
recovery case,| {} so, {}

310
00:10:32,900 --> 00:10:34,880
0,330 330,420 420,840 840,1170 1560,1980
if a transaction actually multiple

311
00:10:34,880 --> 00:10:37,370
0,180 180,1020 1080,1650 1680,2100 2100,2490
put operations,| the transaction crashes

312
00:10:37,370 --> 00:10:39,500
0,810 960,1620
halfway, {}|

313
00:10:39,560 --> 00:10:41,570
0,630 660,1080 1080,1320 1320,1770 1770,2010
the rule is that all

314
00:10:41,570 --> 00:10:43,190
0,120 120,360 360,450 450,1080 1110,1620
the writes are visible,| all

315
00:10:43,190 --> 00:10:44,510
0,210 210,510 510,750 750,1050 1050,1320
writes around a stable storage

316
00:10:44,510 --> 00:10:45,580
0,60 60,270 270,480
or none {of,them},|

317
00:10:45,760 --> 00:10:47,380
0,270 270,750 780,1230 1230,1320 1320,1620
was the atomics with respect

318
00:10:47,380 --> 00:10:49,060
0,60 60,390 390,1050
to crash recovery.|

319
00:10:49,060 --> 00:10:51,550
0,570 1050,1440 1440,2040 2040,2340 2340,2490
{} The C stands for

320
00:10:51,550 --> 00:10:52,860
0,600
consistent,|

321
00:10:53,090 --> 00:10:54,080
0,180 180,390 390,450 450,780 780,990
{} which is something we're

322
00:10:54,080 --> 00:10:55,010
0,390 390,510 510,630 630,690 690,930
emotionally not going to talk

323
00:10:55,010 --> 00:10:56,990
0,420 690,1260 1260,1470 1470,1680 1680,1980
about,| {} it's more related

324
00:10:56,990 --> 00:10:58,850
0,60 60,930 1110,1440 1440,1620 1620,1860
to databases,| {} it's often

325
00:10:58,850 --> 00:10:59,870
0,60 60,360 360,480 480,870 870,1020
the case that database have

326
00:10:59,870 --> 00:11:02,630
0,600 600,1260 1260,1500 1500,2100 2100,2760
internal variants,| like referential integrity,

327
00:11:02,900 --> 00:11:04,310
0,510 510,750 750,930 930,1050 1050,1410
{} is one of them|

328
00:11:04,460 --> 00:11:06,740
0,690 690,1050 1050,1320 1320,1890 1890,2280
and {} the transaction {}

329
00:11:06,740 --> 00:11:08,900
0,330 330,780 780,1170 1200,1980 1980,2160
is supposed to maintain that

330
00:11:08,900 --> 00:11:10,020
0,660
consistency,|

331
00:11:10,320 --> 00:11:12,030
0,210 210,390 390,780 780,1170 1170,1710
and so no internal {consistencies

332
00:11:12,030 --> 00:11:13,320
0,240 690,960 960,1020 1020,1110 1110,1290
-},| {this,is,going} to be less

333
00:11:13,320 --> 00:11:14,130
0,90 90,120 120,510 510,690 690,810
of a topic for {us

334
00:11:14,130 --> 00:11:16,230
0,180 180,750 1050,1320 1320,1830 1830,2100
-} today.| The three is

335
00:11:16,230 --> 00:11:18,930
0,810 1200,1440 1440,1680 1680,2070 2070,2700
isolated, the I {stands,for} isolated,|

336
00:11:23,100 --> 00:11:25,770
0,360 360,840 840,2040 2070,2550 2550,2670
and isolated was what I

337
00:11:25,770 --> 00:11:27,300
0,150 150,360 360,930 930,1050 1050,1530
just said earlier {} incorrectly,|

338
00:11:27,300 --> 00:11:28,320
0,390 390,600 600,870 870,930 930,1020
isolated actually refers to the

339
00:11:28,320 --> 00:11:30,000
0,270 270,480 480,720 720,870 870,1680
case, we're running two transactions|

340
00:11:30,270 --> 00:11:32,730
0,720 720,1290 1290,1890 1890,2160 2160,2460
and {} they don't see,

341
00:11:32,730 --> 00:11:34,350
0,210 210,480 480,870 870,1320 1320,1620
they should observe intermediate results

342
00:11:34,350 --> 00:11:35,670
0,120 120,240 240,510 540,720 720,1320
from each other,| so again

343
00:11:35,730 --> 00:11:38,610
0,300 300,810 810,930 930,1650 1920,2880
{} {all,the,writes} are applied, {}|

344
00:11:39,600 --> 00:11:42,030
0,540 540,720 720,1350 1860,2010 2010,2430
all or nothing with respect

345
00:11:42,030 --> 00:11:43,650
0,60 60,750 750,840 840,1020 1020,1620
to disability to another transactions.|

346
00:11:44,500 --> 00:11:46,330
0,270 270,720 720,1110 1200,1590 1590,1830
And finally, the D stands

347
00:11:46,330 --> 00:11:48,060
0,90 90,780
for durable,|

348
00:11:49,410 --> 00:11:50,670
0,420 420,570 570,750 750,810 810,1260
meaning that if the transaction

349
00:11:50,670 --> 00:11:51,760
0,600
commits,|

350
00:11:51,760 --> 00:11:53,410
0,300 300,720 720,1170 1200,1560 1560,1650
{} then the results are

351
00:11:53,410 --> 00:11:54,970
0,300 300,720 720,810 810,1110 1110,1560
written to a stable storage,|

352
00:11:54,970 --> 00:11:55,840
0,120 120,270 270,480 480,540 540,870
so that if the system

353
00:11:55,840 --> 00:11:57,520
0,570 570,780 780,1020 1020,1170 1170,1680
crashes, comes back up later,|

354
00:11:57,700 --> 00:12:00,220
0,540 540,1050 1080,1500 1500,2130 2160,2520
the {} latest writes or

355
00:12:00,220 --> 00:12:01,750
0,90 90,390 390,1140 1140,1230 1230,1530
the latest transactions,| the latest

356
00:12:01,750 --> 00:12:04,120
0,300 300,1020 1050,1470 1470,1770 1770,2370
committed transactions are actually recorded

357
00:12:04,120 --> 00:12:05,700
0,210 210,510 510,1140
on stable storage.|

358
00:12:08,420 --> 00:12:10,610
0,210 210,840 900,1410 1410,1920 1920,2190
Any questions {} about a

359
00:12:10,610 --> 00:12:12,640
0,240 240,690 690,780 780,1500
quick introduction to transactions?|

360
00:12:22,210 --> 00:12:23,440
0,390 390,570 570,660 660,870 870,1230
Okay, so I'm gonna talk

361
00:12:23,470 --> 00:12:26,770
0,600 600,930 930,1350 1350,2130 2160,3300
basically about two topics {}

362
00:12:26,980 --> 00:12:28,810
0,570 570,600 600,930 930,1380 1380,1830
quite a bit,| namely the,

363
00:12:29,260 --> 00:12:30,970
0,360 360,780 810,930 930,1590 1590,1710
{A,part} of the transactions in

364
00:12:30,970 --> 00:12:32,950
0,120 120,390 390,840 870,1200 1200,1980
the eye part of transactions,|

365
00:12:33,070 --> 00:12:34,540
0,330 330,450 450,840 840,1020 1020,1470
we're gonna start with the

366
00:12:35,060 --> 00:12:37,190
0,180 180,780 1170,1920 1920,2100 2100,2130
I part| and talk a

367
00:12:37,190 --> 00:12:38,660
0,180 180,330 330,660 660,930 930,1470
little bit about what actually

368
00:12:38,660 --> 00:12:40,540
0,360 360,870 870,1380
correct isolation means.|

369
00:12:44,420 --> 00:12:45,440
0,150 150,450 450,630 630,690 690,1020
So basically what we're looking

370
00:12:45,440 --> 00:12:48,260
0,600 630,810 810,870 870,1710 2040,2820
for| is a definition for

371
00:12:48,260 --> 00:12:49,910
0,150 150,480 480,1080 1080,1230 1230,1650
a correct execution of multiple

372
00:12:49,910 --> 00:12:52,240
0,600 660,990 990,1860
transactions, {for,concurrency} transactions.|

373
00:12:52,330 --> 00:12:54,520
0,270 270,660 750,1440 1440,1980 1980,2190
In the typical definition or

374
00:12:54,520 --> 00:12:56,170
0,390 390,930 930,1140 1140,1200 1200,1650
gold standard in the database

375
00:12:56,170 --> 00:12:58,270
0,750 870,1320 1320,1620 1620,2040 2040,2100
literature| {I,is} called {serializable -

376
00:12:58,270 --> 00:12:59,200
0,330
-}

377
00:13:05,260 --> 00:13:07,160
0,210 210,360 360,1110
or {serializability -},|

378
00:13:08,980 --> 00:13:10,150
0,330 330,450 450,630 630,960 960,1170
and what that means is

379
00:13:10,150 --> 00:13:10,960
0,300 300,450 450,540 540,660 660,810
that,| if you have two

380
00:13:10,960 --> 00:13:13,330
0,750 960,1230 1230,1530 1530,2160 2160,2370
transactions or many transactions,| they

381
00:13:13,330 --> 00:13:16,720
0,450 450,1200 1560,2400 2490,2760 2760,3390
execute concurrently,| then the outcome

382
00:13:17,080 --> 00:13:18,460
0,360 360,450 450,690 690,960 960,1380
has to be some serial

383
00:13:18,460 --> 00:13:19,500
0,570
order,|

384
00:13:20,080 --> 00:13:22,960
0,420 450,1080 1140,1410 1410,2010 2130,2880
so either {t1 -} executes

385
00:13:23,050 --> 00:13:25,690
0,390 390,630 630,1080 1680,2340 2370,2640
before {t2 -} or {t2

386
00:13:25,690 --> 00:13:27,910
0,300 300,1050 1080,1620 1620,2100 2100,2220
-} executes before t1, {}|

387
00:13:27,910 --> 00:13:30,250
0,210 210,630 750,1200 1200,1500 1500,2340
there's some serial or serial

388
00:13:30,250 --> 00:13:31,460
0,540
order,|

389
00:13:35,910 --> 00:13:38,760
0,630 1050,1590 1590,1890 1890,2610 2610,2850
and the serial order has

390
00:13:38,760 --> 00:13:39,930
0,90 90,420 420,510 510,750 750,1170
to produce the same outcome

391
00:13:43,150 --> 00:13:44,710
0,210 210,270 270,630 630,1170 1170,1560
as the concurrent execution,| so

392
00:13:44,740 --> 00:13:46,180
0,120 120,210 210,450 450,900 1140,1440
you get run two {}

393
00:13:46,180 --> 00:13:47,830
0,540 540,1080 1080,1200 1200,1560 1560,1650
transaction concurrently,| they produce an

394
00:13:47,830 --> 00:13:49,720
0,600 720,990 990,1260 1260,1410 1410,1890
outcome, that outcome which only

395
00:13:49,750 --> 00:13:51,760
0,720 720,870 870,1320 1320,1500 1500,2010
valid or legal or correct,|

396
00:13:51,940 --> 00:13:53,500
0,660 660,810 810,960 960,1110 1110,1560
if it could have been

397
00:13:53,770 --> 00:13:55,270
0,300 300,600 600,1140 1140,1410 1410,1500
{} the result of a

398
00:13:55,270 --> 00:13:56,760
0,360 360,990
serial execution.|

399
00:13:57,500 --> 00:13:58,970
0,510 540,840 840,900 900,1080 1080,1470
So just to make {}

400
00:13:58,970 --> 00:14:01,310
0,540 540,780 780,1500 1560,1980 1980,2340
concrete,| for example, let's say

401
00:14:01,310 --> 00:14:02,930
0,330 330,450 450,810 810,1260 1260,1620
in the account case x

402
00:14:02,930 --> 00:14:05,150
0,570 570,690 690,840 840,1320 1440,2220
starts out as being 10,|

403
00:14:05,300 --> 00:14:06,560
0,420 420,750 750,900 900,1020 1020,1260
y starts out as being

404
00:14:06,560 --> 00:14:08,930
0,600 1290,1530 1530,1650 1650,2160 2190,2370
10,| {} we run {}

405
00:14:08,930 --> 00:14:10,070
0,240 240,390 390,900 900,1020 1020,1140
these two transactions that we

406
00:14:10,070 --> 00:14:11,570
0,240 240,840 840,990 990,1050 1050,1500
had earlier on the board,|

407
00:14:12,080 --> 00:14:12,830
0,180 180,420 420,510 510,660 660,750
here might be what the

408
00:14:12,830 --> 00:14:14,930
0,150 150,630 630,1110 1470,1650 1650,2100
two transactions are| and one

409
00:14:14,930 --> 00:14:17,720
0,630 1200,1860 1860,2310 2310,2640 2640,2790
basically moves one between two

410
00:14:17,720 --> 00:14:18,680
0,480 480,570 570,630 630,780 780,960
accounts| and the other one

411
00:14:18,680 --> 00:14:19,550
0,270 270,360 360,720 720,780 780,870
prints the results of the

412
00:14:19,550 --> 00:14:20,220
0,240
two.|

413
00:14:21,400 --> 00:14:21,970
0,210 210,270 270,330 330,510 510,570
So if you think a

414
00:14:21,970 --> 00:14:23,410
0,300 300,420 420,660 660,1170 1170,1440
little bit about it,| {if,t1}

415
00:14:23,410 --> 00:14:24,860
0,240 240,960
goes first,|

416
00:14:24,860 --> 00:14:26,150
0,570 570,720 720,1020 1020,1140 1140,1290
then the outcome is gonna

417
00:14:26,150 --> 00:14:29,060
0,480 510,1260 1440,2130
be {9,10 -},|

418
00:14:29,720 --> 00:14:31,400
0,480 480,570 570,780 780,1320 1320,1680
and the print statement is

419
00:14:31,400 --> 00:14:33,740
0,150 150,240 240,990 1020,1770
going to be {},|

420
00:14:40,240 --> 00:14:41,950
0,450 450,990 990,1200 1200,1530 1530,1710
{} yeah, and the print

421
00:14:41,950 --> 00:14:43,870
0,420 510,870 870,1170 1170,1530 1530,1920
state actually there's {9,10 -},|

422
00:14:43,870 --> 00:14:45,640
0,300 330,720 720,1350 1410,1590 1590,1770
sorry {9,11 -}, that's why

423
00:14:45,640 --> 00:14:47,000
0,60 60,210 210,810
I got confused,|

424
00:14:47,540 --> 00:14:48,380
0,180 180,240 240,420 420,750 750,840
and the print statement is

425
00:14:48,380 --> 00:14:50,720
0,210 210,330 330,600 630,1380 1860,2340
also going to say x

426
00:14:50,720 --> 00:14:51,890
0,420 450,690 690,930 930,1050 1050,1170
was the one that was

427
00:14:51,890 --> 00:14:54,020
0,510 510,720 720,1020 1020,1410
substract, so {9,11 -},|

428
00:14:54,570 --> 00:14:55,650
0,270 270,390 390,510 510,570 570,1080
so we get the string

429
00:14:55,650 --> 00:14:57,270
0,270 270,600 600,990 1050,1500 1500,1620
{9,11 -} out| and two

430
00:14:57,270 --> 00:14:58,620
0,330 330,420 420,810 810,870 870,1350
dollars of {the,accounts} are 9

431
00:14:58,920 --> 00:15:02,070
0,840 840,1410 1500,2310 2310,2730 2730,3150
{9,11 -},| {} if two

432
00:15:02,220 --> 00:15:04,110
0,240 240,450 450,720 720,1290 1380,1890
{t2 -} goes first,| then

433
00:15:04,110 --> 00:15:05,280
0,120 120,600 600,990 990,1080 1080,1170
the outcome is you know

434
00:15:05,280 --> 00:15:07,770
0,1290 1410,1950 1950,2100 2100,2340 2340,2490
{10,10,},| {because,nothing} no money has

435
00:15:07,770 --> 00:15:10,470
0,270 270,660 1020,1290 1290,1890 2100,2700
moved yet| and then {}

436
00:15:11,190 --> 00:15:12,630
0,300 300,570 570,810 810,1170 1170,1440
{t1 -} goes,| so that's

437
00:15:12,630 --> 00:15:14,060
0,60 60,450 450,840
a possible outcome.|

438
00:15:14,960 --> 00:15:16,130
0,270 270,360 360,660 660,780 780,1170
And so that's the two

439
00:15:16,130 --> 00:15:18,380
0,720 720,1440 1440,1530 1530,1620 1620,2250
legal outcomes of the transaction,|

440
00:15:18,380 --> 00:15:20,630
0,150 150,360 360,900 900,1170 1530,2250
that we're actually, { -}

441
00:15:20,960 --> 00:15:22,400
0,180 180,330 330,1080 1080,1230 1230,1440
if we executed the two

442
00:15:22,400 --> 00:15:25,070
0,450 450,1050 1050,1620 1830,2220 2220,2670
transactions concurrently| and {} the

443
00:15:25,100 --> 00:15:27,460
0,390 390,1020 1020,1440 1440,1860
system guarantees {serializability -},|

444
00:15:27,690 --> 00:15:29,430
0,510 690,900 900,1230 1230,1350 1350,1740
now you notice that {serializability

445
00:15:29,430 --> 00:15:31,110
0,600 720,1200 1200,1440 1440,1500 1500,1680
-} has probably a lot

446
00:15:31,110 --> 00:15:33,660
0,960 1080,1830 1830,1980 1980,2250 2250,2550
of flavor| of like the

447
00:15:33,690 --> 00:15:35,040
0,600 600,720 720,810 810,1020 1020,1350
terminology that we used before

448
00:15:35,040 --> 00:15:36,920
0,390 390,690 690,840 840,1320
namely {linearizability - -},|

449
00:15:36,950 --> 00:15:38,540
0,240 240,540 540,870 870,1140 1140,1590
the key difference between {serializability

450
00:15:38,540 --> 00:15:40,160
0,480 480,630 630,870 870,1020 1020,1620
-} and {linearizability - -}

451
00:15:40,160 --> 00:15:41,420
0,150 150,480 480,780 780,1080 1080,1260
is that| in {linearizability -

452
00:15:41,420 --> 00:15:42,830
0,360 360,570 570,810 810,1050 1050,1410
-}, there's a {real-time -},

453
00:15:42,920 --> 00:15:45,080
0,510 540,1050 1050,1560 1560,1830 1830,2160
a real-time component,| that if

454
00:15:45,230 --> 00:15:47,420
0,150 150,300 300,630 630,1350 1380,2190
it was actually to start

455
00:15:47,450 --> 00:15:49,430
0,570 570,720 720,990 990,1380 1380,1980
after {} {t1 -} ends,|

456
00:15:49,520 --> 00:15:51,260
0,720 750,1050 1050,1290 1290,1650 1650,1740
then {t2 -} has to

457
00:15:51,260 --> 00:15:52,250
0,210 210,360 360,750 750,930 930,990
show up later in the

458
00:15:52,250 --> 00:15:53,900
0,300 300,690 720,960 960,1290 1290,1650
total order, in {the,serial} order,|

459
00:15:54,200 --> 00:15:55,550
0,300 300,690 690,1080 1080,1260 1260,1350
in {serializability -} that is

460
00:15:55,550 --> 00:15:57,080
0,270 270,840 870,1080 1080,1410 1410,1530
not required,| so even if

461
00:15:57,080 --> 00:15:59,690
0,480 480,960 1200,1860 1860,2160 2160,2610
transaction started were clock time

462
00:15:59,690 --> 00:16:01,130
0,270 270,420 420,900 900,1050 1050,1440
little bit later than another

463
00:16:01,130 --> 00:16:03,650
0,660 840,1350 1350,1440 1440,1950 2160,2520
transaction stopped or finished| and

464
00:16:03,650 --> 00:16:05,570
0,420 600,1020 1020,1110 1110,1410 1410,1920
the system is still allowed

465
00:16:05,600 --> 00:16:07,040
0,450 450,900 900,1140
to reward it,|

466
00:16:07,980 --> 00:16:09,540
0,510 540,1050 1050,1290 1290,1380 1380,1560
so serializability build in some

467
00:16:09,540 --> 00:16:10,830
0,300 300,420 420,570 570,720 720,1290
ways a little bit weaker

468
00:16:10,860 --> 00:16:12,510
0,540 570,750 750,990 990,1200 1200,1650
than {} {linearizability - -},|

469
00:16:13,610 --> 00:16:16,250
0,510 570,1650 1680,2190 2190,2550 2550,2640
{} nevertheless, {serializability -} is

470
00:16:16,250 --> 00:16:18,560
0,60 60,450 450,1200 1230,1830 1830,2310
a very convenient programming idea

471
00:16:18,620 --> 00:16:20,360
0,300 300,870 1110,1470 1470,1620 1620,1740
right,| because {} from a

472
00:16:20,360 --> 00:16:22,250
0,390 390,1080 1230,1440 1440,1560 1560,1890
programming perspective,| you could always

473
00:16:22,250 --> 00:16:23,960
0,210 210,480 480,1080 1080,1590 1590,1710
think about transactions executing in

474
00:16:23,960 --> 00:16:25,560
0,300 300,720 720,1140
some serial order,|

475
00:16:25,990 --> 00:16:26,680
0,270 270,360 360,540 540,630 630,690
and you don't have to

476
00:16:26,680 --> 00:16:28,900
0,390 390,540 540,720 720,900 1080,2220
consider all kinds of interleavings.|

477
00:16:31,330 --> 00:16:33,220
0,300 300,450 450,660 660,1200 1200,1890
Okay, so even though {}

478
00:16:34,030 --> 00:16:36,400
0,450 450,720 720,1230 1230,2040 2040,2370
{serializability -} slightly weaker than

479
00:16:36,400 --> 00:16:39,310
0,540 540,1140 1230,1770 1770,2010 2010,2910
{linearizability -},| {} it actually

480
00:16:39,340 --> 00:16:41,020
0,1110 1110,1140 1140,1380 1380,1590 1590,1680
disallows a whole bunch of

481
00:16:41,020 --> 00:16:42,580
0,510 510,1200
problematic cases.|

482
00:16:43,630 --> 00:16:44,920
0,240 240,390 390,810 930,1230 1230,1290
So let me talk a

483
00:16:44,920 --> 00:16:45,910
0,210 210,330 330,570 570,840 840,990
little bit about that just

484
00:16:45,910 --> 00:16:47,640
0,60 60,210 210,870
to make clear,|

485
00:16:47,700 --> 00:16:49,410
0,390 390,420 420,690 690,1230 1230,1710
there's a lot actually {serializability

486
00:16:49,410 --> 00:16:50,960
0,360 360,960
-} means,|

487
00:16:51,680 --> 00:16:54,050
0,600 1140,1620 1620,2130 2130,2280 2280,2370
{} and what sort of

488
00:16:54,050 --> 00:16:57,230
0,840 840,1710 1710,2550 2550,2700 2700,3180
executions the transactions, the transaction

489
00:16:57,230 --> 00:16:58,640
0,300 300,540 540,750 750,840 840,1410
system actually has to forbid.|

490
00:16:59,090 --> 00:17:00,640
0,810

491
00:17:00,730 --> 00:17:02,620
0,240 240,1170 1200,1650 1650,1770 1770,1890
And, so let's you know

492
00:17:02,620 --> 00:17:04,420
0,180 180,870 870,1080 1080,1350 1350,1800
two cases,| like here we

493
00:17:04,900 --> 00:17:06,340
0,900
have

494
00:17:06,370 --> 00:17:08,020
0,270 270,540 540,1260 1260,1470 1470,1650
the first transaction,| we have

495
00:17:08,020 --> 00:17:10,580
0,150 150,420 420,1140 1320,1980
the second transaction running,|

496
00:17:11,270 --> 00:17:13,010
0,420 630,810 810,1080 1080,1530 1530,1740
so {t1 -} runs, {t2

497
00:17:13,010 --> 00:17:15,590
0,540 1080,1770 2130,2250 2250,2340 2340,2580
-}| and you know one

498
00:17:15,590 --> 00:17:16,850
0,450 450,570 570,660 660,810 810,1260
outcome that we could have

499
00:17:16,850 --> 00:17:19,490
0,480 480,600 600,990 1230,1860 1860,2640
is like one possible execution,|

500
00:17:19,700 --> 00:17:21,020
0,180 180,510 510,750 750,1080 1080,1320
{} that might happen is

501
00:17:21,020 --> 00:17:22,280
0,600 630,720 720,840 840,1050 1050,1260
if we if we don't

502
00:17:22,280 --> 00:17:23,780
0,90 90,360 360,960 1110,1320 1320,1500
do something special,| you know

503
00:17:23,780 --> 00:17:26,660
0,240 240,780 1500,2010 2010,2250 2250,2880
{t1 -} {} gets x,|

504
00:17:28,790 --> 00:17:29,930
0,120 120,510 510,720 720,1020 1020,1140
{} you know here the

505
00:17:29,930 --> 00:17:32,300
0,480 480,1140 1170,1620 1800,1950 1950,2370
transfer happens,| so the updates

506
00:17:32,300 --> 00:17:34,360
0,300 300,540 540,600 600,1080
actually {y -} happen,|

507
00:17:35,290 --> 00:17:36,460
0,180 180,570 570,660 660,840 840,1170
and then you know {t2

508
00:17:36,460 --> 00:17:39,700
0,540 870,1620 1620,1860 1860,2580
-} does get y,|

509
00:17:40,240 --> 00:17:42,400
0,750 780,1470 1470,1590 1740,2010 2010,2160
and {} you know, is

510
00:17:42,400 --> 00:17:43,750
0,180 180,660 660,1050 1050,1170 1170,1350
this illegal or is this

511
00:17:43,750 --> 00:17:45,430
0,240 240,720 720,900 900,1470 1470,1680
a serializable, is this a

512
00:17:45,430 --> 00:17:47,260
0,660 660,1170
serializable execution.|

513
00:17:47,260 --> 00:17:48,430
0,210 210,510 510,870 870,1020 1020,1170
That's {sort,of} question we have

514
00:17:48,430 --> 00:17:50,350
0,120 120,690 1260,1530 1530,1860 1860,1920
to ask| and what is

515
00:17:50,350 --> 00:17:51,430
0,120 120,480 480,600 600,750 750,1080
the answer to that one.|

516
00:17:54,420 --> 00:17:55,980
0,240 240,510 510,690 690,1080 1080,1560
{} This is not {serializable

517
00:17:55,980 --> 00:17:56,900
0,390
-}.|

518
00:17:57,220 --> 00:17:58,660
0,690 690,930 930,1230 1230,1350 1350,1440
Yeah, and because you know

519
00:17:58,660 --> 00:17:59,890
0,150 150,780 780,870 870,1050 1050,1230
the outcome,| you know if

520
00:17:59,890 --> 00:18:00,730
0,210 210,420 420,600 600,720 720,840
we write down what the

521
00:18:00,730 --> 00:18:01,750
0,300 300,450 450,720 720,870 870,1020
outcome is, correct,| then the

522
00:18:01,750 --> 00:18:02,950
0,270 270,360 360,510 510,660 660,1200
outcome is gonna be {9,11

523
00:18:03,370 --> 00:18:05,290
0,450 450,1140 1260,1650 1650,1830 1830,1920
-} here,| and this is

524
00:18:05,290 --> 00:18:08,080
0,150 150,270 270,540 540,1350 1590,2790
going to write down a

525
00:18:08,110 --> 00:18:10,580
0,2040
{10,11,,right.}|

526
00:18:11,490 --> 00:18:12,800
0,90 90,270 270,750
I think so.|

527
00:18:12,860 --> 00:18:13,820
0,210 210,300 300,390 390,480 480,960
And if we go back

528
00:18:14,060 --> 00:18:15,260
0,120 120,270 270,570 570,990 990,1200
to our previous slides,| that

529
00:18:15,260 --> 00:18:16,010
0,120 120,360 360,570 570,660 660,750
is not one of the

530
00:18:16,010 --> 00:18:18,500
0,240 240,540 540,1230 1320,1770 1950,2490
two legal outcomes, right,| so

531
00:18:18,530 --> 00:18:20,060
0,180 180,300 300,600 600,960
this is not good.|

532
00:18:20,330 --> 00:18:21,800
0,180 180,450 450,900 930,1170 1170,1470
So when we think about

533
00:18:21,800 --> 00:18:23,030
0,60 60,630 630,720 720,780 780,1230
the implications of a transaction

534
00:18:23,030 --> 00:18:24,650
0,570 870,1230 1230,1440 1440,1530 1530,1620
system,| it has to be

535
00:18:24,650 --> 00:18:25,790
0,90 90,420 420,570 570,720 720,1140
the case that it forbids

536
00:18:25,790 --> 00:18:29,060
0,210 210,960 990,1830 1920,2550 2580,3270
this particular execution {} schedule.|

537
00:18:29,860 --> 00:18:30,940
0,90 90,510 510,720 720,780 780,1080
You know there's a similar

538
00:18:30,940 --> 00:18:32,470
0,420 600,780 780,1230 1230,1320 1320,1530
version,| our transactions for these

539
00:18:32,470 --> 00:18:33,340
0,210 210,570 570,630 630,780 780,870
two examples are not so

540
00:18:33,340 --> 00:18:34,600
0,540 540,690 690,870 870,1080 1080,1260
complicated,| so they're not that

541
00:18:34,600 --> 00:18:35,320
0,210 210,300 300,390 390,540 540,720
many in the {leavings -}

542
00:18:35,320 --> 00:18:37,060
0,60 60,180 180,450 870,1590 1590,1740
you have to,| you, you

543
00:18:37,060 --> 00:18:38,440
0,120 120,480 480,570 570,930 930,1380
could consider {that,could,go -} wrong,|

544
00:18:38,590 --> 00:18:39,760
0,390 390,570 570,690 690,870 870,1170
but there's at least one

545
00:18:39,760 --> 00:18:41,740
0,180 180,630 660,960 960,1350 1560,1980
other one,| that can result

546
00:18:41,740 --> 00:18:43,720
0,300 330,810 810,930 930,1410 1410,1980
in not an incorrect outcome,|

547
00:18:43,900 --> 00:18:46,090
0,300 300,780 1020,1500 1500,1650 1650,2190
which is {} we {do,the}

548
00:18:46,730 --> 00:18:49,520
0,510 540,930 930,1500
put x first,|

549
00:18:50,040 --> 00:18:51,660
0,390 390,600 600,900 900,990 990,1620
{} so here we go,|

550
00:18:52,550 --> 00:18:54,290
0,570 570,1170 1170,1260 1260,1410 1410,1740
{} then you know we

551
00:18:54,290 --> 00:18:56,000
0,300 300,690 690,840 840,1260 1290,1710
actually print the two, do

552
00:18:56,000 --> 00:19:00,410
0,210 210,780 1950,2490 2490,3060 3630,4410
two gets, get x, {get,y},|

553
00:19:02,520 --> 00:19:03,510
0,240 240,330 330,600 600,780 780,990
and we do the put

554
00:19:03,510 --> 00:19:09,360
0,480 2550,3570 3570,3750 3750,5250 5250,5850
{y -},| {is,this} a serializable

555
00:19:09,360 --> 00:19:10,620
0,720
execution,|

556
00:19:22,180 --> 00:19:23,170
0,150 150,300 300,390 390,840 840,990
is this an execution that

557
00:19:23,170 --> 00:19:24,160
0,90 90,210 210,330 330,810 810,990
we should be forbidden by

558
00:19:24,160 --> 00:19:27,010
0,180 180,990 1140,1710 1710,2340 2340,2850
the serializable transaction system,| or

559
00:19:27,010 --> 00:19:29,120
0,90 90,330 330,600 600,1500
is it okay execution.|

560
00:19:30,800 --> 00:19:32,280
0,150 150,300 300,390 390,840
It should be forbidden.|

561
00:19:32,280 --> 00:19:33,270
0,180 180,330 330,420 420,720 720,990
It should be forbidden, correct,|

562
00:19:33,270 --> 00:19:35,010
0,240 240,540 540,720 720,1380 1530,1740
because as an outcome, that

563
00:19:35,010 --> 00:19:36,120
0,300 300,510 510,600 600,990 990,1110
could not have happened if

564
00:19:36,120 --> 00:19:38,190
0,120 120,630 630,780 780,1320 1770,2070
we executed {t1 -}| or

565
00:19:38,190 --> 00:19:39,630
0,360 360,570 570,690 690,900 900,1440
first followed by {t2 -}

566
00:19:39,660 --> 00:19:40,980
0,240 240,450 450,690 690,990 990,1320
or {t2 -} first followed

567
00:19:40,980 --> 00:19:42,600
0,90 90,270 270,570 750,1170
by {t1 -}, right.|

568
00:19:43,900 --> 00:19:45,640
0,300 300,840 900,1350 1350,1440 1440,1740
Okay, so what we clearly

569
00:19:45,640 --> 00:19:46,930
0,300 300,450 450,720 720,870 870,1290
see is that gonna {serializability

570
00:19:46,930 --> 00:19:50,980
0,690 780,1620 1650,2310 2310,3270 3510,4050
-} excludes {you,know} executions, {}|

571
00:19:50,980 --> 00:19:53,230
0,300 300,570 570,960 960,1740 1740,2250
and just do a in

572
00:19:53,230 --> 00:19:54,310
0,360 360,510 510,810 810,990 990,1080
order to actually make it

573
00:19:54,310 --> 00:19:55,630
0,330 330,450 450,960 960,1080 1080,1320
easier for programmers to think

574
00:19:55,630 --> 00:19:57,820
0,270 270,690 690,1290 1290,1680 1680,2190
about actually what database does,|

575
00:19:58,480 --> 00:20:00,070
0,480 480,690 690,780 780,1200 1200,1590
and there are two broad

576
00:20:00,070 --> 00:20:04,480
0,870 1050,1800 1800,2550 2550,3390 3450,4410
approaches to forbidding {} executions.|

577
00:20:05,300 --> 00:20:08,060
0,540 810,1440 1440,1800 1950,2100 2100,2760
And, {} in these approaches

578
00:20:08,060 --> 00:20:11,750
0,1890 1890,2250 2250,2700 2820,3270 3270,3690
the approach forbidding {is,called,concurrency -}

579
00:20:11,750 --> 00:20:13,920
0,630
control.|

580
00:20:22,020 --> 00:20:24,450
0,540 1170,1410 1410,1680 1680,1920 1920,2430
{} In the first approach,

581
00:20:24,450 --> 00:20:26,880
0,90 90,210 210,570 780,1770 1920,2430
for the first category of

582
00:20:26,880 --> 00:20:28,140
0,570 570,720 720,870 870,960 960,1260
solutions is what is called

583
00:20:28,140 --> 00:20:29,940
0,600 600,1350
pessimistic solutions,|

584
00:20:35,400 --> 00:20:36,900
0,360 360,420 420,840 840,1140 1140,1500
and the pessimistic solution basically

585
00:20:36,900 --> 00:20:40,020
0,480 480,1080
evolve locks,|

586
00:20:40,350 --> 00:20:41,760
0,270 270,420 420,930 930,1020 1020,1410
so the idea is that

587
00:20:41,760 --> 00:20:43,770
0,150 150,240 240,810 810,1440 1650,2010
when the transaction runs or

588
00:20:43,770 --> 00:20:46,530
0,720 810,1080 1080,1230 1230,1770 1770,2760
starts,| {} it requires necessary

589
00:20:46,530 --> 00:20:49,230
0,600 600,1290 1410,1680 1680,1920 1920,2700
necessary locks {} to maintain

590
00:20:49,260 --> 00:20:51,660
0,300 300,510 510,1380 1530,2040 2040,2400
{} {serializability -}| and only

591
00:20:51,660 --> 00:20:54,270
0,420 420,540 540,1110 2100,2490 2490,2610
release the locks when it's

592
00:20:54,270 --> 00:20:56,850
0,660 660,870 870,1440 1470,2340 2340,2580
guaranteed that the executions will

593
00:20:56,850 --> 00:20:58,710
0,480 480,570 570,630 630,1200 1230,1860
result in a serializable execution,|

594
00:20:59,450 --> 00:21:00,650
0,270 270,420 420,690 690,900 900,1200
{} so that's one approach

595
00:21:00,650 --> 00:21:01,100
0,90 90,150 150,270 270,330 330,450
and we're going to talk

596
00:21:01,100 --> 00:21:01,880
0,30 30,210 210,330 330,510 510,780
a little bit more about

597
00:21:01,880 --> 00:21:03,100
0,120 120,180 180,570
in a second.|

598
00:21:03,100 --> 00:21:04,390
0,180 180,450 450,840 840,1140 1140,1290
The second approach is a

599
00:21:04,390 --> 00:21:07,840
0,630 630,1110 1500,1860 1860,2760
is a is optimistic,|

600
00:21:12,050 --> 00:21:13,610
0,180 180,300 300,570 570,1110 1110,1560
and in the optimistic approach,

601
00:21:13,610 --> 00:21:15,020
0,150 150,270 270,570 570,750 750,1410
there was basically no locks,|

602
00:21:16,730 --> 00:21:18,740
0,360 360,810 810,1170 1170,1620 1620,2010
and optimistic approach, {you,just} assume

603
00:21:18,740 --> 00:21:19,640
0,180 180,240 240,390 390,600 600,900
things are gonna work out,|

604
00:21:20,960 --> 00:21:22,550
0,720 810,1230 1230,1350 1350,1440 1440,1590
and basically when you get

605
00:21:22,550 --> 00:21:23,980
0,60 60,150 150,420 420,840
to the commit point,|

606
00:21:24,130 --> 00:21:25,630
0,750 750,810 810,960 960,1260 1260,1500
{} you know there's actually

607
00:21:25,630 --> 00:21:27,220
0,600 630,930 930,990 990,1260 1260,1590
system sort of ask yourself

608
00:21:27,220 --> 00:21:29,140
0,60 60,660 690,1320 1350,1470 1470,1920
the question,| well you know

609
00:21:29,590 --> 00:21:30,880
0,240 240,450 480,810 810,900 900,1290
all the given the operation

610
00:21:30,880 --> 00:21:31,660
0,90 90,270 270,330 330,420 420,780
I've done in the past,|

611
00:21:31,660 --> 00:21:32,800
0,120 120,300 300,780 780,960 960,1140
is that actually could that

612
00:21:32,800 --> 00:21:34,420
0,570 780,1020 1020,1170 1170,1500 1500,1620
be a the result of

613
00:21:34,420 --> 00:21:37,000
0,480 480,990 990,1500 1860,2370
a linearizable execution,| or

614
00:21:37,000 --> 00:21:37,900
0,180 180,390 390,540 540,600 600,900
could that be the result

615
00:21:37,900 --> 00:21:39,800
0,90 90,150 150,690 690,1290
of a serializable execution.|

616
00:21:39,890 --> 00:21:41,810
0,600 780,1050 1050,1560 1590,1860 1860,1920
{} If so things are

617
00:21:41,810 --> 00:21:43,340
0,390 450,870 870,1140 1140,1230 1230,1530
fine, no problem at all,|

618
00:21:43,790 --> 00:21:44,930
0,390 390,780 780,900 900,1020 1020,1140
{} then you know we're

619
00:21:44,930 --> 00:21:47,180
0,360 390,690 690,1080 1080,1770 1800,2250
good,| {if,it} is {} result

620
00:21:47,180 --> 00:21:48,710
0,240 240,600 600,1290 1290,1440 1440,1530
this doesn't correspond to a

621
00:21:48,710 --> 00:21:50,480
0,300 300,1020 1140,1320 1320,1410 1410,1770
single execution,| they were basically

622
00:21:50,480 --> 00:21:51,640
0,150 150,690
just abort,|

623
00:22:01,560 --> 00:22:03,900
0,510 510,1080 1080,1500 1500,2070 2070,2340
and maybe and {} it

624
00:22:03,900 --> 00:22:06,630
0,180 180,660 690,1020 1020,1710 2250,2730
will retry {} probably.| And

625
00:22:06,630 --> 00:22:08,970
0,210 210,690 690,1380 1410,2010 2040,2340
so we'll see, I'm not

626
00:22:08,970 --> 00:22:10,620
0,120 120,330 330,540 540,810 810,1650
gonna talk much about optimistic

627
00:22:10,620 --> 00:22:11,880
0,90 90,300 300,660 660,810 810,1260
{concurrency -} control right now,|

628
00:22:12,120 --> 00:22:13,710
0,720 720,1050 1050,1350 1350,1440 1440,1590
but next week or two

629
00:22:13,710 --> 00:22:14,850
0,180 180,300 300,510 510,720 720,1140
weeks from now after reading

630
00:22:14,850 --> 00:22:16,950
0,120 120,480 480,990 1410,1800 1800,2100
the FaRM paper,| {} and

631
00:22:16,950 --> 00:22:19,320
0,150 150,750 750,930 930,1800 1800,2370
you'll see an optimistic {}

632
00:22:19,320 --> 00:22:21,300
0,450 450,780 780,1200 1200,1620 1620,1980
transaction system distributed transaction system|

633
00:22:21,300 --> 00:22:22,290
0,90 90,180 180,420 420,540 540,990
of the type that we're

634
00:22:22,320 --> 00:22:24,450
0,540 660,960 960,1260 1260,1350 1350,2130
considering that uses an optimistic

635
00:22:24,480 --> 00:22:28,110
0,720 720,1260 1980,2520 2520,2880 2880,3630
optimistic control concurrency control approach.|

636
00:22:28,870 --> 00:22:29,740
0,270 270,420 420,480 480,750 750,870
Yeah, but the focus for

637
00:22:29,740 --> 00:22:30,790
0,510 600,750 750,870 870,930 930,1050
today is going to be

638
00:22:30,790 --> 00:22:32,220
0,150 150,870
{} pessimistic.|

639
00:22:33,700 --> 00:22:35,980
0,510 750,1860 1860,2010 2010,2130 2130,2280
And one you know sort

640
00:22:35,980 --> 00:22:38,770
0,90 90,810 1080,1530 1530,2130 2220,2790
of the flip way, {}|

641
00:22:38,770 --> 00:22:39,850
0,180 180,360 360,540 540,960 960,1080
that these two approaches are

642
00:22:39,850 --> 00:22:42,190
0,720 990,1410 1410,1590 1590,2040 2040,2340
described a in literature often|

643
00:22:42,190 --> 00:22:43,390
0,270 270,390 390,540 540,600 600,1200
is a sort of pessimistic

644
00:22:43,390 --> 00:22:45,250
0,540 750,1050 1050,1290 1290,1410 1410,1860
is you ask for permission

645
00:22:45,250 --> 00:22:46,600
0,630 690,840 840,1080 1080,1230 1230,1350
first and then you do

646
00:22:46,600 --> 00:22:48,040
0,210 210,1080
your operations.|

647
00:22:48,070 --> 00:22:49,720
0,630 660,840 840,1350 1350,1590 1590,1650
And the optimistic sort the

648
00:22:49,720 --> 00:22:50,950
0,150 150,300 300,690 750,990 990,1230
other way around,| you just

649
00:22:50,950 --> 00:22:52,030
0,240 240,540 540,720 720,840 840,1080
go ahead and do your

650
00:22:52,030 --> 00:22:53,470
0,810 840,1050 1050,1110 1110,1320 1320,1440
operations| and it turns out

651
00:22:53,470 --> 00:22:54,490
0,60 60,180 180,660 690,840 840,1020
to be wrong, you just

652
00:22:54,490 --> 00:22:56,000
0,540 540,990
apologize later.|

653
00:22:56,520 --> 00:23:00,810
0,570 1200,1650 1650,2130 3390,4200 4200,4290
{} {So,that,is} {sort,of} analogy if

654
00:23:00,810 --> 00:23:03,000
0,150 150,660 1140,2040 2040,2100 2100,2190
you will,| between the two

655
00:23:03,000 --> 00:23:04,420
0,300 300,900
different approaches.|

656
00:23:05,200 --> 00:23:06,910
0,180 180,540 540,900 900,1050 1050,1710
And now within each approach,|

657
00:23:06,940 --> 00:23:08,050
0,360 360,480 480,540 540,1050 1050,1110
whether it's a pessimistic or

658
00:23:08,050 --> 00:23:10,570
0,720 780,1020 1020,1080 1080,1920 1920,2520
optimistic,| there are many different

659
00:23:10,600 --> 00:23:13,030
0,450 450,510 510,840 840,1410 1620,2430
{concurrency -} control plans, {}|

660
00:23:13,030 --> 00:23:14,980
0,150 150,270 270,870 1020,1380 1380,1950
you know to either increase

661
00:23:14,980 --> 00:23:16,750
0,180 180,900 900,1170 1170,1500 1500,1770
their concurrency| or provide weaker

662
00:23:16,750 --> 00:23:19,510
0,1140 1140,1590 1590,1740 1740,1980 1980,2760
consistency and with more concurrency|

663
00:23:19,660 --> 00:23:20,500
0,150 150,240 240,420 420,570 570,840
and so there's like a

664
00:23:20,650 --> 00:23:22,680
0,300 300,330 330,1080 1080,1590
there's a huge literature.|

665
00:23:22,900 --> 00:23:24,940
0,630 810,1530 1590,1770 1770,1920 1920,2040
{} And I'm just gonna

666
00:23:24,940 --> 00:23:27,680
0,270 270,510 510,1290 1470,2460
talk about one {}

667
00:23:28,170 --> 00:23:30,020
0,510 510,1230
particular approach,|

668
00:23:30,020 --> 00:23:31,340
0,150 150,360 360,450 450,750 750,1320
{} which is very popular,|

669
00:23:31,490 --> 00:23:32,660
0,750 750,840 840,960 960,1110 1110,1170
particularly if you want to

670
00:23:32,660 --> 00:23:34,700
0,510 540,1140 1140,1530 1530,1920 1920,2040
achieve {} {serializability -},| it

671
00:23:34,700 --> 00:23:35,870
0,240 240,330 330,570 570,900 960,1170
turns out that not,| {alrough

672
00:23:35,870 --> 00:23:37,100
0,180 180,270 270,570 570,900 900,1230
-} I said like {serializability,is

673
00:23:37,100 --> 00:23:38,300
0,480 480,540 540,810 810,1140 1140,1200
-} a gold standard for

674
00:23:38,300 --> 00:23:40,460
0,630 780,990 990,1320 1320,1770 1770,2160
databases,| it's often decades that

675
00:23:40,790 --> 00:23:43,460
0,1410 1410,1650 1650,2190 2190,2550 2550,2670
databases offer multiple degrees of

676
00:23:43,460 --> 00:23:44,840
0,630 660,900 900,1080 1080,1290 1290,1380
isolation,| so you as a

677
00:23:44,840 --> 00:23:46,460
0,480 480,600 600,690 810,1380 1470,1620
programmer,| you can pick you

678
00:23:46,460 --> 00:23:47,810
0,120 120,240 240,660 660,780 780,1350
know the degree of isolation

679
00:23:47,810 --> 00:23:49,100
0,150 150,270 270,690 990,1230 1230,1290
that you like| and the

680
00:23:49,100 --> 00:23:50,270
0,360 360,780 780,930 930,1110 1110,1170
reason you may want to

681
00:23:50,270 --> 00:23:51,530
0,150 150,240 240,780 810,1140 1140,1260
pick a weaker degree of

682
00:23:51,530 --> 00:23:52,610
0,630 630,750 750,870 870,990 990,1080
isolation,| so that you can

683
00:23:52,610 --> 00:23:53,880
0,150 150,390 390,990
get more concurrency.|

684
00:23:54,540 --> 00:23:55,800
0,390 420,570 570,750 750,840 840,1260
Now we're going to stick

685
00:23:55,800 --> 00:23:57,060
0,150 150,540 540,810 810,1140 1140,1260
to the gold standard of

686
00:23:57,060 --> 00:23:58,950
0,750 900,1170 1170,1230 1230,1530 1530,1890
concurrency,| which is namely {serializability

687
00:23:58,950 --> 00:24:00,450
0,630 780,1200 1200,1260 1260,1380 1380,1500
-},| and if you do

688
00:24:00,450 --> 00:24:03,180
0,420 420,1020 1080,1890 2070,2370 2370,2730
{serializability -},| then a common

689
00:24:03,180 --> 00:24:05,240
0,690 690,810 810,1050 1050,1440
{approache,is} {2-phase -} locking,|

690
00:24:06,850 --> 00:24:07,880
0,180

691
00:24:15,090 --> 00:24:17,940
0,510 810,1380 1380,1920 1980,2610 2610,2850
{} {in,2-phase} locking, basically sort

692
00:24:17,940 --> 00:24:19,980
0,60 60,570 570,690 690,1200
of lock per record,|

693
00:24:21,100 --> 00:24:22,940
0,300 300,390 390,720 720,1320
that's the starting point

694
00:24:23,260 --> 00:24:24,910
0,120 120,600 600,1110 1110,1470 1470,1650
a database record| and you

695
00:24:24,910 --> 00:24:26,320
0,90 90,270 270,450 450,690 690,1410
know in our little example,

696
00:24:26,530 --> 00:24:27,550
0,330 330,510 510,630 630,930 930,1020
{} that would be a

697
00:24:27,550 --> 00:24:29,770
0,150 150,240 240,1380 1380,1710 1710,2220
sort of a lock for

698
00:24:30,100 --> 00:24:32,020
0,750 750,1290 1290,1380 1380,1500 1500,1920
{} variable| and they lock

699
00:24:32,020 --> 00:24:33,070
0,150 150,540 540,720 720,960 960,1050
for x and lock for

700
00:24:33,070 --> 00:24:34,000
0,360
y.|

701
00:24:34,430 --> 00:24:36,080
0,330 330,510 510,810 810,1020 1020,1650
And there's basically two rules,|

702
00:24:36,590 --> 00:24:39,340
0,540 540,1230 1230,1950
{} one transaction

703
00:24:41,340 --> 00:24:43,560
0,540 540,570 570,1260
requires a lock

704
00:24:45,840 --> 00:24:47,700
0,570 570,1140
before using,|

705
00:24:52,020 --> 00:24:53,250
0,390 390,600 600,780 780,900 900,1230
{} and so the idea

706
00:24:53,250 --> 00:24:54,390
0,120 120,780 780,900 900,990 990,1140
is before you know you

707
00:24:54,390 --> 00:24:56,100
0,120 120,540 600,1080 1080,1560 1590,1710
can read or write you

708
00:24:56,100 --> 00:24:57,630
0,150 150,330 330,630 630,1320 1410,1530
know to x y,| you

709
00:24:57,630 --> 00:24:59,100
0,210 210,390 390,720 720,1350 1350,1470
first have to obtain the

710
00:24:59,100 --> 00:25:00,480
0,420 420,540 540,600 600,1080 1080,1380
lock| and the transaction system

711
00:25:00,480 --> 00:25:01,380
0,90 90,210 210,360 360,570 570,900
will do this for you.|

712
00:25:01,920 --> 00:25:03,320
0,690

713
00:25:03,470 --> 00:25:06,800
0,780 810,1410 1740,2010 2010,2850
Two, the t holds

714
00:25:06,800 --> 00:25:08,990
0,90 90,690 930,1320 1320,1410 1410,2190
a lock,| once you're acquired,

715
00:25:09,720 --> 00:25:10,950
0,240 240,420 420,720 720,810 810,1230
you're not allowed to release

716
00:25:10,950 --> 00:25:13,060
0,330 420,870 870,1050 1050,1560
it {until -} commit

717
00:25:14,980 --> 00:25:17,300
0,240 240,330 330,810 900,1530
or {abort -} whatever,|

718
00:25:17,760 --> 00:25:18,480
0,330 330,420 420,540 540,630 630,720
whatever is the end of

719
00:25:18,480 --> 00:25:19,700
0,90 90,660
the transaction.|

720
00:25:20,260 --> 00:25:21,700
0,480 690,900 900,1140 1140,1260 1260,1440
Okay, and so in our

721
00:25:21,700 --> 00:25:22,630
0,300 300,600 600,720 720,840 840,930
particular case,| if we are

722
00:25:22,630 --> 00:25:24,180
0,210 210,360 360,990
like {t1 -}

723
00:25:24,880 --> 00:25:26,290
0,570 570,720 720,810 810,930 930,1410
running and we have {t2

724
00:25:26,290 --> 00:25:27,840
0,360 360,900
-} running,|

725
00:25:27,840 --> 00:25:29,910
0,690 720,1050 1050,1320 1320,1680 1680,2070
and {} {t1 -} locks

726
00:25:29,910 --> 00:25:32,070
0,300 300,930 1380,1710 1710,2070 2070,2160
x first| and then you

727
00:25:32,070 --> 00:25:34,290
0,210 210,840 1080,1800 1950,2100 2100,2220
know lock y| and it

728
00:25:34,290 --> 00:25:36,060
0,300 300,360 360,1080 1110,1380 1380,1770
has to maintain those locks

729
00:25:36,060 --> 00:25:37,830
0,210 210,690 690,1110 1110,1410 1410,1770
until {it,actually} reaches commit points,|

730
00:25:40,520 --> 00:25:42,110
0,840 840,1170 1170,1260 1260,1350 1350,1590
{so,t2} runs at the same

731
00:25:42,110 --> 00:25:43,160
0,450 450,600 600,900 900,990 990,1050
time or roughly at the

732
00:25:43,160 --> 00:25:45,320
0,270 270,750 900,1140 1140,1770 1770,2160
same time,| if {t2 -}

733
00:25:45,320 --> 00:25:46,730
0,210 210,270 270,570 570,840 840,1410
starts a little bit later|

734
00:25:46,940 --> 00:25:47,990
0,180 180,300 300,570 570,660 660,1050
and it tries to grab

735
00:25:47,990 --> 00:25:50,030
0,60 60,420 420,1020 1470,1890 1890,2040
the {lock,in} x,| {} {t1

736
00:25:50,030 --> 00:25:51,710
0,300 300,420 420,690 690,990 1140,1680
-} will have it,| {it,t2}

737
00:25:51,710 --> 00:25:52,850
0,300 300,330 330,510 510,600 600,1140
started a little bit later|

738
00:25:53,030 --> 00:25:54,860
0,570 570,660 660,840 840,1230 1230,1830
and at that point basically

739
00:25:54,860 --> 00:25:55,940
0,180 180,390 390,600 600,690 690,1080
{t2 -} has to wait,|

740
00:25:58,140 --> 00:25:59,430
0,120 120,330 330,390 390,780 780,1290
{} sort of standard locking

741
00:25:59,490 --> 00:26:01,410
0,420 420,900 1320,1560 1560,1620 1620,1920
{protocol -}.| And the basic

742
00:26:01,410 --> 00:26:02,970
0,540 540,690 690,930 930,1320 1320,1560
idea {2-phase -} locking is

743
00:26:02,970 --> 00:26:04,800
0,360 720,1350 1350,1560 1560,1740 1740,1830
that,| {} it's sort of

744
00:26:04,800 --> 00:26:07,530
0,570 720,1470 1470,1740 1740,2340 2340,2730
a refinement or improvement over

745
00:26:07,530 --> 00:26:09,060
0,180 180,720 720,1020 1020,1320 1320,1530
this simple locking scheme,| that

746
00:26:09,060 --> 00:26:11,040
0,660 690,1110 1110,1290 1290,1410 1410,1980
{is,described} {} in the document

747
00:26:11,040 --> 00:26:12,960
0,240 240,570 810,1020 1020,1500 1500,1920
{} and which sometimes are

748
00:26:13,050 --> 00:26:14,610
0,630 630,930 930,1200 1200,1290 1290,1560
called simple locking or strict

749
00:26:14,610 --> 00:26:15,960
0,480 570,900 900,1200 1200,1260 1260,1350
locking,| where basically at the

750
00:26:15,960 --> 00:26:17,220
0,270 270,360 360,450 450,1050 1110,1260
beginning of the transaction,| you

751
00:26:17,220 --> 00:26:18,060
0,270 270,390 390,450 450,540 540,840
grab all of the locks

752
00:26:18,060 --> 00:26:19,200
0,120 120,570 690,870 870,930 930,1140
you need for the whole

753
00:26:19,200 --> 00:26:20,820
0,690 750,930 930,1230 1230,1380 1380,1620
transaction,| you hold them until

754
00:26:20,820 --> 00:26:21,540
0,150 150,360 360,480 480,600 600,720
the end and then you

755
00:26:21,540 --> 00:26:22,380
0,270 270,450
release them.|

756
00:26:22,620 --> 00:26:24,300
0,600 600,1020 1020,1140 1140,1380 1380,1680
And {} {2-phase -} locking

757
00:26:24,300 --> 00:26:24,930
0,90 90,150 150,330 330,450 450,630
is a little bit more

758
00:26:24,930 --> 00:26:27,630
0,720 960,1140 1140,1440 1440,1950 1980,2700
fine-grained, {} in that, {}|

759
00:26:27,720 --> 00:26:29,940
0,630 630,1080 1080,1200 1200,1770 1770,2220
even if the transactions make,|

760
00:26:30,180 --> 00:26:32,440
0,1710

761
00:26:32,440 --> 00:26:33,400
0,150 150,450 450,480 480,630 630,960
and they are not required

762
00:26:33,400 --> 00:26:34,510
0,60 60,390 390,480 480,840 840,1110
to lock {immediately -} all

763
00:26:34,510 --> 00:26:35,380
0,90 90,180 180,480 480,780 780,870
at the same time at

764
00:26:35,380 --> 00:26:36,380
0,60 60,390
the beginning,|

765
00:26:36,620 --> 00:26:38,450
0,540 540,870 870,1380 1380,1470 1470,1830
instead, they require the locks

766
00:26:38,450 --> 00:26:40,550
0,720 720,990 990,1080 1080,1590 1590,2100
incrementally as the transaction runs|

767
00:26:40,730 --> 00:26:42,980
0,360 360,1050 1050,1500 1500,1860 1860,2250
which allows certain concurrency patterns

768
00:26:42,980 --> 00:26:44,960
0,360 360,510 510,1200 1200,1650 1680,1980
that are disallowed by {}

769
00:26:44,990 --> 00:26:46,180
0,330 330,600
strict lock.|

770
00:26:47,320 --> 00:26:49,600
0,990 1140,1260 1260,1470 1470,1740 1740,2280
Now, the first rule seems

771
00:26:49,600 --> 00:26:51,250
0,240 240,720 750,1200 1200,1260 1260,1650
pretty clear, why you {need,it},|

772
00:26:51,580 --> 00:26:53,890
0,690 1050,1410 1410,1680 1680,1890 1890,2310
the second rule might be,

773
00:26:53,920 --> 00:26:55,840
0,390 390,630 630,1260 1590,1770 1770,1920
maybe less obvious| and so

774
00:26:55,840 --> 00:26:57,250
0,180 180,960 990,1230 1230,1260 1260,1410
it's a probably a good

775
00:26:57,250 --> 00:26:59,500
0,330 330,480 480,1020 1530,2040 2040,2250
idea to actually see what

776
00:26:59,500 --> 00:27:00,550
0,210 210,660 660,750 750,870 870,1050
goes wrong,| if you did

777
00:27:00,550 --> 00:27:01,960
0,270 270,600 600,660 660,990 990,1410
not maintain the second rule.|

778
00:27:02,900 --> 00:27:05,180
0,300 300,840 990,1530 1530,1980 2010,2280
And so, let's say talk

779
00:27:05,180 --> 00:27:06,050
0,30 30,240 240,390 390,720 720,870
a little bit about when

780
00:27:06,050 --> 00:27:07,460
0,180 180,600
to commit,|

781
00:27:12,250 --> 00:27:14,560
0,690 690,900 900,1590 1590,1890 1980,2310
and so {here,we,have} our two

782
00:27:14,560 --> 00:27:16,140
0,810
transactions,|

783
00:27:16,310 --> 00:27:18,290
0,330 330,690 690,900 900,1440 1710,1980
{t1,and -} t2 {you,know -}

784
00:27:18,290 --> 00:27:19,260
0,420
the

785
00:27:19,510 --> 00:27:21,460
0,630 630,900 900,1110 1110,1350 1350,1950
transfer and the print statement|

786
00:27:21,850 --> 00:27:23,230
0,540 540,690 690,900 900,1290 1290,1380
and so let's say you

787
00:27:23,230 --> 00:27:24,430
0,120 120,480 480,690 690,930 930,1200
know| here we do our

788
00:27:24,430 --> 00:27:26,410
0,180 180,270 270,750 1320,1770 1770,1980
put of x| and so

789
00:27:26,410 --> 00:27:27,760
0,390 390,690 690,1020 1020,1110 1110,1350
that means before the put

790
00:27:27,760 --> 00:27:30,130
0,330 330,990 1020,1440 1440,1830 1830,2370
x, transaction system locks x,|

791
00:27:31,480 --> 00:27:32,500
0,240 240,420 420,690 690,900 900,1020
and let's say that we're

792
00:27:32,500 --> 00:27:33,880
0,270 270,810 810,930 930,1080 1080,1380
not following the {2-phase -}

793
00:27:33,880 --> 00:27:35,740
0,330 330,750 1020,1500 1500,1620 1620,1860
locking rule| and we actually

794
00:27:35,740 --> 00:27:37,750
0,390 390,510 510,990 1140,1710 1710,2010
release the lock x right

795
00:27:37,750 --> 00:27:39,940
0,660 1020,1380 1380,1530 1530,1950 1950,2190
after {} the put,| because

796
00:27:39,940 --> 00:27:40,840
0,120 120,360 360,510 510,660 660,900
we're done with it,| actually

797
00:27:40,840 --> 00:27:42,280
0,210 210,450 450,600 600,720 720,1440
doesn't show up in transaction

798
00:27:42,340 --> 00:27:43,870
0,390 390,1050 1170,1290 1290,1440 1440,1530
t1 anymore,| there will be

799
00:27:43,870 --> 00:27:44,800
0,60 60,330 330,630 630,720 720,930
a later put for us

800
00:27:44,800 --> 00:27:46,320
0,270 270,360 360,840
put to y,|

801
00:27:47,660 --> 00:27:49,130
0,180 180,330 330,630 630,780 780,1470
and let's assume that before

802
00:27:49,130 --> 00:27:50,870
0,300 300,570 570,720 720,1140 1170,1740
actually get to the locking

803
00:27:50,870 --> 00:27:53,420
0,150 150,750 1320,1620 1620,1920 1920,2550
of y, {t2 -} runs,|

804
00:27:53,540 --> 00:27:56,120
0,240 240,540 540,810 810,1470 1650,2580
and actually {t2 -} {}

805
00:27:56,150 --> 00:27:57,960
0,480 480,570 570,1170
basically the whole,

806
00:27:57,960 --> 00:27:59,580
0,120 120,390 780,960 960,1140 1140,1620
you know the two gets,|

807
00:27:59,580 --> 00:28:01,680
0,270 270,480 480,570 570,1170 1920,2100
you get of x and

808
00:28:01,680 --> 00:28:04,770
0,270 270,690 690,1380 2310,2640 2640,3090
get y run| and so

809
00:28:04,800 --> 00:28:06,180
0,540 540,630 630,870 870,1080 1080,1380
since you know {t1 -}

810
00:28:06,180 --> 00:28:07,740
0,450 450,540 540,840 840,1230 1230,1560
release the lock x,| {you,know}

811
00:28:07,740 --> 00:28:09,000
0,180 180,360 360,420 420,720 720,1260
{it,can} get the lock x,|

812
00:28:09,450 --> 00:28:11,700
0,720 810,1110 1110,1440 1440,1770 1770,2250
since {} {t1 -} hasn't

813
00:28:11,760 --> 00:28:13,260
0,720 720,840 840,900 900,1140 1140,1500
gone to the put yet,|

814
00:28:13,260 --> 00:28:14,070
0,90 90,300 300,480 480,600 600,810
you know it can also

815
00:28:14,070 --> 00:28:15,510
0,150 150,240 240,600 630,870 870,1440
get the lock on y|

816
00:28:15,840 --> 00:28:17,220
0,240 240,480 480,1050 1050,1260 1260,1380
and so {you,know,print} x and

817
00:28:17,220 --> 00:28:20,840
0,570 1500,2070 2430,2610 2610,3030
y| and {reset -}

818
00:28:21,050 --> 00:28:23,040
0,180 180,330 330,600 600,1110
and then release locks.|

819
00:28:26,180 --> 00:28:27,660
0,930
So,

820
00:28:28,660 --> 00:28:30,490
0,180 180,840 1170,1440 1440,1590 1590,1830
is this, would this be

821
00:28:30,490 --> 00:28:34,560
0,1170 1170,1350 1350,2190 2370,3480
a {serializable -} {}

822
00:28:35,400 --> 00:28:36,740
0,780
execution?|

823
00:28:41,010 --> 00:28:42,240
0,360 360,600 600,690 690,960 960,1230
Oh, it's the same as

824
00:28:42,270 --> 00:28:44,040
0,480 540,1170 1170,1530 1530,1590 1590,1770
before.| Yeah, exactly the same

825
00:28:44,040 --> 00:28:45,510
0,90 90,510 510,780 780,1020 1020,1470
as before, right,| because basically

826
00:28:45,510 --> 00:28:48,450
0,300 1440,1800 1800,2250 2250,2430 2430,2940
the print statements like here,|

827
00:28:48,510 --> 00:28:49,860
0,210 210,450 450,510 510,1080 1080,1350
they sort of slipped in

828
00:28:49,860 --> 00:28:50,850
0,330 330,390 390,720 720,930 930,990
between the two put in

829
00:28:50,850 --> 00:28:52,500
0,270 270,420 420,900 960,1590 1590,1650
x and y,| between the

830
00:28:52,500 --> 00:28:53,370
0,180 180,420 420,540 540,690 690,870
two put of the x

831
00:28:53,370 --> 00:28:54,960
0,120 120,510 870,1110 1110,1230 1230,1590
and y| and we already

832
00:28:54,960 --> 00:28:56,250
0,390 390,780 780,960 960,1080 1080,1290
concluded earlier,| that is not

833
00:28:56,250 --> 00:28:57,600
0,30 30,450 450,630 630,1110 1170,1350
a {serializable -} execution,| that

834
00:28:57,600 --> 00:28:59,340
0,540 540,720 720,1230
{serializable -} execution.|

835
00:28:59,540 --> 00:29:00,560
0,150 150,300 300,450 450,540 540,1020
{} So this is wrong,|

836
00:29:00,890 --> 00:29:01,520
0,180 180,300 300,390 390,480 480,630
and so this is a

837
00:29:01,520 --> 00:29:02,990
0,150 150,600 600,690 690,1290 1290,1470
good example of demonstrating,| that

838
00:29:02,990 --> 00:29:03,950
0,90 90,300 300,570 570,660 660,960
if you release the lock

839
00:29:03,950 --> 00:29:05,900
0,150 150,690 750,1590 1590,1770 1770,1950
too early,| {} in this

840
00:29:05,900 --> 00:29:07,580
0,240 240,390 390,1170 1170,1500 1500,1680
case {t1 -} release the

841
00:29:07,580 --> 00:29:09,530
0,570 570,1080 1230,1560 1560,1740 1740,1950
{x,too} early,| {} you're not

842
00:29:09,530 --> 00:29:11,030
0,180 180,360 360,450 450,960 960,1500
gonna get a serializable execution.|

843
00:29:12,390 --> 00:29:13,080
0,150 150,300 300,420 420,540 540,690
And one way to think

844
00:29:13,080 --> 00:29:14,220
0,210 210,300 300,750 750,870 870,1140
about it basically is that|

845
00:29:14,280 --> 00:29:15,450
0,720 720,840 840,990 990,1050 1050,1170
whatever there's sort of an

846
00:29:15,450 --> 00:29:18,840
0,720 1260,2520 2520,2610 2610,2790 2790,3390
intersection between you know two

847
00:29:18,840 --> 00:29:20,250
0,120 120,420 420,780 780,1170 1170,1410
{} lock sets,| {so,t1 -}

848
00:29:20,250 --> 00:29:20,970
0,150 150,240 240,450 450,600 600,720
has a lock set of

849
00:29:20,970 --> 00:29:22,110
0,150 150,240 240,540 540,810 810,1140
x and y,| {t2 -}

850
00:29:22,110 --> 00:29:23,040
0,180 180,240 240,510 510,690 690,930
has a lock set of

851
00:29:23,100 --> 00:29:26,400
0,810 990,1320 1320,1860 1980,2550 2550,3300
x y too,| {} it

852
00:29:26,400 --> 00:29:27,810
0,60 60,600 600,900 900,1050 1050,1410
is important that you know

853
00:29:27,810 --> 00:29:30,030
0,450 480,930 930,1860 1860,2100 2100,2220
{} during {} these two

854
00:29:30,030 --> 00:29:30,990
0,420 420,540 540,810 810,870 870,960
transactions can order in a

855
00:29:30,990 --> 00:29:32,190
0,300 300,540 540,690 690,960 960,1200
particular way,| that means that

856
00:29:32,310 --> 00:29:34,560
0,630 630,900 900,1200 1200,1590 1590,2250
{} if the locks intersect,|

857
00:29:34,710 --> 00:29:35,490
0,120 120,240 240,390 390,660 660,780
you know we have to

858
00:29:35,490 --> 00:29:37,080
0,240 240,600 600,780 780,1050 1050,1590
make ensure some total ordering,|

859
00:29:37,470 --> 00:29:38,430
0,300 300,450 450,720 720,810 810,960
and that means that we

860
00:29:38,430 --> 00:29:39,450
0,330 330,540 540,600 600,930 930,1020
actually have to hold the

861
00:29:39,450 --> 00:29:41,070
0,570 690,870 870,1050 1050,1320 1320,1620
lock to the end until

862
00:29:41,070 --> 00:29:42,100
0,180 180,750
the {commit,point},|

863
00:29:42,100 --> 00:29:43,900
0,180 180,360 360,690 690,1410 1410,1800
so that no intermediate results

864
00:29:43,900 --> 00:29:45,010
0,90 90,180 180,720 720,810 810,1110
of the transaction are actually

865
00:29:45,010 --> 00:29:46,980
0,420 420,510 510,750 750,1470
visible to other transactions,|

866
00:29:47,530 --> 00:29:48,850
0,240 240,390 390,690 690,1050 1050,1320
and we release locks before

867
00:29:48,850 --> 00:29:50,410
0,60 60,330 330,750 990,1320 1320,1560
the commit point,| we might

868
00:29:50,410 --> 00:29:52,240
0,300 300,660 660,930 930,1260 1260,1830
actually make a result visible,|

869
00:29:52,330 --> 00:29:53,560
0,300 300,750 750,840 840,1050 1050,1230
even though {you,know} may be

870
00:29:53,560 --> 00:29:54,910
0,270 270,690 690,870 870,960 960,1350
later {it's,actually} even {abort -},

871
00:29:55,060 --> 00:29:55,990
0,330 330,450 450,630 630,720 720,930
right| and then the whole

872
00:29:55,990 --> 00:29:57,460
0,300 300,480 480,630 630,990
change will go away.|

873
00:29:58,610 --> 00:29:59,390
0,270 270,390 390,450 450,510 510,780
So this is the reason

874
00:29:59,390 --> 00:30:00,770
0,570 600,720 720,1080 1080,1290 1290,1380
why the locks must be

875
00:30:00,770 --> 00:30:02,100
0,270 270,720
{held,to} {the,end}.|

876
00:30:03,670 --> 00:30:05,680
0,510 510,630 630,1050 1050,1920 1920,2010
Now, an obvious problem that

877
00:30:05,680 --> 00:30:06,910
0,240 240,300 300,510 510,780 780,1230
many of you asked about,|

878
00:30:07,300 --> 00:30:10,090
0,810 840,1590 1830,2190 2190,2550 2550,2790
in {} 2-phase locking is

879
00:30:10,090 --> 00:30:11,320
0,240 240,480 480,810 840,990 990,1230
{} {there,is} a, is there

880
00:30:11,320 --> 00:30:13,120
0,90 90,390 390,480 480,1110
a chance of deadlock,|

881
00:30:14,200 --> 00:30:16,210
0,360 360,510 510,1200 1200,1320 1320,2010
if you're requiring the locks

882
00:30:16,700 --> 00:30:18,920
0,390 390,990 990,1110 1110,1620 1620,2220
{as -} the transactions execute|

883
00:30:19,430 --> 00:30:20,750
0,150 150,330 330,660 660,1170 1170,1320
and so let's this is

884
00:30:20,750 --> 00:30:23,270
0,510 510,570 570,1080 1260,2190 2190,2520
absolutely the case| and so

885
00:30:23,270 --> 00:30:25,940
0,420 420,660 660,1410 1440,1920 1920,2670
{for,example} let's modify t2 slightly,|

886
00:30:26,480 --> 00:30:27,770
0,210 210,600 600,840 840,900 900,1290
so t2 used to be

887
00:30:27,770 --> 00:30:29,990
0,120 120,270 270,1050 1230,1680 1680,2220
you know t1 gets x,|

888
00:30:30,260 --> 00:30:31,160
0,390 390,510 510,630 630,690 690,900
instead we're going to do

889
00:30:31,160 --> 00:30:32,270
0,180 180,270 270,360 360,720 720,1110
with in the opposite order

890
00:30:32,270 --> 00:30:34,160
0,390 390,570 570,720 720,1290
refers to get y,|

891
00:30:34,380 --> 00:30:38,550
0,810 840,1200 1200,1740 1770,2790 3390,4170
and {t2 -} gets x,|

892
00:30:39,060 --> 00:30:40,470
0,210 210,660 660,1050 1050,1140 1140,1410
and we remain we keep

893
00:30:40,470 --> 00:30:41,730
0,120 120,360 360,420 420,810 1050,1260
{t1 -} the same, right,|

894
00:30:41,730 --> 00:30:42,870
0,150 150,300 300,570 570,840 840,1140
so {t1 -} actually still

895
00:30:42,870 --> 00:30:44,100
0,210 210,510 510,720 720,810 810,1230
the first put to x

896
00:30:44,100 --> 00:30:45,030
0,120 120,300 300,450 450,540 540,930
and then put the y,|

897
00:30:45,540 --> 00:30:46,620
0,270 270,540 540,660 660,780 780,1080
so now we can easily

898
00:30:46,620 --> 00:30:48,300
0,180 180,570 600,1260
get into trouble,|

899
00:30:48,850 --> 00:30:49,900
0,300 300,510 510,630 630,840 840,1050
so this is {t2 -}

900
00:30:49,900 --> 00:30:51,060
0,630
print,|

901
00:30:51,060 --> 00:30:52,320
0,420 420,600 600,750 750,960 960,1260
{} and this is just

902
00:30:52,320 --> 00:30:53,790
0,300 300,840 840,1170 1170,1350 1350,1470
the ordinary {t1 -} that

903
00:30:53,790 --> 00:30:55,380
0,120 120,360 360,840 1200,1350 1350,1590
we already have,| it does

904
00:30:55,380 --> 00:30:56,840
0,180 180,210 210,960
put of x,|

905
00:30:57,340 --> 00:30:58,870
0,480 480,750 750,810 810,1020 1020,1530
{you,know,before} doing the {put,of} x|

906
00:30:58,870 --> 00:30:59,650
0,90 90,240 240,330 330,480 480,780
and needs to get the

907
00:31:00,100 --> 00:31:01,930
0,690 720,1020 1020,1290 1290,1530 1530,1830
lock on x,| so L

908
00:31:01,930 --> 00:31:03,880
0,450 450,660 660,1290
locks {Lx -},|

909
00:31:04,000 --> 00:31:05,290
0,450 480,630 630,840 840,1110 1110,1290
{} now let's say that

910
00:31:05,290 --> 00:31:07,990
0,510 540,1050 1080,1650 1650,2100 2100,2700
the {} ordering {works,out} {as,follows},|

911
00:31:07,990 --> 00:31:09,370
0,120 120,300 300,750 780,1050 1050,1380
you know the same time

912
00:31:09,370 --> 00:31:11,350
0,780 810,1020 1020,1170 1170,1500 1500,1980
to {t2 -} print runs,|

913
00:31:11,590 --> 00:31:14,800
0,150 150,420 420,1140 1470,2460
it does get y,|

914
00:31:14,950 --> 00:31:15,880
0,240 240,360 360,510 510,810 810,930
{} so that means you've

915
00:31:15,880 --> 00:31:17,500
0,210 210,390 420,900 900,1050 1050,1620
got the lock on y,|

916
00:31:18,490 --> 00:31:19,600
0,420 420,570 570,660 660,780 780,1110
and now you can easily

917
00:31:19,600 --> 00:31:20,920
0,210 210,330 330,480 480,840 840,1320
see what goes wrong here,|

918
00:31:21,040 --> 00:31:22,510
0,690 720,930 930,1200 1200,1290 1290,1470
now {t1 -} is gonna

919
00:31:22,510 --> 00:31:23,770
0,300 300,390 390,570 570,690 690,1260
do a put of y

920
00:31:24,580 --> 00:31:25,510
0,240 240,450 450,540 540,690 690,930
or wants to do put

921
00:31:25,510 --> 00:31:27,490
0,480 1020,1410 1410,1560 1560,1740 1740,1980
y,| {} so we need

922
00:31:27,490 --> 00:31:28,720
0,90 90,240 240,330 330,840 960,1230
to get the lock on

923
00:31:28,720 --> 00:31:31,240
0,630 960,1350 1350,1800 2130,2280 2280,2520
y,| {} but you can't

924
00:31:31,240 --> 00:31:32,410
0,180 180,480 480,930 930,1020 1020,1170
get it,| because you know

925
00:31:32,410 --> 00:31:34,600
0,210 210,420 420,1050 1350,1470 1470,2190
{t2 -} print {} actually

926
00:31:34,600 --> 00:31:35,680
0,270 270,360 360,600 600,840 840,1080
has the lock,| so it

927
00:31:35,680 --> 00:31:36,850
0,180 180,270 270,510 510,960 990,1170
has to wait here,| that's

928
00:31:36,850 --> 00:31:37,920
0,90 90,630
the block,|

929
00:31:38,280 --> 00:31:39,120
0,210 210,450 450,570 570,690 690,840
{you,know} same thing is gonna

930
00:31:39,120 --> 00:31:39,960
0,300 300,420 420,660 660,720 720,840
happen of course on the

931
00:31:39,960 --> 00:31:41,130
0,180 180,600 600,690 690,780 780,1170
other side,| you know one

932
00:31:41,310 --> 00:31:43,290
0,690 690,930 930,990 990,1410 1440,1980
before doing the get of

933
00:31:43,290 --> 00:31:45,240
0,450 840,1290 1290,1560 1560,1830 1830,1950
x,| {} {t2 -} will

934
00:31:45,240 --> 00:31:46,290
0,180 180,270 270,450 450,540 540,1050
need to get the lock

935
00:31:46,620 --> 00:31:48,360
0,780 780,1350
of x,|

936
00:31:48,450 --> 00:31:50,130
0,780 780,900 900,1140 1140,1440 1440,1680
and you know it can't

937
00:31:50,130 --> 00:31:51,120
0,240 240,360 360,570 570,660 660,990
get the lock of x,|

938
00:31:51,120 --> 00:31:52,410
0,300 300,450 450,750 750,990 990,1290
because {t1 -} has it|

939
00:31:52,680 --> 00:31:54,420
0,360 360,990 1020,1350 1350,1560 1560,1740
and so { -} this

940
00:31:54,420 --> 00:31:56,540
0,150 150,240 240,480 480,810
has to wait too,|

941
00:31:57,200 --> 00:31:59,090
0,330 330,690 690,840 840,1500 1680,1890
and now we have a

942
00:31:59,090 --> 00:32:01,580
0,420 420,900 900,1470 1740,2010 2010,2490
t1 waiting {t2 -} print,|

943
00:32:01,580 --> 00:32:03,020
0,120 120,300 300,840 840,1140 1140,1440
and {we,have} t2 print waiting

944
00:32:03,020 --> 00:32:04,340
0,180 180,660 720,900 900,1230 1230,1320
{t1 -},| we basically have

945
00:32:04,340 --> 00:32:05,500
0,60 60,690
a deadlock.|

946
00:32:06,910 --> 00:32:08,160
0,720

947
00:32:08,670 --> 00:32:09,600
0,240 240,360 360,480 480,540 540,930
Now, what is the cool

948
00:32:09,600 --> 00:32:12,060
0,480 480,690 690,1110 1110,1860 2040,2460
part about transaction systems is

949
00:32:12,060 --> 00:32:12,990
0,150 150,300 300,450 450,630 630,930
that| we have the abort

950
00:32:12,990 --> 00:32:14,140
0,570
operation,|

951
00:32:14,380 --> 00:32:16,060
0,270 270,750 810,1170 1170,1260 1260,1680
and so if the transaction

952
00:32:16,060 --> 00:32:18,700
0,300 300,450 450,1110 1260,1890 1890,2640
system could detect a deadlock,|

953
00:32:18,730 --> 00:32:19,840
0,270 270,390 390,840 840,1020 1020,1110
could use abort one of

954
00:32:19,840 --> 00:32:21,420
0,90 90,210 210,1080
the two transactions,|

955
00:32:21,420 --> 00:32:22,410
0,300 300,510 510,600 600,750 750,990
{} let the other one

956
00:32:22,410 --> 00:32:24,240
0,600 750,1080 1080,1470 1470,1650 1650,1830
proceed| and hopefully that will

957
00:32:24,240 --> 00:32:25,170
0,210 210,390 390,450 450,600 600,930
actually get to the end|

958
00:32:25,170 --> 00:32:27,690
0,180 180,660 1110,1740 1740,2190 2190,2520
and commit and {} abort

959
00:32:27,690 --> 00:32:29,160
0,60 60,240 240,690 750,960 960,1470
the other one| and then

960
00:32:29,310 --> 00:32:31,020
0,180 180,900 900,1050 1050,1140 1140,1710
the client or the application

961
00:32:31,020 --> 00:32:32,130
0,120 120,570 570,690 690,780 780,1110
can decide what to do

962
00:32:32,130 --> 00:32:33,300
0,270 270,390 390,570 570,630 630,1170
with {abort -} of transactions,|

963
00:32:33,300 --> 00:32:34,530
0,120 120,270 270,600 600,990 990,1230
it can actually retry it,|

964
00:32:34,530 --> 00:32:35,250
0,150 150,300 300,390 390,510 510,720
you may be so {}

965
00:32:35,250 --> 00:32:36,030
0,330 330,360 360,540 540,690 690,780
wait a little bit and

966
00:32:36,030 --> 00:32:38,610
0,150 150,780 1230,1560 1560,2100 2100,2580
then retry,| {} {in,the} hope

967
00:32:38,610 --> 00:32:39,720
0,210 210,420 420,720 720,960 960,1110
at that point you're not

968
00:32:39,720 --> 00:32:40,650
0,120 120,210 210,420 420,810 810,930
going to run into a

969
00:32:40,650 --> 00:32:41,640
0,570
deadlock.|

970
00:32:42,470 --> 00:32:43,460
0,240 240,390 390,750 750,870 870,990
And so one way to

971
00:32:43,460 --> 00:32:44,420
0,120 120,180 180,390 390,540 540,960
think a little bit about

972
00:32:44,450 --> 00:32:45,890
0,120 120,330 330,600 600,1200 1260,1440
{} {2-phase -} locking is|

973
00:32:45,890 --> 00:32:46,520
0,150 150,240 240,390 390,450 450,630
that it has a little

974
00:32:46,520 --> 00:32:48,830
0,120 120,240 240,990 1290,2190 2190,2310
bit of {} optimistic you

975
00:32:48,830 --> 00:32:50,030
0,330 330,750 750,930 930,1080 1080,1200
know flavor to it,| in

976
00:32:50,030 --> 00:32:51,500
0,60 60,360 360,780 1110,1260 1260,1470
the sense that it's not

977
00:32:51,500 --> 00:32:53,180
0,750 750,870 870,1230 1230,1470 1470,1680
guaranteed,| it won't run into

978
00:32:53,180 --> 00:32:54,620
0,660 690,930 930,1140 1140,1290 1290,1440
problems,| but even if it

979
00:32:54,620 --> 00:32:56,000
0,210 210,420 420,1020 1050,1260 1260,1380
runs into problems,| {you,know} you

980
00:32:56,000 --> 00:32:57,770
0,150 150,450 450,1050 1080,1290 1290,1770
can always abort and then

981
00:32:57,800 --> 00:33:00,180
0,1140 1170,1380 1380,1530 1530,1950
recover from that problem.|

982
00:33:03,060 --> 00:33:04,880
0,240 240,660 660,900 900,1350
Any questions about this?|

983
00:33:10,530 --> 00:33:11,130
0,150 150,270 270,330 330,540 540,600
So you see how do

984
00:33:11,130 --> 00:33:12,600
0,480 690,990 990,1050 1050,1200 1200,1470
you, how do you find

985
00:33:12,600 --> 00:33:14,850
0,60 60,750 900,1710 1740,2130 2130,2250
the deadlock?| That's exactly I

986
00:33:14,850 --> 00:33:15,720
0,120 120,360 360,480 480,750 750,870
was hoping that somebody was

987
00:33:15,720 --> 00:33:17,820
0,240 240,330 330,720 1050,1530 1620,2100
asking that question.| So the

988
00:33:17,850 --> 00:33:19,530
0,840 840,1050 1050,1170 1170,1320 1320,1680
way, there's sort of two

989
00:33:19,530 --> 00:33:21,090
0,300 300,690 690,840 840,1080 1080,1560
broad approaches that people use,|

990
00:33:21,360 --> 00:33:26,010
0,840 900,1410 1410,2190 2220,3150 3840,4650
{} one is, {} {yeah,one,is,not,solid,as,well},|

991
00:33:26,010 --> 00:33:30,720
0,300 330,4200 4200,4530 4530,4680 4680,4710
one is basically on a

992
00:33:30,720 --> 00:33:31,890
0,390 390,810 810,990 990,1110 1110,1170
timeout basis,| like if the

993
00:33:31,890 --> 00:33:33,870
0,1200 1290,1470 1470,1770 1770,1920 1920,1980
transaction on running for a

994
00:33:33,870 --> 00:33:35,130
0,270 270,660 660,1050 1050,1110 1110,1260
long time,| and you know

995
00:33:35,130 --> 00:33:35,910
0,270 270,450 450,570 570,630 630,780
they don't seem to make

996
00:33:35,910 --> 00:33:37,980
0,270 270,810 1050,1410 1410,1590 1590,2070
forward progress,| {} you just

997
00:33:38,010 --> 00:33:39,280
0,420 420,570 570,660 660,900
abort one of them,|

998
00:33:39,700 --> 00:33:41,020
0,210 210,360 360,540 540,810 810,1320
and so this {timeout,based -},|

999
00:33:41,680 --> 00:33:43,300
0,120 120,420 420,1170 1200,1470 1470,1620
the more systematic {} sort

1000
00:33:43,300 --> 00:33:44,290
0,90 90,330 330,420 420,720 720,990
of way of thinking about

1001
00:33:44,290 --> 00:33:46,390
0,120 120,540 540,1110 1380,1980 1980,2100
it is| to construct and

1002
00:33:46,390 --> 00:33:48,760
0,240 240,510 510,1050 1230,1890 1890,2370
wait for graph,| {as,the} transaction

1003
00:33:48,760 --> 00:33:50,650
0,510 510,630 630,1380 1380,1500 1500,1890
systems you know are moving,|

1004
00:33:50,650 --> 00:33:53,170
0,420 450,510 540,1290 1500,2280 2340,2520
so for example if {t1

1005
00:33:53,170 --> 00:33:54,700
0,240 240,750 780,1260 1260,1440 1440,1530
-} runs,| so a in

1006
00:33:54,700 --> 00:33:55,720
0,90 90,270 270,450 450,840 840,1020
the wait for graph,| the

1007
00:33:55,720 --> 00:33:57,250
0,480 480,570 570,1170 1200,1410 1410,1530
transactions are nodes,| so we

1008
00:33:57,250 --> 00:33:59,350
0,240 240,300 300,720 720,1350 1680,2100
got a node t1 and

1009
00:33:59,350 --> 00:34:00,490
0,180 180,390 390,510 510,930 930,1140
we make an {node,t2 -},|

1010
00:34:00,490 --> 00:34:01,630
0,240 240,330 330,870 870,990 990,1140
when they start with {t2

1011
00:34:01,630 --> 00:34:02,710
0,180 180,510 510,600 600,720 720,1080
-} print if you will,|

1012
00:34:03,190 --> 00:34:04,750
0,390 390,570 570,750 750,1020 1020,1560
and when {t1 -} runs

1013
00:34:04,750 --> 00:34:05,950
0,90 90,360 360,570 570,900 900,1200
you know gets x nothing

1014
00:34:05,950 --> 00:34:07,690
0,600 630,1320 1320,1560 1560,1680 1680,1740
together,| then gets to the

1015
00:34:07,690 --> 00:34:08,800
0,210 210,300 300,630 630,840 840,1110
lock of y,| I can't

1016
00:34:08,800 --> 00:34:10,780
0,180 180,450 720,1200 1200,1680 1710,1980
do it, so we'll make

1017
00:34:10,780 --> 00:34:11,680
0,390
an

1018
00:34:11,980 --> 00:34:13,510
0,510 510,810 810,1170 1170,1320 1320,1530
array from {} {t1 -}

1019
00:34:13,510 --> 00:34:14,440
0,90 90,300 300,510 510,870 870,930
to {t2 -} print| to

1020
00:34:14,440 --> 00:34:15,550
0,480 480,600 600,780 780,1020 1020,1110
indicate that {t1 -} is

1021
00:34:15,550 --> 00:34:16,960
0,420 420,540 540,750 750,930 930,1410
waiting for {t2 -} print.|

1022
00:34:17,740 --> 00:34:18,610
0,270 270,420 420,630 630,810 810,870
{Then,at} some point like you

1023
00:34:18,610 --> 00:34:19,900
0,90 90,540 540,990 990,1080 1080,1290
know t2 running,| you know

1024
00:34:19,900 --> 00:34:21,970
0,450 450,660 660,1230 1260,1770 1770,2070
{t2 -} {} hits this,

1025
00:34:21,970 --> 00:34:23,560
0,270 270,720 720,930 930,1110 1110,1590
t2 print hits this point,|

1026
00:34:23,680 --> 00:34:24,700
0,360 360,450 450,630 630,720 720,1020
where they want to lock

1027
00:34:24,700 --> 00:34:25,870
0,360 360,480 480,750 750,930 930,1170
x, it can't do it.|

1028
00:34:26,460 --> 00:34:28,020
0,450 480,870 870,1200 1200,1440 1440,1560
{} So we'll look at

1029
00:34:28,020 --> 00:34:29,730
0,510 510,870 870,1020 1020,1320 1320,1710
what's waiting for, who's holding

1030
00:34:29,730 --> 00:34:30,690
0,90 90,420 420,630 630,780 780,960
the lock,| well it's {t1

1031
00:34:30,690 --> 00:34:32,190
0,510 750,990 990,1140 1140,1320 1320,1500
-},| so we'll put an

1032
00:34:32,190 --> 00:34:34,020
0,900 1260,1410 1410,1530 1530,1740 1740,1830
edge you know in the

1033
00:34:34,020 --> 00:34:35,190
0,210 210,420 420,810 810,960 960,1170
wait for graph from {t2

1034
00:34:35,190 --> 00:34:37,530
0,330 330,900 900,1590 1650,2040 2040,2340
-} to {} t2 print

1035
00:34:37,530 --> 00:34:39,300
0,210 210,750 1050,1470 1470,1680 1680,1770
{t1 -}| and now we

1036
00:34:39,300 --> 00:34:41,060
0,330 330,690 690,750 750,1260
see there's a cycle,|

1037
00:34:41,660 --> 00:34:43,310
0,150 150,810 810,1020 1020,1080 1080,1650
and whenever there's a cycle,|

1038
00:34:43,310 --> 00:34:44,510
0,180 180,390 390,600 600,630 630,1200
that means there's a deadlock,|

1039
00:34:44,840 --> 00:34:45,860
0,420 420,630 630,690 690,930 930,1020
because one is waiting on

1040
00:34:45,860 --> 00:34:47,150
0,60 60,630 690,1050 1050,1110 1110,1290
the other| and the other

1041
00:34:47,150 --> 00:34:48,350
0,90 90,330 330,450 450,570 570,1200
is waiting on the first.|

1042
00:34:49,040 --> 00:34:51,080
0,360 360,930 1020,1470 1470,1650 1650,2040
And so, {} the transaction

1043
00:34:51,080 --> 00:34:52,910
0,330 330,480 480,1170 1170,1350 1350,1830
system can construct these graphs

1044
00:34:52,910 --> 00:34:55,190
0,240 240,330 330,960 1050,1740 1740,2280
on the fly,| {} detect

1045
00:34:55,190 --> 00:34:56,570
0,270 270,540 540,930 930,1290 1290,1380
when there's a cycle in

1046
00:34:56,570 --> 00:34:58,010
0,60 60,600 660,1020 1020,1140 1140,1440
the graph,| {and,then} for example

1047
00:34:58,010 --> 00:34:59,630
0,210 210,720 750,900 900,1350 1350,1620
either abort {t1 -} or

1048
00:34:59,630 --> 00:35:01,120
0,600 600,990
t2 [prime].|

1049
00:35:02,650 --> 00:35:03,970
0,180 180,360 360,540 540,660 660,1320
So let's call the {wait-for

1050
00:35:06,020 --> 00:35:07,640
0,360 360,1110
-} graph.|

1051
00:35:13,170 --> 00:35:14,610
0,210 210,570 570,870 870,990 990,1440
What happens after the abort?|

1052
00:35:16,080 --> 00:35:18,780
0,990 1020,1590 1620,2220 2250,2490 2490,2700
{} Well, {} so let's

1053
00:35:18,780 --> 00:35:20,740
0,240 240,420 420,510 510,1350
say we have {abort,t2},|

1054
00:35:20,770 --> 00:35:22,510
0,240 240,510 510,900 900,1020 1020,1740
just for as an experiment,|

1055
00:35:23,300 --> 00:35:24,500
0,450 480,660 660,840 840,1050 1050,1200
so we're gonna kill this

1056
00:35:24,500 --> 00:35:26,420
0,510 540,900 900,1290 1320,1650 1650,1920
guy,| {} so {t2 -}

1057
00:35:26,420 --> 00:35:29,120
0,900 1590,1950 1950,2370 2370,2640 2640,2700
basically this transaction system is

1058
00:35:29,120 --> 00:35:29,930
0,120 120,180 180,540 540,660 660,810
going to arrange,| so we'll

1059
00:35:29,930 --> 00:35:31,250
0,180 180,240 240,300 300,690 1170,1320
see in a second,| it's

1060
00:35:31,250 --> 00:35:32,270
0,120 120,180 180,570 570,690 690,1020
going to arrange that basically

1061
00:35:32,270 --> 00:35:34,850
0,570 570,1020 1020,1140 1140,1500 1500,2580
none results of t2 or

1062
00:35:34,850 --> 00:35:36,770
0,120 120,780 1110,1590 1590,1740 1740,1920
t2 {is,visible},| {} at that

1063
00:35:36,770 --> 00:35:38,720
0,600 810,930 930,1170 1170,1290 1290,1950
point, the lock is released,|

1064
00:35:39,080 --> 00:35:40,940
0,390 390,900 900,1350 1350,1770 1770,1860
the abort will forced to

1065
00:35:40,940 --> 00:35:43,010
0,300 300,360 360,750 750,1230 1470,2070
lock, the release of the

1066
00:35:43,040 --> 00:35:44,600
0,570 570,870 870,1050 1050,1230 1230,1560
y,| because {t2 -} [prime]

1067
00:35:44,600 --> 00:35:45,860
0,90 90,450 450,840
is backing out,|

1068
00:35:45,860 --> 00:35:47,090
0,210 210,480 480,780 780,1080 1080,1230
{} that means that {you,know}

1069
00:35:47,090 --> 00:35:48,230
0,510 510,600 600,810 810,870 870,1140
t1 can get the lock

1070
00:35:48,230 --> 00:35:49,580
0,120 120,690 780,960 960,1260 1260,1350
on y and proceed to

1071
00:35:49,580 --> 00:35:50,680
0,570
finish.|

1072
00:35:50,740 --> 00:35:53,110
0,420 420,870 1080,1560 1560,2190 2190,2370
{} The client {that,called} t2

1073
00:35:53,110 --> 00:35:54,340
0,480 480,630 630,750 750,810 810,1230
prime is going to learn|

1074
00:35:54,340 --> 00:35:56,260
0,180 180,270 270,780 780,1170 1470,1920
that the transaction abort| and

1075
00:35:56,260 --> 00:35:57,100
0,90 90,420 420,510 510,630 630,840
for general you can just

1076
00:35:57,100 --> 00:35:58,360
0,270 270,390 390,810 810,900 900,1260
choose to rerun it again.|

1077
00:36:04,570 --> 00:36:05,940
0,180 180,240 240,450 450,840
Does it makes sense?|

1078
00:36:10,910 --> 00:36:12,350
0,540 810,990 990,1140 1140,1230 1230,1440
Okay, so this is sort

1079
00:36:12,350 --> 00:36:14,690
0,90 90,660 720,1230 1230,1800 1830,2340
of the first part, {}|

1080
00:36:14,690 --> 00:36:15,920
0,90 120,450 450,630 630,1080 1080,1230
and you know actually what

1081
00:36:15,920 --> 00:36:16,610
0,30 30,270 270,330 330,480 480,690
I wanted to say about

1082
00:36:16,610 --> 00:36:18,800
0,90 90,330 330,870 960,1620 1620,2190
{2-phase -} locking,| {} except

1083
00:36:18,830 --> 00:36:20,120
0,210 210,450 450,570 570,900 900,1290
I wanted to address the

1084
00:36:20,120 --> 00:36:21,530
0,150 150,210 210,600 600,1020 1020,1410
sort of homework assignment again,|

1085
00:36:21,680 --> 00:36:23,060
0,270 270,480 480,870 900,1080 1080,1380
which is like in what

1086
00:36:23,060 --> 00:36:25,130
0,750 750,1080 1080,1290 1290,1530 1530,2070
situations does {2-phase -} locking

1087
00:36:25,130 --> 00:36:27,050
0,450 450,570 570,960 960,1620 1620,1920
allow for more concurrency than

1088
00:36:27,050 --> 00:36:28,760
0,330 330,660 690,1050 1050,1320 1320,1710
strict locking,| where strict locking

1089
00:36:28,760 --> 00:36:31,060
0,210 210,540 600,1290 1290,1920
was the protocol where

1090
00:36:31,180 --> 00:36:33,280
0,210 210,900 1140,1740 1740,1980 1980,2100
of transaction acquires all the

1091
00:36:33,280 --> 00:36:34,860
0,300 300,390 390,1080
locks in adance,|

1092
00:36:34,950 --> 00:36:36,660
0,180 180,360 360,1080 1080,1320 1320,1710
and this requires that the

1093
00:36:36,690 --> 00:36:38,220
0,750 750,960 960,1140 1140,1230 1230,1530
programmer| or like the beginning

1094
00:36:38,220 --> 00:36:39,570
0,90 90,150 150,570 570,810 810,1350
of the transaction basis declares

1095
00:36:39,570 --> 00:36:41,280
0,210 210,870 870,990 990,1470 1470,1710
which locks the transaction actually

1096
00:36:41,280 --> 00:36:43,680
0,480 1020,1260 1260,1320 1320,1710 1710,2400
needs,| sort of slightly desirable

1097
00:36:43,680 --> 00:36:45,690
0,240 240,690 690,1260 1530,1920 1920,2010
less programmer friendly,| but it

1098
00:36:45,690 --> 00:36:46,980
0,240 240,510 510,960 960,1170 1170,1290
has the advantage that you

1099
00:36:46,980 --> 00:36:48,360
0,90 90,240 240,420 420,960 960,1380
know you don't actually, {}|

1100
00:36:48,390 --> 00:36:49,950
0,390 390,600 600,840 840,1170 1170,1560
you can run into these,|

1101
00:36:49,950 --> 00:36:51,060
0,660

1102
00:36:51,340 --> 00:36:53,740
0,690 810,1200 1200,1380 1380,1800 1800,2400
{} {you,don't} {have,to} abort transaction

1103
00:36:53,740 --> 00:36:55,150
0,180 180,300 300,660 840,1170 1170,1410
at the end,| in case

1104
00:36:55,150 --> 00:36:56,320
0,120 120,300 300,510 510,570 570,1170
you run into a deadlock.|

1105
00:36:57,060 --> 00:36:59,430
0,570 690,1080 1080,1440 1440,1920 1920,2370
{} So 2-phase locking allowed

1106
00:36:59,430 --> 00:37:01,350
0,510 540,780 780,1380 1380,1500 1500,1920
for more concurrency in principle,|

1107
00:37:01,350 --> 00:37:02,220
0,180 180,390 390,570 570,690 690,870
or should allow for more

1108
00:37:02,220 --> 00:37:05,220
0,690 900,1560 1650,2490 2490,2700 2700,3000
concurrency {} than the strict

1109
00:37:05,220 --> 00:37:06,810
0,300 300,480 480,780 780,1050 1050,1590
locking or simple locking scheme|

1110
00:37:06,840 --> 00:37:08,310
0,420 720,1080 1080,1200 1200,1320 1320,1470
and so I would like

1111
00:37:08,310 --> 00:37:09,420
0,90 90,300 300,480 480,870 900,1110
to do is a quick

1112
00:37:09,420 --> 00:37:11,370
0,390 390,810 810,1590 1620,1740 1740,1950
breakout room| for a couple

1113
00:37:11,370 --> 00:37:12,690
0,300 300,450 450,660 660,900 900,1320
minutes like five minutes again,|

1114
00:37:12,960 --> 00:37:14,700
0,720 720,1140 1140,1350 1350,1470 1470,1740
and {} you know convince

1115
00:37:14,700 --> 00:37:17,910
0,660 900,1260 1260,1770 1770,2460 2490,3210
yourself or constructing case,| where

1116
00:37:17,910 --> 00:37:20,280
0,360 360,780 780,1170 1380,2220 2220,2370
simple locking which disallows some

1117
00:37:20,280 --> 00:37:22,800
0,840 900,1740 1770,2070 2070,2250 2250,2520
concurrency| that {} {2-phase -}

1118
00:37:22,800 --> 00:37:23,880
0,360 360,480 480,780 780,990 990,1080
locking is actually able to

1119
00:37:23,880 --> 00:37:24,800
0,570
exploit.|

1120
00:37:26,730 --> 00:37:28,830
0,420 630,750 750,1350 1380,1830 1830,2100
Cool, all right, let's do

1121
00:37:28,830 --> 00:37:30,820
0,450 450,1110
breakout rooms.|

1122
00:37:34,410 --> 00:37:35,850
0,510 600,960 960,1170 1170,1290 1290,1440
Okay, {} see you {in,five}

1123
00:37:35,850 --> 00:37:36,920
0,480
minutes.|

1124
00:44:07,130 --> 00:44:08,780
0,300 300,540 540,720 720,1020
We can't hear you.|

1125
00:44:17,730 --> 00:44:19,620
0,180 180,450 450,660 660,1350
I think you're muted.|

1126
00:44:36,180 --> 00:44:37,800
0,390 390,450 450,930 930,1440 1440,1620
{I,have} a question about one

1127
00:44:37,800 --> 00:44:39,750
0,150 150,300 300,840 840,1740 1770,1950
of the previous slides that

1128
00:44:39,750 --> 00:44:41,550
0,150 150,570 570,960 990,1530 1530,1800
you're talking about.| Well, let

1129
00:44:41,550 --> 00:44:42,690
0,60 60,300 300,660 690,840 840,1140
me double check if everybody

1130
00:44:42,690 --> 00:44:44,180
0,90 90,240 240,330 330,720
can hear me now.|

1131
00:44:44,330 --> 00:44:47,420
0,540 780,1470 1560,2010 2040,2550
Yes.| Okay, good, {}

1132
00:44:48,550 --> 00:44:49,660
0,180 180,510
go ahead.|

1133
00:44:50,620 --> 00:44:51,340
0,210 210,360 360,510 510,570 570,720
{} On one of your

1134
00:44:51,340 --> 00:44:52,600
0,630 660,840 840,960 960,1140 1140,1260
previous or I guess this

1135
00:44:52,600 --> 00:44:54,040
0,90 90,270 270,330 330,630 630,1440
is just a general question,|

1136
00:44:54,040 --> 00:44:55,420
0,210 210,390 390,660 660,960 960,1380
but is the lock point

1137
00:44:55,420 --> 00:44:56,320
0,300 300,390 390,630 630,780 780,900
always the same as the

1138
00:44:56,320 --> 00:44:57,730
0,330 330,780 1050,1230 1230,1320 1320,1410
commit point,| or is it

1139
00:44:57,730 --> 00:45:00,370
0,480 480,570 570,1290 1320,2190 2190,2640
possible to start relinquishing locks

1140
00:45:00,370 --> 00:45:01,840
0,300 300,420 420,720 720,1110 1170,1470
before your commit point.| Okay,

1141
00:45:01,840 --> 00:45:04,390
0,1260 1260,1740 1740,1920 1920,2040 2040,2550
{this,is} a very good question,|

1142
00:45:04,420 --> 00:45:07,180
0,360 360,690 750,1740 1770,2400 2490,2760
{} so depends, {} so

1143
00:45:07,180 --> 00:45:08,770
0,150 150,330 330,840 840,1020 1020,1590
if you only do exclusive

1144
00:45:08,770 --> 00:45:11,080
0,510 510,1620 1740,1980 1980,2160 2160,2310
locking| {} as we've done

1145
00:45:11,080 --> 00:45:11,890
0,180 180,450 450,540 540,720 720,810
so far, at least in

1146
00:45:11,890 --> 00:45:13,330
0,120 120,750 750,960 960,1200 1200,1440
my examples,| then commit point

1147
00:45:13,330 --> 00:45:14,940
0,90 90,450 450,630 630,1170
is similar to the,|

1148
00:45:15,060 --> 00:45:16,350
0,390 420,750 750,960 960,1020 1020,1290
the lock point is similar

1149
00:45:16,350 --> 00:45:17,130
0,60 60,150 150,600 600,690 690,780
to the {commit,point} and the

1150
00:45:17,130 --> 00:45:18,780
0,300 300,690 780,1350 1350,1470 1470,1650
abort point,| if you have

1151
00:45:18,780 --> 00:45:20,520
0,240 240,480 480,1050 1200,1410 1410,1740
read write locking,| the locks

1152
00:45:20,520 --> 00:45:23,340
0,180 180,1410 1740,2370 2370,2640 2640,2820
that allow yeah both read

1153
00:45:23,340 --> 00:45:25,650
0,330 330,510 510,720 720,1230 1530,2310
locks and write locks,| then,

1154
00:45:25,650 --> 00:45:27,240
0,0 0,420 420,870 870,1020 1020,1590
{} it's possible to release

1155
00:45:27,240 --> 00:45:29,490
0,540 540,750 750,1050 1050,1770 1800,2250
{} read locks earlier with

1156
00:45:29,490 --> 00:45:30,900
0,210 210,990
some restrictions.|

1157
00:45:32,540 --> 00:45:33,820
0,690
Okay.|

1158
00:45:34,780 --> 00:45:36,920
0,690 720,1470
Okay, {}

1159
00:45:36,950 --> 00:45:38,990
0,390 390,390 1290,1620 1620,1920 1920,2040
so {} can somebody give

1160
00:45:38,990 --> 00:45:40,340
0,90 90,270 270,720 720,780 780,1350
me one example| of where

1161
00:45:40,460 --> 00:45:42,710
0,210 210,480 480,840 840,1410 1440,2250
{2-phase -} locking is allowing

1162
00:45:42,710 --> 00:45:43,910
0,150 150,330 330,810 810,960 960,1200
for more concurrency than simple

1163
00:45:43,910 --> 00:45:44,900
0,450
locking,|

1164
00:45:45,380 --> 00:45:46,460
0,240 240,480 510,690 690,930 930,1080
just to make sure we're

1165
00:45:46,460 --> 00:45:47,540
0,180 180,300 300,390 390,570 570,1080
all on the same page.|

1166
00:45:52,360 --> 00:45:54,670
0,150 150,780 780,1440 1440,2040 2040,2310
The audit function example,| like

1167
00:45:54,670 --> 00:45:56,020
0,150 150,420 420,810 810,960 960,1350
you can release the lock

1168
00:45:56,020 --> 00:45:58,120
0,150 150,450 450,990 1260,1590 1590,2100
as soon as you read

1169
00:45:58,510 --> 00:46:00,120
0,330 330,1140
this person's

1170
00:46:00,150 --> 00:46:01,380
0,720 750,930 930,1020 1020,1140 1140,1230
account,| like you don't have

1171
00:46:01,380 --> 00:46:02,340
0,120 120,300 300,630 630,780 780,960
to wait until you read

1172
00:46:02,340 --> 00:46:03,640
0,300 300,780
every once.|

1173
00:46:04,120 --> 00:46:05,140
0,330 330,510 510,600 600,660 660,1020
{} This is an example

1174
00:46:05,140 --> 00:46:06,610
0,60 60,450 450,570 570,780 780,1470
of exploiting the read {}

1175
00:46:06,640 --> 00:46:07,600
0,240 240,570 570,660 660,750 750,960
read locks,| if you have

1176
00:46:07,600 --> 00:46:08,720
0,150 150,600
read locks.|

1177
00:46:15,060 --> 00:46:17,620
0,360 360,540 540,1020
Any other examples?|

1178
00:46:19,930 --> 00:46:21,280
0,180 180,300 300,420 420,630 630,1350
If you have a transaction

1179
00:46:21,280 --> 00:46:23,530
0,630 720,1080 1080,1380 1380,1980 1980,2250
where there's a condition that

1180
00:46:23,530 --> 00:46:26,320
0,300 300,780 780,1800 2190,2370 2370,2790
only rarely like is true|

1181
00:46:26,320 --> 00:46:27,490
0,300 330,570 570,780 780,960 960,1170
and you read a piece

1182
00:46:27,490 --> 00:46:28,510
0,120 120,390 390,540 540,690 690,1020
of data when it's true,|

1183
00:46:28,510 --> 00:46:29,500
0,510
so,

1184
00:46:29,500 --> 00:46:30,160
0,120 120,180 180,480 480,570 570,660
at the beginning you don't

1185
00:46:30,160 --> 00:46:31,090
0,180 180,270 270,570 570,660 660,930
need to acquire the lock|

1186
00:46:31,090 --> 00:46:32,170
0,120 120,660 660,900 900,1020 1020,1080
for that only when you

1187
00:46:32,170 --> 00:46:34,150
0,300 300,630 660,1170 1470,1770 1800,1980
actually need {to,read,it}.| Yeah, that's

1188
00:46:34,150 --> 00:46:35,560
0,60 60,240 240,630 630,930 930,1410
a great example, I personally

1189
00:46:35,560 --> 00:46:36,460
0,150 150,270 270,540 540,570 570,900
like that example a lot,|

1190
00:46:36,490 --> 00:46:37,840
0,240 240,300 300,450 450,720
that's a great one.|

1191
00:46:38,960 --> 00:46:40,700
0,540 600,1050 1110,1350 1350,1470 1470,1740
Good, okay good, so let's

1192
00:46:40,730 --> 00:46:42,110
0,510 510,690 690,1050 1050,1230 1230,1380
move on basically down to

1193
00:46:42,110 --> 00:46:44,150
0,240 240,600 600,1110 1200,1860 1860,2040
the second topic of this

1194
00:46:44,150 --> 00:46:45,380
0,270 270,450 450,690 690,1020 1020,1230
lecture,| which is {} {2-phase

1195
00:46:45,380 --> 00:46:46,440
0,210 210,510
-} commit.|

1196
00:46:49,420 --> 00:46:50,560
0,270 270,360 360,690 690,960 960,1140
This is really dealing with

1197
00:46:50,560 --> 00:46:52,100
0,630
crashes,|

1198
00:46:53,670 --> 00:46:55,440
0,480 480,720 720,810 810,1320 1560,1770
switch back to blue and

1199
00:46:55,440 --> 00:46:57,660
0,90 90,210 210,750
they are [wisely].|

1200
00:47:01,910 --> 00:47:02,840
0,210 210,420 420,510 510,570 570,930
We can't see the slides

1201
00:47:02,840 --> 00:47:06,660
0,1800 2280,3180
either yet.|

1202
00:47:07,280 --> 00:47:09,860
0,180 180,750 780,1080 1080,1470 1980,2580
{Oh,let} me fix that, {}

1203
00:47:10,970 --> 00:47:13,160
0,390 390,720 720,1110 1110,1620
and {lold -} on,|

1204
00:47:15,030 --> 00:47:17,680
0,1020 1020,1320 1320,2130
share screen {step,to}

1205
00:47:19,440 --> 00:47:20,780
0,750
share.|

1206
00:47:21,390 --> 00:47:23,180
0,390 510,1230
How {about,that}?|

1207
00:47:23,180 --> 00:47:26,660
0,510 840,1620 1800,2370 2370,2730
Okay.| Good, thank you.|

1208
00:47:26,800 --> 00:47:28,090
0,420 420,540 540,660 660,840 840,1290
Alright, so {two-phase -} commit

1209
00:47:32,500 --> 00:47:35,470
0,390 420,600 600,1320 2250,2550 2550,2970
or {2PC -} that's popular

1210
00:47:35,470 --> 00:47:37,060
0,510 750,1230 1230,1380 1380,1500 1500,1590
called,| again this is a

1211
00:47:37,060 --> 00:47:41,590
0,660 690,1320 1770,2670 2670,3390 3420,4530
very {} well-known popular protocol,|

1212
00:47:41,890 --> 00:47:43,510
0,780 900,1170 1170,1230 1230,1440 1440,1620
I'm going to talk about

1213
00:47:43,510 --> 00:47:44,830
0,180 180,630 630,810 810,870 870,1320
that base sort of simple

1214
00:47:44,830 --> 00:47:47,020
0,900 900,1440 1500,1680 1680,1890 1890,2190
straightforward for the most common

1215
00:47:47,020 --> 00:47:49,060
0,360 360,450 450,540 540,1200 1470,2040
version of the protocol, {}|

1216
00:47:49,090 --> 00:47:51,070
0,420 420,690 690,930 930,1050 1050,1980
they're all kinds of variations

1217
00:47:51,070 --> 00:47:52,570
0,150 150,360 570,1140 1140,1290 1290,1500
of it,| but you know

1218
00:47:52,570 --> 00:47:53,890
0,360 360,600 600,960 960,1230 1230,1320
in they also have the

1219
00:47:53,890 --> 00:47:56,060
0,780 990,1740
same {}

1220
00:47:56,090 --> 00:47:58,660
0,810 810,1470 1470,2010
{} underlying idea.|

1221
00:47:58,840 --> 00:48:01,330
0,240 240,360 360,780 990,1530 1740,2490
And so again {} typically

1222
00:48:01,330 --> 00:48:03,220
0,540 540,1200 1200,1590 1590,1740 1740,1890
interface protocol| and I'm going

1223
00:48:03,220 --> 00:48:03,880
0,210 240,420 420,510 510,600 600,660
to do it in the

1224
00:48:03,880 --> 00:48:06,550
0,510 510,660 660,900 900,1860 1890,2670
context of the transfer transaction,|

1225
00:48:07,000 --> 00:48:08,650
0,360 360,450 450,930 930,1080 1080,1650
so a client that actually

1226
00:48:08,650 --> 00:48:09,970
0,240 240,330 330,450 450,510 510,1320
wants to do a transfer|

1227
00:48:10,090 --> 00:48:13,840
0,540 540,990 990,1530 2700,3330 3330,3750
basically submits the transfer transaction

1228
00:48:13,840 --> 00:48:16,930
0,210 210,660 660,1230 1590,2790 2790,3090
to transaction system,| {} and

1229
00:48:16,930 --> 00:48:18,160
0,120 120,450 450,600 600,900 900,1230
the [] or the machine

1230
00:48:18,160 --> 00:48:20,020
0,180 180,390 600,1230 1230,1710 1710,1860
sort of receive transaction is

1231
00:48:20,020 --> 00:48:21,640
0,210 210,270 270,1050
called the coordinator,|

1232
00:48:23,490 --> 00:48:25,220
0,660
and

1233
00:48:25,560 --> 00:48:27,510
0,360 360,900 900,990 990,1200 1200,1950
that machine is in charge

1234
00:48:27,540 --> 00:48:29,910
0,450 480,1050 1050,1140 1140,1680 1680,2370
of running the transaction through

1235
00:48:29,940 --> 00:48:32,400
0,420 420,870 870,1350 1920,2130 2130,2460
the transaction system| and so

1236
00:48:32,400 --> 00:48:33,870
0,480 480,630 630,1050 1050,1170 1170,1470
{} the coordinator will talk

1237
00:48:33,870 --> 00:48:34,980
0,210 210,390 390,720 720,900 900,1110
in our case to two

1238
00:48:34,980 --> 00:48:36,380
0,270 270,930
different machines,

1239
00:48:37,100 --> 00:48:38,740
0,420 420,600 600,1080
a and b,|

1240
00:48:38,960 --> 00:48:40,310
0,210 210,480 480,660 660,1260 1260,1350
{} where a holds you

1241
00:48:40,310 --> 00:48:42,560
0,150 150,720 720,1320 1350,1740 1740,2250
know x and b holds

1242
00:48:42,560 --> 00:48:44,000
0,600
y.|

1243
00:48:45,150 --> 00:48:47,360
0,960 990,1620
And, {}

1244
00:48:47,860 --> 00:48:49,100
0,690
{}

1245
00:48:49,280 --> 00:48:51,110
0,360 360,1020 1020,1260 1260,1560 1560,1830
and basically you know one

1246
00:48:51,110 --> 00:48:52,640
0,420 420,630 630,810 810,1170 1170,1530
way that this typically goes

1247
00:48:52,640 --> 00:48:53,660
0,120 120,270 270,360 360,810 810,1020
is that| the coordinator for

1248
00:48:53,660 --> 00:48:54,560
0,90 90,270 270,450 480,810 810,900
a sort of does the

1249
00:48:54,560 --> 00:48:55,760
0,210 210,780 780,930 930,1080 1080,1200
whole transaction,| but in a

1250
00:48:55,760 --> 00:48:58,700
0,660 690,1380 1440,1620 1620,1980 2340,2940
tentative way,| {} so, {}

1251
00:48:58,700 --> 00:49:00,300
0,210 210,480 480,1170
the put x,

1252
00:49:00,660 --> 00:49:01,350
0,90 90,240 240,570 570,630 630,690
you know results in a

1253
00:49:01,350 --> 00:49:03,090
0,330 330,510 510,1050 1080,1290 1290,1740
message to A,| {you,know} locking

1254
00:49:03,090 --> 00:49:04,200
0,540
A,

1255
00:49:04,380 --> 00:49:06,690
0,480 480,1230 1230,1830 1920,2130 2130,2310
{} modifying A,| you know

1256
00:49:06,690 --> 00:49:10,020
0,870 1290,2070 2280,3000 3000,3090 3090,3330
put x, except the put

1257
00:49:10,020 --> 00:49:11,610
0,120 120,420 420,900 900,1380 1380,1590
is not actually visible, yet

1258
00:49:11,610 --> 00:49:13,350
0,60 60,150 150,930 1020,1290 1290,1740
in the database,| {} what

1259
00:49:13,350 --> 00:49:14,880
0,450 450,720 720,1020 1020,1440 1440,1530
what's done is putting a

1260
00:49:14,880 --> 00:49:17,130
0,630 900,1590 1590,1890 1890,2130 2130,2250
log| very much like in

1261
00:49:17,130 --> 00:49:18,150
0,210 210,330 330,720 720,810 810,1020
sort of a in the

1262
00:49:18,150 --> 00:49:19,530
0,330 330,480 480,630 630,1020 1020,1380
{frangipani - -} style,| where

1263
00:49:19,530 --> 00:49:20,220
0,120 120,210 210,300 300,510 510,690
we have to write ahead

1264
00:49:20,220 --> 00:49:21,870
0,450 720,960 960,1080 1080,1530 1530,1650
log,| all the operations that

1265
00:49:21,870 --> 00:49:22,710
0,120 120,210 210,390 390,690 690,840
we at some point,| one

1266
00:49:22,710 --> 00:49:23,730
0,60 60,510 510,810 810,960 960,1020
of {materialize -} in the

1267
00:49:23,730 --> 00:49:25,440
0,450 450,1050 1080,1200 1200,1530 1530,1710
database itself,| we first put

1268
00:49:25,440 --> 00:49:27,330
0,90 90,180 180,750 870,1290 1290,1890
in the log until later

1269
00:49:27,330 --> 00:49:28,590
0,150 150,270 270,990 990,1170 1170,1260
in the {particular,case} until we

1270
00:49:28,590 --> 00:49:30,210
0,180 180,660 750,930 930,1440 1440,1620
hit commit| and then we

1271
00:49:30,210 --> 00:49:31,500
0,210 210,360 360,810 810,1170 1170,1290
actually will install everything in

1272
00:49:31,500 --> 00:49:32,860
0,450 480,1110
the database.|

1273
00:49:33,280 --> 00:49:35,050
0,240 240,330 330,540 540,1020 1050,1770
So we do put, {}

1274
00:49:35,080 --> 00:49:37,360
0,150 150,300 300,600 600,1050 1560,2280
we do second put {you,know,to,y},|

1275
00:49:39,810 --> 00:49:41,400
0,540 540,690 690,1200 1200,1470 1470,1590
{} in another same thing

1276
00:49:41,400 --> 00:49:43,170
0,330 330,720 720,810 810,1380 1500,1770
happens there,| you know we

1277
00:49:43,170 --> 00:49:44,880
0,120 120,180 180,660 690,1140 1140,1710
got a lock on y,|

1278
00:49:44,910 --> 00:49:45,630
0,240 240,390 390,540 540,660 660,720
okay so just sort of

1279
00:49:45,630 --> 00:49:47,080
0,210 210,480 480,570 570,960
being locked in x,|

1280
00:49:47,080 --> 00:49:48,250
0,390 390,510 510,600 600,720 720,1170
and what do a put

1281
00:49:48,250 --> 00:49:50,220
0,360 360,990
on y,|

1282
00:49:50,800 --> 00:49:53,080
0,300 300,750 750,960 960,1530 1740,2280
and again we're gonna not

1283
00:49:53,080 --> 00:49:54,250
0,510 510,600 600,750 750,990 990,1170
actually you know really put

1284
00:49:54,250 --> 00:49:55,840
0,420 450,960 960,1050 1050,1140 1140,1590
the value in the database,|

1285
00:49:55,840 --> 00:49:57,520
0,300 300,480 480,930 1050,1440 1530,1680
we're gonna log,| so we're

1286
00:49:57,520 --> 00:49:59,290
0,450 450,1110 1320,1470 1470,1710 1710,1770
logging y and here we

1287
00:49:59,290 --> 00:50:00,840
0,30 30,390 390,780
are log x.|

1288
00:50:01,400 --> 00:50:02,640
0,660
Okay?|

1289
00:50:03,440 --> 00:50:04,880
0,420 420,570 570,960 960,1080 1080,1440
{} And now the coordinate

1290
00:50:04,880 --> 00:50:06,140
0,90 90,300 300,960 990,1110 1110,1260
is done two you know

1291
00:50:06,140 --> 00:50:08,360
0,570 600,1350 1350,1530 1530,2010 2010,2220
the transactions,| that {two,of} main

1292
00:50:08,360 --> 00:50:10,130
0,540 540,810 810,1050 1050,1350 1350,1770
operations now so ready to

1293
00:50:10,130 --> 00:50:13,340
0,960 1170,1680 1890,2790 2790,3030 3030,3210
{} commit| and here's where

1294
00:50:13,340 --> 00:50:14,510
0,120 120,300 300,660 660,960 960,1170
the {two-phase -} part comes

1295
00:50:14,510 --> 00:50:15,220
0,150
in.|

1296
00:50:15,390 --> 00:50:18,120
0,450 450,870 990,1680 1830,2580 2580,2730
And so the coordinator will

1297
00:50:18,120 --> 00:50:20,140
0,300 300,540 540,930 930,1560
send a prepare message,|

1298
00:50:20,410 --> 00:50:21,820
0,210 210,480 480,690 690,1170 1170,1410
and first gonna describe this

1299
00:50:21,850 --> 00:50:24,220
0,750 750,1230 1230,1440 1440,1590 1590,2370
protocol indicates| there's no failures

1300
00:50:24,220 --> 00:50:26,140
0,390 390,750 750,1050 1050,1380
and everything works out,|

1301
00:50:26,140 --> 00:50:28,150
0,600 600,690 690,1020 1020,1620 1620,2010
{} you know just sort

1302
00:50:28,150 --> 00:50:30,670
0,60 60,1410 1410,1680 1680,2040 2040,2520
of the easy cases {as,will},|

1303
00:50:31,240 --> 00:50:32,950
0,360 360,570 570,780 780,1110 1110,1710
{} sends a prepared message,|

1304
00:50:33,490 --> 00:50:35,500
0,630 630,1020 1020,1290 1320,1650 1650,2010
{} sends a prepare message

1305
00:50:35,500 --> 00:50:36,920
0,570
to,

1306
00:50:37,080 --> 00:50:40,710
0,1800 1830,2520 2520,3000 3090,3300 3300,3630
to prepare A, {you,know} prepare

1307
00:50:40,710 --> 00:50:42,040
0,540
B.|

1308
00:50:45,310 --> 00:50:46,630
0,300 300,390 390,750 750,1050 1050,1320
And the prepared message of

1309
00:50:46,630 --> 00:50:48,730
0,300 300,810 810,930 930,1560 1560,2100
course includes the transaction ID

1310
00:50:48,730 --> 00:50:50,380
0,240 240,510 510,810 810,1200 1200,1650
that has actually used for

1311
00:50:50,410 --> 00:50:52,210
0,420 420,720 720,990 1020,1320 1320,1800
{this,transaction -},| so every transaction

1312
00:50:52,210 --> 00:50:54,640
0,210 210,330 330,780 780,1350 1920,2430
has a transaction ID| and

1313
00:50:54,640 --> 00:50:55,930
0,180 180,240 240,570 570,720 720,1290
all the message are tag

1314
00:50:55,990 --> 00:50:57,280
0,330 330,420 420,840 840,1110 1110,1290
with the transaction ID,| so

1315
00:50:57,280 --> 00:50:58,450
0,120 120,240 240,720 720,960 960,1170
we always know about which

1316
00:50:58,450 --> 00:51:00,320
0,480 480,600 600,930 930,1380
transaction we're talking about.|

1317
00:51:00,880 --> 00:51:03,070
0,540 720,1230 1230,1560 1560,1710 1710,2190
{} When A and B

1318
00:51:03,100 --> 00:51:05,800
0,660 660,990 990,1650 2010,2610 2610,2700
receives prepare messages,| {} you

1319
00:51:05,800 --> 00:51:06,490
0,120 120,270 270,480 480,570 570,690
know they look at their

1320
00:51:06,490 --> 00:51:08,950
0,510 570,1890 1890,2010 2010,2160 2160,2460
state,| {} you know see

1321
00:51:08,950 --> 00:51:10,420
0,150 150,450 450,990 990,1110 1110,1470
if they indeed can actually

1322
00:51:10,420 --> 00:51:11,770
0,360 360,450 450,1080 1080,1140 1140,1350
execute the transaction,| you know

1323
00:51:11,770 --> 00:51:13,510
0,180 180,510 510,600 600,990 990,1740
they're holding the lock on

1324
00:51:13,510 --> 00:51:15,220
0,210 210,270 270,390 390,900 1080,1710
x in this case,| the

1325
00:51:15,250 --> 00:51:16,660
0,270 270,390 390,750 750,840 840,1410
x is actually the log

1326
00:51:16,810 --> 00:51:17,770
0,180 180,300 300,390 390,570 570,960
and so they sent back,|

1327
00:51:17,770 --> 00:51:19,900
0,90 90,990 1020,1230 1230,1800 1800,2130
you know saying yeah I'm

1328
00:51:19,900 --> 00:51:21,520
0,450 450,720 720,1260
ready to commit.|

1329
00:51:21,990 --> 00:51:23,440
0,870
{So,,yes},

1330
00:51:24,490 --> 00:51:25,840
0,840
yes.|

1331
00:51:27,200 --> 00:51:28,820
0,600 600,690 690,810 810,1110 1110,1620
And at this particular point,

1332
00:51:29,120 --> 00:51:31,280
0,600 600,1140 1140,1230 1230,1830 1830,2160
{} use the crucial step

1333
00:51:31,280 --> 00:51:33,170
0,330 570,720 720,1230 1230,1410 1410,1890
is the coordinator now knows

1334
00:51:33,170 --> 00:51:34,490
0,150 150,570 570,990 990,1140 1140,1320
that basically both A and

1335
00:51:34,490 --> 00:51:37,940
0,330 330,1440 1620,2640 2640,3060 3060,3450
B are prepared to commit|

1336
00:51:38,240 --> 00:51:40,040
0,240 240,600 600,1260 1260,1530 1530,1800
and so and I have

1337
00:51:40,040 --> 00:51:41,780
0,390 390,930 930,1020 1020,1380 1380,1740
basically promised to commit| by

1338
00:51:41,780 --> 00:51:45,320
0,510 510,840 1110,1950 1950,2700 2880,3540
actually {} responding y| and

1339
00:51:45,320 --> 00:51:47,300
0,240 240,420 420,930 930,1350
at this point the

1340
00:51:48,000 --> 00:51:49,840
0,660 660,1320
coordinator commits.|

1341
00:51:49,930 --> 00:51:51,250
0,450 450,930 930,1020 1020,1110 1110,1320
And then you know since

1342
00:51:51,250 --> 00:51:54,100
0,600 600,720 720,1170 1170,1710 2100,2850
messages {you,know} again to the

1343
00:51:54,670 --> 00:51:56,620
0,360 360,900
{A,same} commits,|

1344
00:51:56,920 --> 00:51:59,260
0,360 360,480 480,1260 1290,1650 1650,2340
{you,know} the transaction {TID -},|

1345
00:51:59,960 --> 00:52:02,450
0,270 270,690 690,1080 1080,1650 1650,2490
{} similar message to b

1346
00:52:02,450 --> 00:52:04,720
0,180 180,690 720,960 960,1620
{you,know} commit {TID -}.|

1347
00:52:07,190 --> 00:52:08,360
0,150 150,240 240,390 390,690 690,1170
And at this particular point

1348
00:52:08,660 --> 00:52:10,700
0,540 540,900 900,1110 1110,1590 1590,2040
A and B actually performed

1349
00:52:10,700 --> 00:52:12,800
0,150 150,720 720,1140 1230,1710 1710,2100
the operation,| so they basically

1350
00:52:12,800 --> 00:52:14,160
0,810
install,|

1351
00:52:14,160 --> 00:52:15,060
0,180 180,330 330,690 690,780 780,900
at this point you know

1352
00:52:15,060 --> 00:52:17,400
0,150 150,900
they install

1353
00:52:17,820 --> 00:52:18,960
0,270 270,420 420,720 720,1050 1050,1140
{you,know} the log version of

1354
00:52:18,960 --> 00:52:24,120
0,690 1020,2070 2070,2940 3420,4440 4440,5160
y,| {here,again} {this,transaction} {this,participants} installs

1355
00:52:24,120 --> 00:52:25,460
0,450
the

1356
00:52:25,610 --> 00:52:27,260
0,660 690,1140 1140,1290 1290,1560 1560,1650
x| and then release the

1357
00:52:27,260 --> 00:52:30,440
0,510 840,1110 1110,1650 1680,2700 2730,3180
locks,| so release y and

1358
00:52:30,440 --> 00:52:31,640
0,180 180,300 300,450 450,870 870,1200
{here -} the release of

1359
00:52:31,670 --> 00:52:32,740
0,540
x,|

1360
00:52:33,010 --> 00:52:34,420
0,390 390,510 510,900 900,1320 1320,1410
then they respond back you

1361
00:52:34,420 --> 00:52:36,100
0,120 120,690
know {to,the}

1362
00:52:36,190 --> 00:52:38,740
0,240 240,1140 1230,1650 1650,1830 1830,2550
{} coordinator,| saying like yep

1363
00:52:38,770 --> 00:52:40,020
0,300 300,630
all done,|

1364
00:52:40,600 --> 00:52:42,480
0,720
{and

1365
00:52:43,120 --> 00:52:43,900
0,120 120,210 210,360 360,600 600,780
-} at that point the

1366
00:52:43,900 --> 00:52:45,790
0,480 480,540 540,1080 1080,1440 1530,1890
transaction is completely done, {}|

1367
00:52:45,790 --> 00:52:47,530
0,180 180,750 750,1290 1290,1530 1530,1740
in fact coordinator doesn't really

1368
00:52:47,530 --> 00:52:48,820
0,180 180,270 270,600 600,900 900,1290
have to remember anything anymore

1369
00:52:48,820 --> 00:52:50,560
0,180 180,330 330,660 660,1140
about this particular transaction.|

1370
00:52:50,740 --> 00:52:52,420
0,630 690,1200 1200,1260 1260,1500 1500,1680
And, { -} also see

1371
00:52:52,420 --> 00:52:53,980
0,390 390,480 480,570 570,1290 1350,1560
later,| you know {A,and,B} you

1372
00:52:53,980 --> 00:52:54,940
0,270 270,360 360,690 690,780 780,960
need to remember to stay

1373
00:52:54,940 --> 00:52:56,140
0,0 0,270 270,750 750,1050 1050,1200
a little longer| until they

1374
00:52:56,140 --> 00:52:57,490
0,240 240,450 450,510 510,840 840,1350
hear about the next transaction.|

1375
00:52:58,410 --> 00:52:59,460
0,300 300,420 420,600 600,720 720,1050
Okay, so this is a

1376
00:52:59,820 --> 00:53:02,100
0,750 1140,1680 1680,2010 2010,2130 2130,2280
core basic case| when there's

1377
00:53:02,100 --> 00:53:04,950
0,420 420,600 600,1200 1530,2310 2520,2850
absolutely no failures| and {}

1378
00:53:04,950 --> 00:53:06,300
0,390 390,720 720,960 960,1080 1080,1350
we see what we actually

1379
00:53:06,300 --> 00:53:07,980
0,210 210,360 360,810 810,1380 1380,1680
get the desired outcome, correct,|

1380
00:53:08,370 --> 00:53:09,390
0,150 150,210 210,750 750,930 930,1020
you know when does the

1381
00:53:09,390 --> 00:53:12,630
0,600 600,1110 1350,2070 2070,2490 2490,3240
coordinated commits,| coordinated commits only

1382
00:53:19,360 --> 00:53:23,650
0,300 300,810 1290,2190 2700,3810 3810,4290
if A {and,B} {} agree.|

1383
00:53:28,890 --> 00:53:30,090
0,570 600,930 930,1050 1050,1140 1140,1200
Okay, it could be the

1384
00:53:30,090 --> 00:53:31,950
0,510 510,780 780,1020 1020,1410 1410,1860
case,| that for example when

1385
00:53:32,190 --> 00:53:33,660
0,570 570,690 690,1200 1200,1410 1410,1470
{} the coordinator sends a

1386
00:53:33,660 --> 00:53:35,970
0,330 330,840 840,1620 1620,2070 2070,2310
message {to,B},| {and,B} decides, well

1387
00:53:35,970 --> 00:53:38,550
0,330 360,600 600,810 810,1260 1680,2580
I can't really commit, {}|

1388
00:53:38,580 --> 00:53:40,890
0,1140 1320,1410 1410,1620 1620,1740 1740,2310
maybe there could be multiple

1389
00:53:40,890 --> 00:53:42,810
0,360 360,630 630,780 1140,1410 1410,1920
reasons for it,| {} maybe

1390
00:53:42,810 --> 00:53:44,970
0,1020 1050,1470 1470,1980 1980,2070 2070,2160
the B actually is in

1391
00:53:44,970 --> 00:53:45,930
0,60 60,570 570,720 720,900 900,960
a situation| where there's a

1392
00:53:45,930 --> 00:53:48,560
0,570 600,1380 1380,1710 1710,2190
deadlock {} with y,|

1393
00:53:48,590 --> 00:53:50,900
0,840 870,1620 1620,1770 1770,1890 1890,2310
or {} you know there's

1394
00:53:50,900 --> 00:53:51,800
0,150 150,420 420,510 510,600 600,900
no space in the log

1395
00:53:51,800 --> 00:53:53,210
0,480 480,900 900,1080 1080,1230 1230,1410
anymore| or there's not enough

1396
00:53:53,210 --> 00:53:54,530
0,360 360,510 510,870 870,1260 1260,1320
money in the account of

1397
00:53:54,530 --> 00:53:57,140
0,480 900,1590 1740,2160 2160,2340 2340,2610
y| and, {} and so

1398
00:53:57,140 --> 00:53:59,210
0,120 120,450 480,960 960,1170 1170,2070
you know B could respond

1399
00:53:59,240 --> 00:54:01,340
0,210 210,360 360,810 1080,1440 1440,2100
with an no,| let's say

1400
00:54:01,580 --> 00:54:03,020
0,150 150,540 750,960 960,1080 1080,1440
in this, so the other

1401
00:54:03,020 --> 00:54:04,370
0,420 420,840 840,1050 1050,1140 1140,1350
possible outcome is you know

1402
00:54:04,370 --> 00:54:05,630
0,120 120,450 450,750 750,900 900,1260
the prepare message can actually

1403
00:54:05,630 --> 00:54:07,820
0,510 510,660 660,870 870,1320 1860,2190
send a no back,| and

1404
00:54:07,820 --> 00:54:10,850
0,120 120,330 330,1020 1170,1980 2100,3030
in that case, the coordinator

1405
00:54:10,850 --> 00:54:11,990
0,180 180,480 480,900 900,1020 1020,1140
gets one yes you know

1406
00:54:11,990 --> 00:54:13,100
0,90 90,540 540,630 630,930 930,1110
from A, a no from

1407
00:54:13,100 --> 00:54:14,510
0,480 480,690 690,780 780,1290 1290,1410
B,| and so both do

1408
00:54:14,510 --> 00:54:15,770
0,240 240,720 930,1050 1050,1110 1110,1260
not agree| and in that

1409
00:54:15,770 --> 00:54:17,090
0,300 300,390 390,510 510,750 750,1320
case, you know the coordinator

1410
00:54:17,090 --> 00:54:18,410
0,390 390,630 630,720 720,1230 1230,1320
cannot commit the transaction| and

1411
00:54:18,410 --> 00:54:19,340
0,150 150,210 210,330 330,600 600,930
then it would actually abort

1412
00:54:19,340 --> 00:54:20,280
0,60 60,570
the transaction,|

1413
00:54:22,600 --> 00:54:23,440
0,210 210,360 360,510 510,600 600,840
and then say the abort

1414
00:54:23,440 --> 00:54:26,350
0,630 630,750 750,1230 1230,1800 2340,2910
messages to {A,and,B},| basically {}

1415
00:54:26,440 --> 00:54:28,870
0,1110 1140,1470 1470,2010 2040,2220 2220,2430
discontinuing the transaction,| so those

1416
00:54:28,870 --> 00:54:30,100
0,180 180,270 270,420 420,780 780,1230
are the two possible outcomes,|

1417
00:54:30,100 --> 00:54:30,970
0,60 60,240 240,390 390,630 630,870
one in the commit case

1418
00:54:30,970 --> 00:54:31,960
0,150 150,210 210,300 300,540 540,990
one in the abort case,|

1419
00:54:32,110 --> 00:54:33,430
0,540 540,870 870,1140 1140,1230 1230,1320
{} and when it is

1420
00:54:33,430 --> 00:54:34,450
0,270 270,330 330,660 660,930 930,1020
always the case,| that the

1421
00:54:34,450 --> 00:54:36,400
0,420 450,870 870,1320 1560,1680 1680,1950
transaction only commits,| the top

1422
00:54:36,400 --> 00:54:38,350
0,180 180,600 600,810 810,1200 1200,1950
level transaction only commits,| both

1423
00:54:38,350 --> 00:54:39,640
0,90 90,660 660,810 810,840 840,1290
the participants that are involved

1424
00:54:39,640 --> 00:54:41,140
0,60 60,150 150,840 930,1440 1440,1500
in the transaction agreed to

1425
00:54:41,140 --> 00:54:42,020
0,150 150,480
do so.|

1426
00:54:44,720 --> 00:54:46,640
0,540 660,1350 1410,1680 1680,1830 1830,1920
{} Now, that's sort of

1427
00:54:46,640 --> 00:54:49,040
0,360 420,1170 1200,1410 1410,1800 1830,2400
the outline of the protocols,|

1428
00:54:49,040 --> 00:54:49,970
0,90 90,270 270,360 360,660 660,930
I want to now go

1429
00:54:49,970 --> 00:54:51,110
0,270 270,330 330,540 540,600 600,1140
through a couple of cases|

1430
00:54:51,110 --> 00:54:53,750
0,270 270,360 360,630 630,1380 1800,2640
{you,know} {sort,of} to understand {}

1431
00:54:53,750 --> 00:54:54,440
0,180 180,240 240,420 420,510 510,690
you know what can go

1432
00:54:54,440 --> 00:54:55,970
0,450 450,1020 1020,1200 1200,1290 1290,1530
wrong| and how we do

1433
00:54:55,970 --> 00:54:57,500
0,360 360,480 480,930 960,1230 1230,1530
how we deal how {two-phase

1434
00:54:57,500 --> 00:54:59,930
0,450 570,1140 1380,2190 2190,2280 2280,2430
-} commit {arranges -} that

1435
00:54:59,930 --> 00:55:00,950
0,390 390,630 630,690 690,900 900,1020
actually still the right thing

1436
00:55:00,950 --> 00:55:01,880
0,630
happens.|

1437
00:55:01,970 --> 00:55:03,020
0,390 390,450 450,540 540,600 600,1050
Actually I have a question.|

1438
00:55:03,020 --> 00:55:04,730
0,510 690,1110 1110,1350 1350,1470 1470,1710
Yeah.| {} So we said

1439
00:55:04,730 --> 00:55:06,260
0,270 300,630 630,840 840,1170 1170,1530
that like B might decide

1440
00:55:06,260 --> 00:55:07,850
0,330 570,690 690,930 930,1050 1050,1590
that it needs to abort,|

1441
00:55:08,480 --> 00:55:09,800
0,330 330,570 570,720 720,1110 1110,1320
sends back no message,| what

1442
00:55:09,800 --> 00:55:10,760
0,120 120,210 210,630 630,690 690,960
if it decides it needs

1443
00:55:10,760 --> 00:55:13,640
0,330 600,1290 1320,1860 1860,2220 2370,2880
to abort after it replied

1444
00:55:13,640 --> 00:55:15,080
0,660 750,990 990,1140 1140,1290 1290,1440
yes,| would that ever be

1445
00:55:15,080 --> 00:55:17,600
0,660 960,1920 1920,2160 2160,2340 2340,2520
possible.| No, we'll talk about

1446
00:55:17,600 --> 00:55:18,680
0,150 150,210 210,510 510,810 810,1080
in a second,| but that's

1447
00:55:18,680 --> 00:55:20,720
0,450 450,660 660,1110 1260,1620 1620,2040
absolutely not possible,| if you

1448
00:55:20,720 --> 00:55:22,310
0,480 480,660 660,990 990,1290 1320,1590
promise to {over,commit -}, you

1449
00:55:22,310 --> 00:55:23,460
0,270 270,330 330,750
have to commit.|

1450
00:55:25,520 --> 00:55:26,360
0,210 210,360 360,540 540,660 660,840
Or you have to be

1451
00:55:26,360 --> 00:55:27,650
0,360 360,480 480,930 990,1200 1200,1290
ready to commit.| You have

1452
00:55:27,650 --> 00:55:28,640
0,90 90,210 210,450 450,510 510,990
to be ready to commit,|

1453
00:55:28,640 --> 00:55:29,630
0,120 120,300 300,600 600,750 750,990
you don't commit right away,

1454
00:55:29,630 --> 00:55:30,710
0,120 120,240 240,330 330,780 810,1080
you have to wait until

1455
00:55:30,710 --> 00:55:31,670
0,60 60,300 300,570 570,660 660,960
the commit message of course,|

1456
00:55:31,670 --> 00:55:32,630
0,180 180,300 300,510 510,750 750,960
but you can not bail

1457
00:55:32,630 --> 00:55:34,490
0,180 180,630 780,1140 1230,1770 1770,1860
out anyone,| so until the

1458
00:55:34,490 --> 00:55:35,640
0,660
compare

1459
00:55:35,730 --> 00:55:37,920
0,420 450,1020 1020,1800 1800,2130 2130,2190
the {B,can} unilaterally abort the

1460
00:55:37,920 --> 00:55:39,100
0,600
transaction,|

1461
00:55:39,100 --> 00:55:41,110
0,480 480,660 660,1080 1080,1680 1830,2010
once a promise yes,| it

1462
00:55:41,110 --> 00:55:43,420
0,570 570,1140 1140,1410 1410,1860 1860,2310
cannot unilaterally abort {a,transaction} anymore.|

1463
00:55:44,580 --> 00:55:45,840
0,270 270,450 450,540 540,1020 1020,1260
So, is it possible where

1464
00:55:45,840 --> 00:55:47,400
0,240 240,420 450,660 660,1380 1410,1560
you {} in deadlock,| but

1465
00:55:47,400 --> 00:55:48,270
0,120 120,420 420,600 600,780 780,870
you can't get out of

1466
00:55:48,270 --> 00:55:49,800
0,90 90,600 600,900 900,1440 1440,1530
the deadlock,| because everyone in

1467
00:55:49,800 --> 00:55:52,410
0,240 240,690 690,1110 1140,1860 2220,2610
that cycle has agreed to

1468
00:55:52,560 --> 00:55:53,920
0,720
prepare

1469
00:55:53,950 --> 00:55:55,060
0,240 240,510
{commit -}.|

1470
00:55:55,680 --> 00:55:57,390
0,180 180,510 510,840 840,1260 1260,1710
If everybody agrees to prepare,

1471
00:55:57,390 --> 00:55:58,680
0,120 120,240 240,600 600,990 990,1290
they can definitely commit, then

1472
00:55:58,680 --> 00:55:59,920
0,120 120,270 270,660
they will commit,|

1473
00:56:00,660 --> 00:56:02,040
0,180 180,300 300,480 480,810 810,1380
and you're still holding locks.|

1474
00:56:02,710 --> 00:56:03,520
0,270 270,390 390,540 540,630 630,810
Right, but what if you're

1475
00:56:03,520 --> 00:56:04,540
0,60 60,120 120,570 570,870 870,1020
in a deadlock,| because we

1476
00:56:04,540 --> 00:56:05,710
0,360 360,690 690,990 990,1080 1080,1170
mentioned before one of the

1477
00:56:05,710 --> 00:56:06,640
0,360 360,480 480,570 570,810 810,930
reasons why you might want

1478
00:56:06,640 --> 00:56:08,890
0,1200 1200,1320 1320,1920 1920,2130 2130,2250
to.| You would find it

1479
00:56:08,890 --> 00:56:10,480
0,150 150,420 420,510 510,1050
out before to prepare,|

1480
00:56:11,240 --> 00:56:12,170
0,210 210,330 330,540 540,600 600,930
if you get the locks

1481
00:56:12,170 --> 00:56:13,610
0,120 120,630 870,1050 1050,1230 1230,1440
of y,| if you did

1482
00:56:13,610 --> 00:56:14,840
0,210 210,600 600,660 660,900 900,1230
not succeed in getting those

1483
00:56:14,840 --> 00:56:15,770
0,450 450,510 510,750 750,840 840,930
necessary {locks -} for the

1484
00:56:15,770 --> 00:56:18,260
0,630 780,1080 1080,1800 2070,2310 2310,2490
transaction,| {} then you know

1485
00:56:18,260 --> 00:56:19,440
0,90 90,240 240,630
at that point.|

1486
00:56:19,990 --> 00:56:21,380
0,330 330,510 510,810
Right, thank you.|

1487
00:56:22,680 --> 00:56:23,820
0,270 270,390 390,570 570,690 690,1140
Okay, so this is exactly

1488
00:56:23,820 --> 00:56:24,660
0,90 90,240 240,300 300,720 720,840
the kind of discussion is

1489
00:56:24,660 --> 00:56:25,320
0,120 120,180 180,390 390,540 540,660
going to { -} come

1490
00:56:25,320 --> 00:56:27,150
0,330 360,810 810,960 960,1290 1320,1830
up,| I'm gonna, {} I'm

1491
00:56:27,150 --> 00:56:28,380
0,210 210,360 360,450 450,750 750,1230
gonna take the same abort

1492
00:56:28,740 --> 00:56:31,980
0,630 660,1320 1320,1590 1950,2850 2880,3240
and replicate it| and consider

1493
00:56:31,980 --> 00:56:33,030
0,60 60,240 240,300 300,510 510,1050
a bunch of different cases,|

1494
00:56:33,960 --> 00:56:36,030
0,600 1050,1440 1440,1590 1590,1830 1830,2070
so here's the same abort

1495
00:56:36,030 --> 00:56:38,100
0,450 780,1470 1470,1620 1620,1920 1920,2070
again,| nothing has changed so

1496
00:56:38,100 --> 00:56:40,590
0,540 600,1020 1020,1200 1200,1800 2130,2490
far, {} it's identical| and

1497
00:56:40,590 --> 00:56:41,940
0,180 180,300 300,390 390,1020 1020,1350
so it's the first to

1498
00:56:41,940 --> 00:56:43,260
0,360 360,540 540,690 690,930 960,1320
follow up on this question

1499
00:56:43,260 --> 00:56:45,210
0,90 90,210 210,420 420,1020 1290,1950
that we're just ask, {}|

1500
00:56:45,240 --> 00:56:47,040
0,270 270,720 720,1020 1020,1080 1080,1800
let's first consider the case

1501
00:56:47,310 --> 00:56:48,600
0,870
where

1502
00:56:48,740 --> 00:56:51,590
0,450 450,1110 1140,2070 2310,2760 2760,2850
{} B A is in

1503
00:56:51,590 --> 00:56:53,080
0,90 90,480 480,930
the prepared state,|

1504
00:56:54,180 --> 00:56:56,400
0,150 150,540 540,1200 1260,1770 1770,2220
and then crashes right after,|

1505
00:56:58,050 --> 00:57:00,100
0,360 360,630 630,810 810,1560
so it is prepared,|

1506
00:57:02,220 --> 00:57:03,340
0,600
{it

1507
00:57:03,340 --> 00:57:06,100
0,420 660,1200 1200,1590 1620,2280 2280,2760
-} pointed back {set,back} to

1508
00:57:06,100 --> 00:57:09,520
0,210 210,960 960,1230 1230,1800 1800,3420
a coordinator| that actually is

1509
00:57:09,610 --> 00:57:12,010
0,390 390,450 450,630 630,1140 1710,2400
agreeing to go along,| and

1510
00:57:12,010 --> 00:57:13,390
0,390 390,660 660,1020 1020,1110 1110,1380
then right after, it sends

1511
00:57:13,390 --> 00:57:16,060
0,390 390,1680 1680,2070 2070,2400 2400,2670
actually the prepare message okay

1512
00:57:16,060 --> 00:57:17,980
0,390 390,690 690,900 900,1530
message, it actually crashes,|

1513
00:57:19,040 --> 00:57:20,820
0,300 300,390 390,540 540,960
what does that mean,|

1514
00:57:22,500 --> 00:57:24,000
0,300 300,510 510,600 600,1020 1020,1500
what needs to happen,| how

1515
00:57:24,000 --> 00:57:25,170
0,180 180,300 300,360 360,750 750,1170
we're going to resolve this,|

1516
00:57:25,730 --> 00:57:26,870
0,210 210,420 420,510 510,600 600,1140
or what is the risk,|

1517
00:57:28,220 --> 00:57:30,500
0,240 240,870 870,1110 1110,1770
so basically {if,B} crashes.|

1518
00:57:31,260 --> 00:57:32,670
0,660 660,1020 1020,1140 1140,1320 1320,1410
{If,B} crashes, we need to

1519
00:57:32,670 --> 00:57:33,990
0,240 240,330 330,540 540,750 750,1320
abort the whole thing, right.|

1520
00:57:34,710 --> 00:57:36,120
0,300 300,390 390,750 750,990 990,1410
Now, we cannot abort anymore,

1521
00:57:36,150 --> 00:57:37,440
0,240 240,750 750,840 840,1080 1080,1290
right,| because you know B

1522
00:57:37,440 --> 00:57:38,940
0,300 300,900
already promised,|

1523
00:57:39,060 --> 00:57:39,990
0,210 210,330 330,450 450,510 510,930
that is going to commit.|

1524
00:57:41,540 --> 00:57:42,560
0,270 270,570 570,660 660,870 870,1020
We're going to use the

1525
00:57:42,560 --> 00:57:43,720
0,600
log?|

1526
00:57:44,410 --> 00:57:46,060
0,540 540,960 960,1140 1140,1380 1380,1650
Yeah, well okay, so {B,is}

1527
00:57:46,060 --> 00:57:47,260
0,180 180,600 600,840 840,990 990,1200
gonna crash,| at some point

1528
00:57:47,260 --> 00:57:47,830
0,60 60,180 180,240 240,330 330,570
is going to come back

1529
00:57:47,830 --> 00:57:49,100
0,300 330,720
up, right,|

1530
00:57:49,100 --> 00:57:50,540
0,180 180,300 300,360 360,900 900,1440
it's going to recover hopefully.|

1531
00:57:51,210 --> 00:57:52,830
0,510 510,900 900,1200 1200,1470 1470,1620
And what state doesn't need

1532
00:57:52,830 --> 00:57:55,420
0,90 90,540 540,1200 1350,2040
to remember across crashes?|

1533
00:57:56,850 --> 00:57:58,220
0,720

1534
00:57:59,130 --> 00:58:00,150
0,210 210,450 450,540 540,900 900,1020
A needs to remember that

1535
00:58:00,150 --> 00:58:03,720
0,60 60,1260 1650,2340 3240,3390 3390,3570
{} prepared.| Yeah, I need

1536
00:58:03,720 --> 00:58:04,650
0,90 90,480 480,660 660,780 780,930
to remember correct that it

1537
00:58:04,650 --> 00:58:06,360
0,420 420,510 510,960 960,1380 1380,1710
prepared for transaction ID, whatever

1538
00:58:06,360 --> 00:58:07,920
0,300 300,630 630,1140
the ID was,|

1539
00:58:08,370 --> 00:58:09,930
0,540 540,810 810,960 960,1440 1440,1560
and that is holding the

1540
00:58:09,930 --> 00:58:11,660
0,420 450,660 660,1080
lock on y.|

1541
00:58:12,930 --> 00:58:13,740
0,210 210,360 360,540 540,630 630,810
And so when it comes

1542
00:58:13,740 --> 00:58:16,050
0,240 240,630 990,1590 1590,2070 2070,2310
back up,| {} the first

1543
00:58:16,050 --> 00:58:16,710
0,120 120,240 240,360 360,450 450,660
thing it has to do

1544
00:58:16,710 --> 00:58:17,640
0,180 180,240 240,480 480,780 780,930
sort of look saying| like

1545
00:58:17,640 --> 00:58:18,360
0,270 270,450 450,570 570,660 660,720
how was I in the

1546
00:58:18,360 --> 00:58:20,940
0,270 270,390 390,930 1500,2280 2280,2580
middle of a participant in

1547
00:58:20,940 --> 00:58:23,490
0,630 630,750 750,1140 1140,1800 2130,2550
a {} distributed transaction, {}|

1548
00:58:23,490 --> 00:58:24,360
0,420 420,570 570,630 630,780 780,870
and if you look at

1549
00:58:24,360 --> 00:58:25,620
0,120 120,630 630,810 810,1050 1050,1260
the state| and you'll see

1550
00:58:25,620 --> 00:58:26,910
0,180 180,270 270,420 420,660 660,1290
that it was actually prepared

1551
00:58:26,910 --> 00:58:29,580
0,180 180,600 600,1200 1350,2040 2040,2670
for transaction ID, {} TID,|

1552
00:58:29,580 --> 00:58:31,230
0,570 570,720 720,1050 1050,1530 1530,1650
and it was and it

1553
00:58:31,230 --> 00:58:32,460
0,240 240,480 480,540 540,990 990,1230
must hold the lock for

1554
00:58:32,460 --> 00:58:34,260
0,660 810,1170 1170,1440 1440,1740 1740,1800
Ly,| {but,the,lock,for} y before it

1555
00:58:34,260 --> 00:58:35,460
0,210 210,630 630,1020 1020,1110 1110,1200
does anything else,| you know

1556
00:58:35,460 --> 00:58:37,980
0,600 630,1080 1080,1320 1320,1890 1890,2520
before talking to anything,| once

1557
00:58:38,190 --> 00:58:39,330
0,180 180,300 300,360 360,570 570,1140
it is in that state,|

1558
00:58:39,600 --> 00:58:40,680
0,420 420,540 540,660 660,900 900,1080
then it is if it

1559
00:58:40,680 --> 00:58:42,900
0,240 240,720 750,1170 1260,1770 1950,2220
didn't crash right| and our

1560
00:58:42,900 --> 00:58:44,340
0,330 330,420 420,660 660,750 750,1440
things are back to normal|

1561
00:58:44,490 --> 00:58:45,750
0,210 210,630 630,720 720,900 900,1260
and hopefully at some point

1562
00:58:45,750 --> 00:58:48,090
0,90 90,690 690,870 870,1770 2070,2340
the coordinated will retry the

1563
00:58:48,090 --> 00:58:50,910
0,300 300,930 1050,1860 2010,2580 2580,2820
commit message,| the B will

1564
00:58:50,910 --> 00:58:51,900
0,210 210,330 330,630 630,870 870,990
get up commit message for

1565
00:58:51,900 --> 00:58:53,970
0,180 180,660 660,1170 1230,1530 1530,2070
this transaction ID,| {sees,that} yeah

1566
00:58:53,970 --> 00:58:56,250
0,330 330,690 690,1320 1410,2010 2010,2280
I'm indeed prepared,| {} and

1567
00:58:56,250 --> 00:58:56,970
0,90 90,300 300,390 390,630 630,720
I hope the lock at

1568
00:58:56,970 --> 00:58:58,350
0,480 480,630 630,870 870,1170 1170,1380
y| and so it goes

1569
00:58:58,350 --> 00:58:59,820
0,330 330,450 450,960 960,1320 1320,1470
along and installs y and

1570
00:58:59,820 --> 00:59:01,760
0,480 480,900 900,1020 1020,1560
etc finishes the transaction.|

1571
00:59:04,190 --> 00:59:05,480
0,180 180,360 360,750
{Is,that} makes sense?|

1572
00:59:05,700 --> 00:59:06,900
0,150 150,660 660,750 750,930 930,1200
So basically you know there's

1573
00:59:06,900 --> 00:59:08,130
0,240 240,420 420,510 510,630 630,1230
a little bit of refinement

1574
00:59:08,130 --> 00:59:10,320
0,570 600,1230 1470,1770 1770,2040 2040,2190
here,| that we actually have

1575
00:59:10,320 --> 00:59:11,730
0,120 120,450 450,720 720,1320 1320,1410
to write some stable you

1576
00:59:11,730 --> 00:59:13,350
0,360 360,780 780,1200 1200,1320 1320,1620
know {} data to stable

1577
00:59:13,350 --> 00:59:14,670
0,510 510,600 600,750 750,990 990,1320
storage,| you know as part

1578
00:59:14,670 --> 00:59:15,940
0,90 90,180 180,720
of the transaction,|

1579
00:59:16,340 --> 00:59:17,360
0,300 420,630 630,780 780,960 960,1020
and which was part of

1580
00:59:17,360 --> 00:59:18,440
0,120 120,330 330,630 810,1020 1020,1080
{two-phase -} commit,| this is

1581
00:59:18,440 --> 00:59:19,130
0,150 150,240 240,330 330,600 600,690
one of the reasons the

1582
00:59:19,130 --> 00:59:20,090
0,150 150,360 360,540 540,630 630,960
{two-phase -} commit is limited

1583
00:59:20,090 --> 00:59:22,160
0,630 780,1260 1320,1650 1650,1950 1950,2070
expensive,| because not only we

1584
00:59:22,160 --> 00:59:22,820
0,120 120,210 210,450 450,600 600,660
have to send sort of

1585
00:59:22,820 --> 00:59:24,800
0,360 360,660 660,1290 1500,1800 1800,1980
multiple round messages,| {} but

1586
00:59:24,800 --> 00:59:27,380
0,720 840,1290 1290,1770 1770,2340 2340,2580
also {} a participant actually

1587
00:59:27,380 --> 00:59:29,060
0,210 210,360 360,810 840,1470 1470,1680
has to write {} things

1588
00:59:29,060 --> 00:59:30,560
0,90 90,390 390,1110
to stable storage,|

1589
00:59:30,560 --> 00:59:31,820
0,330 330,600 600,810 810,1050 1050,1260
and as we've talked about

1590
00:59:31,820 --> 00:59:33,260
0,480 480,750 750,810 810,1110 1110,1440
before writing to stable stores,|

1591
00:59:33,260 --> 00:59:34,970
0,450 450,600 600,810 810,1440 1440,1710
{} it's quite expensive, right,|

1592
00:59:34,970 --> 00:59:36,620
0,270 300,600 600,690 690,1350 1500,1650
like could be easily a

1593
00:59:36,620 --> 00:59:38,090
0,270 270,1020 1020,1110 1110,1200 1200,1470
couple milliseconds,| you know let's

1594
00:59:38,090 --> 00:59:41,210
0,270 780,1020 1020,1680 1830,2730 2820,3120
say one millisecond optimistically,| that

1595
00:59:41,210 --> 00:59:42,620
0,210 210,630 630,810 810,930 930,1410
means basically that were immediately

1596
00:59:42,620 --> 00:59:44,240
0,390 390,690 690,810 810,1200 1200,1620
limited to a thousand transaction

1597
00:59:44,240 --> 00:59:46,080
0,120 120,390 690,1020 1020,1380
per second, no more.|

1598
00:59:48,080 --> 00:59:50,240
0,510 540,1140 1140,1440 1440,1650 1650,2160
Okay, let's consider another case,|

1599
00:59:51,750 --> 00:59:53,220
0,690 690,1110 1110,1230 1230,1380 1380,1470
{} and so let me

1600
00:59:53,220 --> 00:59:55,200
0,690 690,810 810,1020 1020,1410
duplicate this slide again.|

1601
00:59:55,740 --> 00:59:57,040
0,810

1602
01:00:01,780 --> 01:00:04,660
0,600 600,1320 1530,2400 2400,2640 2640,2880
And {} consider yet another

1603
01:00:04,660 --> 01:00:06,700
0,510 540,1380
case. {}|

1604
01:00:06,700 --> 01:00:09,120
0,240 240,930 960,1830
Let's say, {}

1605
01:00:09,580 --> 01:00:12,700
0,630 630,960 1470,1950 1980,2520 2520,3120
we {} the coordinated crash|

1606
01:00:12,730 --> 01:00:15,820
0,270 270,900 1140,2130 2280,2880 2880,3090
and so {you,know} here's red

1607
01:00:15,820 --> 01:00:16,820
0,450
again,

1608
01:00:16,880 --> 01:00:19,100
0,270 270,870 1230,2010 2010,2100 2100,2220
which console| and you know

1609
01:00:19,100 --> 01:00:21,320
0,90 90,360 360,540 540,1230 1230,2220
we got like one, {}

1610
01:00:21,470 --> 01:00:23,840
0,450 450,840 840,1560 1860,2310 2310,2370
{we,got} prepared messages| and the

1611
01:00:23,840 --> 01:00:25,670
0,870 870,1140 1140,1320 1320,1620 1620,1830
coordinator maybe you've setup one

1612
01:00:25,670 --> 01:00:27,800
0,270 270,840 1080,1350 1350,1530 1530,2130
commit message| and then crashes

1613
01:00:27,830 --> 01:00:29,200
0,510 510,870
right here,|

1614
01:00:29,880 --> 01:00:33,210
0,540 900,1020 1020,1080 1080,1770 3030,3330
{} you know what, what

1615
01:00:33,210 --> 01:00:34,290
0,90 90,210 210,360 360,420 420,1080
do we need to arrange|

1616
01:00:34,320 --> 01:00:35,160
0,270 270,450 450,660 660,780 780,840
to make sure that the

1617
01:00:35,160 --> 01:00:36,820
0,240 240,510 510,780 780,1140
whole plan works out.|

1618
01:00:42,210 --> 01:00:43,740
0,150 150,240 240,720 720,1020 1020,1530
So the coordinator needs to

1619
01:00:43,770 --> 01:00:44,880
0,240 240,510 510,630 630,660 660,1110
{} store in a persistent

1620
01:00:44,880 --> 01:00:46,650
0,360 360,870 870,1290 1380,1620 1620,1770
state,| what are what are

1621
01:00:46,650 --> 01:00:48,120
0,210 210,750 750,960 960,1080 1080,1470
the commands that were promised

1622
01:00:48,120 --> 01:00:49,020
0,60 60,150 150,510 510,720 720,900
to be committed but we're

1623
01:00:49,020 --> 01:00:50,400
0,330 330,600 600,810
not committed yet.|

1624
01:00:50,430 --> 01:00:51,930
0,420 420,570 570,630 630,1080 1080,1500
Yeah, so the coordinator is

1625
01:00:51,930 --> 01:00:53,490
0,240 240,300 300,630 630,750 750,1560
almost the same as a

1626
01:00:53,490 --> 01:00:55,740
0,90 90,900 900,1560 1560,1860 1860,2250
in [] analysts to B's

1627
01:00:55,740 --> 01:00:57,180
0,300 300,720 930,1200 1200,1350 1350,1440
case, correct,| {} if we

1628
01:00:57,180 --> 01:00:58,500
0,270 270,330 330,990 1020,1170 1170,1320
commit a transaction,| we need

1629
01:00:58,500 --> 01:00:59,580
0,90 90,360 360,450 450,720 720,1080
to write to stable storage,|

1630
01:00:59,580 --> 01:01:00,420
0,120 120,210 210,450 450,750 750,840
that we're actually committing the

1631
01:01:00,420 --> 01:01:01,530
0,540 540,810 810,900 900,1020 1020,1110
transaction,| so we need to

1632
01:01:01,530 --> 01:01:02,640
0,240 240,330 330,600 600,1020 1020,1110
write to stable storage you

1633
01:01:02,640 --> 01:01:04,540
0,180 180,540 540,720 720,1320
know commit {TID -},|

1634
01:01:05,660 --> 01:01:07,430
0,660 690,840 840,1110 1110,1680 1680,1770
{} so that when the

1635
01:01:07,430 --> 01:01:09,770
0,450 450,630 630,870 870,1200 1530,2340
coordinator comes back up,| then

1636
01:01:09,770 --> 01:01:10,910
0,0 0,600 600,690 690,900 900,1140
{} it can actually finish

1637
01:01:10,910 --> 01:01:12,770
0,90 90,540 540,1020 1020,1350 1350,1860
the transaction| until actually the

1638
01:01:13,550 --> 01:01:15,110
0,90 90,390 390,780 780,1140 1140,1560
{A,and} B {} indeed transaction

1639
01:01:15,110 --> 01:01:16,130
0,120 120,480 510,780 780,930 930,1020
is committed,| because A and

1640
01:01:16,130 --> 01:01:17,240
0,150 150,270 270,690 720,840 840,1110
A are waiting, right,| A

1641
01:01:17,240 --> 01:01:18,590
0,90 90,390 390,570 570,720 720,1350
and B says like yeah

1642
01:01:18,620 --> 01:01:19,910
0,240 240,480 480,570 570,720 720,1290
we're happy to go along,|

1643
01:01:20,150 --> 01:01:22,460
0,420 420,990 990,1380 1380,1830 1830,2310
and there's waiting waiting until

1644
01:01:22,460 --> 01:01:23,870
0,270 270,570 570,900 900,1260 1260,1410
actually they,| {} here from

1645
01:01:23,870 --> 01:01:25,370
0,60 60,720 720,960 960,1290 1290,1500
the coordinator to decide what's

1646
01:01:25,370 --> 01:01:27,470
0,300 300,780 1110,1470 1470,1770 1770,2100
done,| because {} once they

1647
01:01:27,470 --> 01:01:29,600
0,600 1080,1410 1410,1500 1500,1710 1710,2130
decided, once they went along,

1648
01:01:29,600 --> 01:01:30,590
0,0 0,450 450,540 540,930 930,990
{} once they agreed to

1649
01:01:30,590 --> 01:01:31,700
0,180 180,720 780,900 900,960 960,1110
go along,| you know they

1650
01:01:31,700 --> 01:01:34,310
0,240 240,450 450,1110 1110,1800 1830,2610
came out unilaterally anymore bailout,

1651
01:01:34,310 --> 01:01:36,440
0,270 270,780 1020,1560 1590,1920 1920,2130
correct,| because, {} let's say

1652
01:01:36,440 --> 01:01:37,550
0,270 270,540 540,810 810,1020 1020,1110
they actually both said that

1653
01:01:37,550 --> 01:01:39,140
0,120 120,420 420,540 540,960 1200,1590
they agreed at all, {}|

1654
01:01:39,140 --> 01:01:39,950
0,240 240,330 330,630 630,750 750,810
then it means that the

1655
01:01:39,950 --> 01:01:42,560
0,840 840,1050 1050,1410 1410,2070 2070,2610
coordinator and they don't know

1656
01:01:42,560 --> 01:01:44,380
0,180 180,510 510,630 630,1170
they made the coordinator|

1657
01:01:44,380 --> 01:01:45,880
0,570 660,930 930,960 960,1200 1200,1500
{} send a commit message

1658
01:01:45,880 --> 01:01:46,930
0,150 150,240 240,570 570,900 900,1050
to for example A| and

1659
01:01:46,930 --> 01:01:49,120
0,330 330,480 480,840 840,1530 1800,2190
actually has committed transaction B

1660
01:01:49,120 --> 01:01:50,020
0,210 210,450 450,660 660,840 840,900
hasn't heard yet,| maybe the

1661
01:01:50,020 --> 01:01:51,820
0,240 240,360 360,870 870,1080 1080,1800
message got delayed, then the

1662
01:01:51,820 --> 01:01:53,830
0,420 420,480 480,1110 1260,1800 1800,2010
coordinator got crash,| and at

1663
01:01:53,830 --> 01:01:55,060
0,180 180,600 720,930 930,1080 1080,1230
that point, it would be

1664
01:01:55,060 --> 01:01:56,530
0,510 510,990 990,1170 1170,1380 1380,1470
totally wrong for B to

1665
01:01:56,530 --> 01:01:58,420
0,450 480,690 690,1230 1410,1650 1650,1890
abort the transaction,| it really

1666
01:01:58,420 --> 01:01:59,830
0,270 270,390 390,720 720,1140 1140,1410
has to wait until the

1667
01:01:59,890 --> 01:02:02,170
0,600 600,810 810,1260 1350,1650 1650,2280
coordinator comes back| to tell

1668
01:02:02,200 --> 01:02:03,310
0,180 180,390 390,510 510,930 930,1110
when actually the outcome is

1669
01:02:03,310 --> 01:02:04,460
0,90 90,180 180,750
of the transaction.|

1670
01:02:07,880 --> 01:02:09,780
0,720
Okay?|

1671
01:02:12,880 --> 01:02:15,100
0,450 450,900 900,1350 1380,1890 2070,2220
So only, {} sorry the

1672
01:02:15,100 --> 01:02:16,720
0,210 210,660 660,930 930,1170 1170,1620
only message that the coordinator

1673
01:02:16,720 --> 01:02:18,220
0,150 150,360 360,660 660,960 960,1500
is not going to resend

1674
01:02:18,220 --> 01:02:19,620
0,210 210,840
is prepare,|

1675
01:02:19,820 --> 01:02:20,930
0,180 180,480 480,690 690,810 810,1110
that one if it gets,

1676
01:02:20,930 --> 01:02:22,580
0,510 750,1140 1140,1260 1260,1350 1350,1650
like doesn't get a yes

1677
01:02:22,580 --> 01:02:24,060
0,210 210,450 450,960
it'll just abort.|

1678
01:02:24,150 --> 01:02:25,200
0,300 300,630 630,750 750,840 840,1050
Yeah, it was the next

1679
01:02:25,200 --> 01:02:26,820
0,570 810,1110 1110,1320 1320,1530 1530,1620
example, {} so let's do

1680
01:02:26,820 --> 01:02:27,760
0,360
that.|

1681
01:02:28,010 --> 01:02:30,020
0,1260 1260,1320 1320,1740 1740,1830 1830,2010
Let me duplicate this board

1682
01:02:30,020 --> 01:02:31,020
0,450
again,

1683
01:02:31,520 --> 01:02:33,830
0,480 480,660 660,960 960,1500 1650,2310
and talk about case. {}|

1684
01:02:33,830 --> 01:02:35,040
0,660
So,

1685
01:02:35,190 --> 01:02:36,930
0,480 570,930 930,1230 1230,1410 1410,1740
just for [fun], let's move

1686
01:02:36,930 --> 01:02:39,000
0,60 60,540 870,1080 1080,1530 1530,2070
it down,| so lose track,|

1687
01:02:39,000 --> 01:02:41,130
0,0 750,1110 1110,1500 1500,1650 1650,2130
{} let's say you know

1688
01:02:41,280 --> 01:02:44,240
0,480 480,630 630,1350 1590,2430
following thing happens, {}|

1689
01:02:44,270 --> 01:02:46,160
0,390 390,1080 1080,1350 1350,1650 1650,1890
the {this,prepare -} message never

1690
01:02:46,160 --> 01:02:47,240
0,240 240,630
makes it,

1691
01:02:48,000 --> 01:02:49,020
0,450
right,|

1692
01:02:49,400 --> 01:02:52,010
0,870 870,1500 1500,2100 2100,2250 2250,2610
{} and then you know

1693
01:02:52,070 --> 01:02:53,840
0,210 210,510 510,1020 1020,1170 1170,1770
{} the coordinator can unilaterally

1694
01:02:53,840 --> 01:02:57,160
0,450 450,1170 1440,2250 2280,2670
decide to abort, right.|

1695
01:02:57,800 --> 01:02:58,910
0,510 510,690 690,930 930,1020 1020,1110
And in fact you can

1696
01:02:58,910 --> 01:02:59,750
0,210 210,480 480,600 600,720 720,840
tell B you know to

1697
01:02:59,750 --> 01:03:01,820
0,120 120,540 660,1590 1650,1830 1830,2070
{abort -}| and A doesn't

1698
01:03:01,820 --> 01:03:02,960
0,210 210,420 420,480 480,810 810,1140
really need to know anything

1699
01:03:02,960 --> 01:03:06,650
0,270 270,480 510,1200 1530,2400 2790,3690
about it [],| {} the

1700
01:03:07,190 --> 01:03:08,960
0,540 750,1020 1020,1440 1470,1560 1560,1770
{} {some,would} later, you know

1701
01:03:08,960 --> 01:03:09,980
0,150 150,300 300,540 540,750 750,1020
will come up and ask

1702
01:03:09,980 --> 01:03:11,600
0,120 120,810 810,900 900,1410 1410,1620
the coordinator,| the coordinator doesn't

1703
01:03:11,600 --> 01:03:12,560
0,180 180,480 480,660 660,780 780,960
know anything about any more

1704
01:03:12,560 --> 01:03:13,940
0,180 180,300 300,900 1110,1290 1290,1380
about this transaction,| you can

1705
01:03:13,940 --> 01:03:15,740
0,150 150,450 450,1320 1320,1530 1530,1800
just tell yeah that is

1706
01:03:15,740 --> 01:03:17,090
0,270 270,750 780,1080 1080,1170 1170,1350
actually abort,| because I don't

1707
01:03:17,090 --> 01:03:18,650
0,180 180,360 480,780 780,1020 1020,1560
have a commit record anymore,|

1708
01:03:18,650 --> 01:03:19,970
0,330 330,480 480,750 750,840 840,1320
I was not a way

1709
01:03:19,970 --> 01:03:21,460
0,270 270,570 570,1020
to inform anybody.|

1710
01:03:22,930 --> 01:03:23,590
0,180 180,240 240,390 390,600 600,660
So in that case, we

1711
01:03:23,590 --> 01:03:24,920
0,120 120,270 270,330 330,780
can do an abort,|

1712
01:03:25,520 --> 01:03:26,360
0,180 180,300 300,510 510,630 630,840
and that means that B

1713
01:03:26,360 --> 01:03:27,860
0,210 210,540 540,600 600,1020 1020,1500
can release the locks, correct|

1714
01:03:27,860 --> 01:03:30,170
0,420 510,960 960,1140 1140,1770 2130,2310
and {B,can} just proceed {you,know}

1715
01:03:30,170 --> 01:03:32,660
0,420 420,690 690,1080 1080,1950
happily trying to {}

1716
01:03:32,780 --> 01:03:33,950
0,210 210,420 420,870 870,960 960,1170
the other transactions that might

1717
01:03:33,950 --> 01:03:36,420
0,630 810,1320 1320,1920
involve {} y.|

1718
01:03:38,630 --> 01:03:39,820
0,630
Okay?|

1719
01:03:40,680 --> 01:03:41,790
0,360 360,690 690,810 810,960 960,1110
{} Sorry, so what will

1720
01:03:41,790 --> 01:03:43,500
0,510 510,930 930,1080 1080,1530 1530,1710
happen if the message to

1721
01:03:43,500 --> 01:03:45,630
0,180 180,540 540,1140 1380,1530 1530,2130
A gets lost,| the coordinator

1722
01:03:45,630 --> 01:03:46,960
0,150 150,870
{aborts -},|

1723
01:03:47,110 --> 01:03:48,880
0,180 180,360 360,480 480,1440 1590,1770
and then B crashes,| but

1724
01:03:48,880 --> 01:03:50,080
0,300 300,510 510,600 600,870 870,1200
then when it comes up

1725
01:03:50,110 --> 01:03:51,820
0,180 180,480 480,660 660,1230 1500,1710
is going to wait for

1726
01:03:51,820 --> 01:03:53,200
0,60 60,390 390,900 900,1140 1140,1380
{} commit message from {}

1727
01:03:53,410 --> 01:03:55,540
0,1050 1110,1260 1260,1350 1350,1920 1920,2130
coordinator,| but the transaction has

1728
01:03:55,540 --> 01:03:58,360
0,480 480,1080 1110,1740 1740,2220 2220,2820
aborted already.| Yeah, or yeah

1729
01:03:58,360 --> 01:03:59,980
0,270 270,690 690,840 840,990 990,1620
so either these two cases,|

1730
01:04:00,010 --> 01:04:01,690
0,690 720,840 840,930 930,1590 1590,1680
{} you know presumably you

1731
01:04:01,690 --> 01:04:03,040
0,210 210,360 360,570 570,1050 1050,1350
know the most protocols actually

1732
01:04:03,040 --> 01:04:04,930
0,390 390,810 840,1080 1080,1710 1710,1890
{B,will} ping the coordinator,| because

1733
01:04:04,930 --> 01:04:06,190
0,60 60,300 300,480 480,540 540,1260
it knows who's the coordinator|

1734
01:04:06,850 --> 01:04:08,710
0,480 570,1170 1170,1470 1470,1590 1590,1860
and ask what's the outcome

1735
01:04:08,710 --> 01:04:09,880
0,90 90,450 450,750
of that transaction.|

1736
01:04:15,840 --> 01:04:16,890
0,240 240,390 390,570 570,750 750,1050
Okay, so one more case

1737
01:04:16,890 --> 01:04:17,520
0,0 0,210 210,270 270,570 570,630
I want to return to

1738
01:04:17,520 --> 01:04:18,810
0,240 240,540 540,810 810,1080 1080,1290
one case,| there's actually sort

1739
01:04:18,810 --> 01:04:21,030
0,90 90,540 930,1320 1320,1650 1650,2220
of the most interesting case,|

1740
01:04:21,420 --> 01:04:23,130
0,720 810,1380 1380,1440 1440,1530 1530,1710
{} one of the more

1741
01:04:23,130 --> 01:04:24,780
0,270 270,960 1110,1350 1350,1440 1440,1650
tricky cases.| So I just

1742
01:04:24,780 --> 01:04:26,790
0,180 720,870 870,1140 1140,1620 1710,2010
have a brief question. {}|

1743
01:04:26,790 --> 01:04:28,050
0,450 450,630 630,720 720,900 900,1260
Yeah, hold on one second.|

1744
01:04:28,200 --> 01:04:30,540
0,300 600,1140 1500,1680 1680,2040 2040,2340
Sorry.| Yeah.| Yeah, so the

1745
01:04:30,540 --> 01:04:32,550
0,210 210,450 450,540 540,1260 1470,2010
first question is that,| so

1746
01:04:32,580 --> 01:04:34,470
0,270 300,960 990,1230 1230,1410 1410,1890
let's B let's say holds

1747
01:04:34,470 --> 01:04:36,480
0,120 120,450 480,720 720,1350 1620,2010
the lock on y,| all

1748
01:04:36,480 --> 01:04:38,490
0,120 120,450 450,750 750,1320 1380,2010
the way through between putting

1749
01:04:38,490 --> 01:04:39,750
0,270 270,510 510,600 600,1050 1080,1260
y into the log| and

1750
01:04:39,750 --> 01:04:42,000
0,210 210,840 840,1470 1650,1920 1920,2250
so installing y {} to

1751
01:04:42,480 --> 01:04:44,080
0,330 420,540 540,780 840,1140
state, so.| Yes.| Okay.|

1752
01:04:44,080 --> 01:04:45,310
0,390 390,600 600,900 900,990 990,1230
{} And then the second

1753
01:04:45,310 --> 01:04:46,570
0,300 300,690 690,810 810,1080 1080,1260
question,| so the locks here

1754
01:04:46,570 --> 01:04:49,120
0,450 510,1620 1980,2310 2310,2370 2370,2550
are distributed,| because we are

1755
01:04:49,120 --> 01:04:50,560
0,240 240,390 390,630 630,1080 1080,1440
dealing with across servers,| or

1756
01:04:50,890 --> 01:04:52,000
0,360 360,450 450,630 630,810 810,1110
{} I mean if y

1757
01:04:52,000 --> 01:04:53,290
0,270 270,660 660,840 840,900 900,1290
only exist on the server

1758
01:04:53,290 --> 01:04:54,370
0,240 240,390 390,630 630,750 750,1080
B,| then maybe we don't

1759
01:04:54,370 --> 01:04:55,300
0,150 150,270 270,390 390,540 540,930
need this to be locking,|

1760
01:04:55,360 --> 01:04:56,290
0,150 150,360 360,660 660,750 750,930
I'm just curious of what

1761
01:04:56,290 --> 01:04:57,520
0,60 60,540 660,990 990,1050 1050,1230
the setup.| Yeah, to set

1762
01:04:57,520 --> 01:04:58,840
0,60 60,390 390,810 810,1140 1140,1320
up {is,here} basically,| that A

1763
01:04:58,840 --> 01:05:00,520
0,480 480,630 630,1020 1020,1500 1500,1680
maintains to watch for all

1764
01:05:00,520 --> 01:05:01,780
0,90 90,510 510,660 660,840 840,1260
the shards that it has,|

1765
01:05:01,870 --> 01:05:02,950
0,210 210,330 330,420 420,930 930,1080
for all the variables, {}

1766
01:05:02,950 --> 01:05:03,790
0,90 90,210 210,510 510,660 660,840
all the records that it

1767
01:05:03,790 --> 01:05:05,440
0,330 330,630 630,1080 1080,1500 1500,1650
has,| B maintained block for

1768
01:05:05,440 --> 01:05:06,730
0,150 150,390 390,690 690,840 840,1290
all the records it has.|

1769
01:05:07,440 --> 01:05:08,430
0,240 240,390 390,540 540,870 870,990
Okay, but if we, for

1770
01:05:08,430 --> 01:05:09,690
0,360 360,570 570,900 900,1140 1140,1260
example have y being on

1771
01:05:09,690 --> 01:05:11,130
0,390 390,840 840,1140 1140,1230 1230,1440
multiple servers,| then we need

1772
01:05:11,130 --> 01:05:12,270
0,210 210,420 420,510 510,960 960,1140
some sort of distributed lock.|

1773
01:05:12,720 --> 01:05:14,610
0,540 540,750 750,1230 1260,1680 1680,1890
Yeah, like we were talking

1774
01:05:14,610 --> 01:05:15,780
0,150 150,240 240,600 600,960 960,1170
about the sharded case, right,|

1775
01:05:15,780 --> 01:05:16,890
0,270 270,360 360,720 720,810 810,1110
where the accounts are shared

1776
01:05:16,890 --> 01:05:18,780
0,330 330,660 660,1320 1470,1680 1680,1890
across multiple servers| and only

1777
01:05:18,780 --> 01:05:19,860
0,150 150,450 450,690 690,720 720,1080
one server has a particular

1778
01:05:19,860 --> 01:05:20,780
0,390
account.|

1779
01:05:22,560 --> 01:05:23,760
0,300 300,510 510,720 810,1050 1050,1200
Awesome, thank you.| {} Come

1780
01:05:23,760 --> 01:05:24,990
0,210 210,330 330,510 510,810 810,1230
back to this later, actually

1781
01:05:25,020 --> 01:05:26,400
0,270 270,420 420,810
one more time.|

1782
01:05:27,060 --> 01:05:27,870
0,150 150,240 240,420 420,600 600,810
So the first thing I

1783
01:05:27,870 --> 01:05:29,460
0,240 240,300 300,540 540,870 900,1590
wanted to point out {}

1784
01:05:29,460 --> 01:05:30,810
0,450 450,630 630,780 780,1140 1140,1350
is| just go back to

1785
01:05:30,810 --> 01:05:33,990
0,180 180,270 270,990 1290,2130 2430,3180
sort of the, {} the

1786
01:05:34,990 --> 01:05:39,200
0,840 930,1410 1410,2010 2190,2820
{} case| where {}

1787
01:05:39,230 --> 01:05:41,120
0,660 690,990 990,1470 1500,1620 1620,1890
B or A you know

1788
01:05:41,120 --> 01:05:42,860
0,210 210,780 840,1020 1020,1170 1170,1740
said yes and then crashes,

1789
01:05:45,300 --> 01:05:47,600
0,540 930,1770
correct, {}|

1790
01:05:47,600 --> 01:05:48,860
0,540 540,810 810,960 960,1200 1200,1260
or actually yeah, let me

1791
01:05:48,860 --> 01:05:50,030
0,150 150,300 300,450 450,540 540,1170
see if that's the case,|

1792
01:05:50,610 --> 01:05:51,720
0,210 210,720 720,840 840,1050 1050,1110
I know I want the

1793
01:05:51,720 --> 01:05:52,740
0,240 240,300 300,540 540,750 750,1020
case of following case, right,|

1794
01:05:53,570 --> 01:05:56,620
0,1200 1410,1770 1770,1980 1980,2490
{} fix this line,|

1795
01:05:56,620 --> 01:05:58,750
0,180 180,930 960,1440 1440,1620 1620,2130
so {A,B} promised their thing,|

1796
01:05:59,050 --> 01:06:01,030
0,780 810,1290 1350,1740 1740,1830 1830,1980
{} but {} I want

1797
01:06:01,030 --> 01:06:01,720
0,60 60,210 210,510 510,600 600,690
to go back to the

1798
01:06:01,720 --> 01:06:03,070
0,360 360,810 810,960 960,1050 1050,1350
case| where that we already

1799
01:06:03,070 --> 01:06:05,350
0,630 750,1110 1110,1620 1800,2100 2100,2280
discussed,| which is right after

1800
01:06:05,350 --> 01:06:07,920
0,60 60,360 360,900 1200,1920
the commit point, {}|

1801
01:06:07,950 --> 01:06:09,700
0,180 180,630 630,1230
the coordinator crashes.|

1802
01:06:10,490 --> 01:06:12,820
0,450 1020,1770
Okay.| And,

1803
01:06:12,880 --> 01:06:14,950
0,270 270,450 450,810 810,1050 1050,2070
and we know correct this

1804
01:06:14,950 --> 01:06:16,560
0,330 330,420 420,1050
interval of time

1805
01:06:17,140 --> 01:06:19,090
0,240 240,750 750,900 900,1260 1260,1950
from here to there,| basically

1806
01:06:19,570 --> 01:06:22,540
0,480 510,1020 1020,1710 1740,2640 2640,2970
{} B cannot unilaterally abort

1807
01:06:22,540 --> 01:06:24,790
0,420 450,690 690,1050 1050,1440 1440,2250
anymore, right,| because it promised

1808
01:06:24,790 --> 01:06:27,160
0,120 120,360 360,930 1110,1920 2100,2370
to go along| and it

1809
01:06:27,160 --> 01:06:28,090
0,180 180,330 330,480 480,540 540,930
might have been the case|

1810
01:06:28,090 --> 01:06:30,580
0,240 240,930 930,1530 1530,2040 2040,2490
that actually {A,did} actually already

1811
01:06:30,580 --> 01:06:31,740
0,240 240,600
did commit,|

1812
01:06:31,830 --> 01:06:33,750
0,180 180,300 300,390 390,990 990,1920
and so it cannot unilaterally

1813
01:06:33,810 --> 01:06:36,210
0,510 510,900 900,1470 1740,1890 1890,2400
{} abort anymore| and so

1814
01:06:36,240 --> 01:06:37,470
0,240 240,420 420,780 780,1140 1140,1230
there's only one option in

1815
01:06:37,470 --> 01:06:38,400
0,150 150,510 510,720 720,810 810,930
this case,| what is that

1816
01:06:38,400 --> 01:06:39,540
0,180 180,570
one option?|

1817
01:06:52,380 --> 01:06:55,170
0,330 330,750 750,1380 1650,2190 2550,2790
We just wait.| Yeah, it's

1818
01:06:55,170 --> 01:06:59,670
0,1020 1080,1650 1650,2430 4080,4260 4260,4500
unfortunate but true,| the only

1819
01:06:59,670 --> 01:07:00,330
0,150 150,270 270,360 360,480 480,660
thing that we can do

1820
01:07:00,330 --> 01:07:01,360
0,90 90,510
is wait,|

1821
01:07:01,650 --> 01:07:03,180
0,570 600,870 870,1080 1080,1440 1440,1530
and it's still holding the

1822
01:07:03,180 --> 01:07:04,650
0,420 450,780 780,1110 1110,1350 1350,1470
lock on y, correct,| so

1823
01:07:04,650 --> 01:07:05,670
0,120 120,390 390,600 600,810 810,1020
that means that any other

1824
01:07:05,670 --> 01:07:07,830
0,480 480,630 630,1020 1020,1530 1830,2160
transaction that involves y {you,know}

1825
01:07:07,830 --> 01:07:11,130
0,450 450,990 1410,1890 1890,2970 2970,3300
cannot proceed,| {} one has

1826
01:07:11,130 --> 01:07:12,360
0,120 120,570 600,720 720,870 870,1230
to wait you know until

1827
01:07:12,360 --> 01:07:14,880
0,90 90,660 660,870 870,1320 1650,2520
the coordinator comes back| and

1828
01:07:14,880 --> 01:07:17,280
0,690 690,1290 1320,1620 1620,2070 2070,2400
announces or {re-announces -} whatever

1829
01:07:17,280 --> 01:07:18,570
0,480 480,720 720,840 840,1140 1140,1290
decision was that actually was

1830
01:07:18,570 --> 01:07:19,650
0,120 120,390 390,510 510,660 660,1080
the outcome for that particular

1831
01:07:19,650 --> 01:07:20,660
0,480
transaction.|

1832
01:07:21,160 --> 01:07:22,180
0,240 240,330 330,540 540,660 660,1020
This is one of the

1833
01:07:22,180 --> 01:07:24,310
0,360 630,960 1080,1290 1290,1530 1530,2130
sort of the two aspects,|

1834
01:07:24,310 --> 01:07:25,210
0,180 180,450 450,630 630,810 810,900
you know this one of

1835
01:07:25,210 --> 01:07:26,980
0,570 570,1080 1080,1470 1470,1590 1590,1770
these aspects of {two-phase -}

1836
01:07:26,980 --> 01:07:30,190
0,420 780,1170 1170,1530 1530,2250 2280,3210
commit,| {} that are been

1837
01:07:30,190 --> 01:07:33,430
0,600 630,930 930,1500 1710,2340 2610,3240
desirable, right,| where {} the

1838
01:07:33,670 --> 01:07:36,130
0,660 900,1440 1440,1620 1620,1830 1830,2460
{} protocol might just block

1839
01:07:36,160 --> 01:07:37,990
0,570 570,960 960,1260 1260,1440 1440,1830
{until,a -} machine comes back.|

1840
01:07:40,450 --> 01:07:41,900
0,240 240,360 360,480 480,900
Does that make sense?|

1841
01:07:45,720 --> 01:07:47,580
0,180 180,570 570,900 900,1440 1440,1860
So how do people deal

1842
01:07:47,580 --> 01:07:48,930
0,90 90,240 240,330 330,810 810,1350
with this in practice,| well,

1843
01:07:49,540 --> 01:07:50,650
0,180 180,210 210,360 360,450 450,1110
it's a little bit unfortunate,|

1844
01:07:50,950 --> 01:07:52,720
0,510 510,570 570,930 930,1560 1590,1770
but the here's were some

1845
01:07:52,720 --> 01:07:53,800
0,120 120,360 360,810 810,990 990,1080
of our techniques from the

1846
01:07:53,800 --> 01:07:55,210
0,360 360,570 570,780 780,930 930,1410
past can come to rescue,|

1847
01:07:55,240 --> 01:07:55,900
0,150 150,210 210,450 450,570 570,660
you know what could we

1848
01:07:55,900 --> 01:07:57,660
0,150 150,390 390,570 570,1290
do with the coordinator,|

1849
01:07:58,610 --> 01:08:00,560
0,300 300,570 570,810 810,1440 1440,1950
to make this scenario unlikely.|

1850
01:08:06,420 --> 01:08:06,990
0,150 150,210 210,330 330,450 450,570
So we can make it

1851
01:08:06,990 --> 01:08:09,300
0,270 270,720 900,1320 1320,2070 2070,2310
fault tolerant, like.| Yeah, make

1852
01:08:09,300 --> 01:08:10,140
0,180 180,510 510,630 630,750 750,840
fault tolerant, how could we

1853
01:08:10,140 --> 01:08:11,120
0,90 90,390
do it.|

1854
01:08:13,110 --> 01:08:14,310
0,210 210,690 690,810 810,870 870,1200
{} Well, there are multiple

1855
01:08:14,310 --> 01:08:16,720
0,420 420,720 720,1260
approaches, but, {}|

1856
01:08:17,170 --> 01:08:17,980
0,90 90,240 240,360 360,510 510,810
you can do it maybe

1857
01:08:17,980 --> 01:08:19,640
0,510 510,1050
through raft.|

1858
01:08:19,700 --> 01:08:22,190
0,360 1020,1530 2070,2190 2190,2310 2310,2490
{Yeah -}, you know run

1859
01:08:22,190 --> 01:08:24,740
0,420 420,570 570,1110 1110,1650 1680,2550
raft to basically basically run

1860
01:08:24,740 --> 01:08:25,820
0,120 120,660 660,900 900,1020 1020,1080
the coordinator not on a

1861
01:08:25,820 --> 01:08:27,110
0,270 270,720 720,840 840,1140 1140,1290
single machine,| we basically have

1862
01:08:27,110 --> 01:08:28,670
0,30 30,510 510,750 750,1140 1350,1560
a replicated state machine that

1863
01:08:28,670 --> 01:08:31,070
0,450 450,540 540,1290 1680,2280 2280,2400
implements the coordinator| and you

1864
01:08:31,070 --> 01:08:32,660
0,150 150,300 300,480 480,990 990,1590
know we use raft to

1865
01:08:33,080 --> 01:08:34,400
0,870
{sort,of}

1866
01:08:34,550 --> 01:08:36,140
0,270 270,360 360,780 780,990 990,1590
Keep the replicated state machine|

1867
01:08:36,140 --> 01:08:38,090
0,210 240,420 420,780 780,1590 1590,1950
and {implement,the -} coordinator {}

1868
01:08:38,090 --> 01:08:40,610
0,270 270,750 1110,1530 1530,2220 2220,2520
in sync| {} and then

1869
01:08:40,610 --> 01:08:41,750
0,360 360,570 570,660 660,750 750,1140
if one of the machines

1870
01:08:41,750 --> 01:08:43,340
0,150 150,420 420,510 510,1080 1080,1590
that forms the coordinator fails,|

1871
01:08:43,340 --> 01:08:44,480
0,570 570,660 660,780 780,1050 1050,1140
hopefully the two others are

1872
01:08:44,480 --> 01:08:46,220
0,210 210,720 900,1350 1350,1590 1590,1740
still there| and so we

1873
01:08:46,220 --> 01:08:48,200
0,120 120,300 300,750 1050,1500
can still proceed, right.|

1874
01:08:49,260 --> 01:08:51,720
0,480 480,990 1080,1290 1290,1740 1740,2460
And so it's potentially possible

1875
01:08:51,900 --> 01:08:54,000
0,330 330,1020 1020,1110 1110,1410 1410,2100
to basically| you know replicate

1876
01:08:54,000 --> 01:08:55,200
0,60 60,570 570,750 750,1020 1020,1200
the coordinator or actually any

1877
01:08:55,200 --> 01:08:56,700
0,120 120,210 210,780 780,1260 1290,1500
of the participants to {you,know}

1878
01:08:56,700 --> 01:08:58,040
0,270 270,840
using raft.|

1879
01:08:59,170 --> 01:09:00,740
0,150 150,300 300,420 420,1020
So let me actually,|

1880
01:09:01,200 --> 01:09:02,640
0,330 750,930 930,1110 1110,1200 1200,1440
so {} put up this

1881
01:09:02,640 --> 01:09:03,600
0,30 30,210 210,480 480,660 660,960
a little bit and talk

1882
01:09:03,600 --> 01:09:06,560
0,60 60,240 240,540 540,960
a little bit more.|

1883
01:09:10,010 --> 01:09:10,970
0,60 60,270 270,330 330,690 690,960
A couple of discussion points,|

1884
01:09:10,970 --> 01:09:12,200
0,210 210,480 900,1020 1020,1140 1140,1230
which is you know we

1885
01:09:12,200 --> 01:09:13,860
0,120 120,390 390,1140
could use raft|

1886
01:09:17,480 --> 01:09:20,620
0,150 150,390 390,630 630,1530
to make a coordinator

1887
01:09:20,620 --> 01:09:22,720
0,180 180,690 1290,1530 1530,2010 2010,2100
fault tolerant or available, if

1888
01:09:22,720 --> 01:09:23,740
0,90 90,450
you will.|

1889
01:09:24,480 --> 01:09:25,650
0,180 180,390 390,690 690,1050 1050,1170
It's really different property we

1890
01:09:25,650 --> 01:09:28,240
0,180 180,540
care about.|

1891
01:09:31,210 --> 01:09:32,700
0,330 330,420 420,540 540,900
Does that make sense?|

1892
01:09:36,450 --> 01:09:37,710
0,150 150,540 540,690 690,810 810,1260
In fact, you will see

1893
01:09:37,740 --> 01:09:38,700
0,480 480,660 660,780 780,900 900,960
{} if you do {lab

1894
01:09:38,700 --> 01:09:39,690
0,210 210,480 480,780 780,870 870,990
-} 4 instead of a

1895
01:09:39,690 --> 01:09:41,730
0,630 930,1140 1140,1350 1350,1440 1440,2040
project,| {} this is exactly

1896
01:09:41,730 --> 01:09:43,440
0,150 150,330 330,510 510,960 1290,1710
what lab 4 does,| lab

1897
01:09:43,440 --> 01:09:45,540
0,270 270,780 780,1410 1410,1680 1710,2100
4 actually has a similar

1898
01:09:45,540 --> 01:09:47,850
0,420 420,900 1170,1710 1710,2040 2040,2310
scheme| where there's a form

1899
01:09:47,850 --> 01:09:49,380
0,90 90,330 330,630 630,1200 1230,1530
of {two-phase -} {} commit,|

1900
01:09:49,380 --> 01:09:51,900
0,120 120,390 390,1200 1200,1470 1680,2520
that you implement and move

1901
01:09:51,900 --> 01:09:54,930
0,450 720,1020 1020,1470 1830,2640 2640,3030
the {} the master shard

1902
01:09:54,930 --> 01:09:57,390
0,210 210,630 630,1050 1050,2040 2220,2460
or order master coordinator| and

1903
01:09:57,390 --> 01:10:00,930
0,210 210,900 900,1200 1200,1980 2070,3540
then rebalances shards across {}

1904
01:10:00,930 --> 01:10:03,480
0,270 270,780 1110,1650 1650,2070 2070,2550
shard servers,| uses raft replicated

1905
01:10:03,480 --> 01:10:04,980
0,420 420,750 750,840 840,1110 1110,1500
{to,actually} {replicate,itself},| to shard servers

1906
01:10:04,980 --> 01:10:06,720
0,480 480,720 720,1230 1230,1530 1530,1740
itself, also replicated itself using

1907
01:10:06,720 --> 01:10:08,280
0,480 540,690 690,840 840,1050 1050,1560
raft| and so where many,

1908
01:10:08,280 --> 01:10:10,290
0,330 330,660 660,900 900,1380 1830,2010
many raft groups running in

1909
01:10:10,290 --> 01:10:11,160
0,630
parallel.|

1910
01:10:12,220 --> 01:10:13,630
0,480 480,690 690,990 990,1290 1290,1410
And also the essence of

1911
01:10:13,630 --> 01:10:15,640
0,660 870,1470 1470,1650 1650,1860 1860,2010
{lab,4},| and so this is

1912
01:10:15,640 --> 01:10:17,050
0,240 240,720 720,1110 1110,1260 1260,1410
like typically way| you know

1913
01:10:17,050 --> 01:10:19,600
0,210 210,690 960,1650 1650,2190 2190,2550
if you're concerned about having

1914
01:10:19,600 --> 01:10:21,250
0,600 630,990 990,1200 1200,1560 1560,1650
the system being blocked for

1915
01:10:21,250 --> 01:10:22,270
0,30 30,240 240,420 420,510 510,1020
a long period of time,|

1916
01:10:22,270 --> 01:10:23,050
0,270 270,390 390,480 480,660 660,780
one way to do it

1917
01:10:23,050 --> 01:10:26,080
0,90 90,600 690,1050 1050,1470 1890,3030
is basically make the coordinated

1918
01:10:26,080 --> 01:10:27,100
0,150 150,630
fault tolerance.|

1919
01:10:29,540 --> 01:10:30,780
0,690

1920
01:10:31,460 --> 01:10:32,840
0,420 420,630 630,1050 1050,1290 1290,1380
So in amazing brings me

1921
01:10:32,840 --> 01:10:34,070
0,120 120,390 390,750 750,1020 1020,1230
to something else,| which a

1922
01:10:34,070 --> 01:10:35,630
0,150 150,210 210,450 450,870 900,1560
lot of people ask about

1923
01:10:35,870 --> 01:10:38,220
0,390 390,750 750,1500
{you,know} is raft,|

1924
01:10:38,980 --> 01:10:40,540
0,210 210,690 690,1170 1170,1320 1320,1560
or raft and {two-phase -}

1925
01:10:40,540 --> 01:10:42,960
0,390 390,510 510,930 930,1470
commits {sort,of} similar things.|

1926
01:10:46,000 --> 01:10:47,140
0,300 300,450 450,540 540,1020 1020,1140
What could you do {two-phase

1927
01:10:47,140 --> 01:10:49,420
0,210 210,570 570,1050 1050,1710
-} {commit,with} raft| or

1928
01:10:49,420 --> 01:10:51,370
0,390 1230,1620 1620,1710 1710,1890 1890,1950
you need to have a

1929
01:10:51,370 --> 01:10:52,450
0,150 150,300 300,390 390,600 600,1080
little bit of a parallel

1930
01:10:52,450 --> 01:10:53,860
0,450 450,720 720,1170 1170,1320 1320,1410
correct,| like one thing is

1931
01:10:53,860 --> 01:10:55,630
0,270 270,540 540,1170 1170,1380 1380,1770
called a coordinator or raft

1932
01:10:55,630 --> 01:10:57,070
0,150 150,240 240,840 1110,1260 1260,1440
called the leader,| {} we

1933
01:10:57,070 --> 01:10:59,950
0,840 1200,2190 2190,2280 2280,2370 2370,2880
gotta participants you know maybe

1934
01:10:59,950 --> 01:11:00,790
0,180 180,300 300,630 630,720 720,840
we can figure out these

1935
01:11:00,790 --> 01:11:03,130
0,150 150,780 1140,1920 1920,2130 2130,2340
as followers,| {} yeah, so

1936
01:11:03,130 --> 01:11:04,240
0,180 180,480 510,810 810,930 930,1110
you know seems to have

1937
01:11:04,240 --> 01:11:05,410
0,90 90,810 810,930 930,1080 1080,1170
some similarities| like how do

1938
01:11:05,410 --> 01:11:06,400
0,120 120,300 300,570 570,750 750,990
we think about it,| what's

1939
01:11:06,400 --> 01:11:08,620
0,90 90,720 720,1290 1410,2040 2040,2220
the relationship between raft and

1940
01:11:08,620 --> 01:11:09,780
0,150 150,750
{2PC -}.|

1941
01:11:12,060 --> 01:11:13,620
0,300 300,720 720,900 900,1170 1170,1560
The difference is that {}

1942
01:11:13,740 --> 01:11:16,170
0,810 1170,1350 1350,1830 1830,1980 1980,2430
{in,raft} the coordinator can change

1943
01:11:16,170 --> 01:11:18,960
0,660 900,1470 1800,2520 2520,2640 2640,2790
essentially,| {} otherwise it's like

1944
01:11:18,960 --> 01:11:20,520
0,60 60,420 420,660 660,750 750,1560
the single point of failure.|

1945
01:11:20,670 --> 01:11:21,560
0,390
Yep,

1946
01:11:21,910 --> 01:11:23,700
0,240 240,600 630,1170
good point, any.|

1947
01:11:24,900 --> 01:11:26,220
0,390 390,570 570,870 870,1200 1200,1320
{} So another difference is

1948
01:11:26,220 --> 01:11:28,080
0,360 360,600 630,1050 1050,1530 1530,1860
that the raft basically depends

1949
01:11:28,080 --> 01:11:28,740
0,90 90,150 150,540 540,600 600,660
on the concept of a

1950
01:11:28,740 --> 01:11:29,880
0,420 420,720 720,810 810,930 930,1140
majority,| whereas in {two-phase -}

1951
01:11:29,880 --> 01:11:31,140
0,300 300,810 810,990 990,1170 1170,1260
commit coordinator, it needs to

1952
01:11:31,140 --> 01:11:32,160
0,150 150,210 210,540 540,780 780,1020
get a response from every

1953
01:11:32,160 --> 01:11:34,740
0,540 840,1530 1530,1830 1830,2370 2370,2580
single {} other server,| that

1954
01:11:34,740 --> 01:11:37,890
0,120 120,540 540,660 660,1230 2880,3150
is involved in the.| {Yeah,,good}

1955
01:11:37,890 --> 01:11:38,880
0,180 180,270 270,660 660,780 780,990
point, so these are almost

1956
01:11:38,910 --> 01:11:40,950
0,330 330,750 750,1320 1320,1590 1590,2040
like critical differences, right. {}|

1957
01:11:41,310 --> 01:11:42,720
0,540 540,660 660,780 780,930 930,1410
And you know we're wondering

1958
01:11:42,720 --> 01:11:43,920
0,210 210,600 600,810 810,1050 1050,1200
if we get to a

1959
01:11:43,920 --> 01:11:44,940
0,240 240,510 510,690 690,810 810,1020
point| where like if there's

1960
01:11:44,940 --> 01:11:46,840
0,30 30,540 540,1020 1020,1320
a conceptual difference,| like

1961
01:11:47,030 --> 01:11:48,080
0,330 330,450 450,750 750,810 810,1050
do they solve the same

1962
01:11:48,080 --> 01:11:49,180
0,510
problem.|

1963
01:11:49,730 --> 01:11:52,070
0,480 480,1110 1110,1530 1560,2250 2250,2340
Oh, {raft,is} for replicating the

1964
01:11:52,070 --> 01:11:54,080
0,360 360,750 1350,1560 1560,1800 1800,2010
same thing| and {two-phase -

1965
01:11:54,080 --> 01:11:55,760
0,270 270,630 630,810 810,1320 1470,1680
-} commit, when you do

1966
01:11:55,760 --> 01:11:57,560
0,120 120,570 570,750 750,1140 1470,1800
the opposite,| when you instead

1967
01:11:57,560 --> 01:11:58,820
0,120 120,390 390,630 630,840 840,1260
of having one thing, you

1968
01:11:58,850 --> 01:12:01,070
0,450 450,810 810,1140 1140,1920 1950,2220
spread across different servers,| then

1969
01:12:01,070 --> 01:12:03,680
0,120 120,300 300,1950 1950,2130
you have to {deal,with,the,problem}.|

1970
01:12:03,680 --> 01:12:05,940
0,630 960,1710
Exactly, {}

1971
01:12:06,060 --> 01:12:07,530
0,210 210,750 780,1020 1020,1350 1350,1470
in raft, all servers do

1972
01:12:07,530 --> 01:12:08,780
0,90 90,330 330,660
the same thing,|

1973
01:12:13,880 --> 01:12:16,040
0,750 750,1170 1170,1410 1410,1680 1740,2160
implementing replicate state machine, right,|

1974
01:12:18,150 --> 01:12:20,880
0,720 750,1080 1080,1890 1980,2550 2550,2730
and {in,2PC -}, {actually -}

1975
01:12:20,880 --> 01:12:22,650
0,450 450,720 720,870 870,1290 1320,1770
servers were all servers operate

1976
01:12:22,650 --> 01:12:24,020
0,90 90,390 390,810
on different data.|

1977
01:12:35,300 --> 01:12:37,430
0,270 300,870 900,1500 1500,1710 1710,2130
The first participant was actually

1978
01:12:37,430 --> 01:12:39,050
0,660 660,840 840,1200 1200,1350 1350,1620
operating on x| and second

1979
01:12:39,050 --> 01:12:41,260
0,510 510,780 780,1200 1200,1650
participate was operating {on,y}.

1980
01:12:41,380 --> 01:12:43,150
0,300 300,720 720,1230 1230,1680 1680,1770
So {in,2PC -}, really you

1981
01:12:43,150 --> 01:12:44,440
0,270 300,600 600,630 630,1020 1020,1290
know solve a completely different

1982
01:12:44,440 --> 01:12:46,030
0,420 420,570 570,1170 1170,1500 1500,1590
problem than raft,| raft is

1983
01:12:46,030 --> 01:12:48,130
0,270 270,450 450,900 930,1200 1200,2100
really all about high availability.|

1984
01:12:54,860 --> 01:12:57,110
0,660 900,1290 1290,1620 1620,2130 2130,2250
And {} {2PC -} is

1985
01:12:57,110 --> 01:12:59,540
0,300 300,870 930,1560 1560,2100 2100,2430
really about atomic operations across

1986
01:12:59,540 --> 01:13:00,740
0,570
servers,|

1987
01:13:07,640 --> 01:13:09,350
0,810 810,1110 1110,1320 1320,1620 1620,1710
across data that's living on

1988
01:13:09,350 --> 01:13:10,760
0,270 270,870
different servers.|

1989
01:13:10,760 --> 01:13:12,360
0,180 180,300 300,450 450,900
Does that make sense?|

1990
01:13:13,700 --> 01:13:14,930
0,210 210,480 480,750 750,960 960,1230
So even though like maybe

1991
01:13:14,930 --> 01:13:16,760
0,90 90,240 240,750 990,1440 1440,1830
they have some internal techniques

1992
01:13:16,760 --> 01:13:18,710
0,150 150,480 480,720 720,1380 1590,1950
that look very similar,| the

1993
01:13:18,710 --> 01:13:20,930
0,480 480,1230 1230,1350 1350,1740 1740,2220
two protocols {you,knwo} are designed

1994
01:13:20,930 --> 01:13:23,000
0,210 210,660 660,930 930,1620
for completely different problems,|

1995
01:13:23,940 --> 01:13:25,140
0,120 120,300 300,690 690,1080 1080,1200
and not directly related,| now

1996
01:13:25,140 --> 01:13:26,190
0,150 150,450 450,540 540,750 750,1050
it's interesting to see, correct,|

1997
01:13:26,190 --> 01:13:27,090
0,210 390,570 570,690 690,840 840,900
but we could make a

1998
01:13:27,090 --> 01:13:28,530
0,570 810,930 930,1050 1050,1170 1170,1440
raft,| we can use raft

1999
01:13:28,530 --> 01:13:29,520
0,60 60,180 180,240 240,780 780,990
to make the coordinator more

2000
01:13:29,520 --> 01:13:31,230
0,210 210,600 600,660 660,1200 1200,1710
fault tolerant| or repetitions made

2001
01:13:31,230 --> 01:13:33,750
0,660 660,960 960,1500 1770,2340 2340,2520
more highly available,| but they

2002
01:13:33,750 --> 01:13:36,270
0,390 390,1110 1230,1650 1650,1890 1890,2520
basically essentially solve different problems.|

2003
01:13:43,860 --> 01:13:45,810
0,450 660,1170 1170,1440 1440,1710 1710,1950
{With,that} {I,actually} wanted to end

2004
01:13:45,810 --> 01:13:48,060
0,150 150,660 690,1500 1500,1830 1830,2250
this lecture,| I'm happy to

2005
01:13:48,060 --> 01:13:51,090
0,510 510,690 690,1380 1650,2910 2910,3030
entertain more questions,| hopefully this

2006
01:13:51,090 --> 01:13:52,350
0,210 210,510 510,1050 1050,1170 1170,1260
will very helpful in the

2007
01:13:52,350 --> 01:13:54,060
0,270 270,390 390,960 990,1170 1170,1710
next two papers,| so the

2008
01:13:54,090 --> 01:13:55,650
0,300 300,390 390,780 780,1080 1080,1560
next two papers are both

2009
01:13:55,650 --> 01:13:58,320
0,180 180,660 660,1350 1530,2040 2040,2670
two transaction systems,| {} one

2010
01:13:58,320 --> 01:14:00,990
0,960 960,1170 1710,2040 2040,2130 2130,2670
{} and one from Google,|

2011
01:14:00,990 --> 01:14:02,400
0,90 90,270 270,360 360,780 780,1410
{one -} from Microsoft research,|

2012
01:14:02,700 --> 01:14:04,980
0,660 660,1350 1350,1650 1650,1860 1860,2280
{} and second one uses

2013
01:14:04,980 --> 01:14:07,890
0,630 630,1350 1650,2160 2160,2700 2700,2910
optimistic transactions,| {} and you'll

2014
01:14:07,890 --> 01:14:08,700
0,270 270,420 420,510 510,660 660,810
see when you read these

2015
01:14:08,700 --> 01:14:09,840
0,390 390,540 540,630 630,1080 1080,1140
papers,| there's a lot of

2016
01:14:09,840 --> 01:14:11,970
0,600 600,750 750,1140 1140,1530 1530,2130
machinery are pretty complex systems,|

2017
01:14:12,210 --> 01:14:13,530
0,330 330,450 450,780 780,870 870,1320
{} but hopefully at least

2018
01:14:13,530 --> 01:14:14,730
0,120 120,210 210,330 330,720 720,1200
some of the parts that

2019
01:14:14,730 --> 01:14:16,440
0,240 240,390 390,1050 1260,1410 1410,1710
will be described,| you will

2020
01:14:16,440 --> 01:14:17,550
0,180 180,690 690,870 870,960 960,1110
now understand,| because you know

2021
01:14:17,550 --> 01:14:18,960
0,210 210,330 330,540 540,1170 1170,1410
what {two-phase -} {commit,is}| and

2022
01:14:18,960 --> 01:14:19,590
0,90 90,180 180,360 360,420 420,630
you know what {two-phase -}

2023
01:14:19,590 --> 01:14:20,540
0,360
{locking,is}.|

2024
01:14:21,560 --> 01:14:23,810
0,330 330,420 420,750 1290,1860 1860,2250
Okay, with that, I'll end|

2025
01:14:23,840 --> 01:14:26,540
0,840 1230,1710 1710,1950 1950,2010 2010,2700
and everybody needs to {go,can,go}|

2026
01:14:26,540 --> 01:14:27,830
0,420 420,810 810,1050 1050,1140 1140,1290
and anybody wants to ask

2027
01:14:27,830 --> 01:14:29,090
0,390 390,510 510,750 750,960 960,1260
questions,| {you,know} please feel free

2028
01:14:29,120 --> 01:14:30,280
0,120 120,270 270,630
to do so.|

2029
01:14:36,720 --> 01:14:38,040
0,360 360,570 570,1020 1020,1200 1200,1320
{} Sorry, this might be

2030
01:14:38,040 --> 01:14:39,440
0,270 270,780
a little,

2031
01:14:39,440 --> 01:14:41,630
0,330 330,1170 1170,1560 1560,1920 1920,2190
{} a strange question,| but

2032
01:14:41,660 --> 01:14:44,240
0,330 330,510 510,1140 1140,1980 2370,2580
for {two-phase -} locking, it

2033
01:14:44,240 --> 01:14:46,730
0,210 210,630 630,1200 1230,1830 1830,2490
is also about atomic operations,|

2034
01:14:46,730 --> 01:14:48,620
0,300 330,930 930,1050 1050,1230 1230,1890
but there it is about

2035
01:14:49,300 --> 01:14:52,090
0,840 870,1410 1740,2070 2070,2460 2460,2790
one,| {} not across servers

2036
01:14:52,090 --> 01:14:54,460
0,150 150,600 600,1020 1020,1830
but across one server,|

2037
01:14:54,580 --> 01:14:56,620
0,330 330,750 750,1080 1080,1470 1470,2040
{and,two-phase -} across multiple servers.|

2038
01:14:56,620 --> 01:14:58,600
0,570 570,930 930,1140 1140,1740 1740,1980
{Yeah,two-phase} locking is irrelevant to

2039
01:14:58,600 --> 01:14:59,410
0,150 150,270 270,450 450,510 510,810
if you have a single

2040
01:14:59,410 --> 01:15:00,430
0,360 360,510 510,570 570,810 810,1020
machine,| like a {multi-core -}

2041
01:15:00,430 --> 01:15:02,590
0,600 1050,1530 1530,1710 1710,2070 2070,2160
machine| and you're implementing a

2042
01:15:02,590 --> 01:15:03,730
0,420 420,750 750,870 870,900 900,1140
transaction system on a {multi-core

2043
01:15:03,730 --> 01:15:05,470
0,210 210,840 1080,1470 1470,1590 1590,1740
-} machine,| {} you will

2044
01:15:05,470 --> 01:15:06,370
0,150 150,270 270,660 660,720 720,900
have to lock,| you know

2045
01:15:06,370 --> 01:15:07,540
0,210 210,570 570,660 660,750 750,1170
the records that are involved

2046
01:15:07,540 --> 01:15:09,610
0,150 150,300 300,1050 1380,1770 1770,2070
in the transaction,| {} and

2047
01:15:09,610 --> 01:15:10,450
0,120 120,330 330,660 660,780 780,840
{two-phase -} locking is a

2048
01:15:10,450 --> 01:15:11,530
0,330 330,480 480,810 810,900 900,1080
perfectly good protocol for doing

2049
01:15:11,530 --> 01:15:12,260
0,300
so.|

2050
01:15:16,200 --> 01:15:17,190
0,300 300,450 450,630 630,900 900,990
Where {two-phase -} commit is

2051
01:15:17,190 --> 01:15:18,540
0,240 240,420 420,510 510,810 810,1350
really about the distributed systems.|

2052
01:15:20,770 --> 01:15:21,910
0,270 270,480 480,570 570,810 810,1140
I guess my question was

2053
01:15:21,940 --> 01:15:23,740
0,390 390,600 600,1320
is {two-phase -}

2054
01:15:23,930 --> 01:15:25,910
0,180 180,480 480,1260 1650,1890 1890,1980
{two-phase -} locking,| can it

2055
01:15:25,910 --> 01:15:27,860
0,420 480,900 900,1260 1320,1560 1560,1950
be part of {two-phase -}

2056
01:15:27,860 --> 01:15:29,180
0,780
commit.|

2057
01:15:30,140 --> 01:15:31,340
0,390 390,570 570,780 780,1080 1080,1200
{} I'm not sure I

2058
01:15:31,340 --> 01:15:33,020
0,120 120,270 270,420 420,930 1050,1680
know what that means, {}|

2059
01:15:33,020 --> 01:15:33,890
0,270 270,420 420,600 600,720 720,870
{} the way I think

2060
01:15:33,890 --> 01:15:34,970
0,300 300,480 480,600 600,750 750,1080
about is that,| you solve

2061
01:15:34,970 --> 01:15:36,540
0,120 120,390 390,1050
two different problems.|

2062
01:15:38,470 --> 01:15:40,570
0,630 990,1260 1260,1350 1350,1830 1830,2100
Okay, it's the case that

2063
01:15:40,570 --> 01:15:41,980
0,150 150,300 300,630 630,1080 1080,1410
you know you you maybe

2064
01:15:41,980 --> 01:15:42,670
0,120 120,180 180,330 330,390 390,690
this is what you mean,|

2065
01:15:42,910 --> 01:15:44,230
0,570 570,750 750,870 870,930 930,1320
{} it is a case

2066
01:15:44,230 --> 01:15:45,400
0,210 210,540 540,630 630,810 810,1170
where that you know there's

2067
01:15:45,400 --> 01:15:49,240
0,360 420,1410 1710,2610 2610,3060 3570,3840
a coordinator,| {} or as

2068
01:15:49,240 --> 01:15:50,710
0,240 240,480 480,630 630,1080 1080,1470
part of the initial setup

2069
01:15:50,710 --> 01:15:51,790
0,330 330,420 420,720 720,960 960,1080
when the initial puts are

2070
01:15:51,790 --> 01:15:54,010
0,270 270,450 450,540 540,1170 1470,2220
gone by the transaction,| the

2071
01:15:54,010 --> 01:15:55,180
0,180 180,600 600,750 750,1020 1020,1170
that transaction will follow {two-phase

2072
01:15:55,180 --> 01:15:56,320
0,210 210,690
-} locking,|

2073
01:15:57,080 --> 01:15:58,400
0,360 360,510 510,810 810,960 960,1320
here to lock on {}

2074
01:15:58,400 --> 01:15:59,810
0,390 390,930 930,1050 1050,1260 1260,1410
x required, to lock on

2075
01:15:59,810 --> 01:16:01,340
0,270 270,930
B required,|

2076
01:16:01,880 --> 01:16:03,950
0,600 600,1050 1200,1440 1440,1680 1680,2070
{} so we lock y

2077
01:16:03,950 --> 01:16:05,510
0,90 90,690 690,900 900,1200 1200,1560
is acquired| and so did

2078
01:16:05,540 --> 01:16:06,710
0,180 180,600 600,810 810,1050 1050,1170
the transaction does that in

2079
01:16:06,710 --> 01:16:07,880
0,120 120,270 270,510 510,780 780,1170
the {two-phase -} locking style,|

2080
01:16:08,000 --> 01:16:08,960
0,150 150,360 360,450 450,720 720,960
it could have done using

2081
01:16:08,960 --> 01:16:10,370
0,330 330,660 660,930 930,1260 1260,1410
strict locking too,| but you

2082
01:16:10,370 --> 01:16:11,120
0,210
know

2083
01:16:11,210 --> 01:16:12,920
0,540 660,1200 1200,1380 1380,1530 1530,1710
{} from the {two-phase -}

2084
01:16:12,920 --> 01:16:14,420
0,240 240,390 390,450 450,900 1350,1500
commit point of view,| it

2085
01:16:14,420 --> 01:16:15,620
0,180 180,330 330,870 870,1020 1020,1200
doesn't really matter,| at some

2086
01:16:15,620 --> 01:16:17,420
0,390 390,510 510,630 630,930 1290,1800
point you know the transaction

2087
01:16:17,420 --> 01:16:18,710
0,120 120,450 450,510 510,600 600,1290
is painful to be executed|

2088
01:16:19,070 --> 01:16:20,030
0,300 300,390 390,510 510,720 720,960
and the {two-phase -} commit

2089
01:16:20,030 --> 01:16:22,640
0,90 90,390 390,900 1200,1920 1920,2610
is really about reaching agreement,|

2090
01:16:22,940 --> 01:16:25,250
0,420 420,1350 1350,1530 1530,1950 1950,2310
{} that all parties agreed

2091
01:16:25,250 --> 01:16:26,380
0,60 60,240 240,660
to go along.|

2092
01:16:28,350 --> 01:16:29,640
0,390 390,480 480,690 690,990 990,1290
Yeah, that makes sense, thank

2093
01:16:29,640 --> 01:16:31,650
0,420 600,810 810,1170 1650,1830 1830,2010
you.| You're welcome.| This {two-phase

2094
01:16:31,650 --> 01:16:34,020
0,300 300,600 600,1290 1290,1920 1950,2370
-} commit exclusively for {like,sharded}

2095
01:16:34,020 --> 01:16:37,770
0,540 1080,1950 1950,2490 2490,2850 2850,3750
data.| No, {} actually it

2096
01:16:37,770 --> 01:16:41,430
0,450 450,990 1380,2490 2580,2940 2940,3660
came out,| well, oh yes

2097
01:16:41,430 --> 01:16:44,040
0,60 60,420 720,1380 1710,1980 1980,2610
or no,| {} the original

2098
01:16:44,040 --> 01:16:45,240
0,150 150,360 360,690 690,930 930,1200
sort of two-phase commit came

2099
01:16:45,240 --> 01:16:47,550
0,240 240,360 360,1050 1260,1680 1680,2310
out of the case,| where

2100
01:16:47,700 --> 01:16:49,620
0,660 660,720 720,810 810,1080 1080,1920
like you have different organizations|

2101
01:16:49,620 --> 01:16:50,520
0,210 210,420 420,600 600,660 660,900
and they need to agree

2102
01:16:50,520 --> 01:16:51,420
0,90 90,240 240,630 630,840 840,900
to do something,| like you

2103
01:16:51,420 --> 01:16:53,640
0,150 150,360 360,540 540,900 1230,2220
know you book { -}

2104
01:16:53,640 --> 01:16:55,950
0,240 420,1050 1050,1410 1410,1770 1770,2310
on {} a travel website,|

2105
01:16:55,950 --> 01:16:57,120
0,90 90,270 270,510 510,750 750,1170
you know you book a

2106
01:16:57,120 --> 01:16:58,890
0,570 570,870 870,1230 1230,1440 1440,1770
trip| and another thing you

2107
01:16:58,890 --> 01:17:01,050
0,240 240,270 270,990 1290,1860 1860,2160
book a hotel| and you

2108
01:17:01,050 --> 01:17:02,910
0,210 210,570 960,1440 1440,1770 1770,1860
want to commit to the

2109
01:17:02,910 --> 01:17:04,320
0,150 150,510 510,900 900,1020 1020,1410
whole trip,| if you both

2110
01:17:04,320 --> 01:17:08,100
0,930 960,1770 1770,2490 2820,3120 3120,3780
hotel website and { -}

2111
01:17:08,310 --> 01:17:11,340
0,930 1110,1740 1770,2160 2160,2610 2610,3030
{} the travel website {}

2112
01:17:11,370 --> 01:17:12,600
0,390 390,510 510,660 660,1050 1050,1230
agreed to go along or

2113
01:17:12,900 --> 01:17:14,010
0,240 240,480 480,540 540,630 630,1110
{sort,of} committed to the transaction|

2114
01:17:14,610 --> 01:17:16,140
0,750 750,900 900,1050 1050,1140 1140,1530
and that sort of deciding

2115
01:17:16,140 --> 01:17:18,150
0,570 1020,1230 1230,1290 1290,1590 1590,2010
where sort of this deciding

2116
01:17:18,150 --> 01:17:19,350
0,360 360,570 570,720 720,840 840,1200
where,| came up which really

2117
01:17:19,350 --> 01:17:19,950
0,60 60,180 180,270 270,360 360,600
you know you have different

2118
01:17:19,950 --> 01:17:21,720
0,990 1200,1380 1380,1530 1530,1680 1680,1770
organizations,| {} they need to

2119
01:17:21,720 --> 01:17:22,460
0,420
commit

2120
01:17:22,460 --> 01:17:26,690
0,240 240,330 330,1830 1830,3210 3660,4230
to a particular operation {}|

2121
01:17:26,690 --> 01:17:28,490
0,660 900,1170 1170,1290 1290,1380 1380,1800
and {} for the reasons

2122
01:17:28,490 --> 01:17:30,830
0,450 510,720 720,1410 1680,2070 2070,2340
that {} that that setting|

2123
01:17:30,830 --> 01:17:33,380
0,600 1200,2010 2010,2220 2220,2370 2370,2550
actually basically people don't really

2124
01:17:33,380 --> 01:17:34,160
0,150 150,210 210,450 450,570 570,780
want to use {two-phase -}

2125
01:17:34,160 --> 01:17:36,560
0,330 780,1710 1710,1890 1890,2040 2040,2400
commit,| because that would mean

2126
01:17:36,560 --> 01:17:39,200
0,390 720,1230 1230,1530 1530,1860 1860,2640
that,| {} the travel agency

2127
01:17:39,200 --> 01:17:41,480
0,450 450,540 540,1260 1260,1740 1740,2280
website is dependent on the

2128
01:17:41,480 --> 01:17:44,030
0,450 450,900 900,1500 1500,1890 2190,2550
hotel reservation websites| and these

2129
01:17:44,030 --> 01:17:45,860
0,120 120,240 240,720 720,1530 1530,1830
are from different organizations| and

2130
01:17:45,860 --> 01:17:46,580
0,90 90,180 180,450 450,540 540,720
you know people who know

2131
01:17:46,580 --> 01:17:47,690
0,120 120,540 540,690 690,840 840,1110
the organization don't really trust

2132
01:17:47,690 --> 01:17:50,150
0,120 120,510 720,1740 1950,2100 2100,2460
each other,| and if one

2133
01:17:50,150 --> 01:17:51,500
0,180 180,540 540,810 810,1050 1050,1350
goes down,| then there's actually

2134
01:17:51,500 --> 01:17:53,360
0,270 270,810 810,1230 1470,1680 1680,1860
can't proceed and that seems

2135
01:17:53,360 --> 01:17:54,890
0,120 120,570 1020,1230 1230,1440 1440,1530
all bad,| {} so, in

2136
01:17:54,890 --> 01:17:55,970
0,420 420,570 570,750 750,990 990,1080
fact {two-phase -} commit have

2137
01:17:55,970 --> 01:17:57,620
0,870 870,1050 1050,1110 1110,1170 1170,1650
a bit of a negative

2138
01:17:57,620 --> 01:17:58,860
0,870
reputation,|

2139
01:17:58,860 --> 01:18:00,840
0,720 720,1140 1140,1560 1560,1650 1650,1980
{} because really you know

2140
01:18:01,980 --> 01:18:03,480
0,210 210,300 300,570 570,1170 1170,1500
one of the original goals

2141
01:18:03,480 --> 01:18:04,440
0,60 60,420 420,660 660,750 750,960
of two-phase leaders to solve

2142
01:18:04,440 --> 01:18:05,580
0,120 120,390 390,600 600,930 930,1140
that problem that problem here,|

2143
01:18:05,580 --> 01:18:06,510
0,330 330,540 540,720 720,870 870,930
people don't really want to

2144
01:18:06,510 --> 01:18:07,350
0,240 240,330 330,420 420,630 630,840
solve with {two-phase -} commit,|

2145
01:18:07,860 --> 01:18:09,810
0,720 750,870 870,960 960,1410 1410,1950
however in the context where

2146
01:18:09,810 --> 01:18:10,770
0,210 210,300 300,330 330,600 600,960
you have a data center,|

2147
01:18:10,770 --> 01:18:12,180
0,120 120,180 180,480 480,1290 1290,1410
it's a single organization and

2148
01:18:12,180 --> 01:18:14,130
0,60 60,600 600,1200 1410,1710 1710,1950
the databases sharded,| {two-phase -}

2149
01:18:14,130 --> 01:18:16,000
0,300 300,420 420,930 930,1440
commit is widely popular

2150
01:18:16,180 --> 01:18:18,120
0,660 660,960 960,1440
and typical use.|

2151
01:18:21,000 --> 01:18:23,130
0,420 420,660 660,900 1410,1710 1710,2130
Awesome, thank you.| You're welcome.|

2152
01:18:24,210 --> 01:18:25,260
0,240 240,360 360,510 510,900 900,1050
Could you go back to

2153
01:18:25,260 --> 01:18:26,910
0,210 210,630 630,990 990,1500 1500,1650
the first failure case| that

2154
01:18:26,910 --> 01:18:28,200
0,120 120,360 360,570 570,720 720,1290
we talked about with {two-phase,a}

2155
01:18:28,200 --> 01:18:30,930
0,300 300,1140 1170,1500 1500,2430 2460,2730
bit,| where its fails B

2156
01:18:30,930 --> 01:18:33,960
0,360 360,1200 1410,1980 1980,2460 2460,3030
fails after responding prepared okay.|

2157
01:18:34,140 --> 01:18:36,160
0,450 480,930 930,1200 1200,1560
Yeah, is this one.|

2158
01:18:36,250 --> 01:18:39,220
0,1110 1140,1830 1860,2010 2010,2520
{} Yeah, I guess.|

2159
01:18:39,560 --> 01:18:40,970
0,120 120,780 780,1080 1080,1260 1260,1410
I talked twice about this

2160
01:18:40,970 --> 01:18:43,130
0,300 300,540 540,720 720,2010 2010,2160
case, but like.| Yeah, I

2161
01:18:43,130 --> 01:18:45,740
0,390 390,990 990,1170 1170,2100
guess I was wondering,|

2162
01:18:45,740 --> 01:18:48,530
0,1110 1320,1620 1620,1890 1890,1980 1980,2790
why B used to persist

2163
01:18:48,530 --> 01:18:49,580
0,120 120,330 330,690 690,960 960,1050
or like why needs to

2164
01:18:49,580 --> 01:18:52,910
0,720 720,1170 1170,1530 1620,2460 2460,3330
remember that it received prepare,|

2165
01:18:53,450 --> 01:18:54,920
0,450 450,600 600,840 840,1110 1110,1470
{} I guess my thinking

2166
01:18:54,920 --> 01:18:56,200
0,780
was,|

2167
01:18:56,260 --> 01:18:57,670
0,270 270,390 390,660 660,960 960,1410
when it comes back up,|

2168
01:18:58,060 --> 01:19:00,130
0,210 210,390 390,1230 1260,1530 1530,2070
if it receives A commit

2169
01:19:00,130 --> 01:19:01,690
0,390 390,570 570,690 690,1230 1230,1560
message from the coordinator,| couldn't

2170
01:19:01,690 --> 01:19:03,670
0,180 180,540 540,1080 1080,1500 1770,1980
it just assumed that it

2171
01:19:03,670 --> 01:19:05,170
0,240 240,840 840,900 900,1170 1170,1500
was prepared,| I guess where

2172
01:19:05,170 --> 01:19:06,400
0,150 150,270 270,450 450,600 600,1230
does it use that information.|

2173
01:19:06,790 --> 01:19:08,920
0,1200 1200,1680 1680,1800 1800,1950 1950,2130
Yeah, well it could have

2174
01:19:08,920 --> 01:19:10,210
0,270 270,570 660,930 930,1230 1230,1290
{abort -}, right, before the

2175
01:19:10,210 --> 01:19:11,260
0,630
crash,|

2176
01:19:12,030 --> 01:19:12,990
0,180 180,420 420,570 570,660 660,960
and B needs to remember

2177
01:19:12,990 --> 01:19:14,220
0,150 150,240 240,660
what it did.|

2178
01:19:14,430 --> 01:19:15,660
0,930
Okay.|

2179
01:19:15,690 --> 01:19:17,520
0,210 210,390 390,750 750,1140 1140,1830
So there's another slight variation

2180
01:19:17,520 --> 01:19:19,440
0,120 120,270 270,780 780,1260 1410,1920
with this protocol,| where where

2181
01:19:19,440 --> 01:19:20,880
0,90 90,780 810,1050 1050,1200 1200,1440
you assume that you always

2182
01:19:20,880 --> 01:19:23,580
0,780 780,1020 1020,1410 1410,1830 2400,2700
commit,| so presume commit {}

2183
01:19:23,580 --> 01:19:24,660
0,210 210,270 270,360 360,720 720,1080
one of the messages slightly

2184
01:19:24,660 --> 01:19:26,310
0,450 540,990 990,1380 1380,1500 1500,1650
different,| {} and you know

2185
01:19:26,310 --> 01:19:27,420
0,180 180,240 240,840 840,960 960,1110
there's an optimization that you

2186
01:19:27,420 --> 01:19:30,000
0,180 180,810 1140,1860 1860,2310 2310,2580
could consider,| {} and would

2187
01:19:30,000 --> 01:19:31,260
0,180 180,420 420,480 480,660 660,1260
make sense in some settings.|

2188
01:19:31,940 --> 01:19:33,740
0,570 840,1110 1110,1380 1380,1620 1620,1800
{} I I didn't really

2189
01:19:33,740 --> 01:19:35,000
0,210 210,360 360,510 510,900 900,1260
talk about that particular protocol,|

2190
01:19:35,000 --> 01:19:35,990
0,150 150,270 270,330 330,600 600,990
but just a slight different,|

2191
01:19:35,990 --> 01:19:37,010
0,60 60,210 210,360 360,450 450,1020
you know sort of variation,|

2192
01:19:37,010 --> 01:19:37,700
0,150 150,390 390,420 420,630 630,690
there's quite a number of

2193
01:19:37,700 --> 01:19:38,990
0,570 570,720 720,840 840,1050 1050,1290
variations for {two-phase -} commit,|

2194
01:19:39,880 --> 01:19:41,530
0,300 300,540 750,1200 1200,1320 1320,1650
{} they change in minor

2195
01:19:41,530 --> 01:19:42,520
0,510
ways.|

2196
01:19:43,120 --> 01:19:44,400
0,240 240,420 420,780
That makes sense.|

2197
01:19:45,190 --> 01:19:46,930
0,180 180,570 840,1260 1290,1500 1500,1740
Make sense?| Yep, thank you.|

2198
01:19:54,270 --> 01:19:55,820
0,300 300,420 420,540 540,990
{Is,that} it for today?|

2199
01:19:57,430 --> 01:19:58,630
0,480 480,600 600,810 810,930 930,1200
Sorry, you said that it

2200
01:19:58,630 --> 01:20:00,820
0,480 510,660 660,840 840,1290 1320,2190
can,| it could have aborted

2201
01:20:00,820 --> 01:20:03,370
0,360 720,1590 1590,2010 2220,2430 2430,2550
the transaction,| but if it

2202
01:20:03,370 --> 01:20:04,570
0,300 300,420 420,540 540,780 780,1200
did that it will never

2203
01:20:04,570 --> 01:20:06,700
0,420 420,690 840,1620
receive the commit.|

2204
01:20:07,380 --> 01:20:08,700
0,270 270,480 480,900 900,1260 1260,1320
You mean in response to

2205
01:20:08,700 --> 01:20:11,430
0,60 60,270 270,690 870,2610 2610,2730
the last question?| Yeah.| You

2206
01:20:11,430 --> 01:20:12,540
0,150 150,600 600,660 660,960 960,1110
know the the question was

2207
01:20:12,540 --> 01:20:14,100
0,180 180,510 510,960 960,1380 1380,1560
like why does B have

2208
01:20:14,100 --> 01:20:15,870
0,90 90,930 930,1260 1260,1620 1620,1770
to record stable storage,| what

2209
01:20:15,870 --> 01:20:17,280
0,510 510,570 570,900
decided to do.|

2210
01:20:17,580 --> 01:20:19,530
0,900 930,1320 1320,1500 1500,1830 1830,1950
And {} the injury is

2211
01:20:19,530 --> 01:20:21,330
0,510 510,1020 1020,1440 1440,1590 1590,1800
that {} when B comes

2212
01:20:21,330 --> 01:20:22,350
0,270 270,360 360,690 690,780 780,1020
up,| it knows it needs

2213
01:20:22,350 --> 01:20:23,700
0,60 60,210 210,570 570,810 810,1350
to know whether actually commit

2214
01:20:23,700 --> 01:20:25,020
0,240 240,330 330,660 690,1140 1140,1320
agreed to commit,| we're going

2215
01:20:25,020 --> 01:20:26,420
0,60 60,270 270,360 360,780
to agree to abort.|

2216
01:20:26,760 --> 01:20:28,380
0,690 690,1110 1110,1230 1230,1440 1440,1620
{} And it doesn't write

2217
01:20:28,380 --> 01:20:29,920
0,330 330,420 420,600 600,990
anything, it doesn't know

2218
01:20:30,160 --> 01:20:31,720
0,120 120,300 300,930
to what agree.|

2219
01:20:35,030 --> 01:20:35,600
0,180 180,270 270,360 360,450 450,570
Because it could have been

2220
01:20:35,600 --> 01:20:37,780
0,330 330,1200 1230,1830
abort after.| Yep.|

2221
01:20:37,810 --> 01:20:39,120
0,1020
Yeah.|

2222
01:20:40,540 --> 01:20:41,710
0,240 240,390 390,780 780,900 900,1170
{} I {need,to} know that

2223
01:20:41,710 --> 01:20:42,940
0,420 450,810 810,960 960,1050 1050,1230
you know what to do

2224
01:20:42,940 --> 01:20:44,080
0,180 180,270 270,810 810,1140 1140,1140
in the recovery stage, I

2225
01:20:44,080 --> 01:20:45,960
0,480 780,1320
see.| {Yes,exactly}.|

2226
01:20:52,260 --> 01:20:53,490
0,150 150,480 480,720 720,840 840,1230
It also needs to record

2227
01:20:53,490 --> 01:20:55,140
0,150 150,390 390,840 840,1170 1170,1650
what it does,| because if

2228
01:20:55,700 --> 01:20:57,080
0,210 210,420 420,420 420,1200 1230,1380
it like {aborts -},| but

2229
01:20:57,080 --> 01:20:58,160
0,90 90,510 510,690 690,960 960,1080
the message never gets to

2230
01:20:58,160 --> 01:21:00,590
0,90 90,780 810,1200 1200,1560 1920,2430
the coordinator| needs to {}

2231
01:21:00,620 --> 01:21:02,090
0,210 210,540 540,630 630,900 900,1470
{re-send -} the same message,

2232
01:21:02,120 --> 01:21:03,950
0,300 300,690 780,1200 1200,1320 1320,1830
right.| Yeah, well it need

2233
01:21:03,950 --> 01:21:05,210
0,90 90,450 450,630 630,930 930,1260
to record that actually abort

2234
01:21:05,210 --> 01:21:06,380
0,180 180,600 600,870 870,990 990,1170
that transaction ID,| so when

2235
01:21:06,380 --> 01:21:08,120
0,90 90,360 360,870 870,1350 1560,1740
the {} coordinator asks,| {you,know}

2236
01:21:08,120 --> 01:21:09,620
0,180 180,300 300,390 390,870 1110,1500
what did you do,| that

2237
01:21:09,620 --> 01:21:10,820
0,240 240,630 630,780 780,810 810,1200
actually responds with a no.|

2238
01:21:11,940 --> 01:21:13,440
0,390 390,630 630,930
{Got,it}, thank you.|

2239
01:21:17,530 --> 01:21:18,760
0,270 270,720
Thank you.|

2240
01:21:18,910 --> 01:21:19,980
0,510
{You're,welcome}.|

2241
01:21:20,790 --> 01:21:22,300
0,420 420,930
Thank you.|

2242
01:21:24,010 --> 01:21:25,180
0,300 300,420 420,540 540,990 990,1170
Alright, see you all next

2243
01:21:25,180 --> 01:21:26,100
0,360
week.
