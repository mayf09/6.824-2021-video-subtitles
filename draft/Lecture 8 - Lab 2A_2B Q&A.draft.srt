1
00:00:03,170 --> 00:00:05,030
0,390 390,570 570,750 750,1320 1350,1860
Okay, {} good afternoon, sound
好的，下午好，声音检查。

2
00:00:05,030 --> 00:00:06,160
0,660
check.|
|

3
00:00:08,480 --> 00:00:10,910
0,300 300,690 690,1320 1710,2070 2070,2430
Yep, we're good.| Okay, great,|
是的，我们很好。|好的，很好，|

4
00:00:11,030 --> 00:00:12,710
0,420 420,930 930,1110 1110,1500 1500,1680
{ -} good evening, good
晚上好，早上好，无论你在哪里，

5
00:00:12,710 --> 00:00:14,720
0,480 540,930 930,1050 1050,1440 1530,2010
morning, wherever you are,| so
|所以今天我想谈谈实验2 a和b，

6
00:00:15,200 --> 00:00:16,550
0,540 540,720 720,930 930,1080 1080,1350
today I wanna talk about

7
00:00:16,550 --> 00:00:18,620
0,870 870,1260 1260,1470 1470,1620 1620,2070
labs 2 a and b,|
|

8
00:00:18,890 --> 00:00:19,940
0,390 390,540 540,600 600,930 930,1050
and this is really a
这实际上是一个问答环节，

9
00:00:19,940 --> 00:00:22,430
0,390 390,690 690,1170 1590,2160 2160,2490
question answering session,| {} so
|所以你可以随时打断我，

10
00:00:22,430 --> 00:00:24,290
0,210 210,480 480,660 660,1050 1050,1860
feel free to interrupt anytime,|
|

11
00:00:24,290 --> 00:00:25,640
0,510 510,930 930,1080 1080,1260 1260,1350
ask questions as much as
想问多少就问多少，

12
00:00:25,640 --> 00:00:27,620
0,120 120,1020 1050,1290 1290,1740 1740,1980
you like,| it's really, {}
|这是真的，今天的课真的是专门针对你们的问题的，

13
00:00:28,250 --> 00:00:29,870
0,480 480,750 750,810 810,1080 1080,1620
today's lecture is really dedicated

14
00:00:29,870 --> 00:00:33,140
0,480 630,960 960,1560 1830,2400 2400,3270
to your questions,| I summarized
|我总结了许多问题，

15
00:00:33,170 --> 00:00:35,300
0,1230
{}

16
00:00:35,360 --> 00:00:36,590
0,300 300,390 390,600 600,1110 1110,1230
many of the questions,| that
|或者在电子邮件中出现一次或多次，

17
00:00:36,590 --> 00:00:37,730
0,210 210,450 480,780 780,930 930,1140
came up or either once

18
00:00:37,730 --> 00:00:38,930
0,90 90,390 390,750 750,930 930,1200
or multiple times in the

19
00:00:38,930 --> 00:00:40,370
0,450 450,900 900,960 960,1170 1170,1440
email,| on the right side
|在右边这块黑板上

20
00:00:40,370 --> 00:00:41,720
0,300 300,570 570,930 930,990 990,1350
here this on the board|
|

21
00:00:42,170 --> 00:00:45,380
0,1290 1560,2220 2220,2340 2340,2940 2940,3210
and hopefully it will get
希望当我通过我的解决方案时，它能通过它们

22
00:00:45,380 --> 00:00:48,170
0,240 240,480 480,780 780,1530 1890,2790
through them as I {}

23
00:00:48,260 --> 00:00:52,190
0,1350 1350,1770 1770,1950 1950,2760 3150,3930
{walk,through} {} my solutions| and
|因此，我将主要介绍与该解决方案相关的四个主题。

24
00:00:52,340 --> 00:00:54,180
0,270 270,480 480,720 720,1440
so I'm gonna basically

25
00:00:54,180 --> 00:00:56,040
0,270 270,540 540,1230 1260,1530 1530,1860
cover four topics {} related

26
00:00:56,040 --> 00:00:57,990
0,150 150,480 510,1200 1350,1830 1830,1950
to the solution.| {Ones,we're} going
|我们首先要谈一谈投票，或者像投票码一样，

27
00:00:57,990 --> 00:00:58,680
0,60 60,300 300,450 450,480 480,690
to first talk a little

28
00:00:58,680 --> 00:01:00,240
0,120 120,360 360,900
bit about voting,

29
00:01:00,780 --> 00:01:01,860
0,240 240,420 420,480 480,780 780,1080
or like the voting code,|
|

30
00:01:01,860 --> 00:01:04,200
0,570 600,810 810,1710
basically the heartbeats,|
基本上就是心跳，|

31
00:01:07,970 --> 00:01:09,140
0,360 360,570 720,900 900,1020 1020,1170
yeah, and then I'll talk
是的，然后我会谈到开始和承诺。

32
00:01:09,140 --> 00:01:11,960
0,570 810,1320 1320,1440 1440,1950
about start and commit.|
|

33
00:01:17,310 --> 00:01:18,390
0,180 180,330 330,390 390,870 870,1080
This sort of follows I
我认为这是我们在实验室中提出的建议，

34
00:01:18,390 --> 00:01:20,580
0,270 270,390 390,1350 1380,2070 2070,2190
think there's {} suggestion that

35
00:01:20,580 --> 00:01:21,480
0,120 120,390 390,450 450,600 600,900
we made in the lab,|
|

36
00:01:21,480 --> 00:01:22,200
0,180 180,330 330,390 390,570 570,720
like how you should get
比如你应该如何开始，

37
00:01:22,200 --> 00:01:23,730
0,390 390,540 540,780 780,1410 1410,1530
started,| like first voting to
|就像第一次投票去工作，

38
00:01:23,730 --> 00:01:24,630
0,420 420,510 510,630 630,750 750,900
work,| you know they get
|你知道他们让心跳起作用，

39
00:01:24,630 --> 00:01:25,530
0,300 300,420 420,690 690,840 840,900
heartbeats to work,| once you
|一旦你的心跳开始工作，

40
00:01:25,530 --> 00:01:26,790
0,120 120,510 510,630 630,930 930,1260
got heartbeat to work,| you
|您实际上可以开始接受来自客户端的命令

41
00:01:26,790 --> 00:01:28,020
0,120 120,330 330,570 570,870 870,1230
can actually start taking commands

42
00:01:28,020 --> 00:01:29,520
0,150 150,750 1110,1320 1320,1440 1440,1500
from clients| and then of
|然后当然，是的，你必须承诺为他们提供申请的频道。

43
00:01:29,520 --> 00:01:30,900
0,240 240,540 540,990 990,1140 1140,1380
course yeah you gotta commit

44
00:01:30,900 --> 00:01:32,610
0,660 690,1050 1050,1320 1320,1410 1410,1710
to supply them the applied

45
00:01:32,610 --> 00:01:33,360
0,300
channel.|
|

46
00:01:33,420 --> 00:01:34,890
0,180 180,330 330,660 660,1050 1050,1470
So there's roughly order planning
所以有一个大致的订单计划过程，

47
00:01:34,890 --> 00:01:36,450
0,240 240,510 510,660 660,1110 1320,1560
go through,| but again feel
|但是，在任何特定的时间，您都可以随意打断。

48
00:01:36,450 --> 00:01:37,530
0,150 150,270 270,840 840,930 930,1080
free to interrupt at any

49
00:01:37,530 --> 00:01:38,800
0,360 360,690
particular time.|
|

50
00:01:38,950 --> 00:01:40,540
0,480

51
00:01:40,690 --> 00:01:42,760
0,240 240,930 930,1590 1590,1800 1800,2070
So before diving or looking
所以在潜水或研究我的特殊解决方案之前

52
00:01:42,760 --> 00:01:44,620
0,510 510,660 660,1140 1140,1710 1710,1860
at my particular solutions| or
|或者我在这里写的解决方案，

53
00:01:44,620 --> 00:01:45,550
0,90 90,450 450,540 540,780 780,930
the solutions I wrote this

54
00:01:45,550 --> 00:01:46,870
0,450 600,870 870,1080 1080,1140 1140,1320
here,| I want to talk
|我想谈一谈调试，

55
00:01:46,870 --> 00:01:48,700
0,30 30,300 300,570 570,1260 1290,1830
a little bit about debugging,|
|

56
00:01:48,700 --> 00:01:50,200
0,270 270,330 330,1110 1140,1470 1470,1500
because I was probably {}
因为我可能是在你所有提交的问题中出现最多的问题。

57
00:01:50,200 --> 00:01:51,640
0,330 330,450 450,660 660,810 810,1440
question that came up most

58
00:01:51,670 --> 00:01:56,080
0,2460 3180,3660 3660,3870 3870,4230 4230,4410
{in,the}, in all your in

59
00:01:56,080 --> 00:01:58,160
0,1050 1050,1650
{the,submitted} questions.|
|

60
00:01:58,310 --> 00:01:59,090
0,240 240,300 300,450 450,540 540,780
Let me talk a little
让我在很高的层次上谈一谈调试，

61
00:01:59,090 --> 00:01:59,930
0,180 180,270 270,330 330,660 660,840
bit at a very high

62
00:01:59,930 --> 00:02:04,300
0,510 570,900 900,1440 2760,3720
level about debugging, {}|
|

63
00:02:04,510 --> 00:02:05,560
0,180 180,300 300,420 420,630 660,1050
and this is a clearly
这显然是一个我们可以花上一整堂课的话题，

64
00:02:05,560 --> 00:02:06,520
0,30 30,630 630,750 750,840 840,960
a topic that we could

65
00:02:06,520 --> 00:02:07,600
0,210 210,270 270,450 450,810 810,1080
spend a whole lecture on,|
|

66
00:02:07,660 --> 00:02:10,750
0,600 1140,1650 1650,2520 2550,3000 3000,3090
{} and {} but I'm
但我只想给你们一些我的高级方法，

67
00:02:10,750 --> 00:02:11,530
0,270 270,390 390,540 540,660 660,780
just gonna give you some

68
00:02:11,530 --> 00:02:12,640
0,60 60,210 210,390 390,720 720,1110
of my high level approach,|
|

69
00:02:12,640 --> 00:02:13,900
0,390 390,510 510,660 660,810 810,1260
that you know I typically
你知道我通常会这么说的，

70
00:02:13,900 --> 00:02:16,660
0,540 540,660 660,1170 1170,1650 2040,2760
used to address { -},|
|

71
00:02:16,840 --> 00:02:17,920
0,150 150,240 240,360 360,780 780,1080
you know to basically pass
你知道，基本上要通过实验室检查。

72
00:02:17,920 --> 00:02:18,980
0,90 90,660
the labs.|
|

73
00:02:19,190 --> 00:02:20,780
0,120 120,450 480,930 930,1200 1200,1590
And then basically starts out,|
然后基本上开始，|

74
00:02:20,840 --> 00:02:22,160
0,120 120,300 300,660 660,960 960,1320
I just started started basically
我刚刚开始，基本上我们正在运行第一个测试案例，

75
00:02:22,160 --> 00:02:23,180
0,180 180,450 450,540 540,780 780,1020
we're running the first test

76
00:02:23,180 --> 00:02:25,160
0,480
case,|
|

77
00:02:25,810 --> 00:02:26,440
0,180 180,270 270,510 510,630 630,630
and of course if I
当然，如果我没有写过任何代码，

78
00:02:26,440 --> 00:02:27,550
0,180 180,390 390,570 570,750 750,1110
have not written any code,|
|

79
00:02:27,550 --> 00:02:29,110
0,90 90,240 240,570 570,750 1470,1560
I'm gonna fail it,| but
我会不及格的，|但至少我有了一个起点，

80
00:02:29,110 --> 00:02:30,490
0,120 120,360 360,600 600,840 840,1380
at least I have some

81
00:02:30,490 --> 00:02:31,810
0,330 330,630 630,840 840,930 930,1320
starting point,| where I can
|在我可以的地方，我可以开始为

82
00:02:31,840 --> 00:02:33,760
0,30 630,1080 1200,1530 1530,1770 1770,1920
I can start writing some

83
00:02:33,760 --> 00:02:35,320
0,270 270,720 900,1200 1200,1440 1440,1560
code for| and so you
|所以你知道，想想第一个测试案例，

84
00:02:35,320 --> 00:02:35,920
0,90 90,240 240,360 360,420 420,600
know think about the first

85
00:02:35,920 --> 00:02:37,480
0,210 210,600 600,720 720,840 840,1560
test case,| you know starting
|你知道，开始写作，

86
00:02:37,480 --> 00:02:38,860
0,480 510,780 780,840 840,930 930,1380
writing,| look at the hints
|查看提示并编写一些代码，

87
00:02:39,250 --> 00:02:41,020
0,510 510,690 690,810 810,1290
and write some code,|
|

88
00:02:41,110 --> 00:02:42,520
0,210 210,480 480,780 780,870 870,1410
and while writing the code,|
在编写代码时，|

89
00:02:42,760 --> 00:02:44,380
0,690 840,1020 1020,1200 1200,1440 1440,1620
{} yeah, I find it
是的，我觉得这很方便，

90
00:02:44,380 --> 00:02:45,940
0,90 90,300 300,1230 1290,1470 1470,1560
you know convenient,| {} in
|在这个实验室或实验室的集合中，

91
00:02:45,940 --> 00:02:48,310
0,180 180,660 660,1320 1320,1920 1920,2370
this lab to or {the,sets,of}

92
00:02:48,310 --> 00:02:49,330
0,210 210,480 480,630 630,900 900,1020
labs,| actually any lab in
|实际上，6.824中的任何实验室，

93
00:02:49,330 --> 00:02:51,040
0,240 240,390 390,480 480,990 1080,1710
the {6.824 - -},| to
|要记录所有消息，

94
00:02:51,040 --> 00:02:54,100
0,510 510,660 660,1410
log all messages,|
|

95
00:02:57,380 --> 00:02:58,850
0,450 450,540 540,690 690,1110 1110,1470
and you know typically use
通常在[]Go中使用DPrintf函数

96
00:02:58,850 --> 00:03:00,890
0,330 360,780 780,1050 1050,1350 1350,2040
a {DPrintf - -} function

97
00:03:00,890 --> 00:03:04,010
0,420 450,1320 1560,2280 2280,2520 2520,3120
in {[],Go}| and I'm {}
|我很有系统地记录消息。

98
00:03:04,010 --> 00:03:05,810
0,210 210,750 750,870 870,1200 1200,1800
pretty systematic of logging messages.|
|

99
00:03:06,440 --> 00:03:07,460
0,450 450,510 510,780 780,930 930,1020
And the reason that I
我这样做的原因不是为了调试目的，

100
00:03:07,460 --> 00:03:09,710
0,150 150,420 420,1020 1020,2100 2100,2250
do this {} isn't for

101
00:03:09,710 --> 00:03:12,290
0,360 360,1050 1140,1770 1770,2160 2160,2580
debugging purposes,| {} and so
|因此，我将编写代码，

102
00:03:12,290 --> 00:03:14,420
0,450 480,1080 1080,1560 1590,2070 2070,2130
I'll write code,| run the
|运行测试代码失败，

103
00:03:14,420 --> 00:03:16,340
0,240 240,480 480,1200 1200,1800 1800,1920
test code fails,| write some
|编写一些代码以实际尝试通过测试用例

104
00:03:16,340 --> 00:03:17,660
0,300 300,420 420,1020 1050,1230 1230,1320
code to actually try to

105
00:03:17,660 --> 00:03:20,000
0,330 330,390 390,630 630,1110 1620,2340
pass the test case| and
|你知道有两种情况，

106
00:03:20,030 --> 00:03:21,380
0,630 630,720 720,810 810,1140 1140,1350
{} you know there's two

107
00:03:21,380 --> 00:03:22,670
0,630 630,720 720,810 810,1200 1200,1290
scenarios,| you know one you
|你知道有一个你知道我通过了，

108
00:03:22,670 --> 00:03:23,980
0,150 150,300 300,930
know I pass,|
|

109
00:03:24,070 --> 00:03:25,390
0,210 210,510 510,690 690,1110 1110,1320
which then I immediately move
然后我立即转到下一个测试用例，

110
00:03:25,390 --> 00:03:26,590
0,150 150,240 240,330 330,840 840,1200
on to the next test

111
00:03:26,590 --> 00:03:29,080
0,510 780,1200 1200,1290 1290,1830 1860,2490
case,| or I fail, {}|
|或者我失败了，|

112
00:03:30,140 --> 00:03:33,020
0,660 810,1020 1020,1260 1260,1890 2280,2880
and in that case, {}|
在这种情况下，|

113
00:03:33,440 --> 00:03:34,490
0,210 210,420 420,600 600,720 720,1050
the first thing I do
我做的第一件事就是

114
00:03:34,490 --> 00:03:35,660
0,300 300,480 480,840 840,930 930,1170
is| to study the test
|更详细地研究测试用例

115
00:03:35,660 --> 00:03:36,290
0,180 180,210 210,360 360,480 480,630
case a little bit more

116
00:03:36,290 --> 00:03:37,730
0,60 60,690 840,1170 1170,1350 1350,1440
in detail| and try to
|并尝试找出测试用例实际要测试的内容

117
00:03:37,730 --> 00:03:39,470
0,330 330,660 660,1170 1170,1530 1530,1740
figure out what actually the

118
00:03:39,470 --> 00:03:40,700
0,270 270,480 480,570 570,900 900,1230
test case is trying to

119
00:03:40,970 --> 00:03:43,490
0,750 1560,1980 1980,2130 2130,2220 2220,2520
test| and you know the
|您知道测试用例的名称通常非常暗示特定场景是什么

120
00:03:43,490 --> 00:03:44,750
0,360 360,480 480,570 570,840 840,1260
name of the test cases

121
00:03:44,750 --> 00:03:46,550
0,300 300,540 540,1200 1230,1350 1350,1800
often very suggestive of what

122
00:03:46,550 --> 00:03:47,750
0,60 60,450 450,900 900,960 960,1200
the particular scenario| or what
|或者测试用例试图涵盖的场景集

123
00:03:47,750 --> 00:03:49,250
0,150 150,210 210,600 660,840 840,1500
sort of set of scenarios

124
00:03:49,250 --> 00:03:50,510
0,540 540,930 930,990 990,1200 1200,1260
a testcase is trying to

125
00:03:50,510 --> 00:03:52,760
0,510 1230,1590 1590,1980 1980,2010 2010,2250
cover| and then I tried
|然后我试着自己回答这个公式，

126
00:03:52,760 --> 00:03:53,750
0,90 90,300 300,360 360,840 840,990
to answer the formulate for

127
00:03:53,750 --> 00:03:56,240
0,780 780,900 900,1710 1710,1890 1890,2490
myself,| and hypothesis not why
|假设不是你为什么我的代码，为什么你不知道通过测试用例的测试，

128
00:03:56,240 --> 00:03:57,590
0,240 240,510 510,810 810,930 930,1350
you my code why not

129
00:03:57,590 --> 00:03:58,220
0,240
{you,know}

130
00:03:58,250 --> 00:03:59,780
0,390 390,930 930,1200 1200,1290 1290,1530
test that pass the test

131
00:03:59,780 --> 00:04:02,570
0,450 870,1380 2040,2250 2250,2430 2430,2790
case,| {} and so basically
|所以基本上这是一个反思和思考的时刻，

132
00:04:02,570 --> 00:04:03,110
0,150 150,240 240,390 390,450 450,540
this is sort of a

133
00:04:03,110 --> 00:04:05,030
0,300 300,690 690,1200 1200,1320 1320,1920
moment of reflection and thinking,|
|

134
00:04:05,330 --> 00:04:06,720
0,840

135
00:04:07,110 --> 00:04:09,840
0,1530
and,
而且，就像你所理解的那样

136
00:04:10,500 --> 00:04:11,400
0,300 300,450 450,630 630,840 840,900
to sort of like you

137
00:04:11,400 --> 00:04:13,260
0,480 480,690 690,1050 1410,1770 1770,1860
understand| what the constructing my
|我脑子里想的是什么场景，

138
00:04:13,260 --> 00:04:14,430
0,240 240,300 300,780 780,930 930,1170
head a scenario,| that there
|似乎符合测试案例，

139
00:04:14,430 --> 00:04:15,330
0,240 240,330 330,540 540,630 630,900
seems to fit the test

140
00:04:15,330 --> 00:04:16,290
0,330 330,390 390,510 510,690 690,960
case,| you know, think about
|你知道，想想我的代码，它实际上可能是一个问题

141
00:04:16,290 --> 00:04:18,060
0,150 150,660 660,990 990,1560 1560,1770
my code what actually {

142
00:04:18,480 --> 00:04:19,530
0,540 540,600 630,810 810,960 960,1050
-} it could be a

143
00:04:19,530 --> 00:04:20,580
0,390 390,540 540,720 720,810 810,1050
problem| and once I have
|一旦我有了一个假设，

144
00:04:20,580 --> 00:04:22,110
0,390 390,1080 1080,1290 1290,1350 1350,1530
a hypothesis,| then the next
|然后接下来要做的就是学习，

145
00:04:22,110 --> 00:04:22,800
0,150 150,240 240,360 360,540 540,690
thing to do is like

146
00:04:22,800 --> 00:04:24,450
0,450 450,600 600,1170 1200,1500 1500,1650
study,| {you,know} basically try to
|你知道，基本上是试着确认这个假设，

147
00:04:24,450 --> 00:04:27,810
0,720 810,1170 1170,1500 1500,2340 2880,3360
confirm {} the hypothesis, {}|
|

148
00:04:27,810 --> 00:04:29,640
0,570 720,960 960,1470 1470,1590 1590,1830
whether my explanation for why
不管我为什么通过测试，我的解释可能是对的，也可能是错的，

149
00:04:29,640 --> 00:04:30,690
0,150 150,510 510,600 600,840 840,1050
I'm passing the test case,

150
00:04:30,690 --> 00:04:32,250
0,150 150,540 540,990 990,1080 1080,1560
might be right or wrong,|
|

151
00:04:32,430 --> 00:04:33,180
0,150 150,270 270,390 390,510 510,750
and so to do that,|
因此，要做到这一点，|

152
00:04:33,180 --> 00:04:34,110
0,150 150,450 450,540 540,840 840,930
then basically I study the
然后基本上我研究一下日志，

153
00:04:34,110 --> 00:04:36,480
0,600
log,|
|

154
00:04:36,950 --> 00:04:37,850
0,300 300,450 450,570 570,690 690,900
so if I have a
所以如果我有你知道的指纹和所有信息的痕迹，

155
00:04:37,850 --> 00:04:39,410
0,540 540,630 630,1020 1020,1260 1260,1560
print you know and trace

156
00:04:39,410 --> 00:04:40,670
0,120 120,270 270,330 330,840 840,1260
of all the messages,| being
|被发送到协议的那部分，

157
00:04:40,670 --> 00:04:41,330
0,210 210,300 300,390 390,600 600,660
sent to the part of

158
00:04:41,330 --> 00:04:43,040
0,90 90,810 930,1380 1380,1560 1560,1710
the protocol,| {} I can
|我可以看到你知道的痕迹

159
00:04:43,040 --> 00:04:44,000
0,180 180,300 300,570 570,720 720,960
look at that you know

160
00:04:44,000 --> 00:04:46,130
0,510 540,990 990,1500 1800,1920 1920,2130
{} trace| and you know
|你知道，你知道哪里出了问题

161
00:04:46,130 --> 00:04:47,480
0,150 150,840 840,930 930,990 990,1350
to see you know where

162
00:04:47,480 --> 00:04:48,530
0,270 270,450 450,780 780,870 870,1050
things go wrong| and sort
|以及一种向后倒退的工作

163
00:04:48,530 --> 00:04:50,180
0,60 60,240 240,480 480,1140 1140,1650
of work where backwards| and
|你知道，在某种程度上，测试和完善我的假设，为什么我的代码可能是错误的，

164
00:04:50,390 --> 00:04:51,320
0,120 120,330 330,450 450,660 660,930
you know in that way,

165
00:04:51,320 --> 00:04:53,330
0,210 210,390 630,930 1050,1590 1590,2010
sort of {} test and

166
00:04:53,330 --> 00:04:55,640
0,780 780,1170 1170,1830 1830,2040 2040,2310
refine my hypothesis about why

167
00:04:55,640 --> 00:04:57,080
0,180 180,720 720,900 900,1020 1020,1440
my code might be wrong,|
|

168
00:04:58,580 --> 00:04:59,930
0,750 750,840 840,990 990,1140 1140,1350
sometimes you know that may
有时你知道这可能需要你知道回到过去

169
00:04:59,930 --> 00:05:01,730
0,810 840,1410 1410,1500 1500,1590 1590,1800
require {} you know going

170
00:05:01,730 --> 00:05:03,620
0,600 600,1050 1200,1620 1620,1800 1800,1890
back| and basically run the
|基本上运行测试用例测试以获得更详细的日志输出，

171
00:05:03,620 --> 00:05:04,760
0,240 240,420 420,750 750,810 810,1140
test case test to basically

172
00:05:04,760 --> 00:05:07,250
0,180 180,360 360,1110 1110,2010 2010,2490
get more detailed log output,|
|

173
00:05:07,250 --> 00:05:09,860
0,450 720,1350 1380,1890 1890,2610 2610,2610
although {} early on I
虽然在早期我倾向于非常系统化，

174
00:05:10,160 --> 00:05:11,390
0,330 330,390 390,480 480,690 690,1230
tend to be very systematic,|
|

175
00:05:11,390 --> 00:05:12,500
0,300 300,360 360,660 660,870 870,1110
and you don't really have
而且您不需要添加任何打印语句，

176
00:05:12,500 --> 00:05:13,940
0,90 90,300 300,780 780,990 990,1440
to add any print statements,|
|

177
00:05:13,940 --> 00:05:15,470
0,240 600,690 690,810 810,1170 1170,1530
but in some cases not
但在某些情况下不是必须的，

178
00:05:15,470 --> 00:05:16,560
0,750
necessary,|
|

179
00:05:16,840 --> 00:05:18,310
0,540 720,1140 1140,1230 1230,1350 1350,1470
{} then you know that
那么你知道这给了我更多的信息

180
00:05:18,310 --> 00:05:19,780
0,180 180,420 420,630 630,1170 1170,1470
gives me more information| {and,I,can,sort,of}
|我可以真正放大场景，你知道我的代码不能处理，

181
00:05:19,780 --> 00:05:22,360
0,360 360,780 780,1140 1260,2100 2130,2580
really zoom in on {}

182
00:05:22,360 --> 00:05:24,760
0,810 810,1350 1380,1530 1530,1620 1620,2400
scenario, that you know my

183
00:05:24,790 --> 00:05:26,770
0,360 360,660 660,1170 1620,1890 1890,1980
code doesn't handle,| once I
|一旦我有了一个假设，

184
00:05:26,770 --> 00:05:28,570
0,180 180,240 240,630 630,990 1020,1800
sort of have a hypothesis,|
|

185
00:05:28,570 --> 00:05:30,100
0,150 150,840 840,1050 1050,1200 1200,1530
I verified with the log,|
我在日志里查过了，|

186
00:05:30,100 --> 00:05:31,330
0,150 150,300 300,510 510,1020 1080,1230
that they are indeed the
他们确实是这个假设似乎是正确的，

187
00:05:31,330 --> 00:05:32,620
0,510 510,690 690,780 780,870 870,1290
hypothesis seems to be correct,|
|

188
00:05:32,620 --> 00:05:33,880
0,420 420,630 630,720 720,810 810,1260
and that is a source
这是我的代码中的一个源代码或错误，

189
00:05:33,880 --> 00:05:34,630
0,210 210,270 270,510 510,600 600,750
or a bug in my

190
00:05:34,630 --> 00:05:36,520
0,510 780,1320 1320,1470 1470,1620 1620,1890
code,| {I,can} just go fix
|我可以直接去修密码，

191
00:05:36,520 --> 00:05:38,800
0,90 90,630
the code,|
|

192
00:05:39,670 --> 00:05:41,110
0,360 360,750 750,1080 1080,1200 1200,1440
and then run the test
然后运行测试用例。

193
00:05:41,110 --> 00:05:42,380
0,420
case.|
|

194
00:05:42,630 --> 00:05:43,920
0,240 240,360 360,780 780,900 900,1290
And so this is a
所以这是一个简短的过程，

195
00:05:43,920 --> 00:05:46,200
0,210 210,870 960,1380 1380,1650 1650,2280
brief process,| run test case,
|运行测试用例，如果失败，则研究测试用例和研究日志以制定假设，

196
00:05:46,410 --> 00:05:48,870
0,660 660,930 930,1500 1680,2100 2100,2460
{} if fail, {} study

197
00:05:48,870 --> 00:05:50,430
0,210 210,480 480,570 570,900 900,1560
test case and study logs

198
00:05:50,430 --> 00:05:51,990
0,90 90,540 540,1410 1410,1500 1500,1560
to formulate hypothesis,| you know
|你知道，试图证实这一假设

199
00:05:51,990 --> 00:05:53,550
0,210 210,270 270,630 630,720 720,1560
trying to confirm that hypothesis|
|

200
00:05:53,730 --> 00:05:55,260
0,150 150,330 330,600 600,1230 1260,1530
and then move on fix
然后继续修复代码

201
00:05:55,260 --> 00:05:55,950
0,60 60,300 300,390 390,510 510,690
the code| and then move
|然后转到下一个

202
00:05:55,950 --> 00:05:57,690
0,240 240,330 330,540 540,780 1320,1740
onto the next one| and
|在这方面，这往往是合理的、系统的。

203
00:05:57,690 --> 00:05:58,530
0,120 120,240 240,300 300,480 480,840
that tend to be reasonable

204
00:05:58,530 --> 00:06:01,380
0,480 480,780 780,2370
systematic {in,this}. {}|
|

205
00:06:01,410 --> 00:06:02,280
0,120 120,240 240,390 390,540 540,870
And so {for,example -} often
例如，我经常会在某个文件中写下，一个文本文件，

206
00:06:02,280 --> 00:06:03,690
0,180 180,510 510,750 750,1350 1350,1410
I'll actually write down in

207
00:06:03,690 --> 00:06:05,070
0,480 480,630 630,1050 1050,1110 1110,1380
a some file, a text

208
00:06:05,070 --> 00:06:06,420
0,210 210,360 360,480 480,1080 1080,1350
file,| what my hypothesis is|
|我的假设是什么|

209
00:06:06,420 --> 00:06:07,020
0,120 120,270 270,330 330,540 540,600
and sort of trying to
并试图收集证据或反证据，

210
00:06:07,020 --> 00:06:09,480
0,330 330,930 1320,1590 1590,1980 1980,2460
collect evidence or counter evidence,|
|

211
00:06:09,480 --> 00:06:11,400
0,150 150,870 870,1410 1410,1740 1770,1920
you know to {} need
你知道要证明或反驳我的假设，

212
00:06:11,400 --> 00:06:12,270
0,90 90,330 330,390 390,780 780,870
to prove or disprove my

213
00:06:12,270 --> 00:06:13,560
0,510 510,600 600,900 900,1080 1080,1290
hypothesis,| I really have a
|我真的有很好的理由来修复代码，

214
00:06:13,560 --> 00:06:16,320
0,270 270,540 1200,1800 1800,2520 2550,2760
good reason to {} fix

215
00:06:16,320 --> 00:06:17,610
0,60 60,510 540,990 990,1230 1230,1290
the code,| I think you
|我认为你知道任何方法基本上都不是非常系统化的，

216
00:06:17,610 --> 00:06:18,900
0,120 120,360 360,810 810,930 930,1290
know any approach that basically

217
00:06:18,900 --> 00:06:20,430
0,120 120,300 300,510 510,1380 1380,1530
it's not very systematic,| for
|例如，你认为有些事情并不是百分之百正确的，

218
00:06:20,430 --> 00:06:21,750
0,540 540,750 750,960 960,1230 1230,1320
example you think something is

219
00:06:21,750 --> 00:06:22,620
0,180 180,360 360,420 420,600 600,870
not really a hundred percent

220
00:06:22,620 --> 00:06:24,180
0,510 510,600 600,840 840,1200 1230,1560
right,| you know maybe change
|你知道，也许可以改变这一点

221
00:06:24,180 --> 00:06:25,020
0,270 270,510 510,660 660,750 750,840
that| and see if you
|看看你是否通过了测试案例，

222
00:06:25,020 --> 00:06:26,550
0,240 240,300 300,510 510,1050 1200,1530
pass the test cases, {}|
|

223
00:06:26,550 --> 00:06:28,230
0,270 270,360 360,1170 1170,1440 1440,1680
tends to be not work
往往效果不是很好，

224
00:06:28,230 --> 00:06:29,370
0,150 150,540 540,840 840,990 990,1140
that well,| I think that
|我认为这需要很长时间，

225
00:06:29,370 --> 00:06:30,270
0,210 210,270 270,450 450,510 510,900
takes a lot of time,|
|

226
00:06:30,780 --> 00:06:32,400
0,660 840,1290 1290,1380 1380,1530 1530,1620
{} because you might be
因为你可能错了

227
00:06:32,400 --> 00:06:34,320
0,480 480,1170 1170,1470 1470,1830 1830,1920
wrong| or and worse you
|或者更糟糕的是，你可能是错的，实际上通过了测试案例，认为你是对的，

228
00:06:34,320 --> 00:06:35,220
0,180 180,240 240,570 570,690 690,900
might be wrong and actually

229
00:06:35,220 --> 00:06:36,000
0,270 270,330 330,570 570,780 780,780
pass the test case and

230
00:06:36,000 --> 00:06:37,800
0,330 330,450 450,780 1110,1740 1740,1800
think you're right,| but it
|但事实证明，基本上您只是将错误从一个角落转移到另一个角落

231
00:06:37,800 --> 00:06:39,240
0,210 210,420 420,780 780,1260 1260,1440
turned out like basically you're

232
00:06:39,240 --> 00:06:40,230
0,150 150,480 480,570 570,840 840,990
just shifting the bug from

233
00:06:40,230 --> 00:06:41,610
0,210 210,570 570,690 690,960 960,1380
one corner to another corner|
|

234
00:06:41,610 --> 00:06:42,330
0,120 120,240 240,360 360,600 600,720
and it will show up
它将在稍后再次出现。

235
00:06:42,330 --> 00:06:43,320
0,270 270,630
later again.|
|

236
00:06:44,010 --> 00:06:46,680
0,450 690,870 870,1110 1110,1740 1890,2670
{} {So,at,a} very high-level, {this,is}
所以在非常高的层面上，这是我采取的方法，

237
00:06:46,680 --> 00:06:49,110
0,990 1080,1830 1950,2130 2130,2340 2340,2430
the approach, {} that I

238
00:06:49,110 --> 00:06:51,720
0,600 840,1650 2010,2310 2310,2520 2520,2610
take,| {} and you can
|您可以看到这里的关键是记录消息。

239
00:06:51,720 --> 00:06:52,920
0,210 210,450 450,750 750,840 840,1200
see what the the key

240
00:06:52,920 --> 00:06:54,180
0,300 300,420 420,720 720,1170 1170,1260
here is really logging the

241
00:06:54,180 --> 00:06:55,280
0,690
messages.|
|

242
00:06:55,600 --> 00:06:56,880
0,600

243
00:06:57,530 --> 00:07:00,950
0,690 690,1440 1440,2040 2370,2940 2940,3420
Any questions or comments on
对这个，这个办法有什么疑问或者评论，

244
00:07:01,990 --> 00:07:03,910
0,510 510,750 750,1410 1530,1710 1710,1920
this, this approach,| {} I
|我知道这是一个非常高的水平，

245
00:07:03,910 --> 00:07:04,540
0,120 120,240 240,270 270,480 480,630
know it's a very high

246
00:07:04,540 --> 00:07:05,470
0,330 330,480 480,600 600,780 780,930
level,| but at least give
|但至少让你对我是如何处理这件事有所了解的。

247
00:07:05,470 --> 00:07:06,520
0,90 90,240 240,540 540,870 870,1050
you some sense about how

248
00:07:06,520 --> 00:07:07,860
0,90 90,510 510,870
I approach this.|
|

249
00:07:08,040 --> 00:07:09,090
0,180 180,360 360,450 450,810 810,1050
{} So the messages here
所以这里的消息是RPC。

250
00:07:09,090 --> 00:07:10,800
0,210 210,330 330,990 1320,1590 1590,1710
are the RPC.| Yes, all
|是的，所有的RPC。

251
00:07:10,800 --> 00:07:12,540
0,60 60,450 450,690 810,1140 1350,1740
the {RPCs -}.| Okay, okay.|
|好的，好的。|

252
00:07:15,790 --> 00:07:18,520
0,270 270,690 720,2010 2010,2340 2430,2730
Okay, so some, so.| {I,have,a}
好吧，所以有一些，所以。|我有一个简短的问题，

253
00:07:18,520 --> 00:07:21,730
0,240 240,720 2130,2610 2610,3000 3000,3210
quick question,| so what's a
|那么什么是好的方法呢？

254
00:07:21,730 --> 00:07:24,310
0,300 300,540 540,1200 1200,1890 1920,2580
good like approach| for deciding
|用于决定记录什么和不记录什么的粒度。

255
00:07:24,310 --> 00:07:25,480
0,120 120,360 360,810 810,930 930,1170
the {granularity -} of what

256
00:07:25,480 --> 00:07:26,440
0,90 90,480 480,570 570,720 720,960
to log and what not

257
00:07:26,440 --> 00:07:27,610
0,90 90,510 570,900 930,1140 1140,1170
to log.| Ah, that's a
|啊，这是一个非常好的，非常好的问题，

258
00:07:27,610 --> 00:07:29,590
0,240 240,450 870,1530 1530,1740 1740,1980
very good, exact great question,|
|

259
00:07:29,590 --> 00:07:30,250
0,30 30,120 120,360 360,450 450,660
I was hoping that someone
我希望有人问过我，

260
00:07:30,250 --> 00:07:31,960
0,90 90,450 750,1140 1260,1650 1650,1710
has asked,| I tend to
|我倾向于把事情做得很细腻，

261
00:07:31,960 --> 00:07:33,790
0,540 540,900 930,1590 1590,1830 1830,1830
be {} log things are

262
00:07:33,790 --> 00:07:35,890
0,480 480,750 750,1140 1140,1710 1710,2100
pretty {fine-grained -},| {[] -}
|[]记录所有内容，

263
00:07:35,890 --> 00:07:37,100
0,270 270,690
log everything,|
|

264
00:07:37,160 --> 00:07:40,460
0,840 870,1530 1560,2550 2580,3180 3180,3300
and, {} then, {} I
然后，我使用你知道的，无论我拉出什么，你知道，基本上是在编辑器中的日志

265
00:07:40,460 --> 00:07:41,960
0,450 450,570 570,630 630,1140 1140,1500
use you know whatever I

266
00:07:41,990 --> 00:07:43,880
0,420 420,720 810,1380 1380,1470 1470,1890
pulled {you,know} basically the {log,in}

267
00:07:43,880 --> 00:07:46,250
0,270 270,810 810,1140 1170,1590 1590,2370
an editor| or use Unix
|或者使用像grep这样的Unix实用程序从根本上拉出

268
00:07:46,250 --> 00:07:47,990
0,540 540,660 660,1140 1230,1380 1380,1740
utilities like grep to basically

269
00:07:47,990 --> 00:07:48,740
0,210 210,330 330,420 420,630 630,750
pull out the things| that
|那些真正感兴趣的人。

270
00:07:48,740 --> 00:07:49,760
0,30 30,300 300,540 540,870 870,1020
are actually really interested in.|
|

271
00:07:50,590 --> 00:07:51,850
0,600 600,870 870,930 930,1170 1170,1260
{} And the reason I'm
我这么做的原因是，

272
00:07:51,850 --> 00:07:53,260
0,210 210,480 480,630 630,1290 1290,1410
doing that is,| you know
|你知道吗，有时候我不知道我想要研究什么东西

273
00:07:53,260 --> 00:07:54,250
0,330 330,360 360,540 540,630 630,990
sometimes I don't know what

274
00:07:54,250 --> 00:07:56,140
0,270 270,1110 1110,1560 1560,1740 1740,1890
level granularity I want to

275
00:07:56,140 --> 00:07:58,810
0,330 330,780 1140,1800 1800,2010 2010,2670
study something| and {} I
|我想回去再做一次测试，

276
00:07:58,840 --> 00:07:59,530
0,210 210,270 270,360 360,600 600,690
want to go back and

277
00:07:59,530 --> 00:08:00,610
0,180 180,240 240,660 660,990 990,1080
run the test again,| I
|我只是收集所有的东西，

278
00:08:00,610 --> 00:08:02,290
0,330 360,690 690,1110 1110,1230 1230,1680
just collect everything,| and {then,you,know}
|然后你知道过滤掉我知道我关心的东西。

279
00:08:02,620 --> 00:08:03,670
0,390 390,600 600,840 840,990 990,1050
filter stuff out, that I

280
00:08:03,670 --> 00:08:04,810
0,240 240,510 510,570 570,780 780,1140
know that I care about.|
|

281
00:08:05,340 --> 00:08:06,600
0,270 270,540 540,750 750,990 990,1260
And this brings me on,|
这让我开始了，|

282
00:08:06,600 --> 00:08:09,030
0,390 420,780 1110,1680 1830,2100 2100,2430
{} so, {} some people
所以，有些人编写了相当多的调试基础设施，

283
00:08:09,030 --> 00:08:09,720
0,240 240,480 480,510 510,630 630,690
write quite a bit of

284
00:08:09,720 --> 00:08:13,680
0,780 810,2010 2010,3120 3150,3450 3450,3960
infrastructure {for,debugging -},| using {the,logs},
|使用日志，使更容易理解，

285
00:08:13,680 --> 00:08:15,480
0,270 270,330 330,600 600,1080 1260,1800
making a lot more easier

286
00:08:15,480 --> 00:08:18,630
0,480 480,1050 1410,2190 2220,2670 2670,3150
to {} understand,| {} I'm
|我很原始，你知道DPrintf和很多信息，

287
00:08:18,660 --> 00:08:20,130
0,270 270,780 810,960 960,1080 1080,1470
pretty primitive, you know {DPrintf

288
00:08:20,130 --> 00:08:22,020
0,480 480,810 810,1080 1080,1140 1140,1890
-} and lots of information,|
|

289
00:08:22,020 --> 00:08:24,420
0,660 660,1020 1380,1830 1860,2010 2010,2400
although the I I structure
尽管I以清晰的方式组织我的打印文件，

290
00:08:24,420 --> 00:08:25,950
0,150 150,540 540,660 660,1080 1080,1530
my printf in a clear

291
00:08:25,950 --> 00:08:27,180
0,390 390,600 600,780 780,1020 1020,1230
manner,| so I can see
|这样我就能看到来源是什么，

292
00:08:27,180 --> 00:08:28,260
0,90 90,150 150,780 840,1020 1020,1080
what the source,| but the
|但目的地是

293
00:08:28,260 --> 00:08:30,750
0,600 600,1050 1410,1620 1620,1830 1830,2490
destination is| and what the
|以及RPC本身是什么

294
00:08:30,780 --> 00:08:32,790
0,300 300,780 780,1230 1230,1620 1770,2010
the RPC itself is| and
|因此，我可以非常快速地计算出抓取的滤镜，

295
00:08:32,790 --> 00:08:33,450
0,120 120,180 180,300 300,570 570,660
so I can sort of

296
00:08:33,690 --> 00:08:37,500
0,1530 1560,2670 2670,2970 2970,3210 3210,3810
figure grabbed filter very quickly,|
|

297
00:08:37,590 --> 00:08:39,360
0,450 450,930 930,1200 1200,1470 1470,1770
{} because all the text
因为所有文本行都有特定的格式。

298
00:08:39,360 --> 00:08:41,010
0,240 240,540 540,810 810,1140 1140,1650
lines have a particular format.|
|

299
00:08:42,630 --> 00:08:43,980
0,390 390,810 810,1020 1020,1320 1320,1350
Some people spend quite a
一些人花了相当多的时间建设一些基础设施，以使一切变得更容易，

300
00:08:43,980 --> 00:08:45,330
0,120 120,180 180,840 840,1200 1200,1350
bit of time building some

301
00:08:45,330 --> 00:08:47,730
0,600 600,1830 1860,2070 2070,2160 2160,2400
infrastructure to make it all

302
00:08:47,730 --> 00:08:49,200
0,660 870,1080 1080,1200 1200,1380 1380,1470
easier,| take over one of
|接手塔斯何塞的其中一个，

303
00:08:49,200 --> 00:08:51,540
0,90 90,990 1020,1680 1950,2250 2250,2340
the TAs Jose,| when he
|当他去上课的时候，

304
00:08:51,540 --> 00:08:52,890
0,180 180,240 240,840 870,1140 1140,1350
took the class,| {} he
|他实际上构建了一些软件，使其有点像Python脚本

305
00:08:52,890 --> 00:08:54,240
0,270 270,480 480,810 810,1200 1200,1350
actually built some software to

306
00:08:54,240 --> 00:08:55,320
0,210 210,300 300,690 690,930 930,1080
make it a little bit

307
00:08:55,320 --> 00:08:56,940
0,90 90,780 780,1110 1110,1560 1560,1620
of {} Python script| to
|使实际解析日志变得更容易

308
00:08:56,940 --> 00:08:57,870
0,120 120,210 210,570 570,720 720,930
make it easier to actually

309
00:08:57,870 --> 00:08:59,280
0,270 270,360 360,750 750,1050 1170,1410
parse the logs| and I
|我想看看他的所作所为会很有趣，

310
00:08:59,280 --> 00:09:00,120
0,150 150,210 210,360 360,480 480,840
thought it might be interesting

311
00:09:00,120 --> 00:09:01,680
0,150 150,810 810,1050 1050,1200 1200,1560
to see what he did,|
|

312
00:09:02,070 --> 00:09:03,900
0,390 390,750 810,1170 1170,1680 1680,1830
I'm gonna stop sharing| and
我要停止分享|然后请何塞分享，也许还有演示

313
00:09:03,900 --> 00:09:06,120
0,450 450,1020 1020,1440 1440,1620 1620,2220
then ask Jose to share

314
00:09:06,120 --> 00:09:07,560
0,240 240,540 540,1050 1050,1260 1260,1440
and maybe demo| like how
|比如他的原木结构是怎么工作的。

315
00:09:07,560 --> 00:09:10,710
0,420 450,1320 1560,2280 2400,2790 2790,3150
his log {} structure works.|
|

316
00:09:11,430 --> 00:09:12,780
0,450 450,780 780,870 870,990 990,1350
Sorry, I have a follow-up
对不起，我有一个跟进的问题。

317
00:09:12,780 --> 00:09:14,080
0,660
question.|
|

318
00:09:14,200 --> 00:09:15,550
0,270 270,480 480,570 570,900 900,1350
So how do you make
那么，如何将调试印记写入日志而不是标准输出。

319
00:09:15,580 --> 00:09:17,770
0,480 510,1200 1200,1650 1650,2070 2070,2190
the debugging prints going to

320
00:09:17,770 --> 00:09:19,030
0,90 90,570 570,810 810,1170 1170,1260
a log rather than the

321
00:09:19,030 --> 00:09:21,550
0,480 480,1020 1260,1530 1530,2220 2220,2520
standard out.| Oh, usually []
|哦，通常是[]而不是输出到一个文件，所以。

322
00:09:21,550 --> 00:09:23,080
0,210 210,420 420,570 570,1140 1140,1530
than to and {} output

323
00:09:23,080 --> 00:09:25,160
0,240 240,1050 1080,1590
to a file,

324
00:09:25,900 --> 00:09:27,400
0,570 600,810 810,990 990,1260 1260,1500
so.| So you just pipe
|因此，您只需将所有内容通过管道传输到一个文件中。

325
00:09:27,400 --> 00:09:29,170
0,420 420,630 630,750 750,1260 1290,1770
everything into a file.| Yes,
|是的，我把它通过管道传输到一个文件中。

326
00:09:29,170 --> 00:09:29,920
0,210 210,510 510,600 600,690 690,750
I pipe it to a

327
00:09:29,920 --> 00:09:30,820
0,360
file.|
|

328
00:09:30,910 --> 00:09:32,400
0,240 240,420 420,630 630,900
Got it, thank you.|
知道了，谢谢。|

329
00:09:35,240 --> 00:09:36,050
0,180 180,240 240,390 390,540 540,810
So I guess this {Johe's
所以我猜这是乔伊的银幕，何塞继续。

330
00:09:36,050 --> 00:09:37,550
0,120 120,630 630,840 840,1140 1140,1500
-} screen and Jose go

331
00:09:37,550 --> 00:09:38,500
0,360
ahead.|
|

332
00:09:38,500 --> 00:09:39,760
0,150 150,630 660,840 840,900 900,1260
You can hear me again.|
你又能听到我说话了。|

333
00:09:40,210 --> 00:09:41,680
0,150 150,240 240,360 360,750 1050,1470
Yeah, I can {hear,you}.| Okay
是的，我能听到你说话。|好吧，太棒了，

334
00:09:41,680 --> 00:09:44,050
0,360 690,1200 1650,2040 2040,2250 2250,2370
awesome,| and as I kind
|正如我在一系列观点上达成的一致，

335
00:09:44,050 --> 00:09:45,700
0,180 180,600 600,660 660,1350 1380,1650
of agree on a bunch

336
00:09:45,700 --> 00:09:47,650
0,90 90,540 540,870 870,1200 1470,1950
of points,| I mean things
|我指的是与弗兰斯描述的非常相似的事情，

337
00:09:47,650 --> 00:09:48,790
0,210 210,540 540,690 690,930 930,1140
very similar to like how

338
00:09:48,790 --> 00:09:50,290
0,360 360,450 450,960 960,1230 1260,1500
Frans was describing,| {} pretty
|很有攻击性的伐木者，我试着去尝试，

339
00:09:50,290 --> 00:09:52,180
0,510 510,900 900,1080 1110,1470 1470,1890
aggressive loggers I try to

340
00:09:52,540 --> 00:09:54,280
0,270 270,360 360,840 870,1530 1530,1740
kind of,| yes log every
|是，记录正在进行的每个事件

341
00:09:54,280 --> 00:09:56,140
0,390 420,960 960,1290 1290,1530 1530,1860
single event that is going

342
00:09:56,140 --> 00:09:58,270
0,330 330,750 750,1320 1350,1740 1770,2130
on| and again I also
|再一次，我也有一个我遵循的格式

343
00:09:58,270 --> 00:10:00,400
0,240 240,1080 1080,1830 1830,1980 1980,2130
have a format that I

344
00:10:00,400 --> 00:10:02,620
0,510 900,1620 1620,1770 1770,1950 1950,2220
follow| and then I'm gonna
|然后我要展示的是

345
00:10:02,620 --> 00:10:03,820
0,300 300,480 480,720 720,810 810,1200
show is kind of how

346
00:10:03,820 --> 00:10:05,500
0,570 570,900 900,1230 1230,1350 1350,1680
went about| making my life
|让我的生活更轻松地穿行在原木上。

347
00:10:05,530 --> 00:10:07,480
0,570 570,1020 1020,1290 1290,1770 1770,1950
easier going and passing through

348
00:10:07,480 --> 00:10:08,480
0,90 90,570
the logs.|
|

349
00:10:08,480 --> 00:10:10,760
0,480 480,1170 1170,1620 1620,1890 1890,2280
The high-level idea is I
最高层次的想法是我在围棋中做非常简单的结构，

350
00:10:10,790 --> 00:10:13,010
0,450 480,810 810,1410 1410,1920 1920,2220
do very simple structure in

351
00:10:13,010 --> 00:10:14,870
0,480 750,990 990,1350 1350,1470 1470,1860
Go,| and then I usually
|然后我通常会把这些标准文件转储到一个文件中，

352
00:10:14,870 --> 00:10:16,700
0,360 360,660 690,1080 1080,1350 1350,1830
dump that the standard out

353
00:10:16,700 --> 00:10:17,630
0,120 120,240 240,390 390,810 810,930
out to a file,| and
|然后我使用Python脚本实际执行以下操作，

354
00:10:17,630 --> 00:10:18,980
0,120 120,210 210,450 450,870 870,1350
then I use Python scripts

355
00:10:18,980 --> 00:10:20,420
0,120 120,480 480,690 690,1050 1290,1440
to actually do the,| kind
|有点像所有的颜色和结构，

356
00:10:20,420 --> 00:10:21,560
0,120 120,330 330,450 450,630 630,1140
of like all the coloring

357
00:10:21,560 --> 00:10:24,440
0,330 330,1170 1410,1740 1740,2190 2220,2880
and structuring,| since that's much
|因为这在Python中要比在Go中容易得多。

358
00:10:24,470 --> 00:10:26,000
0,450 450,570 570,780 780,1020 1020,1530
easier to do in Python

359
00:10:26,000 --> 00:10:27,360
0,270 270,480 480,600 600,870
than that in Go.|
|

360
00:10:28,020 --> 00:10:30,420
0,1050 1110,1740 1740,1980 1980,2070 2070,2400
And so here's for example
举个例子，当我在围棋测试中退出时，

361
00:10:30,420 --> 00:10:31,470
0,180 180,300 300,660 660,810 810,1050
when I get out of

362
00:10:31,500 --> 00:10:33,090
0,480 480,660 660,1140 1140,1440 1440,1590
whenever a {test,in} Go,| so
|因此，当我启用详细时，

363
00:10:33,090 --> 00:10:34,980
0,180 180,450 450,960 960,1170 1170,1890
when I enable the VERBOSE,|
|

364
00:10:35,280 --> 00:10:36,630
0,150 150,510 510,840 840,1170 1200,1350
I just get like an
我只是得到一个输出，看起来像这样，

365
00:10:36,630 --> 00:10:37,950
0,390 390,630 630,870 870,1170 1170,1320
output that looks something like

366
00:10:37,950 --> 00:10:40,020
0,570 750,1110 1110,1650 1650,1830 1830,2070
this,| and here what I'm
|我在这里记录的是，

367
00:10:40,050 --> 00:10:41,520
0,480 480,960 990,1170 1170,1260 1260,1470
logging is,| kind of like
|就像第一列的毫秒数

368
00:10:41,520 --> 00:10:43,200
0,90 90,330 330,480 480,1410 1410,1680
the number of milliseconds is

369
00:10:43,200 --> 00:10:44,640
0,150 150,480 480,960 990,1080 1080,1440
the first column| and that's
|当您尝试调试计时器事件时，这非常有用，

370
00:10:44,640 --> 00:10:45,990
0,360 360,690 690,840 840,1050 1050,1350
pretty useful when you're trying

371
00:10:45,990 --> 00:10:47,860
0,90 90,210 210,780 780,1500
to {debug,timer -} events,|
|

372
00:10:47,860 --> 00:10:49,120
0,270 270,420 420,720 720,930 990,1260
things like that are trying
诸如此类的事情正在试图了解RPC需要多长时间才能失败，

373
00:10:49,120 --> 00:10:50,410
0,180 180,360 360,660 660,1080 1080,1290
to see how long an

374
00:10:50,410 --> 00:10:52,210
0,390 390,630 630,720 720,1230 1320,1800
RPC takes to fail,| then
|第二栏就是我想说的话题，

375
00:10:52,210 --> 00:10:53,800
0,90 90,450 450,960 960,1350 1350,1590
the second column is what

376
00:10:53,800 --> 00:10:54,910
0,210 240,480 480,750 750,810 810,1110
I would like to call

377
00:10:54,910 --> 00:10:57,370
0,720 990,1290 1290,1530 1530,2040 2040,2460
topics,| they're not levels, because
|它们不是层次，因为它们是，你知道，在

378
00:10:57,370 --> 00:10:58,540
0,180 180,360 360,720 720,960 960,1170
they are {you,know} there's no

379
00:10:58,540 --> 00:11:00,070
0,570 570,930 930,1080 1080,1230 1230,1530
hierarchy between| and they're just
|它们只是与木筏上的不同项目有关，

380
00:11:00,070 --> 00:11:01,930
0,420 420,510 510,960 990,1560 1560,1860
related to {different,events,in,raft - -},|
|

381
00:11:01,990 --> 00:11:02,860
0,270 270,360 360,540 540,690 690,870
probably a lot of you
可能你们中的许多人现在已经意识到在实验3中，

382
00:11:02,860 --> 00:11:04,900
0,210 210,600 600,930 960,1890 1890,2040
right now have realized that

383
00:11:04,900 --> 00:11:05,860
0,120 120,360 360,570 570,660 660,960
in lab 3,| a lot
|很多事情都在发生，

384
00:11:05,860 --> 00:11:07,510
0,120 120,510 510,780 780,1050 1290,1650
of things going on,| like
|就像定时器，有选举，有日志，应用与状态机通信的东西，

385
00:11:07,510 --> 00:11:09,670
0,600 600,780 780,1680 1680,1950 1950,2160
timers, there's elections, there's like

386
00:11:09,670 --> 00:11:12,160
0,600 600,960 960,1170 1170,1860 1860,2490
log, things being applied communication

387
00:11:12,160 --> 00:11:13,700
0,180 180,240 240,570 570,1200
with a state machine,|
|

388
00:11:13,700 --> 00:11:14,750
0,150 150,300 300,390 390,630 630,1050
and all of those events
所有这些事件发生的频率都略有不同，

389
00:11:14,750 --> 00:11:16,850
0,330 330,600 600,1020 1020,1440 1440,2100
happen with slightly different frequencies,|
|

390
00:11:17,030 --> 00:11:18,200
0,330 330,570 570,780 780,1050 1050,1170
so if you want to
所以如果你想以后，比如选择其中的一些

391
00:11:18,200 --> 00:11:20,390
0,750 810,1200 1200,1800 1800,2040 2040,2190
later, like select some of

392
00:11:20,390 --> 00:11:21,980
0,540 540,660 660,930 930,1500 1500,1590
them| or like decide to
|或者像是决定忽略更多的那些，

393
00:11:21,980 --> 00:11:24,260
0,690 690,960 960,1470 1500,1830 1830,2280
ignore the more most ones,|
|

394
00:11:24,410 --> 00:11:25,730
0,360 360,570 570,990 990,1080 1080,1320
it's really handy to just
就像这样，这样的类别真的很方便，

395
00:11:25,730 --> 00:11:28,070
0,240 240,510 630,1260 1260,1680 2160,2340
have like that, {} that

396
00:11:28,070 --> 00:11:29,060
0,150 150,480 510,690 690,870 870,990
{category -},| and then the
|然后第三列可能你们中的许多人有一些东西，

397
00:11:29,060 --> 00:11:30,320
0,300 300,690 690,960 960,1050 1050,1260
third column probably a lot

398
00:11:30,320 --> 00:11:31,730
0,120 120,270 270,600 780,1230 1230,1410
of you have something,| like
|就像这是哪个服务器在说这条消息，

399
00:11:31,730 --> 00:11:34,010
0,210 210,600 720,1110 1110,1980 2070,2280
this is which server who

400
00:11:34,010 --> 00:11:35,480
0,150 150,540 540,720 720,1170 1170,1470
is saying this message,| because
|因为我们认为这很难对正在发生的事情进行推理，

401
00:11:35,480 --> 00:11:36,440
0,150 150,360 360,540 540,690 690,960
we thought that is pretty

402
00:11:36,440 --> 00:11:37,460
0,330 330,420 420,630 630,810 810,1020
hard to reason about what

403
00:11:37,460 --> 00:11:38,500
0,180 180,450 450,660
is going on,|
|

404
00:11:38,880 --> 00:11:40,020
0,270 270,360 360,780 780,870 870,1140
and the rest is just
剩下的只是一条自由形式的信息，

405
00:11:40,020 --> 00:11:42,270
0,420 420,900 900,1350 1350,1530 1530,2250
a {free,form} message,| that explains
|这解释了这条信息是关于什么的

406
00:11:42,270 --> 00:11:43,290
0,150 150,240 240,390 390,840 840,1020
kind of like what this

407
00:11:43,290 --> 00:11:45,390
0,450 450,510 510,870 1080,1830 1830,2100
message is about| and even
|尽管这只是你运行的最初始的测试，

408
00:11:45,390 --> 00:11:46,140
0,150 150,360 360,480 480,630 630,750
though this is kind of

409
00:11:46,140 --> 00:11:49,830
0,390 390,660 690,1320 1320,2160 2430,3690
just the very initial {test,that,you}

410
00:11:49,830 --> 00:11:51,360
0,450 450,510 510,750 750,930 1020,1530
run,| the one that just
|刚刚通过的，你可以进行选举的那个，

411
00:11:51,510 --> 00:11:52,410
0,300 300,420 420,570 570,690 690,900
passed, that you can do

412
00:11:52,410 --> 00:11:54,390
0,90 90,690 930,1290 1290,1560 1560,1980
an election,| you have {to,like}
|你必须喜欢阅读，遵循这里的逻辑。

413
00:11:54,390 --> 00:11:55,520
0,660
read,

414
00:11:55,520 --> 00:11:56,990
0,420 420,690 690,840 840,1320 1320,1470
follow what the logic is

415
00:11:56,990 --> 00:11:58,550
0,270 270,450 450,750 1200,1410 1410,1560
going on here.| So the
|所以我让这件事变得更容易，就像第一种方法

416
00:11:58,550 --> 00:12:00,890
0,300 300,450 450,840 840,1320 1350,2340
way I made this easier

417
00:12:00,920 --> 00:12:02,600
0,180 180,270 270,510 510,930 960,1680
kind of like first approach|
|

418
00:12:02,600 --> 00:12:03,320
0,210 210,330 330,480 480,690 690,720
and this is what I
这就是我在上课时所做的，

419
00:12:03,320 --> 00:12:04,490
0,150 150,300 300,600 840,1080 1080,1170
did when I took the

420
00:12:04,490 --> 00:12:05,920
0,390 390,540 540,900
class,| was just
|只是把所有的主题都转换成颜色，

421
00:12:06,100 --> 00:12:08,080
0,780 810,1020 1020,1170 1170,1710 1710,1980
convert all the topics into

422
00:12:08,080 --> 00:12:10,090
0,420 420,600 600,1230 1230,1470 1470,2010
colors,| like most more internal
|像大多数More内部支持一样，广泛的颜色支持

423
00:12:10,090 --> 00:12:12,940
0,660 690,1590 1590,1950 1950,2160 2460,2850
support wide array of color

424
00:12:12,940 --> 00:12:15,460
0,480 480,1170 1440,2070 2070,2250 2250,2520
support| and again by doing
|同样，通过使用Python语言执行此操作，

425
00:12:15,460 --> 00:12:16,780
0,270 270,480 480,1020 1020,1110 1110,1320
this in Python,| you can
|你可以使用一些出色的库来完成所有繁重的任务，

426
00:12:16,780 --> 00:12:19,330
0,270 270,540 540,1140 1140,1800 1950,2550
use some fantastic libraries that

427
00:12:19,390 --> 00:12:20,620
0,300 300,480 480,570 570,870 870,1230
do all the heavy lifting,|
|

428
00:12:20,620 --> 00:12:21,370
0,120 120,210 210,330 330,570 570,750
so you don't have to
因此，你不必参与到这件事中来。

429
00:12:21,490 --> 00:12:23,080
0,420 420,600 600,1110 1320,1500 1500,1590
get in the in the

430
00:12:23,080 --> 00:12:24,900
0,390 390,630 660,1020 1020,1440
[] of doing this.|
|

431
00:12:24,900 --> 00:12:26,670
0,510 510,900 900,1170 1170,1380 1380,1770
And here yes have included
在这里，是的，包括了不同颜色的不同活动

432
00:12:26,670 --> 00:12:28,380
0,360 360,690 690,810 810,1140 1140,1710
different events with different colors|
|

433
00:12:28,590 --> 00:12:30,330
0,780 780,1020 1020,1230 1230,1500 1500,1740
and as you get more
随着你对颜色越来越熟悉，

434
00:12:30,330 --> 00:12:31,500
0,480 480,570 570,660 660,1050 1050,1170
familiar with the colors,| for
|例如，这里所有定时器事件都是灰色的，

435
00:12:31,500 --> 00:12:33,120
0,390 390,900 900,1020 1020,1140 1140,1620
example here all the timers

436
00:12:33,120 --> 00:12:34,470
0,420 420,570 570,690 690,1140 1140,1350
events are in gray,| so
|所以也许他们更容易被忽视

437
00:12:34,530 --> 00:12:36,150
0,300 300,570 600,990 990,1080 1080,1620
maybe they're easier to ignore|
|

438
00:12:36,240 --> 00:12:37,950
0,240 240,450 450,930 930,1200 1200,1710
or we're looking for when
或者我们正在寻找当有人投票的时候，

439
00:12:37,950 --> 00:12:39,840
0,660 660,840 840,1440 1440,1650 1650,1890
someone is voting,| we can
|我们可以看一下与投票有关的[]，

440
00:12:39,840 --> 00:12:41,250
0,180 180,300 300,510 510,1020 1020,1410
look at like [], which

441
00:12:41,280 --> 00:12:42,760
0,390 390,480 480,1020
relate to vote,|
|

442
00:12:42,790 --> 00:12:44,920
0,240 240,600 810,1140 1140,1710 1710,2130
and that like we'll just
就像我们只需在视觉上编码一样，事情更容易掌握，

443
00:12:44,950 --> 00:12:47,560
0,630 630,1170 1170,1500 1500,1920 1950,2610
encode visually things are much

444
00:12:47,560 --> 00:12:49,090
0,300 300,390 390,630 630,1080 1380,1530
easier to pick up,| for
|例如，这里的黄色是我们选举，选举新领导人的时候。

445
00:12:49,090 --> 00:12:50,620
0,360 360,750 750,1110 1110,1230 1230,1530
example here yellow is when

446
00:12:50,620 --> 00:12:52,030
0,180 180,600 750,1140 1140,1170 1170,1410
we elect, elect a new

447
00:12:52,030 --> 00:12:54,010
0,390 1110,1350 1350,1590 1590,1860 1860,1980
leader.| We still have to
|我们还得决定谁在说什么，

448
00:12:54,010 --> 00:12:55,870
0,630 750,1050 1050,1170 1170,1440 1440,1860
decide who is saying what,|
|

449
00:12:55,900 --> 00:12:56,960
0,600
and
为了做到这一点，

450
00:12:57,050 --> 00:12:58,340
0,210 210,600 600,720 720,900 900,1290
in order to do that,|
|

451
00:12:58,340 --> 00:13:00,980
0,360 360,960 1470,2190 2190,2400 2400,2640
what I incorporated just having
我只是加入了不同的专栏，

452
00:13:00,980 --> 00:13:03,170
0,360 360,1020 1350,1590 1590,1890 1890,2190
different columns,| and again what
|再说一次，我现在所做的就是在这里跑步，

453
00:13:03,170 --> 00:13:05,210
0,240 240,540 540,690 690,1020 1050,2040
I'm doing is just running

454
00:13:05,240 --> 00:13:06,260
0,330 330,510 510,660 660,810 810,1020
here,| what I'm doing just
|我所做的只是运行标准测试脚本

455
00:13:06,290 --> 00:13:08,810
0,480 480,660 660,1380 1410,2100 2100,2520
running the standard test script|
|

456
00:13:08,810 --> 00:13:10,280
0,90 90,210 210,510 510,1080 1080,1470
and then just piping that
然后把它放进我写的剧本里，

457
00:13:10,280 --> 00:13:12,290
0,300 300,630 630,1080 1290,1530 1530,2010
into like the the script

458
00:13:12,290 --> 00:13:13,260
0,90 90,510
I wrote,|
|

459
00:13:13,290 --> 00:13:14,760
0,150 150,360 360,660 660,810 810,1470
in this case, I'm specifying
在本例中，我指定我有三列，

460
00:13:14,760 --> 00:13:15,990
0,150 150,210 210,510 510,810 810,1230
that I have three columns,|
|

461
00:13:15,990 --> 00:13:17,250
0,240 240,330 330,540 540,780 780,1260
because of like three peers
因为在这个测试用例中有三个同行

462
00:13:17,250 --> 00:13:18,870
0,120 120,300 300,570 570,1020 1140,1620
in this test case| and
|我现在决定忽略计时器，

463
00:13:18,870 --> 00:13:20,130
0,150 150,360 360,660 660,1200 1200,1260
I have now decided to

464
00:13:20,130 --> 00:13:22,320
0,480 480,720 840,1830 1830,2040 2040,2190
ignore the timer,| like the
|就像计时器[主题]的事件一样，

465
00:13:22,320 --> 00:13:23,970
0,660 660,840 840,960 960,1320 1320,1650
events with the timer [topic],|
|

466
00:13:23,970 --> 00:13:25,260
0,300 300,420 420,690 810,1020 1020,1290
because there are too many
因为他们太多了

467
00:13:25,260 --> 00:13:26,640
0,120 120,540 630,840 840,990 990,1380
of them| and if timing
|并且如果定时逻辑正在工作，

468
00:13:26,640 --> 00:13:27,930
0,360 360,450 450,780 780,930 930,1290
logic is working,| we probably
|我们可能不需要它们来调试正在发生的事情

469
00:13:27,960 --> 00:13:29,070
0,270 270,570 570,870 870,990 990,1110
don't need them to the

470
00:13:29,070 --> 00:13:31,200
0,180 180,450 450,720 720,840 1500,2130
debug what's going on| and
|如果你看一下这个日志

471
00:13:31,230 --> 00:13:32,460
0,180 180,330 330,630 630,930 930,1230
if you look at this

472
00:13:32,460 --> 00:13:33,810
0,240 240,690 690,750 750,1080 1080,1350
log| compared to what we
|与我们的明文日志相比

473
00:13:33,900 --> 00:13:35,880
0,240 240,840 840,1260 1380,1530 1530,1980
the plaintext log| is fairly
|这是很容易看到的，发生了什么，

474
00:13:35,910 --> 00:13:37,530
0,810 810,930 930,1230 1230,1380 1380,1620
easy to see, that what's

475
00:13:37,530 --> 00:13:38,700
0,240 240,420 420,540 540,810 810,1170
going on,| it's like three
|好像有三台服务器在启动，

476
00:13:38,700 --> 00:13:40,470
0,450 450,600 600,1290 1320,1500 1500,1770
servers are starting,| the last
|最后一个人正在成为候选人，

477
00:13:40,470 --> 00:13:41,910
0,240 240,360 360,750 750,840 840,1440
one is becoming a candidate,|
|

478
00:13:41,970 --> 00:13:43,260
0,360 360,600 600,750 750,1110 1110,1290
{the,other} two are voting for
另外两位投了赞成票，

479
00:13:43,260 --> 00:13:43,940
0,360
that,|
|

480
00:13:44,000 --> 00:13:45,530
0,240 240,690 690,780 780,1350 1350,1530
it's becoming a leader as
一旦获得第一票，它就会成为领导者

481
00:13:45,530 --> 00:13:46,370
0,210 210,360 360,450 450,720 720,840
soon as it gets the

482
00:13:46,370 --> 00:13:47,270
0,270 270,600 600,690 690,810 810,900
first vote| and then it
|然后它就会在剩下的测试中跳动，

483
00:13:47,270 --> 00:13:49,430
0,240 240,1050 1200,1620 1620,1770 1770,2160
just heartbeats through the rest

484
00:13:49,430 --> 00:13:50,600
0,150 150,240 240,720
of the test,|
|

485
00:13:50,660 --> 00:13:52,130
0,180 180,480 510,990 990,1260 1260,1470
and there's nothing else to
没有其他东西可以看了。

486
00:13:52,130 --> 00:13:53,420
0,390 390,540 540,690
look at it.|
|

487
00:13:53,450 --> 00:13:55,460
0,270 270,570 570,1200 1200,1620 1620,2010
But now again compared to
但现在再一次和这个相比，

488
00:13:55,640 --> 00:13:56,980
0,870
this,|
|

489
00:13:56,980 --> 00:13:57,700
0,210 210,360 360,450 450,600 600,720
it's kind of like an
这就像是更容易发现正在发生的事情的数量级

490
00:13:57,700 --> 00:13:59,230
0,210 210,360 360,720 720,1320 1320,1530
order of magnitude {easier,to} pick

491
00:13:59,230 --> 00:14:00,340
0,180 180,450 450,600 600,930 930,1110
up what is going on|
|

492
00:14:00,820 --> 00:14:02,110
0,300 300,480 480,600 600,1020 1020,1290
and as you tweak that
当你根据自己的喜好调整它的时候，

493
00:14:02,110 --> 00:14:03,340
0,60 60,210 210,690 690,810 810,1230
to your liking,| it becomes
|它变得越来越高效。

494
00:14:03,340 --> 00:14:04,840
0,330 330,420 420,600 600,1020
more and more efficient.|
|

495
00:14:05,160 --> 00:14:06,630
0,660 660,870 870,990 990,1350 1350,1470
And as you move to
当你转向更难的测试时，

496
00:14:06,630 --> 00:14:08,550
0,210 210,750 750,1290 1350,1620 1620,1920
like harder test,| because a
|因为你们中的许多人可能已经看过2B实验室的备份测试日志，

497
00:14:08,550 --> 00:14:09,420
0,180 180,270 270,420 420,600 600,870
lot of you have probably

498
00:14:09,420 --> 00:14:10,680
0,330 480,810 810,900 900,1170 1170,1260
have had to look at

499
00:14:10,680 --> 00:14:12,240
0,90 90,480 480,630 630,870 870,1560
the logs of the backup

500
00:14:12,450 --> 00:14:14,040
0,450 450,810 810,1050 1050,1320 1320,1590
{test -} in the {2B

501
00:14:14,040 --> 00:14:15,720
0,210 210,780 810,1290 1290,1500 1500,1680
-} lab,| there will be
|将会有很多很多的活动在进行

502
00:14:15,720 --> 00:14:17,460
0,660 660,750 750,1020 1020,1140 1140,1740
lots and lots of events

503
00:14:17,460 --> 00:14:19,620
0,330 330,600 600,750 750,1320 1710,2160
going on| and even if
|即使你知道你需要什么，

504
00:14:19,620 --> 00:14:20,760
0,150 150,360 360,630 630,780 780,1140
you know what you need,|
|

505
00:14:20,760 --> 00:14:22,170
0,180 180,480 480,960 960,1200 1230,1410
it might become like a
这可能会成为一项艰巨的任务，

506
00:14:22,170 --> 00:14:23,600
0,420 420,1080
daunting task,|
|

507
00:14:23,600 --> 00:14:25,670
0,330 330,480 480,990 1290,1980 1980,2070
going through like thousands of
穿过成千上万行的原木，

508
00:14:25,670 --> 00:14:27,260
0,300 300,450 450,900 900,1020 1020,1590
lines of logs,| you're searching
|你在寻找失败点

509
00:14:27,260 --> 00:14:28,910
0,210 210,420 420,960 990,1170 1170,1650
for the point of failure|
|

510
00:14:28,910 --> 00:14:29,870
0,150 150,360 360,510 510,840 840,960
and trying to reason about
并试图对正在发生的事情进行推理。

511
00:14:30,020 --> 00:14:31,520
0,390 390,750 750,930
what's going on.|
|

512
00:14:32,490 --> 00:14:34,560
0,450 450,600 600,1020 1050,1740 1770,2070
Again, if we look, just
同样，如果我们看起来，就像使这是一种类似于可视化的格式，

513
00:14:34,560 --> 00:14:36,690
0,360 360,810 810,1350 1380,1950 1980,2130
like make this a kind

514
00:14:36,690 --> 00:14:38,880
0,90 90,330 330,930 930,1500 1500,2190
of a similar format to

515
00:14:38,910 --> 00:14:41,550
0,1200 1380,1620 1620,2070 2100,2400 2400,2640
visualize,| we can {quickly,see -}
|我们可以很快看到发生了什么，

516
00:14:41,550 --> 00:14:42,780
0,270 270,510 510,870 900,1050 1050,1230
what's going on,| we just
|我们只有五个不同的服务器，正在启动，

517
00:14:42,780 --> 00:14:44,910
0,180 180,570 840,1170 1170,1530 1530,2130
have like five different servers,

518
00:14:44,910 --> 00:14:46,680
0,240 240,330 330,1050 1260,1560 1560,1770
that are starting,| the first
|第一个人正在成为候选人，

519
00:14:46,680 --> 00:14:48,150
0,150 150,270 270,660 660,750 750,1470
one is becoming a candidate,|
|

520
00:14:48,390 --> 00:14:49,530
0,180 180,420 420,690 690,780 780,1140
the other ones are voting
其他人投了赞成票，

521
00:14:49,530 --> 00:14:50,380
0,180 180,420
for it,|
|

522
00:14:50,380 --> 00:14:52,360
0,450 450,540 540,1170 1350,1860 1860,1980
becoming a leader| and by
成为领导者|通过观察不同的列，

523
00:14:52,360 --> 00:14:54,160
0,450 450,630 630,750 750,1080 1080,1800
looking at the different columns,|
|

524
00:14:54,250 --> 00:14:55,090
0,120 120,270 270,390 390,480 480,840
we can see, for example
我们可以看到，例如所有的，

525
00:14:55,090 --> 00:14:57,520
0,510 870,1500 1500,1680 1680,2070 2070,2430
all,| {like,purple} {} codes, whenever
|就像紫色代码一样，每当提交或应用某件事时，

526
00:14:57,520 --> 00:14:59,410
0,390 390,540 540,1050 1050,1290 1290,1890
something is committed or applied,|
|

527
00:14:59,410 --> 00:15:00,310
0,120 120,240 240,420 420,600 600,900
so we can see that
所以我们可以看到收到了一个新条目，

528
00:15:00,490 --> 00:15:02,530
0,270 270,510 510,1080 1080,1350 1380,2040
a new entry is received,|
|

529
00:15:02,960 --> 00:15:04,910
0,750 750,1050 1050,1290 1290,1740 1740,1950
and this, this servers are
而这个，这个服务器正在接收

530
00:15:04,910 --> 00:15:08,150
0,540 570,1020 1020,1650 1740,2430 2550,3240
receiving| and because backup {}
|而且由于备份具有非常详细的日志，

531
00:15:08,150 --> 00:15:09,740
0,270 270,570 570,840 840,1050 1050,1590
to have a very verbose

532
00:15:09,740 --> 00:15:11,570
0,540 750,900 900,1320 1320,1620 1620,1830
log,| I have a lot
|我有很多Drop RPC，

533
00:15:11,570 --> 00:15:13,070
0,150 150,540 570,780 780,1260 1260,1500
of drop {RPCs -},| I'm
|我在这里也忽略了这些话题

534
00:15:13,070 --> 00:15:14,680
0,360 360,1110
also ignoring

535
00:15:14,710 --> 00:15:16,330
0,210 210,570 570,990 990,1320 1350,1620
{} those topics here| and
|随着测试的进行，

536
00:15:16,330 --> 00:15:18,310
0,210 210,450 660,1080 1080,1410 1410,1980
as the test goes on,|
|

537
00:15:18,370 --> 00:15:19,840
0,360 360,570 570,810 810,1200 1200,1470
we can start reasoning about
我们可以开始对发生的事情进行推理，

538
00:15:19,840 --> 00:15:21,310
0,270 270,570 570,810 870,1080 1080,1470
what's going on,| so so
|所以，只要有一些打印语句或测试代码中的错误片段就很有帮助了，

539
00:15:21,340 --> 00:15:23,260
0,480 480,1230 1260,1410 1410,1710 1710,1920
fairly helpful to just have

540
00:15:23,260 --> 00:15:25,090
0,210 210,570 600,930 930,1560 1560,1830
like some print statements {or,like}

541
00:15:25,090 --> 00:15:26,380
0,120 120,360 360,780 780,1140 1140,1290
the bug segment in the

542
00:15:26,380 --> 00:15:27,880
0,330 330,600 600,810 930,1260 1260,1500
test code,| you just can
|你可以在那里修改，

543
00:15:27,880 --> 00:15:29,620
0,510 510,780 1170,1320 1320,1500 1500,1740
modify there,| to know what
|要知道测试在做什么，

544
00:15:29,620 --> 00:15:30,640
0,120 120,540 540,660 660,930 930,1020
the test is doing,| for
|例如，在这里，测试检测到第一个服务器S0是领导者

545
00:15:30,640 --> 00:15:32,410
0,300 300,810 810,930 930,1290 1290,1770
example here the test detects

546
00:15:32,470 --> 00:15:34,780
0,360 600,960 990,1500 1500,1920 1920,2310
that the first server {S0

547
00:15:34,780 --> 00:15:36,220
0,180 180,420 420,510 510,1050 1200,1440
-} is the leader| and
|然后这个将S2连接到S4，

548
00:15:36,220 --> 00:15:37,680
0,180 180,360 360,1140
then this connects

549
00:15:37,680 --> 00:15:39,180
0,390 390,690 690,990 990,1200 1200,1500
{S2 -} to {S4 -},|
|

550
00:15:39,180 --> 00:15:40,740
0,180 180,240 240,480 480,690 1020,1560
which are like the three
它们就像右边的三个

551
00:15:40,740 --> 00:15:42,330
0,120 120,210 210,570 570,810 1140,1590
on the right side| and
|这几乎就是发生的事情，

552
00:15:42,330 --> 00:15:43,830
0,330 330,540 540,720 720,840 840,1500
that's pretty much what happens,|
|

553
00:15:43,830 --> 00:15:45,420
0,210 210,420 420,570 570,810 810,1590
we just get a stream
我们只收到一串条目，不会被提交，

554
00:15:45,420 --> 00:15:47,190
0,300 330,750 750,1050 1080,1650 1650,1770
of entries, that won't be

555
00:15:47,190 --> 00:15:48,690
0,510 510,750 750,1020 1020,1290 1290,1500
committed,| because there's only two
|因为只有两台服务器可以相互通信

556
00:15:48,690 --> 00:15:50,610
0,720 870,1410 1410,1560 1560,1830 1830,1920
servers that can talk to

557
00:15:50,610 --> 00:15:52,110
0,150 150,720 720,1080 1080,1230 1230,1500
each other| and then after
|然后过了一段时间

558
00:15:52,110 --> 00:15:53,380
0,120 120,840
a while,|
|

559
00:15:53,410 --> 00:15:54,790
0,270 270,480 480,780 780,900 900,1380
we see that the first
我们看到前两个现在是断开的

560
00:15:54,790 --> 00:15:56,620
0,210 210,360 360,750 750,1500 1530,1830
two are now disconnected| and
|右边的三个重新连接在一起

561
00:15:56,620 --> 00:15:58,990
0,690 900,1770 1770,1920 1920,2010 2010,2370
the three on the right

562
00:15:58,990 --> 00:16:00,850
0,240 240,1050 1050,1200 1200,1530 1530,1860
are reconnected| and now they
|现在他们可以形成多数，

563
00:16:00,850 --> 00:16:02,480
0,270 270,540 540,600 600,1080
can form a majority,|
|

564
00:16:02,510 --> 00:16:03,770
0,480 480,720 720,990 990,1110 1110,1260
and that's what we will
这就是我们将看到的，

565
00:16:03,770 --> 00:16:05,600
0,240 240,510 540,990 1050,1470 1470,1830
see,| like the last one
|就像最后一个人成为候选人，获得多数

566
00:16:05,600 --> 00:16:07,220
0,390 390,450 450,1110 1110,1530 1530,1620
becomes a candidate, achieves a

567
00:16:07,220 --> 00:16:10,250
0,750 840,1710 1980,2190 2190,2340 2340,3030
majority| and kind of repeatedly
|我们可以重复地看到绿色和紫色的颜色模式，

568
00:16:10,250 --> 00:16:12,020
0,180 180,570 570,690 690,1260 1260,1770
we see the color pattern

569
00:16:12,020 --> 00:16:14,270
0,150 150,420 420,1080 1080,1230 1230,2250
of like green and purple,|
|

570
00:16:14,330 --> 00:16:16,400
0,450 450,630 630,1290 1290,1920 1920,2070
like this staircase signifying that
就像这个楼梯表示，哦，对了，正在接受一个入口

571
00:16:16,400 --> 00:16:19,070
0,540 720,1290 1290,1410 1410,2160 2340,2670
{oh,yeah} receiving an entry| and
|并通过其他服务器传播它

572
00:16:19,070 --> 00:16:20,870
0,660 660,930 1200,1470 1470,1590 1590,1800
propagating it through the other

573
00:16:20,870 --> 00:16:23,570
0,600 630,1080 1200,1440 1440,2100 2100,2700
servers| and the disconnected servers
|而这里的断开连接的服务器正在转换为候选人。

574
00:16:23,570 --> 00:16:25,190
0,300 300,810 810,900 900,960 960,1620
here converting to a candidate.|
|

575
00:16:25,610 --> 00:16:27,230
0,450 480,960 960,1110 1110,1530 1530,1620
And hopefully I've convinced you
希望我现在已经说服了你，

576
00:16:27,230 --> 00:16:29,420
0,120 120,390 390,780 810,1320 1560,2190
by now,| by there's slightly
|通过稍微改变日志的呈现方式，

577
00:16:29,420 --> 00:16:31,250
0,660 660,1020 1020,1620 1620,1710 1710,1830
changing the presentation of your

578
00:16:31,250 --> 00:16:32,690
0,660 660,840 840,930 930,1110 1110,1440
logs,| kind of like the
|在某种程度上，经历它们的精神努力会显著减少，

579
00:16:32,690 --> 00:16:34,520
0,660 660,1080 1080,1170 1170,1530 1530,1830
mental effort to like go

580
00:16:34,520 --> 00:16:36,920
0,210 210,720 990,1230 1230,1800 1800,2400
through them can significantly decrease,|
|

581
00:16:37,190 --> 00:16:38,780
0,510 780,1050 1050,1200 1200,1380 1380,1590
and even though this is
尽管这真的很花哨，

582
00:16:38,780 --> 00:16:41,060
0,540 540,1110 1110,1560 1590,2220 2220,2280
really fancy,| there's not a
|没有太多像花哨的代码，

583
00:16:41,060 --> 00:16:43,070
0,420 420,660 690,1050 1050,1470 1470,2010
lot of like fancy code,|
|

584
00:16:43,070 --> 00:16:44,360
0,300 300,510 510,570 570,840 840,1290
going on I just use
接下来，我只使用了一些自带的Python库，主要是Rich，

585
00:16:44,570 --> 00:16:46,820
0,780 810,1110 1110,1230 1230,1740 1860,2250
some of the self python

586
00:16:46,820 --> 00:16:49,610
0,690 720,1080 1080,1590 1950,2580 2580,2790
libraries, mainly rich,| and kind
|大概有上百行的Python脚本，

587
00:16:49,610 --> 00:16:50,720
0,150 150,420 420,840 840,930 930,1110
of all fits in about

588
00:16:50,720 --> 00:16:51,420
0,270
like

589
00:16:51,450 --> 00:16:53,010
0,150 150,480 480,870 870,1170 1200,1560
a hundred lines of Python

590
00:16:53,010 --> 00:16:55,650
0,420 450,960 1320,1680 1680,1860 1860,2640
script,| and if you're interested,|
|如果你感兴趣的话，|

591
00:16:55,650 --> 00:16:57,810
0,330 690,1290 1290,1620 1620,1920 1920,2160
I wrote a blog post,
我写了一篇博客文章，将链接到Piazza的网站上

592
00:16:57,810 --> 00:16:59,520
0,150 150,360 360,810 810,1530 1530,1710
that will be linking on

593
00:16:59,520 --> 00:17:00,810
0,90 90,270 270,600 600,870 870,1290
the web site on piazza|
|

594
00:17:00,810 --> 00:17:01,720
0,390
about
就像构建这样一个工具的步骤一样，

595
00:17:01,720 --> 00:17:03,100
0,120 120,240 240,510 510,1050 1050,1380
kind of like the these

596
00:17:03,100 --> 00:17:04,990
0,570 570,690 690,1200 1200,1680 1680,1890
steps to build a tool

597
00:17:04,990 --> 00:17:05,980
0,150 150,480 480,750 750,870 870,990
like this,| and you know
|你知道这一切是如何结合在一起的，

598
00:17:05,980 --> 00:17:07,510
0,450 480,660 660,840 840,1080 1080,1530
how it all fit together,|
|

599
00:17:07,510 --> 00:17:09,700
0,360 360,720 720,960 960,1410 1410,2190
like some like design decisions
就像一些与此相关的设计决定。

600
00:17:09,700 --> 00:17:10,920
0,420 420,480 480,690
related to that.|
|

601
00:17:11,130 --> 00:17:12,810
0,540 600,660 660,1020 1020,1440 1470,1680
And if anyone has any
如果任何人有任何与此相关的问题，请很乐意回答。

602
00:17:12,810 --> 00:17:14,670
0,450 450,900 900,1440 1440,1710 1710,1860
questions specific {to,this}, {happy -}

603
00:17:14,670 --> 00:17:15,780
0,180 180,510
to {answer,them}.|
|

604
00:17:23,500 --> 00:17:25,740
0,210 210,540 540,840 840,1230
Any questions for Jose?|
有什么问题要问何塞吗？|

605
00:17:25,770 --> 00:17:26,790
0,420 450,630 630,750 750,930 930,1020
{} Yeah, I have a
是的，我还有一个关于一般伐木的问题，

606
00:17:26,790 --> 00:17:29,130
0,390 390,540 540,1020 1020,1650 1650,2340
question more about general logging,|
|

607
00:17:29,670 --> 00:17:30,840
0,510 540,720 720,900 900,1080 1080,1170
so I know that I
所以我知道我有一些虫子，

608
00:17:30,840 --> 00:17:33,450
0,240 240,450 450,1200 1410,2010 2280,2610
had some bugs,| that when
|当我把它们放进伐木场时，它们已经不在那里了，

609
00:17:33,450 --> 00:17:35,400
0,420 510,960 960,1170 1170,1320 1320,1950
I put in the logging

610
00:17:35,430 --> 00:17:36,870
0,150 150,300 300,450 450,870 870,1440
they were no longer there,|
|

611
00:17:37,290 --> 00:17:40,500
0,1020 1020,1410 1530,1800 1800,2460 2580,3210
because of some timing issue,
由于某些时间问题，或者可能是并发问题，

612
00:17:40,500 --> 00:17:42,180
0,210 210,600 600,720 720,1200 1200,1680
or perhaps a concurrency issue,|
|

613
00:17:42,360 --> 00:17:43,710
0,390 420,810 840,1140 1140,1230 1230,1350
so what, what do we
那怎么办，我们该怎么办。

614
00:17:43,710 --> 00:17:44,800
0,150 150,630
do then.|
|

615
00:17:45,280 --> 00:17:47,320
0,990 1200,1410 1410,1560 1560,1980 1980,2040
{} Okay, so there's a
好吧，我做了几件事，

616
00:17:47,320 --> 00:17:48,370
0,210 210,390 390,480 480,780 780,1050
couple things I do, {}|
|

617
00:17:48,370 --> 00:17:49,480
0,210 210,270 270,420 420,660 660,1110
first of all, {} one
首先，我记录的一个原因是，它是一种细粒度的，

618
00:17:49,480 --> 00:17:50,530
0,270 270,360 360,810 810,900 900,1050
reason I log, it's sort

619
00:17:50,530 --> 00:17:52,180
0,90 90,210 210,450 450,960 1110,1650
of a {fine-grained -},| always
|始终保持相同的粒度和细粒度，

620
00:17:52,180 --> 00:17:52,960
0,60 60,150 150,480 480,720 720,780
at the same level of

621
00:17:52,960 --> 00:17:54,940
0,780 780,1140 1140,1440 1440,1650 1650,1980
granularity and fine {granularity -

622
00:17:54,940 --> 00:17:56,350
0,150 150,360 360,840 870,1110 1110,1410
- -},| so I always
|所以我总是对每件事都有踪迹

623
00:17:56,350 --> 00:17:57,310
0,90 90,150 150,390 390,510 510,960
have a trace with everything|
|

624
00:17:57,310 --> 00:17:58,330
0,360 360,420 420,720 720,900 900,1020
and I generally don't have
而且我一般都不需要回去。

625
00:17:58,330 --> 00:17:59,360
0,90 90,180 180,570
to go back.|
|

626
00:18:00,280 --> 00:18:01,780
0,300 300,690 690,1110 1110,1200 1200,1500
The other thing to do
另一件要做的事情是，

627
00:18:01,780 --> 00:18:03,610
0,420 420,630 630,1350 1500,1830 1830,1830
is,| I {do,run -} the
|我确实做了很多很多次测试

628
00:18:04,030 --> 00:18:05,680
0,420 420,750 750,1050 1050,1470 1470,1650
test many many times| and
|他们保存所有的日志，

629
00:18:05,680 --> 00:18:07,400
0,120 120,480 480,630 630,1260
they save all logs,|
|

630
00:18:07,490 --> 00:18:08,660
0,360 360,600 600,870 870,960 960,1170
and then once I hit
一旦我打错了球，

631
00:18:08,660 --> 00:18:10,010
0,60 60,330 330,690 690,1260 1260,1350
the wrong one,| once I
|一旦我碰到了虫子，

632
00:18:10,010 --> 00:18:11,240
0,150 150,210 210,570 600,1110 1110,1230
hit a bug,| then you
|那你就知道我真的研究过那个特定的日志了。

633
00:18:11,240 --> 00:18:12,170
0,90 90,180 180,450 450,780 780,930
know I really studied that

634
00:18:12,170 --> 00:18:13,480
0,360 360,780
particular log.|
|

635
00:18:16,920 --> 00:18:17,670
0,150 150,240 240,300 300,630 630,750
And so, for example if
所以，举个例子，如果我连夜运行一些东西，

636
00:18:17,670 --> 00:18:19,110
0,90 90,270 270,600 600,1230 1260,1440
I run something overnight,| I
|我只是在一夜之间保存了所有运行记录

637
00:18:19,110 --> 00:18:20,490
0,510 510,810 810,960 960,1050 1050,1380
just save all the logs

638
00:18:20,490 --> 00:18:21,720
0,150 150,270 270,360 360,630 630,1230
from all the runs overnight|
|

639
00:18:21,720 --> 00:18:23,040
0,270 270,600 600,840 840,930 930,1320
and then grab the one
然后抓住你地里的那个。

640
00:18:23,040 --> 00:18:24,240
0,90 90,270 270,600
in your field.|
|

641
00:18:29,440 --> 00:18:31,630
0,510 510,600 960,1230 1230,1470 1470,2190
Anybody have any further questions
有没有人对伐木这个话题有什么进一步的疑问？

642
00:18:32,130 --> 00:18:33,660
0,300 300,420 420,810 810,930 930,1530
on the topic of logging?|
|

643
00:18:39,220 --> 00:18:41,650
0,600 900,1260 1260,1410 1410,1800 1800,2430
Okay good, let me proceed,|
好的，让我继续，|

644
00:18:42,320 --> 00:18:43,940
0,600 600,720 720,1140 1140,1500 1530,1620
{ -} before again, {you,know}
在此之前，你知道，看看你的代码，我想谈一谈结构，

645
00:18:43,940 --> 00:18:44,630
0,270 270,330 330,420 420,630 630,690
look at your code I

646
00:18:44,630 --> 00:18:45,230
0,150 150,210 210,360 360,390 390,600
want to talk a little

647
00:18:45,230 --> 00:18:47,540
0,150 150,420 420,600 600,1110 1740,2310
bit about the structure,| that
|我的特殊解决方案

648
00:18:47,540 --> 00:18:49,520
0,240 240,810 810,1200 1200,1740 1740,1980
my particular solution has| and
|这绝对不是唯一的结构，

649
00:18:49,520 --> 00:18:50,690
0,210 210,450 450,840 840,1080 1080,1170
this is definitely not the

650
00:18:50,690 --> 00:18:52,070
0,240 240,750 810,1080 1080,1200 1200,1380
only structure,| you can do
|你可以用很多不同的方法来做这件事

651
00:18:52,070 --> 00:18:52,880
0,120 120,180 180,390 390,600 600,810
it in many many different

652
00:18:52,880 --> 00:18:54,740
0,450 480,780 780,1350 1350,1590 1590,1860
ways| and you're you're free
|你可以自由地以多种不同的方式做这件事

653
00:18:54,740 --> 00:18:55,520
0,210 210,480 480,600 600,720 720,780
to actually do it in

654
00:18:55,520 --> 00:18:57,230
0,210 210,510 510,900 1230,1650 1650,1710
many different ways| and the
|事实上，每年我上课的时候，

655
00:18:57,230 --> 00:18:59,120
0,210 210,450 570,870 870,1650 1650,1890
fact that every year when

656
00:18:59,120 --> 00:19:00,680
0,30 30,330 330,930 930,1050 1050,1560
I teach class,| I I
|我实际上我试着重写，

657
00:19:00,680 --> 00:19:03,050
0,510 540,780 780,1080 1110,2010 2070,2370
actually try to rewrite, {}|
|

658
00:19:03,050 --> 00:19:05,030
0,0 570,1200 1200,1260 1260,1560 1560,1980
{} implement the labs again|
再次实施实验|

659
00:19:05,210 --> 00:19:07,070
0,120 120,450 450,1050 1050,1500 1500,1860
and often experiment with different
并经常尝试不同类型的实现方式。

660
00:19:07,070 --> 00:19:08,660
0,450 450,750 750,1020 1020,1110 1110,1590
types of ways of implementing

661
00:19:08,660 --> 00:19:09,220
0,210
it.|
|

662
00:19:09,430 --> 00:19:10,900
0,450 450,840 990,1080 1080,1260 1260,1470
{} So the one I'll
所以今天我要向你们展示的是

663
00:19:10,900 --> 00:19:12,550
0,240 240,570 570,1230 1260,1470 1470,1650
show you {} with you

664
00:19:12,550 --> 00:19:13,960
0,570 720,960 960,1170 1170,1290 1290,1410
today is| one that I
|一个我写的[]，

665
00:19:13,960 --> 00:19:15,790
0,450 690,1170 1170,1320 1320,1710 1710,1830
wrote over {[] -},| you
|你知道，有点像是在为6.824做准备

666
00:19:15,790 --> 00:19:16,870
0,150 150,330 330,390 390,660 660,1080
know sort of getting ready

667
00:19:17,050 --> 00:19:18,700
0,270 270,330 330,480 480,960 1200,1650
for {6.824 - -}| and
|然后它有如下的结构，

668
00:19:18,700 --> 00:19:19,780
0,150 150,210 210,480 480,720 750,1080
then it has the following

669
00:19:19,780 --> 00:19:21,610
0,570 900,1200 1200,1260 1260,1500 1500,1830
structure,| it's a pretty standard
|这是一个非常标准的结构，

670
00:19:21,610 --> 00:19:23,770
0,540 750,1380 1380,1470 1470,1770 1860,2160
structure,| {} you know, let
|你知道，让我画一个盒子，

671
00:19:23,770 --> 00:19:25,420
0,120 120,510 510,630 630,1260
me draw a box,|
|

672
00:19:25,610 --> 00:19:27,830
0,120 120,420 420,1170 1170,1560 1590,2220
you know signifying the raft
你知道，这意味着木筏图书馆，

673
00:19:27,830 --> 00:19:29,870
0,600 720,1230 1230,1320 1320,1440 1440,2040
library,| {} you know there's
|你知道基本上有两个API调用，

674
00:19:30,320 --> 00:19:32,280
0,270 270,1140
two basically

675
00:19:32,710 --> 00:19:34,750
0,660 660,1140 1140,1350 1350,1560 1560,2040
API calls,| [] one Start,
|[]一开始，对条目进行排序和添加

676
00:19:34,750 --> 00:19:37,420
0,210 210,390 390,480 480,1110 1140,2670
to sort of initiate, {}

677
00:19:37,420 --> 00:19:40,000
0,570 570,1110 1290,1950 1950,2100 2100,2580
{and,append,entries -}| and to initiate
|并以一种方式启动日志记录操作以实际并输出，

678
00:19:40,000 --> 00:19:41,890
0,30 30,660 690,1260 1260,1350 1350,1890
a logging operation in one

679
00:19:41,890 --> 00:19:43,280
0,270 270,900
to actually

680
00:19:43,620 --> 00:19:45,870
0,750 750,1200 1230,1860 1950,2160 2160,2250
{} and output,| you know
|你知道，这是通过申请渠道进行的，

681
00:19:45,870 --> 00:19:46,890
0,150 150,390 390,570 570,900 900,1020
that goes come through the

682
00:19:46,890 --> 00:19:48,180
0,300 300,750
apply channel,|
|

683
00:19:48,530 --> 00:19:51,530
0,510 1170,1860 1890,2460 2460,2910 2910,3000
{} then, {} in you
然后，在我们展示的一份文件中，

684
00:19:51,530 --> 00:19:52,790
0,180 180,330 330,960 960,1110 1110,1260
know one documentation {} we're

685
00:19:52,790 --> 00:19:55,060
0,330 330,570 570,960 960,1410
showing,| how basically one,
|基本上是一个，基本上是一个结构，木筏结构，

686
00:19:55,270 --> 00:19:57,460
0,540 540,720 720,1350 1380,1890 1890,2190
essentially one structure, the raft

687
00:19:57,460 --> 00:19:59,080
0,600
structure,|
|

688
00:19:59,340 --> 00:20:00,840
0,210 210,750 750,1260 1260,1410 1410,1500
that basically has all the
它基本上具备了木筏图书馆的所有状态，

689
00:20:00,840 --> 00:20:03,120
0,330 330,450 450,1320 1350,1950 1950,2280
state of the of the

690
00:20:03,540 --> 00:20:05,490
0,360 360,870 900,1050 1050,1770 1770,1950
raft library,| you know all
|你知道图2中的所有变量

691
00:20:05,490 --> 00:20:06,840
0,330 330,840 840,990 990,1170 1170,1350
the variables that are in

692
00:20:06,840 --> 00:20:08,940
0,180 180,480 480,1020 1320,1770 1770,2100
the figure two| and basically
|基本上只锁定了这个人一次，

693
00:20:08,940 --> 00:20:10,830
0,120 120,300 300,780 1020,1440 1440,1890
have one lock on this

694
00:20:10,830 --> 00:20:11,920
0,600
guy,|
|

695
00:20:13,490 --> 00:20:15,800
0,840 840,1140 1140,1590 1590,1830 1830,2310
and, {} basically all my,
而且，基本上是我的所有，所以我使用相当粗粒度的锁定所有RPC处理程序，

696
00:20:15,830 --> 00:20:18,710
0,480 480,690 930,1350 1350,2010 2010,2880
{so,I,use -} quite coarse-grained locking

697
00:20:18,710 --> 00:20:20,330
0,210 210,330 330,870 870,1440 1440,1620
all my RPC handlers,| all
|我一开始就是，

698
00:20:20,330 --> 00:20:23,420
0,1110 1140,1770 1890,2220 2220,2640 2640,3090
my start,| {} take basically
|基本上只需要一个锁，

699
00:20:23,420 --> 00:20:25,100
0,150 150,390 390,900 1140,1470 1470,1680
just one lock,| {} do
|做他们需要做的任何事情，

700
00:20:25,100 --> 00:20:26,150
0,450 450,720 720,810 810,960 960,1050
whatever stuff they need to

701
00:20:26,150 --> 00:20:28,310
0,630 630,930 930,1050 1050,1500 1530,2160
do,| do and then release
|这样做，然后释放锁，

702
00:20:28,310 --> 00:20:29,220
0,60 60,480
the lock,|
|

703
00:20:29,510 --> 00:20:30,980
0,510 780,990 990,1140 1140,1230 1230,1470
{} so there's a couple
所以有几条线，你知道的，就是那种到处跑的，

704
00:20:30,980 --> 00:20:32,480
0,510 570,870 870,1110 1110,1290 1290,1500
threads, {you,know} that sort of

705
00:20:32,480 --> 00:20:34,340
0,240 240,840 990,1500 1500,1560 1560,1860
running around,| one of course
|其中一个当然是自动收报机的线，

706
00:20:34,340 --> 00:20:35,930
0,120 120,450 480,750 750,1230 1230,1590
is the ticker threads,| that
|就像我们给你的一样，

707
00:20:35,930 --> 00:20:37,280
0,120 120,270 270,390 420,870 870,1350
we sort of gave you,|
|

708
00:20:38,030 --> 00:20:39,830
0,690 690,1290 1320,1440 1440,1560 1560,1800
{} and you know that
你知道的，只要等一等，

709
00:20:39,830 --> 00:20:41,150
0,210 210,660 870,990 990,1230 1230,1320
just wait,| I'll show you
|我马上就向你们展示，

710
00:20:41,150 --> 00:20:41,900
0,60 60,120 120,480 480,630 630,750
in a second,| that will
|这将等待一定的毫秒数，你知道50毫秒

711
00:20:41,900 --> 00:20:43,340
0,270 270,840 870,1110 1110,1350 1350,1440
wait for some number of

712
00:20:43,340 --> 00:20:46,520
0,630 780,1140 1140,1950 2340,2820 2820,3180
milliseconds, {you,know,50} milliseconds| and then
|然后运行，然后定期检查，

713
00:20:46,550 --> 00:20:48,890
0,870 870,990 990,1140 1140,1680 1680,2340
run and then check periodically,|
|

714
00:20:48,890 --> 00:20:50,870
0,150 150,780 810,1320 1320,1620 1620,1980
if any timeout, election timeout
如果有任何超时，选举超时已经结束

715
00:20:50,870 --> 00:20:52,100
0,150 150,420 420,720 720,840 840,1230
has gone off| and does
|并做任何需要做的事情，

716
00:20:52,100 --> 00:20:53,060
0,330 330,510 510,600 600,690 690,960
whatever needs to be done,|
|

717
00:20:53,810 --> 00:20:55,640
0,330 330,780 780,990 990,1290 1290,1830
{} I have one thread
我有一个线程专门用于在应用通道上写入数据，

718
00:20:55,640 --> 00:20:57,200
0,600 600,1050 1050,1350 1350,1470 1470,1560
dedicated to writing on the

719
00:20:57,200 --> 00:20:59,210
0,330 330,840 1110,1440 1440,1770 1770,2010
apply channel,| so no other
|因此没有其他线程实际写入应用通道，

720
00:20:59,210 --> 00:21:00,350
0,270 270,570 570,870 870,990 990,1140
thread actually writes to the

721
00:21:00,350 --> 00:21:01,490
0,330 330,690 690,870 870,1110 1110,1140
apply channel,| there's only a
|只有一张

722
00:21:01,490 --> 00:21:02,960
0,270 270,660 840,1080 1080,1140 1140,1470
single one| and it basically
|它基本上是在一个条件变量上休眠，

723
00:21:02,960 --> 00:21:04,850
0,540 540,780 780,930 930,1290 1290,1890
sleeps on a condition variable,|
|

724
00:21:07,240 --> 00:21:09,550
0,360 360,990 1140,1590 1590,1680 1680,2310
and so when for example
因此，例如，当一个新的附加条目从领导者处进入时

725
00:21:09,550 --> 00:21:11,740
0,750 780,1290 1290,1620 1620,1980 1980,2190
a new append entry comes

726
00:21:11,740 --> 00:21:14,290
0,180 180,570 570,1260 1320,1980 1980,2550
in from the leader| and
|并且提交索引会上升，

727
00:21:14,320 --> 00:21:17,020
0,630 690,1140 1140,1680 1830,2280 2280,2700
{} the commit {} index

728
00:21:17,020 --> 00:21:19,180
0,180 180,480 690,1590 1590,1770 1770,2160
goes up,| then the thread
|然后该线程将在该信号上被唤醒

729
00:21:19,180 --> 00:21:21,100
0,210 210,510 510,930 1140,1710 1710,1920
that thread will wake up

730
00:21:21,100 --> 00:21:22,150
0,480 480,600 600,900 900,990 990,1050
on the signal| and the
|以及将唤醒线程的条件变量

731
00:21:22,150 --> 00:21:23,440
0,360 360,780 780,930 930,1080 1080,1290
condition variable that will wake

732
00:21:23,440 --> 00:21:24,790
0,180 180,420 420,690 690,810 810,1350
up the thread| that actually
|这实际上是在看申请

733
00:21:24,790 --> 00:21:25,960
0,300 300,360 360,540 540,900 900,1170
looks at the apply| that
|它写入应用通道，

734
00:21:25,960 --> 00:21:27,070
0,180 180,270 270,330 330,600 600,1110
{writes -} the apply channel,|
|

735
00:21:27,130 --> 00:21:28,570
0,240 240,420 420,840 840,1350 1350,1440
it will grab whatever you
它将从日志中抓取您所知道的任何条目，

736
00:21:28,570 --> 00:21:29,740
0,300 360,780 780,960 960,1080 1080,1170
know entries out of the

737
00:21:29,740 --> 00:21:30,700
0,600
log,|
|

738
00:21:30,700 --> 00:21:31,900
0,600 600,840 840,990 990,1140 1140,1200
and stick them on the
并把它们贴在申请频道上。

739
00:21:31,900 --> 00:21:33,120
0,270 270,660
apply channel.|
|

740
00:21:34,410 --> 00:21:35,720
0,750

741
00:21:36,440 --> 00:21:38,270
0,480 510,870 870,1050 1050,1500 1500,1830
And, {} so that's one
所以，这是一个原因，

742
00:21:38,330 --> 00:21:39,530
0,390 390,480 480,750 750,990 990,1200
reason,| a single thread is
|单线程当然不能在跨应用通道写入时持有锁，

743
00:21:39,530 --> 00:21:40,250
0,150 150,240 240,450 450,510 510,720
that of course you can't

744
00:21:40,250 --> 00:21:42,260
0,240 240,630 630,1110 1110,1560 1590,2010
hold locks while writing across

745
00:21:42,260 --> 00:21:43,370
0,150 150,480 480,840 840,1050 1050,1110
the apply channel,| but at
|但至少你以后可能会遇到问题，

746
00:21:43,370 --> 00:21:44,270
0,210 210,390 390,720 720,870 870,900
least you might get a

747
00:21:44,270 --> 00:21:46,970
0,420 420,780 780,1230 1500,2130 2220,2700
[cause] problems later,| {} and
|所以我只有一条线，

748
00:21:46,970 --> 00:21:47,750
0,300 300,420 420,510 510,660 660,780
{} so I just have

749
00:21:47,750 --> 00:21:48,650
0,60 60,360 360,600 600,690 690,900
a single thread,| that actually
|它实际上在应用通道上写入。

750
00:21:48,650 --> 00:21:50,030
0,270 270,390 390,660 660,1050 1050,1380
writes on the apply channel.|
|

751
00:21:51,590 --> 00:21:53,580
0,540 570,1440
Then, {}
然后，当然你知道有很多东西是从外面进来的，

752
00:21:53,640 --> 00:21:55,260
0,660 690,930 930,1440 1440,1530 1530,1620
the, of course you know

753
00:21:55,260 --> 00:21:56,970
0,390 390,630 720,1290 1290,1530 1530,1710
number of things coming in

754
00:21:56,970 --> 00:21:57,930
0,150 150,270 270,750 750,810 810,960
from the outside,| you know
|您知道需要传入的消息

755
00:21:57,930 --> 00:22:00,330
0,600 600,1200 1200,1470 1470,1860 2250,2400
require messages coming in| and
|当然，每个消息或每个RPC都会启动自己的线程，

756
00:22:00,330 --> 00:22:01,410
0,60 60,270 270,450 450,900 900,1080
of course each message, or

757
00:22:01,410 --> 00:22:03,000
0,180 180,990 990,1320 1320,1440 1440,1590
each RPC starts its own

758
00:22:03,000 --> 00:22:06,030
0,360 510,1200 1230,1680 2340,2580 2580,3030
thread,| {like,Go} well RPC library
|像Go Well一样，RPC库基本上会为每条传入消息启动一个线程

759
00:22:06,030 --> 00:22:07,050
0,150 150,480 480,690 690,750 750,1020
will basically start a thread

760
00:22:07,050 --> 00:22:09,360
0,120 120,360 360,720 720,1290 1650,2310
for every incoming message| and
|基本上，我处理每一条来电的方式，

761
00:22:09,360 --> 00:22:11,040
0,450 450,600 600,1020 1020,1320 1320,1680
basically the way I process

762
00:22:11,040 --> 00:22:12,660
0,210 210,510 510,1080 1080,1380 1380,1620
every incoming messages,| the first
|第一件抓住木筏结构上的原木的东西，

763
00:22:12,660 --> 00:22:13,650
0,90 90,240 240,510 510,600 600,990
thing that grabs the log

764
00:22:13,650 --> 00:22:15,180
0,90 90,150 150,390 390,960 1230,1530
on the raft structure,| it
|上面写着你知道木筏结构，

765
00:22:15,180 --> 00:22:16,140
0,210 210,660 660,750 750,870 870,960
reads writes you know the

766
00:22:16,140 --> 00:22:17,400
0,270 270,870 870,960 960,1110 1110,1260
raft structure,| and then when
|然后当它完成的时候，

767
00:22:17,400 --> 00:22:18,630
0,120 120,480 510,630 630,780 780,1230
it's done,| you have releases
|你可以解锁，也许可以解锁，

768
00:22:18,630 --> 00:22:21,360
0,330 360,960 1110,1860 1860,2280 2310,2730
the lock, maybe {} lock,|
|

769
00:22:21,360 --> 00:22:22,440
0,120 120,450 450,540 540,960 960,1080
and maybe in between, it
也许在这两者之间，它也会更新条件变量中的信号。

770
00:22:22,440 --> 00:22:24,600
0,630 660,1170 1170,1650 1680,2070 2070,2160
will update {you,know} signal in

771
00:22:24,600 --> 00:22:25,920
0,60 60,360 360,750 750,990
the condition variable, too.|
|

772
00:22:27,850 --> 00:22:30,040
0,510 660,780 780,1110 1110,1470 1470,2190
Then, of course start itself,|
然后，当然，开始它自己，|

773
00:22:30,100 --> 00:22:31,210
0,240 240,570 600,930 930,1020 1020,1110
you know runs on a
你知道在特定的线程上运行，

774
00:22:31,210 --> 00:22:32,780
0,360 360,840
particular thread,|
|

775
00:22:32,810 --> 00:22:33,980
0,240 240,540 540,810 810,1080 1080,1170
so it jumps into the
所以它跳进了木筏图书馆，

776
00:22:33,980 --> 00:22:35,210
0,270 270,780 780,870 870,1020 1020,1230
raft library,| you know that's
|你知道这是一回事，

777
00:22:35,210 --> 00:22:36,110
0,90 90,360 360,690 690,750 750,900
the same thing,| you know
|你知道，获取锁，然后，

778
00:22:36,110 --> 00:22:38,240
0,450 450,1020 1050,1230 1230,1710 1800,2130
acquire lock and then,| let
|让我添加条目，

779
00:22:38,240 --> 00:22:41,870
0,360 360,690 690,690 2610,3180 3180,3630
me {} {append -} entry,|
|

780
00:22:41,870 --> 00:22:44,060
0,660 660,840 840,1530 1530,1980 1980,2190
if the leader appended to
如果引线追加到日志中

781
00:22:44,060 --> 00:22:45,650
0,660 690,1200 1200,1290 1290,1380 1380,1590
the log| and the log
|和日志结构，然后发送你知道的附加RPC，附加RPC

782
00:22:45,650 --> 00:22:48,170
0,600 1020,1230 1230,1770 1770,2070 2070,2520
structure and then sends off

783
00:22:48,200 --> 00:22:49,070
0,90 90,240 240,420 420,720 720,870
you know the append {RPC

784
00:22:49,070 --> 00:22:51,830
0,600 600,840 840,990 990,1590 1980,2760
-}, append {RPCs -}| and
|由于我想并行执行附加RPC，

785
00:22:51,890 --> 00:22:53,000
0,630 630,810 810,870 870,1050 1050,1110
{} since I want to

786
00:22:53,000 --> 00:22:54,170
0,150 150,300 300,660 660,1080 1080,1170
do the append RPC in

787
00:22:54,170 --> 00:22:56,960
0,690 720,1200 1470,2550 2550,2700 2700,2790
parallel,| {} basically what the
|基本上，它的工作方式是，

788
00:22:56,960 --> 00:22:57,770
0,150 150,210 210,510 510,630 630,810
way it works is,| that
|你知道，对于每个RPC，

789
00:22:57,770 --> 00:22:59,090
0,90 90,210 210,360 360,900 1110,1320
you know for every {RPC

790
00:22:59,090 --> 00:23:00,300
0,720
-},|
|

791
00:23:00,390 --> 00:23:01,860
0,210 210,510 510,570 570,930 930,1470
I start a separate thread,|
我开了一个单独的帖子，|

792
00:23:02,700 --> 00:23:03,750
0,150 150,390 390,690 690,840 840,1050
and that are in that
而在那个线程中，实际上负责发送它，

793
00:23:03,750 --> 00:23:05,640
0,360 360,780 780,870 870,1470 1470,1890
thread, actually is responsible for

794
00:23:05,910 --> 00:23:08,280
0,480 480,780 960,1560 1560,1620 1620,2370
sending it,| reserving the response
|保留响应，并在响应中进行任何更新，

795
00:23:08,460 --> 00:23:10,620
0,1020 1110,1320 1320,1860 1860,1980 1980,2160
and {in,the} response you know

796
00:23:10,620 --> 00:23:11,790
0,210 210,390 390,870 870,1050 1050,1170
doing any updating,| that is
|这对他们的[]结构是必要的，

797
00:23:11,790 --> 00:23:13,290
0,600 600,750 750,960 960,1080 1080,1500
necessary to their [] structure,|
|

798
00:23:13,320 --> 00:23:15,570
0,390 600,1080 1080,1590 1590,2160 2160,2250
so response handler when the
因此，响应处理程序在响应到达时，

799
00:23:15,570 --> 00:23:17,340
0,330 330,510 510,900 1140,1710 1710,1770
response comes in,| {} you
|你知道，抓住木筏锁

800
00:23:17,340 --> 00:23:18,820
0,210 210,510 510,960
know grab the

801
00:23:18,880 --> 00:23:21,100
0,600 600,1110 1200,1470 1470,1980 2010,2220
raft lock| and then {}
|然后对浮筏状态进行必要的任何更新

802
00:23:21,100 --> 00:23:22,600
0,150 150,540 540,870 870,1410 1410,1500
do whatever update necessary to

803
00:23:22,600 --> 00:23:23,980
0,390 390,780 780,870 870,1110 1110,1380
{the,raft} state| and then release
|然后释放锁。

804
00:23:23,980 --> 00:23:24,920
0,60 60,450
the lock.|
|

805
00:23:25,320 --> 00:23:27,090
0,480 960,1440 1470,1590 1590,1740 1740,1770
So, {} so there's a
所以，这里有一堆线，

806
00:23:27,090 --> 00:23:28,020
0,180 180,270 270,570 570,690 690,930
bunch of {threads -},| quite
|你可以运行相当多的线程，

807
00:23:28,020 --> 00:23:28,560
0,30 30,210 210,270 270,480 480,540
a number of threads you

808
00:23:28,560 --> 00:23:29,970
0,150 150,270 270,510 510,1170 1170,1410
can be running around,| because
|因为他们的消息可能会迟到，

809
00:23:29,970 --> 00:23:31,620
0,150 450,870 870,990 990,1110 1110,1650
their messages may be late,|
|

810
00:23:31,620 --> 00:23:32,400
0,90 90,420 420,570 570,660 660,780
you know and so there
你知道，所以这里可能有很多的线索，

811
00:23:32,400 --> 00:23:33,540
0,90 90,240 240,450 450,660 660,1140
may be many, many, many

812
00:23:34,020 --> 00:23:35,480
0,330 330,930
threads here,|
|

813
00:23:35,510 --> 00:23:37,010
0,420 420,840 840,1200 1200,1320 1320,1500
{} and, {} there might
而且，可能会有多个起点，

814
00:23:37,010 --> 00:23:38,750
0,390 390,750 750,1260 1260,1560 1560,1740
be multiple Starts,| there might
|可能会有一个出色的开端，

815
00:23:38,750 --> 00:23:39,680
0,60 60,120 120,360 360,810 810,930
be a Start outstanding is,|
|

816
00:23:39,680 --> 00:23:40,640
0,120 120,240 240,570 570,690 690,960
{instead,of} {maybe,multiple - -} threads
而不是那里的多个线程，

817
00:23:40,640 --> 00:23:41,630
0,360 360,510 510,690 690,900 900,990
there,| and of course your
|当然，你的股票代码，你也开始了，可能会发出心跳

818
00:23:41,630 --> 00:23:43,850
0,420 420,570 570,990 990,1500 1530,2220
ticker, you also start {},

819
00:23:44,360 --> 00:23:46,910
0,570 1050,1650 1650,1830 1830,2430 2430,2550
{} may send heartbeats| and
|而你知道的那些心跳又变成了一条单独的线，

820
00:23:46,910 --> 00:23:48,800
0,150 150,660 660,810 810,1560 1590,1890
those heartbeats {you,know} again turn

821
00:23:48,800 --> 00:23:51,140
0,570 660,1080 1080,1500 1500,1890
into a separate thread,|
|

822
00:23:51,870 --> 00:23:52,920
0,300 300,420 420,630 630,930 930,1050
but all those threads are
但所有这些线程基本上都是由木筏锁序列化的

823
00:23:52,920 --> 00:23:54,180
0,690
basically

824
00:23:54,270 --> 00:23:56,520
0,360 360,1200 1470,1830 1830,1950 1950,2250
{} serialized by the raft

825
00:23:56,520 --> 00:23:58,170
0,630 690,870 870,1050 1050,1320 1320,1650
lock| or by raft lock
|或通过木筏锁串行化。

826
00:23:58,170 --> 00:24:01,580
0,90 90,780
{serialize -}.|
|

827
00:24:08,880 --> 00:24:09,720
0,90 90,180 180,330 330,330 330,840
And so when I print,
所以当我打印，打印长消息的时候，

828
00:24:09,720 --> 00:24:11,490
0,810 810,1050 1050,1530 1530,1620 1620,1770
print long messages,| you know,
|你知道，当然这里面你知道当你拿着木筏锁的时候做的，

829
00:24:11,490 --> 00:24:12,570
0,90 90,330 330,480 480,930 930,1080
of course this inside you

830
00:24:12,570 --> 00:24:14,280
0,360 360,600 600,870 870,1380 1380,1710
know done while holding the

831
00:24:14,280 --> 00:24:16,050
0,270 270,690 990,1230 1230,1650 1650,1770
raft lock,| and since you
|因为你知道每个线程都是一个接一个地运行，

832
00:24:16,050 --> 00:24:17,190
0,90 90,270 270,390 390,810 810,1140
know sort of every thread

833
00:24:17,190 --> 00:24:19,200
0,180 180,420 420,540 540,1080 1350,2010
runs one by one {},|
|

834
00:24:19,200 --> 00:24:20,070
0,120 120,330 330,630 630,810 810,870
you know a lot of
你知道，很多信息都很有意义，

835
00:24:20,070 --> 00:24:21,150
0,360 360,600 600,780 780,990 990,1080
messages would make {a,lot} of

836
00:24:21,150 --> 00:24:22,290
0,330 330,420 420,510 510,750 750,1140
sense,| you know they they
|你知道，他们也都是连载的。

837
00:24:22,290 --> 00:24:24,180
0,390 420,1080 1080,1410
all serialized too.|
|

838
00:24:24,520 --> 00:24:26,590
0,540 570,1320 1320,1680 1680,1890 1890,2070
{} Similar I make all
类似地，我使所有RPC处理程序都是原子的或序列化的，

839
00:24:26,590 --> 00:24:28,780
0,660 660,1260
RPC handlers

840
00:24:29,380 --> 00:24:33,640
0,810 1470,2340 3360,3630 3630,4050 4050,4260
atomic {or,serialized},| {} {so,you,know} {fine-grained
|所以你知道细粒度锁定，

841
00:24:33,640 --> 00:24:35,590
0,270 270,870 1020,1530 1530,1830 1830,1950
-} locking,| {} and that
|这很有帮助，我稍后会谈到

842
00:24:35,590 --> 00:24:36,700
0,390 390,510 510,600 600,780 780,1110
helps and I'll talk about

843
00:24:36,700 --> 00:24:38,530
0,450 540,630 630,1050 1530,1650 1650,1830
in a second| and then
|然后，你唯一要小心的是，

844
00:24:38,530 --> 00:24:40,180
0,120 120,690 690,930 930,1140 1140,1650
the only thing that you

845
00:24:40,510 --> 00:24:41,350
0,150 150,300 300,480 480,630 630,840
have to be little bit

846
00:24:41,350 --> 00:24:42,460
0,390 390,630 630,780 780,900 900,1110
careful with,| if you do
|如果您执行某种粗粒度锁定，

847
00:24:42,460 --> 00:24:43,870
0,180 180,240 240,720 720,930 930,1410
sort of {coarse-grained -} locking,|
|

848
00:24:44,200 --> 00:24:45,880
0,300 300,600 600,900 900,1260 1260,1680
is that now you can
就是现在你可以陷入僵局，

849
00:24:45,880 --> 00:24:47,410
0,210 210,360 360,990 990,1170 1170,1530
get into deadlocks,| in particular,
|特别是，如果跨RPC持有锁，则可能会出现死锁

850
00:24:47,410 --> 00:24:48,400
0,90 90,210 210,420 420,870 870,990
you can have deadlock if

851
00:24:48,400 --> 00:24:49,630
0,90 90,420 420,750 750,1080 1080,1230
you hold locks across {RPCs

852
00:24:49,630 --> 00:24:51,220
0,450 450,600 600,990 1050,1260 1260,1590
-}| and so I never
|所以我从来不会在RPC上不加锁，

853
00:24:51,220 --> 00:24:54,220
0,570 960,1380 1380,2040 2280,2790 2790,3000
hold no locks across {RPCs

854
00:24:54,220 --> 00:24:55,320
0,750
-},|
|

855
00:24:58,620 --> 00:25:00,420
0,150 150,390 390,750 750,1380 1380,1800
and that partially achieved,| your
而这部分实现了，|作为一个副作用，您可以真正为每个RPC启动一个新线程。

856
00:25:00,420 --> 00:25:02,490
0,1260 1290,1650 1650,1740 1740,1830 1830,2070
as achieved as a side

857
00:25:02,490 --> 00:25:03,510
0,270 270,390 390,600 600,960 960,1020
effect of really starting a

858
00:25:03,510 --> 00:25:04,590
0,210 210,510 510,660 660,870 870,1080
new thread for every {RPC

859
00:25:04,590 --> 00:25:05,620
0,150 150,450
- -}.|
|

860
00:25:06,670 --> 00:25:07,300
0,180 180,330 330,450 450,540 540,630
So that's sort of the
这就是整体结构，

861
00:25:07,300 --> 00:25:11,260
0,690 720,1650 1680,2520 2760,3150 3150,3960
overall structure,| {} also by
|还有这个特殊的解决方案，我马上就会和你们分享，

862
00:25:11,290 --> 00:25:12,580
0,420 420,720 720,1020 1020,1140 1140,1290
this particular solution, that I'll

863
00:25:12,580 --> 00:25:13,450
0,300 300,360 360,420 420,720 720,870
share in a second with

864
00:25:13,450 --> 00:25:15,970
0,240 720,1650 1680,2070 2070,2430 2430,2520
you,| again, other structures are
|同样，其他结构也是可能的，

865
00:25:15,970 --> 00:25:17,980
0,630 660,1110 1110,1560 1560,1890 1890,2010
possible,| {} but hopefully this
|但希望这能给你一些，一些想法，

866
00:25:17,980 --> 00:25:19,200
0,180 180,270 270,720
gives you some,

867
00:25:19,260 --> 00:25:21,330
0,510 510,1050 1080,1470 1470,1860 1860,2070
some ideas,| any questions about
|对此有什么问题吗？

868
00:25:21,330 --> 00:25:22,280
0,480
this?|
|

869
00:25:22,820 --> 00:25:24,290
0,270 270,420 420,750 750,1350 1350,1470
What were the threads on
右边的线是什么？

870
00:25:24,290 --> 00:25:25,480
0,90 90,540
the right?|
|

871
00:25:25,650 --> 00:25:26,670
0,240 240,300 300,450 450,630 630,1020
On the right, these guys?|
在右边的这些家伙？|

872
00:25:27,760 --> 00:25:29,080
0,510 540,960 960,1170 1170,1260 1260,1320
Yeah.| {} Those are the
嗯。|这些是传入的消息，

873
00:25:29,080 --> 00:25:30,480
0,330 330,900
incoming messages,|
|

874
00:25:30,890 --> 00:25:32,870
0,360 360,540 540,960 960,1230 1230,1980
so like {append -} RPC,|
因此，就像附加RPC一样，|

875
00:25:32,870 --> 00:25:34,970
0,300 300,600 600,1050 1050,1980 1980,2100
{} for {append -} RPC
对于附加RPC请求或投票请求，

876
00:25:34,970 --> 00:25:36,470
0,90 90,570 570,750 750,990 990,1500
{} request or vote request,|
|

877
00:25:36,680 --> 00:25:38,260
0,390 390,600 600,720 720,1050
{I,think} the only two.|
我想只有两个人。|

878
00:25:40,840 --> 00:25:41,890
0,120 120,450 450,720 720,990 990,1050
{} I also have a
我还有一个问题，

879
00:25:41,890 --> 00:25:45,220
0,540 540,1020 1500,2310 2310,2850 3150,3330
question,| {} what's the, is
|问题是，让单个线程在条件变量上休眠是否有好处，

880
00:25:45,220 --> 00:25:47,290
0,210 210,690 810,1440 1440,1530 1530,2070
there a benefit of having

881
00:25:47,290 --> 00:25:49,720
0,240 240,780 780,1710 1710,2310 2310,2430
a single thread sleeping on

882
00:25:49,720 --> 00:25:51,790
0,90 90,630 630,1320 1320,1560 1560,2070
the condition variable,| and then
|然后只有那根线，

883
00:25:52,090 --> 00:25:54,730
0,570 570,810 810,1110 1110,1620 2040,2640
having only that thread,| a
|一线程发送至申请通道，

884
00:25:54,760 --> 00:25:56,950
0,480 480,1050 1050,1170 1170,1620 1620,2190
thread sending to apply channel,|
|

885
00:25:57,070 --> 00:26:00,040
0,840 840,1530 1650,2160 2160,2370 2370,2970
compared to having each RPC
与让每个RPC线程发送到应用通道相比。

886
00:26:00,040 --> 00:26:02,170
0,630 900,1290 1290,1860 1860,1980 1980,2130
thread {} send to the

887
00:26:02,170 --> 00:26:04,330
0,420 420,1140 1140,1740 1740,2010 2010,2160
apply channel.| Well, everything has
|好的，申请频道的一切都要井然有序，对吧，

888
00:26:04,330 --> 00:26:05,260
0,90 90,270 270,450 450,840 840,930
to go in order on

889
00:26:05,260 --> 00:26:06,970
0,90 90,390 390,750 780,1260 1290,1710
the apply channel, correct,| so
|所以你做的整个日志，

890
00:26:06,970 --> 00:26:08,590
0,120 120,570 570,1080 1080,1290 1290,1620
the whole log that you

891
00:26:08,590 --> 00:26:09,480
0,540
made,|
|

892
00:26:09,510 --> 00:26:10,710
0,240 240,450 450,540 540,810 810,1200
that's in the raft structure
在筏子结构中，必须在应用通道上发送，

893
00:26:10,710 --> 00:26:12,060
0,270 270,330 330,750 780,1140 1140,1350
has to be sent on

894
00:26:12,060 --> 00:26:13,500
0,90 90,450 450,750 750,1320 1320,1440
the apply channel,| exactly in
|完全按照日志中条目的顺序，

895
00:26:13,500 --> 00:26:15,210
0,510 540,900 900,1170 1170,1560 1560,1710
order as the entries are

896
00:26:15,210 --> 00:26:16,360
0,90 90,180 180,600
in the log,|
|

897
00:26:16,540 --> 00:26:17,590
0,300 300,420 420,570 570,750 750,1050
and so that's just more
所以这更容易做到，

898
00:26:17,590 --> 00:26:18,730
0,240 240,330 330,660 660,960 960,1140
easier to do,| I find
|我发现用单线很容易做到，

899
00:26:18,730 --> 00:26:19,480
0,90 90,330 330,420 420,600 600,750
it easy to do with

900
00:26:19,480 --> 00:26:22,140
0,90 90,720 1110,1620 1620,2040
the single {} thread,|
|

901
00:26:22,470 --> 00:26:23,700
0,150 150,510 510,870 870,1110 1110,1230
because that basically goes through
因为这基本上要经过木筏的原木

902
00:26:23,700 --> 00:26:24,660
0,90 90,390 390,690 690,780 780,960
the raft log| and there's
|有一个接一个的棍子，进入申请频道的条目，

903
00:26:24,660 --> 00:26:25,860
0,270 270,510 510,810 810,930 930,1200
sticks from one by one,

904
00:26:25,860 --> 00:26:27,270
0,90 90,450 450,810 810,1110 1110,1410
the entries onto the apply

905
00:26:27,270 --> 00:26:28,200
0,420
channel,|
|

906
00:26:28,580 --> 00:26:29,330
0,240 240,390 390,510 510,720 720,750
and there's no sort of
而且没有必要进行任何协调。

907
00:26:29,330 --> 00:26:31,060
0,570 570,1170
coordination necessary.|
|

908
00:26:32,000 --> 00:26:33,740
0,210 210,450 450,720 720,1080
That makes sense, okay.|
这是有道理的，好吧。|

909
00:26:34,240 --> 00:26:35,170
0,240 240,390 390,510 510,810 810,930
Yeah, so {like -} we
是啊，就像我们大家都知道的，

910
00:26:35,170 --> 00:26:36,580
0,330 330,450 450,720
all you know,|
|

911
00:26:36,820 --> 00:26:38,140
0,150 150,330 330,540 540,870 870,1320
yeah, so this goes like
是的，这就像是进入了实际使用RAFT库的服务器。

912
00:26:39,130 --> 00:26:41,800
0,510 540,1110 1110,1590 2070,2550 2550,2670
up into the servers that

913
00:26:41,800 --> 00:26:43,420
0,270 270,750 750,900 900,1170 1170,1620
actually uses the raft library.|
|

914
00:26:45,670 --> 00:26:47,410
0,300 300,510 510,1020 1020,1260 1260,1740
Okay, so one more word
好的，再多说一句细粒度与粗粒度的对比，

915
00:26:47,440 --> 00:26:50,050
0,720 750,1470 1470,1650 1650,1710 1710,2610
about about sort of fine-grained

916
00:26:50,200 --> 00:26:53,290
0,600 600,1320 1860,2640 2700,2970 2970,3090
versus coarse-grained,| {} some of
|你们中的一些人，这在早期是一个常见的错误，

917
00:26:53,290 --> 00:26:55,090
0,570 690,930 930,1260 1260,1470 1470,1800
you, {} it's a common

918
00:26:55,090 --> 00:26:57,670
0,840 1260,1680 1680,2190 2190,2430 2430,2580
mistake early on,| when you
|当你还没做那么多的时候，你知道[]编程，

919
00:26:57,670 --> 00:26:58,840
0,180 180,570 570,780 780,1080 1080,1170
haven't done that much you

920
00:26:58,840 --> 00:27:01,930
0,360 360,870 870,1530 1920,2670 2880,3090
know [] programming,| {} you
|如果您有自己的RPC结构，您可能会这样做，

921
00:27:01,930 --> 00:27:03,250
0,240 240,390 390,960 960,1080 1080,1320
might do, if you have

922
00:27:03,250 --> 00:27:05,600
0,480 660,1260 1260,1950
your RPC struct,|
|

923
00:27:06,160 --> 00:27:07,390
0,150 150,270 270,600 600,750 750,1230
you know maybe you have
你知道，也许你有像原木和其他一些领域，

924
00:27:07,390 --> 00:27:08,800
0,180 180,270 270,1020 1020,1260 1260,1410
like the log and some

925
00:27:08,800 --> 00:27:11,110
0,240 240,780 780,1320 1710,1950 1950,2310
other fields,| and some people
|有些人，或者有时你知道，拥有多把锁是有诱惑力的，也不是不合理的，

926
00:27:11,110 --> 00:27:12,370
0,210 210,750 750,840 840,1050 1050,1260
or sometimes you know there's

927
00:27:12,370 --> 00:27:14,890
0,60 60,990 990,1440 1470,1830 1830,2520
a [temptation] or not unreasonable

928
00:27:15,190 --> 00:27:17,140
0,120 120,450 450,810 810,1440 1770,1950
to have multiple locks,| so
|因此，不是只有一把锁，甚至是一把锁，

929
00:27:17,140 --> 00:27:18,490
0,270 270,330 330,600 600,690 690,1350
instead of having a single

930
00:27:21,790 --> 00:27:23,290
0,570 570,990 990,1260 1260,1440 1440,1500
lock or even have a

931
00:27:23,290 --> 00:27:24,720
0,300 300,720
single one,|
|

932
00:27:25,030 --> 00:27:26,050
0,210 210,450 450,600 600,930 930,1020
but not really hold it
但并不是真的持有很长时间。

933
00:27:26,050 --> 00:27:27,460
0,150 150,210 210,480 480,840
for a long time.|
|

934
00:27:36,550 --> 00:27:38,320
0,540 540,1140
And, {}
而且，我认为，在一般情况下，对代码进行推理有点困难，

935
00:27:38,850 --> 00:27:40,020
0,180 180,270 270,420 420,540 540,1170
and I think in general

936
00:27:40,080 --> 00:27:41,640
0,660 660,1050 1050,1260 1260,1320 1320,1560
minds reasoning about the code

937
00:27:41,640 --> 00:27:44,280
0,300 300,720 750,1320 1320,1770 2010,2640
{a,little,bit} hard,| {} so {for,example}
|例如，你知道你可能会做的常见事情，

938
00:27:44,280 --> 00:27:45,240
0,60 60,360 360,600 600,750 750,960
{} common thing that you

939
00:27:45,240 --> 00:27:47,250
0,240 960,1230 1230,1380 1380,1740 1740,2010
know you might do,| then
|这就好比如果你有一个RPC处理程序，

940
00:27:47,250 --> 00:27:48,090
0,150 150,300 300,570 570,660 660,840
it's like if you have

941
00:27:48,090 --> 00:27:49,680
0,60 60,540 540,1050 1080,1440 1440,1590
an RPC handler,| like this
|像这样的某个请求处理程序，您知道无论args回复什么，

942
00:27:49,680 --> 00:27:52,580
0,240 240,600 600,1170
some Request handler,

943
00:27:52,610 --> 00:27:56,090
0,210 210,510 510,1140 2100,2580 2580,3480
{you,know} whatever args {} reply,|
|

944
00:27:57,250 --> 00:27:58,600
0,240 240,360 360,720 720,840 840,1350
{} just sketching this out,|
只是勾勒出这幅图，|

945
00:27:58,600 --> 00:27:59,500
0,90 90,270 270,510 510,780 780,900
you know you might know
你知道你可能知道些什么，

946
00:27:59,500 --> 00:28:00,580
0,330 330,420 420,600 600,750 750,1080
something,| you might do like
|无论你走什么，你都可以做，

947
00:28:00,580 --> 00:28:02,500
0,450 450,690 690,1320
whatever you walk,|
|

948
00:28:03,510 --> 00:28:05,670
0,810 1230,1470 1470,1920 1920,2010 2010,2160
{} do something you know
做一些你知道的关于争论的事情，

949
00:28:05,670 --> 00:28:07,230
0,180 180,900 900,1260 1260,1410 1410,1560
with arguments,| maybe you know
|也许你知道在木筏结构中更新一些你知道的状态

950
00:28:07,230 --> 00:28:08,880
0,510 510,780 780,1380 1410,1530 1530,1650
updates some state you know

951
00:28:08,880 --> 00:28:11,010
0,270 270,750 930,1380 1380,2010 2010,2130
in the raft structure| and
|为了解锁，

952
00:28:11,010 --> 00:28:12,920
0,180 180,570 570,690 690,1230
to {mu.unlock - -},|
|

953
00:28:14,760 --> 00:28:16,290
0,300 300,570 570,690 690,1080 1230,1530
then maybe do some other
然后也许做一些其他的事情，

954
00:28:16,290 --> 00:28:17,610
0,360 360,630 630,780 780,990 990,1320
stuff,| there's not maybe directly
|可能与木筏结构没有直接关系，

955
00:28:17,610 --> 00:28:19,140
0,390 390,540 540,960 990,1200 1200,1530
related to the raft structure,|
|

956
00:28:19,140 --> 00:28:20,250
0,90 90,180 180,570 570,840 840,1110
and then basically maybe grab
然后基本上可能会再次抓住锁，

957
00:28:20,250 --> 00:28:22,260
0,90 90,300 300,840
the lock again,|
|

958
00:28:23,440 --> 00:28:24,790
0,300 300,660 660,750 750,870 870,1350
and then you know whatever
然后你知道任何更新和阅读可能会再次筏结构

959
00:28:24,820 --> 00:28:26,320
0,420 420,570 570,870 870,1140 1140,1500
update and read maybe to

960
00:28:26,350 --> 00:28:27,910
0,270 270,630 630,870 870,990 990,1560
raft structure again| and then
|然后解锁

961
00:28:27,910 --> 00:28:29,650
0,390 900,1080 1080,1410 1410,1560 1560,1740
unlock| and all you're sort
|所有这些都在一个RPC处理程序中。

962
00:28:29,650 --> 00:28:31,630
0,60 60,210 210,540 570,1410 1470,1980
of in a single RPC

963
00:28:31,630 --> 00:28:32,880
0,510
handler.|
|

964
00:28:33,160 --> 00:28:34,620
0,840
And,
而且，作为一种思维练习，

965
00:28:35,970 --> 00:28:37,800
0,330 330,630 630,780 780,1050 1050,1830
just as a thought exercise,|
|

966
00:28:37,800 --> 00:28:39,960
0,270 270,390 390,1020 1050,1500 1500,2160
what is risky about this
这种细粒度锁定的风格有什么风险。

967
00:28:39,990 --> 00:28:41,370
0,270 270,360 360,930 930,1110 1110,1380
sort of style of {fine-grained

968
00:28:41,370 --> 00:28:42,620
0,240 240,720
-} locking.|
|

969
00:28:42,740 --> 00:28:43,550
0,180 180,420 420,570 570,720 720,810
{} I know this is
我知道这有点做作，

970
00:28:43,550 --> 00:28:44,960
0,120 120,270 270,900 900,1140 1140,1410
a bit artificial,| but it
|但这是一种合理的普遍现象，

971
00:28:44,960 --> 00:28:47,570
0,90 90,360 450,1110 1110,1620 1680,2610
is a reasonable common, {}|
|

972
00:28:48,120 --> 00:28:49,920
0,300 300,480 480,690 990,1320 1320,1800
{} sort of early mistake
一种你知道你可能会犯的早期错误。

973
00:28:49,920 --> 00:28:50,700
0,150 150,330 330,420 420,600 600,780
that you know you might

974
00:28:50,700 --> 00:28:51,720
0,450
make.|
|

975
00:28:53,970 --> 00:28:54,960
0,90 90,180 180,300 300,540 540,990
You have to like recheck
你必须在每次再次锁定之前重新检查你的假设，对吗？

976
00:28:54,960 --> 00:28:56,480
0,120 120,990
your assumptions

977
00:28:56,510 --> 00:28:59,000
0,750 990,1710 1710,2010 2010,2160 2160,2490
before locking again every time,

978
00:28:59,000 --> 00:29:00,950
0,390 420,1140 1140,1260 1260,1380 1380,1950
right.| Yeah, you know basically
|是的，你知道基本上这是原子执行的，

979
00:29:00,950 --> 00:29:03,860
0,300 300,1020 1320,2130 2160,2460 2460,2910
this executes atomically,| this executes
|这会自动执行它，

980
00:29:03,860 --> 00:29:05,450
0,60 60,720 840,1050 1050,1500 1500,1590
it atomically,| but lots of
|但中间可能会发生很多事情，对吧，

981
00:29:05,450 --> 00:29:06,680
0,240 240,330 330,660 660,750 750,1230
things can happen in between,

982
00:29:07,010 --> 00:29:07,970
0,270 270,390 390,450 450,750 750,960
right,| so for example new
|例如，新的RPC可能一直在进来，

983
00:29:07,970 --> 00:29:08,990
0,150 150,570 570,780 780,870 870,1020
{RPCs -} might have been

984
00:29:08,990 --> 00:29:10,220
0,300 300,660
coming in,|
|

985
00:29:10,910 --> 00:29:12,230
0,300 300,720 720,930 930,1050 1050,1320
and they might be running
他们可能也在奔跑，

986
00:29:12,230 --> 00:29:13,280
0,330 330,450 450,570 570,780 780,1050
too,| and they might actually
|他们可能实际上一直在更新木筏结构或木筏状态

987
00:29:13,280 --> 00:29:15,410
0,120 120,270 270,810 810,1230 1260,2130
have been updating the raft

988
00:29:15,410 --> 00:29:18,020
0,480 510,660 660,1050 1050,1530 1590,2610
struct or raft state| between
|在这两个关键部分之间，

989
00:29:18,020 --> 00:29:20,020
0,210 210,480 480,840 840,1500
these two critical sections,|
|

990
00:29:20,170 --> 00:29:22,450
0,480 480,690 690,840 840,1080 1920,2280
between one and two,| and
在一点到两点之间，|所以当你知道的时候，

991
00:29:22,450 --> 00:29:23,350
0,180 180,330 330,420 420,840 840,900
so by the time you

992
00:29:23,350 --> 00:29:25,150
0,150 150,450 450,1020 1260,1530 1530,1800
know to the,| you start
|你开始运行关键部分2，

993
00:29:25,150 --> 00:29:26,830
0,270 270,600 600,840 840,1260 1380,1680
running critical section 2,| raft
|木筏结构可能是完全不同的，

994
00:29:26,830 --> 00:29:28,660
0,300 300,450 450,540 540,1290 1290,1830
structure might be completely different,|
|

995
00:29:28,990 --> 00:29:30,460
0,180 180,450 450,510 510,1170 1170,1470
and {have,might -} completely different
可能有完全不同的内容，

996
00:29:30,460 --> 00:29:31,500
0,540
content,|
|

997
00:29:31,910 --> 00:29:33,710
0,540 720,1050 1050,1260 1260,1440 1440,1800
and, {} so to avoid
所以，为了避免这种情况，

998
00:29:33,710 --> 00:29:34,310
0,120 120,210 210,390 390,540 540,600
you know those kind of

999
00:29:34,310 --> 00:29:36,650
0,840 990,1650 1650,1800 1800,1950 1950,2340
situations,| {} you know my
|你知道，我一般的做法是，基本上，

1000
00:29:36,680 --> 00:29:38,060
0,330 330,660 660,780 780,870 870,1380
general approach is to basically,|
|

1001
00:29:38,060 --> 00:29:39,230
0,90 90,180 210,780 780,1050 1050,1170
you know basically have is
你知道，基本上有一个关键的，一个关键的部分，

1002
00:29:39,230 --> 00:29:41,300
0,120 120,570 570,1050 1050,1650 1680,2070
to be one critical, one

1003
00:29:41,300 --> 00:29:42,540
0,300 300,660
critical section,|
|

1004
00:29:42,600 --> 00:29:43,530
0,360 360,510 510,600 600,810 810,930
{} so I don't have
所以我不需要重新检查任何东西，

1005
00:29:43,530 --> 00:29:45,630
0,90 90,750 780,1440 1710,1890 1890,2100
to recheck any,| I don't
|我不需要在新的州重新检查，

1006
00:29:45,630 --> 00:29:46,800
0,90 90,180 180,600 600,690 690,1170
have to recheck the state

1007
00:29:46,800 --> 00:29:47,820
0,150 150,300 300,540 540,870 870,1020
at the new one,| the
|第二个关键部分开始。

1008
00:29:47,820 --> 00:29:49,940
0,420 450,1110
second {

1009
00:29:50,360 --> 00:29:53,100
0,810 1080,1500 1500,1740 1740,2220
-} critical section starts.|
|

1010
00:29:53,220 --> 00:29:54,560
0,180 180,270 270,420 420,810
Does that make sense?|
这说得通吗？|

1011
00:29:56,410 --> 00:29:57,610
0,240 240,600 600,810 810,960 960,1200
This problem shows up in
这个问题表现在不同的方面，你知道，

1012
00:29:57,610 --> 00:29:59,860
0,600 630,750 750,1170 1560,1980 1980,2250
different you know,| {} or
|或者这个问题可以以不同的方式，以不同的方式表现出来，

1013
00:29:59,860 --> 00:30:00,880
0,300 300,570 570,690 690,870 870,1020
this problem can show up

1014
00:30:00,880 --> 00:30:02,830
0,240 270,390 390,870 900,1770 1770,1950
in a different fashion, in

1015
00:30:02,830 --> 00:30:04,480
0,240 240,750 810,1080 1080,1290 1290,1650
different ways,| {} but instead
|但问题总是一样，而不是[]。

1016
00:30:04,480 --> 00:30:05,710
0,60 60,570 570,930 930,1170 1170,1230
of [] problems, always the

1017
00:30:05,710 --> 00:30:06,490
0,360 360,570 570,660 660,750 750,780
same,| if you do a
|如果您执行大量细粒度锁定，

1018
00:30:06,490 --> 00:30:07,600
0,120 120,180 180,630 630,990 990,1110
lot of fine-grained locking,| you're
|你将会有额外的交错

1019
00:30:07,600 --> 00:30:08,920
0,120 120,210 210,450 450,1020 1020,1320
going to have additional {interleavings

1020
00:30:08,920 --> 00:30:10,360
0,690 840,1110 1110,1200 1200,1350 1350,1440
-}| and you have to
|而且你必须考虑并确保你没有不正确的交错会导致不正确的行为。

1021
00:30:10,360 --> 00:30:12,970
0,630 750,1200 1230,1500 1500,1920 1920,2610
consider and make sure that

1022
00:30:12,970 --> 00:30:14,590
0,90 90,330 330,570 570,900 930,1620
you don't have a incorrect

1023
00:30:15,070 --> 00:30:17,410
0,780 780,1500 1500,1920 1920,2250 2250,2340
{} interleavings will result in

1024
00:30:17,410 --> 00:30:19,860
0,540 1290,2070
incorrect behavior.|
|

1025
00:30:22,150 --> 00:30:23,350
0,150 150,360 360,690 690,750 750,1200
{} I want to ask,|
我想问一下，|

1026
00:30:23,350 --> 00:30:24,940
0,270 270,960 960,1110 1110,1290 1290,1590
is it but it's not
是不是无法避免复查条件，

1027
00:30:24,940 --> 00:30:27,730
0,570 570,840 840,1800 2220,2430 2430,2790
possible to avoid {rechecking -}

1028
00:30:27,730 --> 00:30:29,380
0,630 630,1020 1020,1200 1200,1530 1530,1650
conditions,| after you send an
|在发送RPC线程之后，在RBC线程内部。

1029
00:30:29,380 --> 00:30:32,230
0,600 600,1080 1590,2250 2250,2370 2370,2850
RPC thread, inside the RBC

1030
00:30:32,230 --> 00:30:33,380
0,540
thread.|
|

1031
00:30:33,560 --> 00:30:36,080
0,1020 1020,1740 1740,1950 1950,2220 2220,2520
Yeah, you, you cannot hold
对，你，你不能边发边锁，对，

1032
00:30:36,080 --> 00:30:37,580
0,30 30,360 360,720 720,1170 1170,1500
a lock while sending, right,|
|

1033
00:30:37,580 --> 00:30:38,660
0,300 300,480 480,600 600,990 990,1080
so you should not you
所以你不应该你知道，

1034
00:30:38,660 --> 00:30:40,070
0,360 540,930 930,1050 1050,1170 1170,1410
know,| here you should not
|在这里，您不应该将您知道的任何内容称为发送RPC，

1035
00:30:40,070 --> 00:30:41,810
0,390 390,990 1020,1200 1200,1350 1350,1740
call whatever you know send

1036
00:30:41,810 --> 00:30:43,260
0,660
RPC,|
|

1037
00:30:44,030 --> 00:30:45,140
0,540 540,630 630,840 840,960 960,1110
because you can't do that
因为当你拿着锁的时候你不能这样做，

1038
00:30:45,140 --> 00:30:46,340
0,300 300,600 600,690 690,990 990,1200
while holding a lock,| because
|因为它们很容易导致僵局

1039
00:30:46,340 --> 00:30:47,270
0,120 120,270 270,570 570,870 870,930
they can easily result in

1040
00:30:47,270 --> 00:30:48,500
0,480 480,690 690,840 840,1170 1170,1230
deadlock| or you're holding a
|或者你拿着一把锁，

1041
00:30:48,500 --> 00:30:49,370
0,390 390,480 480,660 660,750 750,870
lock,| you sent it to
|您在仍持有锁的情况下将其发送给RPC中的对等体，

1042
00:30:49,370 --> 00:30:50,960
0,540 540,690 690,840 840,1260 1260,1590
{a,peer} in {RPC -} while

1043
00:30:50,960 --> 00:30:52,250
0,210 210,480 480,540 540,870 870,1290
still holding the lock,| {the,peer}
|对等体实际上将RPC发送给您，

1044
00:30:52,250 --> 00:30:54,800
0,450 840,1560 1560,1860 1860,1980 1980,2550
actually {sends,RPC -} to you,|
|

1045
00:30:54,980 --> 00:30:56,390
0,480 480,630 630,1110 1110,1230 1230,1410
but you're holding you know,|
但你拿着你知道的，|

1046
00:30:56,390 --> 00:30:58,430
0,360 630,1020 1020,1170 1470,1800 1800,2040
that you're the leader already
你是领导者已经掌握了锁和[]结构，

1047
00:30:58,430 --> 00:30:59,360
0,330 330,420 420,780 780,870 870,930
holds the lock and the

1048
00:30:59,360 --> 00:31:00,710
0,210 210,540 540,690 690,840 840,1350
[] structure,| so the response
|因此响应不能被处理

1049
00:31:00,710 --> 00:31:03,050
0,330 330,840 870,1230 1230,1890 2190,2340
cannot be {} process| and
|也许你知道这两者是相互依存的

1050
00:31:03,050 --> 00:31:03,920
0,360 360,420 420,540 540,630 630,870
maybe you know the two

1051
00:31:03,920 --> 00:31:06,560
0,390 390,1500 1740,2310 2310,2520 2520,2640
are interdependent| and may you
|希望你们会陷入僵局。

1052
00:31:06,560 --> 00:31:07,640
0,120 120,150 150,750
have a deadlock.|
|

1053
00:31:09,450 --> 00:31:11,490
0,450 450,1020 1020,1440 1440,1680 1680,2040
One thing that's worth noting
值得注意的一件事是，

1054
00:31:11,490 --> 00:31:13,350
0,570 1110,1380 1380,1500 1500,1680 1680,1860
is,| something I saw some
|我看到一些人在做的事情是，

1055
00:31:13,350 --> 00:31:15,000
0,240 240,720 720,1290 1320,1530 1530,1650
people doing is that,| they
|它们脱离一个线程来发送RPC，

1056
00:31:15,000 --> 00:31:17,010
0,330 330,690 690,1110 1110,1800 1800,2010
spin off a thread to

1057
00:31:17,010 --> 00:31:18,930
0,300 300,360 360,1110 1380,1650 1650,1920
send an RPC,| in that
|在该线程中，它们获取锁来为RPC准备参数

1058
00:31:18,930 --> 00:31:20,910
0,570 600,1200 1230,1500 1500,1620 1620,1980
thread, they take the lock

1059
00:31:20,910 --> 00:31:22,080
0,60 60,450 450,600 600,1110 1110,1170
to prepare the arguments for

1060
00:31:22,080 --> 00:31:23,550
0,60 60,780 900,1230 1230,1410 1410,1470
the RPC| and then they
|然后他们不加锁地发送RPC，

1061
00:31:23,550 --> 00:31:25,020
0,180 180,240 240,690 690,990 990,1470
send the RPC without lock,|
|

1062
00:31:25,140 --> 00:31:26,610
0,690 720,870 870,990 990,1170 1170,1470
and you can do that,|
你可以做到这一点|

1063
00:31:26,610 --> 00:31:29,100
0,90 90,240 240,960 1230,1680 1860,2490
but it's often a fewer
但它通常是较少的交错，

1064
00:31:29,100 --> 00:31:30,690
0,240 240,780 780,990 990,1140 1140,1590
{interleavings -},| if you generate
|如果为RPC生成参数，

1065
00:31:30,690 --> 00:31:32,220
0,210 210,690 690,780 780,840 840,1530
the arguments for the RPC,|
|

1066
00:31:32,280 --> 00:31:33,420
0,570 570,660 660,870 870,1050 1050,1140
before you [spit] off the
在你把线[吐]下来之前，

1067
00:31:33,420 --> 00:31:35,670
0,690 720,900 900,1440 1650,1980 1980,2250
thread,| that actually sends it.|
|实际上就是它发出的信号。|

1068
00:31:38,420 --> 00:31:39,890
0,420 420,690 690,780 780,1320 1320,1470
Good point, we'll see, we'll
说得好，我们会看到，我们会展示，这将在一秒钟内呈现出来，

1069
00:31:39,890 --> 00:31:40,760
0,270 270,450 450,540 540,750 750,870
show, this will show up

1070
00:31:40,760 --> 00:31:41,780
0,90 90,150 150,450 450,840 840,1020
in a second,| actually in.|
|实际上是在里面。|

1071
00:31:42,140 --> 00:31:44,330
0,300 300,540 540,900 900,1290 1320,2190
{} But doesn't that cause,|
但这不是导致，|

1072
00:31:44,360 --> 00:31:47,150
0,270 270,900 900,1320 1320,1950 2130,2790
so sometimes it's actually depending
因此，有时它实际上取决于实现，

1073
00:31:47,150 --> 00:31:48,230
0,90 90,150 150,840 840,900 900,1080
on the implementation,| I think
|我认为让其他RPC看到这些变化是有益的，

1074
00:31:48,230 --> 00:31:50,060
0,120 120,720 720,1110 1200,1650 1650,1830
it's beneficial for other {RPCs

1075
00:31:50,060 --> 00:31:51,620
0,480 480,630 630,780 780,960 960,1560
-} to see the changes,|
|

1076
00:31:51,620 --> 00:31:54,110
0,360 750,1380 1530,2130 2130,2280 2280,2490
like for example if other
例如，如果其他RPC取得了进展，您希望开始

1077
00:31:54,110 --> 00:31:55,730
0,150 150,480 480,810 810,1470 1470,1620
{RPCs -} made progress you

1078
00:31:55,730 --> 00:31:56,930
0,210 210,270 270,600 600,840 840,1200
want to start off| from
|来自最近的最后一次日志索引。

1079
00:31:56,930 --> 00:31:58,340
0,120 120,480 480,870 870,1230 1230,1410
the most recent last log

1080
00:31:58,340 --> 00:31:59,500
0,630
index.|
|

1081
00:32:00,250 --> 00:32:03,550
0,870 870,1350 1770,2640 2640,2940 2940,3300
{ -} Perhaps, yeah it
也许，是的，这取决于你到底做了什么，

1082
00:32:03,550 --> 00:32:04,900
0,300 300,450 450,1020 1020,1230 1230,1350
depends on exactly what you

1083
00:32:04,900 --> 00:32:07,090
0,360 450,1140 1320,1860 1860,2010 2010,2190
do,| {} like how your
|比如您的实现是如何工作的，

1084
00:32:07,090 --> 00:32:09,820
0,480 480,1050 1290,1890 1890,2550 2580,2730
implementation works,| { -} I
|我我不会那么做的，

1085
00:32:09,820 --> 00:32:11,380
0,360 360,600 600,690 690,1050 1350,1560
I don't do that,| at
|至少，我不认为我做了你建议的事，

1086
00:32:11,380 --> 00:32:12,040
0,180 180,240 240,390 390,570 570,660
least, I don't think I

1087
00:32:12,040 --> 00:32:14,020
0,210 210,540 540,900 930,1530 1620,1980
do what you're suggesting, {}|
|

1088
00:32:14,020 --> 00:32:15,370
0,240 240,480 480,750 750,840 840,1350
when I send an RPC
当我向所有对等点发送RPC时，

1089
00:32:15,370 --> 00:32:16,300
0,150 150,300 300,390 390,780 780,930
to all the peers,| all
|所有的同行都会得到完全相同的论点，

1090
00:32:16,300 --> 00:32:16,900
0,90 90,360 360,420 420,540 540,600
the peers are going to

1091
00:32:16,900 --> 00:32:18,490
0,90 90,630 630,720 720,960 960,1590
get exactly the same arguments,|
|

1092
00:32:19,980 --> 00:32:21,210
0,240 240,390 390,690 690,780 780,1230
and no change in between.|
在这两者之间没有变化。|

1093
00:32:26,350 --> 00:32:28,510
0,720 810,1260 1260,1680 1740,2010 2010,2160
Okay, {} so okay, let
好的，那么好的，让我来谈一谈实现的问题，

1094
00:32:28,510 --> 00:32:29,950
0,150 150,840 870,1200 1200,1230 1230,1440
me then talk a little

1095
00:32:29,950 --> 00:32:32,080
0,120 120,300 300,420 420,1740 1740,2130
bit about the implementation,| can
|人们可以阅读吗？人们可以阅读屏幕吗？

1096
00:32:32,110 --> 00:32:34,780
0,300 300,660 1140,1860 2190,2550 2550,2670
people read, can people read

1097
00:32:34,780 --> 00:32:35,780
0,60 60,480
the screen?|
|

1098
00:32:35,870 --> 00:32:39,140
0,390 390,600 600,1170 2010,2430 2790,3270
Sorry, {I,have,a} {follow,question}.| Yeah. {}|
对不起，我有一个接下来的问题。|嗯。|

1099
00:32:39,170 --> 00:32:40,310
0,300 300,420 420,600 600,720 720,1140
So I think you mentioned
所以我想你提到过，我们不应该通过应用渠道发送东西。

1100
00:32:40,310 --> 00:32:41,780
0,210 210,300 300,690 690,1020 1020,1470
that we shouldn't lock around

1101
00:32:41,780 --> 00:32:43,520
0,540 540,960 960,1170 1170,1380 1410,1740
sending things over the apply

1102
00:32:43,520 --> 00:32:45,220
0,600 720,1170
channel. {}|
|

1103
00:32:45,720 --> 00:32:49,260
0,1140 1410,2280 2280,2850 2850,3180 3180,3540
Yes, {} although let me,|
是的，虽然让我，|

1104
00:32:49,500 --> 00:32:53,040
0,420 1170,1410 1410,1950 2340,3210 3210,3540
yeah, it's risky,| because while
是啊，这很冒险，|因为当你握着锁的时候，对吧，

1105
00:32:53,040 --> 00:32:54,450
0,150 150,510 510,630 630,1140 1170,1410
you're holding the lock, right,|
|

1106
00:32:54,450 --> 00:32:55,380
0,210 210,420 420,540 540,630 630,930
you send on the apply
你在应用频道上发送，

1107
00:32:55,380 --> 00:32:56,730
0,420 420,570 570,750 750,990 990,1350
channel,| you might also block
|您也可以阻止坐在应用频道上，

1108
00:32:56,730 --> 00:32:57,630
0,90 90,390 390,510 510,600 600,900
{} sitting on the apply

1109
00:32:57,630 --> 00:33:00,930
0,450 450,1050 1260,2040 2070,2790 3090,3300
channel,| because the servers you
|因为你最了解的另一端的服务器肯定在读，对吗，

1110
00:33:00,930 --> 00:33:02,430
0,120 120,720 720,960 960,1140 1140,1500
know most the other side

1111
00:33:02,430 --> 00:33:03,930
0,210 210,330 330,660 660,1080 1080,1500
must be reading, correct,| before
|在你解锁之前，

1112
00:33:03,930 --> 00:33:05,100
0,120 120,330 330,780
you're {unlock -},|
|

1113
00:33:05,590 --> 00:33:06,550
0,120 120,360 360,450 450,570 570,960
of course, you have buffered
当然，你已经缓冲了又缓冲了，

1114
00:33:06,550 --> 00:33:07,780
0,240 240,600 600,900 900,1200 1200,1230
and buffered,| it changed a
|它有一点变化，

1115
00:33:07,780 --> 00:33:08,710
0,150 150,330 330,540 540,780 780,930
little bit,| let's say we
|假设我们有很多缓冲通道，

1116
00:33:08,710 --> 00:33:09,550
0,90 90,150 150,420 420,510 510,840
have a lot of buffer

1117
00:33:09,550 --> 00:33:11,560
0,270 270,450 450,690 690,1080 1380,2010
channel,| but just an unbuffered
|但只是一个无缓冲的频道，

1118
00:33:11,560 --> 00:33:12,580
0,480
channel,|
|

1119
00:33:12,880 --> 00:33:16,090
0,300 300,480 480,600 600,1230 2970,3210
and so the reader, if
所以读者，如果没有读者，

1120
00:33:16,090 --> 00:33:18,340
0,180 180,390 390,990 1740,2040 2040,2250
there's no reader,| then this
|那么这个写入者就会阻止，

1121
00:33:18,340 --> 00:33:20,080
0,450 450,630 630,1230
writer will block,|
|

1122
00:33:20,770 --> 00:33:22,270
0,270 270,540 540,930 930,1020 1020,1500
and maybe holding the lock|
也许还会握着锁|

1123
00:33:22,360 --> 00:33:24,190
0,660 660,960 960,1170 1170,1350 1350,1830
and {} that might be
这可能是你知道的，主要是以后的问题

1124
00:33:24,190 --> 00:33:25,750
0,90 90,300 300,1080 1080,1200 1200,1560
you know mainly to problems

1125
00:33:25,750 --> 00:33:27,730
0,420 720,1200 1200,1350 1350,1440 1440,1980
later| and lead to deadlocks.|
|并导致僵局。|

1126
00:33:28,510 --> 00:33:29,620
0,690

1127
00:33:30,460 --> 00:33:33,430
0,630 630,780 780,1200 1230,1860 2400,2970
[] on that, {} isn't
[]在那上面，这不是很好吗，

1128
00:33:33,430 --> 00:33:34,900
0,150 150,330 330,720 720,1200 1260,1470
this all right,| like like
|就像应用频道永远不会，

1129
00:33:34,900 --> 00:33:36,790
0,120 120,510 510,990 990,1170 1170,1890
the apply channel will never,|
|

1130
00:33:37,150 --> 00:33:40,570
0,270 270,1110 1530,2400 2700,2970 2970,3420
like the client who's calling
就像客户给RAFT打电话一样，

1131
00:33:40,570 --> 00:33:42,400
0,600 930,1230 1230,1440 1440,1590 1590,1830
raft,| well [never] would hold
|嗯[永远不会]拿着锁，对吧，他们就像。

1132
00:33:42,400 --> 00:33:43,600
0,90 90,450 450,690 690,840 840,1200
the lock, right, they're like.|
|

1133
00:33:43,630 --> 00:33:45,490
0,600 720,1110 1110,1230 1230,1650 1650,1860
{} You don't, not not
你不是，不是真的，

1134
00:33:45,490 --> 00:33:46,340
0,420
true,|
|

1135
00:33:46,370 --> 00:33:47,480
0,180 180,330 330,570 570,870 870,1110
{here's - -} are sort
这是一种快速位于顶部的服务器，

1136
00:33:47,480 --> 00:33:48,950
0,210 330,900 900,1140 1140,1380 1380,1470
of servers quick sitting on

1137
00:33:48,950 --> 00:33:50,000
0,510
top,|
|

1138
00:33:50,140 --> 00:33:52,120
0,450 450,1050 1050,1230 1230,1620 1620,1980
calling start and reading from
调用Start并从应用通道读取，

1139
00:33:52,120 --> 00:33:54,300
0,420 600,1050 1050,1620
the apply channel,|
|

1140
00:33:54,360 --> 00:33:56,400
0,180 180,420 420,630 630,1200 1440,2040
but it's called start,| start
但它被称为Start，|开始是你知道的，取决于你如何做到这一点，

1141
00:33:56,400 --> 00:33:57,450
0,390 390,510 510,630 630,960 960,1050
is you know depending on

1142
00:33:57,450 --> 00:33:58,230
0,120 120,240 240,420 420,600 600,780
how you do it,| you
|你从一根线开始

1143
00:33:58,230 --> 00:33:59,340
0,330 330,450 450,510 510,900 930,1110
start as a thread| and
|然后带着那条线跳进木筏库

1144
00:33:59,340 --> 00:34:00,690
0,300 300,630 630,810 810,1050 1050,1350
jumps into with that thread

1145
00:34:00,690 --> 00:34:02,430
0,420 420,600 600,930 930,1410 1410,1740
into the raft library| and
|至少在我的实现中，

1146
00:34:02,430 --> 00:34:03,600
0,180 180,330 330,390 390,540 540,1170
at least in my implementation,|
|

1147
00:34:03,600 --> 00:34:04,740
0,90 90,300 300,420 420,600 600,1140
the first thing that {}
启动函数做的第一件事实际上是包装木筏锁，

1148
00:34:04,860 --> 00:34:06,120
0,390 390,690 690,960 960,1050 1050,1260
start function does is actually

1149
00:34:06,120 --> 00:34:07,580
0,270 270,330 330,630 630,1020
wrap the raft lock,|
|

1150
00:34:10,250 --> 00:34:11,600
0,600 630,780 780,1020 1020,1260 1260,1350
and it can't grab the
它抓不到锁，木筏锁，

1151
00:34:11,600 --> 00:34:13,310
0,390 420,810 810,1110 1110,1350 1350,1710
lock, raft lock,| is actually
|实际上要么是应用线程已经在持有它，

1152
00:34:13,310 --> 00:34:14,750
0,600 600,750 750,1050 1050,1350 1350,1440
either the apply thread is

1153
00:34:14,750 --> 00:34:15,830
0,270 270,660 660,780 780,1020 1020,1080
already holding it,| trying to
|想要在申请频道上拿到一些东西，

1154
00:34:15,830 --> 00:34:16,820
0,150 150,420 420,570 570,630 630,990
get something on the apply

1155
00:34:16,820 --> 00:34:18,380
0,390 660,930 930,990 990,1380 1380,1560
channel,| but the servers now
|但服务器现在不会从应用通道读取，

1156
00:34:18,380 --> 00:34:19,400
0,270 270,450 450,630 630,690 690,1020
won't read from the apply

1157
00:34:19,400 --> 00:34:20,330
0,270 270,600 600,660 660,780 780,930
channel,| depending on how you
|取决于您如何设置它，

1158
00:34:20,330 --> 00:34:21,590
0,180 180,270 270,630 630,1020 1020,1260
set it up,| but as
|但正如你所说的，

1159
00:34:21,590 --> 00:34:22,460
0,120 120,420 420,630 630,780 780,870
you're saying that,| there is
|这其中存在风险，

1160
00:34:22,460 --> 00:34:23,420
0,90 90,330 330,630 660,870 870,960
a risk here,| you've got
|你得小心一点。

1161
00:34:23,420 --> 00:34:24,230
0,90 90,150 150,210 210,420 420,810
to be a little careful.|
|

1162
00:34:25,190 --> 00:34:26,330
0,150 150,330 330,390 390,930 930,1140
So would the solution be
那么，解决方案是不是就像创建一个新线程一样。

1163
00:34:26,330 --> 00:34:27,530
0,390 390,510 510,900 900,1140 1140,1200
just to like create a

1164
00:34:27,530 --> 00:34:30,170
0,240 240,990 1410,2400 2400,2520 2520,2640
new {thread -}.| {Yes,there's} all
|是的，这里有各种可能的解决方案，

1165
00:34:30,170 --> 00:34:31,610
0,180 180,240 240,690 690,1140 1140,1440
kinds of possible solutions here,|
|

1166
00:34:31,640 --> 00:34:32,930
0,120 120,330 330,570 570,1050 1050,1290
{} just like warning you
就像警告你，你知道有人在提醒你

1167
00:34:32,930 --> 00:34:33,800
0,270 270,390 390,690 690,870 870,870
that you know {} there's

1168
00:34:34,190 --> 00:34:35,300
0,480 480,660 660,810 810,960 960,1110
alerting you| that you have
|你必须稍微考虑一下如何安排这件事。

1169
00:34:35,300 --> 00:34:36,020
0,90 90,270 270,330 330,540 540,720
to think a little bit

1170
00:34:36,020 --> 00:34:37,910
0,210 210,360 360,480 480,1050 1380,1890
about how you arrange this.|
|

1171
00:34:40,710 --> 00:34:41,840
0,600
Okay?|
好吧?|

1172
00:34:42,380 --> 00:34:44,810
0,210 210,630 1290,1590 1590,1800 1860,2430
But isn't isn't it using
但是，使用单个线程不是不够的吗，

1173
00:34:44,810 --> 00:34:46,310
0,120 120,450 450,750 750,960 960,1500
a single thread not sufficient,|
|

1174
00:34:46,310 --> 00:34:48,100
0,450 450,570 570,930 930,1230
because the thread that
因为将其放到应用通道上的线程，

1175
00:34:48,160 --> 00:34:49,180
0,240 240,360 360,630 630,750 750,1020
puts it onto the apply

1176
00:34:49,180 --> 00:34:50,350
0,330 330,450 450,720 720,810 810,1170
channel,| will still be looking
|会继续关注数据，对吧，

1177
00:34:50,350 --> 00:34:52,120
0,180 480,840 1080,1290 1290,1590 1590,1770
at data, right,| so it
|所以它仍然需要获得锁。

1178
00:34:52,120 --> 00:34:53,200
0,240 240,450 450,510 510,960 960,1080
still need to acquire the

1179
00:34:53,200 --> 00:34:54,140
0,390
lock.|
|

1180
00:34:54,550 --> 00:34:56,380
0,330 330,990 1020,1530 1530,1620 1620,1830
Okay, Okay, let me get
好的，好的，让我回到这里，

1181
00:34:56,380 --> 00:34:57,430
0,240 240,420 420,570 570,810 810,1050
back on {here -},| it's
|很容易看出，这里的僵局，对吧，

1182
00:34:57,430 --> 00:34:58,360
0,300 300,420 420,630 630,780 780,930
easy to see that the

1183
00:34:58,360 --> 00:34:59,890
0,450 450,630 630,990 1200,1410 1410,1530
deadlock here, correct,| like if
|比如，如果你在申请频道，

1184
00:34:59,890 --> 00:35:01,210
0,300 300,360 360,450 450,750 750,1320
you're in the apply channel,|
|

1185
00:35:01,240 --> 00:35:02,080
0,150 150,390 390,600 600,750 750,840
you're not reading from the
你不是在读申请频道的内容，

1186
00:35:02,080 --> 00:35:04,180
0,360 360,660 660,930 930,1620 1650,2100
apply channel,| because you're using
|因为你在用你的呼叫开始，

1187
00:35:04,180 --> 00:35:05,780
0,150 150,450 450,1080
your calling start,|
|

1188
00:35:05,870 --> 00:35:07,640
0,240 240,660 660,1050 1050,1230 1230,1770
like maybe I get because,|
就像我可能会得到因为，|

1189
00:35:08,600 --> 00:35:10,640
0,540 600,930 930,1110 1110,1590 1620,2040
and start can't run because
而Start不能跑，因为这个人实际上持有一把锁，

1190
00:35:10,640 --> 00:35:11,960
0,90 90,480 480,810 810,1260 1260,1320
the guy actually holds a

1191
00:35:11,960 --> 00:35:13,970
0,420 420,1170 1170,1320 1320,1590 1590,2010
lock,| but he can't actually
|但他不能真的解锁，

1192
00:35:13,970 --> 00:35:15,140
0,450 450,690 690,750 750,960 960,1170
unlock,| because he can't write
|因为他不能写申请通道，

1193
00:35:15,140 --> 00:35:16,190
0,90 90,390 390,660 660,870 870,1050
to apply channel,| because there's
|因为没有读者，你知道，很容易构建场景，

1194
00:35:16,190 --> 00:35:18,830
0,150 150,750 900,1620 2010,2370 2370,2640
no reader {} {you,know} there's

1195
00:35:18,830 --> 00:35:20,150
0,270 270,720 720,1050 1050,1200 1200,1320
easy {to,construct} scenarios,| where you
|在那里你会陷入僵局，

1196
00:35:20,150 --> 00:35:21,080
0,120 120,300 300,450 450,840 840,930
can get into deadlocks,| of
|当然，你可以避免所有这些僵局，

1197
00:35:21,080 --> 00:35:22,010
0,270 270,360 360,480 480,810 810,930
course you can avoid all

1198
00:35:22,010 --> 00:35:23,330
0,150 150,690 750,1080 1080,1170 1170,1320
these deadlocks,| that's the whole
|这就是我们的全部目标

1199
00:35:23,330 --> 00:35:24,530
0,360 360,450 450,720 720,1080 1080,1200
goal| and one way to
|而避免这些僵局的一种方法是

1200
00:35:24,530 --> 00:35:25,760
0,360 360,480 480,960 960,1020 1020,1230
avoid these deadlocks is| actually
|实际上不是在通道上读写时保持锁定，

1201
00:35:25,760 --> 00:35:26,720
0,240 240,300 300,600 600,690 690,960
not to hold the lock

1202
00:35:26,720 --> 00:35:28,100
0,270 270,780 780,900 900,990 990,1380
while {read,writing} on the channel,|
|

1203
00:35:31,260 --> 00:35:31,950
0,270 270,300 300,420 420,630 630,690
there are other ways of
也有其他方法可以做到这一点，

1204
00:35:31,950 --> 00:35:33,060
0,180 180,270 270,540
doing it too,|
|

1205
00:35:34,370 --> 00:35:35,510
0,270 270,540 540,780 780,930 930,1140
I just tell you in
我只是在我的实现中告诉你，

1206
00:35:35,510 --> 00:35:37,070
0,150 150,990 1080,1350 1350,1440 1440,1560
my implementation,| you know I
|你知道，当我在频道上写东西的时候，我发现不带一整盒东西是很方便的，

1207
00:35:37,070 --> 00:35:38,180
0,210 210,270 270,780 780,1020 1020,1110
find a convenient not to

1208
00:35:38,180 --> 00:35:39,980
0,540 570,900 900,1110 1110,1500 1500,1800
have a whole box while

1209
00:35:39,980 --> 00:35:41,380
0,270 270,390 390,480 480,810
writing on a channel,|
|

1210
00:35:41,380 --> 00:35:42,160
0,120 120,270 270,360 360,690 690,780
I think in general it's
我认为总的来说，这是一种糟糕的做法。

1211
00:35:42,160 --> 00:35:43,440
0,210 210,780
bad practice.|
|

1212
00:35:44,710 --> 00:35:50,060
0,2040

1213
00:35:50,270 --> 00:35:51,480
0,630
Okay,
好了，回到代码上来。

1214
00:35:51,540 --> 00:35:53,000
0,930
{back,to}

1215
00:35:53,000 --> 00:35:54,040
0,480
code.|
|

1216
00:35:54,690 --> 00:35:56,020
0,780

1217
00:35:56,450 --> 00:35:58,340
0,300 300,630 900,1290 1290,1710 1710,1890
Okay good, so I'm gonna
好的，很好，我将向你们展示一个特定的实现，

1218
00:35:58,340 --> 00:35:59,900
0,180 180,240 240,600 600,990 990,1560
show you one particular implementation,|
|

1219
00:35:59,900 --> 00:36:01,520
0,540 540,540 1170,1260 1260,1440 1440,1620
again, {} you know this
同样，您知道这是我在一月份编写的一个实现

1220
00:36:01,520 --> 00:36:02,570
0,120 120,240 240,720 720,840 840,1050
is an implementation that I

1221
00:36:02,570 --> 00:36:04,430
0,300 300,930 960,1620 1620,1710 1710,1860
wrote over January| to get
|为了备课，

1222
00:36:04,430 --> 00:36:05,420
0,180 180,300 300,360 360,690 690,990
ready for the class,| so
|所以它没有什么特别之处，

1223
00:36:05,420 --> 00:36:06,920
0,210 210,450 450,870 870,1230 1230,1500
there's nothing particularly special about

1224
00:36:06,920 --> 00:36:08,810
0,240 360,1020 1020,1410 1410,1740 1740,1890
it,| {} {you,know} purely for
|你知道，纯粹是为了我自己

1225
00:36:08,810 --> 00:36:10,820
0,660 1050,1350 1350,1470 1470,1920 1920,2010
myself| and I'm sure you
|我相信你知道关于它的一些事情，

1226
00:36:10,820 --> 00:36:11,870
0,150 150,270 270,330 330,570 570,1050
know there are things about

1227
00:36:11,870 --> 00:36:12,980
0,270 270,390 390,540 540,750 750,1110
it,| that you were to
|你会强烈反对的东西，

1228
00:36:13,010 --> 00:36:15,350
0,600 600,930 930,1230 1500,2100 2100,2340
violently object to,| {} but
|但这给你一种感觉，你知道我做了什么。

1229
00:36:15,350 --> 00:36:16,280
0,270 270,450 450,510 510,570 570,930
it gives you a sense

1230
00:36:16,280 --> 00:36:16,880
0,90 90,180 180,330 330,420 420,600
you know what I did.|
|

1231
00:36:17,500 --> 00:36:19,420
0,180 180,420 420,720 720,1170 1380,1920
And so here {I,go}, {}|
所以我开始了，|

1232
00:36:19,450 --> 00:36:20,950
0,180 180,480 480,570 570,840 840,1500
so there's the raft structure,|
这就是木筏结构，|

1233
00:36:21,070 --> 00:36:22,390
0,390 390,540 540,990 990,1080 1080,1320
{} I basically you know
基本上，你知道复制图2，

1234
00:36:22,390 --> 00:36:24,280
0,510 510,750 750,1050 1200,1590 1590,1890
copy figure 2,| {} {as,you,will}
|正如您将看到的，在代码中，

1235
00:36:24,280 --> 00:36:25,210
0,300 300,390 390,450 450,780 780,930
see, in the code,| that's
|这将是代码中大量的图2，

1236
00:36:25,210 --> 00:36:25,990
0,120 120,180 180,240 240,330 330,780
going to be a lot

1237
00:36:26,020 --> 00:36:26,860
0,180 180,480 480,690 690,780 780,840
of figure 2 in the

1238
00:36:26,860 --> 00:36:29,260
0,420 930,1440 1440,2070 2070,2190 2190,2400
code,| {} and you know
|你知道这是你做的主要东西，

1239
00:36:29,260 --> 00:36:30,610
0,570 570,900 930,1170 1170,1290 1290,1350
here's the main thing you

1240
00:36:30,610 --> 00:36:31,390
0,150 150,420 420,480 480,660 660,780
make,| probably the main thing
|可能需要指出的主要问题是，

1241
00:36:31,390 --> 00:36:32,320
0,90 90,300 300,540 540,780 780,930
to point out,| there's like,
|就像，这是最大的互斥体

1242
00:36:32,320 --> 00:36:33,490
0,210 210,300 300,510 510,990 990,1170
here's the big mutexes| and
|这是木筏锁，

1243
00:36:33,490 --> 00:36:34,930
0,180 180,300 300,630 630,930 930,1440
here's the raft lock,| that
|这样，我的代码将在所有地方获得释放，

1244
00:36:34,930 --> 00:36:36,160
0,90 90,210 210,510 510,720 720,1230
and my code will acquire

1245
00:36:36,160 --> 00:36:37,570
0,420 420,630 630,840 840,900 900,1410
release all over the place,|
|

1246
00:36:37,600 --> 00:36:38,560
0,270 270,360 360,420 420,720 720,960
but in a very {coarse-grained
但以一种非常粗略的方式

1247
00:36:38,560 --> 00:36:40,450
0,210 210,600 1350,1500 1500,1560 1560,1890
-} manner| and the rest
|剩下的就是你所知道的，正如你所期望的，

1248
00:36:40,450 --> 00:36:41,920
0,120 120,510 510,600 600,960 990,1470
is just you know exactly

1249
00:36:41,920 --> 00:36:42,820
0,90 90,180 180,660 660,720 720,900
as you expect,| you know
|您知道持久性状态、易失性状态、引导者状态和快照状态，

1250
00:36:42,820 --> 00:36:44,680
0,180 180,600 600,1020 1020,1470 1470,1860
the Persistent state, Volatile state,

1251
00:36:44,680 --> 00:36:46,570
0,240 240,720 720,900 900,1560 1560,1890
Leader state and Snapshot state,|
|

1252
00:36:46,600 --> 00:36:47,470
0,150 150,330 330,540 540,690 690,870
I won't talk much about
我不会太多地谈论快照，

1253
00:36:47,470 --> 00:36:48,610
0,420 420,510 510,750 750,1050 1050,1140
snapshot at all,| since you
|既然你知道我们周五要做的事。

1254
00:36:48,610 --> 00:36:49,660
0,180 180,450 450,690 690,810 810,1050
know that what we do

1255
00:36:49,660 --> 00:36:50,680
0,240 240,660
for Friday.|
|

1256
00:36:51,560 --> 00:36:54,590
0,690 960,1500 1500,1980 1980,2310 2370,3030
{} That's basically it, {}|
基本上就是这样，|

1257
00:36:54,590 --> 00:36:57,020
0,660 1020,1530 1530,2130 2130,2280 2280,2430
then, {} interesting, I'm just
然后，有趣的是，我将像一开始那样自下而上地进行，

1258
00:36:57,020 --> 00:36:58,250
0,150 150,360 360,990 990,1140 1140,1230
gonna go bottom-up sort of

1259
00:36:58,250 --> 00:36:59,270
0,210 210,270 270,360 360,900 900,1020
like in the beginning,| you
|你知道会发生什么，

1260
00:36:59,270 --> 00:37:01,220
0,60 60,240 240,780 780,1260 1590,1950
know what happens,| so at
|所以在某种程度上，测试者，

1261
00:37:01,220 --> 00:37:02,860
0,150 150,390 390,450 450,1110
some point the tester,|
|

1262
00:37:03,950 --> 00:37:05,160
0,660

1263
00:37:11,450 --> 00:37:13,660
0,420 420,570 570,810 810,1650
{} the tester will
测试人员将调用Make，对吗

1264
00:37:15,610 --> 00:37:17,710
0,480 480,990 1020,1410 1410,1860 1860,2100
call Make, right| and {}
|这就是我的基本决定，

1265
00:37:17,710 --> 00:37:20,380
0,360 360,690 690,1530 1650,2250 2250,2670
here's my {} basically the

1266
00:37:20,410 --> 00:37:24,400
0,690 810,1380 1380,2040 2280,3120 3360,3990
Make {} call,| {} it
|它构建了你知道的木筏状态，

1267
00:37:24,400 --> 00:37:25,660
0,600 600,690 690,840 840,990 990,1260
constructs you know the raft

1268
00:37:25,660 --> 00:37:27,850
0,510 900,1710 1710,1800 1800,1920 1920,2190
states,| {} you know apply
|你知道应用频道，我提到的条件变量，

1269
00:37:27,850 --> 00:37:29,350
0,360 360,450 450,780 780,1350 1350,1500
channel, the condition variable that

1270
00:37:29,350 --> 00:37:32,050
0,30 30,600 1080,1680 1680,2490 2490,2700
I mentioned,| {it,sets} itself to
|它将自己设置为追随者，选举时间到了，

1271
00:37:32,050 --> 00:37:34,000
0,180 180,840 840,1200 1200,1650 1650,1950
a follower, it's election time

1272
00:37:34,000 --> 00:37:34,860
0,420
out,|
|

1273
00:37:34,920 --> 00:37:36,120
0,570 570,720 720,870 870,1050 1050,1200
{} and I'll talk about
我稍后会谈到这一点，

1274
00:37:36,120 --> 00:37:37,200
0,180 180,270 270,330 330,870 930,1080
that in a second,| you
|你知道，一开始，你会把其他一些部分做成一个空的日志，

1275
00:37:37,200 --> 00:37:38,700
0,120 120,600 600,750 750,930 930,1500
know initially some other parts

1276
00:37:38,700 --> 00:37:40,020
0,150 150,360 360,450 450,720 720,1320
you make an empty log,|
|

1277
00:37:40,560 --> 00:37:42,660
0,810 840,1260 1260,1500 1500,1800 1800,2100
and, um, then basically forks
然后，嗯，基本上叉子有两个围棋程序，

1278
00:37:42,660 --> 00:37:45,480
0,120 120,780 780,1740 1740,2430 2490,2820
have two Go routines,| {one,is}
|一个是应用程序，这是在应用通道上实际写入的线程，

1279
00:37:45,480 --> 00:37:47,010
0,180 180,510 510,750 750,1290 1290,1530
the {applier -}, that's the

1280
00:37:47,010 --> 00:37:48,030
0,270 270,390 390,690 690,930 930,1020
thread that actually writes on

1281
00:37:48,030 --> 00:37:49,680
0,60 60,360 360,900 1110,1320 1320,1650
the apply channel,| and then
|然后我拿到了我的股票代码

1282
00:37:49,680 --> 00:37:50,940
0,150 150,360 360,660 660,840 840,1260
I got my the ticker|
|

1283
00:37:50,940 --> 00:37:52,380
0,150 150,390 390,750 750,990 990,1440
and we basically gave you
我们基本上给了你一个基本上运行的股票代码，

1284
00:37:52,500 --> 00:37:54,750
0,390 390,1110 1110,1500 1500,1920 1920,2250
{} to a basically runs

1285
00:37:54,750 --> 00:37:56,300
0,360 390,660 660,1080
the ticker code,|
|

1286
00:37:57,460 --> 00:38:00,010
0,540 570,840 870,1290 1290,1980 2010,2550
{} so, nothing particularly exciting
所以，这里没有什么特别令人兴奋的事情。

1287
00:38:00,010 --> 00:38:02,050
0,210 210,450 450,930 1290,1830 1830,2040
going on here.| {} So
|那么让我们来看一下股票代码，

1288
00:38:02,050 --> 00:38:04,300
0,210 210,420 420,510 510,1020 1800,2250
let's look at the {ticker

1289
00:38:04,300 --> 00:38:06,070
0,60 60,510 660,1170 1170,1410 1410,1770
-} code,| some people ask
|有些人问你，你是不是应该把所有东西都组织成一个文件、多个文件、

1290
00:38:06,070 --> 00:38:07,390
0,90 90,240 240,420 420,540 540,1320
you know, should you structure

1291
00:38:07,390 --> 00:38:08,950
0,300 300,450 450,510 510,870 870,1560
everything in a single file,

1292
00:38:08,980 --> 00:38:11,410
0,660 690,1050 1050,1740 2010,2220 2220,2430
{} multiple files,| of course
|当然，一切都取决于你，

1293
00:38:11,410 --> 00:38:12,010
0,90 90,210 210,330 330,420 420,600
it's all up to you,|
|

1294
00:38:12,010 --> 00:38:13,360
0,330 330,600 600,690 690,900 900,1350
what actually is most convenient
你到底最方便的是什么？

1295
00:38:13,360 --> 00:38:14,470
0,180 180,420 420,630 630,1020 1020,1110
for you| to actually you
|实际上你知道，找到你的代码，

1296
00:38:14,470 --> 00:38:15,400
0,120 120,300 300,420 420,810 810,930
know find your code,| in
|在这种情况下，我在多个文件中进行了说明

1297
00:38:15,400 --> 00:38:16,810
0,150 150,720 720,780 780,1290 1290,1410
this case I instructed in

1298
00:38:16,810 --> 00:38:18,400
0,390 390,810 810,900 900,990 990,1590
multiple files| and {} have
|基本上已经投票了。开始，处理所有的选举部分。

1299
00:38:18,610 --> 00:38:20,800
0,300 300,780 780,1500 1500,1980 1980,2190
basically {vote.go -}, deals with

1300
00:38:20,800 --> 00:38:22,900
0,210 210,540 750,1320 1320,1770
all the election part.|
|

1301
00:38:25,070 --> 00:38:25,760
0,210 210,390 390,540 540,600 600,690
So let's look at the
那么让我们来看一下股票代码，

1302
00:38:25,760 --> 00:38:26,880
0,570
ticker,|
|

1303
00:38:27,670 --> 00:38:29,020
0,810

1304
00:38:29,560 --> 00:38:31,120
0,300 300,420 420,660 660,990 990,1560
so the ticker basically runs
因此，自动收报机基本上每50毫秒运行一次

1305
00:38:31,150 --> 00:38:34,090
0,240 240,450 450,1320 1440,2310 2310,2940
every 50 milliseconds| and {}
|它将此函数称为Tick，

1306
00:38:34,090 --> 00:38:35,050
0,60 60,270 270,390 390,780 780,960
it calls this function {tick

1307
00:38:35,050 --> 00:38:36,730
0,570 570,900 900,1230 1230,1500 1500,1680
-},| function tick like right
|函数就像这里一样勾选，

1308
00:38:36,730 --> 00:38:38,770
0,150 150,690 960,1440 1440,1560 1560,2040
up here,| {} it grips
|它扣人心弦，你知道你会看到它到处都是，

1309
00:38:38,770 --> 00:38:39,880
0,120 120,420 420,630 630,780 780,1110
you know you'll see that

1310
00:38:39,880 --> 00:38:41,080
0,480 480,660 660,720 720,1050 1050,1200
all over the place,| it
|它抓住木筏锁，

1311
00:38:41,080 --> 00:38:43,750
0,360 360,930 960,1320 1320,1860 2220,2670
grasps the raft lock,| calls
|调用使用DEFER来确保无论我何时离开函数，

1312
00:38:43,750 --> 00:38:45,340
0,420 420,1050 1050,1170 1170,1350 1350,1590
use defer to make sure

1313
00:38:45,340 --> 00:38:46,690
0,330 330,450 450,690 690,1230 1230,1350
that no matter when I

1314
00:38:46,690 --> 00:38:48,520
0,450 450,540 540,1170 1440,1680 1680,1830
leave the function,| {} the
|锁定实际上将被释放

1315
00:38:48,520 --> 00:38:50,140
0,300 300,630 630,840 840,1020 1020,1620
lock actually will be released|
|

1316
00:38:50,590 --> 00:38:52,780
0,720 810,1350 1350,1560 1560,1860 1860,2190
and then {you,know} check what
然后你知道，检查什么是领导者，

1317
00:38:52,780 --> 00:38:55,270
0,360 360,480 480,1140 1140,1770 1770,2490
is the leader,| {} if
|如果领导者做了一件事，

1318
00:38:55,270 --> 00:38:56,320
0,90 90,390 390,570 570,780 780,1050
the leader does one thing,|
|

1319
00:38:56,320 --> 00:38:57,250
0,180 180,360 360,420 420,780 780,930
it's not a leader, that
它不是领导者，这意味着它是一个追随者，

1320
00:38:57,250 --> 00:38:58,870
0,210 210,420 420,480 480,1170 1230,1620
means that's a follower,| then
|那就检查一下实际上选举时间是不是过去了，

1321
00:38:58,870 --> 00:39:00,460
0,240 240,510 510,840 840,1200 1200,1590
just check whether actually the

1322
00:39:00,790 --> 00:39:02,300
0,480 480,1260
election time

1323
00:39:02,300 --> 00:39:04,310
0,180 180,450 450,1170 1560,1890 1890,2010
{} has passed,| and so
|所以基本上我计算的方法就是，

1324
00:39:04,310 --> 00:39:05,510
0,480 480,570 570,780 780,840 840,1200
basically the way I compute

1325
00:39:05,510 --> 00:39:06,500
0,240 240,480 480,750 750,930 930,990
that is,| I get the
|我知道现在的时间，

1326
00:39:06,500 --> 00:39:09,200
0,330 330,900 1170,1680 1680,2220 2220,2700
current time,| {} and see
|并查看当前时间是否真的已过，

1327
00:39:09,200 --> 00:39:10,280
0,240 240,330 330,630 630,990 990,1080
if the current time is

1328
00:39:10,280 --> 00:39:13,130
0,240 240,720 720,1350 1380,1860 1860,2850
actually passed the,| {} if
|如果现在，现在已经过了选举时间，

1329
00:39:13,130 --> 00:39:14,870
0,420 420,540 540,690 690,1140 1140,1740
now, is now past the

1330
00:39:14,900 --> 00:39:16,100
0,360 360,720
election time,|
|

1331
00:39:17,430 --> 00:39:18,600
0,360 360,450 450,750 750,840 840,1170
and if that's the case,
如果是这样的话，我将开始选举

1332
00:39:18,600 --> 00:39:20,580
0,90 90,330 330,390 390,1050 1080,1980
I'll start the election| and,
|首先，我将再次设置选举超时，

1333
00:39:20,640 --> 00:39:22,170
0,450 450,960 960,1230 1230,1290 1290,1530
{} well first I'll set

1334
00:39:22,170 --> 00:39:24,420
0,450 630,1020 1020,1410 1410,1890 1890,2250
the election timeout again,| as
|如图2所示

1335
00:39:24,420 --> 00:39:26,310
0,480 480,570 570,840 840,1350 1710,1890
required by figure 2| and
|然后他们将开始选举，

1336
00:39:26,310 --> 00:39:27,330
0,420 420,540 540,720 720,960 960,1020
then {they'll -} start the

1337
00:39:27,330 --> 00:39:28,300
0,450
election,|
|

1338
00:39:30,120 --> 00:39:31,290
0,270 270,450 450,780 780,870 870,1170
{in,terms} of setting the election
在设置选举超时方面，

1339
00:39:31,290 --> 00:39:32,550
0,270 270,540 540,690 690,1140 1140,1260
{timeouts -},| like the the
|就像你知道的第一件事就是我做事的方式，

1340
00:39:32,550 --> 00:39:33,480
0,300 300,570 570,690 690,810 810,930
first thing you know the

1341
00:39:33,480 --> 00:39:35,550
0,690 690,1440 1440,1680 1680,1980 1980,2070
way I do it,| you
|你知道选举超时设置为一秒，

1342
00:39:35,550 --> 00:39:37,080
0,180 180,570 600,1020 1020,1440 1440,1530
know an election timeout is

1343
00:39:37,080 --> 00:39:38,190
0,180 180,240 240,450 450,900 930,1110
set to one second,| which
|从某种意义上说，我是从

1344
00:39:38,190 --> 00:39:38,820
0,60 60,210 210,270 270,360 360,630
is sort of I got

1345
00:39:38,820 --> 00:39:40,780
0,480 870,1470
from, {}|
|

1346
00:39:40,980 --> 00:39:41,640
0,120 120,240 240,510 510,630 630,660
I can hold on a
我可以等一下[]，

1347
00:39:41,640 --> 00:39:43,260
0,270 270,840 870,1110 1110,1380 1380,1620
second [],| there's a good
|我们的谈话有一个很好的理由，

1348
00:39:43,260 --> 00:39:45,600
0,390 870,1680 1680,1890 1890,1980 1980,2340
reason {} from the chat,|
|

1349
00:39:45,690 --> 00:39:48,080
0,990 1020,1800
the the
选择超时一秒

1350
00:39:48,400 --> 00:39:50,860
0,630 1080,1470 1470,1800 1800,2190 2190,2460
{} the selection timeouts one

1351
00:39:50,860 --> 00:39:52,300
0,480 480,690 690,1020 1020,1110 1110,1440
second| and then of course
|当然，你知道你需要在一段时间内随机化你所知道的同龄人，

1352
00:39:52,300 --> 00:39:52,990
0,90 90,270 270,420 420,600 600,690
you know you need to

1353
00:39:52,990 --> 00:39:55,090
0,780 780,870 870,1230 1230,1710 1740,2100
randomize you know the peers

1354
00:39:55,090 --> 00:39:57,190
0,420 420,540 540,1200 1530,1950 1950,2100
across an interval,| and I
|我使用的间隔是0到300毫秒

1355
00:39:57,190 --> 00:39:58,240
0,210 210,330 330,690 690,780 780,1050
use an interval from 0

1356
00:39:58,240 --> 00:40:01,570
0,120 120,1290 1590,2250 2250,2880 2940,3330
to {300,milliseconds}| {} and add
|再加上选举超时时间

1357
00:40:01,570 --> 00:40:02,590
0,240 240,300 300,390 390,720 720,1020
that to the election {timeouts

1358
00:40:02,590 --> 00:40:03,910
0,270 270,390 390,570 570,990 990,1320
-}| and so basically every
|因此，基本上每个对等点都可能有一个略有不同的选举超时

1359
00:40:03,910 --> 00:40:05,410
0,570 570,990 990,1170 1170,1290 1290,1500
peer likely has to have

1360
00:40:05,410 --> 00:40:07,780
0,360 360,840 840,1260 1290,1770 1770,2370
a slightly different election timeout|
|

1361
00:40:08,140 --> 00:40:09,760
0,360 360,900 960,1350 1350,1470 1470,1620
and so, {} they will
因此，他们会呼唤，在不同的阶段采取行动

1362
00:40:09,760 --> 00:40:12,160
0,660 690,1170 1170,1650 1650,1740 1740,2400
call, {} take at different

1363
00:40:12,160 --> 00:40:13,720
0,660 660,1260 1260,1350 1350,1440 1440,1560
stages| and you know we
|你也知道我们之间有一点牵绊，

1364
00:40:13,720 --> 00:40:14,680
0,90 90,150 150,300 300,390 390,960
had a bit of lock,|
|

1365
00:40:14,770 --> 00:40:16,480
0,540 540,810 810,1140 1140,1200 1200,1710
{} only one or few
只有一人或几个人会真正开始选举。

1366
00:40:16,480 --> 00:40:17,710
0,270 270,390 390,720 720,810 810,1230
actually will start the election.|
|

1367
00:40:19,180 --> 00:40:20,380
0,150 150,240 240,330 330,810 810,1200
I have a question.| Yeah.|
我有个问题要问。|嗯。|

1368
00:40:20,590 --> 00:40:24,160
0,570 750,1320 1320,1800 2010,2520 3000,3570
So, you're only like checking
所以，你就像每隔50毫秒检查一次，对吧，

1369
00:40:24,160 --> 00:40:26,110
0,300 300,660 660,1080 1080,1740 1740,1950
every like 50 milliseconds, right,|
|

1370
00:40:26,110 --> 00:40:27,130
0,270 270,540 540,780 780,900 900,1020
doesn't that lead to a
这不是导致了一场竞争激烈的选举吗，

1371
00:40:27,130 --> 00:40:29,060
0,630 660,1500
contested elections,|
|

1372
00:40:29,360 --> 00:40:31,520
0,270 270,570 570,960 960,1590 1860,2160
like because you're essentially,| it
就像因为你本质上是，|它没有这个限制，

1373
00:40:31,520 --> 00:40:33,920
0,300 300,510 510,1320 1620,2190 2220,2400
doesn't this limit,| like you
|就像你知道，从技术上讲，你可以得到从3到0到300的任何正确，就像。

1374
00:40:33,920 --> 00:40:37,280
0,480 510,990 1020,1740 1740,2190 2820,3360
know you technically can get

1375
00:40:38,140 --> 00:40:39,760
0,180 180,660 660,840 840,1230 1230,1620
for anywhere from 3 to

1376
00:40:40,000 --> 00:40:42,920
0,510 510,660 660,1950 1950,2340
0 to {300,right}, like.|
|

1377
00:40:42,920 --> 00:40:43,640
0,210 210,300 300,420 420,570 570,720
No, I can get from
不，我可以从1秒到300秒后

1378
00:40:43,640 --> 00:40:45,080
0,180 180,720 750,1110 1110,1380 1380,1440
one second to after {300

1379
00:40:45,080 --> 00:40:47,060
0,510 570,810 810,1110 1110,1410 1410,1980
-}| and one second to
|1000毫秒到1300毫秒之间的任意值为1秒。

1380
00:40:47,210 --> 00:40:49,850
0,270 270,600 600,1230 1260,2550 2550,2640
any value between {1000,milliseconds} to

1381
00:40:49,850 --> 00:40:52,580
0,270 270,480 480,1200 1380,1980 2070,2730
{1300 -} milliseconds.| Right, so,
|对，所以，但到了最后，

1382
00:40:52,730 --> 00:40:53,780
0,270 270,690 690,810 810,930 930,1050
{} but at the end

1383
00:40:53,780 --> 00:40:55,520
0,60 60,210 210,540 540,990 1080,1740
of the day,| like because
|就像你每隔50毫秒才检查一次，

1384
00:40:55,520 --> 00:40:57,080
0,210 210,600 630,990 990,1320 1320,1560
you're like only checking every

1385
00:40:57,080 --> 00:40:58,820
0,300 300,960 960,1260 1260,1500 1500,1740
50 milliseconds,| doesn't that just
|这不就是给人一种。

1386
00:40:58,820 --> 00:40:59,860
0,180 180,300 300,570
give it like.|
|

1387
00:40:59,950 --> 00:41:01,030
0,240 240,390 390,540 540,810 810,1080
It gives us more {course-grained
它为我们提供了更多的过程粒度，但它已经足够好了。

1388
00:41:01,030 --> 00:41:02,050
0,270 270,360 360,450 450,630 630,1020
-}, but it's good enough.|
|

1389
00:41:02,580 --> 00:41:03,600
0,600
Okay.|
好吧。|

1390
00:41:03,660 --> 00:41:05,340
0,150 150,660 690,1200 1200,1560 1560,1680
{} I mean basically two
我的意思是这里基本上有两个限制，对吧，

1391
00:41:05,340 --> 00:41:06,690
0,450 450,660 660,1020 1020,1080 1080,1350
constraints here, correct,| you know
|你知道你不想太慢

1392
00:41:06,690 --> 00:41:07,530
0,390 390,540 540,660 660,720 720,840
you don't want to be

1393
00:41:07,530 --> 00:41:09,960
0,150 150,690 1260,1620 1620,2160 2160,2430
too slow| and {} because
|因为这意味着你需要很长时间才能开始新的选举，

1394
00:41:09,960 --> 00:41:11,790
0,510 510,750 750,930 930,1590 1620,1830
that means that you're takes

1395
00:41:11,790 --> 00:41:12,450
0,60 60,210 210,360 360,600 600,660
a long time before you

1396
00:41:12,450 --> 00:41:13,830
0,180 180,210 210,360 360,960 960,1380
start a new election,| and
|你不想开得太快，

1397
00:41:13,830 --> 00:41:14,340
0,60 60,210 210,330 330,390 390,510
you don't want to be

1398
00:41:14,340 --> 00:41:16,470
0,210 210,750 750,990 990,1680 1950,2130
too fast,| because then you
|因为那样你就会开始太多的选举，

1399
00:41:16,470 --> 00:41:17,820
0,210 210,300 300,570 570,1080 1080,1350
start too many elections,| and
|你需要留出一段时间让选举失去一些选票，可能会被推迟

1400
00:41:17,820 --> 00:41:18,750
0,120 120,300 300,360 360,780 780,930
you need to allow for

1401
00:41:18,750 --> 00:41:20,160
0,210 210,540 540,870 870,930 930,1410
some time for an election

1402
00:41:20,160 --> 00:41:22,170
0,240 240,540 540,1020 1500,1890 1890,2010
to lose some votes, may

1403
00:41:22,170 --> 00:41:24,150
0,180 180,720 1050,1560 1590,1860 1860,1980
get delayed| and you don't
|你不想在你拥有之前重启，

1404
00:41:24,150 --> 00:41:26,070
0,180 180,270 270,900 900,1770 1800,1920
want to restart before you

1405
00:41:26,070 --> 00:41:28,020
0,210 210,750 1020,1440 1440,1770 1770,1950
you have,| just before the
|就在候选人有机会与追随者进行几轮交流之前。

1406
00:41:28,020 --> 00:41:29,340
0,510 510,750 750,1050 1050,1140 1140,1320
candidate has chance to sort

1407
00:41:29,340 --> 00:41:30,690
0,60 60,390 510,720 720,990 990,1350
of do a couple rounds

1408
00:41:30,690 --> 00:41:32,220
0,90 90,690 690,840 840,900 900,1530
of communication with the followers.|
|

1409
00:41:34,810 --> 00:41:36,130
0,360 360,720 720,900 900,990 990,1320
Okay, so some of your
好的，所以你的一些人在猜测我的大写字母L，

1410
00:41:36,130 --> 00:41:37,960
0,270 270,780 780,1050 1050,1320 1320,1830
people speculating about my capital

1411
00:41:37,960 --> 00:41:39,850
0,450 750,1290 1290,1560 1560,1740 1740,1890
L,| {} this was just
|这只是个实验，

1412
00:41:39,850 --> 00:41:41,860
0,60 60,750 810,930 930,1140 1140,2010
an experiment,| you know for
|您知道，对于这个实现，

1413
00:41:41,890 --> 00:41:43,450
0,120 120,720 720,900 900,1200 1200,1560
this implementation,| I followed the
|我遵循了惯例，可能在某些地方打破了惯例，

1414
00:41:43,450 --> 00:41:44,770
0,570 570,720 720,780 780,1080 1080,1320
convention and I probably broke

1415
00:41:44,770 --> 00:41:45,580
0,90 90,150 150,330 330,660 660,810
it in some places,| but
|但我遵循的概念是，

1416
00:41:45,580 --> 00:41:46,840
0,60 60,300 300,360 360,900 900,1260
I followed the conception that,|
|

1417
00:41:47,290 --> 00:41:51,190
0,600 870,1500 1530,2250 2250,2940 3300,3900
{} if {} the caller
如果调用方[]假定锁被持有，

1418
00:41:51,190 --> 00:41:52,300
0,60 60,480 480,900 900,1020 1020,1110
the [] assumes that the

1419
00:41:52,300 --> 00:41:54,160
0,330 330,540 540,1050 1230,1650 1650,1860
lock is held,| then I
|然后我在函数后面加一个大写的L，

1420
00:41:54,160 --> 00:41:55,630
0,210 210,240 240,630 630,1080 1080,1470
put a capital L behind

1421
00:41:55,630 --> 00:41:56,680
0,210 210,660
the function,|
|

1422
00:41:56,920 --> 00:41:58,900
0,360 360,660 660,1200 1200,1440 1440,1980
so start election, that assumes
因此开始选择，这假设调用者实际上需要锁

1423
00:41:58,900 --> 00:42:00,130
0,180 180,270 270,780 780,1080 1080,1230
that the caller actually is

1424
00:42:00,130 --> 00:42:01,660
0,420 420,510 510,870 900,1200 1200,1530
required the lock| and basically
|基本上任何带有L的[]函数，

1425
00:42:01,660 --> 00:42:02,800
0,360 360,690 690,780 780,1020 1020,1140
any function that [] with

1426
00:42:02,800 --> 00:42:04,330
0,90 90,570 630,840 840,990 990,1530
an L,| as that particular
|正如你所知道的那样，特定的情况假设了这一惯例，

1427
00:42:04,330 --> 00:42:05,680
0,120 120,300 300,720 720,870 870,1350
you know assumes that convention,|
|

1428
00:42:07,660 --> 00:42:08,950
0,150 150,270 270,390 390,540 540,1290
and so this is purely
所以这纯粹是我自己的一种编码预防

1429
00:42:09,250 --> 00:42:11,470
0,270 270,870 870,1380 1380,1530 1530,2220
a coding prevention for myself|
|

1430
00:42:11,470 --> 00:42:12,340
0,480 480,540 540,690 690,780 780,870
and I thought it was
我认为在这个实现中尝试它是一件有趣的事情，

1431
00:42:12,340 --> 00:42:13,180
0,150 150,210 210,540 540,630 630,840
sort of interesting to try

1432
00:42:13,180 --> 00:42:14,560
0,210 210,480 480,600 600,750 750,1380
it out in this implementation,|
|

1433
00:42:15,010 --> 00:42:16,180
0,150 150,360 360,660 660,780 780,1170
might not always do that,|
可能并不总是这样，|

1434
00:42:16,180 --> 00:42:17,260
0,510 510,630 630,780 780,900 900,1080
but I just did that
但我在这本书里就是这么做的。

1435
00:42:17,260 --> 00:42:18,300
0,120 120,300 300,510
in this one.|
|

1436
00:42:20,720 --> 00:42:22,000
0,180 180,780
Any questions?|
有什么问题吗？|

1437
00:42:22,500 --> 00:42:23,190
0,180 180,300 300,420 420,600 600,690
Or should we look at
或者我们应该看看选举部分。

1438
00:42:23,190 --> 00:42:25,040
0,390 420,870 870,1320
the election part.|
|

1439
00:42:28,510 --> 00:42:30,010
0,420 450,1110 1110,1290 1290,1410 1410,1500
Okay, well, let's look at
好的，让我们来看看选举部分

1440
00:42:30,010 --> 00:42:32,650
0,480 660,1050 1050,1500 1500,1920 2100,2640
the election part| and you'll
|你会看到这里开始选举，

1441
00:42:32,650 --> 00:42:34,690
0,690 690,1020 1020,1230 1230,1500 1500,2040
see {} here start election,|
|

1442
00:42:34,690 --> 00:42:36,160
0,480 510,870 870,1050 1050,1440 1440,1470
so it doesn't require a
所以它不需要锁，

1443
00:42:36,160 --> 00:42:38,740
0,390 390,960 990,1140 1140,1440 1440,2580
lock,| because I assume the
|因为我假设呼叫者拿着它，

1444
00:42:38,860 --> 00:42:40,810
0,330 330,570 570,810 1200,1560 1560,1950
caller holds it,| and basically
|基本上按照图2所示，

1445
00:42:40,810 --> 00:42:42,340
0,180 180,630 630,960 960,1260 1350,1530
just follows figure 2,| you
|你知道，首先，你知道的规则是，你必须将当前术语加一，

1446
00:42:42,340 --> 00:42:43,660
0,390 390,810 810,990 990,1200 1200,1320
know first, you know the

1447
00:42:43,660 --> 00:42:44,770
0,360 360,660 660,810 810,1020 1020,1110
rule is you have to

1448
00:42:44,770 --> 00:42:46,600
0,390 390,450 450,720 720,1260 1560,1830
increment the current term by

1449
00:42:46,600 --> 00:42:48,250
0,420 420,540 540,690 690,1170 1170,1650
one,| {so,I} do that,| I
|所以我就这么做了，|我把州设为候选人

1450
00:42:48,250 --> 00:42:49,510
0,210 210,300 300,540 540,630 630,1260
set the state to Candidate|
|

1451
00:42:49,510 --> 00:42:51,340
0,150 150,630 690,1290 1290,1710 1710,1830
and also {} dictated by
基本上也是由图2指示的，

1452
00:42:51,340 --> 00:42:53,200
0,270 270,510 510,1110 1410,1740 1740,1860
figure 2 basically,| {} I
|我[记录]投票给了自己，

1453
00:42:53,200 --> 00:42:55,060
0,210 210,720 750,1440 1440,1740 1740,1860
{} {[record] -} voted for

1454
00:42:55,060 --> 00:42:56,380
0,540 540,720 720,840 840,1110 1110,1320
myself,| this is also part
|这也是图2的一部分，

1455
00:42:56,380 --> 00:42:58,210
0,60 60,330 330,840 1140,1650 1650,1830
of figure 2,| {} and
|然后你知道这是为了实验c，

1456
00:42:58,210 --> 00:42:59,110
0,420 420,510 510,600 600,810 810,900
then you know this is

1457
00:42:59,110 --> 00:43:00,790
0,390 390,810 810,1260 1260,1440 1440,1680
for lab c,|  you know
|你知道，看到你已经知道了，

1458
00:43:00,790 --> 00:43:02,080
0,180 180,360 360,480 480,780 780,1290
to see you already know,|
|

1459
00:43:02,170 --> 00:43:03,880
0,180 180,690 690,810 810,1290 1290,1710
that whenever you change basically
每当你改变基本状态时，这似乎是持久的，

1460
00:43:03,880 --> 00:43:04,840
0,450 450,630 630,780 780,840 840,960
state, that seemed to be

1461
00:43:04,840 --> 00:43:06,850
0,750 960,1230 1230,1440 1440,1500 1500,2010
persistent,| you have to persistent
|你必须坚持下去，

1462
00:43:06,850 --> 00:43:08,780
0,240 240,600 870,1230 1230,1620
right after,| and so,
|所以，就是这样，

1463
00:43:09,080 --> 00:43:10,610
0,150 150,360 360,690 720,1080 1080,1530
so that's it,| and basically
|基本上，你可以看到我的调试信息，

1464
00:43:10,610 --> 00:43:11,780
0,450 450,510 510,660 660,810 810,1170
you're you see my debugging

1465
00:43:11,780 --> 00:43:14,240
0,660 750,1920 1920,2040 2040,2250 2250,2460
messages,| like you know from
|就像你从Jose那里知道的那样，你知道我总是从一开始就有来源

1466
00:43:14,240 --> 00:43:15,530
0,630 630,720 720,810 810,960 960,1290
{Jose,says}, you know I always

1467
00:43:15,530 --> 00:43:16,310
0,180 180,240 240,600 600,690 690,780
have the source at the

1468
00:43:16,310 --> 00:43:18,260
0,570 570,870 870,1200 1290,1830 1830,1950
beginning| and this simplifies my
|这简化了我的生活

1469
00:43:18,260 --> 00:43:19,670
0,510 900,1110 1110,1230 1230,1320 1320,1410
life| and I have a
|我还有一堆其他类型的，

1470
00:43:19,670 --> 00:43:20,600
0,210 210,300 300,540 540,720 720,930
bunch of other sort of,|
|

1471
00:43:20,900 --> 00:43:21,920
0,540 540,660 660,810 810,960 960,1020
{} I don't have a
我没有像Jose那样好的Perl脚本或Python脚本，

1472
00:43:21,920 --> 00:43:23,300
0,240 240,600 600,750 750,1020 1020,1380
perl script or python script

1473
00:43:23,300 --> 00:43:24,560
0,390 390,600 600,1050 1050,1200 1200,1260
nicely as Jose,| but I
|但我有一堆独特的剧本，

1474
00:43:24,560 --> 00:43:25,880
0,120 120,180 180,420 420,810 840,1320
have a bunch of unique

1475
00:43:25,880 --> 00:43:27,290
0,300 300,420 420,540 540,930 930,1410
scripts,| that I used to
|我用它来解析、打印和处理日志，

1476
00:43:27,320 --> 00:43:30,080
0,480 480,540 540,990 1350,2220
parse the log, {print,and,process},|
|

1477
00:43:31,090 --> 00:43:33,310
0,570 570,750 750,1380 1380,1860 1890,2220
{} and then we call
然后我们在这里调用questVotesL和questVotesL，

1478
00:43:33,310 --> 00:43:35,110
0,390 390,900 930,1140 1140,1530 1530,1800
{requestVotesL -} and {requestVotesL -}

1479
00:43:35,110 --> 00:43:37,630
0,240 240,390 390,870 1320,2220 2220,2520
right up here,| and you'll
|你很快就会看到，你知道这会是怎么回事，

1480
00:43:37,630 --> 00:43:38,830
0,240 240,720 750,870 870,990 990,1200
see {in,a,second} you know how

1481
00:43:38,830 --> 00:43:39,700
0,150 150,270 270,600 600,690 690,870
this is going to work

1482
00:43:39,700 --> 00:43:42,640
0,270 270,360 360,1050 1140,1830 1830,2940
out,| but basically it as
|但基本上它是一套[]，

1483
00:43:43,210 --> 00:43:44,500
0,360 360,630 630,1020 1020,1140 1140,1290
a [] set,| you know
|你知道，一旦你知道[预先]，我们就会构思论点。

1484
00:43:44,500 --> 00:43:46,180
0,210 210,600 600,660 660,1050 1050,1680
we construct the arguments once

1485
00:43:46,180 --> 00:43:48,550
0,150 150,300 300,480 480,930 1230,2370
you know [up front] {}|
|

1486
00:43:48,550 --> 00:43:50,320
0,720 720,930 930,1380 1380,1560 1560,1770
and let me, so let's
让我来看看RequestVoteArgs参数

1487
00:43:50,320 --> 00:43:51,250
0,150 150,240 240,300 300,720 720,930
look at the {RequestVoteArgs -

1488
00:43:51,250 --> 00:43:53,710
0,390 390,690 780,1470 1740,2310 2310,2460
- -} arguments| {} and
|基本上，你在这里的数据

1489
00:43:53,710 --> 00:43:56,350
0,660 720,1200 1230,1650 1650,2280 2280,2640
basically your data here| and
|你知道，它基本上包含了图2所示的内容，

1490
00:43:56,350 --> 00:43:57,370
0,120 120,210 210,540 540,630 630,1020
you know basically it contains

1491
00:43:57,370 --> 00:43:59,660
0,750 1050,1980
exactly {}

1492
00:43:59,810 --> 00:44:01,370
0,180 180,300 300,690 750,1320 1320,1560
you know what basically figure

1493
00:44:01,370 --> 00:44:02,540
0,150 150,450 450,600 600,690 690,1170
2 says,| that you contain
|您包含术语CandiateID、LastLogIndex和LastLogTerm，

1494
00:44:02,540 --> 00:44:03,860
0,90 90,480 480,900 900,1230 1230,1320
the Term, {CandidateId -}, the

1495
00:44:03,860 --> 00:44:04,850
0,270 270,510 510,870 870,930 930,990
{LastLogIndex - -}, and the

1496
00:44:04,850 --> 00:44:08,390
0,330 330,1080 1560,2280 2280,3150 3150,3540
{LastLogTerm -},| and [] and
|[]还有一件事，也许值得指出的是，

1497
00:44:08,390 --> 00:44:09,770
0,90 90,690 690,870 870,1140 1140,1380
{} one thing, maybe worth

1498
00:44:09,770 --> 00:44:11,210
0,270 270,540 540,720 720,870 870,1440
pointing out is,| I do
|我确实尝试编写字符串函数，

1499
00:44:11,240 --> 00:44:12,440
0,450 450,570 570,780 780,870 870,1200
try to write the string

1500
00:44:12,440 --> 00:44:15,710
0,690 1080,1620 1620,2370 2370,2370 2370,3270
functions,| that allow {} Go
|当你输入%v时，你就知道了，

1501
00:44:15,710 --> 00:44:16,490
0,90 90,180 180,330 330,420 420,780
you know when you're typing

1502
00:44:16,490 --> 00:44:17,630
0,360 360,660 660,750 750,1020 1020,1140
{%v -},| you know, we'll
|您知道，我们将在此结构上调用字符串函数

1503
00:44:17,630 --> 00:44:18,710
0,210 210,360 360,630 630,960 960,1080
call that string function on

1504
00:44:18,710 --> 00:44:20,570
0,570 870,1140 1140,1260 1260,1500 1500,1860
{this,struct}| and so that allows
|这让你可以格式化，你知道结构，

1505
00:44:20,570 --> 00:44:21,770
0,150 150,270 270,900 930,1050 1050,1200
you to format, you know

1506
00:44:21,770 --> 00:44:24,800
0,690 1140,1860 2070,2250 2250,2910 2910,3030
the {} the structure,| the
|以一种很好的方式提出请求，

1507
00:44:24,800 --> 00:44:26,810
0,420 420,570 570,1050 1050,1560 1680,2010
request in {a,nice} way, {}|
|

1508
00:44:26,810 --> 00:44:28,280
0,90 90,660 660,900 900,1140 1140,1470
and again {} that helps
这又一次对我有帮助，帮助我处理我的日志，

1509
00:44:28,280 --> 00:44:29,390
0,210 210,480 480,630 630,900 900,1110
with me, that helps me

1510
00:44:29,390 --> 00:44:30,780
0,480 480,630 630,1080
processing my log,|
|

1511
00:44:30,810 --> 00:44:33,060
0,210 210,330 330,660 660,1290 1440,2250
and so basically every request
所以基本上，我的每一个请求论点，

1512
00:44:33,150 --> 00:44:34,740
0,210 210,930 930,1080 1080,1170 1170,1590
{} argument that I have,|
|

1513
00:44:34,740 --> 00:44:36,420
0,180 180,540 540,660 660,1110 1110,1680
I print in one standard
我用一种标准的方式打印

1514
00:44:36,420 --> 00:44:38,370
0,420 420,600 600,1170 1290,1470 1470,1950
way| and again to simplify
|并再次简化锁定处理。

1515
00:44:38,370 --> 00:44:39,740
0,300 300,810
lock processing.|
|

1516
00:44:45,730 --> 00:44:46,820
0,540
Okay,
好了，回到开始选举的话题，

1517
00:44:46,880 --> 00:44:48,520
0,360 360,1080
back to

1518
00:44:48,520 --> 00:44:50,770
0,240 240,540 540,870 870,1380 1410,2250
{} starting election,| so multiple
|所以多个追随者同时开始，

1519
00:44:50,830 --> 00:44:52,060
0,330 330,870 870,1110 1110,1170 1170,1230
{} followers start at the

1520
00:44:52,060 --> 00:44:53,350
0,240 240,780 780,840 840,1020 1020,1290
same time,| you know they
|你知道他们会成为，其中之一是希望它首先开始，

1521
00:44:53,350 --> 00:44:54,790
0,330 330,960 960,1050 1050,1230 1230,1440
become, one of them is

1522
00:44:54,790 --> 00:44:56,290
0,480 480,660 660,960 960,1290 1290,1500
hopefully it starts first,| it
|它将成为候选人

1523
00:44:56,290 --> 00:44:57,970
0,270 270,930 1290,1440 1440,1530 1530,1680
becomes candidate| and it does
|而且它确实要求投票

1524
00:44:57,970 --> 00:45:00,160
0,360 360,990 990,1380 1380,1620 1620,2190
request votes| and here {the,struct}
|在这里的结构，你知道的参数，

1525
00:45:00,160 --> 00:45:02,290
0,60 60,210 210,570 570,1350 1620,2130
you know the arguments,| put
|把CurrentTerm放在这里，本来是一个，

1526
00:45:02,290 --> 00:45:03,610
0,60 60,390 390,660 660,810 810,1320
the {currentTerm -} in here,

1527
00:45:03,640 --> 00:45:04,720
0,330 330,450 450,510 510,630 630,1080
was going to be one,|
|

1528
00:45:04,720 --> 00:45:05,500
0,150 150,330 330,420 420,540 540,780
if this is the first
如果这是第一次选举，

1529
00:45:05,500 --> 00:45:06,400
0,150 150,270 270,330 330,810 810,900
time for the election,| you
|你知道我是谁，

1530
00:45:06,400 --> 00:45:07,780
0,150 150,390 390,540 540,990 1200,1380
know who I am,| and
|和我的日志最后的索引，你知道哪个通常是0或1随便什么，

1531
00:45:07,780 --> 00:45:09,430
0,90 90,630 630,1380 1380,1530 1530,1650
my {log,lastindex -}, you know

1532
00:45:09,430 --> 00:45:12,100
0,180 180,720 720,930 930,1860 2190,2670
which usually is 0 or

1533
00:45:12,100 --> 00:45:14,400
0,330 330,1230 1350,1920
1 whatever {},|
|

1534
00:45:14,550 --> 00:45:16,080
0,300 300,450 450,630 630,1140 1170,1530
yeah it's gonna be 0,
是啊，我想应该是0

1535
00:45:16,080 --> 00:45:17,670
0,90 90,420 720,1050 1050,1590 1590,1590
I guess| and then {}
|然后该条目中的术语，即术语0，

1536
00:45:17,670 --> 00:45:20,340
0,1320 1350,1860 1860,1950 1950,2130 2130,2670
the term in that entry

1537
00:45:20,700 --> 00:45:22,680
0,210 210,390 390,1080 1110,1380 1380,1980
which is {} term 0,|
|

1538
00:45:23,310 --> 00:45:24,480
0,420 420,780 780,870 870,960 960,1170
{} because you know what
因为你知道我们在做什么是正确的，

1539
00:45:24,480 --> 00:45:25,800
0,120 120,480 480,930 930,1050 1050,1320
we're doing correctly,| we're running
|我们正在为一个人举行选举

1540
00:45:25,800 --> 00:45:27,180
0,60 60,480 480,600 600,1020 1020,1380
an election for one| and
|我们需要展示之前的是什么。

1541
00:45:27,180 --> 00:45:29,160
0,120 120,300 300,720 990,1470 1650,1980
we need to {} show

1542
00:45:29,160 --> 00:45:30,360
0,180 180,360 360,690 690,930 930,1200
what the previous ones were.|
|

1543
00:45:32,990 --> 00:45:34,400
0,870
Okay.|
好吧。|

1544
00:45:34,400 --> 00:45:35,660
0,240 240,450 450,990 990,1140 1140,1260
So then here, this is
然后在这里，这是我发送RPC的标准方式，

1545
00:45:35,660 --> 00:45:37,460
0,240 240,630 630,930 930,1200 1440,1800
my standard way of sending

1546
00:45:37,460 --> 00:45:39,440
0,150 150,960 1170,1620 1620,1800 1800,1980
{RPCs -},| {} just go
|只是为了所有的同行，当然，跳过我自己，

1547
00:45:39,440 --> 00:45:40,880
0,150 150,240 240,330 330,930 960,1440
for all the {peers -},

1548
00:45:40,880 --> 00:45:43,040
0,300 300,1050 1410,1890 1890,1950 1950,2160
skipping myself, {} of course,|
|

1549
00:45:43,040 --> 00:45:43,820
0,120 120,240 240,330 330,660 660,780
I have to count that
我得算算我投了自己的票，

1550
00:45:43,820 --> 00:45:44,840
0,60 60,360 360,480 480,930 930,1020
I voted for myself,| so
|所以我把票数设为1

1551
00:45:44,840 --> 00:45:45,380
0,60 60,240 240,300 300,480 480,540
I set the number of

1552
00:45:45,380 --> 00:45:47,210
0,240 240,330 330,810 1110,1530 1530,1830
votes to 1| and then
|然后我基本上用叉子叉出一根线，

1553
00:45:47,210 --> 00:45:49,010
0,90 90,630 630,900 900,1320 1320,1800
I basically {} fork off

1554
00:45:49,070 --> 00:45:50,750
0,390 390,420 420,960 990,1260 1260,1680
a { -} a thread,|
|

1555
00:45:50,750 --> 00:45:51,890
0,180 180,510 510,600 600,780 780,1140
that basically is gonna do
这基本上是将RPC发送到每个单独的对等点，

1556
00:45:51,890 --> 00:45:53,720
0,390 390,870 870,1140 1140,1320 1320,1830
actually the sending the RPC

1557
00:45:53,720 --> 00:45:55,440
0,150 150,330 330,840 840,1320
to each individual peer,|
|

1558
00:45:55,630 --> 00:45:56,830
0,210 210,450 450,930 930,1050 1050,1200
the first argument is the
第一个参数是RPC发送到的对等体，

1559
00:45:56,830 --> 00:45:58,090
0,270 270,330 330,570 570,750 750,1260
peer to which the RPC

1560
00:45:58,090 --> 00:45:59,080
0,450 450,600 600,750 750,900 900,990
sent,| they all get the
|他们都得到了同样的论据

1561
00:45:59,080 --> 00:46:01,120
0,270 270,990 1170,1380 1380,1650 1650,2040
same arguments| and also passing
|并通过投票的地址，

1562
00:46:01,120 --> 00:46:02,320
0,90 90,390 390,510 510,660 660,1200
the address of the votes,|
|

1563
00:46:02,320 --> 00:46:03,160
0,90 90,180 180,330 330,480 480,840
you know, so they can
你知道，这样他们就可以有一个共同的计票。

1564
00:46:03,400 --> 00:46:05,020
0,330 330,450 450,810 810,1140 1140,1620
have a shared vote count.|
|

1565
00:46:07,870 --> 00:46:09,620
0,270 270,600 600,810 810,1230
Any questions about this?|
对此有什么问题吗？|

1566
00:46:10,080 --> 00:46:12,840
0,660 930,1230 1230,1650 1650,2310 2430,2760
So for request votes, the
因此，对于请求投票，锁被持有

1567
00:46:12,840 --> 00:46:14,070
0,120 120,420 420,570 570,780 780,1230
the lock is being held|
|

1568
00:46:14,070 --> 00:46:15,720
0,150 150,300 300,540 540,1170 1170,1650
and then you're sending the.|
然后你就会发送。|

1569
00:46:16,020 --> 00:46:18,000
0,450 450,720 720,870 870,1500 1710,1980
Yeah, so.| {RPC -}.| Yeah,
是啊，所以。|RPC。|是的，在这里的请求投票中，锁实际上是在这个函数中持有的。

1570
00:46:18,000 --> 00:46:19,530
0,270 270,690 690,900 900,1290 1290,1530
so in a request vote

1571
00:46:19,530 --> 00:46:20,460
0,270 270,360 360,450 450,660 660,930
here, is the lock actually

1572
00:46:20,460 --> 00:46:21,400
0,450
held

1573
00:46:22,080 --> 00:46:23,740
0,360 360,420 420,570 570,1110
inside of this function.|
|

1574
00:46:24,840 --> 00:46:26,160
0,360 360,600 600,870 870,1110 1110,1320
No, right, because it's a
不，对，因为这是一条新线索。

1575
00:46:26,190 --> 00:46:28,170
0,210 210,780 840,1590 1590,1770 1770,1980
new thread.| {Yeah,,new,thread}, it doesn't
|是的，新的线，它不能锁住，

1576
00:46:28,170 --> 00:46:29,280
0,210 210,240 240,570 630,960 960,1110
hold a lock,| and you
|你看，我的命名惯例暗示，

1577
00:46:29,280 --> 00:46:30,660
0,120 120,240 240,570 570,1020 1020,1380
see my naming convention hinted

1578
00:46:30,660 --> 00:46:31,530
0,210 210,420 420,480 480,720 720,870
that,| because it doesn't have
|因为那里没有L。

1579
00:46:31,530 --> 00:46:32,680
0,90 90,330 330,630
an L there.|
|

1580
00:46:35,580 --> 00:46:38,070
0,570 1020,1290 1290,1590 1590,1980 1980,2490
Okay.| So really {requestVote -}
好吧。|所以，当它实际开始运行时，实际上是在请求Vote和请求Vote，

1581
00:46:38,070 --> 00:46:39,390
0,270 270,420 420,810 810,1050 1050,1320
and the {requestVote -} when

1582
00:46:39,390 --> 00:46:41,220
0,480 480,870 870,1200 1200,1470 1470,1830
actually it starts running,| it
|它没有锁，

1583
00:46:41,220 --> 00:46:42,780
0,210 210,390 390,870 870,1140 1140,1560
has no locks,| because only
|因为只有家长持有锁

1584
00:46:42,780 --> 00:46:44,820
0,450 750,1350 1350,1560 1560,1620 1620,2040
the parent held the lock|
|

1585
00:46:44,820 --> 00:46:46,050
0,270 270,540 540,810 810,990 990,1230
and this guy this thread
而这个人，这条线实际上还没有需要锁，

1586
00:46:46,050 --> 00:46:47,460
0,240 240,480 480,810 810,1110 1110,1410
actually hasn't required {the,lock} yet,|
|

1587
00:46:47,610 --> 00:46:49,080
0,360 360,540 540,780 780,1020 1020,1470
it does not have lock.|
它没有锁。|

1588
00:46:51,150 --> 00:46:52,980
0,300 300,450 450,1110 1110,1380 1380,1830
{} So, {} so basically
因此，基本上每个对等点的每个请求投票都运行一个线程，

1589
00:46:52,980 --> 00:46:54,900
0,330 330,630 630,930 930,1590 1620,1920
one thread runs for each

1590
00:46:54,900 --> 00:46:56,010
0,90 90,300 300,630 630,960 960,1110
of these {requestVote -} for

1591
00:46:56,010 --> 00:46:58,200
0,150 150,750 900,1590 1590,1740 1740,2190
each peer,| {} it allocates
|它分配回复结构，

1592
00:46:58,200 --> 00:46:59,880
0,480 480,780 780,1350 1350,1470 1470,1680
a reply structure,| and then
|然后基本上它发出你知道的RPC

1593
00:46:59,880 --> 00:47:01,170
0,360 360,450 450,750 750,1170 1200,1290
basically it sends off you

1594
00:47:01,170 --> 00:47:02,220
0,180 180,360 360,540 540,690 690,1050
know the {RPC - -}|
|

1595
00:47:02,250 --> 00:47:03,210
0,210 210,420 420,510 510,720 720,960
and this is all done
而这一切都是在没有握住锁的情况下完成的，

1596
00:47:03,210 --> 00:47:04,920
0,330 330,660 660,720 720,1230
without holding the lock,|
|

1597
00:47:04,920 --> 00:47:06,000
0,480 480,630 630,720 720,840 840,1080
and then, at some point
然后，在某种程度上，我们得到了回复

1598
00:47:06,000 --> 00:47:07,230
0,90 90,210 210,270 270,720 720,1230
we get a response back|
|

1599
00:47:07,620 --> 00:47:09,030
0,570 570,810 810,870 870,1050 1050,1410
and then at that point,
然后在那个时候，在响应处理程序中，

1600
00:47:09,030 --> 00:47:10,650
0,270 270,690 690,1200 1200,1290 1290,1620
in response handler,| I grab
|我从一开始就抓起了木头

1601
00:47:10,650 --> 00:47:11,310
0,60 60,360 360,540 540,600 600,660
the log right at the

1602
00:47:11,310 --> 00:47:13,830
0,600 750,930 930,1020 1020,1560 1590,2520
beginning| and do whatever response
|并执行任何必要的响应处理。

1603
00:47:13,830 --> 00:47:15,760
0,540 570,720 720,810 810,1410
handling that is necessary.|
|

1604
00:47:17,260 --> 00:47:20,170
0,1050 1320,1680 1680,2490 2490,2700 2700,2910
Yeah, {go,ahead}.| Alright, you said
好的，去吧。|好的，你之前说过，

1605
00:47:20,170 --> 00:47:21,760
0,510 510,750 750,930 930,1320 1320,1590
earlier,| that you shouldn't hold
|你不应该拿着锁，

1606
00:47:21,760 --> 00:47:23,050
0,60 60,420 420,690 690,900 900,1290
a lock,| when you're doing
|当你像做RPC呼叫一样做的时候，

1607
00:47:23,050 --> 00:47:25,420
0,1230 1320,1530 1530,1800 1800,2040 2040,2370
like you're doing {RPC -}

1608
00:47:25,420 --> 00:47:26,890
0,300 300,480 480,690 690,990 990,1470
call,| you mean like basically
|你的意思是，基本上可以，

1609
00:47:26,890 --> 00:47:28,750
0,180 180,540 540,1050 1380,1620 1620,1860
it's okay to,| it's okay
|对于RPC调用本身来说，这是可以的

1610
00:47:28,750 --> 00:47:29,740
0,120 120,210 210,420 420,750 750,990
for the {RPC -} call

1611
00:47:29,740 --> 00:47:31,060
0,510 510,720 720,810 810,1020 1020,1320
itself| in the {RPC -}
|在调用Do、持有锁的RPC中，

1612
00:47:31,060 --> 00:47:32,260
0,360 360,450 450,840 840,990 990,1200
called to do, to hold

1613
00:47:32,260 --> 00:47:33,220
0,90 90,420 420,570 570,810 810,960
a lock,| but not like
|但和你打电话的时候不一样。

1614
00:47:33,220 --> 00:47:34,660
0,300 300,480 480,870 870,1050 1050,1440
while you're calling.| Yeah, I'm
|是啊，我不是个十字勋章，

1615
00:47:34,660 --> 00:47:35,950
0,150 150,210 210,570 570,1050 1050,1290
not a cross this,| why
|你为什么要坐在十字架上通过网络发送它。

1616
00:47:35,950 --> 00:47:37,720
0,60 60,150 150,450 450,1050 1230,1770
are you sitting a cross

1617
00:47:37,720 --> 00:47:38,890
0,240 240,330 330,540 540,630 630,1170
sending it over the network.|
|

1618
00:47:39,220 --> 00:47:40,000
0,150 150,300 300,540 540,660 660,780
But it's okay, if you're
但是，如果您是在RPC内完成的，这是可以的。

1619
00:47:40,000 --> 00:47:41,740
0,240 240,390 390,900 900,1140 1140,1740
doing it within {RPC -}.|
|

1620
00:47:41,830 --> 00:47:43,000
0,240 240,480 480,570 570,960 960,1170
Or even the reply handler,|
或者甚至回复处理程序，|

1621
00:47:43,000 --> 00:47:44,260
0,180 270,660 660,930 930,1110 1110,1260
like think about this as
就像我们回复处理程序运行的方式一样，

1622
00:47:44,260 --> 00:47:46,030
0,420 420,570 570,1050 1050,1410 1410,1770
ways we reply handler running,|
|

1623
00:47:46,270 --> 00:47:47,470
0,150 150,270 270,600 600,780 780,1200
so the response came back|
所以回复就回来了|

1624
00:47:47,740 --> 00:47:48,910
0,150 150,420 420,660 660,720 720,1170
and now there's a reply,
现在有了回复，你必须处理回复。

1625
00:47:48,910 --> 00:47:49,930
0,330 330,450 450,570 570,930 930,1020
you have to process the

1626
00:47:49,930 --> 00:47:50,980
0,540
reply.|
|

1627
00:47:51,950 --> 00:47:53,000
0,150 150,300 300,420 420,780 780,1050
Oh, {} I'm talking about
哦，我是说，就像请求中说的那样，

1628
00:47:53,000 --> 00:47:54,350
0,210 210,420 420,630 630,780 780,1350
like say in the request,|
|

1629
00:47:54,350 --> 00:47:56,000
0,210 210,390 390,510 510,1170 1170,1650
but like the capital R
但就像大写的R一样，大写的V投票，

1630
00:47:56,000 --> 00:47:58,940
0,870 900,1410 1410,1680 1680,2310 2640,2940
requests, capital V vote,| that's
|拿着锁是可以的，至少在那里是正确的。

1631
00:47:58,940 --> 00:48:00,350
0,240 240,330 330,630 630,1140 1170,1410
okay to hold locks, in

1632
00:48:00,350 --> 00:48:02,100
0,360 360,510 510,810 840,1290
there at least right.|
|

1633
00:48:02,220 --> 00:48:03,480
0,510 510,600 600,720 720,900 900,1260
Where you want to {hold,locks},
你想上锁的地方，实际上是我。

1634
00:48:03,480 --> 00:48:05,520
0,360 360,660 660,1140 1470,1710 1710,2040
I'm actually.| Like, so like
|就像，就像大写的RequestVote，是的，

1635
00:48:05,520 --> 00:48:08,580
0,570 570,1140 1140,1710 1770,2190 2580,3060
capital {RequestVote -} here, yeah,|
|

1636
00:48:08,730 --> 00:48:09,870
0,210 210,330 330,420 420,780 780,1140
that's what I'm talking about.|
这就是我要说的。|

1637
00:48:10,440 --> 00:48:11,620
0,210 210,630
This one?|
这一个?|

1638
00:48:11,620 --> 00:48:13,150
0,270 270,510 510,630 630,1170 1170,1530
No, like the function here,|
不，就像这里的函数一样，|

1639
00:48:14,080 --> 00:48:15,640
0,510 510,660 660,780 780,1230 1230,1560
{} so it's request vote,|
所以这是请求投票，|

1640
00:48:15,640 --> 00:48:17,080
0,150 150,480 510,990 990,990 990,1440
but it's {} I think
但我觉得它是大写的，是的，

1641
00:48:17,080 --> 00:48:20,240
0,540 570,1170 1170,1620 2160,2610
it's capital R, yeah,|
|

1642
00:48:21,890 --> 00:48:24,110
0,1170 1230,1500 1500,1980 1980,2100 2100,2220
like you probably have a
就像你可能有办法一样，对吧，

1643
00:48:24,110 --> 00:48:25,850
0,360 360,630 630,960 990,1110 1110,1740
method, right,| it's the {RPC,call
|这是RPC调用。

1644
00:48:25,940 --> 00:48:27,860
0,720 720,720 720,1740 1740,1860 1860,1920
-}.| {I,think,the} RPC on the
|我认为接收方的RPC。

1645
00:48:27,860 --> 00:48:31,310
0,390 390,780 870,2760 2760,2910 3030,3450
receiver side.| Yeah yeah yeah,
|是的，是的，我们当然会看第二个，

1646
00:48:31,310 --> 00:48:32,240
0,240 240,420 420,600 600,660 660,930
we'll look at the second

1647
00:48:32,240 --> 00:48:33,650
0,60 60,330 330,510 510,1290 1290,1410
of course,| that was on
|这是一种全新的思考方式，

1648
00:48:33,650 --> 00:48:34,490
0,60 60,420 420,600 600,780 780,840
a completely new way to

1649
00:48:34,490 --> 00:48:35,840
0,180 180,360 360,1020 1020,1050 1050,1350
think about it,| {} totally
|完全不同的机器，是的，是的，绝对是。

1650
00:48:35,840 --> 00:48:38,150
0,270 270,780 780,1620 1650,2010 2010,2310
different machine, yeah yeah yeah,

1651
00:48:38,760 --> 00:48:40,800
0,690 690,1020 1320,1590 1590,1920 1920,2040
absolutely.| So, so basically these
|所以，基本上我们整个街区的这两个地方，

1652
00:48:40,800 --> 00:48:41,640
0,180 180,450 450,510 510,660 660,840
two places of our whole

1653
00:48:41,640 --> 00:48:43,050
0,360 360,540 540,720 720,810 810,1410
block,| like in the handler
|例如在处理程序中、在请求处理程序中和在回复处理程序中。

1654
00:48:43,080 --> 00:48:44,700
0,120 120,180 180,570 570,1080 1410,1620
in the request handler and

1655
00:48:44,700 --> 00:48:46,360
0,150 150,270 270,690 690,1170
in the reply handler.|
|

1656
00:48:48,640 --> 00:48:49,980
0,300 300,540 540,780
Okay, thank you.|
好的谢谢。|

1657
00:48:50,420 --> 00:48:52,130
0,510 510,810 810,990 990,1170 1170,1710
Sorry, sorry for being confused,|
抱歉，抱歉弄糊涂了，|

1658
00:48:52,550 --> 00:48:54,290
0,450 450,780 780,990 990,1470 1470,1740
I'm glad we clarified that.|
我很高兴我们澄清了这一点。|

1659
00:48:54,680 --> 00:48:57,140
0,570 750,1110 1110,1530 1560,2010 2010,2460
{} Okay, so grab block
好的，Grab块然后在日志中放入一条print语句，

1660
00:48:57,140 --> 00:48:58,160
0,270 270,390 390,450 450,660 660,1020
then put a print statement

1661
00:48:58,160 --> 00:48:59,510
0,690 720,810 810,1140 1140,1260 1260,1350
in the log,| so I
|这样我就可以知道以后我可以研究它了

1662
00:48:59,510 --> 00:49:00,470
0,90 90,240 240,510 540,870 870,960
can know what later on

1663
00:49:00,470 --> 00:49:01,820
0,60 60,150 150,480 480,750 1170,1350
I can study it| and
|当然，还有基本的检查，

1664
00:49:01,820 --> 00:49:03,260
0,420 420,570 570,990 990,1050 1050,1440
then of course the basic

1665
00:49:03,260 --> 00:49:04,370
0,390 390,510 510,630 630,960 960,1110
checks,| you know that you
|你知道，你知道你的图2实际上不同于说太多它，

1666
00:49:04,370 --> 00:49:06,980
0,270 270,810 810,1800 2190,2520 2520,2610
know you actually figure 2

1667
00:49:06,980 --> 00:49:08,000
0,270 270,390 390,570 570,750 750,1020
different from saying much about

1668
00:49:08,000 --> 00:49:09,200
0,510 510,780 780,900 900,1020 1020,1200
it,| but you know this
|但你知道这是适用于所有服务器的规则，

1669
00:49:09,200 --> 00:49:11,180
0,180 180,570 900,1410 1410,1560 1560,1980
is the rule that applies

1670
00:49:11,180 --> 00:49:14,360
0,120 120,720 1140,2190 2220,2730 2730,3180
to all {} servers correct,|
|

1671
00:49:14,360 --> 00:49:15,400
0,630
the
期限比回复期限要大，

1672
00:49:15,490 --> 00:49:17,560
0,450 450,570 570,1080 1110,1620 1620,2070
term is bigger than the

1673
00:49:17,830 --> 00:49:18,970
0,330 330,690 690,960 960,1080 1080,1140
reply terms,| better than the
|比现在的任期更好，

1674
00:49:18,970 --> 00:49:21,010
0,300 300,840 900,1680 1710,1920 1920,2040
current term,| then {} you
|然后你必须切换到跟随者状态

1675
00:49:21,010 --> 00:49:22,810
0,120 120,660 690,1140 1140,1410 1410,1800
gotta switch to the follower

1676
00:49:22,810 --> 00:49:24,430
0,480 480,960 990,1320 1320,1530 1530,1620
state| and {} to the
|对于回复你的人的条件，

1677
00:49:24,430 --> 00:49:27,220
0,390 390,600 600,1110 1500,2310 2370,2790
term of the {} person

1678
00:49:27,220 --> 00:49:28,360
0,150 150,570 570,660 660,900 930,1140
that responded to you,| so
|我们马上就能看到这一点。

1679
00:49:28,360 --> 00:49:28,960
0,210 210,270 270,480 480,570 570,600
look at that in a

1680
00:49:28,960 --> 00:49:29,920
0,480
second.|
|

1681
00:49:30,340 --> 00:49:31,510
0,360 360,540 540,690 690,1080 1080,1170
{} So that basically you
所以基本上你知道如果这就是候选人

1682
00:49:31,510 --> 00:49:32,920
0,150 150,720 720,1020 1020,1260 1260,1410
know if this this was

1683
00:49:32,920 --> 00:49:34,360
0,90 90,720 1020,1290 1290,1320 1320,1440
the candidate| and I was
|我是在说，这在更高的术语中实际上是有效的

1684
00:49:34,360 --> 00:49:35,530
0,270 270,450 450,810 810,960 960,1170
talking to appear that actually

1685
00:49:35,530 --> 00:49:36,610
0,150 150,210 210,270 270,540 540,1080
works in the higher term|
|

1686
00:49:36,730 --> 00:49:38,530
0,150 150,540 540,870 870,1320 1320,1800
and basically backs off and
基本上就是后退，成为一个追随者。

1687
00:49:38,560 --> 00:49:40,340
0,540 540,780 780,1260
becomes a follower.|
|

1688
00:49:41,860 --> 00:49:43,280
0,840

1689
00:49:43,310 --> 00:49:44,760
0,270 270,870
Okay, so,
好的，所以，如果追随者回答说，

1690
00:49:44,910 --> 00:49:47,280
0,300 300,690 690,1410 1440,1830 1830,2370
{} if the follower responded

1691
00:49:47,280 --> 00:49:48,930
0,270 270,660 660,1080 1080,1230 1230,1650
saying,| I'm grabbing my vote,|
|我在争取我的选票，|

1692
00:49:49,050 --> 00:49:50,850
0,420 420,600 600,1230 1380,1470 1470,1800
then I increment the number
然后我增加投票数，自我投票增加1，

1693
00:49:50,850 --> 00:49:52,410
0,60 60,630 840,990 990,1380 1380,1560
of votes, the self vote

1694
00:49:52,410 --> 00:49:53,850
0,120 120,720 720,870 870,1110 1110,1440
by 1,| it is totally
|做正确的事是完全安全的，

1695
00:49:53,850 --> 00:49:55,170
0,270 270,330 330,540 540,960 960,1320
safe to do correctly,| because
|因为我拿着木筏锁

1696
00:49:55,170 --> 00:49:56,850
0,270 270,720 720,960 960,1260 1260,1680
I'm holding the raft lock|
|

1697
00:49:57,180 --> 00:49:57,840
0,150 150,270 270,450 450,570 570,660
and so this is a
所以这是一个连载的，

1698
00:49:57,840 --> 00:50:00,780
0,630 630,1080 1110,1830 2550,2850 2850,2940
serialized,| so multiple things that
|所以会有很多正确的事情发生，

1699
00:50:00,780 --> 00:50:02,520
0,120 120,450 450,810 810,1230 1230,1740
will happen correct,| multiple responses
|会有多个回复，

1700
00:50:02,520 --> 00:50:03,810
0,150 150,300 300,720 900,1110 1110,1290
will come back,| they may
|它们可以并行运行，

1701
00:50:03,810 --> 00:50:05,370
0,210 210,330 330,1080 1200,1440 1440,1560
run in parallel,| but they
|但它们不会被连载，

1702
00:50:05,370 --> 00:50:06,540
0,180 180,270 270,900 900,1110 1110,1170
won't be serialized,| because of
|因为木筏的锁，

1703
00:50:06,540 --> 00:50:07,600
0,90 90,390 390,750
the raft lock,|
|

1704
00:50:09,390 --> 00:50:11,100
0,300 300,540 540,630 630,1320 1350,1710
so {add,up} the votes,| if
所以把选票加起来，|如果投票时间超过

1705
00:50:11,100 --> 00:50:12,570
0,210 210,540 540,720 720,1140 1140,1470
the vote is longer than

1706
00:50:12,570 --> 00:50:13,680
0,540 600,840 840,930 930,1050 1050,1110
the| you know if I
|你知道，如果我拥有多数选票，

1707
00:50:13,680 --> 00:50:15,270
0,90 90,180 180,870 900,1500 1500,1590
have a majority of the

1708
00:50:15,270 --> 00:50:17,460
0,390 390,1050 1260,1590 1590,1740 1740,2190
votes,| then if I'm still
|如果我还在和开局一样的学期，

1709
00:50:17,460 --> 00:50:19,470
0,120 120,330 330,690 690,1380 1410,2010
in the same term as

1710
00:50:19,470 --> 00:50:21,660
0,750 780,1500 1500,1740 1740,1800 1800,2190
the start,| when I started
|当我开始实际竞选时，

1711
00:50:21,660 --> 00:50:23,160
0,180 180,660 660,1020 1050,1440 1440,1500
out actually {} running the

1712
00:50:23,160 --> 00:50:24,540
0,600 720,990 990,1200 1200,1320 1320,1380
election,| then I'm going to
|然后我就会成为领导者

1713
00:50:24,540 --> 00:50:26,190
0,240 240,330 330,930 1110,1470 1470,1650
become the leader| and I'll
|我会发出你知道的第一轮心跳，

1714
00:50:26,190 --> 00:50:27,180
0,270 270,660 660,780 780,870 870,990
send out you know the

1715
00:50:27,180 --> 00:50:28,890
0,240 240,630 630,780 780,1440 1440,1710
first round of heartbeats,| which
|所有这些都在一秒钟内看起来。

1716
00:50:28,890 --> 00:50:29,910
0,150 150,300 300,480 480,510 510,1020
all look in a second.|
|

1717
00:50:31,820 --> 00:50:32,540
0,330 330,480 480,510 510,660 660,720
Yeah, so I want to
是的，所以我想看两件事，

1718
00:50:32,540 --> 00:50:34,010
0,180 180,300 300,510 510,1020 1050,1470
look at two things,| let's
|让我们看看什么是成为领导者，

1719
00:50:34,010 --> 00:50:35,180
0,90 90,300 300,570 570,900 900,1170
see what become leader is,|
|

1720
00:50:35,180 --> 00:50:36,620
0,300 300,780 810,1080 1080,1290 1290,1440
become leader is right up
成为领袖就在这里，

1721
00:50:36,620 --> 00:50:38,600
0,480 870,1320 1320,1440 1440,1650 1650,1980
here,| {} you know as
|你知道，作为大写的L，

1722
00:50:38,600 --> 00:50:40,040
0,330 330,690 690,930 930,1260 1260,1440
capital L,| because it's you
|因为你知道它已经被锁住了，

1723
00:50:40,040 --> 00:50:41,510
0,420 420,810 810,1050 1050,1110 1110,1470
know already holds a lock,|
|

1724
00:50:41,510 --> 00:50:43,010
0,390 390,720 720,810 810,1290 1320,1500
basically sets the state to
基本上将状态设置为领导状态，

1725
00:50:43,010 --> 00:50:46,400
0,120 120,360 360,900 1380,2460 2460,3390
the leader state,| and initialize
|并且INITIALIZE是下一个索引，

1726
00:50:46,400 --> 00:50:48,020
0,150 150,300 300,570 570,1230
is the next index,|
|

1727
00:50:48,050 --> 00:50:49,010
0,120 120,180 180,420 420,780 780,960
and the next index or
下一个索引，或者仅仅是最后一节课，基本上是猜测

1728
00:50:49,010 --> 00:50:50,240
0,480 480,540 540,810 810,1140 1140,1230
simply the last lecture is

1729
00:50:50,240 --> 00:50:51,350
0,420 420,840 840,930 930,1050 1050,1110
basically guess| and it's an
|这是一个乐观的猜测，

1730
00:50:51,350 --> 00:50:53,420
0,510 510,930 990,1920 1920,2010 2010,2070
optimistic guess,| {} you know
|你知道，我刚刚对我的最后一个指数加1说了什么，

1731
00:50:53,420 --> 00:50:54,620
0,120 120,300 300,600 600,780 780,1200
I just said to whatever

1732
00:50:54,620 --> 00:50:55,820
0,120 120,480 480,840 840,990 990,1200
my last index {} plus

1733
00:50:55,820 --> 00:50:56,740
0,330
1,|
|

1734
00:50:56,740 --> 00:50:58,180
0,300 300,660 660,1170 1170,1290 1290,1440
so basically assuming that all
所以基本上假设所有的追随者都是最新的，

1735
00:50:58,180 --> 00:50:59,350
0,120 120,660 660,930 930,1080 1080,1170
the followers are up to

1736
00:50:59,350 --> 00:51:00,280
0,360
date,|
|

1737
00:51:00,500 --> 00:51:01,280
0,150 150,240 240,360 360,720 720,780
and if they're not,| you
如果他们不是，|你知道我们以后会看到他们会退缩，

1738
00:51:01,280 --> 00:51:02,210
0,150 150,360 360,540 540,840 840,930
know we'll see later they

1739
00:51:02,210 --> 00:51:03,540
0,180 180,450 450,810
will back off,|
|

1740
00:51:04,120 --> 00:51:05,980
0,270 270,690 690,960 960,1290 1320,1860
okay, I'll back off {}
好的，我会放弃附加条目，很抱歉回复。

1741
00:51:06,860 --> 00:51:08,120
0,270 270,480 480,600 600,900 900,1260
{} on the append entry,

1742
00:51:08,120 --> 00:51:09,460
0,180 180,780
{sorry,by} reply.|
|

1743
00:51:10,740 --> 00:51:12,300
0,510 540,990
Okay good,|
好的很好，|

1744
00:51:12,300 --> 00:51:13,560
0,120 120,270 270,390 390,690 690,1260
so that has become leader,|
因此，它已经成为了领导者，|

1745
00:51:13,590 --> 00:51:14,730
0,510 510,690 690,780 780,990 990,1140
{} let me look at
让我看看新的特尔梅尔，

1746
00:51:14,730 --> 00:51:16,260
0,360 360,990
{newTermL -},|
|

1747
00:51:17,550 --> 00:51:19,380
0,390 390,540 540,690 690,1380 1440,1830
{} so {newTermL -}, nothing
所以新的特罗姆，没什么真的，你知道太刺激了

1748
00:51:19,380 --> 00:51:20,580
0,420 420,510 510,630 630,750 750,1200
really, you know too exciting|
|

1749
00:51:20,580 --> 00:51:21,600
0,120 120,510 510,750 750,810 810,1020
and basically says I can
基本上就是说我可以进入下个学期，

1750
00:51:21,600 --> 00:51:23,580
0,360 360,480 480,570 570,840 840,1980
go to the next {}

1751
00:51:23,610 --> 00:51:25,050
0,450 450,690 690,810 810,1230 1230,1440
term,| that is supplied by
|它由调用者提供，

1752
00:51:25,050 --> 00:51:27,570
0,600 990,1590 1890,2190 2190,2310 2310,2520
the caller,| {} I set
|我将VotedFor设置为-1，

1753
00:51:27,570 --> 00:51:28,800
0,300 300,450 450,540 540,810 810,1230
{votedFor -} to {-1 -},|
|

1754
00:51:28,800 --> 00:51:29,970
0,390 390,540 540,720 720,990 990,1170
because I haven't voted yet
因为这一学期我还没有投票，

1755
00:51:29,970 --> 00:51:31,110
0,90 90,270 270,690 690,960 960,1140
in this term,| and I
|我把状态改成了追随者，

1756
00:51:31,110 --> 00:51:32,610
0,360 360,690 690,1050 1050,1200 1200,1500
changed to a my state

1757
00:51:32,610 --> 00:51:34,500
0,630 720,1230 1230,1410 1410,1740 1740,1890
{to,follower},| because this is kind
|因为这是一种需要坚持的状态，

1758
00:51:34,500 --> 00:51:35,220
0,90 90,330 330,450 450,630 630,720
of state that needs to

1759
00:51:35,220 --> 00:51:37,160
0,150 150,690 690,1050 1050,1590
be persisted,| {I,call} persist.|
|我称之为坚持。|

1760
00:51:41,480 --> 00:51:42,290
0,210 210,330 330,510 510,630 630,810
Okay, so this is sort
好的，这就是候选人一方

1761
00:51:42,290 --> 00:51:44,420
0,180 180,390 390,960 960,1500 1710,2130
of the candidate side| and
|现在我们想看看追随者的一面，

1762
00:51:44,420 --> 00:51:45,050
0,150 150,240 240,390 390,450 450,630
now we want to look

1763
00:51:45,050 --> 00:51:48,960
0,810 1170,2040 2250,2970 2970,3420
at {} follower side,|
|

1764
00:51:49,080 --> 00:51:51,450
0,450 450,930 930,1710 1710,2130 2130,2370
or perhaps another candidate, that's
或者可能是另一位候选人，也是同时参选的。

1765
00:51:51,450 --> 00:51:53,640
0,300 300,540 540,1050 1050,1590 1620,2190
also running election in parallel.|
|

1766
00:51:55,170 --> 00:51:57,390
0,600 630,1650 1710,1890 1890,2130 2130,2220
So, {} so here's the
所以，这是RequestVote处理程序，

1767
00:51:57,390 --> 00:51:58,950
0,360 360,600 600,1110 1140,1470 1470,1560
{RequestVote -} handler,| this is
|这是在运行，

1768
00:51:58,950 --> 00:52:00,240
0,630 630,810 810,1140 1140,1200 1200,1290
running,| so this is the
|这是在另一台机器上运行的代码，

1769
00:52:00,240 --> 00:52:01,080
0,180 180,240 240,480 480,630 630,840
piece of code that runs

1770
00:52:01,080 --> 00:52:02,130
0,90 90,210 210,420 420,930 930,1050
on the other machine,| if
|如果你愿意，正确的说，

1771
00:52:02,130 --> 00:52:04,920
0,120 120,390 390,870 870,1740 1890,2790
you will, correct,| were where
|我在回答这个问题时有一点困惑

1772
00:52:04,920 --> 00:52:05,910
0,30 30,420 420,750 750,960 960,990
I was confused about a

1773
00:52:05,910 --> 00:52:07,530
0,180 180,480 480,1170 1170,1500 1500,1620
little bit in answering that

1774
00:52:07,530 --> 00:52:09,570
0,480 1140,1680 1680,1800 1800,1890 1890,2040
question| and you know you
|你知道你成功的第一件事就是

1775
00:52:09,570 --> 00:52:10,440
0,390 390,450 450,660 660,780 780,870
succeeded the first thing it

1776
00:52:10,440 --> 00:52:12,240
0,450 930,1170 1170,1320 1320,1620 1620,1800
does| is {} vote by
|是由RPC图书馆系统投票，对吗，

1777
00:52:12,240 --> 00:52:14,220
0,60 60,510 510,840 840,1260 1260,1980
the RPC library system, correct,|
|

1778
00:52:14,220 --> 00:52:15,210
0,150 150,300 300,480 480,900 900,990
with its own thread| and
有自己的线索|它做的第一件事就是把锁包裹在木筏结构上，

1779
00:52:15,210 --> 00:52:15,900
0,90 90,270 270,390 390,480 480,690
the first thing it does

1780
00:52:15,900 --> 00:52:17,250
0,90 90,300 300,600 600,960 960,1350
it actually wraps the lock

1781
00:52:17,250 --> 00:52:19,380
0,300 300,600 720,1260 1260,1740
on the raft structure,|
|

1782
00:52:20,420 --> 00:52:22,340
0,150 150,360 360,990 990,1170 1170,1920
and then basically this follows
这基本上遵循了图2所示的规则，

1783
00:52:22,370 --> 00:52:24,280
0,630 630,750 750,1410
literally the rules

1784
00:52:24,280 --> 00:52:25,720
0,240 240,570 570,960 990,1230 1230,1440
{} figure 2,| {you,know} there's
|你知道所有服务器的规则都是正确的，

1785
00:52:25,720 --> 00:52:27,040
0,120 120,360 360,510 510,630 630,1320
the rule for all servers

1786
00:52:27,070 --> 00:52:28,960
0,450 450,600 600,1080
correct,| if the
|如果术语，论点，术语论点高于我现在的任期，

1787
00:52:29,240 --> 00:52:30,800
0,330 360,720 720,780 780,1080 1080,1560
{} term, the argument {the,term}

1788
00:52:30,800 --> 00:52:31,790
0,360 360,450 450,720 720,840 840,990
argument is higher than my

1789
00:52:31,790 --> 00:52:33,290
0,330 330,840 840,1110 1110,1350 1350,1500
current term,| then I should
|那么我应该换到这个新学期了。

1790
00:52:33,290 --> 00:52:34,400
0,570 570,660 660,780 780,900 900,1110
switch you know to this

1791
00:52:34,400 --> 00:52:36,950
0,210 210,780 780,1860 1890,2250 2250,2550
new term| and {} that's
|仅此而已，

1792
00:52:36,950 --> 00:52:40,310
0,330 990,1890 2220,2940 2940,3150 3150,3360
it,| {} then here, sort
|然后在这里，你知道有趣的部分是正确的，

1793
00:52:40,310 --> 00:52:41,390
0,90 90,570 720,870 870,990 990,1080
of the you know the

1794
00:52:41,390 --> 00:52:42,650
0,330 330,750 750,1020 1020,1140 1140,1260
interesting piece correct,| this is
|这都与图[]有关，

1795
00:52:42,650 --> 00:52:44,180
0,270 270,630 630,810 810,1410 1410,1530
all related to figure {[]

1796
00:52:44,180 --> 00:52:45,620
0,390 390,630 630,750 750,1170 1170,1440
-},| what it means to
|[]价值意味着什么？图7，

1797
00:52:45,620 --> 00:52:46,880
0,330 330,510 510,750 750,1020 1020,1260
be worth about [] figure

1798
00:52:46,880 --> 00:52:48,650
0,420 720,1200 1200,1410 1410,1500 1500,1770
7,| {} what it means
|与时俱进意味着什么，

1799
00:52:48,650 --> 00:52:49,940
0,90 90,390 390,570 570,660 660,1290
to be up to date,|
|

1800
00:52:49,940 --> 00:52:50,750
0,90 90,210 210,450 450,720 720,810
you can only become a
你只能成为一名领导者，如果你是最新的，

1801
00:52:50,750 --> 00:52:52,160
0,480 480,690 690,1110 1110,1320 1320,1410
leader, if you're up to

1802
00:52:52,160 --> 00:52:53,040
0,450
date,|
|

1803
00:52:53,040 --> 00:52:54,270
0,270 270,450 450,600 600,1080 1080,1230
{} so I compute you
所以我计算你知道最新的函数，

1804
00:52:54,270 --> 00:52:56,400
0,180 180,450 450,930 930,1620 1740,2130
know the uptodate function, {}|
|

1805
00:52:56,400 --> 00:52:58,530
0,510 900,1470 1470,1620 1620,1830 1830,2130
in {} and that's basically
这基本上是基于最后一个索引或最后一个索引中的术语，

1806
00:52:58,530 --> 00:53:00,360
0,390 390,660 660,750 750,1140 1140,1830
based on the last index

1807
00:53:00,390 --> 00:53:01,470
0,360 360,570 570,630 630,990 990,1080
or in the term in

1808
00:53:01,470 --> 00:53:02,880
0,60 60,390 390,930
the last index,|
|

1809
00:53:03,000 --> 00:53:04,110
0,180 180,270 270,360 360,570 570,1110
and so it says uptodate
所以它说最新的是，

1810
00:53:04,110 --> 00:53:07,230
0,450 510,1260 1260,1470 1470,2520 2580,3120
is,| {} if my term
|如果我在论点中的术语等于我的术语

1811
00:53:07,230 --> 00:53:08,280
0,120 120,240 240,600 600,720 720,1050
in the argument is equal

1812
00:53:08,280 --> 00:53:11,010
0,90 90,270 270,900 1170,1950 1980,2730
to my term| and the
|而呼叫者，呼叫者将候选作为LastLogIndex，恰好等于或高于myIndex，

1813
00:53:11,310 --> 00:53:12,580
0,750
{}

1814
00:53:12,760 --> 00:53:14,620
0,600 630,1110 1110,1380 1410,1770 1770,1860
the caller, the caller the

1815
00:53:14,620 --> 00:53:16,420
0,600 630,990 990,1110 1110,1470 1470,1800
candidate as a {LastLogIndex -}

1816
00:53:16,420 --> 00:53:17,710
0,150 150,360 390,780 780,1170 1170,1290
that just equal {or,higher} to

1817
00:53:17,710 --> 00:53:19,060
0,150 150,660 660,900 900,1260 1260,1350
{myIndex -},| so basically to
|因此，基本上转向相等，最长的原木应该获胜

1818
00:53:19,060 --> 00:53:20,470
0,210 210,300 300,660 660,780 780,1410
turn to equal the longest

1819
00:53:20,470 --> 00:53:23,980
0,330 330,510 510,900 1470,2130 2340,3510
log should win| and or
|或者如果你认识高于学期的候选人，

1820
00:53:24,010 --> 00:53:25,840
0,420 420,1110 1140,1260 1260,1410 1410,1830
{} if you know the

1821
00:53:25,870 --> 00:53:27,970
0,690 690,780 780,1350 1350,1800 1800,2100
candidates in {higher,than,term} period,| then
|那么它总是赢，候选人就赢了。

1822
00:53:27,970 --> 00:53:29,500
0,210 210,570 570,930 960,1140 1140,1530
it always wins, the candidate

1823
00:53:29,500 --> 00:53:30,280
0,450
wins.|
|

1824
00:53:31,110 --> 00:53:31,860
0,150 150,330 330,570 570,660 660,750
So that means it to
这意味着它必须是最新的，

1825
00:53:31,860 --> 00:53:32,700
0,150 150,300 300,390 390,690 690,840
be up to date,| so
|因此计算最新

1826
00:53:32,700 --> 00:53:33,810
0,360 360,480 480,570 570,1020 1020,1110
compute {uptodate - -}| and
|然后基本上经历不同的案件，

1827
00:53:33,810 --> 00:53:35,340
0,240 240,690 780,1020 1020,1260 1260,1530
then basically go through different

1828
00:53:35,340 --> 00:53:36,420
0,540 540,690 690,780 780,1020 1020,1080
cases,| if the term is
|如果该术语小于当前术语，

1829
00:53:36,420 --> 00:53:37,950
0,510 510,630 630,720 720,1020 1020,1530
smaller than the current term,|
|

1830
00:53:38,160 --> 00:53:40,890
0,210 210,510 510,780 780,1290 2310,2730
that means that the caller
这意味着呼叫者落后了

1831
00:53:40,890 --> 00:53:42,300
0,150 150,690 780,1200 1200,1320 1320,1410
is behind| and so I
|所以我投票支持FALSE

1832
00:53:42,300 --> 00:53:43,980
0,360 360,720 720,930 930,1560 1560,1680
{VoteGranted -} to false| and
|然后在另一种情况下，

1833
00:53:43,980 --> 00:53:44,880
0,240 240,330 330,420 420,570 570,900
then in the other case,|
|

1834
00:53:44,880 --> 00:53:46,400
0,150 150,270 270,480 480,1020
if I hadn't voted,|
如果我没有投票，|

1835
00:53:46,400 --> 00:53:48,140
0,570 570,870 870,900 900,1440 1590,1740
{} or I voted you
或者我投了你知道已经投给这个候选人了，

1836
00:53:48,140 --> 00:53:49,130
0,180 180,480 480,750 750,840 840,990
know already voted for this

1837
00:53:49,130 --> 00:53:52,070
0,690 1110,1830 1980,2130 2130,2370 2370,2940
candidate,| and you know {}
|你知道候选人是最新的，

1838
00:53:52,100 --> 00:53:53,000
0,180 180,600 600,660 660,840 840,900
the candidate is {uptodate -

1839
00:53:53,000 --> 00:53:54,800
0,480 540,1140 1140,1380 1380,1680 1680,1800
-},| then I grant my
|那么我同意我的投票

1840
00:53:54,800 --> 00:53:57,940
0,570 600,1320 1590,2580
vote| and {}
|并重置选举超时，

1841
00:53:58,340 --> 00:53:59,390
0,210 210,450 450,510 510,810 810,1050
and reset the election {timeout

1842
00:53:59,390 --> 00:54:00,240
0,240
-},|
|

1843
00:54:01,010 --> 00:54:02,930
0,630 1140,1290 1290,1590 1590,1800 1800,1920
{} so why, why is
那么为什么，为什么这是这里的第二个案例，

1844
00:54:02,930 --> 00:54:04,580
0,450 450,570 570,900 900,1170 1170,1650
this the second case here,|
|

1845
00:54:04,610 --> 00:54:06,110
0,180 180,690 690,870 870,1170 1170,1500
the or are {votedFor -}
Or为votedFor is args CandiateID。

1846
00:54:06,110 --> 00:54:07,900
0,120 120,330 330,750 750,1260
is args {CandidateId -}.|
|

1847
00:54:13,340 --> 00:54:15,720
0,1080 1110,1740
Because the,
因为，考生可能会重发，可能他们的RPC被推迟了。

1848
00:54:15,720 --> 00:54:18,240
0,150 150,630 630,960 960,1890 2010,2520
the candidate may resend, {}

1849
00:54:18,270 --> 00:54:20,100
0,390 390,750 750,1020 1020,1200 1200,1830
maybe their RPC was delayed.|
|

1850
00:54:20,490 --> 00:54:23,160
0,720 930,1710
{Yeah,delayed} {or,actually,never,made,it,right}.|
是啊，推迟了，或者实际上从来没有做对过。|

1851
00:54:23,580 --> 00:54:25,470
0,420 420,660 660,1080 1080,1710 1740,1890
{} And so, {} you
所以，你知道，基本上就是检查，

1852
00:54:25,470 --> 00:54:27,460
0,90 90,450 450,780 780,1410
know just basically checking,|
|

1853
00:54:27,460 --> 00:54:28,480
0,270 270,420 420,570 570,840 840,1020
{} so this allows me
因此，这允许我为同一候选人投两次票，

1854
00:54:28,480 --> 00:54:29,410
0,90 90,360 360,750 750,870 870,930
to vote twice for the

1855
00:54:29,410 --> 00:54:31,240
0,240 240,870 1200,1500 1500,1590 1590,1830
same candidate,| but I can't
|但我不能投票给任何其他候选人。

1856
00:54:31,240 --> 00:54:32,500
0,210 210,330 330,510 510,720 720,1260
vote for any other candidate.|
|

1857
00:54:33,440 --> 00:54:35,180
0,630 930,1230 1230,1440 1440,1530 1530,1740
Okay?| So just to double
好吧?|所以为了再检查一下这里的逻辑，

1858
00:54:35,180 --> 00:54:37,280
0,210 210,270 270,1140 1140,1470 1620,2100
check the logic here,| so
|因此，如果我们有候选人有一个任期，

1859
00:54:37,280 --> 00:54:39,230
0,360 360,510 510,1140 1230,1470 1470,1950
if we have the candidate

1860
00:54:39,230 --> 00:54:40,640
0,210 210,270 270,900 1110,1290 1290,1410
has a term,| that is
|这比现在的任期要大，

1861
00:54:40,640 --> 00:54:41,840
0,270 270,420 420,510 510,810 810,1200
bigger than the current term,|
|

1862
00:54:42,140 --> 00:54:43,760
0,360 360,690 690,1380 1380,1500 1500,1620
{} we obviously have to
显然，我们必须让追随者皈依

1863
00:54:43,760 --> 00:54:45,230
0,270 270,360 360,840 840,1020 1020,1470
convert the follower| and update
|并将任期更新为候选人的任期，

1864
00:54:45,230 --> 00:54:46,070
0,90 90,390 390,480 480,630 630,840
the term to the term

1865
00:54:46,070 --> 00:54:47,510
0,90 90,150 150,660 960,1170 1170,1440
of the candidate,| {} but
|但我们不会自动授予他们投票权，

1866
00:54:47,510 --> 00:54:49,820
0,180 180,600 750,1740 1770,2100 2100,2310
we don't automatically grant them

1867
00:54:49,820 --> 00:54:52,580
0,420 450,1350 1440,1710 1710,2310 2340,2760
vote,| unless {} their log
|除非他们的日志至少是最新的。

1868
00:54:52,580 --> 00:54:53,510
0,120 120,300 300,630 630,750 750,930
is at least as up

1869
00:54:53,510 --> 00:54:54,640
0,90 90,360
to date.|
|

1870
00:54:54,640 --> 00:54:57,040
0,390 810,960 960,1380 1710,1890 1890,2400
Yeah, {exactly -}.| Awesome, {thank,you}.|
是啊，就是这样。|太棒了，谢谢。|

1871
00:54:58,470 --> 00:55:00,720
0,690 690,990 990,1440 1440,1770 1770,2250
I'm also wondering is voted
我还想知道，每次重置到-1都会投票给谁。

1872
00:55:00,720 --> 00:55:02,670
0,510 510,1020 1020,1380 1380,1500 1500,1950
for every reset to {-1

1873
00:55:02,670 --> 00:55:04,410
0,540 900,1230 1230,1500 1500,1620 1620,1740
-}.| Yeah, when we go
|是的，当我们进入新学期的时候，总是，

1874
00:55:04,410 --> 00:55:06,640
0,750 780,1050 1050,1650
to {new,term}, always,|
|

1875
00:55:06,790 --> 00:55:08,080
0,180 180,480 480,750 750,1050 1050,1290
{} it's new said always
这是新的说法，总是这样，

1876
00:55:08,080 --> 00:55:09,580
0,690 720,1200 1200,1290 1290,1380 1380,1500
to,| whenever you go to
|每当你进入新学期的时候。

1877
00:55:09,580 --> 00:55:11,680
0,60 60,240 240,720 930,1560 1920,2100
the new term.| Okay.| I
|好吧。|我设置为-1，这是发生这种情况的地方。

1878
00:55:11,680 --> 00:55:13,000
0,240 240,510 510,780 930,1080 1080,1320
set to -1, is one

1879
00:55:13,000 --> 00:55:14,560
0,270 270,420 420,510 510,1050
place where this happens.|
|

1880
00:55:17,220 --> 00:55:18,600
0,180 180,840
Any questions?|
有什么问题吗？|

1881
00:55:24,930 --> 00:55:25,860
0,180 180,390 390,510 510,630 630,930
So this gives you probably
因此，这可能会让您对整个结构有一个相当好的感觉

1882
00:55:25,860 --> 00:55:26,700
0,60 60,300 300,450 450,660 660,840
a reasonable good sense about

1883
00:55:26,700 --> 00:55:27,900
0,90 90,390 390,960 960,1080 1080,1200
the overall structure| and this
|这就是其他一切都遵循大致相同的结构。

1884
00:55:27,900 --> 00:55:29,220
0,60 60,240 270,660 660,960 960,1320
is what everything else follows

1885
00:55:29,280 --> 00:55:31,080
0,480 480,570 570,780 780,1290
roughly the same structure.|
|

1886
00:55:31,080 --> 00:55:32,610
0,630 630,900 900,1020 1020,1350 1350,1530
{} And so let's go
所以让我们回到这里，

1887
00:55:32,610 --> 00:55:35,130
0,600 600,1230 1350,2040 2040,2370 2370,2520
back and go here,| so
|所以，让我们假设那个人实际上是候选人赢得选举的领袖。

1888
00:55:35,130 --> 00:55:36,330
0,240 240,630 630,720 720,900 900,1200
let's you know let's assume

1889
00:55:36,330 --> 00:55:37,800
0,120 120,420 420,840 840,960 960,1470
that guy actually the leader

1890
00:55:37,830 --> 00:55:38,880
0,240 240,360 360,750 750,990 990,1050
where the candidate wins the

1891
00:55:38,880 --> 00:55:40,080
0,600
election.|
|

1892
00:55:40,460 --> 00:55:41,660
0,390 390,570 570,810 810,1140 1140,1200
{} So it started the
所以它开始了选举，

1893
00:55:41,660 --> 00:55:43,610
0,660 690,870 870,1140 1170,1620 1650,1950
election,| let me go trace
|让我回溯一下，

1894
00:55:43,610 --> 00:55:45,140
0,540 810,1020 1020,1170 1170,1260 1260,1530
back,| {} so we started
|所以我们开始了选举，

1895
00:55:45,140 --> 00:55:47,240
0,60 60,750 1260,1560 1560,1680 1680,2100
the election,| {} we requested
|我们要求投票

1896
00:55:47,240 --> 00:55:51,230
0,810 1110,2220 2220,2850 2850,3600 3630,3990
{the,votes}| {} and we won
|我们赢得了选举，

1897
00:55:51,230 --> 00:55:52,460
0,60 60,720
the election,|
|

1898
00:55:52,460 --> 00:55:54,020
0,510 510,630 630,960 960,1050 1050,1560
and we became the leader|
我们成了领头羊|

1899
00:55:54,020 --> 00:55:55,070
0,180 180,570 570,660 660,900 900,1050
and then the first thing
然后图2告诉您要做的第一件事是

1900
00:55:55,070 --> 00:55:56,750
0,720 750,1170 1170,1500 1500,1590 1590,1680
that {figure,2} tells you to

1901
00:55:56,750 --> 00:55:58,220
0,180 180,330 330,540 540,840 840,1470
do is| like send heartbeats
|比如向每个对等点发送心跳，

1902
00:55:58,220 --> 00:56:00,980
0,150 150,810 1200,2250
to every peer,|
|

1903
00:56:02,540 --> 00:56:04,040
0,270 270,660 660,1020 1020,1230 1230,1500
and so basically this is
因此，基本上这将成为sendAppendsL的标准代码。

1904
00:56:04,040 --> 00:56:05,240
0,390 390,450 450,570 570,690 690,1200
going to be the standard

1905
00:56:05,240 --> 00:56:07,040
0,510 510,870 870,1140 1140,1230 1230,1800
code for {sendAppendsL - -}.|
|

1906
00:56:07,750 --> 00:56:09,010
0,630 630,750 750,1020 1020,1110 1110,1260
{} In fact you know
事实上，您知道心跳代码与sendAppendsL入口码相同，

1907
00:56:09,010 --> 00:56:10,810
0,240 240,690 690,960 960,1140 1140,1800
the heartbeat code is identical

1908
00:56:10,810 --> 00:56:13,180
0,450 450,570 570,990 990,1470 1470,2370
to the sendAppendsL entry code,|
|

1909
00:56:13,180 --> 00:56:14,980
0,450 450,510 510,690 690,1080 1290,1800
except you know the heartbeat
除了你知道的心跳常常会没有入口

1910
00:56:14,980 --> 00:56:16,090
0,360 360,570 570,750 750,1020 1020,1110
often will may have {}

1911
00:56:16,090 --> 00:56:17,590
0,420 420,780 780,960 960,1170 1170,1500
no entry| or no entry
|或者在发送给跟随者的日志中没有条目。

1912
00:56:17,590 --> 00:56:18,340
0,120 120,210 210,510 510,630 630,750
in the log that is

1913
00:56:18,340 --> 00:56:19,990
0,180 180,540 540,750 750,1020 1020,1650
being sent to the followers.|
|

1914
00:56:23,280 --> 00:56:24,540
0,330 330,480 480,660 660,750 750,1260
Okay, so {sendAppendsL,follows - -}
好的，所以sendAppendsL遵循与投票相同的结构，

1915
00:56:24,540 --> 00:56:26,250
0,90 90,750 780,1320 1320,1530 1530,1710
the same structure as in

1916
00:56:26,250 --> 00:56:28,470
0,600 840,1590 1590,1770 1770,1950 1950,2220
votes,| {} you know go
|你知道围棋循环的整体同行，

1917
00:56:28,470 --> 00:56:31,140
0,600 600,1560 1560,2190 2190,2550 2550,2670
cycle overall peers,| and if
|如果同伴不能与我相提并论，

1918
00:56:31,140 --> 00:56:32,220
0,330 330,510 510,690 690,780 780,1080
peers not equal to me,|
|

1919
00:56:32,220 --> 00:56:33,570
0,570 570,930 930,1110 1110,1200 1200,1350
then basically send it to
然后基本上将其发送到追加。

1920
00:56:33,570 --> 00:56:34,520
0,450
appends.|
|

1921
00:56:36,200 --> 00:56:39,470
0,810 810,1740 1740,2400 2550,2910 2910,3270
{} Yeah, and so here's
是的，所以这是为了发送AppendL，

1922
00:56:39,470 --> 00:56:41,040
0,90 90,330 330,390 390,930
to {sendAppendL - -},|
|

1923
00:56:41,160 --> 00:56:42,760
0,1020

1924
00:56:42,940 --> 00:56:44,830
0,450 480,1170 1170,1320 1320,1410 1410,1890
and, {} you know basically
而且，你知道，基本上我们跟踪的是正确的下一个日志条目，

1925
00:56:44,830 --> 00:56:47,350
0,600 840,1140 1140,1440 1440,1830 1830,2520
we're keeping track correct what

1926
00:56:47,350 --> 00:56:49,330
0,240 240,360 360,930 960,1560 1590,1980
did the next a log

1927
00:56:49,330 --> 00:56:51,100
0,300 300,540 540,750 750,1560 1560,1770
entry,| that the peer should
|同龄人应该拥有的，

1928
00:56:51,100 --> 00:56:52,870
0,510 510,990 990,1500 1500,1590 1590,1770
have,| we initialize it to
|我们将其初始化为等于[]中的乐观客户，

1929
00:56:52,870 --> 00:56:54,280
0,60 60,600 600,960 960,1140 1140,1410
an optimistic guest in equal

1930
00:56:54,280 --> 00:56:55,960
0,120 120,630 990,1260 1260,1620 1620,1680
to [],| so basically in
|因此，基本上在这种情况下，将不会有日志条目，

1931
00:56:55,960 --> 00:56:56,770
0,150 150,390 390,540 540,690 690,810
this case, there's gonna be

1932
00:56:56,770 --> 00:56:58,540
0,690 720,1170 1170,1500 1500,1650 1650,1770
no log entries,| there's going
|会有人送来的，

1933
00:56:58,540 --> 00:57:00,160
0,60 60,210 210,720 1260,1410 1410,1620
to be sent,| so I
|所以我现在可以跳过所有这些东西，

1934
00:57:00,160 --> 00:57:01,420
0,120 120,600 600,750 750,900 900,1260
can skip all this stuff

1935
00:57:01,420 --> 00:57:02,710
0,150 150,690 720,930 930,1050 1050,1290
for now,| we'll come back
|我们会回到这个问题上，当我们真正开始的时候，

1936
00:57:02,710 --> 00:57:03,670
0,120 120,240 240,510 510,690 690,960
to it, when we're looking

1937
00:57:03,670 --> 00:57:06,310
0,510 510,1260 1260,1830 2010,2400 2400,2640
actually at start,| I fill
|我填写AppendEntriesArgs，

1938
00:57:06,310 --> 00:57:08,720
0,120 120,390 390,1050 1290,2130
in the {AppendEntriesArgs -},|
|

1939
00:57:09,000 --> 00:57:11,610
0,630 630,1350 1380,1890 2190,2490 2490,2610
{} and {} we can
我们可以看看它的结构，

1940
00:57:11,610 --> 00:57:12,300
0,150 150,210 210,270 270,630 630,690
look at the structure,| you
|你会愿意的，

1941
00:57:12,300 --> 00:57:13,080
0,90 90,300 300,510 510,690 690,780
would like to,| but you
|但你知道它和图2完全一样，

1942
00:57:13,080 --> 00:57:14,040
0,120 120,300 300,390 390,810 810,960
know it is exactly as

1943
00:57:14,040 --> 00:57:17,190
0,180 180,480 480,780 780,2340 2370,3150
in figure 2,| {} may
|可能是唯一要小心的事，

1944
00:57:17,190 --> 00:57:18,330
0,120 120,240 240,480 480,630 630,1140
be the only thing that'll

1945
00:57:18,330 --> 00:57:19,170
0,210 210,570 570,690 690,780 780,840
be careful,| you've got to
|你要小心的是

1946
00:57:19,170 --> 00:57:20,220
0,90 90,150 150,390 390,690 690,1050
be a little careful about

1947
00:57:20,220 --> 00:57:23,310
0,390 660,1560 1560,2400 2400,3000 3000,3090
is| {} allocated slice, you
|分配的切片，您知道要保存需要发送的条目，

1948
00:57:23,310 --> 00:57:25,080
0,120 120,240 240,810 840,1170 1170,1770
know to hold the entries

1949
00:57:25,080 --> 00:57:26,280
0,390 390,510 510,600 600,720 720,1200
that need to be sent,|
|

1950
00:57:26,610 --> 00:57:28,020
0,300 300,510 510,960 960,1230 1230,1410
in this particular case, number
在这种特定情况下，条目数量为零，

1951
00:57:28,020 --> 00:57:29,940
0,90 90,420 420,1080 1110,1470 1500,1920
of entries zero,| were {x}
|是x，因为我们假设每个人都是最新的

1952
00:57:29,940 --> 00:57:31,230
0,300 300,480 480,810 810,930 930,1290
because we're assuming that everybody's

1953
00:57:31,230 --> 00:57:32,460
0,120 120,210 210,630 960,1110 1110,1230
up to date| and then
|然后从木筏结构的木片中复制你知道的部分

1954
00:57:32,460 --> 00:57:33,990
0,120 120,690 690,780 780,960 960,1530
{} copy you know the

1955
00:57:34,200 --> 00:57:37,350
0,840 840,1050 1050,1470 1830,2820 2820,3150
part from the slices from

1956
00:57:37,350 --> 00:57:38,910
0,90 90,720 810,1170 1170,1320 1320,1560
the log in the raft

1957
00:57:38,910 --> 00:57:40,620
0,480 480,840 840,1350
structure| to the,
|到参数中的条目，

1958
00:57:41,240 --> 00:57:42,800
0,360 360,630 630,750 750,1290 1320,1560
{} to the entries in

1959
00:57:42,800 --> 00:57:44,220
0,90 90,840
the arguments,|
|

1960
00:57:44,480 --> 00:57:45,920
0,720 720,930 930,1080 1080,1170 1170,1440
{} and so I have
所以我在日志的这一点上有我自己的副本，

1961
00:57:45,920 --> 00:57:47,300
0,240 240,390 390,660 660,1290 1290,1380
really my own copy at

1962
00:57:47,300 --> 00:57:49,490
0,150 150,540 540,840 840,1560 1590,2190
this point of the log,|
|

1963
00:57:49,730 --> 00:57:50,840
0,420 420,660 660,840 840,990 990,1110
{} there's a little bit
有一点危险，对吧，

1964
00:57:50,840 --> 00:57:52,250
0,120 120,450 450,810 810,1020 1020,1410
of danger, correct,| like slice
|就像切片共享内存一样，

1965
00:57:52,250 --> 00:57:53,960
0,240 240,750 780,1320 1320,1530 1530,1710
share memory,| {} so this
|这就是复制需要发生的原因，

1966
00:57:53,960 --> 00:57:54,980
0,60 60,270 270,480 480,810 810,1020
is why the copy needs

1967
00:57:54,980 --> 00:57:56,140
0,90 90,630
to happen,|
|

1968
00:57:56,490 --> 00:57:57,990
0,480 480,600 600,690 690,1110 1110,1500
{} so I copied entries
所以我把条目从木筏结构中复制出来，

1969
00:57:57,990 --> 00:57:59,310
0,210 210,330 330,450 450,750 750,1320
out of the raft structure,|
|

1970
00:57:59,310 --> 00:58:00,330
0,210 210,360 360,600 600,690 690,1020
that I hold the log
我把日志保存在我的私人辩论结构中，

1971
00:58:00,330 --> 00:58:02,250
0,270 270,570 570,720 720,1260 1260,1920
on into my private argument

1972
00:58:02,400 --> 00:58:03,840
0,930
structure,|
|

1973
00:58:04,620 --> 00:58:07,260
0,750 810,1320 1320,1830 1830,2220 2220,2640
and, {} {once,that,is} done,| basically
而且，一旦完成了，|基本上我给你发了你知道开始的围棋功能，围棋例行公事为每个同行

1974
00:58:07,260 --> 00:58:08,520
0,180 180,630 630,720 720,900 900,1260
I sent you know started

1975
00:58:08,520 --> 00:58:10,800
0,210 210,900 930,1410 1410,1890 1890,2280
Go function, Go Go routine

1976
00:58:10,800 --> 00:58:12,870
0,210 210,810 900,1590 1680,1920 1920,2070
for every peer| and in
|在围棋功能中，

1977
00:58:12,870 --> 00:58:15,030
0,360 360,1140 1140,1470 1470,1740 1740,2160
that Go function,| in that
|在该函数中，我发送了RPC

1978
00:58:15,660 --> 00:58:17,430
0,180 180,390 390,630 630,1140 1470,1770
and in that function, {}

1979
00:58:17,430 --> 00:58:19,320
0,120 120,360 360,480 480,1290 1740,1890
I sent the RPC| and
|然后在回复处理程序中，

1980
00:58:19,320 --> 00:58:20,520
0,120 120,210 210,300 300,720 720,1200
then in the reply handler,|
|

1981
00:58:20,520 --> 00:58:21,900
0,330 330,660 660,750 750,1170 1170,1380
I grab the log,| just
我抓起木头，|只需RPC的回复处理程序，

1982
00:58:21,900 --> 00:58:23,730
0,360 360,810 810,990 990,1200 1200,1830
reply handler of {RPC -},|
|

1983
00:58:23,730 --> 00:58:24,600
0,240 240,330 330,630 630,720 720,870
grab the log and then
抓取日志，然后处理回复，

1984
00:58:24,600 --> 00:58:25,900
0,330 330,420 420,900
process the reply,|
|

1985
00:58:25,990 --> 00:58:27,520
0,180 180,510 510,960
the append reply.|
追加答复。|

1986
00:58:30,640 --> 00:58:32,100
0,180 180,270 270,450 450,960
{Does,this} all make sense?|
这一切有意义吗？|

1987
00:58:34,550 --> 00:58:38,300
0,210 210,2550 2820,3180 3180,3420 3420,3750
But.| Yeah, maybe one by
但。|是啊，也许一个接一个。

1988
00:58:38,900 --> 00:58:40,430
0,510 510,720 720,1110 1110,1380 1380,1530
one.| {One,little} question, yeah, so
|一个小问题，是的，所以在sendAppendL中，

1989
00:58:40,430 --> 00:58:42,540
0,300 300,600 600,660 660,1560
in {sendAppendL - -},|
|

1990
00:58:42,540 --> 00:58:43,560
0,180 180,480 510,750 750,840 840,1020
we have, {} we have
我们有，我们有循环，其中我们调用rf.sendAppendL，

1991
00:58:43,560 --> 00:58:44,370
0,90 90,390 390,480 480,690 690,810
the loop in which we

1992
00:58:44,370 --> 00:58:46,110
0,450 750,900 900,1170 1170,1440 1440,1740
call {} {rf.sendAppendL - -

1993
00:58:46,110 --> 00:58:47,320
0,180 180,630
- -},|
|

1994
00:58:47,410 --> 00:58:49,180
0,570 570,810 810,1260 1260,1470 1470,1770
and we assume the lock
我们假设锁是在调用过程中持有的，

1995
00:58:49,180 --> 00:58:51,190
0,90 90,660 720,1200 1230,1560 1560,2010
is held through that call,|
|

1996
00:58:51,250 --> 00:58:52,820
0,330 330,450 450,660 660,1020
but we do there
但我们在那里做，你知道任何线索，

1997
00:58:52,880 --> 00:58:54,050
0,150 150,300 300,450 450,900 1020,1170
you know any thread,| at
|在这一点上一根线，让我们去锁，对。

1998
00:58:54,050 --> 00:58:56,450
0,210 210,660 660,1380 1680,2130 2130,2400
which point a thread, let's

1999
00:58:56,450 --> 00:58:57,530
0,150 150,210 210,330 330,660 660,1080
go to the lock, right.|
|

2000
00:58:58,770 --> 00:58:59,820
0,240 240,420 420,810 810,960 960,1050
Okay, so like there's an
好的，就像有一个外环，对吧，

2001
00:58:59,820 --> 00:59:01,380
0,270 270,630 630,930 930,1140 1140,1560
outer loop, correct,| where somebody
|呼叫者手持锁的地方

2002
00:59:01,380 --> 00:59:02,670
0,90 90,540 540,810 810,900 900,1290
to caller holds the lock|
|

2003
00:59:02,700 --> 00:59:04,350
0,180 180,570 570,660 660,1440 1440,1650
and basically it calls {sendAppendL
基本上它调用sendAppendL，你知道n次，

2004
00:59:04,350 --> 00:59:05,640
0,120 120,780 810,930 930,1050 1050,1290
- -} you know n

2005
00:59:05,640 --> 00:59:06,690
0,390 390,750 750,870 870,960 960,1050
times,| where n is the
|其中n是对等体的数量减去1，

2006
00:59:06,690 --> 00:59:07,860
0,180 180,300 300,570 570,870 870,1170
number of peers minus 1,|
|

2007
00:59:08,680 --> 00:59:09,880
0,300 300,690 690,930 930,1110 1110,1200
and for every one of
对于他们中的每一个人，

2008
00:59:09,880 --> 00:59:11,920
0,480 780,1230 1230,1410 1410,1620 1620,2040
them,| {} for every iteration
|对于循环的每次迭代，

2009
00:59:11,920 --> 00:59:13,210
0,60 60,210 210,630 720,1170 1170,1290
of the loop,| we're going
|我们将创建一个新的围棋功能，

2010
00:59:13,210 --> 00:59:14,380
0,60 60,330 330,360 360,930 930,1170
to create a new go

2011
00:59:14,380 --> 00:59:16,300
0,570 780,1110 1110,1290 1290,1680 1680,1920
function,| that go function runs
|GO功能不需要持有锁就可以运行，对吧，

2012
00:59:16,300 --> 00:59:18,190
0,420 420,750 750,840 840,1350 1380,1890
without holding the locks, right,|
|

2013
00:59:18,490 --> 00:59:19,840
0,420 420,660 660,810 810,1170 1170,1350
so it will send its
因此，它将在不持有锁的情况下发送其RPC

2014
00:59:19,840 --> 00:59:21,220
0,180 180,510 510,750 750,1050 1050,1380
{RPC -} without holding locks|
|

2015
00:59:21,220 --> 00:59:22,120
0,120 120,210 210,300 300,570 570,900
and at the same time,
同时，新的GO功能可以由呼叫者启动，

2016
00:59:22,120 --> 00:59:23,080
0,60 60,270 270,450 450,750 750,960
the new Go function might

2017
00:59:23,080 --> 00:59:24,190
0,60 60,360 360,450 450,540 540,1110
be started by the caller,|
|

2018
00:59:24,490 --> 00:59:26,350
0,660 660,1230 1230,1590 1590,1680 1680,1860
that actually also is going
这实际上也将发送RPC，

2019
00:59:26,350 --> 00:59:28,090
0,150 150,420 420,540 540,1050 1470,1740
to send {RPC -},| although
|尽管他们被发送到RPC与追随者平行，

2020
00:59:28,090 --> 00:59:29,260
0,180 180,420 420,540 540,870 870,1170
they're sent {RPCs -} go

2021
00:59:29,260 --> 00:59:31,360
0,660 660,810 810,900 900,1620 1860,2100
parallel to the followers,| the
|追随者回应说，

2022
00:59:31,360 --> 00:59:32,840
0,360 360,1050
followers respond,|
|

2023
00:59:32,870 --> 00:59:33,980
0,240 240,420 420,480 480,960 960,1110
and all the responses come
所有的回复都回来了，

2024
00:59:33,980 --> 00:59:35,900
0,300 300,630 930,1290 1290,1530 1530,1920
back in,| {} that will,
|它会，所以它会返回，当下面的响应到达时，

2025
00:59:35,960 --> 00:59:37,580
0,240 240,420 420,570 570,1290 1320,1620
so that will return, when

2026
00:59:37,580 --> 00:59:38,900
0,60 60,360 360,900 900,1110 1110,1320
the following response comes in,|
|

2027
00:59:38,900 --> 00:59:40,160
0,300 300,720 720,870 870,1110 1110,1260
that returns from send {RPC
从发送RPC返回的

2028
00:59:40,160 --> 00:59:41,510
0,480 480,600 600,780 780,1050 1050,1350
-}| and at that point
|在这一点上，我会抓起锁来处理回复，

2029
00:59:41,510 --> 00:59:42,740
0,180 180,420 420,480 480,930 930,1230
I'll grab the lock to

2030
00:59:42,740 --> 00:59:44,180
0,330 330,510 510,570 570,930
process to {reply -},|
|

2031
00:59:44,490 --> 00:59:47,310
0,420 420,1230 1230,1620 2070,2550 2550,2820
now, if the caller still
现在，如果呼叫者仍然忙于向新追随者发送RPC，

2032
00:59:47,310 --> 00:59:50,310
0,570 930,1770 1830,2100 2100,2850 2850,3000
busy sending {} {RPCs -}

2033
00:59:50,310 --> 00:59:52,350
0,270 270,480 480,1080 1230,1560 1560,2040
to new followers,| then basically
|那么基本上您知道回复处理程序将阻止

2034
00:59:52,350 --> 00:59:53,640
0,90 90,240 240,600 600,990 990,1290
you know the reply handler

2035
00:59:53,640 --> 00:59:56,760
0,150 150,690 1020,1410 1410,1770 2700,3120
will block| until the caller
|直到调用者完成，发送所有RPC。

2036
00:59:56,760 --> 00:59:57,900
0,120 120,510 510,840 840,1020 1020,1140
is done, sending all the

2037
00:59:57,900 --> 00:59:59,080
0,840
RPCs.|
|

2038
01:00:00,430 --> 01:00:02,230
0,570 570,780 780,990 990,1440 1440,1800
Yeah, so, {} my question
是的，所以，我的问题是，

2039
01:00:02,230 --> 01:00:05,230
0,720 840,1500 1500,1500 1500,2580 2730,3000
was,| I I assumed why
|我以为这会发生的原因是，

2040
01:00:05,230 --> 01:00:06,280
0,180 180,510 510,630 630,960 960,1050
that happens is,| because you
|因为你有一个我们有一个延迟射频锁定和解锁，

2041
01:00:06,280 --> 01:00:07,240
0,180 180,450 510,660 660,840 840,960
had a we had a

2042
01:00:07,240 --> 01:00:08,360
0,600
defer

2043
01:00:08,600 --> 01:00:10,340
0,150 150,810 930,1080 1080,1170 1170,1740
{rf.lock -} and the unlock,|
|

2044
01:00:10,370 --> 01:00:11,930
0,180 180,510 510,690 690,1200 1200,1560
is that's why it doesn't
这就是它锁不住的原因，

2045
01:00:11,930 --> 01:00:12,860
0,300 300,420 420,630 630,780 780,930
hold the lock,| when it
|当它启动一个线程时，对，

2046
01:00:13,070 --> 01:00:14,660
0,390 390,450 450,750 750,1050
starts a thread, right,|
|

2047
01:00:15,880 --> 01:00:17,380
0,150 150,240 240,420 420,750
or is that just.|
还是因为这只是。|

2048
01:00:17,900 --> 01:00:18,890
0,270 270,360 360,540 540,600 600,990
When you start a thread,|
当你启动一个线程时，|

2049
01:00:18,890 --> 01:00:20,300
0,210 210,420 420,660 660,870 870,1410
you don't hold any locks.|
你没有任何锁。|

2050
01:00:21,100 --> 01:00:23,080
0,540 630,1020 1140,1560 1560,1650 1650,1980
Yeah, like whatever it is,|
是啊，不管是什么，|

2051
01:00:23,110 --> 01:00:24,190
0,420 420,600 600,690 690,870 870,1080
even if we don't have
即使我们没有这样的东西，

2052
01:00:24,190 --> 01:00:26,320
0,630 870,1350 1440,1770 1770,1950 1950,2130
like that,| like even if
|比如即使我们试着把锁保持在正确的位置，

2053
01:00:26,320 --> 01:00:27,250
0,180 180,540 540,600 600,870 870,930
we tried to hold the

2054
01:00:27,250 --> 01:00:28,420
0,300 300,480 480,810 810,960 960,1170
lock right,| before the go
|在GO代码之前，它承受不了它。

2055
01:00:28,420 --> 01:00:29,980
0,330 720,840 840,1170 1170,1410 1410,1560
code, it wouldn't hold it.|
|

2056
01:00:30,860 --> 01:00:33,950
0,210 210,720 780,1050 1050,2340 2460,3090
That's right, yeah yeah.| Yeah.|
是的，是的，是的。|嗯。|

2057
01:00:34,850 --> 01:00:36,140
0,270 270,420 420,630 630,720 720,1290
I will sort of follow,|
我会跟随你的脚步，|

2058
01:00:36,170 --> 01:00:39,320
0,720 1050,1290 1290,2010 2490,2760 2760,3150
so in the if ok
因此，在If ok块中，

2059
01:00:39,320 --> 01:00:41,960
0,600 810,1320 1320,1890 1890,2040 2040,2640
block,| {} where's the defer
|延期是从哪里打来的，

2060
01:00:41,960 --> 01:00:43,760
0,390 390,630 630,960 960,1320 1530,1800
being like called from,| from
|从该方法的Return语句。

2061
01:00:43,760 --> 01:00:45,410
0,60 60,420 420,870 870,1290 1320,1650
the return statement of that

2062
01:00:45,410 --> 01:00:48,050
0,450 1020,1500 1500,2100 2190,2460 2460,2640
method.| {When,this,block} exits, when this
|当此块退出时，当此块退出时，

2063
01:00:48,050 --> 01:00:49,760
0,300 300,660 660,930 930,1050 1050,1710
block exits,| then the defer
|则将调用Deler Mu.Unlock。

2064
01:00:49,760 --> 01:00:50,840
0,300 300,420 420,810 810,960 960,1080
{mu.unlock - -} will be

2065
01:00:50,840 --> 01:00:51,700
0,390
called.|
|

2066
01:00:53,020 --> 01:00:55,210
0,150 150,900 930,1530 1530,1620 1620,2190
So defer defer is called
因此，当周围的基本块退出时，将调用Deler Defer。

2067
01:00:55,210 --> 01:00:57,490
0,330 330,390 390,1290 1500,1980 1980,2280
when the surrounding basic block

2068
01:00:57,490 --> 01:00:58,620
0,630
exits.|
|

2069
01:00:58,860 --> 01:01:00,540
0,150 150,390 390,600 600,1020 1020,1680
Oh not just return statements.|
哦，不只是返回语句。|

2070
01:01:00,780 --> 01:01:02,190
0,450 450,600 600,870 870,1230 1230,1410
Not just return statements, that's
不仅仅是返回语句，这是正确的。

2071
01:01:02,190 --> 01:01:03,680
0,300 300,900
correct.| {Okay,cool}.|
|好的，酷。|

2072
01:01:05,170 --> 01:01:06,670
0,300 300,690 720,840 840,1050 1050,1500
That's cool, it's very handy.|
那很酷，非常方便。|

2073
01:01:07,060 --> 01:01:08,110
0,210 210,330 330,660 660,930 930,1050
Can you repeat that,| so
你能重复一遍吗，|那么延期的存在是什么。

2074
01:01:08,110 --> 01:01:10,630
0,240 240,360 360,480 480,1080 1530,2520
what does the {defer,exists}.| defer
|当此延迟或此解锁在此基本块退出时运行时调用的延迟

2075
01:01:10,630 --> 01:01:12,460
0,570 600,870 870,1080 1080,1290 1290,1830
called like when this defer

2076
01:01:12,460 --> 01:01:14,950
0,120 120,360 360,960 1110,1890 1950,2490
or this unlock runs when

2077
01:01:14,980 --> 01:01:17,260
0,330 330,660 660,1170 1230,1890 2040,2280
this basic block exits| or
|或返回或外出，无论[]走到哪里，

2078
01:01:17,260 --> 01:01:18,850
0,480 480,600 600,870 870,1140 1140,1590
returns or goes out whatever

2079
01:01:18,850 --> 01:01:20,080
0,510 510,660 660,990 990,1140 1140,1230
[] went around,| so if
|所以如果你从这个基本区块回来，

2080
01:01:20,080 --> 01:01:20,980
0,90 90,390 390,510 510,630 630,900
you return from this basic

2081
01:01:20,980 --> 01:01:23,050
0,480 780,1170 1170,1590 1590,1710 1710,2070
block,| this unlock will happen.|
|这次解锁将会发生。|

2082
01:01:24,060 --> 01:01:25,200
0,240 240,630
That's awesome.|
那真是太棒了。|

2083
01:01:27,160 --> 01:01:29,470
0,330 330,630 630,1380 1620,2100 2130,2310
{} Sorry, why, {} you
对不起，为什么，你需要检查一下当前的任期是否仍然是你认为你所在的任期，

2084
01:01:29,470 --> 01:01:30,400
0,150 150,240 240,630 630,810 810,930
need to check if the

2085
01:01:30,400 --> 01:01:31,990
0,330 330,600 600,750 750,1290 1290,1590
current term is still the

2086
01:01:32,050 --> 01:01:33,520
0,360 360,690 750,960 960,1380 1380,1470
term that you thought you

2087
01:01:33,520 --> 01:01:36,010
0,270 270,720 930,1380 1380,1590 1590,2490
were in,| because some requests
|因为有些请求可能会很慢

2088
01:01:36,190 --> 01:01:37,780
0,270 270,360 360,1050 1320,1500 1500,1590
can be slow| and you
|你可能会在很长一段时间后收到回复。

2089
01:01:37,780 --> 01:01:39,790
0,240 240,570 570,660 660,1500 1770,2010
might receive a response now

2090
01:01:39,790 --> 01:01:41,920
0,420 420,540 540,750 750,1320 1470,2130
after a long time.| Yep.|
|是啊。|

2091
01:01:42,100 --> 01:01:44,230
0,570 750,960 960,1560 1560,1890 1890,2130
Okay.| So here's all let's
好吧。|下面我们来看一下流程和回复，

2092
01:01:44,230 --> 01:01:45,430
0,210 210,300 300,690 690,870 870,1200
look at process and reply,|
|

2093
01:01:45,430 --> 01:01:46,060
0,30 30,180 180,300 300,480 480,630
I think that's what you're
我想这就是你在问它是做什么的，

2094
01:01:46,060 --> 01:01:47,260
0,360 360,690 690,810 810,930 930,1200
asking what does it do,|
|

2095
01:01:48,210 --> 01:01:49,560
0,570 570,840 840,990 990,1110 1110,1350
{} and we have looked
我们已经看过了，

2096
01:01:49,560 --> 01:01:50,220
0,60 60,150 150,330 330,540 540,660
at it yet,| so we
|这样我们就能看到它了，

2097
01:01:50,220 --> 01:01:51,460
0,120 120,300 300,390 390,660
can look at it,|
|

2098
01:01:52,250 --> 01:01:55,580
0,930 930,1410 1410,1770 1770,2550 2580,3330
{} actually reasonable complicated, {}|
实际上相当复杂，|

2099
01:01:56,790 --> 01:01:57,780
0,120 120,570 570,660 660,780 780,990
it follows you know the
它遵循您知道的所有服务器的一般规则，

2100
01:01:57,780 --> 01:01:59,160
0,240 240,450 450,570 570,690 690,1380
general rule for all servers,|
|

2101
01:01:59,160 --> 01:02:00,390
0,150 150,300 300,390 390,810 810,1230
you have the required terms
从我的任期开始，你就有了所需的条件，

2102
01:02:00,390 --> 01:02:01,920
0,270 270,360 360,660 660,1080 1080,1530
beginning my current term,| then
|那你就知道我变成了追随者

2103
01:02:01,920 --> 01:02:03,000
0,90 90,210 210,570 570,720 720,1080
you know I got switched

2104
01:02:03,000 --> 01:02:04,800
0,60 60,420 420,510 510,1140 1200,1800
to becoming a follower| and
|你知道，新学期就要开始了，

2105
01:02:04,800 --> 01:02:05,430
0,90 90,240 240,510 510,600 600,630
you know going to a

2106
01:02:05,430 --> 01:02:06,870
0,180 180,690 870,1140 1140,1230 1230,1440
new term,| if it is
|如果它实际上等于我的任期，对吗，

2107
01:02:06,870 --> 01:02:07,980
0,270 270,540 540,630 630,780 780,1110
actually equal to my term,

2108
01:02:07,980 --> 01:02:08,670
0,180 180,330 330,420 420,570 570,690
correct,| this is what you
|这就是你要问的，

2109
01:02:08,670 --> 01:02:11,610
0,120 120,720 1110,1890 1920,2700 2730,2940
are asking,| like if the
|比如，如果回复是在同一个期限内，

2110
01:02:11,610 --> 01:02:12,900
0,330 330,630 630,900 900,990 990,1290
reply comes in the same

2111
01:02:12,900 --> 01:02:14,280
0,390 390,570 570,660 660,960 960,1380
term,| that I sent in
|我在我的ARGS任期内发送的，

2112
01:02:14,340 --> 01:02:15,900
0,390 390,690 690,990 990,1380 1380,1560
my args term,| then I'm
|然后我要做一个不同的功能，

2113
01:02:15,900 --> 01:02:18,480
0,180 180,570 1050,1950 2160,2490 2490,2580
gonna do a have a

2114
01:02:18,480 --> 01:02:20,400
0,360 360,720 720,900 900,1530 1560,1920
different function,| that actually does
|它实际上完成了所有的处理，

2115
01:02:20,400 --> 01:02:22,200
0,120 120,210 210,900 930,1620 1620,1800
all the processing,| assuming that
|假设至少这些术语是匹配的。

2116
01:02:22,200 --> 01:02:23,790
0,150 150,420 420,870 900,1470 1470,1590
at least the terms are

2117
01:02:23,790 --> 01:02:24,600
0,420
matching.|
|

2118
01:02:25,360 --> 01:02:26,620
0,330 330,780 780,870 870,1110 1110,1260
Oh, sorry, I meant in
哦，对不起，我是说在领队里，

2119
01:02:26,620 --> 01:02:28,090
0,210 210,630 630,960 960,1380 1380,1470
the leader,| when receives a
|当收到您的回复时，

2120
01:02:28,090 --> 01:02:29,680
0,540 540,630 630,1050
response you have,|
|

2121
01:02:29,830 --> 01:02:31,210
0,150 150,420 420,630 630,870 870,1380
it had like a check.|
它就像一张支票。|

2122
01:02:31,210 --> 01:02:33,580
0,390 1260,1650 1650,1980 1980,2220 2220,2370
Yeah, yeah basically happening here
是的，是的，基本上也在这里发生，

2123
01:02:33,580 --> 01:02:34,690
0,360 390,660 660,840 840,900 900,1110
too,| it's like the same
|这张支票和这张一样。

2124
01:02:34,690 --> 01:02:36,820
0,270 270,630
check here.|
|

2125
01:02:36,820 --> 01:02:38,040
0,120 120,300 300,660
I see, okay.|
我明白了，好的。|

2126
01:02:39,950 --> 01:02:42,200
0,1470 1470,1710 1710,2040 2040,2160 2160,2250
{} Okay, so you know
好的，基本上这就是附加条目，回复代码，

2127
01:02:42,200 --> 01:02:43,820
0,450 450,660 660,810 810,1080 1080,1620
basically this is then the

2128
01:02:44,540 --> 01:02:45,860
0,750
{}

2129
01:02:45,950 --> 01:02:48,470
0,120 120,450 450,1170 1350,2040 2070,2520
{append -} entries, {} reply

2130
01:02:48,470 --> 01:02:50,090
0,540 570,840 840,1080 1080,1140 1140,1620
code,| like what the handler
|就像响应回复的处理程序所运行的那样，

2131
01:02:50,090 --> 01:02:51,440
0,240 240,540 540,750 750,1260 1260,1350
that runs in response to

2132
01:02:51,440 --> 01:02:53,030
0,120 120,870 1020,1170 1170,1350 1350,1590
the reply,| {} we know
|我们知道术语匹配并且我们检查回复成功，

2133
01:02:53,030 --> 01:02:55,730
0,210 210,1020 1050,1380 1380,2100 2310,2700
that the term matches and

2134
01:02:55,730 --> 01:02:58,100
0,270 270,630 630,930 930,1710 2070,2370
we check reply success, {}|
|

2135
01:02:58,100 --> 01:02:59,510
0,180 180,510 510,1140 1140,1230 1230,1410
if reply success you know
如果回复成功，您知道我们更新了匹配索引和下一个索引，

2136
01:02:59,510 --> 01:03:03,080
0,720 750,1500 1500,2070 2550,2940 2940,3570
we update our match indexes

2137
01:03:03,080 --> 01:03:06,720
0,630 660,1560 1590,2610 2610,3300
and {} next index,|
|

2138
01:03:07,020 --> 01:03:08,880
0,330 330,660 660,1230 1230,1530 1530,1860
{} follow exactly the rules
完全遵循图2的规则，

2139
01:03:08,880 --> 01:03:10,280
0,60 60,390 390,840
of figure 2,|
|

2140
01:03:10,400 --> 01:03:11,690
0,450 450,660 660,870 870,930 930,1290
{} if there's a conflict
如果有冲突有效，

2141
01:03:11,690 --> 01:03:14,630
0,480 480,540 540,1740 1950,2790 2820,2940
valid,| you know then you
|你知道，然后你知道我处理冲突

2142
01:03:14,630 --> 01:03:16,130
0,210 210,480 480,840 840,930 930,1500
know I process the conflict|
|

2143
01:03:16,130 --> 01:03:16,790
0,150 150,270 270,420 420,540 540,660
and so this is the
这是一段要处理的代码，就像快速后退一样。

2144
01:03:16,790 --> 01:03:17,570
0,240 240,300 300,570 570,660 660,780
piece of code is going

2145
01:03:17,570 --> 01:03:18,740
0,60 60,300 300,600 600,780 780,1170
to deal with like backing

2146
01:03:18,740 --> 01:03:19,940
0,210 210,780
off fast.|
|

2147
01:03:20,130 --> 01:03:21,500
0,810

2148
01:03:21,590 --> 01:03:23,000
0,810
And,
如果没有可用的冲突信息，

2149
01:03:23,000 --> 01:03:25,490
0,690 690,1680 2040,2190 2190,2340 2340,2490
{} and if there's no

2150
01:03:25,490 --> 01:03:27,350
0,390 390,990 990,1530 1530,1710 1710,1860
conflict information available,| then I
|然后我就退一步。

2151
01:03:27,350 --> 01:03:28,340
0,150 150,390 390,540 540,660 660,990
just back off by one.|
|

2152
01:03:30,490 --> 01:03:32,770
0,720 960,1230 1230,1590 1590,1770 1770,2280
Okay?| Is it a question
好吧?|这是一个关于我们如何后退一步的问题，

2153
01:03:32,770 --> 01:03:34,120
0,510 540,750 750,870 870,1140 1140,1350
about how we back off

2154
01:03:34,120 --> 01:03:37,000
0,90 90,600 1440,2130 2460,2700 2700,2880
by one,| {} is it
|这难道不是问题吗，

2155
01:03:37,000 --> 01:03:38,040
0,510
not

2156
01:03:38,040 --> 01:03:39,750
0,450 450,810 870,1080 1080,1500 1500,1710
problem that,| I was thinking
|我在想这件事

2157
01:03:39,750 --> 01:03:40,800
0,180 180,300 300,390 390,660 900,1050
about this| and I I
|我我觉得这不是真的，

2158
01:03:40,800 --> 01:03:41,670
0,300 300,360 360,630 630,750 750,870
think it wasn't true,| but
|但我还没有完全说服自己，

2159
01:03:41,670 --> 01:03:43,830
0,180 210,540 540,930 930,1260 1260,2160
I haven't fully convinced myself,|
|

2160
01:03:43,860 --> 01:03:45,750
0,570 600,1110 1140,1380 1380,1500 1500,1890
{} but isn't it possible
但有没有可能rf.nextIndex对等体发生了更改，

2161
01:03:45,750 --> 01:03:47,250
0,240 240,330 330,600 600,1170 1200,1500
that {} {rf.nextIndex - -

2162
01:03:47,250 --> 01:03:50,300
0,450 450,840 840,1680 1710,2550
-} peer changed,| between
|在我们寄出它的时候

2163
01:03:50,300 --> 01:03:51,230
0,150 150,270 270,630 630,780 780,930
when we sent it| and
|当我们处理这些回应时，

2164
01:03:51,230 --> 01:03:53,810
0,180 180,510 660,1470 1500,1890 1890,2580
when we're processing this response,|
|

2165
01:03:53,810 --> 01:03:56,180
0,720 720,900 900,1590 1650,1800 1800,2370
you're not problematic, the document
您不会有问题，因为文档使用的值可能已更改。

2166
01:03:56,180 --> 01:03:58,040
0,240 240,420 420,690 690,1620 1620,1860
kind of using a value

2167
01:03:58,040 --> 01:04:00,320
0,180 180,690 690,1260 1470,1770 1770,2280
that's potentially changed.| {} Probably
|可能不会，太好了，

2168
01:04:00,320 --> 01:04:02,480
0,420 420,690 690,1020 1020,1680 1860,2160
not, great,| because you think
|因为你认为你的风险你的担心是合理的，

2169
01:04:02,480 --> 01:04:04,010
0,150 150,720 810,1140 1140,1440 1440,1530
your risk your concern is

2170
01:04:04,010 --> 01:04:06,080
0,480 780,1410 1410,1860 1860,1950 1950,2070
valid,| because certainly you know
|因为你肯定知道木筏的结构可能已经完全改变了

2171
01:04:06,080 --> 01:04:06,980
0,90 90,330 330,660 660,780 780,900
the raft structure might have

2172
01:04:06,980 --> 01:04:08,720
0,630 630,1320 1320,1410 1410,1500 1500,1740
completely changed| by the time
|等到这一反应到来的时候。

2173
01:04:08,720 --> 01:04:10,160
0,150 150,540 540,780 780,990
this response comes in.|
|

2174
01:04:10,360 --> 01:04:13,210
0,660 660,1200 1200,1560 1560,1650 1650,2850
{} In fact, you know
事实上，你知道，虽然不太可能，

2175
01:04:14,740 --> 01:04:16,390
0,450 450,990 990,1080 1080,1290 1290,1650
although unlikely of course,| because
|因为对同一个同龄人的回应是对的。

2176
01:04:16,390 --> 01:04:17,470
0,180 180,600 600,690 690,750 750,1080
the response to the same

2177
01:04:17,470 --> 01:04:18,880
0,420 450,870
peer right.|
|

2178
01:04:18,970 --> 01:04:20,300
0,720

2179
01:04:23,460 --> 01:04:24,420
0,240 240,390 390,570 570,870 870,960
And so there's a you
所以有一个你知道的，

2180
01:04:24,420 --> 01:04:25,590
0,210 210,480 480,540 540,840 840,1170
know,| but I might have
|但是对于那个特定的对等点，我可能有多个未完成的RPC

2181
01:04:25,590 --> 01:04:27,150
0,480 480,810 810,1290 1290,1380 1380,1560
multiple RPC outstanding to that

2182
01:04:27,150 --> 01:04:28,830
0,390 390,780 1020,1290 1290,1440 1440,1680
particular peer| and so those
|因此，这里的这些回复处理程序可能会以某种顺序运行。

2183
01:04:28,830 --> 01:04:30,300
0,390 390,810 810,1050 1050,1200 1200,1470
reply handlers here might run

2184
01:04:30,300 --> 01:04:31,560
0,90 90,300 300,750
in some order.|
|

2185
01:04:33,920 --> 01:04:34,760
0,390 420,600 600,690 690,780 780,840
{} So I have a
所以我有一个问题，

2186
01:04:34,760 --> 01:04:36,110
0,330 330,480 480,720 720,870 870,1350
question,| so why do we
|那么，为什么我们要将nextIndex减去1，

2187
01:04:36,110 --> 01:04:37,520
0,510 510,600 600,810 810,1260 1260,1410
decrement the {nextIndex -} by

2188
01:04:37,520 --> 01:04:38,810
0,300 300,420 420,630 630,720 720,1290
1,| if there's no conflict.|
|如果没有冲突的话。|

2189
01:04:40,480 --> 01:04:42,180
0,1110

2190
01:04:43,160 --> 01:04:44,210
0,180 180,540 540,750 750,960 960,1050
I think this has to
我认为这个必须做到这一点，

2191
01:04:44,210 --> 01:04:45,200
0,180 180,420 420,720 720,840 840,990
do that,| maybe at some
|也许在某种程度上，我还没有实现冲突或冲突术语的东西，

2192
01:04:45,200 --> 01:04:46,730
0,210 210,270 270,480 480,960 960,1530
point, I haven't implemented conflict

2193
01:04:46,760 --> 01:04:48,590
0,900 900,990 990,1380 1380,1590 1590,1830
or the conflict term stuff

2194
01:04:48,590 --> 01:04:49,480
0,360
yet,|
|

2195
01:04:50,620 --> 01:04:52,600
0,600 600,1140 1140,1350 1350,1710 1710,1980
I I don't remember whether
我不记得这个动作是不是必不可少。

2196
01:04:52,600 --> 01:04:53,590
0,180 180,420 420,540 540,900 900,990
this action is essential or

2197
01:04:53,590 --> 01:04:54,520
0,360
not.|
|

2198
01:04:54,550 --> 01:04:55,760
0,360 570,810 810,990
Okay, thank you.|
好的谢谢。|

2199
01:04:55,850 --> 01:04:57,260
0,690 690,810 810,900 900,960 960,1410
{} You know, of course
你知道，当然像你一样，我已经多次更改了我的代码

2200
01:04:57,290 --> 01:04:58,340
0,240 240,510 510,660 660,960 960,1050
like you I've changed my

2201
01:04:58,340 --> 01:04:59,990
0,360 360,690 690,1050 1050,1500 1500,1650
code multiple times| and you
|你们知道，当我继续实施测试的反应时，

2202
01:04:59,990 --> 01:05:01,550
0,480 540,870 870,1020 1020,1230 1230,1560
know as I go along

2203
01:05:01,550 --> 01:05:03,800
0,630 630,1350 1530,2100 2100,2160 2160,2250
implementing the response of the

2204
01:05:03,800 --> 01:05:04,740
0,510
test,|
|

2205
01:05:07,390 --> 01:05:08,230
0,270 270,420 420,540 540,720 720,840
{} I don't think there's
我不认为这有什么坏处，

2206
01:05:08,230 --> 01:05:09,660
0,450 450,570 570,870
harm in it,|
|

2207
01:05:09,690 --> 01:05:11,280
0,270 270,690 690,1290 1290,1410 1410,1590
the only downside could be
唯一的缺点可能是我可能会在RPC上发送太多条目

2208
01:05:11,280 --> 01:05:12,120
0,180 180,210 210,420 420,720 720,840
that I may send too

2209
01:05:12,120 --> 01:05:14,490
0,330 330,1080 1080,1890 1920,2190 2190,2370
many {} entries on {RPC

2210
01:05:14,490 --> 01:05:16,290
0,720 720,990 990,1140 1140,1560 1560,1800
-}| or send more entries
|或者在RPC中发送更多条目，我真的必须这样做，

2211
01:05:16,290 --> 01:05:17,190
0,60 60,150 150,540 540,630 630,900
in the RPC I really

2212
01:05:17,190 --> 01:05:18,180
0,210 210,420
have to,|
|

2213
01:05:18,560 --> 01:05:20,140
0,240 240,330 330,600 600,1020
on the next append.|
在下一个附加项上。|

2214
01:05:24,430 --> 01:05:25,940
0,240 240,390 390,1020
Okay, any questions?|
好的，有什么问题吗？|

2215
01:05:28,100 --> 01:05:29,150
0,120 120,390 390,510 510,840 840,1050
{} Good, let me talk
很好，让我简单地谈一下承诺，

2216
01:05:29,150 --> 01:05:30,770
0,30 30,210 210,390 390,750 750,1620
a little bit about the

2217
01:05:31,070 --> 01:05:32,870
0,630 1110,1350 1350,1500 1500,1680 1680,1800
commit,| so we might have
|所以我们可能已经正确地了解到，追随者实际上已经，已经提交了一些条目，

2218
01:05:32,870 --> 01:05:34,490
0,330 330,660 660,900 900,1170 1170,1620
learned correct that the follower

2219
01:05:34,490 --> 01:05:38,840
0,390 390,2040 2430,3210 3510,4050 4050,4350
actually has, {} has committed

2220
01:05:38,840 --> 01:05:40,100
0,120 120,660 750,960 960,1140 1140,1260
some entries,| {} that we
|我们以前不知道的事情

2221
01:05:40,100 --> 01:05:41,360
0,180 180,300 300,900 900,1110 1110,1260
didn't know before| and the
|并更新匹配索引

2222
01:05:41,360 --> 01:05:43,070
0,270 270,660 660,750 750,1320 1410,1710
{matchIndex -} is updated| and
|所以，基本上我总是在处理回复后检查，

2223
01:05:43,070 --> 01:05:45,290
0,450 750,1320 1350,1530 1530,1860 1860,2220
so, {} so basically I

2224
01:05:45,290 --> 01:05:48,320
0,480 480,930 960,1860 1920,2490 2490,3030
always check after processing reply,|
|

2225
01:05:48,320 --> 01:05:50,090
0,420 420,420 420,780 780,1680 1680,1770
whether I should advance you
我是不是应该让你知道提交点，

2226
01:05:50,090 --> 01:05:51,360
0,120 120,210 210,480 480,870
know the commit point,|
|

2227
01:05:52,570 --> 01:05:54,880
0,840 840,1110 1110,1290 1290,1470 1470,2310
{} and this is basically
这基本上就是，

2228
01:05:54,880 --> 01:05:56,740
0,600 660,840 840,1020 1020,1410 1620,1860
the,| you know the this
|您知道这个代码对应于图2中的最后一个领导者[]，

2229
01:05:56,740 --> 01:05:58,210
0,330 330,870 870,990 990,1080 1080,1470
code corresponds to the last

2230
01:05:58,210 --> 01:05:59,350
0,300 300,450 450,630 630,1020 1020,1140
[] of the leaders in

2231
01:05:59,350 --> 01:06:02,440
0,330 330,810 1260,1830 1830,2160 2340,3090
figure 2,| {} so {}
|因此，从字面上看，要落实实际应该在那里发生的事情。

2232
01:06:02,440 --> 01:06:04,870
0,330 630,1440 1440,1830 1830,1980 1980,2430
and literally implement what actually

2233
01:06:04,870 --> 01:06:05,770
0,120 120,390 390,480 480,570 570,900
is supposed to be happening

2234
01:06:05,770 --> 01:06:06,520
0,300
there.|
|

2235
01:06:06,780 --> 01:06:08,790
0,540 660,1200 1200,1320 1320,1800 1800,2010
{} Probably the only thing
可能这里唯一有趣的是这个特定的点，

2236
01:06:08,790 --> 01:06:09,930
0,240 240,420 420,510 510,930 930,1140
that's sort of interesting in

2237
01:06:09,930 --> 01:06:12,210
0,420 420,960 960,1170 1170,1710 1710,2280
here is this particular point,|
|

2238
01:06:13,450 --> 01:06:14,290
0,270 270,420 420,600 600,660 660,840
and this has to do
这与图8有关，对吧，

2239
01:06:14,290 --> 01:06:16,920
0,180 180,1560 1590,2100
with figure 8,

2240
01:06:16,920 --> 01:06:18,420
0,390 390,480 480,1020 1020,1230 1230,1500
right,| the scenario is that
|场景是，你是一个领导者，

2241
01:06:18,420 --> 01:06:20,070
0,330 330,420 420,1050 1230,1380 1380,1650
you're a leader,| is not
|除非至少在其当前任期内提交了一个条目，否则不允许提交上一任期，

2242
01:06:20,070 --> 01:06:21,420
0,330 330,390 390,780 780,930 930,1350
allowed to commit a previous

2243
01:06:21,420 --> 01:06:23,520
0,570 750,1200 1200,1440 1440,1740 1740,2100
term unless at least has

2244
01:06:23,520 --> 01:06:25,740
0,330 330,1050 1410,1950 1950,2100 2100,2220
committed one entry in its

2245
01:06:25,740 --> 01:06:26,960
0,330 330,750
current term,|
|

2246
01:06:27,020 --> 01:06:28,610
0,180 180,300 300,480 480,1020 1020,1590
and so this is exactly
这就是第5.4节描述的那个检查，

2247
01:06:28,610 --> 01:06:30,140
0,150 150,390 390,720 720,840 840,1530
that one check that described

2248
01:06:30,140 --> 01:06:32,090
0,360 360,630 630,840 840,1380 1800,1950
section {5.4 - -}, {}|
|

2249
01:06:32,090 --> 01:06:33,950
0,600 600,840 840,1140 1140,1590 1620,1860
it checks whether the current
它检查当前日志条目是否，

2250
01:06:33,950 --> 01:06:35,780
0,240 240,930 990,1560 1560,1800 1800,1830
log entry,| {} that I
|我想要出现在即将承诺的词条中，

2251
01:06:35,780 --> 01:06:37,070
0,270 270,600 600,660 660,870 870,1290
want about to be in

2252
01:06:37,400 --> 01:06:39,710
0,300 300,1140 1140,1680 1680,1800 1800,2310
the entry about to commit,|
|

2253
01:06:39,890 --> 01:06:41,090
0,480 480,660 660,960 960,1140 1140,1200
whether that actually has a
它是否真的有一个术语与当前术语不同

2254
01:06:41,090 --> 01:06:41,990
0,240 240,390 390,690 690,810 810,900
term is different than the

2255
01:06:41,990 --> 01:06:43,070
0,300 300,600 600,690 690,840 840,1080
current term| and if that's
|如果是这样的话，我就跳过它。

2256
01:06:43,070 --> 01:06:43,970
0,90 90,450 450,540 540,690 690,900
the case I'll just skip

2257
01:06:43,970 --> 01:06:44,620
0,240
it.|
|

2258
01:06:45,110 --> 01:06:46,760
0,240 240,630 630,870 870,1020 1020,1650
Now happens if there's another
现在，如果该术语后面有另一个日志条目，

2259
01:06:46,790 --> 01:06:48,890
0,360 360,690 690,1440 1440,1620 1620,2100
log entry following that term,|
|

2260
01:06:49,280 --> 01:06:50,960
0,180 180,420 420,1020 1260,1470 1470,1680
in my term for which
在我获得多数选票的任期内，

2261
01:06:50,960 --> 01:06:52,160
0,150 150,480 480,570 570,1110 1110,1200
I have a majority of

2262
01:06:52,160 --> 01:06:54,710
0,60 60,750 870,1530 1560,2040 2040,2550
the votes,| then I'll basically
|那么我基本上会承诺新的那个

2263
01:06:54,710 --> 01:06:56,750
0,480 510,960 960,1440 1440,1830 1920,2040
commit that newer one| and
|然后自动日志将提交上一条。

2264
01:06:56,750 --> 01:06:58,640
0,180 180,930 930,1320 1320,1470 1470,1890
then automatically logs will commit

2265
01:06:58,700 --> 01:07:00,200
0,240 240,660 660,960
the previous one.|
|

2266
01:07:03,600 --> 01:07:06,180
0,210 210,570 570,1020 1080,1890 2130,2580
So that's that figure 8
这就是图8问题

2267
01:07:06,180 --> 01:07:09,030
0,690 960,1350 1350,2010 2040,2460 2460,2850
problem| and then a {signalApplierL
|然后是signalApplierL，

2268
01:07:09,030 --> 01:07:11,760
0,120 120,480 480,870 1230,2130 2160,2730
- -},| {} and {}
|你知道的涂布机可能会运行，

2269
01:07:11,760 --> 01:07:13,200
0,150 150,510 510,930 1050,1320 1320,1440
the {applier -} {you,know} may

2270
01:07:13,200 --> 01:07:15,240
0,600 630,870 870,1080 1080,1650 1740,2040
run,| if there's actually a,|
|如果真的有一个，|

2271
01:07:15,480 --> 01:07:17,520
0,510 510,690 690,810 810,1260
let's look at the
让我们来看看涂布机的线程，

2272
01:07:17,520 --> 01:07:19,000
0,270 270,420 420,900
{applier -} thread,|
|

2273
01:07:19,590 --> 01:07:20,760
0,300 300,570 570,720 720,1050 1050,1170
{} here's the {applyer -}
这是涂布机的线，

2274
01:07:20,760 --> 01:07:21,840
0,540
thread,|
|

2275
01:07:22,040 --> 01:07:23,210
0,330 330,570 570,690 690,1080 1080,1170
{} {signalApplierL - -} for
SignalApplierL用于唤醒它

2276
01:07:23,210 --> 01:07:24,020
0,150 150,300 300,510 510,600 600,810
it to wake it up|
|

2277
01:07:24,020 --> 01:07:26,690
0,690 690,1320 1350,1650 1650,2310 2310,2670
when {} maybe advance the
当可能提前提交点时，

2278
01:07:26,720 --> 01:07:28,910
0,270 270,750 1320,1770 1770,2010 2010,2190
commit point,| {} it has
|它有一个最后的应用，首先抓住一把锁，最后应用，

2279
01:07:28,910 --> 01:07:31,940
0,90 90,360 360,870 1110,1920 2520,3030
a {lastApplied -}, {} {first,grasp}

2280
01:07:31,940 --> 01:07:33,720
0,450 450,750 750,1320
{a,lock}, {lastApplied -},|
|

2281
01:07:33,720 --> 01:07:35,160
0,150 150,750 750,900 900,1320 1320,1440
and then you basically go
然后你基本上要从这里经过

2282
01:07:35,160 --> 01:07:38,130
0,420 420,1080 1350,2160 2160,2580 2610,2970
through here| and a [dust]
|和一个[灰尘]来检查你知道这是所有服务器的规则，

2283
01:07:38,130 --> 01:07:39,300
0,120 120,540 570,660 660,810 810,1170
to check you know that's

2284
01:07:39,300 --> 01:07:40,680
0,120 120,450 450,600 600,720 720,1380
the rule for all servers,|
|

2285
01:07:40,680 --> 01:07:41,700
0,90 90,210 210,480 480,720 720,1020
you know when you commit
你知道当你做某事的时候

2286
01:07:41,700 --> 01:07:43,710
0,540 1020,1260 1260,1350 1350,1590 1590,2010
something| and it just follows
|它就是遵循这条规则

2287
01:07:43,710 --> 01:07:44,880
0,210 210,600 600,690 690,810 810,1170
that rule| and then basically
|然后基本上向应用通道写入一些内容

2288
01:07:44,880 --> 01:07:46,020
0,270 270,570 570,690 690,810 810,1140
write something to the apply

2289
01:07:46,020 --> 01:07:46,860
0,450 450,570 570,660 660,750 750,840
channel| and as you can
|正如你在这里看到的，

2290
01:07:46,860 --> 01:07:48,450
0,210 210,600 600,810 810,1260 1260,1590
see here,| I unlock before
|我在写入应用通道之前解锁，

2291
01:07:48,450 --> 01:07:49,650
0,240 240,360 360,450 450,750 750,1200
writing to the apply channel,|
|

2292
01:07:50,340 --> 01:07:52,800
0,750 750,1260 1260,2010 2010,2250 2250,2460
and {} then, {} if
然后，如果没有更多的东西可以供应，就没有更多的东西可以供应

2293
01:07:52,800 --> 01:07:54,620
0,180 180,420 420,870 870,1380
there's nothing anymore to,

2294
01:07:54,620 --> 01:07:56,220
0,1020
{}

2295
01:07:56,220 --> 01:07:57,690
0,360 360,570 570,810 810,1110 1140,1470
nothing more to { -}

2296
01:07:57,690 --> 01:07:58,980
0,420 420,540 540,900 900,1230 1230,1290
supply| and this on the
|这是在应用频道上，

2297
01:07:58,980 --> 01:08:00,180
0,300 300,690 690,810 810,1050 1050,1200
apply channel,| I just do
|我只是在条件变量上等待。

2298
01:08:00,180 --> 01:08:01,350
0,360 390,690 690,750 750,840 840,1170
a Wait on the condition

2299
01:08:01,350 --> 01:08:02,300
0,390
variable.|
|

2300
01:08:04,720 --> 01:08:05,860
0,150 150,540 540,630 630,870 870,1140
And again, you know different
再说一次，你知道不同的写作方式，

2301
01:08:05,860 --> 01:08:07,450
0,150 150,210 210,510 510,960 990,1590
ways of writing this,| but
|但我碰巧就是这么做的。

2302
01:08:07,450 --> 01:08:08,200
0,210 210,300 300,390 390,570 570,750
this is the way I

2303
01:08:08,200 --> 01:08:09,480
0,210 210,270 270,420 420,600
happened to do it.|
|

2304
01:08:10,000 --> 01:08:11,140
0,240 240,450 450,540 540,690 690,1140
So why are you using
那你为什么要用广播呢？

2305
01:08:11,140 --> 01:08:13,060
0,330 330,1380
a broadcast?|
|

2306
01:08:13,060 --> 01:08:14,350
0,300 300,540 540,810 810,900 900,1290
Oh, why, instead of signal,
哦，为什么，而不是信号，是的，没有，没有充分的理由。

2307
01:08:14,350 --> 01:08:15,670
0,180 180,510 510,750 750,930 930,1320
yeah, no no good reason.|
|

2308
01:08:16,400 --> 01:08:21,680
0,3870 3960,4110 4110,4380 4410,4890 4890,5280
Okay.| You know broadcast signal
好吧。|你知道，广播信号在这种情况下做的是完全相同的事情。

2309
01:08:21,680 --> 01:08:22,520
0,60 60,210 210,390 390,450 450,840
in this case do exactly

2310
01:08:22,520 --> 01:08:23,680
0,90 90,270 270,570
the same thing.|
|

2311
01:08:24,140 --> 01:08:25,180
0,480

2312
01:08:25,570 --> 01:08:27,400
0,150 150,240 240,630 630,1080 1380,1830
For the applier.| {} Yeah.|
对于施加者来说。|嗯。|

2313
01:08:27,610 --> 01:08:30,370
0,750 1080,1770 1830,2040 2040,2670 2670,2760
{} So I using a
所以我使用了一个条件变量

2314
01:08:30,370 --> 01:08:31,750
0,450 450,810 810,930 930,1050 1050,1380
condition variable| and it seems
|这似乎是很自然的事情，

2315
01:08:31,750 --> 01:08:33,220
0,270 450,990
like like

2316
01:08:33,220 --> 01:08:34,570
0,300 300,750 750,870 870,1020 1020,1350
probably natural to do that,|
|

2317
01:08:34,780 --> 01:08:36,280
0,210 210,360 360,540 540,1380 1380,1500
is there any disadvantage to
做这件事有什么坏处吗

2318
01:08:36,280 --> 01:08:38,380
0,330 330,690 720,1260 1290,1680 1740,2100
doing it| on on like
|就像睡觉，就像睡了一段时间，

2319
01:08:38,380 --> 01:08:40,090
0,120 120,810 870,1080 1080,1560 1560,1710
on sleeping, like sleeping for

2320
01:08:40,090 --> 01:08:41,830
0,90 90,330 330,900 900,1380 1410,1740
a time interval,| then like
|然后，就像你知道的，一起看着一切。

2321
01:08:42,220 --> 01:08:44,140
0,120 120,270 270,720 720,1170 1170,1920
you know watching everything together.|
|

2322
01:08:44,760 --> 01:08:48,930
0,810 1410,2070 2070,2100 2100,3180 3180,4170
{ -} I I I
我不喜欢随机休眠的代码，

2323
01:08:48,960 --> 01:08:50,640
0,570 570,840 840,1020 1020,1320 1320,1680
dislike code with random sleeps

2324
01:08:50,640 --> 01:08:51,540
0,150 150,330
in them,|
|

2325
01:08:51,540 --> 01:08:52,530
0,210 210,360 360,450 450,600 600,990
I think it was generally
我认为这总体上是一种糟糕的代码编写风格，

2326
01:08:52,530 --> 01:08:53,880
0,270 270,540 540,630 630,900 900,1350
{a,bad} style of writing code,|
|

2327
01:08:54,750 --> 01:08:56,970
0,840 1140,1440 1440,1860 1860,2130 2130,2220
and so I don't do
所以我不会那么做。

2328
01:08:56,970 --> 01:08:57,880
0,330
that.|
|

2329
01:08:58,160 --> 01:08:59,600
0,480 510,720 720,1050 1050,1290 1290,1440
Yeah.| The only place where
嗯。|我唯一能睡觉的地方就在自动收银机里，

2330
01:08:59,600 --> 01:09:00,380
0,60 60,240 240,600 600,690 690,780
I do sleep is in

2331
01:09:00,380 --> 01:09:01,440
0,90 90,540
the ticker,|
|

2332
01:09:01,440 --> 01:09:02,730
0,270 270,510 660,990 990,1080 1080,1290
that's it,| that's the way
就这样,|这就是你要做的事，

2333
01:09:02,730 --> 01:09:03,690
0,210 210,330 330,450 450,720 720,960
place where you have to

2334
01:09:03,930 --> 01:09:05,040
0,60 120,300 300,810 810,930 930,1110
do,| so otherwise I just
|否则我就永远不会那么做了。

2335
01:09:05,040 --> 01:09:07,140
0,330 330,480 480,720 1020,1560 1560,2100
never do that.| Actually, that's
|实际上，用股票行情有什么好处吗？

2336
01:09:08,010 --> 01:09:09,480
0,300 300,450 450,690 720,1320 1320,1470
is there any advantage to

2337
01:09:09,480 --> 01:09:10,770
0,240 240,390 390,660 660,780 780,1290
doing it with a ticker?|
|

2338
01:09:12,780 --> 01:09:15,060
0,540 840,1020 1020,1470 1470,1650 1650,2280
Sorry.| Is there any disadvantage
抱歉的。|与股票代码一起检查和更新有什么缺点吗，

2339
01:09:15,060 --> 01:09:17,850
0,300 300,840 840,1320 1680,2400 2520,2790
of checking and updating like

2340
01:09:17,880 --> 01:09:19,530
0,630 630,720 720,840 840,1320 1350,1650
alongside with the ticker,| like
|就像你一样。

2341
01:09:19,530 --> 01:09:21,330
0,150 150,330 330,900 1470,1680 1680,1800
you have.| {} You could
|你可以这么做，我觉得这很难解释，

2342
01:09:21,330 --> 01:09:23,220
0,120 120,570 570,1500 1500,1680 1680,1890
do that I I find

2343
01:09:23,220 --> 01:09:24,480
0,90 90,360 360,480 480,780 780,1260
it harder to reason about,|
|

2344
01:09:24,540 --> 01:09:25,740
0,270 270,450 450,660 660,1140 1140,1200
I I'd like to you
我想让你知道，如果一条帖子我们收了这一件事

2345
01:09:25,740 --> 01:09:26,880
0,120 120,600 600,780 780,1050 1050,1140
know if one thread we

2346
01:09:26,880 --> 01:09:27,930
0,360 360,480 480,690 690,960 960,1050
charged this one thing| and
|然后在一件事上的股票线，

2347
01:09:27,930 --> 01:09:28,680
0,90 90,180 180,450 450,660 660,750
then the ticker thread in

2348
01:09:28,680 --> 01:09:30,810
0,240 240,660 1050,1650 1710,2010 2010,2130
one thing,| you know I
|你知道，我认为有些人基本上每件事都在一个滚动条上做，

2349
01:09:30,810 --> 01:09:31,470
0,150 150,240 240,300 300,540 540,660
think there are people that

2350
01:09:31,470 --> 01:09:32,430
0,300 300,450 450,810 810,900 900,960
basically do everything in a

2351
01:09:32,430 --> 01:09:34,340
0,510 630,1110
ticker thread,|
|

2352
01:09:34,400 --> 01:09:35,930
0,630 630,1020 1020,1170 1170,1260 1260,1530
{} and you know one
你们中的一个人知道对我来说这是很难解释的，

2353
01:09:35,930 --> 01:09:36,770
0,270 270,360 360,510 510,630 630,840
of you know for me

2354
01:09:36,770 --> 01:09:37,670
0,90 90,240 240,330 330,540 540,900
it's hard to reason about,|
|

2355
01:09:38,240 --> 01:09:39,710
0,360 360,540 540,840 870,1440 1440,1470
{} but that's more a
但这更多的是个人品味问题，而不是任何事情。

2356
01:09:39,710 --> 01:09:41,880
0,300 300,660 690,1140 1140,1650
question of personal taste

2357
01:09:42,160 --> 01:09:43,360
0,570
{than,anything}.|
|

2358
01:09:49,130 --> 01:09:50,360
0,720
Okay?|
好吧?|

2359
01:09:54,350 --> 01:09:56,040
0,240 240,570 570,1200
Any further questions?|
还有什么问题吗？|

2360
01:10:00,190 --> 01:10:01,450
0,300 300,360 360,510 510,690 720,1260
Okay, I want to quickly
好的，我想快速看一下开始部分，

2361
01:10:01,450 --> 01:10:04,270
0,300 300,780 1080,1680 1710,2310 2310,2820
look then at {} start,|
|

2362
01:10:04,270 --> 01:10:05,470
0,240 240,690 690,810 810,1050 1050,1200
because basically there's nothing really
因为基本上已经没有什么可讨论的了，

2363
01:10:05,470 --> 01:10:07,090
0,330 330,390 390,750 750,1230 1230,1620
left to discuss anymore,| we
|我们基本上谈论的是投票，

2364
01:10:07,090 --> 01:10:08,110
0,210 210,330 330,510 510,600 600,1020
talk basically {about -} voting,|
|

2365
01:10:08,110 --> 01:10:09,190
0,60 60,270 270,450 450,510 510,1080
we talked about {appending -},|
我们谈到了附加，|

2366
01:10:09,640 --> 01:10:11,230
0,360 360,630 630,810 810,1200 1200,1590
{} haven't really discussed exactly
还没有真正讨论过追随者一方到底会发生什么，

2367
01:10:11,230 --> 01:10:12,940
0,240 240,600 600,780 780,1260 1290,1710
what happens on the follower

2368
01:10:12,940 --> 01:10:14,590
0,390 390,750 750,810 810,1200 1200,1650
side,| when {it,gets,in -} {appending
|当它进入附加请求时，

2369
01:10:14,620 --> 01:10:18,730
0,630 660,1680 1890,2700 2970,3750 3750,4110
-} request,| but basically follows
|但基本上遵循图2，

2370
01:10:18,730 --> 01:10:19,690
0,240 240,450 450,720 720,840 840,960
figure 2,| if we have
|如果我们还有时间，我们也可以看看这个。

2371
01:10:19,690 --> 01:10:20,380
0,210 210,450 450,540 540,600 600,690
time left and we can

2372
01:10:20,380 --> 01:10:21,480
0,150 150,240 240,420 420,660
look at that too.|
|

2373
01:10:21,720 --> 01:10:24,210
0,630 990,1410 1410,1500 1500,1950 1950,2490
{} Here's the Start command,|
以下是启动命令，|

2374
01:10:24,880 --> 01:10:25,870
0,390 390,540 540,690 690,840 840,990
{} so this is like
因此，这类似于服务调用它以将其追加或添加到日志中

2375
01:10:25,870 --> 01:10:27,250
0,60 60,540 540,840 840,1020 1020,1380
the service calls this to

2376
01:10:27,250 --> 01:10:28,600
0,150 150,420 420,930 930,990 990,1350
{append -} or an entry

2377
01:10:28,600 --> 01:10:31,660
0,450 450,960 990,1590 1920,2730 2760,3060
to {} {the,log}| and {}
|你知道，立刻抓起木头，

2378
01:10:31,660 --> 01:10:32,560
0,90 90,210 210,510 510,810 810,900
you know immediately grabs the

2379
01:10:32,560 --> 01:10:35,380
0,570 780,1950 1950,2280 2280,2700 2700,2820
log,| {} check whether we're
|看看我们是否仍是领头羊，

2380
01:10:35,380 --> 01:10:36,370
0,180 180,270 270,570 570,660 660,990
still the leader,| if not
|如果不是，则返回False，

2381
01:10:36,370 --> 01:10:38,560
0,150 150,510 510,1080 1110,1950 1950,2190
we return false,| otherwise we
|否则，我们将创建一个条目

2382
01:10:38,560 --> 01:10:40,420
0,240 240,330 330,1050 1350,1710 1710,1860
create an entry| and we
|然后我们将其附加到日志中

2383
01:10:40,420 --> 01:10:41,470
0,150 150,240 240,330 330,420 420,1050
append it to the log|
|

2384
01:10:41,800 --> 01:10:43,540
0,720 720,1110 1110,1500 1500,1650 1650,1740
{} and log has to
日志必须是持久的，所以我们必须持久，

2385
01:10:43,540 --> 01:10:45,070
0,120 120,570 570,690 690,810 810,1530
be persistent, so were persistent,|
|

2386
01:10:45,340 --> 01:10:46,150
0,180 180,330 330,450 450,690 690,810
and then we send the
然后我们寄出申请表

2387
01:10:46,150 --> 01:10:48,100
0,660 660,1110 1110,1230 1230,1320 1320,1950
applies| and this is exactly
|这与SendAppends的顺序完全相同，

2388
01:10:48,100 --> 01:10:49,630
0,90 90,510 510,690 690,930 930,1530
the same order {sendAppends -},|
|

2389
01:10:49,630 --> 01:10:50,740
0,510 510,570 570,840 840,1050 1050,1110
exactly the same code as
与心跳完全相同的代码

2390
01:10:50,740 --> 01:10:52,810
0,90 90,300 300,810 1140,2070 2070,2070
the {heartbeats -}| and {}
|除了心跳，不同于心跳，

2391
01:10:54,220 --> 01:10:55,810
0,690 690,930 930,1320 1320,1500 1500,1590
except in the, unlike in

2392
01:10:55,810 --> 01:10:56,980
0,60 60,270 270,660 930,1050 1050,1170
the {heartbeats -},| you know
|你知道，现在最有可能的是，它将真正发送条目，

2393
01:10:56,980 --> 01:10:58,060
0,240 240,630 630,840 840,960 960,1080
most likely now it's going

2394
01:10:58,060 --> 01:10:59,350
0,60 60,300 300,600 600,750 750,1290
to actually send the entry,|
|

2395
01:10:59,470 --> 01:11:01,120
0,450 450,780 780,1050 1050,1410 1440,1650
{} that is, {} that
也就是说，它刚刚被附加到日志中。

2396
01:11:01,120 --> 01:11:02,020
0,150 150,330 330,450 450,810 810,900
just has been appended to

2397
01:11:02,020 --> 01:11:02,840
0,90 90,510
the log.|
|

2398
01:11:05,240 --> 01:11:06,320
0,540
Okay?|
好吧?|

2399
01:11:07,990 --> 01:11:10,030
0,690 840,1170 1170,1830 1830,1920 1920,2040
{} You noticed, you know
您注意到了，您知道可能很多地方都有这个日志。lastindex或记录那个东西

2400
01:11:10,030 --> 01:11:11,320
0,210 210,570 570,780 780,1110 1110,1290
that probably many places have

2401
01:11:11,320 --> 01:11:13,150
0,150 150,630 630,1110 1110,1410 1410,1830
this {log.lastindex - - -}

2402
01:11:13,150 --> 01:11:15,280
0,90 90,570 570,1290 1290,1770 1770,2130
or log that something| and
|这是因为我在某种程度上将日志抽象为自己的结构。

2403
01:11:15,280 --> 01:11:16,270
0,210 210,540 540,720 720,930 930,990
that's because I sort of

2404
01:11:16,270 --> 01:11:18,310
0,600 600,660 660,930 930,1530 1650,2040
abstracted the log away into

2405
01:11:18,310 --> 01:11:21,020
0,150 150,840 1170,2130
its own structure.|
|

2406
01:11:21,260 --> 01:11:23,630
0,630 1110,1380 1380,1470 1470,1830 1830,2370
{} Here's the log actually
这里的日志实际上只是条目的日志，条目的片段

2407
01:11:23,630 --> 01:11:24,830
0,510 510,750 750,840 840,1140 1140,1200
as just a log of

2408
01:11:24,830 --> 01:11:27,500
0,570 570,900 900,990 990,1710 2040,2670
entries, slice of entries| and
|和索引0

2409
01:11:27,500 --> 01:11:29,390
0,390 390,840 840,1350 1350,1620 1620,1890
the index 0| and this
|这是第二部分的内容，

2410
01:11:29,390 --> 01:11:30,650
0,90 90,420 420,810 810,1110 1110,1260
is really for part {2d

2411
01:11:30,650 --> 01:11:33,050
0,510 810,1290 1290,1860 1860,2280 2280,2400
-},| {} where basically you're
|基本上你要砍掉木头的起始处，

2412
01:11:33,050 --> 01:11:34,070
0,180 180,510 510,600 600,660 660,1020
gonna cut up the beginning

2413
01:11:34,070 --> 01:11:35,750
0,120 120,210 210,780 810,1290 1290,1680
of the log,| this global
|此全局日志

2414
01:11:35,750 --> 01:11:37,190
0,510 930,1170 1170,1260 1260,1380 1380,1440
log| and you need to
|而且你需要跟踪指数，

2415
01:11:37,190 --> 01:11:38,210
0,120 120,480 480,540 540,750 750,1020
keep track of what the

2416
01:11:38,210 --> 01:11:39,710
0,600 600,990 1020,1290 1290,1350 1350,1500
index,| you need to keep
|您需要跟踪第一个条目的索引实际记录在日志中的内容。

2417
01:11:39,710 --> 01:11:40,760
0,240 240,300 300,450 450,540 540,1050
track of what the indexes

2418
01:11:40,760 --> 01:11:42,020
0,90 90,180 180,510 510,810 810,1260
of the first entry actually

2419
01:11:42,020 --> 01:11:43,100
0,210 210,420 420,810 810,930 930,1080
you have recorded in your

2420
01:11:43,100 --> 01:11:43,960
0,450
log.|
|

2421
01:11:44,500 --> 01:11:45,700
0,600 600,720 720,810 810,900 900,1200
And you know to hide
你知道要隐藏大部分细节，

2422
01:11:45,700 --> 01:11:47,110
0,240 240,300 300,480 480,840 840,1410
most of those details away,|
|

2423
01:11:47,110 --> 01:11:49,180
0,180 180,660 660,900 900,1920 1920,2070
{you,know} basically have {} an
你知道，基本上在这个文件中有一个抽象的方式。

2424
01:11:49,210 --> 01:11:50,950
0,600 600,960 960,1080 1080,1320 1320,1740
abstracted way in this {}

2425
01:11:50,980 --> 01:11:52,990
0,300 300,660 660,1170 1440,1830 1830,2010
file {log.go -}| and they're
|它们基本上是用于附加的函数，

2426
01:11:52,990 --> 01:11:54,640
0,330 330,750 750,930 930,990 990,1650
basically functions for {appending -},|
|

2427
01:11:54,640 --> 01:11:55,090
0,60 60,150 150,240 240,390 390,450
you know to get the
你知道，要开始伐木，

2428
01:11:55,090 --> 01:11:56,380
0,270 270,390 390,450 450,1020 1020,1290
start of the logging,| to
|为了结束这一切，

2429
01:11:56,380 --> 01:11:57,340
0,180 180,360 360,630 630,720 720,960
cut the end,| to go
|为了加快开局，

2430
01:11:57,340 --> 01:11:58,990
0,150 150,330 330,390 390,990 1590,1650
cut up the start,| to
|把幻灯片取出来，得到最后一个索引，

2431
01:11:58,990 --> 01:11:59,920
0,150 150,210 210,630 630,810 810,930
get the slides out of

2432
01:11:59,920 --> 01:12:00,730
0,150 150,240 240,390 390,450 450,810
it to get the last

2433
01:12:00,730 --> 01:12:02,140
0,540 540,720 720,900 900,990 990,1410
index,| {you,know} get the particular
|你知道，获取特定条目或获取最后一个条目，

2434
01:12:02,140 --> 01:12:03,220
0,390 390,570 570,720 720,780 780,1080
entry or get the last

2435
01:12:03,220 --> 01:12:03,980
0,360
entry,|
|

2436
01:12:05,020 --> 01:12:06,250
0,390 390,660 660,990 990,1140 1140,1230
{} and that might be
这对2D来说可能是方便的，

2437
01:12:06,250 --> 01:12:08,320
0,540 540,870 870,1050 1050,1530 1530,2070
convenient for {2d -},| although
|尽管有很多其他的方法可以做到这一点。

2438
01:12:08,320 --> 01:12:09,160
0,180 180,420 420,600 600,780 780,840
there's many other ways of

2439
01:12:09,160 --> 01:12:10,220
0,210 210,450
doing it.|
|

2440
01:12:16,370 --> 01:12:17,780
0,270 270,450 450,960 960,1110 1110,1410
Okay, let me go back
好的，让我回顾一下人们问的一些问题。

2441
01:12:17,780 --> 01:12:18,800
0,90 90,150 150,390 390,630 630,1020
for a second to some

2442
01:12:18,800 --> 01:12:19,610
0,90 90,150 150,480 480,570 570,810
of the questions that people

2443
01:12:19,610 --> 01:12:20,600
0,510
ask.|
|

2444
01:12:20,750 --> 01:12:22,970
0,750 750,780 780,1290 1320,1890 1890,2220
So, {} I think hopefully
所以，我想我到现在为止已经回答了很多问题，

2445
01:12:22,970 --> 01:12:23,930
0,180 180,450 450,690 690,780 780,960
I've answered many of them

2446
01:12:23,930 --> 01:12:25,820
0,120 120,570 810,1260 1260,1410 1410,1890
by now,| but if not,
|但如果不是，让我快速回顾一下它们，

2447
01:12:26,270 --> 01:12:29,870
0,810 1650,2460 2460,2580 2580,2790 2790,3600
{} let me just review

2448
01:12:29,900 --> 01:12:32,660
0,510 510,900 900,1380 1890,2400 2400,2760
quickly go {through,them},| {} so
|所以我认为我们就选举超时问题进行了相当广泛的讨论，

2449
01:12:32,660 --> 01:12:33,470
0,90 90,270 270,330 330,600 600,810
I think we talked quite

2450
01:12:33,470 --> 01:12:34,730
0,450 450,630 630,720 720,1020 1020,1260
extensively about the election {timeout

2451
01:12:34,730 --> 01:12:36,110
0,360 600,840 840,990 990,1050 1050,1380
-},| {you,know} how to compute
|你知道如何计算它，

2452
01:12:36,110 --> 01:12:37,430
0,390 690,870 870,990 990,1230 1230,1320
it,| how to check with
|如何查看超时时间已过。

2453
01:12:37,430 --> 01:12:38,940
0,60 60,420 420,540 540,1170
the timeout is passed.|
|

2454
01:12:39,030 --> 01:12:40,520
0,930

2455
01:12:40,830 --> 01:12:43,360
0,840 1080,1950
{} There
有一个问题是，当收到领导的消息时，

2456
01:12:43,390 --> 01:12:45,940
0,660 990,1500 1500,1680 1680,2280 2280,2550
a question about always when

2457
01:12:45,940 --> 01:12:47,290
0,330 330,390 390,630 630,870 870,1350
receiving a message from leader,|
|

2458
01:12:47,320 --> 01:12:48,520
0,120 120,270 270,450 450,780 780,1200
you know I only reset
你知道，我只有在收到领导的信息后才会重置

2459
01:12:48,520 --> 01:12:49,810
0,270 270,420 420,960 960,1050 1050,1290
when I receive a message

2460
01:12:49,810 --> 01:12:50,860
0,150 150,240 240,540 540,720 720,1050
from the leader| that actually
|实际上，使用我现在的术语，

2461
01:12:50,860 --> 01:12:52,460
0,210 210,360 360,660 660,1080
using my current term,|
|

2462
01:12:53,010 --> 01:12:54,570
0,450 450,810 810,930 930,1230 1230,1560
{} {or,in} my new term,|
或者在我的新任期内，|

2463
01:12:54,570 --> 01:12:56,610
0,120 120,390 390,450 450,1020 1320,2040
{if,I} become a follower, {}|
如果我成为一个追随者，|

2464
01:12:56,820 --> 01:12:58,680
0,600 600,930 930,1260 1260,1440 1440,1860
not for somebody that's behind
对于一个在术语上落后的人来说就不是了。

2465
01:12:58,680 --> 01:13:00,200
0,150 150,420 420,480 480,1050
in terms of terms.|
|

2466
01:13:00,290 --> 01:13:01,790
0,690 690,990 990,1080 1080,1320 1320,1500
{} When to send {AppendEntries
何时发送AppendEntry，

2467
01:13:01,790 --> 01:13:03,350
0,720 810,1080 1080,1170 1170,1410 1410,1560
-},| {you,know} the different ways
|你知道做这件事的不同方式

2468
01:13:03,350 --> 01:13:04,340
0,90 90,300 300,630 630,900 900,990
of doing it,| you can
|你只有在心跳时才能做到，

2469
01:13:04,340 --> 01:13:05,000
0,150 150,240 240,510 510,570 570,660
do it only in the

2470
01:13:05,000 --> 01:13:05,840
0,210 210,540 540,630 630,720 720,840
{heartbeats -},| you know some
|你知道有些人这样做过，

2471
01:13:05,840 --> 01:13:07,850
0,210 210,300 300,450 450,810 1260,2010
people have done that, {}|
|

2472
01:13:07,850 --> 01:13:08,990
0,180 180,270 270,750 750,900 900,1140
you can do, so never
你可以这样做，所以永远不要在Start中发送任何东西，

2473
01:13:08,990 --> 01:13:10,430
0,240 240,540 540,660 660,1140 1170,1440
send anything in start,| that's
|就像我在代码中展示给我的一样，

2474
01:13:10,430 --> 01:13:11,960
0,270 270,450 450,750 750,1170 1170,1530
like I showed me I

2475
01:13:11,960 --> 01:13:13,730
0,270 270,330 330,390 390,930 1050,1770
showed in the code, {}|
|

2476
01:13:13,730 --> 01:13:14,840
0,150 150,510 510,720 720,960 960,1110
or sometimes you people do,
或者有时候你们这些人会，也会在回应中这样做，

2477
01:13:14,840 --> 01:13:15,710
0,330 330,480 480,570 570,780 780,870
also do it in the

2478
01:13:15,710 --> 01:13:17,900
0,840 900,1320 1320,1680 1680,1740 1740,2190
response,| {} if for example
|如果例如后面的追随者，

2479
01:13:17,900 --> 01:13:20,000
0,540 720,1380 1380,1860 1890,2010 2010,2100
the followers behind,| you know
|你知道，立即发送，剩余的条目，

2480
01:13:20,000 --> 01:13:22,490
0,210 210,780 780,1290 1320,2010 2010,2490
send immediately, the remaining {}

2481
01:13:22,520 --> 01:13:24,590
0,690 1020,1650 1650,1800 1800,1980 1980,2070
entries,| {} I don't do
|我不会那么做的，

2482
01:13:24,590 --> 01:13:25,940
0,360 360,840 840,840 840,1200 1200,1350
that,| {} I never said
|我从来没有说过任何回应，

2483
01:13:25,940 --> 01:13:27,080
0,270 270,360 360,930 930,1050 1050,1140
anything in response,| although I
|尽管我有一个实现可以做到这一点，

2484
01:13:27,080 --> 01:13:28,160
0,150 150,240 240,750 750,870 870,1080
had an implementation that does

2485
01:13:28,160 --> 01:13:29,930
0,360 720,1140 1140,1320 1320,1620 1620,1770
that,| {} the risk is
|风险在于我认为你[淹没了]后面实验中的追随者

2486
01:13:29,930 --> 01:13:30,950
0,210 210,330 330,510 510,660 660,1020
that I think you [swamp]

2487
01:13:30,950 --> 01:13:32,600
0,60 60,660 660,810 810,1110 1110,1650
the follower in later labs|
|

2488
01:13:32,600 --> 01:13:34,430
0,330 330,780 810,1350 1350,1590 1590,1830
or in {} {you,know} test
或者在2c和2d的测试中。

2489
01:13:34,430 --> 01:13:35,480
0,120 120,270 270,540 540,690 690,1050
for {2c -} {2d -}.|
|

2490
01:13:36,300 --> 01:13:37,760
0,840

2491
01:13:37,760 --> 01:13:40,040
0,210 210,750 810,1260 1320,2040 2070,2280
Do {in -} only some
只在一些人中做，我认为只是在一瞬间发送了我们的条目，

2492
01:13:40,040 --> 01:13:41,120
0,210 210,300 300,540 540,750 750,1080
people I think just sent

2493
01:13:41,120 --> 01:13:42,620
0,480 480,990 990,1380 1380,1470 1470,1500
our entries only in a

2494
01:13:42,620 --> 01:13:44,330
0,420 420,540 540,690 690,1020 1020,1710
heartbeat,| so that means every
|也就是说，你所知道的每一秒发送心跳信号的次数不能超过10次，

2495
01:13:44,720 --> 01:13:46,580
0,540 540,630 630,900 900,1710 1710,1860
{} you know you're not

2496
01:13:46,580 --> 01:13:47,510
0,270 270,330 330,540 540,600 600,930
allowed to send a heartbeat

2497
01:13:47,510 --> 01:13:48,290
0,180 180,300 300,510 510,750 750,780
more than ten times a

2498
01:13:48,290 --> 01:13:50,630
0,480 570,1080 1080,1380 1380,1800 1860,2340
second,| {} in the rules
|在实验室的游戏规则中，

2499
01:13:50,630 --> 01:13:51,650
0,90 90,180 180,750 750,930 930,1020
of the game for the

2500
01:13:51,650 --> 01:13:53,300
0,510 900,1140 1140,1290 1290,1530 1530,1650
labs,| so that means that
|这意味着您可以转到发送附加条目，

2501
01:13:53,300 --> 01:13:54,260
0,120 120,240 240,330 330,420 420,960
you go to {} sent

2502
01:13:54,260 --> 01:13:56,510
0,30 30,780 780,1290 1290,1680 1680,2250
{} append entries,| once every
|你知道每100毫秒一次，

2503
01:13:56,510 --> 01:13:58,010
0,150 150,450 450,540 540,870 870,1500
you know {100 -} milliseconds,|
|

2504
01:13:58,010 --> 01:13:58,640
0,180 180,360 360,390 390,540 540,630
or maybe a little bit
或者更快一点，

2505
01:13:58,640 --> 01:14:01,520
0,540 990,1710 1980,2370 2370,2640 2640,2880
faster,| {} that maybe run
|可能会在第三实验室遇到问题，

2506
01:14:01,520 --> 01:14:04,580
0,330 330,930 930,1230 1230,1770 1950,3060
into problems in lab {}

2507
01:14:04,610 --> 01:14:06,890
0,600 630,900 900,1320 1320,1470 1470,2280
3,| {} where we actually
|我们实际看到的是你是否取得了足够快的进展，

2508
01:14:07,040 --> 01:14:08,300
0,360 360,450 450,570 570,990 990,1260
see if you make fast

2509
01:14:08,300 --> 01:14:09,340
0,180 180,780
enough progress,|
|

2510
01:14:10,370 --> 01:14:12,170
0,660 900,1200 1200,1530 1530,1680 1680,1800
{} so basically I do
所以基本上我是在一瞬间完成的，

2511
01:14:12,170 --> 01:14:13,100
0,120 120,240 240,270 270,810 810,930
it in a heartbeat,| and
|我在起跑时就这样做了。

2512
01:14:13,100 --> 01:14:14,480
0,90 90,360 360,870
I {do,it,in} start.|
|

2513
01:14:15,820 --> 01:14:17,140
0,240 240,510 510,690 690,1140 1140,1320
We talked quite extensively about
我们非常广泛地讨论了调试，

2514
01:14:17,140 --> 01:14:18,320
0,600
debugging,|
|

2515
01:14:18,320 --> 01:14:19,460
0,330 330,540 540,570 570,810 810,1140
{} talked a bunch about
谈了很多关于代码组织的话题，

2516
01:14:19,460 --> 01:14:20,930
0,240 240,1110 1140,1230 1230,1410 1410,1470
code organization,| I think we
|我想我们谈了相当多关于并发性的问题。

2517
01:14:20,930 --> 01:14:21,980
0,210 210,420 420,450 450,600 600,1050
talked quite a bit about

2518
01:14:21,980 --> 01:14:23,340
0,120 120,810
{concurrency -}.|
|

2519
01:14:23,340 --> 01:14:25,080
0,660 1290,1500 1500,1530 1530,1680 1680,1740
{} There's a number of
有许多问题是关于为什么357台服务器，而不是更多，

2520
01:14:25,080 --> 01:14:26,460
0,270 270,570 570,870 870,1080 1080,1380
questions about why 3 5

2521
01:14:26,460 --> 01:14:28,710
0,270 270,810 810,960 960,1770 2010,2250
7 servers and {never,more},| I
|我想这就是原因，就是这样，

2522
01:14:28,710 --> 01:14:29,850
0,180 180,360 360,690 690,780 780,1140
think this is the reason,

2523
01:14:29,850 --> 01:14:30,750
0,240 240,330 330,420 420,660 660,900
that is the case,| because
|因为我认为它反映了筏子在实践中的实际使用情况

2524
01:14:30,750 --> 01:14:32,250
0,240 240,420 420,480 480,870 870,1500
I think it reflects how

2525
01:14:32,250 --> 01:14:33,180
0,360 360,450 450,660 660,870 870,930
raft is actually used in

2526
01:14:33,180 --> 01:14:34,740
0,600 600,840 870,1200 1200,1410 1410,1560
practice| and really that 3
|实际上，357是基于知道故障间隔时间的计算得出的，

2527
01:14:34,740 --> 01:14:36,510
0,270 270,570 570,990 1230,1680 1680,1770
5 7 is based on

2528
01:14:36,510 --> 01:14:37,860
0,60 60,600 600,720 720,1110 1110,1350
the computation of knowing what

2529
01:14:37,860 --> 01:14:39,510
0,120 120,540 540,900 900,1320 1320,1650
the meantime between failures are,|
|

2530
01:14:40,090 --> 01:14:41,410
0,240 240,480 480,570 570,930 930,1320
right, in the raft paper,|
对，在救生艇纸上，|

2531
01:14:41,410 --> 01:14:42,370
0,120 120,480 480,600 600,750 750,960
it's assumed that any time
据推测，任何时候失败都可能是艰难的几个月，

2532
01:14:42,370 --> 01:14:43,330
0,90 90,180 180,480 480,900 900,960
could be {} failures are

2533
01:14:43,330 --> 01:14:45,790
0,450 480,660 660,1380 1380,1950 2220,2460
rough a couple months,| you
|您使用3台服务器运行，

2534
01:14:45,790 --> 01:14:47,500
0,180 180,330 330,480 480,1200 1440,1710
run with 3 servers,| one
|一人倒下，

2535
01:14:47,500 --> 01:14:49,060
0,210 210,900 930,1320 1320,1440 1440,1560
goes down,| {} you know
|您知道您有足够的时间来实际重建第三台服务器

2536
01:14:49,060 --> 01:14:50,050
0,60 60,180 180,480 480,570 570,990
you have plenty of time

2537
01:14:50,050 --> 01:14:52,720
0,150 150,720 720,1080 1350,2310 2340,2670
to actually {} rebuilt {you,know}

2538
01:14:52,720 --> 01:14:53,860
0,240 240,810 810,960 960,1080 1080,1140
third server| and get it
|然后让它重新上线

2539
01:14:53,860 --> 01:14:54,970
0,240 240,720 720,810 810,960 960,1110
back online| and so get
|所以回到之前的三点，

2540
01:14:54,970 --> 01:14:56,740
0,270 270,600 600,990 990,1440 1440,1770
back to three before,| hopefully
|希望下一次失败发生，

2541
01:14:56,740 --> 01:14:58,300
0,90 90,300 300,630 630,1230
the next failure happens,|
|

2542
01:14:59,740 --> 01:15:01,180
0,330 330,900 930,1020 1020,1200 1200,1440
that's why you know this
这就是为什么您知道这是一小部分服务器。

2543
01:15:01,180 --> 01:15:02,590
0,240 270,630 630,810 810,900 900,1410
a small number of servers.|
|

2544
01:15:05,410 --> 01:15:06,920
0,960

2545
01:15:08,650 --> 01:15:09,280
0,120 120,300 300,330 330,480 480,630
We talked a little bit
我们讨论了一下什么时候应该坚持下去，

2546
01:15:09,280 --> 01:15:11,530
0,210 210,390 390,480 480,1140 1230,2250
about when to persist,| a
|一些很好的问题，

2547
01:15:12,040 --> 01:15:13,300
0,450 450,510 510,660 660,1020 1020,1260
number of good questions,| about
|例如，如果在写入稳定存储时崩溃会发生什么情况，

2548
01:15:13,300 --> 01:15:14,680
0,210 210,480 480,810 810,930 930,1380
like what happens if you

2549
01:15:14,680 --> 01:15:16,480
0,390 390,750 750,1230 1230,1680 1680,1800
{} crash while writing to

2550
01:15:16,480 --> 01:15:18,000
0,330 330,1050
stable storage,|
|

2551
01:15:18,000 --> 01:15:19,080
0,360 360,480 480,600 600,810 810,1080
and so you may write
所以你可能会写出部分状态，这将是一场灾难

2552
01:15:19,080 --> 01:15:20,880
0,360 360,780 870,1320 1320,1680 1680,1800
partial state and that would

2553
01:15:20,880 --> 01:15:22,500
0,120 120,180 180,930 1230,1350 1350,1620
be a disaster| and so
|所以人们通常会做的是

2554
01:15:22,500 --> 01:15:23,670
0,390 390,540 540,810 810,1050 1050,1170
typically what people do is|
|

2555
01:15:23,670 --> 01:15:24,660
0,330 330,420 420,600 600,840 840,990
actually to make sure that
实际上是为了确保当它们写入稳定存储时，

2556
01:15:24,660 --> 01:15:25,710
0,150 150,330 330,600 600,780 780,1050
when they write to stable

2557
01:15:25,710 --> 01:15:26,910
0,300 300,510 510,660 660,810 810,1200
storage,| that is an atomic
|这是一个原子操作，

2558
01:15:26,910 --> 01:15:27,980
0,510
operation,|
|

2559
01:15:28,260 --> 01:15:29,400
0,480 480,540 540,630 630,780 780,1140
{} you know this does
你知道这确实会在测试仪上显示出来，

2560
01:15:29,400 --> 01:15:30,240
0,180 180,270 270,360 360,450 450,840
show up in the tester,|
|

2561
01:15:30,240 --> 01:15:32,250
0,240 240,300 300,750 750,1140 1140,2010
because the tester basically simulates
因为测试人员基本上模拟的是持久性存储

2562
01:15:33,420 --> 01:15:34,770
0,390 390,720 720,1080 1080,1170 1170,1350
{} persistent storage| and then
|然后基本上原子地更新永久存储，

2563
01:15:34,770 --> 01:15:37,200
0,360 360,840 840,1710 1740,2070 2070,2430
basically updates the persistent storage

2564
01:15:37,200 --> 01:15:39,240
0,630 630,930 1200,1530 1530,1620 1620,2040
{atomically -},| within a real
|在一个实际有磁盘的真实系统中，

2565
01:15:39,240 --> 01:15:40,260
0,330 330,480 480,750 750,960 960,1020
system that actually has a

2566
01:15:40,260 --> 01:15:42,450
0,540 720,1230 1230,1410 1410,1920 1920,2190
disk,| {} you might play
|您可能会玩一个把戏，就像生成库所做的那样，自动重命名，

2567
01:15:42,450 --> 01:15:44,190
0,120 120,510 540,1170 1200,1380 1380,1740
a trick, like that produced

2568
01:15:44,190 --> 01:15:46,350
0,360 360,600 600,1140 1170,1710 1710,2160
library did where atomically rename,|
|

2569
01:15:46,350 --> 01:15:47,100
0,120 120,300 300,510 510,600 600,750
you first write it in
您首先将其写入临时文件中，

2570
01:15:47,100 --> 01:15:48,480
0,360 360,810 810,1020 1020,1290 1290,1380
temporary file,| until everything is
|直到一切都写好，然后原子重命名，

2571
01:15:48,480 --> 01:15:50,010
0,360 360,450 450,630 630,1140 1140,1530
written and then atomic rename,|
|

2572
01:15:50,440 --> 01:15:51,910
0,390 390,810 810,1110 1110,1200 1200,1470
{} or use a lot
或者使用大量写入作为日志记录系统，

2573
01:15:51,910 --> 01:15:53,740
0,210 210,390 390,810 810,1230
write as logging system,|
|

2574
01:15:53,940 --> 01:15:55,530
0,600 600,810 810,1260 1260,1440 1440,1590
{} but yeah you have
但你必须这样做，这是一场灾难，

2575
01:15:55,530 --> 01:15:57,360
0,360 360,750 840,1230 1230,1290 1290,1830
to, that be a disaster,|
|

2576
01:15:57,360 --> 01:16:01,740
0,480 480,3750 3750,4110 4110,4320 4320,4380
if {the,crash} persistent state to
如果到稳定存储的崩溃持久状态变得不一致。

2577
01:16:01,740 --> 01:16:03,920
0,270 270,600 600,900 900,1560
stable storage becomes inconsistent.|
|

2578
01:16:05,120 --> 01:16:06,560
0,180 180,300 300,540 540,930 930,1440
Okay, let me stop here,|
好了，让我停在这里，|

2579
01:16:06,560 --> 01:16:07,820
0,180 180,570 570,810 810,1170 1170,1260
so like there's maybe a
所以可能会有更多的时间来提问

2580
01:16:07,820 --> 01:16:08,570
0,150 150,240 240,390 390,630 630,750
little bit more time to

2581
01:16:08,570 --> 01:16:09,650
0,180 180,600 600,720 720,780 780,1080
ask questions| and of course
|当然，我会一如既往地留在你身边，

2582
01:16:09,650 --> 01:16:11,690
0,210 210,390 390,1410 1410,1560 1560,2040
I'll stay around as always,|
|

2583
01:16:11,690 --> 01:16:13,040
0,240 630,780 780,930 930,1170 1170,1350
and I can answer more
我可以回答更多的问题，

2584
01:16:13,040 --> 01:16:14,780
0,660 960,1200 1200,1350 1350,1500 1500,1740
questions,| I see there's also
|我看到在聊天中也有大量的讨论，

2585
01:16:14,780 --> 01:16:16,880
0,180 180,480 480,720 720,1410 1560,2100
a ton of {} discussion

2586
01:16:16,880 --> 01:16:18,740
0,120 120,690 690,810 810,1170 1290,1860
{in,the} chat,| I'm not I'm
|我不是我很遗憾不能，可能我没有跟上所有的进度。

2587
01:16:18,770 --> 01:16:20,120
0,450 450,600 600,780 780,1170 1170,1350
unfortunately not able probably I

2588
01:16:20,120 --> 01:16:21,260
0,450 450,660 660,840 840,990 990,1140
didn't keep up with all

2589
01:16:21,260 --> 01:16:23,140
0,90 90,330 810,1440
of it. {}|
|

2590
01:16:27,030 --> 01:16:28,580
0,600 600,960
Okay good.|
好的很好。|

2591
01:16:31,650 --> 01:16:32,640
0,240 240,390 390,720 720,810 810,990
Okay, so yeah any more
好的，还有什么问题吗？

2592
01:16:32,640 --> 01:16:33,700
0,540
questions?|
|

2593
01:16:35,370 --> 01:16:36,360
0,270 270,450 450,630 630,660 660,990
{} I have a question
我有一个关于原木的问题，

2594
01:16:36,360 --> 01:16:40,110
0,300 300,450 450,1380 2580,3180 3360,3750
about the log,| your your
|你的日志代码，

2595
01:16:40,110 --> 01:16:41,840
0,300 300,450 450,630 630,1350
code for the log,|
|

2596
01:16:42,160 --> 01:16:45,190
0,390 390,1380 1410,2250 2250,2430 2430,3030
the index 0, it is,
索引0，我猜是在底层数组中，

2597
01:16:46,060 --> 01:16:47,590
0,540 870,1020 1020,1230 1230,1380 1380,1530
{} I guess in the

2598
01:16:47,590 --> 01:16:49,180
0,1020
underlying

2599
01:16:49,270 --> 01:16:52,030
0,660 660,1110 1110,1650 2040,2580 2580,2760
array,| what the start of
|日志的开头是什么，

2600
01:16:52,030 --> 01:16:54,460
0,120 120,570 570,1230 1710,1950 1950,2430
the log is,| {is,that} right?|
|是那么回事吗？|

2601
01:16:54,640 --> 01:16:55,810
0,180 180,360 360,480 480,870 870,1170
So this is basically for
这基本上是实验2d的内容，

2602
01:16:55,810 --> 01:16:57,180
0,300 300,420 420,840
lab {2d -},|
|

2603
01:16:57,240 --> 01:17:00,510
0,390 390,1260 1290,1950 1950,2340 2340,3270
not for {no,in} lab {a,b,and,c}|
在实验室a、b和c不是为了不|

2604
01:17:00,510 --> 01:17:02,010
0,300 300,570 570,720 720,840 840,1500
index 0 would be always
索引0将始终为0，

2605
01:17:02,010 --> 01:17:03,180
0,420
0,|
|

2606
01:17:04,240 --> 01:17:05,200
0,120 120,390 390,570 570,780 780,960
in lab {2d -} where
在您拍摄快照的实验2d中，

2607
01:17:05,200 --> 01:17:06,550
0,120 120,240 240,1110 1110,1200 1200,1350
you take snapshots,| you know
|您知道没有快照索引号的索引0，

2608
01:17:06,550 --> 01:17:07,900
0,270 270,600 600,930 930,1080 1080,1350
the index 0 with no

2609
01:17:07,900 --> 01:17:09,790
0,450 450,690 690,780 780,870 870,1890
index number of the snapshot,|
|

2610
01:17:12,070 --> 01:17:13,150
0,330 330,480 480,630 630,690 690,1080
because you're gonna be cut
因为你会被砍倒在木头上，

2611
01:17:13,180 --> 01:17:14,290
0,90 90,420 420,540 540,630 630,1110
the beginning of the log,|
|

2612
01:17:15,480 --> 01:17:16,200
0,240 240,390 390,480 480,570 570,720
okay, so if you take
好的，如果你把快照索引取为10，

2613
01:17:16,200 --> 01:17:18,240
0,30 30,510 510,1290 1290,1800 1800,2040
a snapshot index 10,| you're
|你要从0降到9

2614
01:17:18,240 --> 01:17:19,830
0,180 180,450 450,1080 1080,1200 1200,1590
gonna cut 0 to {9

2615
01:17:19,830 --> 01:17:21,240
0,300 480,840 840,1080 1080,1320 1320,1410
-}| and index 0 will
|而指数0将是10。

2616
01:17:21,240 --> 01:17:22,500
0,120 120,660
be 10.|
|

2617
01:17:23,250 --> 01:17:24,540
0,330 330,420 420,690 690,930 1080,1290
Oh, so this is this
哦，这就是快照的结尾，

2618
01:17:24,540 --> 01:17:25,110
0,90 90,270 270,390 390,480 480,570
is the end of the

2619
01:17:25,110 --> 01:17:27,000
0,540 540,630 630,930 960,1350
snapshot,| I see, okay.|
|我明白了，好的。|

2620
01:17:30,540 --> 01:17:32,640
0,150 150,510 510,990 990,1560 1560,2100
So basically everything through {}
所以基本上从到索引0的所有内容

2621
01:17:32,670 --> 01:17:34,020
0,240 240,600 600,930 930,1260 1260,1350
to into index 0| is
|实际上包含在快照中，

2622
01:17:34,020 --> 01:17:35,400
0,270 270,720 720,780 780,840 840,1380
actually included in the snapshot,|
|

2623
01:17:35,400 --> 01:17:36,300
0,120 120,330 330,510 510,810 810,900
so there's no reason to
因此，没有理由再在日志中维护该状态。

2624
01:17:36,300 --> 01:17:38,280
0,1020 1020,1200 1200,1470 1470,1860 1860,1980
maintain that state anymore in

2625
01:17:38,280 --> 01:17:39,320
0,90 90,540
the log.|
|

2626
01:17:45,860 --> 01:17:47,620
0,210 210,360 360,930
Any other questions?|
还有其他问题吗？|

2627
01:17:51,320 --> 01:17:52,940
0,90 90,300 300,420 420,570 570,1620
I hope this was useful,|
我希望这是有用的，|

2628
01:17:52,970 --> 01:17:54,680
0,570 570,900 900,1050 1050,1350 1350,1710
particularly still in time for
尤其是你知道的2c 2d，

2629
01:17:54,680 --> 01:17:55,740
0,90 90,420
you know

2630
01:17:55,740 --> 01:17:58,050
0,150 150,390 390,600 600,1050 1380,2310
{2c -} {2d -}, {}|
|

2631
01:17:58,170 --> 01:17:59,850
0,780 810,960 960,1110 1110,1440 1440,1680
maybe there's some ideas,| here
也许会有一些想法，|在这里，它可能会对您实现这些实验很有用。

2632
01:17:59,850 --> 01:18:01,050
0,180 180,540 540,630 630,990 990,1200
that might be useful for

2633
01:18:01,050 --> 01:18:02,910
0,180 180,690 720,1170 1170,1350 1350,1860
you in implementing those labs.|
|

2634
01:18:05,610 --> 01:18:08,040
0,300 300,450 450,990 1290,1860 1860,2430
I have a question about
我有个问题想问，

2635
01:18:08,130 --> 01:18:09,660
0,960
like,|
|

2636
01:18:10,070 --> 01:18:11,450
0,210 210,420 420,690 720,1260 1260,1380
what kind of ranges for
人们使用了什么样的选举超时范围，

2637
01:18:11,450 --> 01:18:13,130
0,330 330,600 600,840 840,1140 1140,1680
election {timeouts -} people used,|
|

2638
01:18:13,190 --> 01:18:14,400
0,660

2639
01:18:15,380 --> 01:18:16,550
0,150 150,360 360,450 450,720 720,1170
I think I used like
我想我用了你知道的心跳100毫秒的下限

2640
01:18:16,940 --> 01:18:18,200
0,120 120,270 270,840 840,960 960,1260
you know the the lower

2641
01:18:18,200 --> 01:18:19,670
0,210 240,570 570,780 780,1020 1020,1470
the limit of {100 -}

2642
01:18:19,700 --> 01:18:22,220
0,750 750,990 990,1530 1620,2370 2370,2520
milliseconds for the heartbeats| and
|然后超时时间在300到700毫秒之间。

2643
01:18:22,220 --> 01:18:23,180
0,420
then

2644
01:18:23,330 --> 01:18:24,560
0,300 300,480 480,750 750,1020 1020,1230
{timeout -} anywhere between like

2645
01:18:24,560 --> 01:18:25,850
0,270 270,630 630,780 780,1050 1050,1290
{300 -} and {700 -}

2646
01:18:25,850 --> 01:18:28,070
0,810 1080,1350 1350,2010 2010,2130 2130,2220
milliseconds.| Yeah.| I don't know
|嗯。|我不知道这是不是。

2647
01:18:28,070 --> 01:18:30,260
0,120 120,360 360,720 1200,1860 1860,2190
if that's.| {} Totally reasonable
|完全合理我通常正确地得到一个更大的数字，

2648
01:18:30,260 --> 01:18:31,070
0,120 120,390 390,480 480,570 570,810
I usually have a bigger

2649
01:18:31,070 --> 01:18:32,570
0,330 330,660 660,1020 1020,1380 1380,1500
number correctly,| the [range] we
|我们给你的范围是，

2650
01:18:32,570 --> 01:18:33,440
0,300 300,510 510,600 600,780 780,870
gave you is that,| you
|你知道你应该能够在5秒内选出一位领导人，

2651
01:18:33,440 --> 01:18:34,130
0,150 150,300 300,420 420,480 480,690
know you should be able

2652
01:18:34,130 --> 01:18:36,140
0,450 780,1410 1410,1470 1470,1770 1770,2010
to elect a leader in

2653
01:18:36,140 --> 01:18:37,560
0,360 360,1050
5 seconds,|
|

2654
01:18:37,620 --> 01:18:39,330
0,750 750,1080 1080,1260 1260,1440 1440,1710
and that means you should
这意味着你应该指望

2655
01:18:39,330 --> 01:18:40,560
0,300 300,660 660,840 840,1050 1050,1230
count on| and you may
|而且你可能要参加几次选举，

2656
01:18:40,560 --> 01:18:41,340
0,150 150,240 240,420 420,480 480,780
have to run the election

2657
01:18:41,340 --> 01:18:42,680
0,60 60,240 240,840
a couple times,|
|

2658
01:18:42,740 --> 01:18:44,090
0,660 660,840 840,1170 1170,1290 1290,1350
{} and so you know
所以你知道你选择的数字似乎是合理的。

2659
01:18:44,090 --> 01:18:44,960
0,90 90,330 330,450 450,660 660,870
the numbers your pick seems

2660
01:18:44,960 --> 01:18:46,080
0,540
reasonable.|
|

2661
01:18:51,320 --> 01:18:53,030
0,930 990,1200 1200,1440 1440,1560 1560,1710
Any, any people that want
任何，任何想要分享他们有过的特别恼人的错误的人，

2662
01:18:53,030 --> 01:18:54,800
0,60 60,390 390,480 480,1230 1320,1770
to share a particular annoying

2663
01:18:54,800 --> 01:18:56,180
0,270 270,420 420,600 600,960 990,1380
bug that they had,| actually
|实际上，人们在问的一些问题

2664
01:18:56,180 --> 01:18:57,530
0,90 90,330 330,390 390,870 870,1350
a number of questions where

2665
01:18:57,560 --> 01:18:58,580
0,360 360,420 420,660 660,930 930,1020
people are asking| what is
|人们见过的最讨厌的虫子是什么？

2666
01:18:58,580 --> 01:18:59,690
0,90 90,360 360,720 720,990 990,1110
the most nasty bug that

2667
01:18:59,690 --> 01:19:00,900
0,210 210,300 300,690
people have seen.|
|

2668
01:19:11,180 --> 01:19:13,190
0,180 180,630 630,1230 1320,1620 1620,2010
I have a pretty annoying
我的实现中有一个非常恼人的错误，

2669
01:19:13,190 --> 01:19:16,670
0,330 330,510 510,690 690,1530 2790,3480
bug in my implementation,| I
|我没有采纳我自己的建议

2670
01:19:16,790 --> 01:19:18,830
0,780 780,1110 1110,1320 1320,1470 1470,2040
didn't take my own advice|
|

2671
01:19:18,830 --> 01:19:20,660
0,120 120,330 330,450 450,990 1260,1830
and sort of did like
有点像是奇怪地植入了计时器

2672
01:19:20,780 --> 01:19:22,820
0,840 840,1410 1410,1500 1500,1560 1560,2040
weird implantation of a timer|
|

2673
01:19:22,820 --> 01:19:24,710
0,360 360,600 600,960 960,1440 1470,1890
where like spawn off {}
在那里，像是产生新的线程来睡觉

2674
01:19:25,290 --> 01:19:26,520
0,240 240,630 630,780 780,1140 1140,1230
new thread to sleep for

2675
01:19:26,520 --> 01:19:27,840
0,450 450,600 600,780 780,1080 1080,1320
something| and then send a
|然后在结尾发回一条消息，

2676
01:19:27,840 --> 01:19:29,100
0,330 330,690 690,780 780,990 990,1260
message back at the end,|
|

2677
01:19:29,190 --> 01:19:30,840
0,240 240,630 630,930 930,1320 1320,1650
it was not pretty great
这并不是一个很好的设计，

2678
01:19:30,840 --> 01:19:32,250
0,570 600,960 960,1020 1020,1290 1290,1410
design,| and it had two
|它有两个不同的定时器，

2679
01:19:32,250 --> 01:19:34,680
0,240 240,600 600,840 840,1290 1620,2430
different timers,| one for heartbeats
|一个是心跳，一个是选举计时器，

2680
01:19:34,680 --> 01:19:36,240
0,90 90,300 300,450 450,960 960,1560
and one for election timers,|
|

2681
01:19:36,300 --> 01:19:37,980
0,540 540,660 660,900 900,1470 1470,1680
and I was forgetting to
我忘了停其中一个计时器，

2682
01:19:37,980 --> 01:19:40,290
0,1050 1080,1830 1860,2070 2070,2130 2130,2310
stop the one of those

2683
01:19:40,290 --> 01:19:41,760
0,480 480,810 810,900 900,1260 1260,1470
timers,| when the server {shutdown
|当服务器关闭时，

2684
01:19:41,760 --> 01:19:43,020
0,390 420,840 840,900 900,1080 1080,1260
-},| one of them was
|其中一个很好，另一个不太好

2685
01:19:43,020 --> 01:19:43,770
0,300 300,390 390,540 540,600 600,750
fine and one of them

2686
01:19:43,770 --> 01:19:45,060
0,480 600,930 930,1020 1020,1200 1200,1290
wasn't| and it meant I
|这意味着在长距离跑步测试过程中，我会慢慢学会一些围棋套路

2687
01:19:45,060 --> 01:19:47,010
0,180 180,720 720,1530 1560,1800 1800,1950
would slowly gain like a

2688
01:19:47,010 --> 01:19:48,450
0,330 330,450 450,630 630,1140 1140,1440
number of Go routines over

2689
01:19:48,450 --> 01:19:49,230
0,90 90,420 420,510 510,540 540,780
the course of a long

2690
01:19:49,230 --> 01:19:51,240
0,270 270,870 1110,1560 1560,1800 1800,2010
running test| until it ran
|直到它用完了

2691
01:19:51,240 --> 01:19:52,500
0,300 300,540 540,600 600,870 870,1260
out| and the race detector
|比赛探测器把所有东西都撞毁了

2692
01:19:52,500 --> 01:19:55,110
0,420 420,870 2160,2400 2400,2460 2460,2610
crashed everything| and it was
|这令人难以置信地尴尬，

2693
01:19:55,110 --> 01:19:57,360
0,540 540,1200 1200,1800 1830,2070 2070,2250
incredibly embarrassing,| because it was
|因为真的是我忘了停止计时器，

2694
01:19:57,360 --> 01:19:58,830
0,420 420,780 780,870 870,930 930,1470
literally just that I forgot

2695
01:19:59,100 --> 01:20:00,580
0,330 330,390 390,930
stop the timer,|
|

2696
01:20:01,590 --> 01:20:02,700
0,480
so,
所以，但是它花了很长的时间来调试，

2697
01:20:03,230 --> 01:20:03,800
0,150 150,210 210,360 360,390 390,570
but it took a very

2698
01:20:03,800 --> 01:20:05,000
0,240 240,480 480,540 540,960 960,1200
long time to debug,| because
|因为我想不通，

2699
01:20:05,000 --> 01:20:06,590
0,120 120,570 570,870 870,1260 1350,1590
I couldn't figure out,| I
|我以为实验室的RPC代码中有错误

2700
01:20:06,590 --> 01:20:07,400
0,330 330,420 420,540 540,600 600,810
thought there was a bug

2701
01:20:07,400 --> 01:20:08,900
0,150 150,420 480,930 930,1080 1080,1500
in the lab {RPC -}

2702
01:20:08,900 --> 01:20:10,670
0,480 480,750 750,960 960,1140 1140,1770
code| and no there wasn't,|
|不，没有，|

2703
01:20:10,790 --> 01:20:13,010
0,420 450,1050 1200,1770 1770,1920 1920,2220
no there's probably no bugs
不，实验室RPC代码中可能没有错误，

2704
01:20:13,010 --> 01:20:14,210
0,120 120,450 450,870 870,1110 1110,1200
in lab RPC code,| it
|只是我曲解了数据。

2705
01:20:14,210 --> 01:20:16,010
0,210 210,600 600,870 870,1440 1440,1800
was just me misinterpreting data.|
|

2706
01:20:18,340 --> 01:20:20,460
0,1740
Yep.|
是啊。|

2707
01:20:20,580 --> 01:20:22,290
0,300 300,630 630,960 960,1440 1440,1710
I'm talking about election {timeouts
我说的是选举暂停，

2708
01:20:22,290 --> 01:20:24,360
0,300 300,480 480,600 600,1530 1530,2070
-},| I have a issue
|我对唯一的电话在哪里有疑问

2709
01:20:24,360 --> 01:20:26,200
0,690 720,1200
on {}

2710
01:20:26,350 --> 01:20:28,180
0,300 300,720 750,1350 1350,1710 1710,1830
where the one call is|
|

2711
01:20:28,180 --> 01:20:29,950
0,330 330,510 510,1020 1020,1230 1230,1770
called from {config.go - -}|
从config.go调用|

2712
01:20:30,340 --> 01:20:32,500
0,480 480,840 840,1050 1050,1770 1770,2160
or that were occasionally failed
或者偶尔不能达成协议，

2713
01:20:32,500 --> 01:20:35,050
0,120 120,360 360,1080 1590,2100 2100,2550
to reach agreement,| I realized
|我意识到，如果我增加我的选举超时，使随机间隔

2714
01:20:35,050 --> 01:20:36,280
0,240 240,390 390,510 510,1110 1110,1230
that, if I increase my

2715
01:20:36,280 --> 01:20:38,530
0,360 360,660 660,1020 1020,1470 1860,2250
election {timeouts -} to {}

2716
01:20:38,530 --> 01:20:40,000
0,450 450,570 570,990 990,1380 1380,1470
have the random interval| go
|上升到1500毫秒，

2717
01:20:40,000 --> 01:20:42,220
0,180 180,810 840,1230 1230,1590 1590,2220
up to {1500 -} milliseconds,|
|

2718
01:20:42,760 --> 01:20:45,640
0,420 450,930 930,1740 1740,2130 2190,2880
like greatly decreases the frequency
LIKE大大降低了这种情况发生的频率，

2719
01:20:45,640 --> 01:20:46,930
0,60 60,300 300,450 450,960 960,1290
at which this happens,| but
|但我在想，对于随机间隔，我是否应该比这个更高，

2720
01:20:47,080 --> 01:20:47,920
0,210 210,480 480,570 570,690 690,840
I'm wondering if I should

2721
01:20:47,920 --> 01:20:49,450
0,150 150,660 840,1200 1200,1350 1350,1530
go even higher than that

2722
01:20:49,450 --> 01:20:50,710
0,120 120,180 180,480 480,930 930,1260
for the random interval,| that
|这表明我有另一种缺陷。

2723
01:20:50,740 --> 01:20:53,230
0,420 420,930 990,1980 1980,2130 2130,2490
this is indicative of another

2724
01:20:53,230 --> 01:20:54,940
0,240 240,360 360,810 1110,1530 1530,1710
bug I have.| {I,think,it's,indicative,another,bug} {you,have},|
|我认为这表明你又感染了一种病毒，|

2725
01:20:57,200 --> 01:20:58,550
0,270 270,510 510,840 840,960 960,1350
my first guess I got,|
我的第一个猜测是，|

2726
01:20:58,580 --> 01:20:59,480
0,60 60,450 450,630 630,840 840,900
to know of course I
当然，我一点也不确定，

2727
01:20:59,480 --> 01:21:00,410
0,180 180,420 420,540 540,840 840,930
don't know for sure at

2728
01:21:00,410 --> 01:21:01,790
0,420 510,780 780,1110 1110,1200 1200,1380
all,| {} but you don't
|但你不一定要能和这么长时间的人一起跑才能通过。

2729
01:21:01,790 --> 01:21:02,450
0,150 150,240 240,390 390,570 570,660
have to be able to

2730
01:21:02,450 --> 01:21:03,140
0,180 180,270 270,480 480,630 630,690
run with that kind of

2731
01:21:03,140 --> 01:21:05,000
0,240 240,630
long timers

2732
01:21:05,920 --> 01:21:07,100
0,150 150,720
to pass.|
|

2733
01:21:08,540 --> 01:21:09,920
0,330 360,900 900,960 960,1050 1050,1380
Yeah, most of the time
是的，大多数时候，当人们调整他们的超时时，

2734
01:21:09,920 --> 01:21:11,960
0,600 930,1350 1350,1500 1500,1890 1890,2040
when people are tweaking their

2735
01:21:11,960 --> 01:21:13,760
0,270 270,870 870,1140 1140,1440 1440,1800
{timeouts -},| not actually fixing
|而不是真正修复它们的漏洞，

2736
01:21:13,760 --> 01:21:15,500
0,120 120,450 450,600 600,990 1020,1740
their bugs,| it's just changing
|它只是改变了他们出现的频率。

2737
01:21:15,500 --> 01:21:16,850
0,240 240,660 660,840 840,1050 1050,1350
how often they show up.|
|

2738
01:21:19,300 --> 01:21:21,160
0,450 480,930
Okay, thanks.|
好的，谢谢。|

2739
01:21:22,900 --> 01:21:23,830
0,330 330,540 540,630 630,840 840,930
{} Here's a bug in
这是渠道中的一个窃听器，

2740
01:21:23,830 --> 01:21:25,570
0,120 120,690 750,1170 1170,1290 1290,1740
the channel,| when the channel
|当这个频道是我的窃听器时，

2741
01:21:25,570 --> 01:21:26,350
0,150 150,300 300,510 510,510 510,780
was a bug I had,|
|

2742
01:21:26,350 --> 01:21:27,610
0,150 150,270 270,570 570,660 660,1260
was I forgot to initialize
我忘了初始化频道，

2743
01:21:27,610 --> 01:21:29,160
0,480
channel,|
|

2744
01:21:29,780 --> 01:21:30,800
0,180 180,390 390,780 780,900 900,1020
{} how did how did
这是如何表现为一个错误的。

2745
01:21:30,800 --> 01:21:31,940
0,150 150,540 540,930 930,1050 1050,1140
that manifest itself as a

2746
01:21:31,940 --> 01:21:33,040
0,510
bug.|
|

2747
01:21:34,110 --> 01:21:36,660
0,420 420,1020 1050,2280 2280,2460 2460,2550
Oh, like basically when I
哦，就像我寄东西的时候，

2748
01:21:36,660 --> 01:21:38,250
0,150 150,540 540,1050 1050,1170 1170,1590
was sending something,| it wouldn't
|它将无法接收到它，

2749
01:21:38,970 --> 01:21:40,740
0,450 450,600 600,960 960,1170
able to receive it,|
|

2750
01:21:41,330 --> 01:21:42,620
0,150 150,210 210,720 720,1110 1110,1290
and I wondered what was
我想知道发生了什么事，

2751
01:21:42,620 --> 01:21:43,880
0,270 270,540 720,870 870,1110 1110,1260
going on,| it turns out
|事实证明，只是我从来没有初始化它，

2752
01:21:43,880 --> 01:21:44,540
0,60 60,210 210,450 450,600 600,660
it was just that I

2753
01:21:44,540 --> 01:21:46,610
0,360 360,600 600,1320 1320,1470 1770,2070
didn't ever initialize it,| feels
|感觉就像不是零频道。

2754
01:21:46,610 --> 01:21:48,320
0,180 180,510 630,1050 1050,1320 1320,1710
like the not nil channel.|
|

2755
01:21:53,010 --> 01:21:53,880
0,210 210,270 270,480 480,720 720,870
Because I don't really know
因为我真的不知道新频道的语义覆盖了什么，

2756
01:21:53,880 --> 01:21:55,380
0,210 210,300 300,780 780,1020 1020,1500
what the semantics are overwriting

2757
01:21:55,380 --> 01:21:56,610
0,120 120,420 420,870 990,1230 1230,1230
to new channel,| {} I
|我想不起来了，

2758
01:21:56,610 --> 01:21:57,720
0,390 390,690 690,750 750,990 990,1110
can't recall it top my

2759
01:21:57,720 --> 01:21:58,620
0,360 360,390 390,570 570,660 660,900
head,| I know the rule
|我知道这方面的规则，

2760
01:21:58,620 --> 01:21:59,370
0,180 180,390 390,480 480,600 600,750
for that,| but I don't
|但我不记得规则是什么了。

2761
01:21:59,370 --> 01:22:00,420
0,300 300,450 450,510 510,750 750,1050
remember what the rule is.|
|

2762
01:22:01,640 --> 01:22:02,660
0,90 90,210 210,390 390,510 510,1020
Do you have a comment
你对前面这一点有什么看法，

2763
01:22:02,660 --> 01:22:05,160
0,300 300,570 570,1020 1020,1860
on the previous point,|
|

2764
01:22:05,350 --> 01:22:07,450
0,660 690,1080 1110,1590 1590,1710 1710,2100
{} regard regarding the election
考虑到选举超时将他们设得很高，

2765
01:22:07,450 --> 01:22:09,280
0,480 570,900 900,1050 1050,1440 1500,1830
timeout setting them high,| should
|我们是不是应该试着瞄准，从而把他们放低一点，

2766
01:22:09,280 --> 01:22:11,470
0,420 540,1080 1080,1260 1260,1680 1710,2190
we try and aim, thus

2767
01:22:11,470 --> 01:22:13,180
0,210 210,570 570,1080 1260,1440 1440,1710
to set them a little

2768
01:22:13,180 --> 01:22:15,040
0,240 240,990 1140,1500 1500,1710 1710,1860
bit low,| so that if
|因此，如果有任何错误，我们可以揭露他们。

2769
01:22:15,040 --> 01:22:16,210
0,180 180,420 420,660 660,1050 1050,1170
there are any bugs, we

2770
01:22:16,210 --> 01:22:17,720
0,150 150,690 690,1050
can expose them.|
|

2771
01:22:18,270 --> 01:22:19,530
0,240 240,540 540,1020 1020,1080 1080,1260
{} Yeah, not a bad
是啊，这计划不错，

2772
01:22:19,530 --> 01:22:21,000
0,120 120,480 780,1230 1230,1230 1230,1470
{} plan,| {} I think
|我觉得喜欢总是好的，

2773
01:22:21,000 --> 01:22:22,020
0,120 120,330 330,540 540,780 780,1020
it's always good to like,|
|

2774
01:22:22,020 --> 01:22:23,340
0,60 60,450 480,840 840,900 900,1320
you know push the boundaries|
你知道的，挑战极限|

2775
01:22:23,340 --> 01:22:24,030
0,120 120,360 360,450 450,570 570,690
and see if you have
看看你在不工作的情况下有没有其他错误。

2776
01:22:24,030 --> 01:22:25,260
0,210 210,390 390,630 630,900 900,1230
any other bug without working.|
|

2777
01:22:28,170 --> 01:22:29,130
0,150 150,240 240,630 630,840 840,960
So the boundary should be
因此，边界应该是与论文建议的[类似]的东西。

2778
01:22:29,130 --> 01:22:30,690
0,510 510,990 990,1140 1140,1440 1440,1560
something [akin] to what the

2779
01:22:30,690 --> 01:22:33,900
0,450 450,1500 1530,2010 2010,2640 2670,3210
paper suggests.| {A,little,bit} higher, {}|
|再高一点，|

2780
01:22:33,900 --> 01:22:35,310
0,300 300,780 810,1110 1110,1260 1260,1410
because the way we set
因为我们设置测试的方式略有不同，

2781
01:22:35,310 --> 01:22:36,270
0,90 90,180 180,510 510,630 630,960
up the tests are slightly

2782
01:22:36,270 --> 01:22:38,100
0,510 570,1350 1350,1530 1530,1710 1710,1830
different,| {} you know the
|你知道每一个交叉口都有关于这个的讨论，对吧。

2783
01:22:38,100 --> 01:22:39,900
0,570 570,750 750,990 990,1560 1590,1800
intersection of each {} has

2784
01:22:39,900 --> 01:22:41,100
0,60 60,480 480,600 600,840 840,1200
a discussion on this, right.|
|

2785
01:22:42,360 --> 01:22:45,240
0,420 450,1020 1020,1470 1920,2490 2490,2880
And actually the raft paper
实际上，木筏纸可以像指南一样通过

2786
01:22:45,240 --> 01:22:46,560
0,270 270,540 540,690 690,1230 1230,1320
can pass like guidelines| and
|即使它们有特定的价值，

2787
01:22:46,560 --> 01:22:47,520
0,180 180,300 300,450 450,750 750,960
even if they have a

2788
01:22:47,520 --> 01:22:49,530
0,540 540,990 990,1320 1500,1920 1920,2010
specific value,| they set a
|他们根据指导方针设定了一个值

2789
01:22:49,530 --> 01:22:50,970
0,600 600,690 690,810 810,1290 1290,1440
{value,based} on the guidelines| and
|指导方针说

2790
01:22:50,970 --> 01:22:52,110
0,60 60,510 510,810 810,1020 1020,1140
the guidelines said| that you
|你应该用更多的时间选出一位有数量级的领导人

2791
01:22:52,110 --> 01:22:54,540
0,240 240,870 1140,1740 1740,1800 1800,2430
should have elected a leader

2792
01:22:54,570 --> 01:22:56,460
0,450 480,750 750,1080 1080,1260 1260,1890
with an order of magnitude

2793
01:22:56,460 --> 01:22:57,690
0,210 210,690 690,900 900,1140 1140,1230
more time| about what the
|关于心跳间隔是多少。

2794
01:22:57,690 --> 01:23:00,870
0,450 450,960 1290,2100 2100,2520 2520,3180
heartbeat interval.| Exactly.| {100 -}
|一点儿没错。|100，如果你喜欢800到1秒，

2795
01:23:00,900 --> 01:23:02,430
0,810 810,930 930,1170 1170,1320 1320,1530
like if you do like

2796
01:23:02,460 --> 01:23:04,380
0,720 720,810 810,1230 1230,1440 1590,1920
{800,to} a second,| like things
|好像一切都会好起来的，

2797
01:23:04,380 --> 01:23:05,580
0,150 150,390 390,750
will work out,|
|

2798
01:23:05,840 --> 01:23:07,280
0,240 240,510 510,840 960,1350 1350,1440
it's fine, if those are
很好，如果这些都很高，

2799
01:23:07,280 --> 01:23:08,930
0,210 210,720 810,1290 1290,1470 1470,1650
high,| because that's kind of
|因为这就是指导方针，

2800
01:23:08,930 --> 01:23:10,310
0,120 120,540 540,720 720,1020 1020,1380
the guidelines,| it all changes,
|一切都变了，因为我们刚刚让你改变了内心的心跳频率，

2801
01:23:10,310 --> 01:23:11,870
0,360 360,720 750,1020 1020,1380 1380,1560
because we just made you

2802
01:23:11,870 --> 01:23:13,460
0,390 390,840 1020,1290 1290,1380 1380,1590
change the kind of like

2803
01:23:13,460 --> 01:23:15,350
0,210 210,900 900,1110 1110,1290 1290,1890
the innermost {heartbeat -} frequency,|
|

2804
01:23:15,350 --> 01:23:16,430
0,330 330,450 450,600 600,750 750,1080
because of the {RPC -}
因为RPC[]。

2805
01:23:16,430 --> 01:23:18,200
0,540
[].|
|

2806
01:23:20,580 --> 01:23:22,500
0,300 300,630 630,810 810,1290 1290,1920
{} Sorry, can actually see
对不起，真的可以在代码中看到心跳计时器吗？

2807
01:23:22,500 --> 01:23:24,990
0,510 540,1260 1260,1920 1920,2340 2370,2490
the heartbeat timer in the

2808
01:23:24,990 --> 01:23:26,180
0,750
code?|
|

2809
01:23:26,210 --> 01:23:27,780
0,240 240,840
Yeah, sure.|
好的，当然可以。|

2810
01:23:28,380 --> 01:23:31,120
0,1050

2811
01:23:33,160 --> 01:23:34,780
0,390

2812
01:23:35,090 --> 01:23:36,530
0,750 750,840 840,960 960,1200 1200,1440
Basically, you know every 50
基本上，你知道每50毫秒，

2813
01:23:36,530 --> 01:23:38,930
0,1200 1290,1830 1830,1950 1950,2220 2220,2400
milliseconds,| {} the ticker goes
|股票行情报警器响了，

2814
01:23:38,930 --> 01:23:40,000
0,570
off,|
|

2815
01:23:40,410 --> 01:23:42,300
0,390 420,810 810,1410 1470,1770 1770,1890
the {ticker,calls} tick| and if
自动收报机叫滴答。|如果一位领导人明显地发送了一个RPC，

2816
01:23:42,300 --> 01:23:44,040
0,240 240,720 720,1380 1380,1650 1650,1740
a leader obviously send an

2817
01:23:44,040 --> 01:23:45,570
0,630 630,810 810,1020 1020,1290 1290,1530
RPC,| just comes down to
|归根结底就是心跳，

2818
01:23:45,570 --> 01:23:47,300
0,540 540,630 630,1200
basically a heartbeat,|
|

2819
01:23:49,570 --> 01:23:50,920
0,240 240,510 510,690 690,1170 1170,1350
so here, my implementation every
所以在这里，我的实现每50毫秒，我发送一个心跳。

2820
01:23:50,920 --> 01:23:52,180
0,240 240,780 780,930 930,1200 1200,1260
50 milliseconds, I'm sending a

2821
01:23:52,180 --> 01:23:53,220
0,480
heartbeat.|
|

2822
01:23:56,920 --> 01:23:57,940
0,570

2823
01:23:58,730 --> 01:24:01,220
0,360 360,1020 1050,1470 1500,2190 2340,2490
Another question,| I so, I
另一个问题，|我，我，你刚才说的我，

2824
01:24:01,220 --> 01:24:03,140
0,390 390,480 480,720 720,1350
you were saying like,|
|

2825
01:24:03,140 --> 01:24:05,380
0,660 990,1740
{} like,
像，它应该像超时应该比心跳大一个数量级，对，

2826
01:24:05,380 --> 01:24:06,400
0,210 210,390 390,510 510,660 660,1020
it should be like timeout

2827
01:24:06,400 --> 01:24:07,180
0,150 150,240 240,480 480,720 720,780
should be an order of

2828
01:24:07,180 --> 01:24:11,440
0,840 1920,2700 2730,3150 3150,3720 3720,4260
magnitude greater than heartbeats, right,|
|

2829
01:24:12,250 --> 01:24:13,810
0,210 210,360 360,960 960,1440 1440,1560
but I started playing to
但我开始打球，看看它能降到多低，

2830
01:24:13,810 --> 01:24:15,010
0,240 240,630 630,930 930,1050 1050,1200
see how low it could

2831
01:24:15,010 --> 01:24:16,000
0,510
get,|
|

2832
01:24:16,090 --> 01:24:17,560
0,450 480,870 870,990 990,1140 1140,1470
you know I I could
你知道我会喜欢100毫秒的暂停，

2833
01:24:17,590 --> 01:24:19,360
0,420 480,780 780,840 840,1200 1200,1770
like with {100 -} millisecond

2834
01:24:19,360 --> 01:24:20,600
0,690
timeout,|
|

2835
01:24:20,600 --> 01:24:21,650
0,270 270,420 420,720 720,900 900,1050
you know it could go
你知道，它可能会缩短到3到500毫秒，

2836
01:24:21,650 --> 01:24:24,290
0,210 210,480 600,930 930,1050 1050,2640
down to 3 to {500,milliseconds

2837
01:24:24,290 --> 01:24:25,940
0,480 480,540 540,840 840,1320 1350,1650
-},| {} still work like
|在没有[]的情况下，仍然可以像您所知道的那样工作

2838
01:24:26,150 --> 01:24:28,250
0,150 150,510 900,1590 1680,2040 2040,2100
you know with without {}

2839
01:24:28,250 --> 01:24:29,270
0,390 390,510 510,570 570,690 690,1020
[]| and I was wondering
|我在想，这是为什么，

2840
01:24:29,270 --> 01:24:30,100
0,300
like,

2841
01:24:30,300 --> 01:24:32,820
0,240 240,570 660,1020 1020,1950
it's {} like why,|
|

2842
01:24:33,990 --> 01:24:35,970
0,270 270,570 570,960 960,1770 1830,1980
like how how low you
比如你知道他们能降到多低，

2843
01:24:35,970 --> 01:24:36,780
0,90 90,330 330,480 480,660 660,810
know how low can they

2844
01:24:36,780 --> 01:24:37,940
0,600
get,|
|

2845
01:24:38,150 --> 01:24:39,470
0,240 240,720 720,870 870,990 990,1320
and why are we making
为什么我们要让它们变得比，

2846
01:24:39,470 --> 01:24:40,760
0,120 120,390 390,690 690,1110 1110,1290
them so much greater than

2847
01:24:40,760 --> 01:24:41,720
0,390
the,|
|

2848
01:24:41,870 --> 01:24:43,340
0,150 150,240 240,750 750,1050 1050,1470
than the election {timeout -},|
而不是选举超时，|

2849
01:24:43,550 --> 01:24:45,050
0,150 150,300 300,510 510,990 1020,1500
more than the heartbeat time.|
比心跳时间还多。|

2850
01:24:45,260 --> 01:24:47,690
0,420 420,1860 1890,2160 2160,2220 2220,2430
Because we need to give
因为我们需要给候选人真正成为领袖的机会

2851
01:24:47,690 --> 01:24:50,240
0,450 480,930 1440,1800 1800,2280 2280,2550
the candidate {} shot actually

2852
01:24:50,240 --> 01:24:51,380
0,300 300,390 390,780 780,990 990,1140
becoming the leader| and some
|一些消息可能会被延迟很长时间或被丢弃。

2853
01:24:51,380 --> 01:24:52,310
0,90 90,150 150,540 540,780 780,930
of the messages might be

2854
01:24:52,310 --> 01:24:53,330
0,330 330,450 450,480 480,720 720,1020
delayed for a long time

2855
01:24:55,480 --> 01:24:57,420
0,450 540,810 810,1350
{} or dropped.|
|

2856
01:25:00,200 --> 01:25:01,420
0,480
Okay?|
好吧?|

2857
01:25:01,700 --> 01:25:02,390
0,120 120,210 210,270 270,600 600,690
I have a question,| I
我有个问题，|我想我错过了这一部分，

2858
01:25:02,390 --> 01:25:03,590
0,180 180,240 240,480 480,690 690,1200
think I missed this part,|
|

2859
01:25:03,590 --> 01:25:05,060
0,330 330,930
which is,
也就是说，您是如何从Start发送的附加条目

2860
01:25:05,060 --> 01:25:07,940
0,480 480,1200 1500,1830 1830,2310 2310,2880
how you're like which {}

2861
01:25:08,180 --> 01:25:09,980
0,660 660,810 810,1140 1140,1380 1380,1800
{append,entries} you're sending from start|
|

2862
01:25:09,980 --> 01:25:10,880
0,90 90,300 300,570 570,810 810,900
and which ones from the
哪些是来自心跳的，

2863
01:25:10,880 --> 01:25:12,800
0,600 870,1380 1380,1470 1470,1800 1800,1920
heartbeat,| basically the same, it's
|基本上是一样的，都是相同的代码。

2864
01:25:12,800 --> 01:25:14,000
0,90 90,300 300,690
the same code.|
|

2865
01:25:14,870 --> 01:25:17,630
0,570 900,1590 1680,2040 2040,2460 2460,2760
Okay.| Okay, there's nothing difference
好吧。|好吧，没什么区别，我只有一个，

2866
01:25:17,630 --> 01:25:18,740
0,150 150,360 360,450 450,750 750,1110
I only have one,| if
|如果你看这里，

2867
01:25:18,740 --> 01:25:19,850
0,120 120,270 270,600 600,900 900,1110
you look here,| this guy
|这个人被送到后备队，对吧，

2868
01:25:19,850 --> 01:25:21,230
0,180 180,420 420,480 480,990 1020,1380
here sent to appends, right,|
|

2869
01:25:21,260 --> 01:25:22,520
0,180 180,300 300,570 570,660 660,1260
this is from the ticker.|
这是来自报价器的。|

2870
01:25:23,010 --> 01:25:24,990
0,780 780,1560 1590,1710 1710,1830 1830,1980
Yeah.| And if you look
嗯。|如果你看一下API代码，

2871
01:25:24,990 --> 01:25:27,060
0,120 120,360 360,750 750,1410 1560,2070
at the API code,| start
|启动函数调用相同的函数，

2872
01:25:27,060 --> 01:25:29,070
0,750 960,1230 1230,1290 1290,1560 1560,2010
function calls the same function,|
|

2873
01:25:32,390 --> 01:25:33,500
0,210 210,300 300,480 480,750 750,1110
but in this case which
但在这种情况下，哪些是，

2874
01:25:33,590 --> 01:25:35,020
0,270 270,510 510,870
which ones are,|
|

2875
01:25:35,020 --> 01:25:36,040
0,240 240,360 360,480 480,810 810,1020
like if you're sending all
比如，如果你从一开始就把它们全部发送出去，

2876
01:25:36,040 --> 01:25:37,000
0,90 90,240 240,420 420,780 780,960
of them from start,| which
|哪些是从自动收报机发出的。

2877
01:25:37,000 --> 01:25:37,540
0,180 180,240 240,360 360,420 420,540
ones are going to be

2878
01:25:37,540 --> 01:25:39,540
0,360 360,570 570,930 960,1470
sent from the ticker.|
|

2879
01:25:40,010 --> 01:25:42,080
0,390 390,630 630,870 870,1410 1410,2070
{The,ticker} probably says mostly empty
股票代码可能显示大多数是空的附加项。

2880
01:25:42,140 --> 01:25:44,880
0,1440 1530,2220
{} appends.|
|

2881
01:25:45,730 --> 01:25:46,900
0,1020
Okay,
好的，所以这两个人都来自Startd.，

2882
01:25:46,990 --> 01:25:48,040
0,180 180,300 300,600 600,750 750,1050
so the both are coming

2883
01:25:48,040 --> 01:25:49,460
0,330 330,930
from startd.,|
|

2884
01:25:49,580 --> 01:25:51,260
0,810 840,1200 1200,1320 1320,1530 1530,1680
No, one is coming from
不，一个是从自动收报机传来的。

2885
01:25:51,260 --> 01:25:52,440
0,90 90,630
the ticker.|
|

2886
01:25:53,320 --> 01:25:54,400
0,120 120,270 270,360 360,750 750,1080
Or like the actual log
或者类似于实际的日志条目。

2887
01:25:54,400 --> 01:25:55,620
0,690
entries.|
|

2888
01:25:56,010 --> 01:25:57,930
0,240 240,660 660,660 660,1560 1560,1920
Oh, the oh the actual
哦，哦，实际的日志条目都在结构筏上，对吧，

2889
01:25:57,930 --> 01:25:59,490
0,330 330,1050 1050,1170 1170,1440 1440,1560
{log,entries} are all sitting in

2890
01:25:59,490 --> 01:26:01,890
0,540 570,1140 1590,1860 1860,2100 2100,2400
struct raft, right,| there coming
|从他们的抽象中走出来，

2891
01:26:01,890 --> 01:26:03,400
0,120 120,180 180,360 360,1020
out of their abstract,|
|

2892
01:26:04,660 --> 01:26:05,380
0,330 330,390 390,510 510,630 630,720
and if you look at
如果你看看Start，

2893
01:26:05,380 --> 01:26:06,580
0,510 510,600 600,780 780,930 930,1200
start,| the only thing start
|Start做的唯一一件事，

2894
01:26:06,580 --> 01:26:07,700
0,60 60,600
{does -},|
|

2895
01:26:08,180 --> 01:26:09,290
0,300 300,480 510,720 720,900 900,1110
hold on, let me go
等一下，我去把车拉起来重新开始，

2896
01:26:09,290 --> 01:26:10,520
0,330 330,420 420,660 660,990 1020,1230
pull up start again,| because
|因为这是个好问题，

2897
01:26:10,520 --> 01:26:11,990
0,150 150,180 180,300 300,870 1260,1470
it's a good question,| you
|你基本上可以启动，

2898
01:26:11,990 --> 01:26:13,460
0,210 210,630 630,990 990,1080 1080,1470
pull start basically,| it appends
|它会附加到这里的日志中，对吧，

2899
01:26:13,460 --> 01:26:15,260
0,150 150,270 270,750 780,1260
to the log here,

2900
01:26:16,130 --> 01:26:18,560
0,480 780,1560 1560,1740 1740,1980 1980,2430
right,| and that's all does|
|这就是所有的事情|

2901
01:26:18,590 --> 01:26:19,850
0,390 390,660 660,840 840,1020 1020,1260
and like the only difference
就像股票代码和START之间唯一的区别就是，

2902
01:26:19,850 --> 01:26:21,110
0,330 330,750 750,810 840,1170 1170,1260
basically between the ticker and

2903
01:26:21,110 --> 01:26:22,460
0,390 390,600 600,840 840,1140 1140,1350
start is,| that start actually
|该开始实际上会在日志中添加一些内容

2904
01:26:22,460 --> 01:26:23,570
0,300 300,540 540,660 660,720 720,1110
appends something to the log|
|

2905
01:26:23,570 --> 01:26:24,620
0,120 120,210 210,660 660,960 960,1050
and the ticker doesn't do
而股票行情并不是这样的，

2906
01:26:24,620 --> 01:26:25,460
0,270
that,|
|

2907
01:26:25,790 --> 01:26:27,860
0,600 600,1050 1050,1560 1560,1740 1740,2070
and {send,appends -} {} basically
并发送附加内容，基本上获取任何内容，

2908
01:26:27,860 --> 01:26:30,800
0,540 540,1440 1500,2070 2190,2670 2700,2940
grabs whatever,| {} so this
|这是他们所有人的循环，

2909
01:26:30,800 --> 01:26:31,820
0,90 90,300 330,720 720,870 870,1020
is the loop for all

2910
01:26:31,820 --> 01:26:32,860
0,90 90,480
of them,|
|

2911
01:26:32,860 --> 01:26:34,420
0,270 270,540 540,630 630,720 720,1560
so here's to the individual,|
因此，为个人干杯，|

2912
01:26:35,080 --> 01:26:36,840
0,1260
oops,|
哎呀，|

2913
01:26:40,220 --> 01:26:41,660
0,270 270,510 510,1110 1110,1320 1320,1440
here's the individual one,| they
这是个人的一张，|它们发送给一个对等点

2914
01:26:41,660 --> 01:26:43,340
0,240 240,300 300,540 540,1140 1410,1680
sent to one peer| and
|它基本上从这里的Out of Log中抓取正确的日志条目，

2915
01:26:43,340 --> 01:26:44,960
0,150 150,570 570,1020 1020,1140 1140,1620
it basically grabs the right

2916
01:26:44,960 --> 01:26:47,360
0,360 360,1050 1110,1380 1380,1500 1500,2400
log entries out of the

2917
01:26:47,510 --> 01:26:49,980
0,840 840,1230 1260,1500 1500,1980
{out,of} log right here,|
|

2918
01:26:50,380 --> 01:26:51,700
0,480 480,870 870,1050 1050,1200 1200,1320
you're copy it out of
您将其从日志复制到ARGS条目中，

2919
01:26:51,700 --> 01:26:53,590
0,90 90,510 540,990 990,1470 1500,1890
the log into the args

2920
01:26:53,590 --> 01:26:54,720
0,570
entries,|
|

2921
01:26:54,900 --> 01:26:55,590
0,240 240,360 360,510 510,630 630,690
and so if it's a
所以如果是心跳，

2922
01:26:55,590 --> 01:26:57,270
0,570 570,810 810,1140 1140,1320 1320,1680
heartbeat,| most likely there's always
|最有可能的是总是有0，但不总是正确的，

2923
01:26:57,270 --> 01:26:58,710
0,120 120,450 450,690 690,1140 1140,1440
be 0, not always, correct,|
|

2924
01:26:58,710 --> 01:27:00,690
0,570 780,1050 1050,1350 1380,1800 1800,1980
because you might {be,the,leader}, {might,be,follower},
因为你可能是领导者，可能是追随者，错过了一些，

2925
01:27:00,690 --> 01:27:02,550
0,120 120,300 300,600 1320,1740 1740,1860
have missed some,| but in
|但在START调用此命令的情况下，

2926
01:27:02,550 --> 01:27:04,260
0,60 60,360 360,720 720,1290 1320,1710
the case when a start

2927
01:27:04,260 --> 01:27:05,730
0,270 270,570 570,930 930,1350 1350,1470
calls this,| you always be
|你总是在发送实际上刚刚附加的东西。

2928
01:27:05,730 --> 01:27:07,020
0,510 510,750 750,900 900,1020 1020,1290
sending the thing that actually

2929
01:27:07,020 --> 01:27:08,540
0,210 210,390 390,510 510,1020
just has been appended.|
|

2930
01:27:09,720 --> 01:27:11,280
0,450 480,870 990,1170 1170,1380 1380,1560
Okay, because, I I did
好的，因为，我-我这么做是为了让我把所有的东西都在心跳中发送，

2931
01:27:11,280 --> 01:27:12,570
0,240 270,600 600,780 810,1110 1110,1290
it that I such that

2932
01:27:12,570 --> 01:27:13,710
0,120 120,450 450,930 930,1050 1050,1140
I'm sending everything in the

2933
01:27:13,710 --> 01:27:14,910
0,240 240,630 630,780 780,960 960,1200
{heartbeats -},| like all the
|像所有的条目一样，

2934
01:27:14,940 --> 01:27:16,040
0,630
entries,|
|

2935
01:27:16,420 --> 01:27:17,620
0,210 210,630 660,870 870,1080 1080,1200
and I for some of
而我对这两个[]中的一些，

2936
01:27:17,620 --> 01:27:19,450
0,120 120,300 300,810 810,1290 1290,1830
the two [],| sometimes I'll
|有时我会喜欢不能达成协议

2937
01:27:19,450 --> 01:27:20,470
0,210 210,420 420,510 510,630 630,1020
like fail to reach agreement|
|

2938
01:27:20,470 --> 01:27:21,550
0,90 90,180 180,480 480,600 600,1080
and I'm wondering if that's
我想知道这是不是原因，

2939
01:27:22,090 --> 01:27:23,710
0,240 240,450 450,1050 1080,1410 1410,1620
why,| because here it seems
|因为这里看起来像是，

2940
01:27:23,710 --> 01:27:24,640
0,360 360,510 510,780 780,840 840,930
like,| the bulk of the
|大部分条目是在Start中发送的。

2941
01:27:24,640 --> 01:27:25,990
0,330 330,420 420,600 600,1080 1170,1350
entries are being sent in

2942
01:27:25,990 --> 01:27:27,910
0,360 360,1200 1200,1440 1440,1680 1680,1920
start.| No, okay,| that might
|不，好吧，|这可能不是你为什么，

2943
01:27:27,910 --> 01:27:29,170
0,240 240,360 360,510 510,810 810,1260
not be the reason why

2944
01:27:29,170 --> 01:27:31,510
0,990 1020,1710 1920,2070 2070,2220 2220,2340
you,| {} I don't think
|我认为这不会影响达成协议，

2945
01:27:31,510 --> 01:27:33,070
0,90 90,300 300,810 840,1170 1170,1560
it will affect reaching agreement,|
|

2946
01:27:33,070 --> 01:27:34,660
0,60 60,330 330,660 660,1170 1170,1590
is probably not a dependent
可能并不依赖于您发送的条目数量，

2947
01:27:34,660 --> 01:27:35,530
0,120 120,180 180,450 450,600 600,870
on the number of entries

2948
01:27:35,530 --> 01:27:37,120
0,120 120,360 360,540 540,1110
you send in, {}|
|

2949
01:27:37,320 --> 01:27:38,460
0,180 180,390 390,450 450,690 690,1140
the number of log entries
位于附加RPC中的日志条目数。

2950
01:27:38,460 --> 01:27:39,900
0,210 210,360 360,720 720,870 870,1440
sitting in {append -} RPC.|
|

2951
01:27:40,790 --> 01:27:41,880
0,570
No.|
不是的。|

2952
01:27:42,540 --> 01:27:43,830
0,570 570,870 870,1020 1020,1200 1200,1290
Yeah, I was able to
是的，我顺利通过了2号实验室，

2953
01:27:43,830 --> 01:27:44,490
0,150 150,300 300,450 450,510 510,660
make it all the way

2954
01:27:44,490 --> 01:27:46,590
0,570 570,960 960,1440 1470,1830 1830,2100
through lab 2,| with only
|在仅从心跳定时器发送附加条目的情况下，

2955
01:27:46,590 --> 01:27:49,050
0,240 240,900 1200,1560 1590,2070 2070,2460
ever sending {append -} entries

2956
01:27:49,050 --> 01:27:53,130
0,300 300,360 360,930 930,1350 2340,4080
from the heartbeat timer,| things
|不过，情况有所好转。

2957
01:27:53,130 --> 01:27:57,600
0,300 300,660 690,3390
down though. {}|
|

2958
01:27:57,600 --> 01:27:58,080
0,90 90,150 150,330 330,360 360,480
To be clear, I don't
明确地说，我不建议这么做，

2959
01:27:58,080 --> 01:27:59,610
0,480 480,660 660,870 870,1140 1170,1530
recommend doing this,| but like,
|但就像，你可以通过第二实验室，

2960
01:28:00,510 --> 01:28:01,380
0,180 180,270 270,450 450,570 570,870
you can get through lab

2961
01:28:01,380 --> 01:28:02,520
0,210 210,480 480,750 750,1020 1020,1140
2,| with just sending from
|只是从心跳中发出信号，

2962
01:28:02,520 --> 01:28:03,780
0,60 60,270 270,570 570,990 1110,1260
the {heartbeats -},| so if
|因此，如果您不确定超时时间有多长，那么。

2963
01:28:03,780 --> 01:28:08,520
0,780 1410,1920 1920,2010 4170,4650 4650,4740
you're not sure how long

2964
01:28:08,520 --> 01:28:10,080
0,120 120,660 810,1170 1200,1440 1440,1560
the timeout, then.| {} How
|心跳的限制是如何起作用的，

2965
01:28:10,080 --> 01:28:11,460
0,120 120,270 270,690 690,840 840,1380
do the limits on heartbeats

2966
01:28:11,460 --> 01:28:13,470
0,450 720,1230 1230,1350 1350,1830 1860,2010
work or the limit on

2967
01:28:13,470 --> 01:28:15,570
0,840 1140,1350 1350,1440 1440,1890 1890,2100
heartbeats,| like the same as
|与追加条目RPC的限制相同

2968
01:28:15,570 --> 01:28:16,700
0,60 60,360 360,660
{} limit on

2969
01:28:16,700 --> 01:28:18,260
0,390 390,720 720,840 840,1320 1320,1560
append entries {RPC -}| or
|或者他们的计算方式不同。

2970
01:28:18,260 --> 01:28:19,940
0,120 120,240 240,570 570,1170
are they counted differently.|
|

2971
01:28:20,560 --> 01:28:22,090
0,750 750,930 930,1080 1080,1440 1440,1530
Either in the heartbeat is
无论是在心跳上有一点不同，

2972
01:28:22,090 --> 01:28:23,500
0,150 150,420 540,1020 1050,1140 1140,1410
a bit different,| you know
|你知道你可以发送你知道你必须发送原则假设，

2973
01:28:23,500 --> 01:28:24,550
0,330 330,420 420,750 750,900 900,1050
you can send you know

2974
01:28:24,550 --> 01:28:26,290
0,180 180,360 360,450 450,900 1050,1740
you have to send principle

2975
01:28:26,290 --> 01:28:27,640
0,420 420,600 600,780 780,1200 1200,1350
assume,| that every start can
|每次启动都会导致追加条目调用。

2976
01:28:27,640 --> 01:28:29,860
0,450 450,660 660,990 990,1590 1680,2220
result in an {append,entry} call.|
|

2977
01:28:30,320 --> 01:28:33,200
0,480 720,1230 1290,1710 1710,2250 2280,2880
Right.| And and you're you're
正确的。|你是你不能发送超过10个心跳。

2978
01:28:33,200 --> 01:28:34,070
0,180 180,450 450,510 510,690 690,870
not allowed to send more

2979
01:28:34,070 --> 01:28:35,620
0,120 120,330 330,1020
than 10 heartbeats.|
|

2980
01:28:35,740 --> 01:28:37,300
0,390 390,600 600,690 690,1020 1080,1560
How, how do you, like
怎么，你怎么，喜欢在测试中区分这一点。

2981
01:28:37,300 --> 01:28:39,790
0,870 870,1320 1710,1950 1950,2100 2100,2490
differentiate that on the test.|
|

2982
01:28:40,090 --> 01:28:42,160
0,480 480,660 660,840 840,1500 1590,2070
Heartbeats have no entries, most
心跳没有条目，最典型的情况是。

2983
01:28:42,160 --> 01:28:44,300
0,630 1020,1680
typically.| Okay,
|好的，所以你真的走进去，检查一下。

2984
01:28:45,150 --> 01:28:46,410
0,240 240,450 450,870 870,1110 1110,1260
so you literally go in

2985
01:28:46,410 --> 01:28:47,730
0,150 150,510 510,870 900,1170 1170,1320
and check like.| Oh, they
|哦，他们不是真的检查，

2986
01:28:47,730 --> 01:28:48,990
0,240 240,480 480,810 810,1110 1110,1260
don't really literally check,| but
|但我们基本上是看你是否每秒进步超过10次，

2987
01:28:48,990 --> 01:28:50,280
0,150 150,540 540,1050 1050,1170 1170,1290
we basically see if you

2988
01:28:50,280 --> 01:28:51,450
0,180 180,420 420,840 840,960 960,1170
make more progress than 10

2989
01:28:51,450 --> 01:28:53,060
0,540 540,600 600,990
times a second,|
|

2990
01:28:53,970 --> 01:28:54,990
0,270 270,480 480,570 570,660 660,1020
like one of the test
就像实验室3中的一项测试，

2991
01:28:54,990 --> 01:28:56,070
0,210 210,450 450,690 690,990 990,1080
in lab 3,| checks if
|检查你的速度是否足够快，

2992
01:28:56,070 --> 01:28:57,540
0,150 150,330 330,540 540,960
you go quick enough,|
|

2993
01:29:02,700 --> 01:29:04,360
0,420 420,510 510,660 660,1080
exactly for this reason,|
正是因为这个原因，|

2994
01:29:05,320 --> 01:29:06,220
0,270 270,300 300,450 450,570 570,900
maybe a little bit annoying,|
可能有点烦人，|

2995
01:29:06,220 --> 01:29:06,850
0,90 90,180 180,390 390,420 420,630
but {} in a real
但在实际应用中，对吗，

2996
01:29:06,850 --> 01:29:08,230
0,480 480,720 720,780 780,870 870,1380
application, correct,| if you delay
|如果你延迟，你知道你的附加条件，

2997
01:29:08,230 --> 01:29:09,340
0,90 90,240 240,540 540,1020 1020,1110
you know your appends,| you
|你知道，在你做任何事情之前，10乘50毫秒。

2998
01:29:09,340 --> 01:29:11,410
0,150 150,330 330,870 900,1770 1770,2070
know by {10,by,50,milliseconds -} before

2999
01:29:11,410 --> 01:29:12,600
0,60 60,180 180,600
you do anything.|
|

3000
01:29:13,050 --> 01:29:14,040
0,210 210,390 390,420 420,840 840,990
So if a client you
因此，如果你想象一位客户与你的服务会面，

3001
01:29:14,040 --> 01:29:15,480
0,510 510,570 570,1050 1050,1350 1350,1440
imagine a client's meeting to

3002
01:29:15,480 --> 01:29:16,800
0,180 180,720 720,840 840,960 960,1320
your service,| you know basically
|你知道，基本上每50毫秒就会有一次追加操作，

3003
01:29:16,800 --> 01:29:17,820
0,90 90,210 210,270 270,480 480,1020
it's going to get one

3004
01:29:18,460 --> 01:29:20,140
0,330 330,660 660,1140 1140,1410 1410,1680
{} append operation through every

3005
01:29:20,140 --> 01:29:21,700
0,270 270,1050
50 milliseconds,|
|

3006
01:29:22,860 --> 01:29:23,430
0,150 150,240 240,330 330,540 540,570
that would be not a
这将不是一项非常可取的服务。

3007
01:29:23,430 --> 01:29:25,020
0,240 240,720 720,1050 1050,1170 1170,1590
very desirable service to use.|
|

3008
01:29:29,690 --> 01:29:31,400
0,390 420,750 750,840 840,1230 1230,1710
I had a question about
我有一个关于在没有锁的情况下访问射频结构部分的问题，

3009
01:29:31,430 --> 01:29:32,980
0,990
accessing

3010
01:29:33,230 --> 01:29:35,990
0,570 570,900 900,1380 1410,2010 2130,2760
parts of the rf struct

3011
01:29:36,380 --> 01:29:39,260
0,600 600,930 930,1470 1740,2100 2100,2880
{} without lock,| so {in,send}
|因此在发送附加条目中，

3012
01:29:39,500 --> 01:29:41,180
0,540 540,1200
append entries,|
|

3013
01:29:41,180 --> 01:29:44,060
0,570 810,1260 1260,1860 1920,2160 2160,2880
you're you're reading the peer,
你是你在读同行，同行中的同行。

3014
01:29:44,090 --> 01:29:46,020
0,570 630,1440
of peers.|
|

3015
01:29:46,380 --> 01:29:47,720
0,750
Yep.|
是啊。|

3016
01:29:47,970 --> 01:29:50,280
0,300 300,300 300,780 780,1620 1800,2310
Oh I guess slice,| but
哦，我想切开吧，|但我知道它是静态的，

3017
01:29:50,310 --> 01:29:51,540
0,150 150,300 300,510 510,690 690,1230
I know that it is

3018
01:29:51,570 --> 01:29:54,450
0,150 150,270 270,990 1320,1950 2220,2880
it is static,| but there,
|但在那里，可能是多个线程读了同一个东西两次，对吧，

3019
01:29:54,540 --> 01:29:56,640
0,180 180,420 420,540 540,960 1110,2100
it could be that multiple

3020
01:29:57,160 --> 01:29:59,860
0,900 900,1500 1740,1950 1950,2250 2250,2700
threads read the same thing

3021
01:29:59,950 --> 01:30:03,300
0,690 690,1080 1260,2100 2160,2880
twice, right,| so is,
|所以，有没有比赛的危险，探测器抱怨这一点。

3022
01:30:03,300 --> 01:30:04,560
0,90 90,600 630,750 750,1140 1140,1260
is there a danger of

3023
01:30:04,560 --> 01:30:05,910
0,120 120,390 390,450 450,870 870,1350
the race the detector complaining

3024
01:30:05,910 --> 01:30:07,200
0,300 300,780
about this.|
|

3025
01:30:07,370 --> 01:30:09,280
0,360 360,1350

3026
01:30:10,000 --> 01:30:12,040
0,420 420,840

3027
01:30:12,040 --> 01:30:13,640
0,450 450,1110

3028
01:30:13,820 --> 01:30:15,080
0,720

3029
01:30:15,950 --> 01:30:18,410
0,1140 1290,1860 1860,2070 2070,2130 2130,2460
{} So let me see,|
所以让我想想，|

3030
01:30:18,440 --> 01:30:19,940
0,930

3031
01:30:20,060 --> 01:30:21,290
0,210 210,450 450,660 660,870 900,1230
so I guess I don't
所以我想我没有锁定射频对等体，这不是。

3032
01:30:21,290 --> 01:30:23,300
0,240 240,300 300,810 810,1350 1350,2010
hold a {lock,on} rf {peers

3033
01:30:23,300 --> 01:30:24,920
0,60 60,420 420,600 600,1050
-}, it's not the.|
|

3034
01:30:25,580 --> 01:30:26,640
0,510
Yeah.|
嗯。|

3035
01:30:27,020 --> 01:30:28,190
0,240 240,510 510,750 750,990 990,1170
Yeah, maybe race, because there's
是啊，也许是种族，因为没有人抱怨，

3036
01:30:28,190 --> 01:30:29,520
0,150 150,720
not complaining,|
|

3037
01:30:30,410 --> 01:30:31,670
0,630 630,720 720,960 960,1110 1110,1260
because I always run this
因为我总是用这个种族探测器。

3038
01:30:31,670 --> 01:30:33,180
0,390 390,960
race detector.|
|

3039
01:30:48,860 --> 01:30:50,060
0,240 240,450 450,570 570,930 930,1200
Sorry, was that question about
对不起，你的问题是关于迭代是否会导致竞争。

3040
01:30:50,060 --> 01:30:52,010
0,540 540,900 900,1110 1110,1590 1590,1950
whether iterating over peers could

3041
01:30:52,190 --> 01:30:53,840
0,480 480,1140
cause races.|
|

3042
01:30:53,900 --> 01:30:57,530
0,750 900,1650 1650,1950 2340,3360 3390,3630
Yeah.| Right, just access it
嗯。|好的，不用锁就可以进去了。

3043
01:30:57,530 --> 01:31:00,200
0,540 540,1050 1050,1200 1200,1860 2190,2670
without holding the lock.| Right,
|对，只有曾经拥有过，没有言语，对。

3044
01:31:00,200 --> 01:31:02,540
0,270 270,570 570,1020 1020,1200
there only ever owned,

3045
01:31:04,170 --> 01:31:06,480
0,300 300,450 450,780 810,2040 2040,2310
no words, right.| You can't
|你不会把种族检测器弄错的，抱怨说。

3046
01:31:06,480 --> 01:31:07,470
0,150 150,210 210,390 390,750 750,990
get the race detectors wrong

3047
01:31:07,470 --> 01:31:09,240
0,540
complain.|
|

3048
01:31:09,300 --> 01:31:10,890
0,210 210,600 600,780 780,990 990,1590
What about {rf.killed - -}.|
那么Rf.Killed呢。|

3049
01:31:13,370 --> 01:31:14,420
0,510
Sorry.|
抱歉的。|

3050
01:31:14,420 --> 01:31:16,220
0,480 510,750 750,960 960,1260 1260,1800
{} {rf.killed - - -}.|
Rf.被杀。|

3051
01:31:17,900 --> 01:31:21,020
0,1860 1890,2430

3052
01:31:22,340 --> 01:31:23,480
0,510 510,660 660,900 900,990 990,1140
Oh, I guess it was
哦，我想这只是个借口，

3053
01:31:23,480 --> 01:31:25,130
0,210 210,300 300,930 930,1470 1470,1650
just an excuse scenario,| if
|如果你在做其他事情的同时杀死它，我不确定。

3054
01:31:25,130 --> 01:31:26,390
0,210 210,480 480,780 870,1170 1170,1260
you kill it at the

3055
01:31:26,390 --> 01:31:27,710
0,360 360,630 630,810 810,1050 1050,1320
same time as doing something

3056
01:31:27,710 --> 01:31:29,340
0,210 210,480 480,690 690,1080
else, I'm not sure.|
|

3057
01:31:29,600 --> 01:31:31,370
0,360 360,540 540,1170 1170,1470 1470,1770
Yeah it says not only
是的，它说的不仅是修改，

3058
01:31:31,370 --> 01:31:32,840
0,900
modify,|
|

3059
01:31:32,990 --> 01:31:35,690
0,750 750,1020 1020,1440 1440,1950 1950,2700
killed still doesn't modify peers.|
被杀仍然不会修改同伴。|

3060
01:31:43,130 --> 01:31:45,060
0,330 360,690 690,900 900,1350
Yeah, okay, thank you.|
好的，好的，谢谢。|

3061
01:31:46,140 --> 01:31:46,950
0,180 180,270 270,450 450,600 600,810
Could I see how you
我能再看看你是怎么做申请频道的吗，

3062
01:31:46,950 --> 01:31:48,360
0,210 210,360 360,750 750,1230 1230,1410
do the apply channel thing

3063
01:31:48,360 --> 01:31:49,770
0,480 480,600 600,840 840,1050 1050,1410
again,| you talked about earlier
|您在前面谈到了如何需要使用Apply通道锁定。

3064
01:31:49,770 --> 01:31:50,580
0,180 180,300 300,570 570,660 660,810
how you needed to have

3065
01:31:50,580 --> 01:31:51,690
0,90 90,510 510,690 690,840 840,1110
a lock with the apply

3066
01:31:51,690 --> 01:31:52,820
0,570
channel.|
|

3067
01:31:53,090 --> 01:31:56,030
0,600 600,1110 1320,1710 1710,2250 2550,2940
Not unlock, the opposite.| Oh,
不是解锁，而是相反。|哦，对不起，这是什么条件变量。

3068
01:31:56,030 --> 01:31:58,340
0,450 540,810 810,960 960,1620 1800,2310
sorry, what is it {}

3069
01:31:58,340 --> 01:31:59,900
0,420 420,960 1200,1350 1350,1470 1470,1560
condition variable.| Yeah, I have
|是的，我有条件变量，是的。

3070
01:31:59,900 --> 01:32:01,420
0,60 60,390 390,720 720,990
a condition variable, yeah.|
|

3071
01:32:01,630 --> 01:32:03,340
0,1200

3072
01:32:03,860 --> 01:32:05,460
0,1080

3073
01:32:05,550 --> 01:32:06,930
0,300 300,450 450,810 840,1020 1020,1380
So yeah okay, oh, what
所以，好的，哦，你怎么处理条件变量。

3074
01:32:06,930 --> 01:32:07,440
0,60 60,150 150,270 270,390 390,510
do you do with the

3075
01:32:07,440 --> 01:32:09,720
0,570 570,1290 1350,1650 1650,1860 1860,2280
condition variable though.| I brought
|我给它带来了一个信号，

3076
01:32:09,720 --> 01:32:11,640
0,300 330,750 750,990 990,1230 1680,1920
a signal on it,| kind
|有点像当MatchIndex更新时

3077
01:32:11,640 --> 01:32:13,000
0,60 60,240 240,780
of like when,

3078
01:32:13,090 --> 01:32:16,420
0,600 600,1050 1050,1800 2610,2940 2940,3330
when {} the {matchIndex -}

3079
01:32:16,420 --> 01:32:17,920
0,60 60,540 540,750 750,1110 1110,1500
is updated| and a new
|并且需要提交新的条目

3080
01:32:17,920 --> 01:32:19,090
0,240 240,420 420,510 510,600 600,1170
entry needs to be committed|
|

3081
01:32:19,120 --> 01:32:21,250
0,480 480,780 780,1380 1440,1770 1770,2130
that thread will {} call
该线程将调用信号，

3082
01:32:21,250 --> 01:32:22,460
0,660
signal,|
|

3083
01:32:22,580 --> 01:32:24,530
0,840 900,1320 1320,1560 1560,1710 1710,1950
and, {} that will wake
并且，这将唤醒应用线程

3084
01:32:24,530 --> 01:32:26,000
0,210 210,570 570,1020 1020,1200 1200,1470
up the apply {thread -}|
|

3085
01:32:26,000 --> 01:32:26,870
0,120 120,420 420,570 570,780 780,870
and apply {} thread will
应用线程将查看是否有需要在应用通道上推送的内容，

3086
01:32:26,870 --> 01:32:27,800
0,210 210,330 330,480 480,810 810,930
see if there's anything that

3087
01:32:27,800 --> 01:32:28,700
0,150 150,240 240,360 360,660 660,900
needs to be pushed on

3088
01:32:28,700 --> 01:32:29,820
0,570
the

3089
01:32:29,910 --> 01:32:31,140
0,330 330,660 660,990 990,1110 1110,1230
apply channel,| which is the
|这是哪一张支票？

3090
01:32:31,140 --> 01:32:32,610
0,270 270,750 780,1080 1080,1200 1200,1470
check here| and if so,
|如果是这样，我们将把它放在申请频道上。

3091
01:32:32,610 --> 01:32:33,300
0,120 120,330 330,480 480,600 600,690
we will put it on

3092
01:32:33,300 --> 01:32:34,520
0,90 90,330 330,660
the apply channel.|
|

3093
01:32:34,890 --> 01:32:36,300
0,300 300,870
Oh, okay.|
哦，好吧。|

3094
01:32:36,720 --> 01:32:37,740
0,270 270,360 360,510 510,750 750,1020
And if there's nothing to
如果你的申请频道上没有更多需要推送的东西，

3095
01:32:37,740 --> 01:32:38,490
0,120 120,360 360,450 450,570 570,750
be pushed on your apply

3096
01:32:38,490 --> 01:32:39,480
0,330 330,540 540,600 600,780 780,990
channel more,| it goes back
|它又回到了睡眠状态。

3097
01:32:39,480 --> 01:32:40,500
0,90 90,480
to sleep.|
|

3098
01:32:40,650 --> 01:32:41,620
0,450
Okay.|
好吧。|

3099
01:32:48,450 --> 01:32:49,740
0,750
Okay.|
好吧。|

3100
01:32:50,150 --> 01:32:51,640
0,330 330,480 480,570 570,900
Maybe this is it
也许今天就到此为止吧。

3101
01:32:52,040 --> 01:32:53,320
0,240 240,720
for today.|
|

3102
01:32:59,000 --> 01:33:00,600
0,180 180,510 510,1020
And who's left.
还有谁还活着。

