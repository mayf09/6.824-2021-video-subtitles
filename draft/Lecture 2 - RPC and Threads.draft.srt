1
00:00:02,060 --> 00:00:04,280
0,570 1140,1530 1530,1710 1710,1830 1830,2220
{ -} Okay, so the

2
00:00:04,310 --> 00:00:05,930
0,300 300,420 420,810 810,1050 1050,1620
topic for today is {}

3
00:00:05,930 --> 00:00:08,030
0,300 300,390 390,540 540,1170 1770,2100
threads and {RPC -},| second

4
00:00:08,030 --> 00:00:10,460
0,390 390,1140 1620,1860 1860,1980 1980,2430
lecture in {6.824 - -},|

5
00:00:10,550 --> 00:00:12,170
0,1020 1020,1110 1110,1230 1230,1320 1320,1620
again we're going to mostly

6
00:00:12,170 --> 00:00:12,860
0,150 150,270 270,480 480,570 570,690
look at threads and {RPC

7
00:00:12,860 --> 00:00:13,880
0,360 360,450 450,510 510,900 900,1020
-} in the context of

8
00:00:13,880 --> 00:00:14,880
0,480
Go,|

9
00:00:14,880 --> 00:00:16,950
0,540 900,1440 1440,1770 1770,1920 1920,2070
{you,know} programming language that we're

10
00:00:16,950 --> 00:00:18,720
0,330 330,510 510,960 990,1620 1680,1770
using in the labs| and

11
00:00:18,720 --> 00:00:19,890
0,270 270,660 660,930 930,990 990,1170
in fact most of this

12
00:00:19,890 --> 00:00:21,900
0,330 330,420 420,690 690,1320 1680,2010
lecture is really tailored {}|

13
00:00:21,900 --> 00:00:25,020
0,330 330,870 930,1440 1440,2670 2700,3120
{towords -} helping you do

14
00:00:25,020 --> 00:00:27,060
0,210 210,810 810,1410 1440,1560 1560,2040
Go programming for the labs,|

15
00:00:27,960 --> 00:00:30,330
0,450 1170,1380 1380,1710 1710,1860 1860,2370
{} that's all you've done,|

16
00:00:30,330 --> 00:00:32,940
0,450 450,570 570,1320 1440,2400 2460,2610
hopefully the tutorial and the

17
00:00:32,940 --> 00:00:34,860
0,450 450,930 930,1110 1110,1560 1560,1920
crawler exercise| which will discuss

18
00:00:34,860 --> 00:00:35,460
0,90 90,300 300,330 330,480 480,600
them quite a bit of

19
00:00:35,460 --> 00:00:37,170
0,750 750,1080 1080,1200 1200,1290 1290,1710
detail later in the lecture,|

20
00:00:37,410 --> 00:00:39,060
0,510 510,960 960,1290 1290,1560 1560,1650
but before jumping into the

21
00:00:39,060 --> 00:00:40,440
0,450 450,570 570,870 870,1170 1170,1380
details,| let me a little

22
00:00:40,440 --> 00:00:41,940
0,180 180,510 510,630 630,930 930,1500
bit more of code calling

23
00:00:41,970 --> 00:00:43,350
0,330 450,780 780,930 930,1200 1200,1380
to break the [] and

24
00:00:43,350 --> 00:00:44,670
0,180 180,360 360,480 480,660 660,1320
get people to ask questions.|

25
00:00:45,200 --> 00:00:46,520
0,360 360,540 540,780 780,870 870,1320
{} So maybe you can

26
00:00:46,520 --> 00:00:48,200
0,270 270,330 330,1110 1110,1470 1470,1680
answer the question,| where are

27
00:00:48,200 --> 00:00:49,460
0,240 240,750 780,1020 1020,1170 1170,1260
you and how did you

28
00:00:49,460 --> 00:00:51,110
0,330 330,480 480,960 960,1530 1530,1650
enjoy the tutorial,| what's your

29
00:00:51,110 --> 00:00:53,930
0,210 210,660 660,1320 1350,1770 2220,2820
first impression to Go,| maybe

30
00:00:53,930 --> 00:00:56,270
0,810 840,1320 1320,1530 1530,1980 1980,2340
I'll.| Yeah, how about Evan

31
00:00:56,270 --> 00:00:57,400
0,600
Feldman?|

32
00:00:59,940 --> 00:01:02,910
0,390 390,900 960,1650 1860,2610 2610,2970
Hi folks, I'm Batman,| I'm

33
00:01:02,910 --> 00:01:04,710
0,600 600,1020 1020,1320 1320,1530 1530,1800
in Newton, which is {}

34
00:01:04,710 --> 00:01:05,730
0,120 120,240 240,690 690,780 780,1020
on the outskirts of greater

35
00:01:05,730 --> 00:01:08,310
0,540 870,1680 1680,1860 1860,2460 2460,2580
Boston,| {the,tutorial} was interesting,| it

36
00:01:08,310 --> 00:01:09,960
0,120 120,240 240,540 540,1110 1110,1650
was my first exposure to

37
00:01:10,170 --> 00:01:11,700
0,360 360,450 450,630 630,1110 1110,1530
you know an object oriented

38
00:01:11,700 --> 00:01:14,010
0,540 600,1350 1380,1710 1710,1980 1980,2310
language,| {} so it's, {}

39
00:01:14,010 --> 00:01:14,730
0,120 120,270 270,330 330,390 390,720
it's kind of a change

40
00:01:14,730 --> 00:01:16,290
0,240 240,540 540,630 630,1110 1110,1560
a change in framework,| that

41
00:01:16,380 --> 00:01:18,030
0,540 570,930 930,1020 1020,1410 1410,1650
was interesting to adapt to.|

42
00:01:19,290 --> 00:01:22,620
0,210 210,1290 1440,2280 2280,2700
Hey, {how,about} Brendan Wall?|

43
00:01:28,390 --> 00:01:30,240
0,480 480,600 600,720 720,1290
Brendan, are you there?|

44
00:01:30,530 --> 00:01:31,580
0,300 300,420 420,540 540,690 690,1050
Yes, I was just finding

45
00:01:31,760 --> 00:01:33,260
0,450 600,840 840,1050 1050,1140 1140,1500
{mute,button},| sorry, {what,was} the question,

46
00:01:33,260 --> 00:01:35,000
0,120 120,300 300,600 930,1530 1530,1740
I just joined.| {} Where

47
00:01:35,000 --> 00:01:35,870
0,150 150,270 270,690 690,750 750,870
are you {and,what,is -} your

48
00:01:35,870 --> 00:01:38,000
0,210 210,570 570,660 660,1050 1740,2130
first impressions of Go? {}|

49
00:01:38,000 --> 00:01:39,560
0,450 450,990 1020,1200 1200,1380 1380,1560
Yeah, it's, I had used

50
00:01:39,560 --> 00:01:40,400
0,60 60,240 240,600 600,750 750,840
to Go before,| for an

51
00:01:40,400 --> 00:01:41,480
0,510 510,600 600,690 690,840 840,1080
internship that was my first

52
00:01:41,480 --> 00:01:42,620
0,210 210,630 690,930 930,1050 1050,1140
time actually dealing with the

53
00:01:42,620 --> 00:01:44,360
0,540 540,1080 1110,1230 1230,1290 1290,1740
concurrency stuff| and I like

54
00:01:44,420 --> 00:01:45,500
0,180 180,360 360,570 570,750 750,1080
like really working with goroutine,|

55
00:01:45,500 --> 00:01:47,920
0,420 630,1680 1680,1980
so kind of,

56
00:01:48,010 --> 00:01:49,120
0,390 390,450 450,660 660,960 960,1110
initially it was tricky to

57
00:01:49,120 --> 00:01:51,880
0,210 210,420 420,1890 2190,2580 2610,2760
think through like,| like as

58
00:01:51,880 --> 00:01:52,900
0,120 120,240 240,360 360,690 690,1020
soon as the main thread

59
00:01:52,900 --> 00:01:54,340
0,420 420,750 750,1050 1050,1170 1170,1440
and {all,the,goroutines -} are ended,|

60
00:01:54,340 --> 00:01:55,870
0,180 180,420 420,630 960,1380 1380,1530
so kind of working through

61
00:01:55,870 --> 00:01:57,250
0,210 210,690 690,870 870,930 930,1380
those early kind of conceptual

62
00:01:57,250 --> 00:02:00,970
0,360 360,480 480,930 930,1470 3420,3720
issues,| but it's interesting.| {How,about}

63
00:02:00,970 --> 00:02:02,600
0,210 210,660 660,870 870,1170
the [Corner] {[Prisby] -}?|

64
00:02:13,170 --> 00:02:14,820
0,450 450,540 540,660 660,1080
[Connor], are you there?|

65
00:02:19,120 --> 00:02:22,060
0,750 750,1020 1020,1200 1200,1530 1530,2940
Okay, {} try somebody else,

66
00:02:22,060 --> 00:02:23,740
0,420 420,990
Dory Shen.|

67
00:02:27,120 --> 00:02:29,190
0,660 750,1140 1140,1320 1320,1560 1560,2070
Hi, {} I'm in Cambridge

68
00:02:29,190 --> 00:02:30,600
0,180 180,450 450,870 900,1170 1170,1410
right now| and I found

69
00:02:30,600 --> 00:02:32,520
0,150 150,300 300,720 750,1440 1440,1920
Go to be pretty interesting,|

70
00:02:32,520 --> 00:02:33,690
0,90 90,270 270,600 690,930 930,1170
I thought like Go through

71
00:02:33,690 --> 00:02:34,620
0,210 210,510 510,750 750,870 870,930
through the first part of

72
00:02:34,620 --> 00:02:36,870
0,90 90,660 660,1050 1050,1380 1710,2250
the tutorial,| I like learning

73
00:02:36,870 --> 00:02:37,740
0,180 180,300 300,510 510,780 780,870
about the for loops and

74
00:02:37,740 --> 00:02:38,610
0,150 150,360 360,480 480,690 690,870
the way they do for

75
00:02:38,610 --> 00:02:39,810
0,420 450,810 810,960 960,1050 1050,1200
loops,| I thought that was

76
00:02:39,810 --> 00:02:41,250
0,210 210,690 690,780 780,1110 1140,1440
pretty interesting| and like the

77
00:02:41,250 --> 00:02:42,450
0,150 150,240 240,450 450,510 510,1200
way it's kind of structured,|

78
00:02:42,480 --> 00:02:43,980
0,360 360,630 630,1020 1020,1110 1110,1500
I think that I like

79
00:02:44,490 --> 00:02:46,650
0,300 450,840 840,1500 1500,1650 1680,2160
the the threads| and {}

80
00:02:46,740 --> 00:02:48,450
0,570 570,690 690,1080 1110,1560 1560,1710
found to be a little

81
00:02:48,450 --> 00:02:50,010
0,450 450,600 600,990 990,1320 1320,1560
bit more difficult about when

82
00:02:50,010 --> 00:02:51,990
0,120 120,690 690,1080 1200,1560 1560,1980
it ended,| like when {}

83
00:02:52,530 --> 00:02:53,910
0,570 570,720 720,1050 1050,1230 1230,1380
sometimes the function would end

84
00:02:53,910 --> 00:02:55,110
0,240 240,360 360,450 450,990 990,1200
before all the routines like

85
00:02:55,110 --> 00:02:56,730
0,390 390,690 900,1080 1080,1260 1260,1620
ended,| so that was like

86
00:02:57,180 --> 00:02:58,350
0,480 480,600 600,780 780,1050 1050,1170
interesting to think about,| and

87
00:02:58,350 --> 00:02:59,190
0,150 150,210 210,420 420,600 600,840
like I learned more about

88
00:02:59,190 --> 00:03:00,090
0,240 240,390 390,510 510,690 690,900
that,| so it's pretty cool,

89
00:03:00,090 --> 00:03:02,880
0,120 120,390 390,540 1110,2070 2100,2790
I liked it.| Well, hope

90
00:03:02,880 --> 00:03:03,600
0,150 150,300 300,420 420,480 480,720
you gonna have a very

91
00:03:03,600 --> 00:03:06,090
0,390 390,990 990,1410 1410,1890 1890,2490
positive experience with Go {}

92
00:03:07,440 --> 00:03:09,720
0,150 150,720 1020,1650 1650,2100 2130,2280
this semester,| {} and, {}

93
00:03:09,720 --> 00:03:10,530
0,180 180,330 330,540 540,720 720,810
so let me say a

94
00:03:10,530 --> 00:03:11,340
0,180 180,420 420,600 600,660 660,810
little bit like you know

95
00:03:11,340 --> 00:03:13,740
0,870 870,1350 1470,1980
why Go? {}|

96
00:03:14,210 --> 00:03:15,530
0,450 450,960 960,1050 1050,1170 1170,1320
In principle, you know there's

97
00:03:15,530 --> 00:03:17,150
0,30 30,300 300,450 720,1170 1170,1620
a lot of programming languages|

98
00:03:17,150 --> 00:03:18,200
0,90 90,210 210,360 360,510 510,1050
that you could have used

99
00:03:18,200 --> 00:03:19,670
0,180 180,450 450,840 840,1350 1350,1470
for doing distributed programming| and

100
00:03:19,670 --> 00:03:20,780
0,330 330,420 420,840 840,1020 1020,1110
Go is absolutely not the

101
00:03:20,780 --> 00:03:22,610
0,180 180,540 960,1320 1320,1500 1500,1830
only one,| but some reasons

102
00:03:22,610 --> 00:03:24,680
0,240 240,990 1020,1410 1410,1650 1650,2070
why we why we chose

103
00:03:24,680 --> 00:03:26,000
0,390 390,630 630,690 690,870 870,1320
Go in {6.824 - -},|

104
00:03:26,180 --> 00:03:27,530
0,750 750,870 870,1020 1020,1290 1290,1350
{} you know first of

105
00:03:27,530 --> 00:03:28,670
0,120 120,210 210,360 360,540 540,1140
all, it has good support

106
00:03:30,320 --> 00:03:34,310
0,360 360,840 840,990 990,1740 3270,3990
for threads and RPC| and

107
00:03:34,910 --> 00:03:36,860
0,750 990,1260 1260,1350 1350,1620 1620,1950
those two are very important

108
00:03:36,860 --> 00:03:39,170
0,90 90,540 540,1110 1500,1980 2130,2310
for distributed programming,| so it

109
00:03:39,170 --> 00:03:40,850
0,210 210,570 570,1140 1230,1290 1290,1680
makes sense to you know

110
00:03:40,850 --> 00:03:41,930
0,420 420,690 690,840 840,900 900,1080
it,| Go there's a good

111
00:03:41,930 --> 00:03:43,730
0,210 210,300 300,630 1080,1440 1440,1800
match for that.| Second reason

112
00:03:43,730 --> 00:03:44,420
0,150 150,300 300,390 390,450 450,690
we like it a lot

113
00:03:44,420 --> 00:03:45,200
0,150 150,360 360,450 450,540 540,780
is you know they have

114
00:03:45,200 --> 00:03:46,880
0,120 120,480 480,960 1020,1620 1620,1680
a garbage collector| and if

115
00:03:46,880 --> 00:03:48,440
0,120 120,570 570,840 840,1170 1170,1560
you do share namely style

116
00:03:48,440 --> 00:03:50,720
0,570 570,1080 1080,1470 1470,1740 1740,2280
parallelism| where multiple threads share

117
00:03:50,750 --> 00:03:53,810
0,510 540,1260 1440,1770 1770,2460 2790,3060
a structure,| where variable {}

118
00:03:53,810 --> 00:03:55,340
0,240 240,540 540,600 600,930 930,1530
then having a garbage collector

119
00:03:55,340 --> 00:03:56,690
0,420 420,810 810,1110 1110,1260 1260,1350
is nice,| because then the

120
00:03:56,690 --> 00:03:57,770
0,240 240,480 480,570 570,660 660,1080
threads don't have to decide

121
00:03:57,770 --> 00:03:59,420
0,240 240,360 360,930 1080,1380 1380,1650
who's the last {} thread

122
00:03:59,420 --> 00:04:00,650
0,150 150,510 510,720 720,840 840,1230
that actually has a reference

123
00:04:00,650 --> 00:04:02,030
0,150 150,360 360,810 810,1140 1140,1380
to his memory| and should

124
00:04:02,030 --> 00:04:04,220
0,450 450,630 630,1200 1290,1710 1770,2190
therefore {deallocated -},| a garbage

125
00:04:04,220 --> 00:04:05,420
0,300 300,600 630,870 870,1110 1110,1200
collector just takes care of

126
00:04:05,420 --> 00:04:06,680
0,180 180,360 360,1020
all those problems.|

127
00:04:06,980 --> 00:04:10,250
0,270 270,810 1470,1980 2130,2580 2580,3270
That's convenient {} type safe.|

128
00:04:12,800 --> 00:04:14,180
0,780

129
00:04:14,420 --> 00:04:16,370
0,210 210,510 510,1290 1320,1470 1470,1950
It is simple, it's a

130
00:04:16,400 --> 00:04:18,800
0,780 780,1080 1080,1500 1500,2040 2070,2400
reasonable simple programming language,| quite

131
00:04:18,800 --> 00:04:20,270
0,570 570,690 690,1140 1140,1410 1410,1470
easy to learn,| and in

132
00:04:20,270 --> 00:04:21,770
0,300 300,390 390,570 570,1050 1110,1500
fact you know ideas, hopefully

133
00:04:21,770 --> 00:04:22,700
0,90 90,270 270,360 360,780 780,930
you've got that experience with

134
00:04:22,700 --> 00:04:24,200
0,360 360,960 960,1200 1200,1290 1290,1500
{in,Go} tutorial,| that I want

135
00:04:24,200 --> 00:04:25,280
0,120 120,270 270,450 450,960 960,1080
you to Go tutorial, you

136
00:04:25,280 --> 00:04:26,690
0,360 360,750 750,930 930,1020 1020,1410
mostly got most of Go|

137
00:04:27,440 --> 00:04:29,810
0,600 900,1110 1110,1590 1590,1950 1950,2370
and then finally, {it,actually} have

138
00:04:29,810 --> 00:04:31,520
0,240 270,810 810,930 930,1050 1050,1710
a compiler,| so it's compiled,|

139
00:04:32,200 --> 00:04:35,740
0,1500 1530,2250 2280,2730 2760,3420 3420,3540
unlike python| or {} you

140
00:04:35,740 --> 00:04:37,690
0,210 210,870 870,1140 1140,1470 1470,1950
know actually the compiler producers

141
00:04:37,690 --> 00:04:39,070
0,270 270,540 540,960 960,1110 1110,1380
actually usable code,| so the

142
00:04:39,100 --> 00:04:40,690
0,420 420,840 840,960 960,1200 1200,1590
runtime overhead is not as

143
00:04:40,720 --> 00:04:43,900
0,450 1260,1710 2460,2820 2820,3120 3120,3180
large,| I guess sort of

144
00:04:43,900 --> 00:04:45,310
0,90 90,420 420,720 720,1200 1200,1410
the final reason why {6.824

145
00:04:45,310 --> 00:04:46,480
0,150 150,330 330,480 480,870 870,1170
- - - -} in

146
00:04:46,480 --> 00:04:47,920
0,390 390,510 510,840 840,1170 1170,1440
Go,| in those pictures, I

147
00:04:47,920 --> 00:04:50,380
0,630 630,1050 1260,1620 1620,2190 2190,2460
enjoyed writing Go programs| and

148
00:04:50,380 --> 00:04:51,730
0,210 210,420 420,570 570,960 960,1350
so that may be also

149
00:04:51,730 --> 00:04:53,540
0,90 90,450 450,780
an important reason.|

150
00:04:54,140 --> 00:04:55,490
0,570 780,960 960,1080 1080,1170 1170,1350
{} So what I'm gonna

151
00:04:55,490 --> 00:04:56,420
0,330 330,690 690,750 750,870 870,930
do is,| I'm going to

152
00:04:56,420 --> 00:04:57,380
0,90 90,120 120,300 300,450 450,960
talk a little bit about

153
00:04:57,410 --> 00:04:58,700
0,240 240,300 300,780 780,930 930,1290
threads in general, {} machine

154
00:04:58,700 --> 00:05:00,860
0,690 840,1410 1410,1980 1980,2100 2100,2160
{in,general},| {} and you know

155
00:05:00,860 --> 00:05:02,000
0,210 210,240 240,450 450,630 630,1140
talk a little bit about

156
00:05:02,030 --> 00:05:04,640
0,1080 1110,1470 1470,1950 1950,2130 2130,2610
{} different aspects of programming

157
00:05:04,640 --> 00:05:06,320
0,600 930,1230 1230,1350 1350,1530 1530,1680
{with,threads},| some of that is

158
00:05:06,320 --> 00:05:08,840
0,330 330,1110 1140,2160 2160,2340 2340,2520
pretty tutorial,| you have seen

159
00:05:08,840 --> 00:05:10,820
0,120 120,780 960,1710 1710,1800 1800,1980
this before,| {} you know

160
00:05:10,820 --> 00:05:12,620
0,150 150,900 900,1290 1290,1470 1470,1800
my apologies, I'm gonna go

161
00:05:12,620 --> 00:05:14,570
0,330 330,690 690,1170 1200,1620 1620,1950
reasonable quickly {through,it},| it's definitely

162
00:05:14,570 --> 00:05:16,340
0,270 270,360 360,1170 1170,1650 1650,1770
not a comprehensive introduction to

163
00:05:16,340 --> 00:05:18,590
0,330 330,960 1230,1740 1740,2040 2040,2250
concurrent programming,| but hopefully enough

164
00:05:18,590 --> 00:05:19,910
0,120 120,480 480,960 990,1170 1170,1320
to remind you of what

165
00:05:19,910 --> 00:05:21,410
0,60 60,450 450,840 870,1290 1290,1500
the issues are| and what

166
00:05:21,410 --> 00:05:22,160
0,90 90,210 210,330 330,510 510,750
you should look out for.|

167
00:05:22,560 --> 00:05:23,700
0,480 480,600 600,840 840,1020 1020,1140
And we also spend some

168
00:05:23,700 --> 00:05:24,930
0,510 510,1020 1020,1050 1050,1170 1170,1230
time quite a bit of

169
00:05:24,930 --> 00:05:26,320
0,150 150,300 300,360 360,810
talk about the crawler.|

170
00:05:26,520 --> 00:05:28,650
0,270 270,1020 1290,1530 1530,1800 1800,2130
And so I'll show you

171
00:05:28,650 --> 00:05:30,000
0,330 360,810 810,1080 1200,1230 1230,1350
a solution that I have

172
00:05:30,000 --> 00:05:31,500
0,150 150,600 600,840 840,1080 1080,1500
two solutions,| one using channels

173
00:05:31,500 --> 00:05:33,240
0,120 120,300 300,780 780,1230 1230,1740
and ones using {mutexes -}|

174
00:05:33,360 --> 00:05:34,230
0,240 240,360 360,510 510,660 660,870
and we'll go through both

175
00:05:34,230 --> 00:05:35,060
0,60 60,300
of them.|

176
00:05:36,140 --> 00:05:37,400
0,210 210,510 510,660 660,960 960,1260
Any questions so far before

177
00:05:37,400 --> 00:05:39,180
0,270 420,900 900,1140
I dive in.|

178
00:05:44,920 --> 00:05:46,840
0,750 780,1200 1200,1440 1440,1650 1650,1920
Okay, when you get started

179
00:05:46,840 --> 00:05:48,120
0,120 120,660
with threats.

180
00:05:50,050 --> 00:05:51,640
0,360 360,630 630,720 720,1080 1080,1590
So Fred is basically shorthand

181
00:05:51,640 --> 00:05:53,140
0,60 60,180 180,570 570,690 690,1500
for a thread of execution.

182
00:05:57,360 --> 00:06:00,360
0,600 600,1170 1170,1860 1890,2700 2700,3000
Um, in a Goa friends

183
00:06:00,360 --> 00:06:02,430
0,180 180,270 270,450 450,1080 1080,2070
called the go routine but

184
00:06:02,430 --> 00:06:03,600
0,300 300,660 660,870 870,1110 1110,1170
everybody else they blame the

185
00:06:03,600 --> 00:06:05,130
0,360 360,780 780,1230 1230,1290 1290,1530
world goals calls a threat

186
00:06:05,130 --> 00:06:06,600
0,30 30,420 1140,1290 1290,1410 1410,1470
a threat and so the

187
00:06:06,600 --> 00:06:07,410
0,150 150,270 270,420 420,660 660,810
way to think about it

188
00:06:07,410 --> 00:06:09,570
0,210 210,420 420,780 780,1290 1410,2160
is that when you um

189
00:06:09,600 --> 00:06:11,310
0,210 210,480 480,900 900,1170 1170,1710
do go run now the

190
00:06:11,370 --> 00:06:13,050
0,480 480,750 750,990 990,1020 1020,1680
go will create a process

191
00:06:13,080 --> 00:06:14,280
0,210 210,330 330,660 660,870 870,1200
you know on your operating

192
00:06:14,280 --> 00:06:15,300
0,630
system.

193
00:06:15,480 --> 00:06:16,380
0,390 390,480 480,570 570,810 810,900
And in the sight of

194
00:06:16,380 --> 00:06:17,430
0,90 90,720 720,810 810,930 930,1050
a process you know the

195
00:06:17,430 --> 00:06:19,680
0,240 240,630 630,1260
goal runtime system.

196
00:06:19,860 --> 00:06:21,150
0,300 300,570 570,750 750,1170 1170,1290
And when go start it

197
00:06:21,150 --> 00:06:22,170
0,300 300,450 450,690 690,930 930,1020
actually has one thread of

198
00:06:22,170 --> 00:06:24,360
0,630 630,720 720,990 990,1320 1620,2190
execution, the main threat and

199
00:06:24,360 --> 00:06:25,710
0,240 240,360 360,510 510,1260 1260,1350
then it has primitives to

200
00:06:25,710 --> 00:06:26,820
0,270 270,480 480,870 870,990 990,1110
create new frets and so

201
00:06:26,820 --> 00:06:27,660
0,120 120,270 270,450 450,690 690,840
you can think about this,

202
00:06:27,660 --> 00:06:28,710
0,210 210,300 300,540 540,780 780,1050
those or many many threats

203
00:06:28,710 --> 00:06:30,180
0,90 90,900
of execution.

204
00:06:30,180 --> 00:06:32,160
0,120 120,300 300,870 870,1320 1320,1980
You know running ami parallel,

205
00:06:32,460 --> 00:06:33,150
0,210 210,300 300,450 450,660 660,690
you can think about a

206
00:06:33,150 --> 00:06:34,470
0,360 360,720 720,810 810,1140 1140,1320
single thread is basically sort

207
00:06:34,470 --> 00:06:36,360
0,120 120,540 540,1050 1050,1500 1500,1890
of a sequential program running.

208
00:06:36,920 --> 00:06:38,090
0,300 300,540 540,660 660,990 990,1170
Um, so the program has

209
00:06:38,090 --> 00:06:40,520
0,540 570,900 900,1530 2010,2220 2220,2430
a program counter, um has

210
00:06:40,520 --> 00:06:42,120
0,150 150,300 300,990
his own stack.

211
00:06:42,180 --> 00:06:43,140
0,360 360,510 510,660 660,810 810,960
And he has his own

212
00:06:43,140 --> 00:06:44,960
0,180 180,270 270,1050
set of registers.

213
00:06:47,920 --> 00:06:48,910
0,180 180,270 270,480 480,870 870,990
And so this behaves like

214
00:06:48,910 --> 00:06:50,680
0,60 60,450 450,1080 1410,1560 1560,1770
a sequential program, you can

215
00:06:51,400 --> 00:06:52,930
0,420 420,750 750,1050 1050,1170 1170,1530
execute instruction one and instruction

216
00:06:52,930 --> 00:06:54,250
0,270 270,510 510,810 810,1140 1140,1320
to their structure free and

217
00:06:54,250 --> 00:06:55,330
0,420 420,570 570,750 750,990 990,1080
for you may make a

218
00:06:55,330 --> 00:06:56,890
0,420 420,780 780,1110 1110,1440 1440,1560
procedure call allocate memory on

219
00:06:56,890 --> 00:06:58,960
0,60 60,630 630,1080 1110,1680 1680,2070
the stack, I'll return from

220
00:06:58,960 --> 00:07:00,610
0,120 120,510 510,960 1020,1170 1170,1650
a procedure call a recursive

221
00:07:00,610 --> 00:07:01,720
0,480 510,720 720,900 900,990 990,1110
call, all sort of your

222
00:07:01,720 --> 00:07:03,700
0,480 480,870 870,1200 1200,1770 1770,1980
standards, influential target programming seems

223
00:07:03,700 --> 00:07:05,020
0,180 180,570 570,1020 1020,1170 1170,1320
like happens about as a

224
00:07:05,020 --> 00:07:06,720
0,510 510,840 840,1260
sequential threat basically.

225
00:07:07,980 --> 00:07:09,900
0,570 930,1140 1140,1590 1590,1740 1740,1920
Um the interesting thing is

226
00:07:09,900 --> 00:07:10,980
0,210 210,300 300,450 450,720 750,1080
that you know the friends

227
00:07:10,980 --> 00:07:13,260
0,150 150,510 510,870 870,1380 1770,2280
may actually share memory with

228
00:07:13,260 --> 00:07:14,680
0,300 300,810
other friends.

229
00:07:15,940 --> 00:07:18,430
0,180 180,870 1140,1920 2160,2400 2400,2490
So since, um all the

230
00:07:18,430 --> 00:07:19,150
0,240 240,330 330,570 570,660 660,720
threads are running in the

231
00:07:19,150 --> 00:07:20,950
0,240 240,540 540,1110 1200,1650 1650,1800
same address space a the

232
00:07:20,950 --> 00:07:22,600
0,240 240,600 600,900 900,1170 1170,1650
same operating system address space,

233
00:07:22,810 --> 00:07:23,800
0,210 210,270 270,390 390,570 570,990
which is the same process

234
00:07:23,800 --> 00:07:25,510
0,270 270,810 990,1380 1380,1590 1590,1710
address space, um, they can

235
00:07:25,510 --> 00:07:27,670
0,240 240,720 720,1470 1500,2010 2010,2160
actually share a memory, so

236
00:07:27,670 --> 00:07:29,350
0,210 210,480 480,660 660,1020 1020,1680
one thread can write a

237
00:07:29,530 --> 00:07:31,270
0,630 630,1020 1020,1140 1140,1260 1260,1740
location say you know ten

238
00:07:31,480 --> 00:07:32,380
0,240 240,450 450,660 660,750 750,900
and then voted for it

239
00:07:32,380 --> 00:07:33,520
0,90 90,300 300,510 510,660 660,1140
can actually read that location

240
00:07:33,520 --> 00:07:34,720
0,300 480,630 630,840 840,1020 1020,1200
ten so that way they

241
00:07:34,720 --> 00:07:37,000
0,150 150,510 510,1140 1140,1740
can actually communicate information.

242
00:07:37,390 --> 00:07:39,850
0,510 1410,1860 1860,2100 2100,2280 2280,2460
A one way to think

243
00:07:39,850 --> 00:07:41,980
0,750 750,1080 1200,1530 1530,1650 1650,2130
about it too is to

244
00:07:41,980 --> 00:07:42,910
0,150 150,390 390,480 480,810 810,930
think about it as sort

245
00:07:42,910 --> 00:07:44,230
0,90 90,150 150,870 870,1080 1170,1320
of an abstraction that are

246
00:07:44,230 --> 00:07:46,630
0,630 630,1020 1020,1500 1620,2310 2310,2400
supported by the runtime and

247
00:07:46,630 --> 00:07:47,500
0,90 90,450 450,570 570,630 630,870
the runtime as a number

248
00:07:47,500 --> 00:07:48,970
0,60 60,900 900,1080 1080,1140 1140,1470
of operations on a threat

249
00:07:48,970 --> 00:07:51,280
0,240 240,510 510,1260 1530,2160 2160,2310
so long operation, um, you

250
00:07:51,280 --> 00:07:52,480
0,210 210,420 420,630 630,840 840,1200
know we've seen many times,

251
00:07:52,480 --> 00:07:53,350
0,210 210,360 360,540 540,660 660,870
if you've seen now many

252
00:07:53,350 --> 00:07:54,610
0,420 420,540 540,720 720,1080 1080,1260
times to actually started for

253
00:07:54,760 --> 00:07:55,930
0,390 390,690 690,810 810,960 960,1170
creative friends, you know this

254
00:07:55,930 --> 00:07:58,510
0,210 210,750 1320,1620 1620,2040 2070,2580
is go, seem to go

255
00:07:58,510 --> 00:08:01,390
0,750 780,1440 2070,2550 2550,2760 2760,2880
a keyboard, a thread can

256
00:08:01,390 --> 00:08:02,480
0,540
exit.

257
00:08:03,310 --> 00:08:05,410
0,540 540,900 900,1470 1470,1590 1590,2100
Generally, this means the actions

258
00:08:05,410 --> 00:08:06,460
0,300 300,540 540,720 720,840 840,1050
could place it like when

259
00:08:06,460 --> 00:08:08,710
0,60 60,360 360,1050 1140,1200 1200,2250
a friend returns to a

260
00:08:08,740 --> 00:08:12,190
0,210 210,420 420,840 2520,3060 3090,3450
from this here, if you

261
00:08:12,190 --> 00:08:13,210
0,210 210,420 420,780 780,870 870,1020
create a function, you can

262
00:08:13,210 --> 00:08:15,490
0,480 480,720 720,1350 1350,1890 1890,2280
go a go keyword, and

263
00:08:15,490 --> 00:08:16,420
0,300 300,600 600,750 750,810 810,930
you return out of the

264
00:08:16,420 --> 00:08:18,580
0,420 420,780 780,1440 1650,2070 2070,2160
function, then implicitly FedEx me

265
00:08:18,580 --> 00:08:21,220
0,600 1140,1560 1710,2040 2040,2400 2400,2640
exits a go runtime also

266
00:08:21,220 --> 00:08:22,900
0,180 180,240 240,510 510,1380 1380,1680
has a couple other of

267
00:08:22,900 --> 00:08:24,310
0,210 210,300 300,570 570,1290 1290,1410
under the hoots operations, if

268
00:08:24,310 --> 00:08:25,720
0,120 120,510 600,1230 1230,1320 1320,1410
you will one it can

269
00:08:25,720 --> 00:08:27,180
0,240 240,600 600,630 630,1080
actually stop a threat.

270
00:08:27,580 --> 00:08:28,660
0,60 90,570 570,750 750,840 840,1080
For example, if a friend

271
00:08:28,660 --> 00:08:31,210
0,330 330,870 870,1350 1350,2040 2040,2550
writes to a channel and

272
00:08:31,210 --> 00:08:32,080
0,180 180,390 390,720 720,810 810,870
there's no reader on the

273
00:08:32,080 --> 00:08:33,610
0,360 360,660 660,1230 1230,1320 1320,1530
channel yet then the friend

274
00:08:33,610 --> 00:08:35,500
0,450 450,660 660,1170 1410,1770 1770,1890
might get blocked and so

275
00:08:35,500 --> 00:08:36,880
0,90 90,300 300,720 720,1290 1290,1380
the go runtime stops the

276
00:08:36,880 --> 00:08:39,220
0,450 480,930 930,1140 1140,1710 2100,2340
thread puts its side so

277
00:08:39,220 --> 00:08:40,240
0,240 240,330 330,570 570,750 750,1020
it can actually run another

278
00:08:40,240 --> 00:08:42,820
0,360 360,990 990,1080 1080,1710 2130,2580
thread on the processor, um,

279
00:08:42,820 --> 00:08:44,290
0,330 330,450 450,750 750,1050 1050,1470
and then maybe later on

280
00:08:44,290 --> 00:08:47,200
0,420 420,660 660,930 930,1380 1470,2910
resume stuff threat so a

281
00:08:47,200 --> 00:08:49,030
0,330 330,960 960,1290 1290,1530 1530,1830
final primitive actually through soon

282
00:08:49,030 --> 00:08:49,780
0,150 150,450
for us.

283
00:08:50,110 --> 00:08:50,890
0,210 210,360 360,480 480,570 570,780
And really what it means

284
00:08:50,890 --> 00:08:51,970
0,90 90,420 420,750 750,960 960,1080
to stop Zuma, Fred is

285
00:08:51,970 --> 00:08:53,080
0,360 360,660 660,750 750,1050 1050,1110
basically taking the state of

286
00:08:53,080 --> 00:08:54,100
0,120 120,450 450,570 570,690 690,1020
the thread like the program

287
00:08:54,100 --> 00:08:56,380
0,600 930,1350 1350,1980 2070,2220 2220,2280
counter stack pointer and the

288
00:08:56,380 --> 00:08:59,470
0,390 390,780 780,1470 1800,2460 2460,3090
register reported insight run, another

289
00:08:59,650 --> 00:09:01,150
0,270 270,360 360,450 450,1050 1320,1500
thread on the processor and

290
00:09:01,150 --> 00:09:02,140
0,150 150,240 240,390 390,870 870,990
then at some point you

291
00:09:02,140 --> 00:09:03,520
0,450 450,570 570,870 870,960 960,1380
decided to resume the process

292
00:09:03,520 --> 00:09:04,840
0,180 180,450 450,900 900,1230 1230,1320
which means basically loading the

293
00:09:04,840 --> 00:09:06,430
0,330 330,780 780,960 960,1500 1500,1590
program counter stack pointer and

294
00:09:06,430 --> 00:09:07,540
0,90 90,480 480,810 810,990 990,1110
the registers back into the

295
00:09:07,540 --> 00:09:08,890
0,480 480,690 690,870 990,1290 1290,1350
process so they start to

296
00:09:08,890 --> 00:09:09,580
0,150 150,270
run it.

297
00:09:10,260 --> 00:09:11,100
0,270 270,480 480,600 600,690 690,840
So that's sort of a

298
00:09:11,100 --> 00:09:14,010
0,270 270,750 750,1440 1740,2100 2100,2910
very mechanical view of a

299
00:09:14,010 --> 00:09:19,120
0,510
threat.

300
00:09:19,180 --> 00:09:20,770
0,180 180,450 450,690 690,1020 1020,1590
So why you have friends

301
00:09:20,770 --> 00:09:21,880
0,120 120,180 180,450 450,840 960,1110
in the first place that

302
00:09:21,880 --> 00:09:22,960
0,240 240,420 420,480 480,840 840,1080
seems like an important point

303
00:09:22,960 --> 00:09:24,900
0,390 420,1260
to discuss.

304
00:09:26,010 --> 00:09:27,360
0,90
Yes.

305
00:09:28,110 --> 00:09:29,160
0,270 270,330 330,540 540,930 930,1050
Because in some ways the

306
00:09:29,160 --> 00:09:30,990
0,360 360,630 630,630 1230,1680 1680,1830
living threads, eu eyes, make

307
00:09:30,990 --> 00:09:32,130
0,90 90,300 300,480 480,1020 1020,1140
your life more complicated as

308
00:09:32,130 --> 00:09:33,300
0,60 60,630
a programmer.

309
00:09:33,660 --> 00:09:34,830
0,120 120,300 300,540 540,750 750,1170
You know, like writing sequential

310
00:09:34,830 --> 00:09:36,030
0,300 300,390 390,630 630,840 840,1200
code is actually it's easier

311
00:09:36,030 --> 00:09:37,890
0,180 180,420 420,750 750,1080 1500,1860
than writing parallel code, the

312
00:09:37,890 --> 00:09:38,940
0,240 240,480 480,570 570,840 840,1050
main reason to have it.

313
00:09:39,500 --> 00:09:40,400
0,90 90,420 420,600 600,690 690,900
The main reason we care

314
00:09:40,400 --> 00:09:41,930
0,60 60,210 210,420 420,930 930,1530
a lot about everything, um,

315
00:09:42,350 --> 00:09:44,940
0,1020 1020,1170 1170,1320 1320,2040
64 used to express.

316
00:09:45,030 --> 00:09:46,400
0,540 540,720
Encourage you.

317
00:09:49,890 --> 00:09:51,210
0,150 150,300 300,420 420,990 990,1320
And sort of three different

318
00:09:51,210 --> 00:09:52,830
0,300 300,570 570,1050 1050,1380 1380,1620
types or two or three

319
00:09:52,830 --> 00:09:53,910
0,240 240,450 450,510 510,960 960,1080
different types of currency that

320
00:09:53,910 --> 00:09:54,900
0,90 90,300 300,540 540,810 810,990
we actually care about, so

321
00:09:54,900 --> 00:09:57,210
0,270 300,510 510,780 780,1050 1470,2310
we think about our process,

322
00:09:57,210 --> 00:09:58,950
0,240 270,480 480,600 600,1230 1500,1740
we are in time with

323
00:09:58,950 --> 00:10:00,560
0,210 210,480 480,1110
our fridge running.

324
00:10:00,560 --> 00:10:02,060
0,510 510,630 630,720 720,1230 1230,1500
Um, you know one type

325
00:10:02,060 --> 00:10:02,900
0,60 60,480 480,570 570,660 660,840
of conclusion that we care

326
00:10:02,900 --> 00:10:03,860
0,60 60,240 240,540 540,690 690,960
a lot about this io

327
00:10:03,860 --> 00:10:06,100
0,600
currency.

328
00:10:08,740 --> 00:10:10,030
0,210 210,510 510,600 600,780 780,1290
So one of these friends

329
00:10:10,030 --> 00:10:11,770
0,450 450,750 750,1260 1350,1560 1560,1740
was running here, it might

330
00:10:11,770 --> 00:10:13,030
0,300 300,510 510,540 540,900 900,1260
actually make a network call

331
00:10:13,390 --> 00:10:15,220
0,360 360,990 990,1260 1260,1710 1710,1830
connect to another machine on

332
00:10:15,220 --> 00:10:16,900
0,90 90,600 900,1440 1440,1560 1560,1680
the network, a Euro to

333
00:10:16,900 --> 00:10:18,940
0,360 360,390 390,810 810,1620 1830,2040
implement a distributed application of

334
00:10:18,940 --> 00:10:21,400
0,180 180,390 390,930 1140,1770 1770,2460
like map, reduce, um, and

335
00:10:21,400 --> 00:10:22,390
0,180 180,360 360,660 660,780 780,990
you know as it makes

336
00:10:22,390 --> 00:10:23,920
0,150 150,870 900,1350 1350,1440 1440,1530
up a call, you know

337
00:10:23,920 --> 00:10:25,240
0,120 120,270 270,420 420,900 930,1320
it's gonna be blocked waiting

338
00:10:25,240 --> 00:10:26,410
0,120 120,150 150,810 840,960 960,1170
for a response and why

339
00:10:26,410 --> 00:10:27,490
0,150 150,570 570,660 660,780 780,1080
it's blocked and they're waiting

340
00:10:27,490 --> 00:10:28,990
0,150 150,240 240,840 990,1380 1380,1500
for a response everything you

341
00:10:28,990 --> 00:10:30,160
0,420 420,570 570,810 810,1020 1020,1170
need to actually run some

342
00:10:30,160 --> 00:10:31,160
0,150 150,720
other threads.

343
00:10:31,340 --> 00:10:33,470
0,420 420,570 570,750 750,1380 1920,2130
Um, so that we're sort

344
00:10:33,470 --> 00:10:34,610
0,120 120,360 360,630 630,870 870,1140
of give more, we're not

345
00:10:34,610 --> 00:10:35,600
0,180 180,600 600,720 720,930 930,990
over example, we want to

346
00:10:35,600 --> 00:10:37,250
0,330 330,750 750,1140 1140,1230 1230,1650
issue multiple requests and multiple

347
00:10:37,250 --> 00:10:39,980
0,630 990,1380 1470,1980 1980,2640 2640,2730
machines a roughly parallel you

348
00:10:39,980 --> 00:10:40,670
0,180 180,300 300,450 450,600 600,690
know we could just do

349
00:10:40,670 --> 00:10:41,930
0,210 210,300 300,690 690,930 930,1260
that with fire off on

350
00:10:41,930 --> 00:10:43,130
0,150 150,630 630,900 900,990 990,1200
the routine and the fire

351
00:10:43,130 --> 00:10:44,300
0,90 90,420 420,840 840,930 930,1170
in Africa routine a go

352
00:10:44,300 --> 00:10:45,380
0,270 270,420 420,900 900,1020 1020,1080
routine that all kind of

353
00:10:45,380 --> 00:10:46,700
0,420 540,660 660,810 810,1230 1230,1320
scent and make connections to

354
00:10:46,700 --> 00:10:48,220
0,330 330,510 510,1020
other love machines.

355
00:10:48,810 --> 00:10:49,710
0,270 270,480 480,750 750,780 780,900
That's one reason I don't

356
00:10:49,710 --> 00:10:50,580
0,180 180,240 240,420 420,660 660,870
care a lot about it.

357
00:10:51,210 --> 00:10:52,800
0,600 600,1020 1020,1140 1140,1380 1380,1590
Io currency, the second reason

358
00:10:52,800 --> 00:10:54,000
0,90 90,150 150,360 360,720 720,1200
that we care about is

359
00:10:54,000 --> 00:10:55,290
0,90 90,210 210,600 600,780 780,1290
you know allows for multiple

360
00:10:55,290 --> 00:10:57,140
0,270 270,840
or parallelism.

361
00:11:03,310 --> 00:11:04,900
0,300 300,540 540,930 930,1170 1170,1590
So we have a multiple

362
00:11:04,900 --> 00:11:06,430
0,630 630,780 780,900 900,1380 1410,1530
course, you know our you

363
00:11:06,430 --> 00:11:09,910
0,360 1320,1860 1860,1950 1950,2670 2760,3480
know computer or processor, then

364
00:11:09,910 --> 00:11:11,500
0,90 90,210 210,570 570,1170 1170,1590
we can have one friend

365
00:11:11,500 --> 00:11:12,820
0,270 270,480 480,780 780,960 960,1320
running on one go routine

366
00:11:12,820 --> 00:11:14,170
0,240 240,330 330,600 600,1080 1200,1350
running on one core and

367
00:11:14,170 --> 00:11:15,460
0,270 270,720 720,870 870,1110 1110,1290
another friend or another go

368
00:11:15,460 --> 00:11:16,690
0,360 360,570 570,660 660,960 960,1230
routine running on another court

369
00:11:16,690 --> 00:11:18,440
0,270 270,720 720,1260
usually striking parallel.

370
00:11:18,440 --> 00:11:19,790
0,240 240,330 330,690 690,1020 1020,1350
And for example we implement

371
00:11:19,790 --> 00:11:21,380
0,300 300,480 480,810 810,1320 1320,1590
a key value servers, then

372
00:11:21,380 --> 00:11:23,540
0,120 120,300 300,960 960,1530 1560,2160
we could process we request

373
00:11:23,540 --> 00:11:24,560
0,90 90,360 360,690 690,840 840,1020
for different keys and key

374
00:11:24,560 --> 00:11:26,030
0,330 330,720 720,990 990,1170 1170,1470
value servers use on different

375
00:11:26,030 --> 00:11:28,430
0,270 270,690 690,1230 1230,2010 2010,2400
cores completely parallel increasing our

376
00:11:28,760 --> 00:11:30,020
0,750
fruit.

377
00:11:30,440 --> 00:11:31,430
0,150 150,450 450,720 720,780 780,990
So those are the two

378
00:11:31,430 --> 00:11:32,480
0,300 300,630 630,720 720,840 840,1050
main reasons that we care

379
00:11:32,480 --> 00:11:34,730
0,60 60,390 420,870 870,1320 1470,2250
a lot about, um cursing

380
00:11:35,180 --> 00:11:36,800
0,570 570,930 930,1380 1380,1530 1530,1620
bike threats there's sort of

381
00:11:36,800 --> 00:11:38,030
0,60 60,390 390,870 870,990 990,1230
a third reason and there's

382
00:11:38,030 --> 00:11:39,470
0,120 120,420 420,540 540,630 630,1440
a little bit of convenience.

383
00:11:43,840 --> 00:11:45,100
0,240 240,390 390,510 510,870 870,1260
There's gonna be numerous cases

384
00:11:45,100 --> 00:11:45,910
0,90 90,180 180,450 450,510 510,810
in the lab, for example

385
00:11:45,910 --> 00:11:48,310
0,240 240,360 360,810 1020,1950 1980,2400
where we wanna um have

386
00:11:48,310 --> 00:11:50,380
0,270 270,630 630,1350 1410,1830 1830,2070
something happened periodically, maybe every

387
00:11:50,380 --> 00:11:51,610
0,420 450,660 660,900 900,1110 1110,1230
second or every two in

388
00:11:51,610 --> 00:11:53,440
0,780 840,1350 1440,1650 1650,1740 1740,1830
milliseconds and now we can

389
00:11:53,440 --> 00:11:54,640
0,270 270,630 630,690 690,990 990,1200
just launch a threat for

390
00:11:54,640 --> 00:11:55,630
0,150 150,360 360,690 690,780 780,990
a go routine for that

391
00:11:55,630 --> 00:11:57,370
0,300 300,360 360,690 690,810 810,1740
there's a sleep for {200,,milliseconds,}

392
00:11:57,370 --> 00:11:58,060
0,180 180,360 360,450 450,510 510,690
it does what it needs

393
00:11:58,060 --> 00:11:58,930
0,90 90,450 450,570 570,780 780,870
to do and then it

394
00:11:58,930 --> 00:11:59,800
0,180 180,390 390,480 480,750 750,870
goes back to sleep for

395
00:11:59,800 --> 00:12:02,200
0,990 1260,1500 1500,1650 1650,2100 2100,2400
{200,,milliseconds,} so it's convenient to

396
00:12:02,230 --> 00:12:05,020
0,360 360,690 1410,2070 2070,2640 2640,2790
have these background activities that

397
00:12:05,020 --> 00:12:06,310
0,150 150,210 210,330 330,540 540,1290
need to be done periodically,

398
00:12:06,310 --> 00:12:07,210
0,150 150,240 240,360 360,720 720,900
and you can express that

399
00:12:07,210 --> 00:12:08,560
0,450 630,990 990,1080 1080,1290 1290,1350
using threats of course you

400
00:12:08,560 --> 00:12:09,250
0,90 90,360 360,450 450,540 540,690
can express it in other

401
00:12:09,250 --> 00:12:10,630
0,300 300,390 390,630 630,750 750,1380
ways, the threads are actually

402
00:12:10,840 --> 00:12:11,780
0,600
convenient.

403
00:12:13,200 --> 00:12:14,640
0,390 390,750 750,870 870,1050 1050,1440
Another question that comes up

404
00:12:14,670 --> 00:12:16,230
0,540 540,870 870,1140 1140,1350 1350,1560
often in I think came

405
00:12:16,230 --> 00:12:16,800
0,120 120,240 240,390 390,510 510,570
up with some of the

406
00:12:16,800 --> 00:12:18,210
0,360 360,810 810,990 990,1230 1230,1410
electric questions, so today look

407
00:12:18,210 --> 00:12:18,990
0,120 120,300 300,630 630,690 690,780
how many friends do you

408
00:12:18,990 --> 00:12:20,100
0,540
create.

409
00:12:20,100 --> 00:12:21,270
0,210 210,210 210,750 750,870 870,1170
And I think the gold

410
00:12:21,270 --> 00:12:22,380
0,420 420,570 660,870 870,1020 1020,1110
design or the way they

411
00:12:22,380 --> 00:12:23,250
0,270 270,360 360,450 450,630 630,870
want you to think about

412
00:12:23,250 --> 00:12:24,030
0,150 150,300 300,510 510,600 600,780
it is that you should

413
00:12:24,030 --> 00:12:24,900
0,240 240,360 360,570 570,780 780,870
create as many friends as

414
00:12:24,900 --> 00:12:26,910
0,120 120,480 630,1260 1440,1650 1650,2010
you need, um, they're definitely

415
00:12:26,910 --> 00:12:28,170
0,270 270,630 660,870 870,990 990,1260
not free when they tie

416
00:12:28,170 --> 00:12:29,310
0,150 150,270 270,810 810,1050 1050,1140
up some memory because you're

417
00:12:29,310 --> 00:12:30,510
0,120 120,210 210,630 630,690 690,1200
going to have a stack

418
00:12:30,840 --> 00:12:33,090
0,480 480,990 990,1530 1530,1800 1830,2250
oz performs overhead we're starting

419
00:12:33,090 --> 00:12:34,590
0,360 600,900 900,1080 1080,1320 1320,1500
them, um, but there's you

420
00:12:34,590 --> 00:12:35,550
0,300 300,480 480,720 720,840 840,960
should think about them as

421
00:12:35,550 --> 00:12:37,950
0,270 270,930 1020,1680 1680,2160 2160,2400
very lightweight, a also you

422
00:12:37,950 --> 00:12:39,210
0,150 150,270 270,930 930,1110 1110,1260
should be encouraging or you're

423
00:12:39,210 --> 00:12:40,980
0,450 450,540 540,900 900,1410 1440,1770
encouraged to create a reference

424
00:12:40,980 --> 00:12:41,900
0,120 120,210 210,450
as you go.

425
00:12:43,640 --> 00:12:45,590
0,690 720,1470 1470,1710 1710,1860 1860,1950
Any questions about sort of

426
00:12:45,590 --> 00:12:47,360
0,330 360,1050 1050,1320 1320,1650 1650,1770
this basic reason why to

427
00:12:47,360 --> 00:12:48,560
0,180 180,720
have friends.

428
00:12:55,060 --> 00:12:56,470
0,270 270,420 420,660 660,990 990,1410
Okay, let me um, then

429
00:12:56,590 --> 00:12:58,090
0,150 150,540 630,960 960,1080 1080,1500
you know as I mentioned

430
00:12:58,090 --> 00:13:00,790
0,1080 1110,1380 1380,1890 1890,2100 2100,2700
earlier, France actually have challenges.

431
00:13:03,350 --> 00:13:05,390
0,660 660,1080 1080,1230 1230,1800 1920,2040
Programming reference has challenges so

432
00:13:05,390 --> 00:13:06,110
0,120 120,210 210,450 450,510 510,720
let me talk a little

433
00:13:06,110 --> 00:13:07,780
0,120 120,300 300,390 390,960
bit about the challenges.

434
00:13:07,780 --> 00:13:08,500
0,150 150,270 270,390 390,450 450,720
I'm not going to go

435
00:13:08,500 --> 00:13:10,210
0,240 240,480 480,690 780,1230 1230,1710
great amount of depth here

436
00:13:10,210 --> 00:13:11,650
0,330 330,690 690,1140 1140,1320 1320,1440
I I assume that you

437
00:13:11,650 --> 00:13:12,670
0,120 120,420 420,600 660,900 900,1020
know there's a they all

438
00:13:12,670 --> 00:13:13,870
0,180 180,510 510,720 720,960 960,1200
make sense and will become

439
00:13:13,870 --> 00:13:14,860
0,150 150,480 480,570 570,810 810,990
more clear if we look

440
00:13:14,860 --> 00:13:16,000
0,180 180,330 330,390 390,480 480,1140
at some of the examples

441
00:13:16,570 --> 00:13:18,580
0,180 180,510 510,810 810,1440 1440,2010
and probably the main reason,

442
00:13:18,700 --> 00:13:20,200
0,450 450,810 810,930 930,1110 1110,1500
um that you know FedEx

443
00:13:20,200 --> 00:13:21,520
0,120 120,510 510,1020 1020,1170 1170,1320
and you're challenging is that

444
00:13:21,520 --> 00:13:22,660
0,60 60,180 180,330 330,540 540,1140
you can have raised conditions.

445
00:13:30,890 --> 00:13:31,850
0,180 180,360 360,510 510,630 630,960
And just like a basic

446
00:13:31,850 --> 00:13:34,160
0,780 810,1560 1560,2010 2010,2160 2160,2310
example operation condition, let's say

447
00:13:34,160 --> 00:13:35,390
0,120 120,390 390,600 600,1140 1140,1230
you have two friends, you

448
00:13:35,390 --> 00:13:37,120
0,90 90,450 450,630 630,1140
know, here's t one.

449
00:13:37,440 --> 00:13:39,240
0,270 270,510 510,1170
It's too true.

450
00:13:39,240 --> 00:13:41,370
0,1170 1200,1380 1380,1620 1620,1680 1680,2130
And they share a variable

451
00:13:41,370 --> 00:13:42,750
0,510 540,810 810,930 930,1080 1080,1380
n let's say the initial

452
00:13:42,750 --> 00:13:44,540
0,480 480,1200
value zero.

453
00:13:45,390 --> 00:13:47,670
0,510 510,810 810,1080 1080,1800 1830,2280
And they both execute loafer,

454
00:13:47,670 --> 00:13:49,410
0,150 150,570 570,1200 1200,1320 1320,1740
it's executed statement, the form

455
00:13:49,410 --> 00:13:51,420
0,90 90,210 210,720 1200,1500 1500,2010
you know as the increment

456
00:13:51,420 --> 00:13:52,660
0,150 150,270 270,660
n by one.

457
00:13:53,020 --> 00:13:53,830
0,120 120,240 240,570 570,660 660,810
And of course you might

458
00:13:53,830 --> 00:13:54,790
0,180 180,330 330,750 750,870 870,960
think that statement is an

459
00:13:54,790 --> 00:13:56,650
0,390 390,930 930,1350 1380,1710 1710,1860
atomic operation or something that

460
00:13:56,650 --> 00:13:57,880
0,90 90,660 660,780 780,900 900,1230
is invisible, but it isn't,

461
00:13:57,940 --> 00:13:59,350
0,60 60,600 660,960 960,1170 1170,1410
I mean there's a gross

462
00:13:59,350 --> 00:14:01,600
0,360 360,660 660,1500 1500,1620 1620,2250
statement has compiled to whatever

463
00:14:01,720 --> 00:14:03,640
0,660 660,750 750,1110 1110,1170 1170,1920
instructions the processor is executing

464
00:14:04,030 --> 00:14:05,320
0,210 210,300 300,600 600,930 930,1290
so we cannot assume that

465
00:14:05,320 --> 00:14:06,490
0,150 150,510 510,990 990,1110 1110,1170
an atomic instruction and in

466
00:14:06,490 --> 00:14:07,300
0,330
fact.

467
00:14:07,300 --> 00:14:08,980
0,60 60,660 660,1020 1170,1560 1560,1680
You know, it's a it

468
00:14:08,980 --> 00:14:10,060
0,180 180,540 540,600 600,900 900,1080
could consist of basically like

469
00:14:10,060 --> 00:14:11,650
0,60 60,660 690,780 780,1200 1200,1590
a load, you know which

470
00:14:12,400 --> 00:14:13,780
0,420 420,570 570,870 870,1020 1020,1380
stores the end the content

471
00:14:13,780 --> 00:14:15,310
0,90 90,450 450,690 690,1410 1410,1530
of any two registered an

472
00:14:15,310 --> 00:14:16,720
0,390 390,870 870,960 960,1170 1170,1410
increment register and then we're

473
00:14:16,720 --> 00:14:17,860
0,180 180,270 270,660 660,960 960,1140
sure to register back into

474
00:14:17,860 --> 00:14:19,020
0,360
memory.

475
00:14:19,220 --> 00:14:20,810
0,210 210,300 300,540 540,960 960,1590
So if you're very unlucky,

476
00:14:20,900 --> 00:14:22,040
0,150 150,360 360,540 540,750 750,1140
you know the two friends

477
00:14:22,040 --> 00:14:23,750
0,330 330,630 630,720 720,1140 1170,1710
basically try to encourage both

478
00:14:23,750 --> 00:14:25,700
0,450 450,600 600,900 900,1560 1740,1950
execute this pickle instruction, now

479
00:14:25,700 --> 00:14:26,780
0,120 120,210 210,420 420,510 510,1080
we can have a very

480
00:14:26,780 --> 00:14:28,190
0,120 120,360 360,1050 1050,1350 1350,1410
you know unfortunate sequence of

481
00:14:28,190 --> 00:14:30,050
0,450 450,900 1020,1440 1440,1740 1740,1860
events where like move for

482
00:14:30,050 --> 00:14:31,000
0,390
it.

483
00:14:31,000 --> 00:14:31,780
0,60 60,150 150,510 510,540 540,780
You have performed a load

484
00:14:31,780 --> 00:14:33,040
0,690
instruction.

485
00:14:34,380 --> 00:14:37,350
0,750 750,1200 1200,1620 1890,2430 2430,2970
Located variable in you're registered

486
00:14:37,350 --> 00:14:39,450
0,150 150,330 330,540 540,1230 1320,2100
let's say r zero, er,

487
00:14:39,450 --> 00:14:41,100
0,330 330,510 510,1110
ultimate r zero.

488
00:14:42,570 --> 00:14:44,130
0,270 270,420 420,1080 1080,1410 1410,1560
Now the increment so our

489
00:14:44,130 --> 00:14:45,960
0,300 300,660 660,1260
hero becomes one.

490
00:14:46,790 --> 00:14:49,130
0,660 1200,1440 1440,2040 2040,2250 2250,2340
One and then write it

491
00:14:49,130 --> 00:14:51,710
0,510 720,1320 1380,1500 1500,1890 2250,2580
back to you know store

492
00:14:51,710 --> 00:14:54,350
0,540 540,870 870,1470 1800,2340 2340,2640
instruction that results results back

493
00:14:54,350 --> 00:14:56,120
0,240 240,300 300,750 750,960 1080,1770
into the variable in memory.

494
00:14:56,960 --> 00:14:58,670
0,450 900,1230 1230,1410 1410,1560 1560,1710
And, um, so, if this

495
00:14:58,670 --> 00:15:00,890
0,360 360,450 450,600 600,1380 1380,2220
happens at this particular um,

496
00:15:00,920 --> 00:15:02,420
0,150 150,300 300,810 810,1200 1200,1500
in this scenario where this

497
00:15:02,420 --> 00:15:04,400
0,390 390,570 600,900 900,1560 1710,1980
happens are truly concurrently, now,

498
00:15:04,400 --> 00:15:05,240
0,180 180,270 270,330 330,720 720,840
what is the value of

499
00:15:05,240 --> 00:15:06,830
0,450 510,870 870,1080 1080,1230 1230,1590
n after these two threads

500
00:15:06,830 --> 00:15:08,300
0,180 180,420 420,480 480,1020
that both an increment.

501
00:15:11,450 --> 00:15:13,880
0,360 360,720 1260,1530 1530,1950 2220,2430
Just one yes one and

502
00:15:13,880 --> 00:15:14,990
0,210 210,480 480,780 780,870 870,1110
what is what is this

503
00:15:15,020 --> 00:15:16,490
0,480 480,810 810,870 870,1110 1110,1470
valley supposed to be, what

504
00:15:16,490 --> 00:15:17,210
0,60 60,210 210,570 570,660 660,720
do we expect it to

505
00:15:17,210 --> 00:15:18,080
0,330
be.

506
00:15:22,260 --> 00:15:23,610
0,390 660,780 780,1230 1230,1290 1290,1350
Two, I expect it to

507
00:15:23,610 --> 00:15:24,540
0,120 120,360 360,630 630,780 780,930
be too right, yeah, so

508
00:15:24,540 --> 00:15:25,530
0,210 210,270 270,570 570,780 780,990
one is definitely not equal

509
00:15:25,530 --> 00:15:28,020
0,90 90,540 540,930 990,1920
to two and zanzibar.

510
00:15:28,400 --> 00:15:30,170
0,540 540,870 870,1260 1410,1590 1590,1770
Um, and so, um, and

511
00:15:30,170 --> 00:15:31,070
0,150 150,300 300,510 510,600 600,900
this is like you know

512
00:15:31,070 --> 00:15:31,880
0,210 210,330 330,390 390,750 750,810
the sort of heart of

513
00:15:31,880 --> 00:15:34,400
0,180 180,750 840,1470 1470,1770 1770,2520
race conditions a which eyes

514
00:15:34,400 --> 00:15:36,830
0,270 270,360 360,540 540,2130 2310,2430
not you know inch an

515
00:15:36,830 --> 00:15:38,510
0,480 480,750 750,840 840,1230 1230,1680
unfortunate sequence of events were

516
00:15:38,510 --> 00:15:40,850
0,360 360,900 900,1110 1110,1590 1950,2340
fresh air and state, the

517
00:15:40,850 --> 00:15:42,500
0,510 510,780 780,960 960,1230 1230,1650
updates actually might not be

518
00:15:42,500 --> 00:15:44,510
0,420 420,870 1620,1740 1740,1830 1830,2010
reflected correctly and of course

519
00:15:44,510 --> 00:15:45,320
0,240 240,300 300,360 360,660 660,810
most of the times will

520
00:15:45,320 --> 00:15:46,430
0,210 210,330 330,720 720,990 990,1110
work out fine because you

521
00:15:46,430 --> 00:15:47,180
0,150 150,420 420,510 510,660 660,750
just have to be in

522
00:15:47,180 --> 00:15:49,190
0,120 120,300 300,360 360,1020 1200,2010
this sort of very um,

523
00:15:49,430 --> 00:15:51,080
0,300 300,360 360,750 750,990 990,1650
sort of this very specific

524
00:15:51,080 --> 00:15:52,430
0,390 390,750 750,810 810,1020 1020,1350
case before it shows up

525
00:15:53,120 --> 00:15:54,770
0,210 210,540 540,660 660,810 810,1650
so general I think one

526
00:15:54,770 --> 00:15:55,820
0,90 90,300 300,810 810,1050 1050,1050
of you reported like oh

527
00:15:55,820 --> 00:15:57,710
0,780 810,1080 1080,1230 1230,1440 1440,1890
I didn't have my walks

528
00:15:57,710 --> 00:15:58,610
0,120 120,210 210,570 570,690 690,900
with my racing, you know

529
00:15:58,610 --> 00:16:01,040
0,360 360,600 750,1320 1320,1830 2010,2430
I've been watching order and

530
00:16:01,100 --> 00:16:02,480
0,270 270,660 660,810 810,990 990,1380
my program just worked fine

531
00:16:02,600 --> 00:16:04,550
0,300 300,630 630,1020 1020,1500 1650,1950
and others, actually the no

532
00:16:04,550 --> 00:16:05,840
0,420 420,540 540,720 720,1140 1140,1290
issue with race conditions, they

533
00:16:05,840 --> 00:16:07,370
0,330 330,510 510,690 690,1050 1050,1530
typically just work fine but

534
00:16:07,400 --> 00:16:08,740
0,450 450,510 510,660 660,960
sometimes it goes wrong.

535
00:16:09,620 --> 00:16:10,370
0,240 240,330 330,360 360,480 480,750
So there are two ways

536
00:16:10,370 --> 00:16:13,040
0,480 480,1230 1440,1890 1890,2070 2070,2670
to um address race conditions

537
00:16:13,430 --> 00:16:14,450
0,270 270,360 360,630 630,870 870,1020
um the first way is

538
00:16:14,450 --> 00:16:16,080
0,240 240,540 540,930
to avoid sharing.

539
00:16:17,720 --> 00:16:19,540
0,330 330,540 540,1080
Don't share variables.

540
00:16:20,720 --> 00:16:21,740
0,210 210,450 450,540 540,780 780,1020
And this is one style

541
00:16:21,740 --> 00:16:23,000
0,90 90,600 600,900 900,960 960,1260
of programming that you know

542
00:16:23,000 --> 00:16:25,040
0,330 330,900 900,1230 1230,1500 1500,2040
go encourages by using channels

543
00:16:25,100 --> 00:16:27,050
0,420 420,690 690,1260 1260,1800 1800,1950
channels use communicate values, but

544
00:16:27,050 --> 00:16:28,190
0,90 90,300 300,510 510,870 870,1140
you don't really directly, share

545
00:16:28,190 --> 00:16:29,570
0,330 750,870 870,1020 1020,1230 1230,1380
memory, so that's one way

546
00:16:29,570 --> 00:16:32,510
0,60 60,390 570,1710 2100,2490 2580,2940
of doing Noah, so avoid

547
00:16:32,510 --> 00:16:33,680
0,240 240,540 540,690 690,1080 1080,1170
sharing one big approach, the

548
00:16:33,680 --> 00:16:34,760
0,150 150,510 510,630 630,960 960,1080
other approach is actually to

549
00:16:34,760 --> 00:16:36,080
0,240 240,750
use locks.

550
00:16:38,640 --> 00:16:39,900
0,120 120,210 210,630 630,900 900,1260
You know to make a

551
00:16:39,900 --> 00:16:41,610
0,390 390,480 480,1200 1200,1350 1350,1710
sequence of instructions in atomic

552
00:16:41,610 --> 00:16:43,110
0,540 720,1200 1200,1320 1320,1470 1470,1500
operation now we'll talk a

553
00:16:43,110 --> 00:16:43,920
0,180 180,360 360,570 570,720 720,810
lot more about that in

554
00:16:43,920 --> 00:16:44,980
0,60 60,480
a second.

555
00:16:45,040 --> 00:16:46,030
0,330 330,600 600,660 660,750 750,990
Um, one of the things

556
00:16:46,030 --> 00:16:46,750
0,60 60,210 210,300 300,540 540,720
I want to point out

557
00:16:46,750 --> 00:16:48,070
0,150 150,240 240,540 540,990 990,1320
that is really cool that

558
00:16:48,100 --> 00:16:50,080
0,480 480,870 870,1350 1560,1740 1740,1980
a judicial tool is gonna

559
00:16:50,080 --> 00:16:50,950
0,210 210,450 450,600 600,660 660,870
go actually have a race

560
00:16:50,950 --> 00:16:52,100
0,570
detector.

561
00:16:52,760 --> 00:16:54,260
0,390 540,900 900,960 960,1050 1050,1500
And most of the laps

562
00:16:54,260 --> 00:16:55,520
0,150 150,690 690,810 810,930 930,1260
that you you were doing

563
00:16:55,520 --> 00:16:56,810
0,150 150,510 510,630 630,960 960,1290
would encourage you today we're

564
00:16:56,810 --> 00:16:58,550
0,150 150,630 630,1050 1050,1290 1290,1740
an NGO using the dash

565
00:16:58,550 --> 00:17:00,890
0,270 270,870 1020,1500 1710,2010 2010,2340
race flag and a that

566
00:17:00,890 --> 00:17:02,780
0,240 240,660 660,1080 1080,1350 1350,1890
will actually not catch every

567
00:17:03,080 --> 00:17:04,040
0,390 390,600 600,720 720,780 780,960
possible race but it does

568
00:17:04,040 --> 00:17:05,300
0,150 150,570 570,750 750,1140 1140,1260
an extremely good job of

569
00:17:05,300 --> 00:17:07,120
0,270 270,810 810,1380
actually identifying racist.

570
00:17:07,430 --> 00:17:08,870
0,360 360,570 570,720 720,930 930,1440
And so you should but

571
00:17:08,870 --> 00:17:10,490
0,330 330,780 810,1380 1380,1530 1530,1620
default run go with the

572
00:17:10,490 --> 00:17:12,120
0,150 150,510 510,1020
race detector enabled.

573
00:17:13,180 --> 00:17:14,830
0,270 270,390 390,780 780,1290 1290,1650
Okay, so that's one challenge

574
00:17:14,830 --> 00:17:16,120
0,150 150,570 570,660 660,990 990,1290
with threats, the second challenge

575
00:17:16,120 --> 00:17:18,960
0,90 90,450 450,720 720,1470
with threads actually coordination.

576
00:17:19,640 --> 00:17:20,840
0,150 150,270 270,480 480,540 540,1200
So it's often the case

577
00:17:20,840 --> 00:17:22,760
0,510 540,840 840,1080 1080,1650 1770,1920
that one has to know

578
00:17:22,760 --> 00:17:24,110
0,210 210,480 480,720 720,960 960,1350
one friend must wait another

579
00:17:24,110 --> 00:17:26,030
0,330 330,810 810,1080 1080,1200 1200,1920
thread before something is accomplished

580
00:17:26,450 --> 00:17:28,220
0,420 420,600 630,1170 1170,1290 1290,1770
a huge number of the

581
00:17:28,250 --> 00:17:30,170
0,210 210,810 810,990 990,1080 1080,1920
go exercise in the tutorial

582
00:17:30,170 --> 00:17:32,330
0,150 150,1080 1080,1440 1650,1980 1980,2160
have a form and there's

583
00:17:32,330 --> 00:17:33,740
0,240 240,780 780,960 960,1140 1140,1410
two ways you go actually

584
00:17:33,740 --> 00:17:35,570
0,270 270,750 750,1170 1170,1470 1470,1830
to previous word dealing without

585
00:17:35,570 --> 00:17:37,080
0,210 210,450 450,1080
one again channels.

586
00:17:37,550 --> 00:17:39,140
0,420 420,1050 1080,1410 1410,1500 1500,1590
Channels basically allow you to

587
00:17:39,140 --> 00:17:40,730
0,720 720,930 930,990 990,1500 1500,1590
communicate and to coordinate at

588
00:17:40,730 --> 00:17:42,140
0,90 90,300 300,840
the same time.

589
00:17:42,140 --> 00:17:43,850
0,630 870,1470 1470,1530 1530,1620 1620,1710
Or, um, you know we

590
00:17:43,850 --> 00:17:44,870
0,300 300,360 360,570 570,720 720,1020
talk a little bit later

591
00:17:44,870 --> 00:17:47,270
0,390 390,510 510,1380 1410,1770 1770,2400
about you know condition variables.

592
00:17:49,830 --> 00:17:51,000
0,510
Explain.

593
00:17:53,640 --> 00:17:54,840
0,420 420,630 630,720 720,810 810,1200
And both can be useful

594
00:17:54,870 --> 00:17:55,590
0,180 180,360 360,420 420,600 600,720
I'll talk a little bit

595
00:17:55,590 --> 00:17:57,090
0,210 210,420 420,660 930,1380 1380,1500
more about that, um, and

596
00:17:57,090 --> 00:17:58,170
0,120 120,540 540,810 810,960 960,1080
then finally there's sort of

597
00:17:58,170 --> 00:18:01,080
0,210 240,570 570,1230 1560,2370 2370,2910
a final challenge Baker conceptual

598
00:18:01,080 --> 00:18:03,930
0,600 600,1530 1950,2250 2250,2430 2430,2850
challenges or give that lock.

599
00:18:05,620 --> 00:18:06,670
0,150 150,240 240,480 480,780 780,1050
So if one friend waits

600
00:18:06,670 --> 00:18:08,350
0,750 780,990 990,1140 1140,1440 1440,1680
a like t one waits

601
00:18:08,350 --> 00:18:09,340
0,210 210,420 420,690 690,840 840,990
on t two and t

602
00:18:09,340 --> 00:18:10,780
0,270 270,510 510,630 630,780 780,1440
two weights from t one

603
00:18:10,780 --> 00:18:11,830
0,330 330,660 660,750 750,960 960,1050
before example that release your

604
00:18:11,830 --> 00:18:14,050
0,420 420,1170 1230,1410 1410,1800 1800,2220
locker before some other sequence,

605
00:18:14,050 --> 00:18:14,980
0,240 240,330 330,690 690,810 810,930
you can basically set what

606
00:18:14,980 --> 00:18:17,230
0,90 90,300 300,690 690,1350 1560,2250
they call destiny embrace were

607
00:18:17,380 --> 00:18:18,700
0,360 360,660 660,750 750,900 900,1320
both waiting on the other

608
00:18:18,700 --> 00:18:20,140
0,690 690,720 720,990 990,1260 1260,1440
as a result, nothing makes

609
00:18:20,140 --> 00:18:21,360
0,270 270,840
for progress.

610
00:18:22,030 --> 00:18:23,080
0,540
AW.

611
00:18:23,440 --> 00:18:24,850
0,90 90,570 570,810 810,990 990,1410
A trivial way you're getting

612
00:18:24,850 --> 00:18:26,740
0,270 270,390 390,960 960,1380 1410,1890
us a deadlock in logo

613
00:18:26,740 --> 00:18:27,670
0,120 120,420 420,600 600,720 720,930
would be like you have

614
00:18:27,670 --> 00:18:29,020
0,60 60,390 390,810 870,1170 1170,1350
a single threat, there's no

615
00:18:29,020 --> 00:18:31,150
0,180 180,420 420,510 510,900 1290,2130
other threads at all, and

616
00:18:31,150 --> 00:18:33,120
0,180 180,780 780,990 990,1410
you're right to channel.

617
00:18:35,200 --> 00:18:36,400
0,210 210,270 270,480 480,960 990,1200
And I will block down

618
00:18:36,400 --> 00:18:37,720
0,180 180,390 390,750 750,990 990,1320
that one friend until somebody

619
00:18:37,720 --> 00:18:39,010
0,540 570,690 690,900 900,1170 1170,1290
else you know reach some

620
00:18:39,010 --> 00:18:40,090
0,180 180,600 600,720 720,810 810,1080
other friends from the channel,

621
00:18:40,090 --> 00:18:41,080
0,180 180,330 330,540 540,750 750,990
but if there's no other

622
00:18:41,080 --> 00:18:42,010
0,210 210,300 300,690 690,780 780,930
friend at all, you know

623
00:18:42,010 --> 00:18:42,820
0,240 240,420 420,690 690,780 780,810
that will result in a

624
00:18:42,820 --> 00:18:45,430
0,510 1170,1440 1440,1530 1530,2070 2070,2610
deadlock like the simplest possible

625
00:18:45,430 --> 00:18:48,340
0,390 390,960 1530,2040 2280,2730 2730,2910
deadlock possible, um, you know

626
00:18:48,340 --> 00:18:50,110
0,210 210,780 780,1050 1050,1440 1440,1770
go actually, um, will catch

627
00:18:50,110 --> 00:18:51,880
0,180 180,630 630,1050 1050,1290 1290,1770
this case and will run

628
00:18:51,880 --> 00:18:53,140
0,270 270,360 360,720 720,990 990,1260
raise a runtime error saying

629
00:18:53,140 --> 00:18:54,130
0,210 210,600 600,810 810,930 930,990
like no threats going to

630
00:18:54,130 --> 00:18:55,780
0,390 390,450 450,750 750,1320
run, you know deadlock.

631
00:18:56,210 --> 00:18:57,080
0,390 390,540 540,630 630,750 750,870
Um, but there could be

632
00:18:57,080 --> 00:18:58,670
0,180 180,660 660,780 780,1110 1140,1590
more complicated that blocks were

633
00:18:58,700 --> 00:19:00,740
0,450 450,840 840,1230 1650,1950 1950,2040
involved multiple threats as you're

634
00:19:00,740 --> 00:19:02,390
0,240 240,390 390,480 480,900 900,1650
going through the labs and

635
00:19:02,420 --> 00:19:03,710
0,90 90,480 480,780 780,930 930,1290
the semester you I'm sure

636
00:19:03,710 --> 00:19:04,640
0,90 90,270 270,420 420,600 600,930
you were on into summer.

637
00:19:07,540 --> 00:19:08,350
0,180 180,360 360,450 450,660 660,810
So take a little bit

638
00:19:08,350 --> 00:19:10,000
0,90 90,630 660,1050 1050,1350 1350,1650
of a step back here

639
00:19:10,000 --> 00:19:12,010
0,300 300,480 480,990 1020,1710 1710,2010
and think about go for

640
00:19:12,010 --> 00:19:12,780
0,150
it.

641
00:19:12,980 --> 00:19:14,680
0,120 120,240 240,450 450,1140
You know these challenges.

642
00:19:14,970 --> 00:19:16,280
0,750
Yeah.

643
00:19:17,750 --> 00:19:19,100
0,300 300,450 450,660 660,900 900,1350
Yeah I just talked about.

644
00:19:20,080 --> 00:19:22,300
0,540 540,1260 1530,1860 1860,2100 2100,2220
Roughly speaking a go as

645
00:19:22,300 --> 00:19:24,220
0,150 150,240 240,570 570,1320
sort of two plans.

646
00:19:24,510 --> 00:19:28,230
0,840 1230,2220 2310,2580 2580,3090 3090,3720
To handle these currency challenges.

647
00:19:28,930 --> 00:19:31,150
0,450 450,810 810,1320 1320,2070 2100,2220
And one plan is you

648
00:19:31,150 --> 00:19:33,560
0,450 480,870 870,1140 1140,1800
know basically around channels.

649
00:19:34,980 --> 00:19:36,420
0,360 360,510 510,750 750,1110 1110,1440
And there's another plan basically

650
00:19:36,420 --> 00:19:38,360
0,300 300,930
around locks.

651
00:19:39,470 --> 00:19:43,020
0,990 990,1590
Condition variables.

652
00:19:44,210 --> 00:19:45,200
0,240
Thanks.

653
00:19:45,650 --> 00:19:46,600
0,60
Yeah.

654
00:19:49,630 --> 00:19:51,100
0,870
Yeah.

655
00:19:51,510 --> 00:19:53,490
0,510 870,1350 1350,1650 1650,1860 1860,1980
And um the way I

656
00:19:53,490 --> 00:19:54,960
0,180 180,450 450,630 630,750 750,1470
think about it, you know

657
00:19:54,960 --> 00:19:56,220
0,150 150,420 420,540 540,810 810,1260
some people are quite dogmatic

658
00:19:56,220 --> 00:19:57,300
0,240 240,420 420,570 570,870 870,1080
about this, if one plan

659
00:19:57,300 --> 00:19:58,050
0,90 90,330 330,480 480,570 570,750
is better than the other

660
00:19:58,050 --> 00:20:00,660
0,450 750,1380 1410,1950 1950,2280 2280,2610
plan a my general approach

661
00:20:00,660 --> 00:20:01,530
0,300 300,420 420,630 630,690 690,870
here is like I really

662
00:20:01,530 --> 00:20:02,310
0,180 180,240 240,540 540,690 690,780
want a plan that is

663
00:20:02,310 --> 00:20:03,420
0,210 210,660 660,750 750,810 810,1110
most suitable for the case

664
00:20:03,420 --> 00:20:04,680
0,120 120,210 210,510 510,780
that I'm looking at.

665
00:20:04,710 --> 00:20:06,300
0,390 390,780 780,900 900,1140 1140,1590
Um, what I'm running into

666
00:20:06,360 --> 00:20:08,580
0,480 570,1530 1530,1620 1620,1860 1860,2220
and generally you know I've

667
00:20:08,580 --> 00:20:11,490
0,210 210,900 1320,2100 2100,2370 2370,2910
no sharing, um, and basically

668
00:20:11,490 --> 00:20:12,900
0,360 360,570 570,690 690,1020 1020,1410
I need to threats basically

669
00:20:12,900 --> 00:20:14,430
0,120 120,870 870,1320 1320,1380 1380,1530
to communicate, but I don't

670
00:20:14,430 --> 00:20:16,050
0,180 180,480 480,600 600,1140 1200,1620
really share any memory I

671
00:20:16,050 --> 00:20:17,610
0,210 210,270 270,750 750,900 900,1560
tend to use no channels.

672
00:20:18,080 --> 00:20:19,460
0,390 390,840 840,1080 1080,1200 1200,1380
Um, if there are two

673
00:20:19,460 --> 00:20:20,420
0,270 270,330 330,450 450,660 660,960
threads I can do share

674
00:20:20,420 --> 00:20:22,100
0,540 570,1050 1050,1140 1140,1590 1590,1680
memory because it's convenient to

675
00:20:22,100 --> 00:20:23,300
0,210 210,600 600,660 660,1110 1110,1200
share memory, for example I

676
00:20:23,300 --> 00:20:24,500
0,180 180,210 210,390 390,690 690,1200
write a key value servers

677
00:20:24,500 --> 00:20:25,340
0,240 240,330 330,510 510,570 570,840
and I want to share

678
00:20:25,340 --> 00:20:28,160
0,60 60,240 240,600 600,1170 1500,2820
the key value table zen

679
00:20:28,730 --> 00:20:32,750
0,720 1470,1890 1890,2430 3390,3690 3690,4020
I use locks and condition

680
00:20:32,750 --> 00:20:33,880
0,570
variables.

681
00:20:37,630 --> 00:20:39,490
0,510 510,660 660,1050 1170,1710 1710,1860
Um, and so, um you

682
00:20:39,490 --> 00:20:40,390
0,60 60,240 240,480 480,780 780,900
know my general approach is

683
00:20:40,390 --> 00:20:41,860
0,300 300,480 480,720 720,1320 1320,1470
not to be dramatic and

684
00:20:41,860 --> 00:20:43,330
0,270 270,510 510,780 780,1200 1200,1470
you take whatever approach gonna

685
00:20:43,330 --> 00:20:45,040
0,360 360,450 450,660 660,1170 1170,1710
actually is most convenient for

686
00:20:45,070 --> 00:20:46,520
0,90 90,390 390,570 570,930
the problem that has.

687
00:20:47,150 --> 00:20:50,000
0,480 990,1680 2250,2670 2670,2790 2790,2850
Um the tutorial does a

688
00:20:50,000 --> 00:20:51,290
0,180 180,270 270,690 690,750 750,1290
pretty good job of actually

689
00:20:51,290 --> 00:20:54,470
0,1110 1230,1680 1680,2190 2190,2730 2730,3180
a teaching about channels mentioned

690
00:20:54,470 --> 00:20:55,880
0,480 510,780 780,1020 1020,1200 1200,1410
locks doesn't seem much about

691
00:20:55,880 --> 00:20:57,860
0,360 360,990 1140,1410 1410,1560 1560,1980
condition variables, um, so I

692
00:20:57,860 --> 00:20:59,870
0,300 300,450 450,540 540,1440 1800,2010
I think it's worthwhile to

693
00:20:59,870 --> 00:21:00,770
0,360 360,390 390,570 570,690 690,900
talk a little bit about

694
00:21:00,770 --> 00:21:02,840
0,360 360,810 810,1350 1380,1560 1560,2070
condition variables to make sure

695
00:21:03,080 --> 00:21:04,430
0,570 570,660 660,750 750,1200 1200,1350
that you are aware that

696
00:21:04,430 --> 00:21:05,540
0,150 150,780
they exist.

697
00:21:05,930 --> 00:21:06,560
0,270 270,330 330,450 450,510 510,630
And I'm going to do

698
00:21:06,560 --> 00:21:08,060
0,270 270,630 630,990 990,1260 1260,1500
that using a tiny little

699
00:21:08,060 --> 00:21:10,280
0,690 900,1290 1290,1680 1680,2130 2130,2220
example, um, to illustrate the

700
00:21:10,280 --> 00:21:12,170
0,570 780,1020 1020,1350 1350,1470 1470,1890
issues the timing a little

701
00:21:12,170 --> 00:21:14,570
0,510 510,960 1230,1890 2070,2280 2280,2400
example is, um, we have

702
00:21:14,570 --> 00:21:16,790
0,660 660,900 900,1050 1050,1740 1800,2220
a little bit inspired a

703
00:21:16,790 --> 00:21:18,290
0,150 150,210 210,420 420,630 1170,1500
its a little bit inspired

704
00:21:18,290 --> 00:21:19,580
0,90 90,660 870,1020 1020,1230 1230,1290
by collapse and have a

705
00:21:19,580 --> 00:21:22,280
0,300 300,600 600,1050 1470,1920 1920,2700
threat too on a and

706
00:21:22,310 --> 00:21:23,660
0,510 540,840 840,1080 1080,1260 1260,1350
A T one needs to

707
00:21:23,660 --> 00:21:24,890
0,300 300,360 360,660 660,750 750,1230
collect a number of votes

708
00:21:24,890 --> 00:21:25,970
0,120 120,240 240,450 450,720 720,1080
you know for all remote

709
00:21:25,970 --> 00:21:29,060
0,600 720,2310 2340,2820 2820,3030 3030,3090
machines, for example needs to

710
00:21:29,060 --> 00:21:29,780
0,330 330,450 450,540 540,660 660,720
decide that it has a

711
00:21:29,780 --> 00:21:31,610
0,660 690,1170 1170,1350 1350,1530 1530,1830
majority a so that actually

712
00:21:31,610 --> 00:21:33,590
0,570 570,690 690,1140 1290,1440 1440,1980
proceeds to commit some value

713
00:21:33,890 --> 00:21:34,880
0,240 240,390 390,510 510,630 630,990
and you'll see that later

714
00:21:34,880 --> 00:21:35,840
0,240 240,450 450,570 570,780 780,960
in like this shows up

715
00:21:35,840 --> 00:21:37,400
0,60 60,150 150,510 510,990 990,1560
in the raft whack as

716
00:21:37,400 --> 00:21:38,750
0,180 180,270 270,450 510,1230 1230,1350
one of the superlatives that

717
00:21:38,750 --> 00:21:40,700
0,90 90,450 900,1440 1440,1590 1590,1950
you need a and so

718
00:21:40,760 --> 00:21:41,780
0,270 270,390 390,750 750,870 870,1020
to do that you know

719
00:21:41,780 --> 00:21:43,460
0,330 330,570 570,810 810,1350 1500,1680
the one who fork or

720
00:21:43,460 --> 00:21:45,770
0,300 300,810 1290,1500 1500,1770 1770,2310
other threats say two two.

721
00:21:46,930 --> 00:21:48,190
0,210 210,360 360,540 540,1020 1020,1260
And t two amazingly it

722
00:21:48,190 --> 00:21:49,360
0,150 150,360 360,870 870,1110 1110,1170
does something expensive like you

723
00:21:49,360 --> 00:21:51,280
0,330 810,1200 1200,1380 1380,1590 1590,1920
know talk to some remote

724
00:21:51,280 --> 00:21:52,360
0,390 390,510 510,720 720,900 900,1080
machine to actually get its

725
00:21:52,360 --> 00:21:53,340
0,480
vote.

726
00:21:53,400 --> 00:21:55,230
0,300 300,870 870,1380 1380,1740 1740,1830
And then report back, you

727
00:21:55,230 --> 00:21:56,070
0,120 120,300 300,570 570,660 660,840
know that vote to t

728
00:21:56,070 --> 00:21:57,720
0,390 390,540 540,690 690,1020 1020,1650
one and t one basically

729
00:21:57,720 --> 00:21:58,650
0,270 270,420 420,510 510,840 840,930
I need to collect all

730
00:21:58,650 --> 00:21:59,610
0,90 90,390 390,570 570,630 630,960
the votes held him up

731
00:21:59,640 --> 00:22:01,440
0,300 300,540 540,900 900,1080 1080,1800
and then assume that majority,

732
00:22:01,620 --> 00:22:04,200
0,390 390,990 1020,1650 1650,2100
um then declared victory.

733
00:22:04,400 --> 00:22:05,810
0,180 180,360 360,540 540,750 750,1410
So there's a pretty straightforward

734
00:22:05,810 --> 00:22:07,370
0,90 90,360 360,630 630,1140 1350,1560
to a simple program, I'm

735
00:22:07,370 --> 00:22:07,760
0,120 120,180 180,300 300,360 360,390
going to give you a

736
00:22:07,760 --> 00:22:08,960
0,210 210,390 390,510 510,960 960,1200
little bit, if it wants

737
00:22:08,960 --> 00:22:09,860
0,150 150,240 240,690 690,810 810,900
me to illustrate you a

738
00:22:09,860 --> 00:22:11,570
0,360 360,510 510,1110 1440,1590 1590,1710
couple of issues we're going

739
00:22:11,570 --> 00:22:14,000
0,60 60,660 960,1410 1890,2370 2370,2430
to switch to allow the

740
00:22:14,000 --> 00:22:15,120
0,660
screen.

741
00:22:15,120 --> 00:22:16,360
0,690
Wow.

742
00:22:16,850 --> 00:22:18,700
0,180 180,540 540,660 660,1290
Can everybody see this.

743
00:22:21,510 --> 00:22:22,800
0,780
I'm.

744
00:22:22,800 --> 00:22:25,230
0,540 540,1320 1500,1980 1980,2100 2100,2430
So, um, here I have

745
00:22:25,230 --> 00:22:27,720
0,480 480,750 750,1350 1440,2400 2400,2490
a very simple implementation of

746
00:22:27,720 --> 00:22:29,550
0,150 150,810 810,1140 1170,1500 1500,1830
this program, the vote thing

747
00:22:29,550 --> 00:22:30,690
0,510 510,810 810,960 960,990 990,1140
and again it's a little

748
00:22:30,690 --> 00:22:31,590
0,90 90,180 180,240 240,450 450,900
bit of a toy example

749
00:22:31,590 --> 00:22:33,030
0,210 210,570 570,780 780,1140 1170,1440
that hopefully gets the point

750
00:22:33,030 --> 00:22:34,160
0,540
across.

751
00:22:34,220 --> 00:22:35,810
0,330 330,450 450,630 630,1230 1230,1590
Um the two variables shared

752
00:22:35,810 --> 00:22:37,940
0,90 90,540 570,1350 1350,1770 1770,2130
to your account Danish count

753
00:22:37,940 --> 00:22:40,160
0,660 660,840 840,930 930,1470 1590,2220
count number of votes finished

754
00:22:40,190 --> 00:22:43,970
0,570 570,1110 1500,2190 2700,3150 3150,3780
council were were um, so

755
00:22:44,090 --> 00:22:44,930
0,180 180,300 300,480 480,510 510,840
you know there's a loop

756
00:22:44,930 --> 00:22:47,390
0,390 390,510 510,1110 1230,2070 2100,2460
go for ten a creating

757
00:22:47,390 --> 00:22:50,630
0,120 120,780 1410,1830 1830,2400 2430,3240
a goal creating a launching

758
00:22:50,660 --> 00:22:51,960
0,420 420,840
and um.

759
00:22:53,000 --> 00:22:54,500
0,210 210,360 360,570 570,1170 1200,1500
You know this function, an

760
00:22:54,500 --> 00:22:57,620
0,540 540,1260 1440,2220 2640,2970 2970,3120
anonymous function currently calls this

761
00:22:57,620 --> 00:23:00,140
0,510 510,840 840,1320 1350,1830 1830,2520
function request vote request, visually

762
00:23:00,140 --> 00:23:01,760
0,60 60,150 150,1110 1110,1470 1470,1620
you know simulates doing a

763
00:23:01,760 --> 00:23:02,840
0,600
long.

764
00:23:02,840 --> 00:23:04,340
0,360 360,900 900,1020 1020,1260 1260,1500
Expensive operation on Silver remote

765
00:23:04,340 --> 00:23:05,090
0,390 390,480 480,540 540,660 660,750
machine and the way it

766
00:23:05,090 --> 00:23:06,140
0,450 450,570 570,720 720,900 900,1050
simulates, it was by just

767
00:23:06,140 --> 00:23:07,700
0,180 180,300 300,750 870,1230 1230,1560
going to sleep it block

768
00:23:07,700 --> 00:23:09,110
0,60 60,120 120,300 300,810 1200,1410
for a little while then

769
00:23:09,110 --> 00:23:10,940
0,90 90,750 870,1170 1170,1710 1710,1830
it returns and then you

770
00:23:10,940 --> 00:23:12,980
0,180 180,750 780,1350 1350,1890 1890,2040
know the returns vote is

771
00:23:12,980 --> 00:23:14,450
0,390 390,930 930,1020 1020,1290 1290,1470
yes then the count goes

772
00:23:14,450 --> 00:23:15,890
0,360 360,840 870,1140 1140,1230 1230,1440
up and count the fact

773
00:23:15,890 --> 00:23:16,880
0,120 120,510 510,690 690,810 810,990
that actually we have one

774
00:23:16,880 --> 00:23:17,800
0,420
more.

775
00:23:17,800 --> 00:23:19,570
0,300 300,570 570,1170 1170,1410 1410,1770
A thread voting and then

776
00:23:19,570 --> 00:23:21,100
0,120 120,450 870,1080 1080,1230 1230,1530
we're done and so that's

777
00:23:21,100 --> 00:23:22,810
0,510 510,900 900,1110 1110,1620 1620,1710
actually forgot ten friends, you

778
00:23:22,810 --> 00:23:24,460
0,210 210,480 480,810 810,1230 1230,1650
know each room request mode

779
00:23:24,820 --> 00:23:25,960
0,210 210,450 450,540 540,1020 1020,1140
and report the results and

780
00:23:25,960 --> 00:23:27,010
0,300 300,420 420,540 540,840 840,1050
then at the end, we'll

781
00:23:27,010 --> 00:23:29,050
0,240 240,330 330,810 1110,1590 1590,2040
check if the counter smaller

782
00:23:29,050 --> 00:23:30,070
0,450 510,630 630,750 750,870 870,1020
vibe, you know we know

783
00:23:30,070 --> 00:23:31,320
0,150 150,270 270,780
that we failed.

784
00:23:31,350 --> 00:23:33,810
0,570 600,1140 1140,1230 1230,1860 1890,2460
A lost the election and

785
00:23:33,810 --> 00:23:36,000
0,180 180,930 960,1170 1170,1650 1770,2190
if we have votes equal

786
00:23:36,000 --> 00:23:37,770
0,330 330,480 480,900 900,1200 1200,1770
larger than five we'll basically

787
00:23:37,920 --> 00:23:39,270
0,300 300,360 360,750 1020,1170 1170,1350
won the election, so this

788
00:23:39,270 --> 00:23:41,310
0,180 180,330 330,960 990,1560 1590,2040
sort of simple a very

789
00:23:41,310 --> 00:23:42,680
0,240 240,810
simple program.

790
00:23:42,740 --> 00:23:44,450
0,540 720,990 990,1080 1080,1260 1260,1710
Does it all make sense.

791
00:23:45,630 --> 00:23:46,710
0,240 240,330 330,570 570,780 810,1080
Let me run it just

792
00:23:46,710 --> 00:23:48,680
0,180 180,510 690,1290
for the kicks.

793
00:23:52,180 --> 00:23:53,500
0,870
Bird.

794
00:23:54,040 --> 00:23:54,730
0,120 120,330 330,420 420,630 630,690
You know we're running a

795
00:23:54,730 --> 00:23:56,890
0,180 180,870 960,1290 1290,1800 1800,2160
couple times something lose something

796
00:23:56,890 --> 00:23:58,390
0,570 630,810 810,900 900,1110 1110,1500
when you know makes sense.

797
00:23:59,060 --> 00:24:00,380
0,750
Tom.

798
00:24:00,380 --> 00:24:01,730
0,390 390,480 480,630 630,930 930,1350
And so this program looks

799
00:24:01,760 --> 00:24:03,220
0,900
working.

800
00:24:03,700 --> 00:24:04,720
0,270 270,420 420,840 840,960 960,1020
Um and correct, this is

801
00:24:04,720 --> 00:24:06,060
0,240 240,780
actually correct.

802
00:24:09,940 --> 00:24:11,710
0,330 330,450 450,540 540,1110 1110,1770
Sorry was the question whether

803
00:24:11,710 --> 00:24:13,210
0,180 180,510 510,630 630,930 930,1500
this program is actually correct

804
00:24:13,750 --> 00:24:15,480
0,240 240,330 330,660 660,1080
seem to produce results.

805
00:24:15,860 --> 00:24:17,960
0,780 1110,1650
I F.

806
00:24:19,060 --> 00:24:19,870
0,150 150,330 330,540 540,630 630,810
I think there's a race

807
00:24:19,870 --> 00:24:21,010
0,420 420,660 660,810 810,990 990,1140
condition isn't there like you

808
00:24:21,010 --> 00:24:22,180
0,330 330,480 480,570 570,870 870,1170
have all of these different

809
00:24:22,180 --> 00:24:23,920
0,630 630,1200 1200,1290 1290,1620 1620,1740
threads implementing the count and

810
00:24:23,920 --> 00:24:27,040
0,360 360,1140 1560,2220 2220,2430 2430,3120
finished variables and it's also.

811
00:24:27,870 --> 00:24:29,260
0,810
I'm.

812
00:24:31,830 --> 00:24:32,640
0,240 240,420 420,600 600,690 690,810
It's not clear to me

813
00:24:32,640 --> 00:24:34,440
0,180 180,510 510,1170 1170,1470 1470,1800
that finnish necessarily always reaches

814
00:24:34,440 --> 00:24:37,050
0,450 900,1590 2010,2160 2160,2250 2250,2610
ten eyes, is it possible

815
00:24:37,050 --> 00:24:38,280
0,120 120,240 240,690
that it doesn't.

816
00:24:38,700 --> 00:24:40,050
0,270 270,570 570,690 690,840 840,1350
Um, let me let me

817
00:24:40,050 --> 00:24:40,980
0,150 150,270 270,630 630,720 720,930
take these one by one

818
00:24:40,980 --> 00:24:41,820
0,120 120,240 240,420 420,540 540,840
and just go for your

819
00:24:41,820 --> 00:24:42,750
0,240 240,480 480,600 600,720 720,930
first point which is really

820
00:24:42,750 --> 00:24:44,580
0,450 450,480 480,630 630,1080 1380,1830
what I was after a

821
00:24:44,580 --> 00:24:45,390
0,60 60,180 180,420 420,630 630,810
you know clear this as

822
00:24:45,390 --> 00:24:48,690
0,1920 2160,2940 2940,3060 3060,3150 3150,3300
a fact, we have two

823
00:24:48,690 --> 00:24:51,870
0,450 450,690 690,1080 1440,2100 2130,3180
variables here, correct a Noah

824
00:24:51,990 --> 00:24:53,910
0,570 570,1140 1290,1470 1470,1770 1770,1920
count vanished or access by

825
00:24:53,910 --> 00:24:55,200
0,270 270,450 450,960 960,1140 1140,1290
different go routines, so this

826
00:24:55,200 --> 00:24:56,670
0,120 120,720 720,810 810,1050 1050,1470
is immediately a red flag

827
00:24:56,670 --> 00:24:57,750
0,150 390,570 570,690 690,780 780,1080
that could be a serious

828
00:24:57,750 --> 00:24:59,010
0,360 360,600 690,870 870,1170 1170,1260
problem here as soon as

829
00:24:59,010 --> 00:25:00,420
0,120 120,390 390,780 780,1230 1230,1410
you have a variable that

830
00:25:00,420 --> 00:25:01,830
0,150 150,540 540,690 690,750 750,1410
has access to a modified

831
00:25:01,830 --> 00:25:03,240
0,240 510,840 840,990 990,1260 1260,1410
and by two different go

832
00:25:03,240 --> 00:25:04,230
0,330 330,420 420,570 570,780 780,990
routines, you know there's gonna

833
00:25:04,230 --> 00:25:05,790
0,120 120,180 180,630 1110,1260 1260,1560
be a problem and so

834
00:25:05,790 --> 00:25:06,960
0,510 510,630 630,810 810,870 870,1170
interesting to run the road,

835
00:25:06,960 --> 00:25:08,250
0,240 240,480 480,960 960,1140 1140,1290
go race detector, she it

836
00:25:08,250 --> 00:25:10,080
0,270 270,630 630,840
actually catches it.

837
00:25:10,460 --> 00:25:11,960
0,270 270,420 420,660 690,1320 1320,1500
And as you expect it

838
00:25:11,960 --> 00:25:13,910
0,300 300,1140 1140,1260 1260,1530 1530,1950
to go the race detector

839
00:25:13,910 --> 00:25:15,020
0,300 300,360 360,900 900,960 960,1110
tells you exactly you know

840
00:25:15,020 --> 00:25:16,640
0,300 300,930 930,1050 1050,1410 1410,1620
there's indeed some problems here,

841
00:25:16,640 --> 00:25:19,340
0,510 510,1050 1380,2070 2070,2610 2610,2700
petitioner program and list the

842
00:25:19,340 --> 00:25:21,020
0,270 270,960 960,1140 1140,1410 1410,1680
line rumor or things actually

843
00:25:21,020 --> 00:25:22,200
0,330 330,720
go wrong.

844
00:25:22,700 --> 00:25:23,960
0,540 570,810 810,990 990,1080 1080,1260
So it gives you a

845
00:25:23,960 --> 00:25:25,310
0,210 210,360 360,690 690,1080 1080,1350
pretty good clue that something

846
00:25:25,310 --> 00:25:26,870
0,270 300,780 810,1020 1020,1110 1110,1560
is not up to snuff

847
00:25:26,900 --> 00:25:28,700
0,240 240,780 1440,1590 1590,1710 1710,1800
this program and so we're

848
00:25:28,700 --> 00:25:29,930
0,210 210,450 480,900 900,960 960,1230
going to prepare two small

849
00:25:29,930 --> 00:25:32,210
0,540 540,1740 1770,1980 1980,2130 2130,2280
steps, and you know that

850
00:25:32,210 --> 00:25:34,460
0,510 990,1680 1680,1890 1890,2010 2010,2250
will hopefully shed some more

851
00:25:34,460 --> 00:25:36,800
0,360 360,960 960,1230 1230,1920
light on computer programming.

852
00:25:36,950 --> 00:25:38,180
0,360 360,480 480,780 780,1080 1080,1230
So let me give you

853
00:25:38,180 --> 00:25:39,530
0,330 330,630 630,1080 1080,1170 1170,1350
my second solution to this

854
00:25:39,530 --> 00:25:40,700
0,630
program.

855
00:25:40,970 --> 00:25:42,830
0,630 630,990 990,1170 1170,1590 1590,1860
A in this case a

856
00:25:42,830 --> 00:25:44,180
0,510 510,840 840,990 990,1320 1320,1350
we'll talk about changing a

857
00:25:44,180 --> 00:25:45,080
0,150 150,270 270,570 570,840 840,900
little bit later because I

858
00:25:45,080 --> 00:25:48,170
0,240 240,330 330,900 1680,2400 2550,3090
wanted to illustrate a locks

859
00:25:48,170 --> 00:25:49,940
0,210 210,510 510,900 900,1380 1410,1770
and condition variables first because

860
00:25:49,940 --> 00:25:51,320
0,300 300,510 510,720 720,1170 1170,1380
they've got less emphasis in

861
00:25:51,320 --> 00:25:52,660
0,180 180,840
the tutorial.

862
00:25:52,660 --> 00:25:54,220
0,660 990,1320 1320,1410 1410,1500 1500,1560
Um, so you have a

863
00:25:54,220 --> 00:25:56,650
0,390 390,1110 1140,1770 1770,2040 2040,2430
simple solution, you go correct

864
00:25:56,650 --> 00:25:58,600
0,120 120,570 570,630 630,1170 1560,1950
you introduce a lock a

865
00:25:58,600 --> 00:25:59,950
0,150 150,360 360,450 450,870 870,1350
the log is completely independent

866
00:25:59,950 --> 00:26:02,200
0,60 60,150 150,930 960,1770 1770,2250
of the variables a and

867
00:26:02,230 --> 00:26:04,030
0,540 540,930 930,1140 1140,1290 1290,1800
a you follow some convention

868
00:26:04,030 --> 00:26:05,170
0,240 240,450 450,600 600,900 900,1140
which says like wow this

869
00:26:05,170 --> 00:26:07,690
0,270 270,1080 1140,1620 1620,2010 2010,2520
lock new protects counted finish.

870
00:26:08,340 --> 00:26:10,380
0,150 150,240 240,900 900,1530 1530,2040
And so whenever you access

871
00:26:10,380 --> 00:26:11,880
0,420 420,870 870,1230 1230,1320 1320,1500
encounter finished visually you have

872
00:26:11,880 --> 00:26:12,900
0,90 90,360 360,600 600,870 870,1020
to wrap that into the

873
00:26:12,900 --> 00:26:14,310
0,300 300,390 390,840 840,1290 1290,1410
lock and unlock statements and

874
00:26:14,310 --> 00:26:15,450
0,180 180,510 510,630 630,810 810,1140
so here we see two

875
00:26:15,450 --> 00:26:16,350
0,210 210,390 390,480 480,660 660,900
like this is their goal

876
00:26:16,350 --> 00:26:19,530
0,540 540,870 870,1620 2070,2130 2130,3180
function runs concurrently to and

877
00:26:19,530 --> 00:26:21,090
0,540 540,600 600,960 960,1230 1230,1560
after you know the request

878
00:26:21,090 --> 00:26:22,830
0,510 750,930 930,1260 1260,1440 1440,1740
food, it's about of the

879
00:26:22,860 --> 00:26:24,030
0,300 300,390 390,840 840,1020 1020,1170
vote to finish, we take

880
00:26:24,030 --> 00:26:25,240
0,60 60,360 360,750
a walk out.

881
00:26:25,240 --> 00:26:25,990
0,120 120,270 270,450 450,600 600,750
And then go has this

882
00:26:25,990 --> 00:26:28,750
0,240 240,1620 1620,1890 1890,2250 2250,2760
nice feature called diverse statement,

883
00:26:28,960 --> 00:26:31,420
0,540 840,1140 1140,1620 1980,2340 2340,2460
but if you fix it,

884
00:26:31,420 --> 00:26:32,440
0,60 60,360 360,750 750,840 840,1020
the basic block, you know

885
00:26:32,440 --> 00:26:35,050
0,300 300,1050 1560,2280 2280,2520 2520,2610
will run will run the

886
00:26:35,050 --> 00:26:36,850
0,390 390,630 630,1050 1050,1500 1500,1800
function that is declared by

887
00:26:37,000 --> 00:26:39,370
0,480 540,720 720,1440 1950,2280 2280,2370
for this, um, after the

888
00:26:39,370 --> 00:26:41,320
0,390 390,870 1380,1560 1560,1710 1710,1950
keyword divert, so this means

889
00:26:41,320 --> 00:26:43,090
0,180 180,570 570,1110 1170,1710 1710,1770
like we execute relief to

890
00:26:43,090 --> 00:26:45,460
0,360 360,750 750,1200 1320,1710 1710,2370
undergo function here will automatically

891
00:26:45,460 --> 00:26:46,360
0,540
unlock.

892
00:26:46,420 --> 00:26:47,740
0,300 300,360 360,840 840,1020 1020,1320
This is convenient because then

893
00:26:47,740 --> 00:26:49,000
0,180 180,330 330,600 600,660 660,1260
you won't forget to unlock.

894
00:26:49,780 --> 00:26:50,440
0,120 120,270 270,480 480,570 570,660
So it's nice to do

895
00:26:50,440 --> 00:26:51,310
0,210 210,390 390,450 450,720 720,870
that right, a point where

896
00:26:51,310 --> 00:26:52,420
0,90 90,240 240,360 360,810 840,1110
you do the walk and

897
00:26:52,420 --> 00:26:53,350
0,180 180,270 270,390 390,600 600,930
so you can write immediately,

898
00:26:53,350 --> 00:26:54,370
0,210 210,330 330,510 510,930 930,1020
do a read lock and

899
00:26:54,370 --> 00:26:55,420
0,300 300,540 540,690 690,810 810,1050
then you have to worry

900
00:26:55,420 --> 00:26:56,500
0,360 360,510 510,630 630,690 690,1080
about if there are multiple

901
00:26:56,500 --> 00:26:57,520
0,300 300,690 690,810 810,900 900,1020
actually pass out of the

902
00:26:57,520 --> 00:26:59,260
0,630 630,870 870,990 990,1110 1110,1740
routine or at a function

903
00:26:59,620 --> 00:27:00,790
0,420 420,630 630,720 720,960 960,1170
a that you forget to

904
00:27:00,790 --> 00:27:01,600
0,330
walk.

905
00:27:02,520 --> 00:27:03,930
0,150 150,750 780,930 930,1200 1200,1410
So now you know we're

906
00:27:03,930 --> 00:27:05,100
0,360 360,420 420,480 480,780 780,1170
basically in the critical section

907
00:27:05,100 --> 00:27:06,540
0,390 390,540 540,840 840,930 930,1440
where we hold the lock,

908
00:27:06,540 --> 00:27:08,700
0,600 600,960 960,1260 1260,1830 1830,2160
we update voting counts and

909
00:27:08,700 --> 00:27:09,630
0,330 330,420 420,600 600,660 660,930
then of course the function

910
00:27:09,630 --> 00:27:11,880
0,480 480,750 750,1170 1170,1740
returns and locks automatically.

911
00:27:12,240 --> 00:27:14,040
0,630 630,780 780,1230
Similarly, at the.

912
00:27:14,040 --> 00:27:16,350
0,750 750,990 990,1770 1950,2160 2160,2310
Um, at the at the

913
00:27:16,350 --> 00:27:17,610
0,360 390,510 510,630 630,720 720,1260
end you know we got

914
00:27:17,700 --> 00:27:19,470
0,600 1170,1260 1260,1440 1440,1650 1650,1770
a win every time we

915
00:27:19,470 --> 00:27:21,030
0,390 390,540 540,870 870,930 930,1560
access you account to finish

916
00:27:21,270 --> 00:27:22,500
0,330 330,540 540,690 690,1110 1110,1230
a since they share you

917
00:27:22,500 --> 00:27:23,910
0,180 180,330 330,540 540,990 990,1410
know we need to surrender

918
00:27:23,910 --> 00:27:25,890
0,630 630,1140 1170,1590 1590,1860 1860,1980
blocks and a simple way

919
00:27:25,890 --> 00:27:26,610
0,60 60,270 270,480 480,570 570,720
of doing that we could

920
00:27:26,610 --> 00:27:28,080
0,150 150,420 420,930 930,1320 1320,1470
have written deeper unlock here

921
00:27:28,080 --> 00:27:29,490
0,210 210,300 300,360 360,810 930,1410
too in the body whenever

922
00:27:29,490 --> 00:27:31,320
0,210 210,630 840,1320
being fine, right.

923
00:27:31,380 --> 00:27:32,400
0,300 300,390 390,510 510,780 780,1020
So we can actually run

924
00:27:32,400 --> 00:27:33,920
0,270 270,960
this program.

925
00:27:34,270 --> 00:27:35,760
0,210 210,810
What senior.

926
00:27:36,820 --> 00:27:38,080
0,300 300,540 540,690 690,930 930,1260
And so we run it,

927
00:27:38,080 --> 00:27:38,920
0,90 90,210 210,330 330,600 600,840
you know the race director

928
00:27:38,920 --> 00:27:40,180
0,180 180,270 270,390 390,990 1050,1260
seems to be happy, um,

929
00:27:40,180 --> 00:27:41,710
0,360 360,840 840,1140 1140,1350 1350,1530
so hopefully we'll have a

930
00:27:41,710 --> 00:27:43,800
0,240 240,660 960,1560
better program, right.

931
00:27:44,160 --> 00:27:44,880
0,240 240,360 360,450 450,600 600,720
Um, so I just have

932
00:27:44,880 --> 00:27:46,860
0,60 60,420 420,810 840,1410 1410,1980
a question here about scoping,

933
00:27:47,280 --> 00:27:48,270
0,270 270,510 510,690 690,840 840,990
so it seems that when

934
00:27:48,270 --> 00:27:49,470
0,90 90,210 210,300 300,690 690,1200
we have the anonymous function,

935
00:27:49,470 --> 00:27:50,250
0,120 120,240 240,360 360,510 510,780
then we have this view,

936
00:27:50,250 --> 00:27:51,630
0,120 120,240 240,540 570,930 930,1380
and we have the account

937
00:27:51,630 --> 00:27:52,350
0,90 90,150 150,270 270,330 330,720
and we have the finished

938
00:27:52,350 --> 00:27:53,010
0,90 90,180 180,390 390,570 570,660
and it seems that the

939
00:27:53,010 --> 00:27:54,690
0,330 330,630 630,780 780,1230 1230,1680
anonymous function has access to

940
00:27:54,960 --> 00:27:56,430
0,360 420,750 750,1050 1050,1380 1380,1470
the network defined outside the

941
00:27:56,430 --> 00:27:58,080
0,360 360,480 480,600 600,1350 1380,1650
function, so how developing rules

942
00:27:58,080 --> 00:27:58,860
0,360
work.

943
00:27:59,300 --> 00:28:01,490
0,630 630,840 840,1080 1080,1440 1440,2190
Yeah you've been any phenomena

944
00:28:01,520 --> 00:28:02,630
0,180 180,240 240,630 630,990 990,1110
with an anonymous function in

945
00:28:02,630 --> 00:28:04,340
0,240 240,600 600,870 870,1320 1320,1710
any variable that's used inside

946
00:28:04,340 --> 00:28:05,510
0,90 90,420 450,750 750,900 900,1170
of the function is not

947
00:28:05,510 --> 00:28:07,670
0,450 450,870 870,930 930,1470 1620,2160
declared inside a function, basically

948
00:28:07,670 --> 00:28:10,250
0,480 480,1110 1110,1620 1650,2220 2220,2580
resolve points to variables outside

949
00:28:10,250 --> 00:28:11,580
0,120 120,240 240,450 450,870
of the outer scope.

950
00:28:12,020 --> 00:28:13,540
0,150 150,540 540,930
So statically scoped.

951
00:28:14,830 --> 00:28:16,900
0,240 240,570 570,750 750,1230 1230,2070
What about the scope of

952
00:28:16,930 --> 00:28:18,640
0,270 270,360 360,1200
like the mutexes.

953
00:28:19,040 --> 00:28:20,600
0,690 690,900 900,1080 1080,1260 1260,1560
Yeah, like how many times

954
00:28:20,600 --> 00:28:21,590
0,60 60,150 150,270 270,690 690,990
you have to declare that

955
00:28:21,620 --> 00:28:23,210
0,600 720,1050 1050,1110 1110,1470 1470,1590
or what's the scope of

956
00:28:23,210 --> 00:28:24,770
0,240 270,420 420,840 1110,1230 1230,1560
it I guess the scope

957
00:28:24,770 --> 00:28:25,700
0,90 90,330 330,510 510,870 870,930
of the for statement is

958
00:28:25,700 --> 00:28:27,800
0,660 660,1110 1140,1380 1380,1680 1680,2100
this block one basic block.

959
00:28:29,190 --> 00:28:30,240
0,390 390,450 450,780 780,930 930,1050
No, I mean like when

960
00:28:30,240 --> 00:28:31,590
0,60 60,360 360,900 900,1140 1140,1350
you actually declare like the

961
00:28:31,590 --> 00:28:34,290
0,810 840,1440 1440,2100 2130,2250 2250,2700
mutexes data structure I guess,

962
00:28:34,650 --> 00:28:37,500
0,1350 1350,1560 1560,1740 1740,2340
like any other variable.

963
00:28:37,560 --> 00:28:38,730
0,180 180,360 360,420 420,660 660,1170
We ask the same schoolbus

964
00:28:38,730 --> 00:28:40,380
0,450 450,570 570,1080
finished your account.

965
00:28:40,550 --> 00:28:41,600
0,210 210,270 270,690 690,810 810,1050
So it applies to any

966
00:28:41,600 --> 00:28:44,000
0,960 1020,1770 1800,2010 2010,2100 2100,2400
variable declared in the rest

967
00:28:44,000 --> 00:28:45,770
0,90 90,570 1020,1500 1500,1620 1620,1770
of the eu to me

968
00:28:45,770 --> 00:28:46,910
0,120 120,270 270,600 600,780 780,1140
to think about is that,

969
00:28:46,910 --> 00:28:49,130
0,480 810,1560 1590,1860 1860,2070 2070,2220
um, the new Tech is

970
00:28:49,130 --> 00:28:50,570
0,240 240,630 630,1140 1140,1320 1320,1440
not directly associated with any

971
00:28:50,570 --> 00:28:51,920
0,510 510,630 630,870 870,960 960,1350
variable it's just a lock,

972
00:28:51,980 --> 00:28:54,500
0,360 360,660 660,1170 1530,2220 2220,2520
it's a name and it's

973
00:28:54,500 --> 00:28:55,190
0,150 150,240 240,450 450,570 570,690
up to you as a

974
00:28:55,190 --> 00:28:56,660
0,540 540,630 630,810 810,1080 1080,1470
programmer to just say what

975
00:28:56,660 --> 00:28:58,020
0,150 150,330 330,990
the law protects.

976
00:29:01,450 --> 00:29:02,560
0,180 180,300 300,360 360,570 570,1110
But there are two independent

977
00:29:02,560 --> 00:29:03,780
0,720
concepts.

978
00:29:04,350 --> 00:29:05,920
0,390 390,1050
What happens.

979
00:29:05,920 --> 00:29:06,880
0,120 120,420 420,510 510,600 600,960
What happens if you use

980
00:29:06,880 --> 00:29:09,010
0,0 0,630 630,1140 1170,1890 1920,2130
I in the gucci that

981
00:29:09,010 --> 00:29:09,940
0,270 270,510 510,720 720,810 810,930
won't work right, you need

982
00:29:09,940 --> 00:29:11,680
0,90 90,390 390,660 660,900 1380,1740
to pass that and yeah

983
00:29:11,680 --> 00:29:12,790
0,240 240,810 810,930 930,990 990,1110
so yeah that's a good

984
00:29:12,790 --> 00:29:13,810
0,360 360,480 480,630 630,780 780,1020
question, and then the number

985
00:29:13,810 --> 00:29:14,590
0,90 90,360 360,540 540,630 630,780
be n number of you

986
00:29:14,590 --> 00:29:16,000
0,540 540,660 660,990 990,1230 1230,1410
asked for email too, so

987
00:29:16,000 --> 00:29:17,200
0,180 180,390 390,780 780,1110 1110,1200
what yeah what happens to

988
00:29:17,200 --> 00:29:17,770
0,120 120,270 270,390 390,570 570,570
like if we use eye

989
00:29:17,770 --> 00:29:19,600
0,720 750,990 990,1080 1080,1440 1500,1830
here and they want to

990
00:29:20,080 --> 00:29:21,160
0,210 210,540 540,690 690,870 870,1080
do something with it, like

991
00:29:21,160 --> 00:29:22,120
0,540
whatever.

992
00:29:22,120 --> 00:29:24,500
0,540 540,1020 1020,1530
Count is I.

993
00:29:24,620 --> 00:29:25,760
0,300 300,630 630,720 720,900 900,1140
A is a good plan

994
00:29:25,760 --> 00:29:26,720
0,60 60,420
or not.

995
00:29:31,460 --> 00:29:32,570
0,300 300,570 570,660 660,870 870,1110
What value of I will

996
00:29:32,570 --> 00:29:34,100
0,240 240,720 780,1140 1140,1290 1290,1530
be using when his friend

997
00:29:34,100 --> 00:29:35,820
0,330 330,690 690,810 810,1110
actually happens to run.

998
00:29:36,020 --> 00:29:37,670
0,330 330,690 690,1020 1020,1140 1140,1650
If gold starts to function

999
00:29:37,670 --> 00:29:38,690
0,450 450,570 570,750 750,900 900,1020
function and will run at

1000
00:29:38,690 --> 00:29:40,040
0,150 150,480 480,780 780,1170 1170,1350
some point what value I

1001
00:29:40,040 --> 00:29:41,380
0,360 360,630 630,750
will use it.

1002
00:29:41,710 --> 00:29:43,540
0,780 780,990 990,1410 1410,1560 1560,1830
Whatever I happens to be

1003
00:29:43,540 --> 00:29:44,920
0,180 180,270 270,660 660,990 990,1380
at the time which is

1004
00:29:44,950 --> 00:29:46,900
0,600 600,1560 1560,1680 1680,1770 1770,1950
being changed by the for

1005
00:29:46,900 --> 00:29:49,900
0,210 210,810 870,1440 1710,2610 2610,3000
loop outside yeah so and

1006
00:29:49,930 --> 00:29:50,590
0,150 150,300 300,360 360,540 540,660
so this is not so

1007
00:29:50,590 --> 00:29:51,970
0,360 480,690 690,870 870,1230 1230,1380
great, it does probably not

1008
00:29:51,970 --> 00:29:53,470
0,180 180,300 300,810 840,1170 1170,1500
what we intended, we probably

1009
00:29:53,470 --> 00:29:55,240
0,420 420,510 510,1020 1020,1320 1320,1770
intended to ide we whatever

1010
00:29:55,240 --> 00:29:57,040
0,90 90,570 570,930 930,1410 1440,1800
for desperately loop iteration, right.

1011
00:29:58,270 --> 00:29:59,020
0,180 180,300 300,390 390,570 570,750
So how do we want

1012
00:29:59,020 --> 00:29:59,710
0,90 90,330 330,510 510,600 600,690
to if we have to

1013
00:29:59,710 --> 00:30:01,060
0,360 360,510 510,870 870,990 990,1350
solve, how would we do.

1014
00:30:01,640 --> 00:30:03,650
0,270 270,1140 1380,1680 1680,1830 1830,2010
You could add it as

1015
00:30:03,650 --> 00:30:04,910
0,60 60,660 660,750 750,840 840,1260
a parameter to the anonymous

1016
00:30:04,910 --> 00:30:06,050
0,360 360,540 540,810 810,870 870,1140
function and pass it in

1017
00:30:06,050 --> 00:30:07,910
0,150 150,300 300,840 990,1620 1620,1860
so it gets evaluated, we

1018
00:30:07,910 --> 00:30:10,130
0,390 390,930 930,1320 1590,2100 2100,2220
create go-go routine yeah, so

1019
00:30:10,130 --> 00:30:12,340
0,90 90,210 210,420 420,930
would you write this.

1020
00:30:12,340 --> 00:30:13,810
0,150 150,270 270,600 600,1080 1260,1470
And then pass acne right

1021
00:30:13,810 --> 00:30:15,220
0,300 300,720 720,900 900,1230 1230,1410
then appoint what happens then

1022
00:30:15,220 --> 00:30:16,270
0,120 120,210 210,720 720,840 840,1050
at the point we actually

1023
00:30:16,270 --> 00:30:18,310
0,600 600,1290 1290,1710 1710,1890 1890,2040
create zero routine I is

1024
00:30:18,310 --> 00:30:19,620
0,180 180,780
being captured.

1025
00:30:19,820 --> 00:30:21,240
0,180 180,300 300,630 630,840
And then passed it.

1026
00:30:22,250 --> 00:30:23,380
0,450
Okay.

1027
00:30:24,390 --> 00:30:25,860
0,870
KFC.

1028
00:30:25,920 --> 00:30:27,900
0,600 840,1140 1140,1440 1440,1620 1620,1980
Um, how are the local

1029
00:30:27,900 --> 00:30:30,570
0,450 450,1380 1740,2010 2010,2460 2490,2670
variables allocated like if if

1030
00:30:30,570 --> 00:30:32,250
0,270 270,810 810,930 930,1320 1350,1680
count unfinished are like local

1031
00:30:32,250 --> 00:30:34,410
0,540 540,840 840,1050 1050,1590 1710,2160
variables wouldn't they like be

1032
00:30:34,410 --> 00:30:35,970
0,600 600,840 840,960 960,1170 1170,1560
destroyed after the main function

1033
00:30:35,970 --> 00:30:37,590
0,600 720,1080 1080,1230 1230,1380 1380,1620
exits like if this often

1034
00:30:37,590 --> 00:30:38,850
0,240 240,450 450,750 750,1110 1110,1260
made but another function, what

1035
00:30:38,850 --> 00:30:40,410
0,150 150,450 540,1020 1020,1260 1260,1560
is like the heating function

1036
00:30:40,410 --> 00:30:43,440
0,300 300,780 1050,1470 1470,2670 2670,3030
existed before coverage z principal

1037
00:30:43,440 --> 00:30:45,960
0,420 420,510 510,1080 1200,1890 1890,2520
allocated in stack, um, and

1038
00:30:45,960 --> 00:30:47,070
0,120 120,330 330,750 780,990 990,1110
you know the room with

1039
00:30:47,070 --> 00:30:48,690
0,60 60,240 240,600 600,990 990,1620
the other functions there's memory

1040
00:30:48,690 --> 00:30:50,820
0,570 570,1080 1080,1230 1230,1620 1890,2130
addresses references to them so

1041
00:30:50,820 --> 00:30:51,720
0,90 90,360 360,420 420,750 750,900
it's indeed the case, his

1042
00:30:51,720 --> 00:30:53,850
0,330 330,1050 1140,1440 1440,1950 1980,2130
main returns, then these you

1043
00:30:53,850 --> 00:30:55,830
0,480 480,870 870,1140 1140,1590 1590,1980
know the stack allocated variables

1044
00:30:55,830 --> 00:30:56,640
0,120 120,510
are gone.

1045
00:30:56,820 --> 00:30:58,230
0,180 180,540 540,720 720,900 900,1410
So typically what you'll see

1046
00:30:58,230 --> 00:30:59,700
0,210 210,510 510,780 780,990 990,1470
is not a go program,

1047
00:30:59,700 --> 00:31:01,080
0,180 180,330 330,840 840,870 870,1380
you would allocate, I mean

1048
00:31:01,110 --> 00:31:01,980
0,90 90,210 210,420 420,510 510,870
you know on the heap

1049
00:31:02,010 --> 00:31:03,660
0,540 540,930 930,1260 1260,1440 1440,1650
using new if you make

1050
00:31:03,660 --> 00:31:05,250
0,30 30,180 180,750 780,1140 1140,1590
a new truck or whatever,

1051
00:31:05,580 --> 00:31:06,750
0,240 240,360 360,480 480,510 510,1170
so you get a segmentation

1052
00:31:06,750 --> 00:31:07,920
0,270 270,570 570,870 870,1050 1050,1170
fault then, or would it

1053
00:31:07,920 --> 00:31:11,040
0,240 270,990 1290,1890
just go okay.

1054
00:31:13,500 --> 00:31:14,670
0,360 360,450 450,540 540,840 840,1170
A I have a question

1055
00:31:14,670 --> 00:31:15,630
0,90 90,300 300,630 630,810 810,960
I actually remember this is

1056
00:31:15,630 --> 00:31:17,520
0,210 210,900 1110,1680 1680,1740 1740,1890
the correct way to do

1057
00:31:17,520 --> 00:31:18,360
0,90 90,150 150,390 390,570 570,840
it or not but instead

1058
00:31:18,360 --> 00:31:19,770
0,120 120,570 570,690 690,1050 1140,1410
of passing it in would

1059
00:31:19,770 --> 00:31:20,880
0,60 60,120 120,660 660,900 900,1110
it be possible to as

1060
00:31:20,880 --> 00:31:21,870
0,90 90,420 420,720 720,870 870,990
the first line in the

1061
00:31:21,870 --> 00:31:23,310
0,240 240,510 510,720 720,1140 1140,1440
for loop do I colon

1062
00:31:23,310 --> 00:31:24,660
0,300 300,750
equals I.

1063
00:31:24,960 --> 00:31:26,070
0,450 450,630 630,750 750,930 930,1110
Um, and then you're like

1064
00:31:26,070 --> 00:31:27,180
0,180 180,360 360,750 840,1020 1020,1110
you have A I don't

1065
00:31:27,180 --> 00:31:28,200
0,90 90,270 270,360 360,750 750,1020
know how the scoping works

1066
00:31:28,200 --> 00:31:30,330
0,570 600,810 810,1230 1290,1890 1890,2130
within the like block of

1067
00:31:30,330 --> 00:31:31,290
0,90 90,360 360,630 630,870 870,960
the for loop because I

1068
00:31:31,290 --> 00:31:32,430
0,150 150,300 300,480 480,900 900,1140
think that should create a

1069
00:31:32,430 --> 00:31:34,530
0,510 660,1290 1290,1770 1830,2010 2010,2100
new variable I that the

1070
00:31:34,530 --> 00:31:35,700
0,210 210,510 510,630 630,1050 1050,1170
go routine can access that

1071
00:31:35,700 --> 00:31:37,710
0,180 180,360 360,690 690,1290 1740,2010
isn't being updated again, {that's

1072
00:31:37,710 --> 00:31:40,230
0,2010 2010,2070 2070,2250 2250,2340 2340,2520
-} a makes it look

1073
00:31:40,230 --> 00:31:42,750
0,270 600,690 690,960 1710,1980 1980,2520
ugly to me, okay I

1074
00:31:42,750 --> 00:31:43,890
0,180 180,420 420,750 750,990 990,1140
I like passing in but

1075
00:31:43,890 --> 00:31:44,700
0,180 180,420 420,570 570,630 630,810
that's another way of doing

1076
00:31:44,700 --> 00:31:46,410
0,390 390,810 810,1200 1200,1320 1320,1710
it all shows an example

1077
00:31:46,410 --> 00:31:47,120
0,330
later.

1078
00:31:49,200 --> 00:31:51,300
0,450 600,840 840,1470 1470,1740 1740,2100
Um, so somebody asked actually

1079
00:31:51,300 --> 00:31:51,930
0,90 90,210 210,300 300,450 450,630
you know, do we get

1080
00:31:51,930 --> 00:31:54,570
0,1320 1380,1860 1860,2220 2220,2370 2370,2640
a segmentation fault, we're not

1081
00:31:54,570 --> 00:31:55,320
0,420 420,540 540,600 600,720 720,750
immediately going to get a

1082
00:31:55,320 --> 00:31:56,640
0,540 540,780 780,1020 1020,1200 1200,1320
segmentation fault actually take that

1083
00:31:56,640 --> 00:31:58,890
0,420 750,1200 1200,1620 1620,2040 2040,2250
back, um, because basically one

1084
00:31:58,890 --> 00:32:00,000
0,300 300,570 570,810 810,1020 1020,1110
thread will still hold a

1085
00:32:00,000 --> 00:32:02,130
0,630 930,1110 1110,1230 1230,1830 1830,2130
reference so the garbage collector

1086
00:32:02,130 --> 00:32:03,900
0,150 150,510 510,1290 1290,1380 1380,1770
will not delete the object

1087
00:32:03,900 --> 00:32:04,640
0,330
yet.

1088
00:32:05,000 --> 00:32:06,080
0,210 210,510 510,630 630,720 720,1080
But only when the last

1089
00:32:06,080 --> 00:32:08,300
0,270 270,810 810,1140 1140,2040 2040,2220
thread actually, um, only when

1090
00:32:08,300 --> 00:32:09,650
0,240 240,510 510,810 810,870 870,1350
no fret holds a reference,

1091
00:32:09,650 --> 00:32:10,820
0,90 90,270 270,750 750,870 870,1170
you know will the garbage

1092
00:32:10,820 --> 00:32:12,640
0,360 360,720 720,840 840,1320
collector, delete the object.

1093
00:32:12,640 --> 00:32:13,180
0,150 150,270 270,330 330,450 450,540
And these are one of

1094
00:32:13,180 --> 00:32:14,110
0,60 60,300 300,510 510,750 750,930
the cool things about having

1095
00:32:14,110 --> 00:32:15,430
0,30 30,330 330,660 660,1050 1050,1320
a garbage collected language and

1096
00:32:15,430 --> 00:32:17,440
0,240 240,540 540,1200 1440,1860 1860,2010
shared memory programming, you don't

1097
00:32:17,440 --> 00:32:18,250
0,90 90,210 210,450 450,660 660,810
have to worry about that

1098
00:32:18,250 --> 00:32:19,300
0,510
scenario.

1099
00:32:21,300 --> 00:32:24,680
0,750 780,1410
Okay, okay.

1100
00:32:24,680 --> 00:32:25,620
0,390
Yeah.

1101
00:32:25,620 --> 00:32:27,420
0,360 450,750 750,1350 1380,1590 1590,1800
Um, that would could this

1102
00:32:27,420 --> 00:32:29,880
0,270 270,450 450,1140 1410,2250 2280,2460
code like deadlock because like

1103
00:32:29,880 --> 00:32:31,290
0,270 270,660 660,870 870,1200 1200,1410
if we if the go

1104
00:32:31,290 --> 00:32:33,090
0,750 990,1110 1110,1380 1380,1500 1500,1800
routines I took the first

1105
00:32:33,090 --> 00:32:34,320
0,180 180,390 390,510 510,1050 1050,1230
for loop will exit and

1106
00:32:34,320 --> 00:32:35,670
0,330 330,480 480,840 840,1170 1170,1350
then the second one will

1107
00:32:35,670 --> 00:32:37,140
0,330 420,960
like, um.

1108
00:32:37,930 --> 00:32:40,540
0,240 240,420 420,840
Yeah, no nevermind.

1109
00:32:40,660 --> 00:32:41,980
0,330 330,750 750,840 840,1170 1170,1320
A there are definitely some

1110
00:32:41,980 --> 00:32:43,000
0,270 270,450 450,510 510,690 690,1020
issues that are not ideal

1111
00:32:43,000 --> 00:32:44,110
0,240 240,510 510,630 630,840 840,1110
yet, so let me actually

1112
00:32:44,110 --> 00:32:45,640
0,210 210,420 420,660 990,1260 1260,1530
talk about them, um, one

1113
00:32:45,640 --> 00:32:46,990
0,60 60,270 270,600 600,1080 1080,1350
of them is that this

1114
00:32:46,990 --> 00:32:49,450
0,480 480,1050 1230,1530 1530,2100 2100,2460
particular loop, so annoying like

1115
00:32:49,450 --> 00:32:50,950
0,360 360,720 840,1080 1080,1320 1320,1500
there's this for loop is

1116
00:32:50,950 --> 00:32:52,210
0,210 210,450 450,720 720,840 840,1260
there's nothing else than waiting

1117
00:32:52,210 --> 00:32:53,950
0,150 150,420 420,720 720,1230 1230,1740
till count reaches five finished.

1118
00:32:54,380 --> 00:32:55,130
0,210 210,270 270,420 420,480 480,750
And the way it does,

1119
00:32:55,130 --> 00:32:56,120
0,120 120,210 210,390 390,510 510,990
it is about your spinning

1120
00:32:56,210 --> 00:32:58,070
0,300 300,450 450,720 720,1290 1290,1860
right, so it looks looks

1121
00:32:58,070 --> 00:32:59,360
0,420 420,480 480,570 570,870 870,1290
looks at the valley quickly,

1122
00:32:59,360 --> 00:33:00,260
0,150 150,420 420,540 540,630 630,900
it locks it and spins

1123
00:33:00,260 --> 00:33:01,490
0,270 270,510 510,690 690,1020 1020,1230
around again so basically she's

1124
00:33:01,490 --> 00:33:02,840
0,480 480,570 570,660 660,1110 1110,1350
spinning on the prosper doing

1125
00:33:02,840 --> 00:33:04,550
0,210 210,540 1110,1320 1320,1410 1410,1710
really nothing would be nice

1126
00:33:04,550 --> 00:33:05,300
0,90 90,420 420,540 540,660 660,750
to express that in a

1127
00:33:05,300 --> 00:33:06,290
0,150 150,270 270,570 570,840 840,990
little bit better way so

1128
00:33:06,290 --> 00:33:07,850
0,300 300,750 750,990 990,1200 1200,1560
that basically the NGO can

1129
00:33:07,850 --> 00:33:09,140
0,180 180,360 360,540 540,990 990,1290
give up their poor again,

1130
00:33:09,140 --> 00:33:09,980
0,120 120,240 240,510 510,750 750,840
so then another thread can

1131
00:33:09,980 --> 00:33:11,040
0,450
run.

1132
00:33:11,040 --> 00:33:11,940
0,180 180,300 300,360 360,720 720,900
And so the way you

1133
00:33:11,940 --> 00:33:12,660
0,90 90,180 180,420 420,510 510,720
can do that is using

1134
00:33:12,660 --> 00:33:14,220
0,330 330,930 930,1140 1140,1380 1380,1560
condition variables, and so this

1135
00:33:14,220 --> 00:33:16,900
0,120 120,540 570,1170 1170,1950
is my next implementation.

1136
00:33:17,300 --> 00:33:19,730
0,1380 1380,1770 1800,2130 2130,2190 2190,2430
Um, or actually I show

1137
00:33:19,730 --> 00:33:21,140
0,90 90,240 240,510 510,1080 1080,1410
you one other implication, one

1138
00:33:21,140 --> 00:33:22,010
0,180 180,300 300,450 450,690 690,870
way to do that there's

1139
00:33:22,010 --> 00:33:22,850
0,30 30,180 180,300 300,690 720,840
a little bit, not you

1140
00:33:22,850 --> 00:33:23,720
0,90 90,330 330,420 420,750 750,870
know not so nice, for

1141
00:33:23,720 --> 00:33:25,550
0,540 540,840 870,1200 1200,1560 1560,1830
example and somebody suggested this

1142
00:33:25,880 --> 00:33:26,960
0,390 390,570 570,660 660,840 840,1080
a is to actually sleep

1143
00:33:26,960 --> 00:33:27,980
0,90 90,120 120,330 330,720 750,1020
for a little while, so

1144
00:33:27,980 --> 00:33:30,140
0,270 270,420 420,780 1140,1860 1890,2160
instead of like a giving

1145
00:33:30,140 --> 00:33:31,850
0,150 150,690 720,1170 1170,1290 1290,1710
up the spinning like crazy,

1146
00:33:31,850 --> 00:33:33,590
0,180 180,390 390,810 810,1290 1350,1740
just sleep one periodic sleep

1147
00:33:33,590 --> 00:33:34,310
0,120 120,210 210,510 510,600 600,720
for a period and then

1148
00:33:34,310 --> 00:33:35,200
0,90 90,480
come back.

1149
00:33:35,500 --> 00:33:36,340
0,120 120,330 330,420 420,690 690,840
Of course, this solution will

1150
00:33:36,340 --> 00:33:37,420
0,360 360,450 450,540 540,990 990,1080
work, but the downside of

1151
00:33:37,420 --> 00:33:39,040
0,120 120,300 300,1170 1170,1440 1440,1620
it is how long should

1152
00:33:39,040 --> 00:33:40,570
0,120 120,600 630,1050 1080,1290 1290,1530
you sleep right, you really

1153
00:33:40,570 --> 00:33:41,230
0,150 150,390 390,450 450,570 570,660
would like to be the

1154
00:33:41,230 --> 00:33:42,430
0,360 360,570 570,750 750,1140 1140,1200
case that I assume for

1155
00:33:42,430 --> 00:33:44,080
0,390 390,570 570,780 780,1050 1050,1650
example this guy reaches five

1156
00:33:44,530 --> 00:33:46,480
0,1140 1140,1230 1230,1380 1380,1530 1530,1950
then you know you wake

1157
00:33:46,510 --> 00:33:48,130
0,480 570,780 780,1020 1020,1170 1170,1620
you could wake up this

1158
00:33:48,130 --> 00:33:49,300
0,570 600,720 720,810 810,930 930,1170
particular you know the main

1159
00:33:49,300 --> 00:33:50,100
0,330
threat.

1160
00:33:50,130 --> 00:33:52,080
0,240 240,630 1290,1470 1470,1680 1680,1950
And so I was jumping

1161
00:33:52,080 --> 00:33:52,890
0,180 180,210 210,390 390,570 570,810
ahead a little bit, but

1162
00:33:52,890 --> 00:33:54,720
0,540 660,840 840,1140 1140,1440 1440,1830
um so that's what condition

1163
00:33:54,720 --> 00:33:57,870
0,450 450,570 570,1110 1530,2310 2550,3150
variables are for a you

1164
00:33:57,870 --> 00:33:58,860
0,90 90,390 390,450 450,870 870,990
know, here's a solution with

1165
00:33:58,860 --> 00:34:00,300
0,360 360,990
condition variables.

1166
00:34:00,670 --> 00:34:04,150
0,660 1050,1830 2040,2460 2460,3030 3030,3480
Um, so, um, we allocated

1167
00:34:04,150 --> 00:34:06,100
0,60 60,570 600,990 990,1530 1530,1950
a new condition to years

1168
00:34:06,100 --> 00:34:08,380
0,480 480,840 840,1470 1530,1680 1680,2280
conditioner rallies allocated it's associated

1169
00:34:08,380 --> 00:34:09,700
0,150 150,300 300,720 720,1140 1140,1320
with this particular lock will

1170
00:34:09,700 --> 00:34:10,840
0,210 210,300 300,630 630,900 900,1140
see the second wine is

1171
00:34:10,840 --> 00:34:12,140
0,660
important.

1172
00:34:12,340 --> 00:34:13,750
0,720 720,840 840,930 930,1290 1290,1410
And you know basically the

1173
00:34:13,750 --> 00:34:14,740
0,300 300,540 540,690 690,750 750,990
main thread what it does

1174
00:34:14,740 --> 00:34:17,260
0,600 750,1470 1470,2160 2160,2430 2430,2520
now, um, it grabs the

1175
00:34:17,260 --> 00:34:18,130
0,360 360,540 540,630 630,810 810,870
log because he needs to

1176
00:34:18,130 --> 00:34:18,970
0,180 180,270 270,540 540,660 660,840
grab the log to look

1177
00:34:18,970 --> 00:34:20,410
0,150 150,510 510,600 600,990 990,1440
at count and finish, otherwise

1178
00:34:20,410 --> 00:34:20,980
0,90 90,240 240,330 330,390 390,570
there could be a race

1179
00:34:20,980 --> 00:34:25,060
0,660 1080,1470 1470,1980 1980,1980 1980,4080
conditions and then, um, if

1180
00:34:25,090 --> 00:34:25,900
0,120 120,420 420,480 480,660 660,810
the condition is still not

1181
00:34:25,900 --> 00:34:27,580
0,480 540,750 750,960 960,1260 1260,1680
true, it just calls wait

1182
00:34:27,610 --> 00:34:29,260
0,210 210,330 330,690 690,1170
on this condition variable.

1183
00:34:29,640 --> 00:34:30,720
0,180 180,360 360,570 570,930 930,1080
And what that does is

1184
00:34:30,720 --> 00:34:32,880
0,330 330,750 840,1680 1680,1890 1890,2160
actually done atomic Lee goes

1185
00:34:32,880 --> 00:34:34,710
0,90 90,840 960,1320 1320,1710 1710,1830
to sleep as well as

1186
00:34:34,710 --> 00:34:35,940
0,540 540,660 660,990 990,1110 1110,1230
releasing the lock that is

1187
00:34:35,940 --> 00:34:37,500
0,570 570,690 690,780 780,1110 1110,1560
associated with the condition variable,

1188
00:34:37,830 --> 00:34:39,420
0,420 420,570 570,870 870,960 960,1590
since no mirror is actually

1189
00:34:39,420 --> 00:34:41,730
0,630 630,720 720,1050 1050,1650 1680,2310
associated the condition variable Conway

1190
00:34:41,730 --> 00:34:46,290
0,630 750,1680 1800,2760 2880,3750 3780,4560
basically unlocks the lock 'em

1191
00:34:46,320 --> 00:34:47,700
0,480 480,690 690,750 750,1170 1200,1380
and goes to sleep in

1192
00:34:47,700 --> 00:34:49,180
0,90 90,480 480,1080
an atomic operation.

1193
00:34:49,580 --> 00:34:51,410
0,240 240,360 360,540 540,1350 1470,1830
And when it returns from

1194
00:34:51,410 --> 00:34:52,700
0,510 510,660 660,840 840,1080 1080,1290
convoy, it will actually hold

1195
00:34:52,700 --> 00:34:53,960
0,90 90,360 360,720
the walk again.

1196
00:34:53,990 --> 00:34:55,790
0,240 240,360 360,1050 1050,1290 1440,1800
So the color is those

1197
00:34:55,790 --> 00:34:56,900
0,60 60,450 450,690 690,840 840,1110
are absolutely sure that if

1198
00:34:56,900 --> 00:34:58,610
0,390 390,780 780,1140 1140,1410 1410,1710
convoy returns will actually help

1199
00:34:58,610 --> 00:34:59,870
0,120 120,360 360,750 960,1140 1140,1260
to walk again so it's

1200
00:34:59,870 --> 00:35:00,860
0,270 270,540 540,630 630,870 870,990
safe again to look at

1201
00:35:00,860 --> 00:35:02,000
0,300 300,390 390,750 750,960 960,1140
count and finish and then

1202
00:35:02,000 --> 00:35:03,220
0,180 180,390 390,690
call wait again.

1203
00:35:03,690 --> 00:35:04,840
0,660
Okay.

1204
00:35:05,160 --> 00:35:06,210
0,150 150,570 570,660 660,780 780,1050
So basically you know this

1205
00:35:06,210 --> 00:35:07,380
0,240 240,360 360,480 480,600 600,1170
friend will go to sleep,

1206
00:35:07,800 --> 00:35:10,200
0,810 810,1410 1410,1950 1950,2190 2190,2400
um, and then the go

1207
00:35:10,200 --> 00:35:11,970
0,450 450,1050 1080,1290 1290,1680 1680,1770
routines that are collecting the

1208
00:35:11,970 --> 00:35:13,650
0,600 870,1050 1050,1320 1320,1590 1590,1680
votes the same code as

1209
00:35:13,650 --> 00:35:15,900
0,630 660,900 900,1740 1740,1860 1860,2250
before my lock and unlock

1210
00:35:15,900 --> 00:35:17,280
0,90 90,450 450,540 540,1050 1260,1380
or deferred to unlock and

1211
00:35:17,280 --> 00:35:18,540
0,180 180,420 420,600 600,1080 1110,1260
then when you're done, you

1212
00:35:18,540 --> 00:35:20,640
0,210 210,630 630,960 960,1500 1770,2100
know updating county finished a

1213
00:35:20,640 --> 00:35:22,110
0,420 420,960 960,1080 1080,1140 1140,1470
thereto primitives on a condition

1214
00:35:22,110 --> 00:35:23,400
0,420 420,630 630,750 750,1200 1200,1290
variable one is signal and

1215
00:35:23,400 --> 00:35:24,720
0,120 120,210 210,930
what is broadcast.

1216
00:35:24,720 --> 00:35:26,670
0,180 180,540 540,990 990,1680 1710,1950
Um in broadcast, basically a

1217
00:35:26,670 --> 00:35:28,470
0,450 480,990 990,1080 1080,1350 1350,1800
signal weights of one waiter

1218
00:35:28,470 --> 00:35:29,760
0,540 540,750 750,870 870,870 870,1290
broadcast weights of oh wait

1219
00:35:30,120 --> 00:35:31,200
0,210 210,420 420,600 600,840 840,1080
no there's only one waiter

1220
00:35:31,200 --> 00:35:32,220
0,540 540,690 690,780 780,900 900,1020
here, so we could have

1221
00:35:32,220 --> 00:35:33,150
0,240 240,390 390,600 600,690 690,930
used either one of them.

1222
00:35:34,740 --> 00:35:36,000
0,450 450,630 630,960 960,1110 1110,1260
And so basically when it

1223
00:35:36,000 --> 00:35:37,710
0,690 750,870 870,1050 1050,1590 1620,1710
reaches you know five you

1224
00:35:37,710 --> 00:35:39,030
0,150 150,330 330,630 630,720 720,1320
know some point or ten

1225
00:35:39,180 --> 00:35:40,800
0,570 570,720 720,1290 1290,1410 1410,1620
then you know so every

1226
00:35:40,800 --> 00:35:42,420
0,270 270,660 660,840 840,1440 1470,1620
time finishes and commanded you

1227
00:35:42,420 --> 00:35:43,600
0,630
know.

1228
00:35:43,600 --> 00:35:44,500
0,180 180,450 450,630 630,810 810,900
A main thread will be

1229
00:35:44,500 --> 00:35:46,180
0,300 300,660 870,1020 1020,1110 1110,1680
woken up, you can check

1230
00:35:46,180 --> 00:35:47,440
0,90 90,750 750,870 870,1020 1020,1260
the condition and then keep

1231
00:35:47,440 --> 00:35:48,240
0,270
oh.

1232
00:35:48,580 --> 00:35:49,740
0,630
Okay.

1233
00:35:50,260 --> 00:35:51,580
0,210 210,360 360,480 480,1080 1080,1320
So this is convenient so

1234
00:35:51,580 --> 00:35:52,570
0,210 210,300 300,420 420,630 630,990
you can think about condition

1235
00:35:52,570 --> 00:35:54,760
0,510 510,660 660,810 810,1620 1620,2190
variables as a coordination primitive

1236
00:35:54,790 --> 00:35:57,280
0,870 1080,1260 1260,1560 1560,2070 2310,2490
between two different threats and

1237
00:35:57,280 --> 00:35:58,570
0,120 120,450 450,870 870,1080 1080,1290
their particular convenient when you're

1238
00:35:58,570 --> 00:36:00,010
0,330 330,600 600,1170 1170,1260 1260,1440
actually using walks you know

1239
00:36:00,010 --> 00:36:01,660
0,870 930,1020 1020,1290 1290,1380 1380,1650
four to protect your chef

1240
00:36:01,660 --> 00:36:02,540
0,390
state.

1241
00:36:07,570 --> 00:36:09,400
0,990
AW.

1242
00:36:10,580 --> 00:36:13,130
0,210 210,510 510,870 870,1890 1950,2550
So here's the same, a

1243
00:36:13,130 --> 00:36:15,680
0,990 1080,1740 1740,1860 1860,2280 2280,2550
implementation of this program using

1244
00:36:15,680 --> 00:36:16,900
0,720
channels.

1245
00:36:16,930 --> 00:36:18,850
0,900 900,1350 1350,1710 1710,1770 1770,1920
Um in more or less

1246
00:36:18,850 --> 00:36:20,470
0,300 300,360 360,600 600,1110 1110,1620
worked the same way except

1247
00:36:20,470 --> 00:36:21,640
0,150 150,330 330,510 510,660 660,1170
with of course no wash,

1248
00:36:21,970 --> 00:36:24,010
0,450 450,780 810,1500 1560,1800 1800,2040
um, but, um, the main

1249
00:36:24,010 --> 00:36:26,440
0,180 180,540 540,1080 1080,1530 1530,2430
thread creator channel passes the

1250
00:36:26,530 --> 00:36:28,720
0,420 420,870 870,1290 1290,1920 1920,2190
goal routine denials function, um

1251
00:36:28,720 --> 00:36:29,800
0,330 330,570 570,900 900,1050 1050,1080
that's being created as a

1252
00:36:29,800 --> 00:36:31,840
0,330 330,780 1020,1350 1350,1650 1650,2040
separate thread their rights, basically

1253
00:36:31,840 --> 00:36:32,890
0,120 120,540 540,840 840,930 930,1050
the request vote to the

1254
00:36:32,890 --> 00:36:34,420
0,570 840,1050 1050,1200 1200,1260 1260,1530
channel and then the main

1255
00:36:34,420 --> 00:36:36,040
0,300 300,750 750,1140 1140,1440 1440,1620
thread basically blocks here right

1256
00:36:36,040 --> 00:36:37,030
0,150 150,240 240,480 480,750 750,990
when it starts reading from

1257
00:36:37,030 --> 00:36:38,080
0,630
channel.

1258
00:36:38,080 --> 00:36:39,370
0,360 360,690 690,780 780,1080 1080,1290
A once you actually get

1259
00:36:39,370 --> 00:36:40,450
0,330 330,420 420,690 690,810 810,1080
something when something is written

1260
00:36:40,450 --> 00:36:41,890
0,120 120,210 210,750 750,930 930,1440
to the general in block,

1261
00:36:42,280 --> 00:36:43,600
0,150 150,420 420,510 510,570 570,1320
you look at the value

1262
00:36:43,600 --> 00:36:45,400
0,510 510,720 720,1170 1170,1380 1380,1800
and its true add up

1263
00:36:45,400 --> 00:36:47,200
0,360 420,810 810,1170 1170,1500 1500,1800
and, um, auto and always

1264
00:36:47,200 --> 00:36:48,520
0,330 330,870
increment finish.

1265
00:36:48,830 --> 00:36:50,330
0,360 360,900 900,1080 1080,1230 1230,1500
And what's going on here

1266
00:36:50,330 --> 00:36:51,200
0,210 210,360 360,480 480,660 660,870
correct this we don't need

1267
00:36:51,200 --> 00:36:52,670
0,420 420,540 540,720 720,1110 1110,1470
locks, but Chris counted finisher

1268
00:36:52,670 --> 00:36:54,320
0,180 180,600 660,930 930,1140 1140,1650
not shared, there's only one

1269
00:36:54,320 --> 00:36:56,540
0,360 360,510 510,750 750,1440 1470,2220
thread that actually updates account

1270
00:36:56,540 --> 00:36:57,380
0,90 90,450 450,570 570,750 750,840
and finish and that's the

1271
00:36:57,380 --> 00:36:58,460
0,240 240,510
main threat.

1272
00:36:58,830 --> 00:37:00,100
0,780
Okay.

1273
00:37:00,520 --> 00:37:01,740
0,660
I'm.

1274
00:37:01,770 --> 00:37:03,120
0,750
Girl.

1275
00:37:03,240 --> 00:37:05,490
0,780 1080,1410 1410,1770 1770,2160 2160,2250
Um, and this this you

1276
00:37:05,490 --> 00:37:07,050
0,120 120,450 450,540 540,1020 1020,1560
know the the main the

1277
00:37:07,620 --> 00:37:09,030
0,570 810,960 960,1200 1200,1320 1320,1410
requested for its you know

1278
00:37:09,030 --> 00:37:10,410
0,330 330,810 810,960 960,1260 1260,1380
all basically just right through

1279
00:37:10,410 --> 00:37:12,060
0,240 240,1080 1080,1320 1320,1410 1410,1650
this channel with a right

1280
00:37:12,060 --> 00:37:13,470
0,450 450,810 810,900 900,990 990,1410
currently perhaps in a channel,

1281
00:37:13,770 --> 00:37:14,760
0,270 270,360 360,750 750,810 810,990
but the channels are one

1282
00:37:14,760 --> 00:37:15,480
0,60 60,150 150,360 360,510 510,720
of the things that go

1283
00:37:15,480 --> 00:37:16,590
0,150 150,390 390,510 510,780 780,1110
that actually our friends safe

1284
00:37:16,590 --> 00:37:17,820
0,120 120,600 600,870 870,990 990,1230
so multiple threads can actually

1285
00:37:17,820 --> 00:37:19,140
0,300 300,390 390,480 480,900
write to the channel.

1286
00:37:21,240 --> 00:37:22,770
0,360 390,600 600,900 900,1110 1110,1530
Um, any questions about this.

1287
00:37:24,310 --> 00:37:25,780
0,240 240,330 330,900
Not the solution.

1288
00:37:27,770 --> 00:37:28,970
0,300 300,540 540,750 750,960 960,1200
What was this thing about

1289
00:37:28,970 --> 00:37:30,940
0,180 180,540 540,660 660,1440
like having a buffer.

1290
00:37:31,060 --> 00:37:33,100
0,240 240,360 360,990 1200,1620 1620,2040
For the channel yeah, so,

1291
00:37:33,100 --> 00:37:35,080
0,750 780,1350 1350,1560 1560,1680 1680,1980
um, normally when you're writing

1292
00:37:35,080 --> 00:37:36,550
0,90 90,240 240,570 570,690 690,1470
to the channel and nobody's

1293
00:37:36,580 --> 00:37:38,050
0,630 630,810 810,930 930,1320 1320,1470
reading from the channel or

1294
00:37:38,050 --> 00:37:38,950
0,180 180,420 420,540 540,750 750,900
no thread is reading from

1295
00:37:38,950 --> 00:37:40,360
0,120 120,630 720,990 990,1080 1080,1410
the channel, then the center

1296
00:37:40,360 --> 00:37:41,530
0,180 180,390 390,510 510,630 630,1170
will meet will be blocked.

1297
00:37:42,330 --> 00:37:44,850
0,840 990,1470 1470,1770 1770,2520 2520,2520
Um, you can specify a

1298
00:37:45,540 --> 00:37:47,100
0,450 450,780 780,1290 1290,1410 1410,1560
channel has buffers a of

1299
00:37:47,100 --> 00:37:50,310
0,390 390,480 480,1080 1320,2970 3000,3210
ten or twenty and that

1300
00:37:50,310 --> 00:37:51,180
0,270 270,360 360,600 600,690 690,870
allows the channel to have

1301
00:37:51,180 --> 00:37:52,580
0,300 300,930
multiple values.

1302
00:37:52,920 --> 00:37:54,300
0,390 570,900 900,1110 1110,1230 1230,1380
In a in a two

1303
00:37:54,300 --> 00:37:56,310
0,390 390,840 840,1110 1110,1410 1410,2010
four laps, I've never used

1304
00:37:56,400 --> 00:37:58,920
0,270 270,1380 1380,1830 1830,2130 2130,2520
a buffered channels and one

1305
00:37:58,920 --> 00:37:59,640
0,90 90,210 210,390 390,660 660,720
of two three times I

1306
00:37:59,640 --> 00:38:01,140
0,180 180,540 540,780 780,1320 1320,1500
did it I regretted it

1307
00:38:01,170 --> 00:38:02,910
0,390 450,1110 1260,1380 1380,1590 1590,1740
so generally I don't use

1308
00:38:02,910 --> 00:38:03,600
0,180
it.

1309
00:38:04,180 --> 00:38:06,580
0,570 570,900 900,1320 1320,1770
Reduce racial important point.

1310
00:38:06,780 --> 00:38:08,280
0,540 540,720 720,1080 1080,1410 1410,1500
Wow, this, this program is

1311
00:38:08,280 --> 00:38:09,630
0,240 240,510 510,720 720,990 990,1350
actually still not very good,

1312
00:38:09,990 --> 00:38:14,700
0,780 1170,1890 1890,3000 3030,4110 4110,4710
for example when a it

1313
00:38:14,700 --> 00:38:15,900
0,240 240,480 480,540 540,1020 1020,1200
doesn't matter in practicing this

1314
00:38:15,900 --> 00:38:17,130
0,450 450,870 870,1020 1020,1110 1110,1230
particular example but it does

1315
00:38:17,130 --> 00:38:19,920
0,330 330,1800 1830,2070 2070,2430 2430,2790
not in some collapse that

1316
00:38:19,920 --> 00:38:22,050
0,390 390,450 450,660 1080,1620 1770,2130
goodbye to you as soon

1317
00:38:22,050 --> 00:38:23,280
0,90 90,210 210,510 510,810 810,1230
as it reaches count five

1318
00:38:23,280 --> 00:38:24,440
0,210 210,300 300,690
what will happen.

1319
00:38:27,800 --> 00:38:30,080
0,270 270,600 600,1140 1200,1710 1860,2280
It stops listening for a

1320
00:38:30,290 --> 00:38:31,970
0,330 330,780 900,1200 1200,1380 1380,1680
new channel so any other

1321
00:38:31,970 --> 00:38:33,320
0,540 570,870 990,1230 1230,1290 1290,1350
threads are going to be

1322
00:38:33,320 --> 00:38:35,000
0,480 750,1080 1080,1230 1230,1530 1530,1680
blocked, yeah, so basically it

1323
00:38:35,000 --> 00:38:35,870
0,240 240,390 390,540 540,630 630,870
means like if the first

1324
00:38:35,870 --> 00:38:38,160
0,510 510,720 720,1350 1350,1860
five frets voted yes.

1325
00:38:38,160 --> 00:38:39,210
0,330 330,420 420,600 600,870 870,1050
Then the next five years

1326
00:38:39,210 --> 00:38:40,350
0,150 150,300 300,930 930,990 990,1140
will be blocked in this

1327
00:38:40,350 --> 00:38:41,700
0,360 390,780
channel, right.

1328
00:38:42,480 --> 00:38:43,530
0,180 180,390 390,630 630,750 750,1050
I know they'll be hanging

1329
00:38:43,530 --> 00:38:44,580
0,510
around.

1330
00:38:44,970 --> 00:38:46,980
0,510 510,1140 1140,1620 1710,1860 1860,2010
Um, and um, in this

1331
00:38:46,980 --> 00:38:47,700
0,180 180,240 240,450 450,630 630,720
case it won't be a

1332
00:38:47,700 --> 00:38:48,810
0,390 390,720 720,930 930,1020 1020,1110
problem because most of you

1333
00:38:48,810 --> 00:38:50,340
0,210 210,420 420,660 660,1230 1230,1530
guys are most observed that

1334
00:38:50,340 --> 00:38:51,780
0,270 270,390 390,660 660,930 930,1440
if the main thread exit,

1335
00:38:52,080 --> 00:38:53,190
0,150 150,390 390,720 720,870 870,1110
it actually cleans up all

1336
00:38:53,190 --> 00:38:54,620
0,120 120,270 270,600 600,900
the other threats do.

1337
00:38:54,810 --> 00:38:56,100
0,570 570,810 810,870 870,1200 1200,1290
Um, but for example if

1338
00:38:56,100 --> 00:38:57,090
0,150 150,270 270,420 420,750 750,990
this was a long running

1339
00:38:57,090 --> 00:38:58,800
0,750 1080,1320 1320,1470 1470,1620 1620,1710
service, um, this would be

1340
00:38:58,800 --> 00:39:00,660
0,240 240,810 810,1260 1260,1470 1470,1860
not good, basically we're leaking

1341
00:39:00,660 --> 00:39:01,830
0,360 360,690 720,840 840,960 960,1170
threads, here you know they're

1342
00:39:01,830 --> 00:39:03,360
0,300 300,630 630,720 720,780 780,1530
getting blocked on the side

1343
00:39:03,360 --> 00:39:05,010
0,270 270,660 660,1110 1110,1290 1290,1650
doing nothing in that channel,

1344
00:39:05,220 --> 00:39:07,410
0,330 330,510 510,990 990,1770 1770,2190
so that's quite inconvenient and

1345
00:39:07,560 --> 00:39:08,370
0,210 210,390 390,480 480,720 720,810
um, this is something to

1346
00:39:08,370 --> 00:39:09,600
0,270 270,480 480,780
watch out for.

1347
00:39:09,980 --> 00:39:10,910
0,270 270,450 450,540 540,810 810,930
Um, and this showed up

1348
00:39:10,910 --> 00:39:11,690
0,60 60,120 120,540 540,630 630,780
in the crawler I think

1349
00:39:11,690 --> 00:39:13,460
0,120 120,630 630,990 990,1140 1140,1770
for many people in the

1350
00:39:13,490 --> 00:39:16,370
0,540 810,1320 2040,2580 2580,2670 2670,2880
and a flipside of this

1351
00:39:16,370 --> 00:39:17,810
0,300 570,840 840,930 930,1140 1140,1440
is if the main front

1352
00:39:17,810 --> 00:39:19,580
0,450 450,780 780,1140 1140,1620 1620,1770
and too early before any

1353
00:39:19,580 --> 00:39:20,390
0,60 60,150 150,480 480,720 720,810
of the requests bugs are

1354
00:39:20,390 --> 00:39:21,920
0,420 660,1020 1020,1200 1200,1320 1320,1530
done, um, then you also

1355
00:39:21,920 --> 00:39:23,000
0,120 120,180 180,600 690,930 930,1080
have a problem and so

1356
00:39:23,000 --> 00:39:24,470
0,360 360,900 900,990 990,1320 1320,1470
there's management of friends that

1357
00:39:24,470 --> 00:39:26,630
0,480 480,1380 1380,1710 1710,1830 1830,2160
actually eyes often a tricky

1358
00:39:26,630 --> 00:39:27,380
0,330
issue.

1359
00:39:29,040 --> 00:39:29,580
0,120 120,240 240,270 270,390 390,540
Is there a way to

1360
00:39:29,580 --> 00:39:31,890
0,270 270,330 330,630 630,1140 1740,2310
kill the thread without exiting

1361
00:39:31,890 --> 00:39:32,980
0,150 150,480
from main.

1362
00:39:33,530 --> 00:39:35,150
0,990 990,1230 1230,1320 1320,1410 1410,1620
A well you can send

1363
00:39:35,150 --> 00:39:36,560
0,90 90,150 150,450 450,1020 1020,1410
it to a variable a

1364
00:39:36,590 --> 00:39:38,150
0,510 510,630 630,1020 1020,1350 1350,1560
value on some channels seemed

1365
00:39:38,150 --> 00:39:40,340
0,150 150,390 390,840 1170,1980 1980,2190
like please exit but you

1366
00:39:40,340 --> 00:39:41,690
0,150 150,240 240,720 720,840 840,1350
have to coordinate it yourself.

1367
00:39:47,250 --> 00:39:49,320
0,600 930,1140 1140,1230 1230,1590 1590,2070
I'm gonna go back to

1368
00:39:49,350 --> 00:39:50,220
0,270 270,360 360,480 480,720 720,870
one of the things that

1369
00:39:50,220 --> 00:39:53,240
0,300 300,510 510,1140 1140,2400
actually is cool data.

1370
00:39:53,620 --> 00:39:57,220
0,420 420,1140 1830,2310 2310,2760 2880,3600
Condition variables is that, um.

1371
00:39:58,860 --> 00:39:59,850
0,210 210,540 540,630 630,780 780,990
In principle you might think

1372
00:39:59,850 --> 00:40:00,570
0,90 90,180 180,270 270,510 510,720
you have the same issue

1373
00:40:00,570 --> 00:40:02,760
0,330 330,900 1170,1710 1710,2040 2040,2190
exists here, um, we're like

1374
00:40:02,760 --> 00:40:04,260
0,210 210,450 450,720 720,1320 1350,1500
this red actually runs a

1375
00:40:04,260 --> 00:40:06,720
0,780 810,1650 1650,1830 1830,2070 2070,2460
and a in this red,

1376
00:40:06,750 --> 00:40:09,660
0,450 480,930 1380,2010 2010,2730 2730,2910
um and um, it might

1377
00:40:09,660 --> 00:40:10,860
0,150 150,480 480,600 600,990 990,1200
get blocked like example if

1378
00:40:10,860 --> 00:40:12,630
0,300 300,750 750,930 930,1170 1170,1770
gonna reach you know five

1379
00:40:12,660 --> 00:40:13,590
0,90 90,300 300,450 450,690 690,930
you know this name, Fred,

1380
00:40:13,590 --> 00:40:15,390
0,480 480,600 600,990 990,1350 1350,1800
will you perceive doing its

1381
00:40:15,390 --> 00:40:17,100
0,420 870,1200 1200,1470 1470,1530 1530,1710
thing a while the other

1382
00:40:17,100 --> 00:40:18,480
0,270 270,360 360,630 630,990 990,1380
guys are still maybe actually

1383
00:40:18,480 --> 00:40:19,700
0,270 270,480 480,810
sitting in here.

1384
00:40:20,080 --> 00:40:21,910
0,420 480,1020 1020,1470 1470,1650 1650,1830
A notice, these in this

1385
00:40:21,910 --> 00:40:23,710
0,510 600,930 930,1140 1140,1260 1260,1800
case they won't be blocked,

1386
00:40:23,830 --> 00:40:25,540
0,690 690,1140 1140,1350 1350,1620 1620,1710
um, because will grab the

1387
00:40:25,540 --> 00:40:27,520
0,480 720,1410 1410,1500 1500,1680 1680,1980
lock, then you know doesn't

1388
00:40:27,520 --> 00:40:29,380
0,360 360,570 570,1320 1320,1380 1380,1860
think doesn't broadcast the broadcast

1389
00:40:29,380 --> 00:40:30,520
0,150 150,420 420,660 660,720 720,1140
is actually not a blocking

1390
00:40:30,520 --> 00:40:32,080
0,510 570,840 840,1350 1350,1410 1410,1560
operation, so unlike you know

1391
00:40:32,080 --> 00:40:33,160
0,270 270,360 360,450 450,900 900,1080
writing to a channel that

1392
00:40:33,160 --> 00:40:34,240
0,90 90,150 150,540 540,990 990,1080
is a blocking operation, if

1393
00:40:34,240 --> 00:40:36,040
0,390 390,570 570,1080 1290,1530 1530,1800
nobody is listening, the con

1394
00:40:36,040 --> 00:40:37,390
0,480 480,600 600,900 900,960 960,1350
broadcast is not a blocking

1395
00:40:37,390 --> 00:40:38,360
0,540
operation.

1396
00:40:38,450 --> 00:40:39,380
0,180 180,330 330,570 570,780 780,930
So this actually works out

1397
00:40:39,380 --> 00:40:40,610
0,90 90,240 240,600 600,1170 1170,1230
in this particular program, you

1398
00:40:40,610 --> 00:40:42,410
0,120 120,300 300,990 1020,1320 1320,1800
know by itself a correctly.

1399
00:40:43,690 --> 00:40:44,820
0,600
Okay.

1400
00:40:49,200 --> 00:40:50,440
0,300 300,690
Okay good.

1401
00:40:50,700 --> 00:40:52,260
0,450 450,690 690,1050 1050,1440 1470,1560
Any further questions about you

1402
00:40:52,260 --> 00:40:53,790
0,120 120,600 630,780 780,1320 1320,1530
know these two examples just

1403
00:40:53,790 --> 00:40:54,660
0,60 60,300
to do.

1404
00:41:00,480 --> 00:41:01,980
0,420 420,990 990,1200 1200,1380 1380,1500
Okay, then let's talk about

1405
00:41:01,980 --> 00:41:05,260
0,60 60,570 840,2700
the color I'm.

1406
00:41:05,700 --> 00:41:07,650
0,450 450,840 1020,1620 1620,1680 1680,1950
So the color is also

1407
00:41:07,650 --> 00:41:09,030
0,120 120,360 360,840 840,1290 1290,1380
a more realistic example of

1408
00:41:09,030 --> 00:41:10,640
0,330 330,990
current programming.

1409
00:41:14,550 --> 00:41:15,900
0,480 480,630 630,810 810,1110 1110,1350
Yeah, and just remind you,

1410
00:41:15,900 --> 00:41:19,560
0,930 1350,2040 2040,2160 2160,2550 2580,3660
um, um, you know basically

1411
00:41:19,860 --> 00:41:21,210
0,240 240,720 720,810 810,1050 1050,1350
the idea is that you

1412
00:41:21,210 --> 00:41:23,100
0,480 600,900 900,1530 1530,1710 1710,1890
started with url for some

1413
00:41:23,100 --> 00:41:25,500
0,180 180,750 1110,1560 1560,1830 1830,2400
web page, um you fetch

1414
00:41:25,530 --> 00:41:27,000
0,600 600,900 900,990 990,1140 1140,1470
you fetch the web page

1415
00:41:27,000 --> 00:41:28,500
0,120 120,330 330,480 480,720 720,1500
that might have more urls.

1416
00:41:28,940 --> 00:41:30,590
0,390 390,660 660,720 720,1110 1110,1650
And when you basically proceed

1417
00:41:30,590 --> 00:41:31,760
0,90 90,270 270,570 570,870 870,1170
you know then fetching those

1418
00:41:31,760 --> 00:41:33,110
0,180 180,870 870,960 960,1080 1080,1350
web pages, you know looking

1419
00:41:33,110 --> 00:41:34,250
0,90 90,360 360,960 960,1080 1080,1140
at those urls and you

1420
00:41:34,250 --> 00:41:35,380
0,210 210,480
keep going.

1421
00:41:35,730 --> 00:41:36,870
0,180 180,540 540,630 630,720 720,1140
The idea is to crawl

1422
00:41:36,870 --> 00:41:38,550
0,360 360,450 450,750 750,1290 1470,1680
basically the whole Internet now

1423
00:41:38,550 --> 00:41:39,390
0,120 120,240 240,330 330,510 510,840
for all the web pages

1424
00:41:39,390 --> 00:41:41,220
0,210 210,660 660,1170 1620,1770 1770,1830
that are exist and of

1425
00:41:41,220 --> 00:41:43,200
0,420 630,1080 1110,1560 1560,1740 1740,1980
course some urls might point

1426
00:41:43,200 --> 00:41:44,700
0,420 450,840 840,1050 1050,1380 1380,1500
back to a paycheck you're

1427
00:41:44,700 --> 00:41:46,320
0,210 210,270 270,840 840,1170 1170,1620
ready to visit and so

1428
00:41:46,440 --> 00:41:47,700
0,450 450,600 600,720 720,960 960,1260
goal is to actually not

1429
00:41:47,700 --> 00:41:49,530
0,300 300,1020 1050,1410 1410,1590 1590,1830
visit the same web page

1430
00:41:49,530 --> 00:41:50,560
0,630
twice.

1431
00:41:51,070 --> 00:41:52,380
0,600
I'm.

1432
00:41:52,380 --> 00:41:52,950
0,120 120,240 240,300 300,480 480,570
And so the goal of

1433
00:41:52,950 --> 00:41:54,390
0,60 60,570 570,690 690,1140 1140,1440
the exercise, a couple of

1434
00:41:54,390 --> 00:41:55,110
0,300 300,360 360,480 480,630 630,720
goals, if you want to

1435
00:41:55,110 --> 00:41:57,660
0,750 990,1410 1410,1890 1890,2250 2250,2550
achieve work, one is io

1436
00:41:57,660 --> 00:41:58,980
0,810
currency.

1437
00:42:02,000 --> 00:42:03,060
0,240
Sure.

1438
00:42:03,180 --> 00:42:05,010
0,240 240,540 540,1050 1050,1200 1200,1830
The fetch operation is or

1439
00:42:05,040 --> 00:42:06,360
0,300 300,480 480,540 540,750 750,1320
may take a long time,

1440
00:42:06,360 --> 00:42:07,740
0,360 360,540 540,930 930,1140 1140,1380
maybe it's a web page,

1441
00:42:07,740 --> 00:42:08,490
0,240 240,330 330,420 420,570 570,750
it's on the other side

1442
00:42:08,490 --> 00:42:10,110
0,90 90,180 180,600 600,1350 1410,1620
of the world, sure it

1443
00:42:10,110 --> 00:42:11,670
0,180 180,300 300,510 510,1170 1350,1560
goes over slow networks, and

1444
00:42:11,670 --> 00:42:13,050
0,450 450,690 690,780 780,1080 1080,1380
while yours are one friendly

1445
00:42:13,050 --> 00:42:14,190
0,210 210,270 270,570 570,780 780,1140
sort of fetching that page

1446
00:42:14,190 --> 00:42:14,880
0,90 90,330 330,510 510,570 570,690
you would like to be

1447
00:42:14,880 --> 00:42:17,850
0,210 210,300 300,540 540,1050 1290,2970
able to fetch other other

1448
00:42:17,880 --> 00:42:20,490
0,270 270,780 1380,1920 1920,2280 2280,2610
other paychecks, another goals is

1449
00:42:20,490 --> 00:42:22,950
0,420 420,840 840,1260 1710,2130 2130,2460
correctness goal or performance goal,

1450
00:42:22,950 --> 00:42:25,440
0,510 600,990 990,1410 1620,2040 2040,2490
namely fetch one fetch url

1451
00:42:25,440 --> 00:42:26,340
0,510
once.

1452
00:42:30,000 --> 00:42:31,410
0,600 600,690 690,990 990,1290 1290,1410
And you know remember your

1453
00:42:31,410 --> 00:42:32,400
0,300 300,360 360,540 540,600 600,990
gloves are like to exploit

1454
00:42:32,400 --> 00:42:33,660
0,330 330,840 840,930 930,1080 1080,1260
multiple horse, you know if

1455
00:42:33,660 --> 00:42:35,670
0,90 90,300 300,600 600,1170 1470,2010
you have multiple horse doing

1456
00:42:35,670 --> 00:42:37,080
0,240 240,300 300,870
work in parallel.

1457
00:42:42,270 --> 00:42:43,400
0,600
Curnow.

1458
00:42:43,740 --> 00:42:45,780
0,540 750,1080 1080,1740 1740,1860 1860,2040
So, um what I'd like

1459
00:42:45,780 --> 00:42:48,720
0,480 510,1200 1230,1830 1830,2370 2370,2940
to do before actually a

1460
00:42:49,560 --> 00:42:51,180
0,330 330,570 570,630 630,1200 1200,1620
talking about the current solutions

1461
00:42:51,180 --> 00:42:52,890
0,420 510,750 750,870 870,1200 1200,1710
first let me show you

1462
00:42:52,920 --> 00:42:55,650
0,630 630,1260 1260,1650 1650,2220 2460,2730
a simple serial solution, um,

1463
00:42:55,650 --> 00:42:58,520
0,150 150,300 300,1380 1800,2430
so that we um.

1464
00:42:58,850 --> 00:42:59,840
0,210 210,330 330,420 420,660 660,990
Now we have something to

1465
00:42:59,840 --> 00:43:01,280
0,300 300,630 630,810 810,870 870,1440
talk about as a baseline.

1466
00:43:12,240 --> 00:43:14,130
0,1050 1080,1290 1290,1620 1620,1740 1740,1890
So, so I have three

1467
00:43:14,130 --> 00:43:15,960
0,480 480,660 660,1110 1140,1530 1530,1830
solutions in here actually just

1468
00:43:16,230 --> 00:43:17,840
0,270 390,840
for movie.

1469
00:43:19,040 --> 00:43:20,540
0,810
Random.

1470
00:43:21,020 --> 00:43:22,480
0,960
Run.

1471
00:43:26,080 --> 00:43:27,550
0,240 240,570 570,960 960,1260 1290,1470
A serious solution in a

1472
00:43:27,550 --> 00:43:28,360
0,180 180,240 240,330 330,480 480,810
one of the new texas

1473
00:43:28,360 --> 00:43:29,380
0,60 60,240 240,300 300,360 360,1020
is one of the channels

1474
00:43:29,440 --> 00:43:30,820
0,630 630,750 750,900 900,1050 1050,1380
a you know you see

1475
00:43:30,820 --> 00:43:32,740
0,960 1200,1560 1560,1590 1590,1800 1800,1920
the more or less they

1476
00:43:32,740 --> 00:43:34,090
0,330 330,390 390,720 720,1200 1200,1350
produce the same results, no

1477
00:43:34,090 --> 00:43:35,410
0,180 180,630 630,840 840,1200 1200,1320
to found one missing two

1478
00:43:35,410 --> 00:43:36,440
0,540
pounds.

1479
00:43:36,470 --> 00:43:37,430
0,210 210,330 330,510 510,840 840,960
Um the only difference is

1480
00:43:37,430 --> 00:43:38,420
0,270 270,390 390,780 780,870 870,990
that the order of the

1481
00:43:38,420 --> 00:43:39,650
0,330 330,660 660,990 990,1170 1170,1230
output slightly different once in

1482
00:43:39,650 --> 00:43:40,430
0,60 60,330 330,420 420,540 540,780
a while and of course

1483
00:43:40,430 --> 00:43:41,780
0,120 120,390 390,570 570,840 840,1350
you'd ask me a concurrence.

1484
00:43:43,880 --> 00:43:45,740
0,270 270,870 1080,1530 1530,1620 1620,1860
Okay, so um, the main

1485
00:43:45,740 --> 00:43:47,040
0,720
function.

1486
00:43:47,100 --> 00:43:49,290
0,720 720,810 840,1350 1350,1620 1620,2190
Um, uh, calls in serial

1487
00:43:49,290 --> 00:43:51,240
0,270 270,480 480,840 840,1560 1590,1950
with the starting url, fetch,

1488
00:43:51,240 --> 00:43:52,680
0,360 390,810 810,1050 1050,1170 1170,1440
um, and then an empty

1489
00:43:52,680 --> 00:43:53,640
0,480
map.

1490
00:43:54,220 --> 00:43:56,200
0,390 390,840 960,1140 1140,1500 1500,1980
And then the serial solution

1491
00:43:56,200 --> 00:43:57,040
0,120 120,480 480,540 540,750 750,840
is basically a sort of

1492
00:43:57,040 --> 00:44:00,130
0,600 630,1380 1410,2310 2310,2610 2640,3090
standard a sequential a recursive

1493
00:44:00,130 --> 00:44:02,230
0,630 1050,1350 1350,1500 1500,1770 1770,2100
solution, a we first check

1494
00:44:02,230 --> 00:44:03,370
0,240 240,360 360,630 630,1050 1050,1140
if we already visited the

1495
00:44:03,370 --> 00:44:04,570
0,450 450,660 660,960 960,1080 1080,1200
url that's passed in to

1496
00:44:04,570 --> 00:44:05,420
0,390
us.

1497
00:44:05,420 --> 00:44:06,320
0,270 270,420 420,540 540,780 780,900
Um, if we didn't know

1498
00:44:06,320 --> 00:44:07,730
0,90 90,330 330,780 780,1290 1290,1410
we return immediately, otherwise we

1499
00:44:07,730 --> 00:44:09,560
0,360 360,510 510,1050 1350,1560 1560,1830
market this visit will fetch

1500
00:44:09,560 --> 00:44:10,730
0,60 60,750 750,900 900,1080 1080,1170
the url that this is

1501
00:44:10,730 --> 00:44:12,770
0,90 90,270 270,390 390,1380 1770,2040
a bunch of urls a

1502
00:44:12,770 --> 00:44:13,670
0,240 240,480 480,660 660,810 810,900
we look for all the

1503
00:44:13,670 --> 00:44:15,560
0,810 930,1080 1080,1230 1230,1590 1590,1890
urls and go basically zero

1504
00:44:15,560 --> 00:44:17,000
0,450 540,870 870,1110 1110,1200 1200,1440
again right, this is your

1505
00:44:17,000 --> 00:44:18,590
0,480 480,1080 1080,1260 1260,1500 1500,1590
sequential solution that's what I

1506
00:44:18,590 --> 00:44:19,580
0,450
expected.

1507
00:44:19,760 --> 00:44:20,840
0,420 420,510 510,690 690,870 870,1080
And you know your goal

1508
00:44:20,840 --> 00:44:22,160
0,150 150,270 270,810 810,1080 1080,1320
which is basically a write

1509
00:44:22,160 --> 00:44:23,780
0,360 360,690 690,780 780,1110
current version of this.

1510
00:44:24,140 --> 00:44:26,760
0,510 720,930 930,1380 1440,2070
Um, and so, um.

1511
00:44:27,100 --> 00:44:28,180
0,570 600,870 870,900 900,1020 1020,1080
Um what I like to

1512
00:44:28,180 --> 00:44:29,020
0,120 120,270 270,570 570,660 660,840
do is actually to make

1513
00:44:29,020 --> 00:44:29,650
0,60 60,300 300,330 330,480 480,630
the class a little bit

1514
00:44:29,650 --> 00:44:31,330
0,630 690,750 750,750 1230,1440 1440,1680
interactive, um I wanna go

1515
00:44:31,330 --> 00:44:32,800
0,300 300,510 510,630 630,1050 1050,1470
switch over to breakout levels

1516
00:44:32,830 --> 00:44:34,030
0,570 570,840 840,930 930,1080 1080,1200
and what we're gonna do

1517
00:44:34,030 --> 00:44:37,210
0,150 150,750 1230,2580 2610,3030 3030,3180
is basically put four to

1518
00:44:37,210 --> 00:44:38,380
0,540 570,780 780,1050 1050,1110 1110,1170
five of you in a

1519
00:44:38,380 --> 00:44:40,570
0,270 270,690 690,1140 1680,1950 1950,2190
single breakout room for about

1520
00:44:40,570 --> 00:44:42,280
0,150 150,720 990,1500 1500,1560 1560,1710
ten minutes and I would

1521
00:44:42,280 --> 00:44:43,690
0,210 210,330 330,420 420,660 660,1410
like you to do is

1522
00:44:43,690 --> 00:44:45,130
0,270 270,390 390,990 1020,1290 1290,1440
share your solution with each

1523
00:44:45,130 --> 00:44:46,450
0,210 210,300 300,630 630,840 1140,1320
other and discuss it so

1524
00:44:46,450 --> 00:44:48,100
0,510 510,1170 1200,1500 1500,1590 1590,1650
maybe the best way to

1525
00:44:48,100 --> 00:44:49,210
0,180 180,510 510,600 600,840 840,1110
go about it is not

1526
00:44:49,330 --> 00:44:50,950
0,420 420,540 540,1140 1170,1230 1230,1620
one of you, you know

1527
00:44:51,100 --> 00:44:52,120
0,150 150,270 270,450 450,540 540,1020
you get into a room,

1528
00:44:52,240 --> 00:44:53,140
0,330 330,390 390,480 480,780 780,900
one of the persons in

1529
00:44:53,140 --> 00:44:55,090
0,90 90,510 540,1110 1110,1470 1470,1950
the room, basically screen shares

1530
00:44:55,090 --> 00:44:57,370
0,360 360,1020 1350,1830 1830,2190 2190,2280
their solution and discuss what

1531
00:44:57,370 --> 00:44:58,090
0,90 90,240 240,570 570,630 630,720
has been one of the

1532
00:44:58,090 --> 00:44:59,710
0,480 480,870 870,1110 1110,1380 1380,1620
issues that you see running

1533
00:44:59,710 --> 00:45:00,850
0,360 360,600 600,810 810,1020 1020,1140
into and other people can

1534
00:45:00,850 --> 00:45:02,680
0,480 480,750 750,990 990,1170 1170,1830
comment or share other solutions,

1535
00:45:02,920 --> 00:45:03,880
0,330 330,540 540,690 690,900 900,960
let's just get into a

1536
00:45:03,880 --> 00:45:04,900
0,480 480,570 570,750 750,870 870,1020
discussion and meet some other

1537
00:45:04,900 --> 00:45:06,100
0,300 300,360 360,450 450,930
students in the class.

1538
00:45:07,480 --> 00:45:09,120
0,210 210,540 540,750 750,1080
Any questions about that.

1539
00:45:11,950 --> 00:45:13,450
0,150 150,510 600,960 960,1410 1410,1500
A good a let me

1540
00:45:13,450 --> 00:45:14,820
0,180 180,510 510,780
go back to.

1541
00:45:15,550 --> 00:45:17,620
0,360 360,480 480,810 810,1320 1800,2070
Sharing my screen again, can

1542
00:45:17,620 --> 00:45:18,370
0,270 270,420 420,540 540,690 690,750
everybody see my show on

1543
00:45:18,370 --> 00:45:19,600
0,270 270,690
screen again.

1544
00:45:21,600 --> 00:45:23,120
0,330 330,570 570,990
Yep looks good.

1545
00:45:23,120 --> 00:45:24,740
0,480 510,780 780,1110
Good, thank you.

1546
00:45:29,140 --> 00:45:31,390
0,330 330,810 1200,2010 2010,2160 2160,2250
Okay so hopefully that was

1547
00:45:31,390 --> 00:45:34,420
0,480 720,1470 1620,2550 2550,2940 2940,3030
interesting, um, let me you

1548
00:45:34,420 --> 00:45:35,860
0,360 390,690 690,1080 1080,1200 1200,1440
know talk about you know

1549
00:45:35,860 --> 00:45:37,750
0,420 480,1050 1050,1200 1200,1410 1410,1890
the solutions that I have.

1550
00:45:38,380 --> 00:45:39,490
0,210 210,450 450,750 750,1050 1050,1110
Um, their partner posted on

1551
00:45:39,490 --> 00:45:40,600
0,60 60,420 420,720 720,960 960,1110
the schedule page, if you

1552
00:45:40,600 --> 00:45:42,100
0,390 390,900
haven't, um.

1553
00:45:42,130 --> 00:45:44,950
0,690 870,1050 1050,1170 1170,1650 2190,2820
Um, you can look concurrently

1554
00:45:44,950 --> 00:45:45,670
0,210 210,330 330,420 420,510 510,720
with me, if you want

1555
00:45:45,670 --> 00:45:46,560
0,300
to.

1556
00:45:46,770 --> 00:45:49,080
0,660 1260,1410 1410,1860 1890,2130 2130,2310
Um, you should you know

1557
00:45:49,080 --> 00:45:50,370
0,150 150,240 240,540 540,720 720,1290
let me walk through the.

1558
00:45:51,060 --> 00:45:52,140
0,210 210,450 450,720 720,990 990,1080
New text version first and

1559
00:45:52,140 --> 00:45:54,060
0,120 120,240 240,480 480,690 690,1920
then I'll walk through the

1560
00:45:54,210 --> 00:45:57,960
0,630 630,1020 1380,1950 2130,2970 3120,3750
channel one second so here's

1561
00:45:57,960 --> 00:45:59,060
0,540
the.

1562
00:45:59,990 --> 00:46:02,060
0,480 480,720 720,1080 1080,1530 1530,2070
Music, one music one the

1563
00:46:02,120 --> 00:46:03,980
0,420 420,480 480,1050 1260,1680 1680,1860
clash are struck with the

1564
00:46:03,980 --> 00:46:05,000
0,270 270,510 510,600 600,900 900,1020
half both the map and

1565
00:46:05,000 --> 00:46:06,920
0,60 60,210 210,690 690,1110 1560,1920
the new techs and the

1566
00:46:06,950 --> 00:46:08,000
0,330 330,480 480,570 570,690 690,1050
mountain needs to be protected

1567
00:46:08,000 --> 00:46:09,170
0,150 150,660 660,900 900,1020 1020,1170
by mutexes because it's going

1568
00:46:09,170 --> 00:46:10,220
0,60 60,150 150,540 540,930 930,1050
to be concurrent access to

1569
00:46:10,220 --> 00:46:12,440
0,90 90,720 1350,1680 1680,1800 1800,2220
the map map by itself

1570
00:46:12,440 --> 00:46:13,190
0,90 90,300 300,450 450,630 630,750
it's not free, it's a

1571
00:46:13,190 --> 00:46:14,210
0,210 210,360 360,420 420,540 540,1020
it's up to the programmer

1572
00:46:14,210 --> 00:46:15,650
0,90 90,300 300,510 510,1140 1170,1440
to actually make z map

1573
00:46:15,650 --> 00:46:16,700
0,240 240,630
thread safe.

1574
00:46:17,330 --> 00:46:18,500
0,150 150,210 210,840 840,990 990,1170
And the concern you touch

1575
00:46:18,500 --> 00:46:19,790
0,240 240,450 450,840 840,1200 1200,1290
one more short similar to

1576
00:46:19,790 --> 00:46:21,590
0,90 90,540 540,990 990,1380 1380,1800
the serial one except whenever

1577
00:46:21,590 --> 00:46:23,030
0,510 510,840 840,1200 1200,1380 1380,1440
there's stage basically takes a

1578
00:46:23,030 --> 00:46:24,230
0,300 300,480 630,870 870,1080 1080,1200
walk out now so we'll

1579
00:46:24,230 --> 00:46:25,520
0,180 180,270 270,720 750,1110 1110,1290
take the lock, we look

1580
00:46:25,520 --> 00:46:27,380
0,90 90,1080 1110,1530 1530,1680 1680,1860
at the url and is

1581
00:46:27,380 --> 00:46:28,820
0,150 150,720 840,1050 1050,1320 1320,1440
being fetched, it hasn't been

1582
00:46:28,820 --> 00:46:29,810
0,270 270,390 390,450 450,780 780,990
fetched from the market has

1583
00:46:29,810 --> 00:46:31,160
0,210 210,450 450,960
now being fetched.

1584
00:46:31,250 --> 00:46:32,570
0,210 210,450 450,630 630,1110 1110,1320
What hasn't been fetched and

1585
00:46:32,570 --> 00:46:34,940
0,270 270,720 1140,1500 1500,1950 1950,2370
we lock, um, and we

1586
00:46:34,940 --> 00:46:36,110
0,240 240,360 360,690 690,1050 1050,1170
kept this already value to

1587
00:46:36,110 --> 00:46:37,190
0,300 300,480 480,600 600,780 780,1080
decide whether we should return

1588
00:46:37,190 --> 00:46:38,100
0,60 60,390
or not.

1589
00:46:38,560 --> 00:46:40,480
0,150 150,660 930,1710 1710,1830 1830,1920
And then, um, you know

1590
00:46:40,480 --> 00:46:42,340
0,570 570,780 780,1080 1080,1500 1500,1860
we this guru team starts

1591
00:46:42,340 --> 00:46:45,040
0,510 510,1680 1710,2460 2460,2640 2640,2700
fetching a page gets a

1592
00:46:45,040 --> 00:46:46,660
0,150 150,240 240,690 690,1110
bunch of urls back.

1593
00:46:46,660 --> 00:46:48,430
0,90 90,270 270,420 420,1020 1050,1770
And then, for every url

1594
00:46:48,430 --> 00:46:50,950
0,510 810,1680 1680,2190 2190,2460 2460,2520
back, um, it creates a

1595
00:46:50,950 --> 00:46:52,420
0,480 480,780 780,1140 1140,1380 1380,1470
new guru team here on

1596
00:46:52,420 --> 00:46:54,610
0,150 150,600 1080,1740 1770,2100 2100,2190
this side a pass is

1597
00:46:54,610 --> 00:46:56,050
0,240 240,330 330,930 930,1230 1230,1440
in the url, but go

1598
00:46:56,050 --> 00:46:57,400
0,90 90,420 420,570 570,960 960,1350
a team is supposed to

1599
00:46:57,400 --> 00:46:59,320
0,630 630,960 960,1440
etch and crawl.

1600
00:47:00,100 --> 00:47:01,300
0,570 600,720 720,990 990,1140 1140,1200
A the only sort of

1601
00:47:01,300 --> 00:47:02,710
0,240 240,570 570,900 900,1410 1410,1410
other interesting thing here, um

1602
00:47:04,120 --> 00:47:05,590
0,330 330,510 510,630 630,930 930,1470
is that it uses something

1603
00:47:05,590 --> 00:47:07,450
0,330 330,600 600,1020 1410,1620 1620,1860
about weight group and weight

1604
00:47:07,450 --> 00:47:08,590
0,210 210,360 360,480 480,720 720,1140
group is a very convenient

1605
00:47:08,590 --> 00:47:09,880
0,510 510,600 600,840 840,1170 1170,1290
primitive to keep track how

1606
00:47:09,880 --> 00:47:11,230
0,210 210,510 510,630 630,870 870,1350
many friends you still have

1607
00:47:11,230 --> 00:47:12,490
0,510 510,780 780,1050 1050,1170 1170,1260
active and when you can

1608
00:47:12,490 --> 00:47:13,520
0,570
terminate.

1609
00:47:13,520 --> 00:47:14,750
0,150 150,270 270,420 420,1020 1020,1230
And this was a big

1610
00:47:14,750 --> 00:47:16,040
0,270 270,330 330,450 450,780 780,1290
issue in this particular assignment

1611
00:47:16,040 --> 00:47:17,210
0,150 150,300 300,540 570,1050 1050,1170
that if you terminated too

1612
00:47:17,210 --> 00:47:18,620
0,390 390,630 630,780 780,990 990,1410
early, then you didn't crawl

1613
00:47:18,620 --> 00:47:19,920
0,90 90,270 270,810
the web pages.

1614
00:47:19,980 --> 00:47:20,700
0,150 150,300 300,420 420,600 600,720
And so you need to

1615
00:47:20,700 --> 00:47:23,640
0,600 600,930 930,1710 2130,2400 2400,2940
contract whether you're a whether

1616
00:47:23,640 --> 00:47:25,050
0,150 150,420 420,990 990,1170 1170,1410
there's still outstanding web pages

1617
00:47:25,050 --> 00:47:26,430
0,120 120,270 270,960 960,1200 1200,1380
to be crawled seeing way

1618
00:47:26,430 --> 00:47:27,750
0,210 210,330 330,420 420,750 750,1320
group is a very easily

1619
00:47:27,990 --> 00:47:29,670
0,750 750,930 930,1200 1200,1350 1350,1680
basically every time you call

1620
00:47:29,670 --> 00:47:31,560
0,300 300,420 420,960 990,1380 1380,1890
friend, you call a add

1621
00:47:31,860 --> 00:47:33,060
0,390 390,600 600,840 840,1110 1110,1200
a and then when the

1622
00:47:33,060 --> 00:47:35,340
0,240 240,990 1290,1710 1710,1830 1830,2280
thread terminates a you call

1623
00:47:35,370 --> 00:47:37,740
0,900 1020,1470 1470,1710 1710,2160 2160,2370
done, um, and we could

1624
00:47:37,740 --> 00:47:38,610
0,360 360,480 480,690 690,780 780,870
really do that, in a

1625
00:47:38,610 --> 00:47:39,940
0,360 360,930
different statement.

1626
00:47:39,970 --> 00:47:41,290
0,150 150,750 750,810 810,1080 1080,1320
And then the main thread

1627
00:47:41,290 --> 00:47:42,280
0,120 120,210 210,570 570,900 900,990
that is waiting for all

1628
00:47:42,280 --> 00:47:43,390
0,120 120,300 300,750 750,900 900,1110
the French determinant just goes

1629
00:47:43,390 --> 00:47:44,770
0,390 390,510 510,750 750,870 870,1380
wait and weight will return

1630
00:47:44,770 --> 00:47:46,180
0,450 450,750 750,1080 1110,1320 1320,1410
until every threat that will

1631
00:47:46,180 --> 00:47:48,550
0,330 330,600 600,930 1080,1830 1830,2370
start next morning, every one

1632
00:47:48,790 --> 00:47:49,840
0,210 210,450 450,600 600,840 840,1050
a if all those friends,

1633
00:47:49,840 --> 00:47:51,700
0,330 330,450 450,810 810,1320 1380,1860
actually I mean, um exit.

1634
00:47:53,330 --> 00:47:54,900
0,510 510,990
That's the.

1635
00:47:55,190 --> 00:47:57,800
0,270 270,840 870,2040
New techs version.

1636
00:48:00,210 --> 00:48:01,080
0,150 150,240 240,330 330,480 480,870
And you can think about

1637
00:48:01,080 --> 00:48:02,250
0,270 270,720 720,870 870,1080 1080,1170
sync wait as sort of

1638
00:48:02,250 --> 00:48:04,230
0,180 180,660 660,1200 1200,1800 1830,1980
being internally implemented using a

1639
00:48:04,230 --> 00:48:05,580
0,390 390,840
condition variable.

1640
00:48:07,230 --> 00:48:07,980
0,210 210,360 360,450 450,630 630,750
Okay, let me look at

1641
00:48:07,980 --> 00:48:09,080
0,510
the.

1642
00:48:09,110 --> 00:48:10,380
0,690
AH.

1643
00:48:10,380 --> 00:48:12,040
0,570 570,1110
Channel version.

1644
00:48:12,380 --> 00:48:14,540
0,780 1020,1170 1170,1470 1470,1680 1890,2160
Um, so here's a demo

1645
00:48:14,540 --> 00:48:15,620
0,360 360,420 420,810 810,960 960,1080
version is basically sort of

1646
00:48:15,620 --> 00:48:20,270
0,1620 1620,2220 2250,2760 2760,3420 3450,4650
organized as map reduce lab

1647
00:48:20,300 --> 00:48:21,830
0,390 390,540 540,750 750,810 810,1530
lab where there's a coordinator

1648
00:48:21,830 --> 00:48:23,180
0,270 270,870
and workers.

1649
00:48:23,420 --> 00:48:25,550
0,300 300,930 1110,1680 1680,1860 1860,2130
Um, so, um we start

1650
00:48:25,550 --> 00:48:26,750
0,360 360,420 420,810 810,960 960,1200
off, you know we start

1651
00:48:26,750 --> 00:48:28,340
0,120 120,450 450,630 660,1200 1200,1590
off training a coordinator Fred,

1652
00:48:28,790 --> 00:48:29,780
0,420 420,660 660,720 720,870 870,990
um and the way we

1653
00:48:29,780 --> 00:48:31,100
0,90 90,330 330,840 840,1050 1050,1320
do that actually is we

1654
00:48:31,100 --> 00:48:33,230
0,180 180,240 240,780 1230,1890 1890,2130
make a channel and then

1655
00:48:33,230 --> 00:48:34,370
0,90 90,390 390,600 630,930 930,1140
we pass the channel into

1656
00:48:34,370 --> 00:48:36,200
0,60 60,810 870,1230 1290,1770 1770,1830
the coordinator the coordinator of

1657
00:48:36,200 --> 00:48:37,190
0,210 210,360 360,420 420,840 840,990
course has to start with

1658
00:48:37,190 --> 00:48:38,570
0,60 60,510 510,600 600,930 930,1380
a url, the beginning url,

1659
00:48:38,570 --> 00:48:39,710
0,120 120,240 240,390 390,540 630,1140
so we need to supply

1660
00:48:39,710 --> 00:48:40,700
0,210 210,360 360,480 480,810 810,990
that on the channel, that's

1661
00:48:40,700 --> 00:48:41,600
0,90 90,300 300,660 660,810 810,900
the most convenient thing to

1662
00:48:41,600 --> 00:48:42,440
0,330 330,450 450,540 540,750 750,840
do as we'll see in

1663
00:48:42,440 --> 00:48:43,420
0,60 60,510
a second.

1664
00:48:43,540 --> 00:48:45,250
0,330 330,600 600,810 810,1290 1410,1710
Um but we're to send

1665
00:48:45,250 --> 00:48:45,970
0,90 90,180 180,270 270,600 600,720
it on the channel, we

1666
00:48:45,970 --> 00:48:46,780
0,300 300,390 390,480 480,750 750,810
basically have to create a

1667
00:48:46,780 --> 00:48:48,430
0,210 210,600 600,810 810,1380 1380,1650
go routine because otherwise we

1668
00:48:48,430 --> 00:48:49,680
0,450 450,750
deadlock here.

1669
00:48:49,950 --> 00:48:51,120
0,330 330,570 570,660 660,810 810,1170
We this is a difficult

1670
00:48:51,120 --> 00:48:52,740
0,270 270,960 960,1230 1230,1350 1350,1620
thing, we're going to just

1671
00:48:52,740 --> 00:48:53,790
0,300 300,450 450,840 840,960 960,1050
send that value on the

1672
00:48:53,790 --> 00:48:54,740
0,390
channel.

1673
00:48:55,150 --> 00:48:55,750
0,150 150,330 330,480 480,540 540,600
So let's look at the

1674
00:48:55,750 --> 00:48:57,120
0,810
coordinator.

1675
00:48:57,980 --> 00:49:00,020
0,240 240,480 480,540 540,1350 1410,2040
Um, here's the coordinator a

1676
00:49:00,140 --> 00:49:01,520
0,450 450,720 720,1020 1020,1290 1290,1380
dozen u.s annual locks at

1677
00:49:01,520 --> 00:49:03,170
0,390 420,990 990,1110 1110,1260 1260,1650
all because you know the

1678
00:49:03,200 --> 00:49:05,990
0,360 360,750 750,1620 2040,2670 2670,2790
data structures that there's no

1679
00:49:05,990 --> 00:49:07,340
0,240 240,540 540,750 750,960 960,1350
data structures actually being shared

1680
00:49:07,370 --> 00:49:09,350
0,240 240,870 1140,1470 1470,1830 1830,1980
like fetched the map that

1681
00:49:09,350 --> 00:49:10,610
0,210 210,360 360,660 660,720 720,1260
actually keep track of which

1682
00:49:10,610 --> 00:49:12,470
0,870 870,1410 1410,1560 1560,1800 1800,1860
urls manufacturers is actually the

1683
00:49:12,470 --> 00:49:14,660
0,600 630,1080 1080,1470 1470,1530 1530,2190
only access within the coordinator.

1684
00:49:16,480 --> 00:49:17,770
0,150 150,240 240,690 690,870 870,1290
So the governor got to

1685
00:49:17,800 --> 00:49:18,910
0,180 180,330 330,600 630,1020 1020,1110
know when we called it

1686
00:49:18,910 --> 00:49:20,980
0,630 660,1230 1230,1410 1410,1620 1620,2070
initially a we've got a

1687
00:49:20,980 --> 00:49:23,620
0,210 210,900 930,1230 1230,2010 2310,2640
it has one url checks

1688
00:49:23,620 --> 00:49:25,270
0,90 90,510 510,1290 1290,1530 1530,1650
the fetch map and for

1689
00:49:25,270 --> 00:49:26,740
0,240 240,990
every url.

1690
00:49:26,800 --> 00:49:28,150
0,360 360,420 420,660 660,1110 1200,1350
Then it goes basically you

1691
00:49:28,150 --> 00:49:30,520
0,300 570,1050 1050,1710 1710,1980 1980,2370
know cycles through reach the

1692
00:49:30,700 --> 00:49:32,590
0,690 690,960 960,1050 1050,1320 1320,1890
channel using a range statement

1693
00:49:33,010 --> 00:49:34,090
0,120 120,420 420,570 570,750 750,1080
and basically what this does

1694
00:49:34,090 --> 00:49:35,200
0,330 330,510 510,780 780,1020 1020,1110
is just keep green in

1695
00:49:35,200 --> 00:49:36,490
0,60 60,540 540,900 900,1200 1200,1290
the channel and grab the

1696
00:49:36,490 --> 00:49:37,870
0,210 210,540 540,810 810,1050 1050,1380
next value groups, next value,

1697
00:49:37,870 --> 00:49:39,400
0,300 300,540 540,870 900,1140 1140,1530
perhaps next value, so basically

1698
00:49:39,400 --> 00:49:41,320
0,270 270,780 780,1470 1560,1740 1740,1920
grips a url, we know

1699
00:49:41,320 --> 00:49:42,520
0,180 180,390 390,540 540,750 780,1200
there's one in it because

1700
00:49:42,520 --> 00:49:43,660
0,360 360,540 540,630 630,930 930,1140
we put it on when

1701
00:49:43,660 --> 00:49:44,800
0,90 90,480 480,720
we created it.

1702
00:49:45,020 --> 00:49:46,550
0,180 180,660 660,810 810,990 990,1530
And then, for that url,

1703
00:49:46,550 --> 00:49:48,080
0,330 330,690 690,900 900,1170 1170,1530
we're roughly the same thing

1704
00:49:48,080 --> 00:49:50,840
0,390 390,930 1410,2190
as their um.

1705
00:49:51,170 --> 00:49:52,940
0,690 690,1170 1170,1440 1470,1620 1620,1770
Concurrent as the new touch

1706
00:49:52,940 --> 00:49:55,100
0,480 810,1620 1620,1740 1740,1920 1920,2160
one, um, you know we

1707
00:49:55,100 --> 00:49:56,540
0,300 300,570 570,900 900,1140 1140,1440
see the url has already

1708
00:49:56,540 --> 00:49:58,190
0,150 150,690 720,1380 1380,1590 1590,1650
been fetched a if it

1709
00:49:58,190 --> 00:49:59,690
0,270 270,450 450,930 930,1380 1380,1500
hasn't been fetched then we're

1710
00:49:59,690 --> 00:50:01,490
0,480 540,1140 1140,1200 1200,1290 1290,1800
done otherwise we will create

1711
00:50:01,490 --> 00:50:03,290
0,180 180,570 570,1200 1230,1470 1470,1800
a NGO worker to actually

1712
00:50:03,290 --> 00:50:04,900
0,360 360,600 600,1140
fetch that url.

1713
00:50:06,380 --> 00:50:08,090
0,690 690,1050 1050,1140 1140,1290 1290,1710
Um, and we keep track

1714
00:50:08,090 --> 00:50:10,310
0,60 60,240 240,840 870,1770 1770,2220
of how many outstanding workers,

1715
00:50:10,310 --> 00:50:11,390
0,180 180,450 480,750 750,990 990,1080
we have so and is

1716
00:50:11,390 --> 00:50:12,770
0,360 360,570 570,630 630,1140 1140,1380
counting number of workers and

1717
00:50:12,770 --> 00:50:14,060
0,240 240,450 450,570 570,660 660,1290
only when n is zero,

1718
00:50:14,240 --> 00:50:16,430
0,390 390,570 570,870 870,1650 1680,2190
um do we terminate the

1719
00:50:16,460 --> 00:50:18,590
0,750 1140,1410 1410,1590 1590,1830 1830,2130
coordinator, um to make sure

1720
00:50:18,590 --> 00:50:20,180
0,120 120,600 600,900 900,1080 1080,1590
that basically we have fetched

1721
00:50:20,210 --> 00:50:21,860
0,300 300,630 660,870 870,1410 1440,1650
all the web pages that

1722
00:50:21,860 --> 00:50:23,030
0,90 90,480 480,570 570,720 720,1170
were supposed to be fetching.

1723
00:50:23,910 --> 00:50:25,110
0,270 270,390 390,570 570,870 870,1200
Unless you can work a

1724
00:50:25,110 --> 00:50:26,820
0,300 300,630 630,900 900,1320 1320,1710
worker basically calls fetch this

1725
00:50:26,820 --> 00:50:28,680
0,450 450,750 750,1170 1170,1710 1710,1860
proportion happens completely parallel with

1726
00:50:28,680 --> 00:50:30,160
0,150 150,360 360,990
any other workers.

1727
00:50:30,190 --> 00:50:32,410
0,720 1140,1290 1290,1440 1440,1680 1680,2220
Um, if we actually fetch

1728
00:50:32,440 --> 00:50:34,690
0,900 900,1530 1530,1770 1770,2040 2040,2250
awesome url from that web

1729
00:50:34,690 --> 00:50:35,890
0,270 270,450 450,780 780,1050 1050,1200
page, it basically writes all

1730
00:50:35,890 --> 00:50:37,720
0,210 210,840 840,1110 1110,1440 1440,1830
those urls to the channel

1731
00:50:37,870 --> 00:50:39,760
0,450 450,960 990,1140 1140,1740 1740,1890
and so the coordinator will

1732
00:50:39,760 --> 00:50:41,230
0,150 150,330 330,540 540,1140 1140,1470
get all those channels, fruits

1733
00:50:41,230 --> 00:50:42,540
0,270 270,810
range statements.

1734
00:50:43,180 --> 00:50:44,590
0,390 390,540 540,720 720,840 840,1410
And then when it's done

1735
00:50:44,590 --> 00:50:46,780
0,360 360,540 540,1230 1410,1920 1920,2190
writing all the general food

1736
00:50:46,780 --> 00:50:49,210
0,540 660,960 960,1200 1200,2010 2010,2430
channel, then the coordinator a

1737
00:50:49,240 --> 00:50:51,820
0,540 540,1200 1200,1710 1710,2430 2430,2580
worker exits and w no

1738
00:50:51,820 --> 00:50:53,580
0,150 150,300 300,750 750,1230
at some point, um.

1739
00:50:53,710 --> 00:50:55,750
0,360 360,1170 1170,1260 1260,1530 1530,2040
A decrease, you know and

1740
00:50:55,750 --> 00:50:56,770
0,270 270,510 510,630 630,750 750,1020
and then at the end

1741
00:50:56,920 --> 00:50:58,400
0,150 480,960
of a.

1742
00:50:58,920 --> 00:51:00,460
0,150 150,360 360,570 570,1020
And that's it basically.

1743
00:51:01,180 --> 00:51:02,380
0,660
Okay.

1744
00:51:02,470 --> 00:51:03,100
0,150 150,360 360,420 420,510 510,630
So those are the two

1745
00:51:03,100 --> 00:51:05,230
0,570 600,1320 1350,1560 1560,1920 1920,2130
solutions a any questions about

1746
00:51:05,230 --> 00:51:06,240
0,420
these.

1747
00:51:12,720 --> 00:51:14,100
0,180 180,270 270,390 390,840
Is it all clear.

1748
00:51:16,100 --> 00:51:17,510
0,240 240,330 330,780 780,930 930,1410
There's a question in chat

1749
00:51:17,720 --> 00:51:19,820
0,630 660,1020 1020,1170 1170,1620 1770,2100
mag a let me get

1750
00:51:19,820 --> 00:51:22,500
0,120 120,390 390,840 1230,2160
my chat list backup.

1751
00:51:32,770 --> 00:51:34,930
0,360 360,540 540,660 660,1230 1230,2160
Okay, so the question is

1752
00:51:35,140 --> 00:51:36,310
0,390 390,720 720,930 930,1110 1110,1170
when C H has a

1753
00:51:36,310 --> 00:51:37,540
0,360 360,510 510,720 750,1020 1020,1230
value in it when all

1754
00:51:37,540 --> 00:51:40,210
0,240 240,510 510,840 840,1440 1890,2670
other friends, be idle, a

1755
00:51:40,210 --> 00:51:41,980
0,60 450,780 780,840 840,1140 1140,1770
if it's the case {that's

1756
00:51:41,980 --> 00:51:43,330
0,30 30,840 870,1110 1110,1260 1260,1350
-} a since this is

1757
00:51:43,330 --> 00:51:44,560
0,240 240,300 300,570 570,930 930,1230
not a buffered channel, but

1758
00:51:44,590 --> 00:51:45,190
0,90 90,210 210,420 420,540 540,600
you know there's going to

1759
00:51:45,190 --> 00:51:46,660
0,90 90,480 480,990 990,1380 1380,1470
be only one request in

1760
00:51:46,660 --> 00:51:47,560
0,90 90,390 390,480 480,540 540,900
the channel at the time.

1761
00:51:48,170 --> 00:51:49,430
0,180 180,540 540,750 750,840 840,1260
And so all the threats

1762
00:51:49,430 --> 00:51:51,200
0,120 120,330 330,600 600,1170 1200,1770
you know will be appended

1763
00:51:51,200 --> 00:51:52,040
0,90 90,180 180,480 480,720 720,840
to the channel one by

1764
00:51:52,040 --> 00:51:52,980
0,330
one.

1765
00:51:54,010 --> 00:51:55,360
0,480 480,780 780,1020 1020,1260 1260,1350
But doesn't that make the

1766
00:51:55,360 --> 00:51:57,190
0,360 360,1050 1050,1500 1500,1680 1680,1830
program sequential because no two

1767
00:51:57,190 --> 00:51:58,390
0,270 270,330 330,540 540,630 630,1200
threads are running in parallel

1768
00:51:58,570 --> 00:51:59,560
0,300 300,390 390,600 600,810 810,990
except the main threat and

1769
00:51:59,560 --> 00:52:02,350
0,570 1320,2010 2040,2310 2310,2520 2520,2790
one flesh will still happen

1770
00:52:02,350 --> 00:52:03,460
0,60 60,600
in parallel.

1771
00:52:04,080 --> 00:52:05,250
0,330 330,420 420,750 750,810 810,1170
Those are presuming the expensive

1772
00:52:05,250 --> 00:52:06,870
0,570 840,1050 1050,1290 1290,1470 1470,1620
operation where those go out

1773
00:52:06,870 --> 00:52:08,280
0,300 300,390 390,870
across the Internet.

1774
00:52:09,350 --> 00:52:11,240
0,540 540,630 630,840 840,1230
Got it, thank you.

1775
00:52:14,040 --> 00:52:15,540
0,420 450,930 930,1020 1020,1230 1230,1500
Okay, let me switch back

1776
00:52:15,540 --> 00:52:17,860
0,810 840,1020 1020,1230 1230,1770
to my other screen.

1777
00:52:17,890 --> 00:52:19,100
0,720
Yeah.

1778
00:52:19,270 --> 00:52:20,050
0,240 240,420 420,480 480,660 660,780
A talk a little bit

1779
00:52:20,050 --> 00:52:21,460
0,240 240,390 390,900 930,1230 1230,1410
about our PC a since

1780
00:52:21,460 --> 00:52:22,630
0,210 210,300 300,510 510,840 840,1170
that's the other thing tool

1781
00:52:22,630 --> 00:52:23,800
0,150 150,300 300,720 750,1020 1020,1170
that you need a full

1782
00:52:23,800 --> 00:52:24,920
0,600
collapse.

1783
00:52:27,540 --> 00:52:28,380
0,390 390,510 510,630 630,690 690,840
We're not going to say

1784
00:52:28,380 --> 00:52:29,460
0,90 90,270 270,510 510,720 720,1080
you talk about it, but

1785
00:52:29,460 --> 00:52:30,920
0,90 90,330 330,930
you say, um.

1786
00:52:31,580 --> 00:52:33,200
0,270 270,840 840,1050 1050,1320 1320,1620
Our PC which stands for

1787
00:52:33,200 --> 00:52:35,360
0,600 750,1200 1200,1620
remote procedure calls.

1788
00:52:41,680 --> 00:52:43,420
0,390 390,750 750,840 840,1560 1590,1740
And basically the goal you

1789
00:52:43,420 --> 00:52:45,940
0,120 120,510 810,1530 1530,1830 2190,2520
know the goal in our

1790
00:52:45,940 --> 00:52:47,560
0,330 330,930 930,1380 1380,1440 1440,1620
PC system like the one

1791
00:52:47,560 --> 00:52:48,700
0,150 150,390 390,750 750,840 840,1140
that go has the banks

1792
00:52:48,700 --> 00:52:51,010
0,270 270,450 450,1290 1350,1830 1830,2310
or are PCs behave roughly

1793
00:52:51,010 --> 00:52:53,860
0,690 1020,1230 1230,1710 1710,2250 2280,2850
similar to procedure calls local

1794
00:52:53,860 --> 00:52:55,090
0,330 330,600 600,720 720,1140 1140,1230
procedure calls the execute on

1795
00:52:55,090 --> 00:52:56,060
0,60 60,510
the stack.

1796
00:52:56,060 --> 00:52:57,470
0,330 330,450 450,870 1050,1290 1290,1410
Right, and so um the

1797
00:52:57,470 --> 00:52:58,730
0,330 330,540 540,660 660,1140 1140,1260
goal is to example if

1798
00:52:58,730 --> 00:53:00,500
0,90 90,180 180,270 270,840 1530,1770
you have a client in

1799
00:53:00,500 --> 00:53:03,170
0,180 180,630 630,1440 1440,1770 2310,2670
our PC terminology, the college

1800
00:53:03,170 --> 00:53:05,660
0,330 330,540 540,600 600,1290 1290,2490
typically called the client and

1801
00:53:05,960 --> 00:53:07,700
0,450 450,660 660,1260
colleagues called server.

1802
00:53:07,820 --> 00:53:09,170
0,210 210,510 510,630 630,720 720,1350
So you have a function

1803
00:53:09,770 --> 00:53:11,270
0,510 510,1020 1020,1110 1110,1380 1380,1500
f, um, you know we're

1804
00:53:11,270 --> 00:53:13,010
0,450 450,660 660,960 960,1110 1110,1740
calling with X and y

1805
00:53:13,190 --> 00:53:14,720
0,390 390,570 570,660 660,750 750,1530
and then at the server,

1806
00:53:14,780 --> 00:53:16,010
0,330 330,420 420,990 990,1080 1080,1230
there's the implementation of this

1807
00:53:16,010 --> 00:53:16,920
0,420
function.

1808
00:53:18,560 --> 00:53:19,610
0,240 240,450 450,630 630,690 690,1050
And so there's a function

1809
00:53:19,610 --> 00:53:21,080
0,330 330,840 840,1050 1050,1170 1170,1470
and whatever else you know

1810
00:53:21,080 --> 00:53:22,760
0,540 540,1110
why ain't.

1811
00:53:22,820 --> 00:53:25,550
0,870 870,1020 1020,1170 1170,2160 2550,2730
And you know determines you

1812
00:53:25,550 --> 00:53:27,050
0,90 90,420 420,750 750,1380 1380,1500
know whatever doesn't complication when

1813
00:53:27,050 --> 00:53:28,340
0,120 120,240 240,450 450,630 630,1290
they can use as reference.

1814
00:53:30,040 --> 00:53:31,980
0,420 420,660 660,840 840,1230
A X, plus one.

1815
00:53:33,580 --> 00:53:35,500
0,150 150,570 570,570 1470,1830 1830,1920
And so, um, what we

1816
00:53:35,500 --> 00:53:36,820
0,120 120,660 660,720 720,930 930,1320
would like to have happen

1817
00:53:36,820 --> 00:53:37,690
0,210 210,360 360,450 450,720 720,870
or like the model that

1818
00:53:37,690 --> 00:53:39,460
0,120 120,270 270,450 450,1230 1230,1770
we would like to ourselves

1819
00:53:39,460 --> 00:53:40,450
0,90 90,240 240,540 540,690 690,990
to think about is that

1820
00:53:40,540 --> 00:53:41,440
0,210 210,300 300,600 600,780 780,900
when the client calls this

1821
00:53:41,440 --> 00:53:44,410
0,570 810,1770 1950,2250 2250,2430 2430,2970
function fn, um the RBC

1822
00:53:44,410 --> 00:53:45,970
0,540 540,870 870,1080 1080,1440 1440,1560
system will make sure that

1823
00:53:45,970 --> 00:53:48,490
0,210 210,480 660,1320 1320,2130 2130,2520
there's any corresponding authentication happening

1824
00:53:48,490 --> 00:53:49,920
0,120 120,210 210,540 540,990
on the service side.

1825
00:53:49,920 --> 00:53:51,540
0,270 270,720 720,840 840,1320 1320,1620
A passes the arguments actually

1826
00:53:51,540 --> 00:53:52,380
0,390 390,540 540,630 630,750 750,840
why you go to the

1827
00:53:52,380 --> 00:53:53,940
0,660 720,900 900,1230 1230,1470 1470,1560
server, the code runs on

1828
00:53:53,940 --> 00:53:55,950
0,60 60,810 960,1530 1530,1890 1890,2010
the server, a it you

1829
00:53:55,950 --> 00:53:57,900
0,360 390,900 900,990 990,1560 1560,1950
know returns a result you

1830
00:53:57,900 --> 00:53:58,980
0,540
see.

1831
00:53:59,040 --> 00:54:01,050
0,240 240,390 390,870 870,1050 1470,2010
And that result is communicating

1832
00:54:01,050 --> 00:54:03,000
0,330 330,450 450,540 540,1110 1380,1950
back to the client and

1833
00:54:03,000 --> 00:54:05,040
0,60 60,390 390,930 930,1650 1650,2040
you know and then fn

1834
00:54:05,040 --> 00:54:07,170
0,180 180,1110 1110,1320 1320,1950 1950,2130
will resume will return and

1835
00:54:07,170 --> 00:54:08,490
0,60 60,420 420,510 510,1020 1050,1320
the client will return a

1836
00:54:08,490 --> 00:54:10,770
0,210 210,810 810,1080 1170,1650 1980,2280
will resume with the X

1837
00:54:10,770 --> 00:54:12,240
0,180 180,540 540,990 1020,1230 1230,1470
plus y in the value

1838
00:54:12,240 --> 00:54:13,290
0,90 90,390 390,660 660,780 780,1050
of X Y and z.

1839
00:54:13,760 --> 00:54:15,350
0,360 720,930 930,1110 1110,1350 1350,1590
Right, so this looks like

1840
00:54:15,350 --> 00:54:16,490
0,390 390,540 540,630 630,1050 1050,1140
even though the programs are

1841
00:54:16,490 --> 00:54:18,110
0,270 270,390 390,660 660,1170 1470,1620
running on different computers, you

1842
00:54:18,110 --> 00:54:19,490
0,150 150,420 420,690 690,960 960,1380
know they're actually hard boundary

1843
00:54:19,490 --> 00:54:20,930
0,450 570,810 810,960 960,1170 1170,1440
here, um, it looks like

1844
00:54:20,930 --> 00:54:22,940
0,60 60,210 210,1590 1620,1920 1920,2010
you know they make a

1845
00:54:22,940 --> 00:54:24,460
0,330 330,660 660,1080
regular procedure calls.

1846
00:54:24,920 --> 00:54:26,090
0,450 660,870 870,1050 1050,1110 1110,1170
Um, we'll see in a

1847
00:54:26,090 --> 00:54:28,700
0,540 540,1200 1200,2190 2190,2490 2490,2610
second actually, um, we can

1848
00:54:28,700 --> 00:54:29,750
0,150 150,210 210,360 360,420 420,1050
make a lot of similarities,

1849
00:54:29,750 --> 00:54:30,740
0,90 90,330 330,690 690,780 780,990
so it's possible to make

1850
00:54:30,740 --> 00:54:32,420
0,90 90,660 660,900 900,1380 1470,1680
them behave very similar but

1851
00:54:32,420 --> 00:54:33,320
0,120 120,360 360,570 570,810 810,900
you'll see there's also a

1852
00:54:33,320 --> 00:54:34,580
0,150 150,240 240,330 330,870 870,1260
sort of a fundamental difference

1853
00:54:34,580 --> 00:54:35,510
0,90 90,480 480,720 720,840 840,930
and actually asking what to

1854
00:54:35,510 --> 00:54:37,140
0,150 150,270 270,690 690,1110
do with distributed computing.

1855
00:54:38,040 --> 00:54:39,060
0,210 210,480 480,690 690,870 870,1020
But before getting there, let

1856
00:54:39,060 --> 00:54:41,430
0,90 90,300 300,1290 1680,2130 2130,2370
me first of sketch out

1857
00:54:41,430 --> 00:54:42,120
0,180 180,300 300,390 390,570 570,690
how you can make this

1858
00:54:42,120 --> 00:54:43,060
0,420
work.

1859
00:54:43,300 --> 00:54:43,960
0,150 150,270 270,390 390,570 570,660
And this is sort of

1860
00:54:43,960 --> 00:54:45,340
0,390 390,660 660,840 840,1110 1110,1380
roughly let's go dust do

1861
00:54:45,670 --> 00:54:47,320
0,660 750,960 960,1050 1050,1320 1320,1650
so, so the way you

1862
00:54:47,320 --> 00:54:48,190
0,180 180,360 360,450 450,570 570,870
think about it is that

1863
00:54:48,220 --> 00:54:49,840
0,240 240,300 300,990
when the client.

1864
00:54:50,060 --> 00:54:52,260
0,300 300,480 480,840 870,1590
So give her program.

1865
00:54:52,660 --> 00:54:53,860
0,390 390,570 570,630 630,900 900,1200
And when the client calls

1866
00:54:53,860 --> 00:54:55,540
0,120 120,540 540,1200 1230,1440 1440,1680
the function fn with X

1867
00:54:55,540 --> 00:54:57,060
0,120 120,420 420,660 660,930
and y in it.

1868
00:54:57,210 --> 00:54:58,290
0,180 180,480 480,750 750,840 840,1080
Um, what does it actually

1869
00:54:58,290 --> 00:55:00,150
0,480 480,780 780,930 930,1200 1200,1860
calls something that's called stop.

1870
00:55:01,350 --> 00:55:02,970
0,510 510,750 750,810 810,1230 1230,1620
A stop is basically local

1871
00:55:02,970 --> 00:55:04,530
0,510 540,690 690,840 840,1080 1080,1560
function, you know quote FM

1872
00:55:05,010 --> 00:55:06,720
0,390 390,690 690,870 870,1320 1320,1710
and with two arguments Smith

1873
00:55:06,840 --> 00:55:08,220
0,540 540,660 660,810 810,900 900,1380
declared that X and y

1874
00:55:08,370 --> 00:55:09,480
0,210 210,540 540,690 690,780 780,1110
and basically what the stub

1875
00:55:09,480 --> 00:55:10,520
0,450
does.

1876
00:55:11,280 --> 00:55:12,090
0,180 180,360 360,570 570,690 690,810
Do you think this is

1877
00:55:12,090 --> 00:55:14,070
0,120 120,390 390,1170 1260,1590 1590,1980
a stop procedure, but stop

1878
00:55:14,070 --> 00:55:15,600
0,360 360,540 540,660 660,1320 1320,1530
procedure, but we don't build

1879
00:55:15,600 --> 00:55:16,740
0,30 30,660
a message.

1880
00:55:17,200 --> 00:55:18,700
0,630 630,720 720,810 810,1200 1200,1500
Um, you know saying which

1881
00:55:18,700 --> 00:55:20,080
0,390 390,570 570,690 690,780 780,1380
function needs to be called

1882
00:55:20,380 --> 00:55:22,330
0,300 300,1020 1020,1140 1140,1230 1230,1950
the arguments of the function,

1883
00:55:22,330 --> 00:55:23,920
0,90 90,180 180,300 300,660 660,1590
you know the types of

1884
00:55:24,040 --> 00:55:25,780
0,600 600,870 900,1470 1470,1560 1560,1740
arguments, the values of these

1885
00:55:25,780 --> 00:55:28,040
0,690 780,1290 1290,1800
arguments etc etc.

1886
00:55:28,130 --> 00:55:30,740
0,120 120,660 870,1380 1380,1800 1800,2610
And then a what the

1887
00:55:30,920 --> 00:55:32,120
0,270 270,510 510,810 810,960 960,1200
stuff does actually it sends

1888
00:55:32,120 --> 00:55:33,590
0,90 90,300 300,390 390,990 1170,1470
it over the network to

1889
00:55:33,590 --> 00:55:35,810
0,210 210,1110 1140,1590 1590,1680 1680,2220
a corresponding stop the server.

1890
00:55:39,010 --> 00:55:41,080
0,390 420,870 870,1260 1260,1440 1440,2070
So server receives this message.

1891
00:55:42,000 --> 00:55:44,160
0,330 330,960 1110,1260 1260,1530
And basically you know.

1892
00:55:44,220 --> 00:55:46,040
0,90 90,330 330,450 450,1110
He takes his message.

1893
00:55:46,040 --> 00:55:48,770
0,450 480,1110 1110,1260 1260,1800 2370,2730
And Marshall or Marshall is

1894
00:55:48,770 --> 00:55:50,600
0,570 600,1020 1020,1230 1230,1470 1470,1830
a term that's being used

1895
00:55:50,600 --> 00:55:53,420
0,60 60,390 390,1110 1530,2010 2010,2820
to basically convert a values

1896
00:55:53,450 --> 00:55:55,730
0,630 750,1350 1350,1440 1440,2010 2010,2280
for from a two byte

1897
00:55:55,730 --> 00:55:57,500
0,480 600,900 900,1110 1110,1530 1530,1770
arrays, byte arrays back note

1898
00:55:57,500 --> 00:55:58,680
0,720
values.

1899
00:55:58,870 --> 00:56:00,070
0,240 240,390 390,1020 1020,1080 1080,1200
And then calls you know

1900
00:56:00,070 --> 00:56:02,140
0,150 150,870 1020,1800 1800,1980 1980,2070
this function fn at the

1901
00:56:02,140 --> 00:56:04,690
0,630 810,1260 1260,1470 1470,1860 1860,2550
server user here at annex

1902
00:56:04,900 --> 00:56:06,200
0,510
INC.

1903
00:56:06,260 --> 00:56:07,760
0,180 180,360 360,960
Blah blah blah.

1904
00:56:09,620 --> 00:56:10,760
0,210 210,360 360,570 570,870 870,1140
So just stop basically calls

1905
00:56:10,760 --> 00:56:12,170
0,90 90,540 540,630 630,960 960,1410
the function, the function returns

1906
00:56:12,170 --> 00:56:14,020
0,360 360,660 660,810 810,1290
back into the stock.

1907
00:56:14,050 --> 00:56:15,370
0,180 180,420 420,1080 1080,1170 1170,1320
This stuff marshals, you know

1908
00:56:15,370 --> 00:56:18,220
0,420 420,900 900,1440 1470,2250 2490,2850
the response value magazine magazine

1909
00:56:18,250 --> 00:56:19,900
0,330 330,510 510,1080
X plus y.

1910
00:56:19,990 --> 00:56:21,880
0,600 810,1170 1170,1320 1320,1770 1770,1890
A sense that back you

1911
00:56:21,880 --> 00:56:23,780
0,120 120,750 780,1140
know to the.

1912
00:56:24,050 --> 00:56:25,580
0,390 390,900 930,1080 1080,1320 1320,1530
Climb stop and climb stuff

1913
00:56:25,580 --> 00:56:26,810
0,90 90,300 300,690 690,870 870,1230
is still waiting, so basically

1914
00:56:26,810 --> 00:56:27,710
0,90 90,390 390,600 600,690 690,900
the client stuff the way

1915
00:56:27,710 --> 00:56:28,730
0,90 90,330 330,660 660,750 750,1020
it actually works, it sends

1916
00:56:28,730 --> 00:56:29,720
0,90 90,180 180,720 720,840 840,990
out the request and then

1917
00:56:29,720 --> 00:56:31,160
0,300 300,420 420,480 480,1050 1170,1440
wait for the response when

1918
00:56:31,160 --> 00:56:32,510
0,90 90,480 480,690 690,960 960,1350
the response comes back in

1919
00:56:32,840 --> 00:56:34,620
0,150 150,270 270,570 570,1350
you know in marshall's.

1920
00:56:38,120 --> 00:56:39,290
0,150 150,510 540,780 780,1110 1110,1170
And then it returns the

1921
00:56:39,290 --> 00:56:40,910
0,330 330,450 450,510 510,1020 1380,1620
value to the clients right,

1922
00:56:40,910 --> 00:56:42,710
0,120 120,510 510,930 930,1140 1140,1800
so basically these two stuffs

1923
00:56:43,040 --> 00:56:44,990
0,420 420,600 600,660 660,1140 1140,1950
a sort of make a

1924
00:56:45,020 --> 00:56:46,430
0,300 300,630 630,1020 1020,1200 1200,1410
remote procedure call look like

1925
00:56:46,430 --> 00:56:48,050
0,210 210,540 540,900 900,1200 1380,1620
a regular procedure call for

1926
00:56:48,050 --> 00:56:49,540
0,270 270,360 360,600 600,990
which you can't tell.

1927
00:56:49,820 --> 00:56:52,880
0,450 690,930 930,1140 1140,1860 2100,3060
Um, and the key, A

1928
00:56:53,330 --> 00:56:54,590
0,390 390,690 690,720 720,1200 1200,1260
D stops are generally you

1929
00:56:54,590 --> 00:56:56,780
0,120 120,630 630,1200 1800,2070 2070,2190
know automatically generated so the

1930
00:56:56,780 --> 00:56:58,700
0,660 660,930 930,1320 1320,1410 1410,1920
compiler again incase the co-pilot

1931
00:56:58,700 --> 00:56:59,810
0,210 210,360 360,750 750,810 810,1110
that will generate two steps

1932
00:56:59,810 --> 00:57:02,180
0,240 240,630 720,1470 1470,2130 2160,2370
for you, um, and um,

1933
00:57:02,180 --> 00:57:04,190
0,330 330,780 810,1260 1260,1470 1470,2010
due to marshalling and marshalling

1934
00:57:04,190 --> 00:57:05,500
0,420 420,690 690,840
arguments for you.

1935
00:57:06,200 --> 00:57:08,600
0,540 540,1230 1260,1890 1950,2160 2160,2400
Um, and um, and also

1936
00:57:08,600 --> 00:57:11,270
0,240 240,720 1050,1410 1410,2070 2100,2670
how gross post delta, so

1937
00:57:11,360 --> 00:57:12,830
0,270 270,480 480,930 930,1170 1170,1470
when you're doing it from

1938
00:57:12,830 --> 00:57:14,150
0,180 180,630 630,750 750,870 870,1320
the server to the client,

1939
00:57:14,150 --> 00:57:15,860
0,180 180,510 510,870 870,1230 1230,1710
there's also another step again,

1940
00:57:16,190 --> 00:57:18,050
0,720 720,1080 1080,1470 1470,1770 1770,1860
you basically return back to

1941
00:57:18,050 --> 00:57:19,700
0,240 480,780 780,1200
the first stop.

1942
00:57:19,700 --> 00:57:20,960
0,150 150,420 420,840 840,1260 1260,1260
So this stuff makes a

1943
00:57:20,960 --> 00:57:22,790
0,450 450,780 780,1080 1110,1500 1500,1830
procedure call to majorly calls

1944
00:57:22,790 --> 00:57:24,740
0,60 60,480 480,1110 1410,1560 1560,1950
the procedure FM that procedure

1945
00:57:24,740 --> 00:57:26,300
0,570 570,810 810,1170 1170,1260 1260,1560
returns crashed into the stop

1946
00:57:26,300 --> 00:57:28,100
0,300 480,870 870,1230 1230,1440 1650,1800
because stop called it oh

1947
00:57:28,100 --> 00:57:29,180
0,120 120,240 240,600 600,930 930,1080
it's the same stuff that

1948
00:57:29,180 --> 00:57:31,320
0,150 150,450 450,690 990,1650
it goes in exactly.

1949
00:57:31,780 --> 00:57:33,060
0,630
Garden.

1950
00:57:33,060 --> 00:57:34,820
0,390
Okay.

1951
00:57:34,940 --> 00:57:36,290
0,210 210,510 510,990 1020,1170 1170,1350
Okay, so um, let me

1952
00:57:36,290 --> 00:57:37,730
0,240 240,780 780,960 960,1140 1140,1440
show you how this plays

1953
00:57:37,730 --> 00:57:40,480
0,300 300,810 810,900 900,2190
out inside of go.

1954
00:57:43,320 --> 00:57:45,690
0,510 510,1050 1050,1500 1500,2070 2070,2370
And by showing you a

1955
00:57:45,690 --> 00:57:48,060
0,240 240,1020 1290,1440 1440,1770 1770,2370
very simple key value server.

1956
00:57:48,730 --> 00:57:49,980
0,660
AH.

1957
00:57:50,010 --> 00:57:51,420
0,270 270,450 450,750 750,1140 1140,1410
And you'll see it doesn't

1958
00:57:51,420 --> 00:57:52,920
0,120 120,750 750,870 870,1230 1230,1500
look exactly our procedure calls

1959
00:57:52,920 --> 00:57:54,920
0,120 120,480 510,780 780,1350
but it's pretty close.

1960
00:57:54,920 --> 00:57:56,840
0,690 960,1200 1200,1350 1350,1680 1680,1920
Um, so the typical thing

1961
00:57:56,840 --> 00:57:58,640
0,240 240,540 540,870 870,1080 1080,1800
is that you actually declare

1962
00:57:58,700 --> 00:58:01,190
0,900 930,1680 1680,1890 1890,1980 1980,2490
typical convention should be English

1963
00:58:01,190 --> 00:58:03,770
0,210 210,360 360,1950 2460,2580 2580,2580
that you declare a um,

1964
00:58:05,180 --> 00:58:06,980
0,180 180,600 600,1350 1350,1470 1470,1800
the argument structure and so

1965
00:58:06,980 --> 00:58:07,880
0,120 120,240 240,420 420,780 780,900
we're going to implement to

1966
00:58:07,880 --> 00:58:09,020
0,690
procedures.

1967
00:58:09,020 --> 00:58:10,310
0,120 120,390 390,780 780,960 960,1290
Two remote procedures, one spoon

1968
00:58:10,430 --> 00:58:12,110
0,120 120,240 240,360 360,780 1200,1680
and one is get and

1969
00:58:12,110 --> 00:58:13,760
0,330 330,840 840,1140 1140,1500 1500,1650
produce basically approved arcs is

1970
00:58:13,760 --> 00:58:14,780
0,150 150,600 600,690 690,780 780,1020
the arguments through the boot

1971
00:58:14,780 --> 00:58:16,160
0,120 120,300 300,750 750,810 810,1380
and put replies to response,

1972
00:58:16,160 --> 00:58:17,630
0,540 540,750 750,990 990,1290 1290,1470
similar there's get arcs with

1973
00:58:17,630 --> 00:58:19,790
0,480 480,1050 1050,1440 1440,1710 1710,2160
their request where the arguments

1974
00:58:19,790 --> 00:58:21,530
0,150 150,300 300,750 780,1110 1110,1740
through the request, get procedure

1975
00:58:21,650 --> 00:58:22,880
0,150 150,240 240,750
and the reply.

1976
00:58:23,690 --> 00:58:24,470
0,150 150,270 270,420 420,540 540,780
And so let me first

1977
00:58:24,470 --> 00:58:25,490
0,120 120,210 210,270 270,840 870,1020
look at the server, so

1978
00:58:25,490 --> 00:58:27,050
0,270 270,390 390,600 600,1320 1410,1560
here are two functions, you

1979
00:58:27,050 --> 00:58:29,210
0,210 210,660 660,1140 1170,1770 1830,2160
know actually the two function

1980
00:58:29,210 --> 00:58:29,660
0,90 90,180 180,300 300,360 360,450
that we're going to be

1981
00:58:29,660 --> 00:58:31,660
0,450 450,810 810,870 870,1470
calling on the server.

1982
00:58:31,840 --> 00:58:33,700
0,690 720,1020 1020,1290 1320,1620 1620,1860
I think I'll skip down

1983
00:58:33,700 --> 00:58:34,540
0,90 90,240 240,330 330,390 390,840
for that for a second.

1984
00:58:35,370 --> 00:58:38,360
0,390 420,630 630,1110 1530,2400
So we actually um.

1985
00:58:41,220 --> 00:58:42,570
0,360 360,660 660,930 960,1170 1170,1350
Let me um, talk about

1986
00:58:42,570 --> 00:58:43,170
0,90 90,150 150,330 330,510 510,600
it a little bit, so

1987
00:58:43,170 --> 00:58:44,550
0,210 210,330 330,480 480,930 930,1380
this is the client site.

1988
00:58:45,180 --> 00:58:46,230
0,240 240,390 390,480 480,810 810,1050
Um, so the client calls

1989
00:58:46,230 --> 00:58:48,270
0,90 90,420 420,870 900,1530 1530,2040
a function get and um,

1990
00:58:48,270 --> 00:58:49,530
0,330 330,750 750,810 810,1140 1140,1260
what inside of get you

1991
00:58:49,530 --> 00:58:51,240
0,180 180,750 960,1140 1140,1380 1380,1710
know you know this function

1992
00:58:51,240 --> 00:58:52,440
0,210 210,600 600,720 720,810 810,1200
actually connects to the server

1993
00:58:52,440 --> 00:58:53,370
0,120 120,330 330,660 660,780 780,930
and see exactly what that

1994
00:58:53,370 --> 00:58:55,890
0,480 960,1650 1650,1710 2040,2280 2280,2520
means, um it, it fills

1995
00:58:55,890 --> 00:58:57,240
0,120 120,210 210,870 870,990 990,1350
in the arguments and allocates

1996
00:58:57,240 --> 00:58:58,470
0,120 120,660 660,780 780,930 930,1230
a response and then calls

1997
00:58:58,470 --> 00:59:00,540
0,180 180,600 600,1260 1260,1560 1560,2070
this procedure client calls call

1998
00:59:00,570 --> 00:59:01,350
0,180 180,270 270,420 420,630 630,780
you can think about this

1999
00:59:01,350 --> 00:59:03,120
0,120 120,270 270,750 750,1230 1590,1770
as a generic stock that

2000
00:59:03,120 --> 00:59:04,350
0,300 300,600 600,720 720,1110 1110,1230
basically takes the method that

2001
00:59:04,350 --> 00:59:05,040
0,150 150,240 240,330 330,570 570,690
needs to be called in

2002
00:59:05,040 --> 00:59:06,570
0,660 690,900 900,990 990,1410 1410,1530
server and the arguments in

2003
00:59:06,570 --> 00:59:08,220
0,60 60,570 930,1350 1350,1500 1500,1650
the reply colo, which has

2004
00:59:08,220 --> 00:59:10,180
0,150 150,780 960,1080 1080,1590
three arguments, the method.

2005
00:59:10,180 --> 00:59:12,760
0,120 120,960 1200,1410 1410,2040
The argument in response.

2006
00:59:13,200 --> 00:59:15,960
0,600 630,1020 1020,1650 1650,2280 2370,2760
And call internally will send

2007
00:59:15,960 --> 00:59:18,180
0,450 450,720 720,1470 1770,1980 1980,2220
Marshal the arguments, um send

2008
00:59:18,180 --> 00:59:19,320
0,60 60,390 390,510 510,630 630,1140
the message to the server

2009
00:59:19,320 --> 00:59:21,690
0,480 480,900 930,1620 1860,2160 2160,2370
over the connection and wait

2010
00:59:21,690 --> 00:59:23,700
0,120 120,240 240,990 1230,1800 1800,2010
for the response reply when

2011
00:59:23,700 --> 00:59:24,720
0,60 60,390 420,600 600,870 870,1020
the reply comes in the

2012
00:59:24,720 --> 00:59:25,890
0,330 330,630 630,750 750,870 870,1170
reply structure will be filled

2013
00:59:25,890 --> 00:59:27,330
0,210 210,420 420,540 540,870 870,1440
in by your call stub

2014
00:59:27,540 --> 00:59:28,740
0,210 210,450 450,720 720,900 900,1200
and then when that's done

2015
00:59:28,740 --> 00:59:30,030
0,270 270,690 690,870 870,930 930,1290
then return after you call

2016
00:59:30,030 --> 00:59:31,120
0,660
call.

2017
00:59:32,240 --> 00:59:33,560
0,240 240,570 570,780 780,960 960,1320
And basically put looks exactly

2018
00:59:33,560 --> 00:59:34,740
0,90 90,330 330,630
the same way.

2019
00:59:36,680 --> 00:59:37,370
0,120 120,210 210,330 330,390 390,690
And so on the server

2020
00:59:37,370 --> 00:59:38,840
0,480 840,1050 1050,1230 1230,1350 1350,1470
side, yeah let's see how

2021
00:59:38,840 --> 00:59:40,360
0,180 180,270 270,930
that is implemented.

2022
00:59:40,360 --> 00:59:41,230
0,120 120,420 420,630 630,720 720,870
The server has a key

2023
00:59:41,230 --> 00:59:43,600
0,480 480,1050 1050,1410 1410,1740 1770,2370
value map, this is nothing

2024
00:59:43,600 --> 00:59:44,740
0,270 270,390 390,540 540,930 930,1140
else than a regular go

2025
00:59:44,740 --> 00:59:45,700
0,450
map.

2026
00:59:45,700 --> 00:59:49,280
0,750 1020,1860 2310,3000
I'm in awe.

2027
00:59:50,010 --> 00:59:51,240
0,390 390,480 480,720 720,1080 1080,1230
Let me see actually the

2028
00:59:51,240 --> 00:59:52,940
0,180 180,570 570,1140
key values truck.

2029
00:59:55,450 --> 00:59:57,920
0,660 660,1290 1320,1890
Declared somewhere, um.

2030
00:59:58,930 --> 01:00:00,130
0,270 270,600 600,750 750,960 960,1200
Oh, sorry it's right above

2031
01:00:00,130 --> 01:00:01,810
0,210 690,1020 1050,1290 1290,1350 1350,1680
it so there's a structure

2032
01:00:01,810 --> 01:00:03,460
0,270 270,930 960,1200 1200,1530 1530,1650
called cavey that actually has

2033
01:00:03,460 --> 01:00:04,900
0,90 90,600 600,930 930,1140 1140,1440
some mutexes and a map

2034
01:00:04,900 --> 01:00:06,070
0,120 120,330 630,870 870,930 930,1170
in it and the map

2035
01:00:06,070 --> 01:00:06,880
0,180 180,360 360,630 630,750 750,810
is like we're going to

2036
01:00:06,880 --> 01:00:07,540
0,120 120,210 210,390 390,480 480,660
do the put and get

2037
01:00:07,540 --> 01:00:08,780
0,510 510,720
operations on.

2038
01:00:10,320 --> 01:00:12,120
0,180 180,330 330,570 570,1020 1020,1800
And there's a little preamble

2039
01:00:12,120 --> 01:00:13,230
0,420 420,510 510,690 690,930 930,1110
that you need to sort

2040
01:00:13,230 --> 01:00:14,700
0,90 90,510 510,690 690,900 900,1470
of write you to setup

2041
01:00:14,700 --> 01:00:16,200
0,60 60,630 900,1140 1140,1260 1260,1500
a server, um, but here

2042
01:00:16,200 --> 01:00:18,180
0,90 90,510 780,1650 1650,1800 1800,1980
it is, um, you know

2043
01:00:18,180 --> 01:00:20,340
0,420 420,1110 1200,1650 1650,2100 2100,2160
you basically, um allocate a

2044
01:00:20,340 --> 01:00:22,650
0,180 180,750 750,1350 1680,2040 2040,2310
new server object, and then

2045
01:00:22,650 --> 01:00:24,120
0,180 180,390 390,480 480,720 720,1470
this is the key operation

2046
01:00:24,420 --> 01:00:28,440
0,480 480,960 960,1830 2010,2910 2940,4020
RBC register cavey will register

2047
01:00:28,440 --> 01:00:29,940
0,390 390,690 690,810 810,1320 1320,1500
basically all the methods that

2048
01:00:29,940 --> 01:00:31,800
0,120 120,840 840,1200 1200,1380 1380,1860
are implemented on the key

2049
01:00:31,800 --> 01:00:33,690
0,540 570,870 870,960 960,1380 1380,1890
struck with the rpg server.

2050
01:00:35,010 --> 01:00:37,740
0,180 180,540 540,1170 1500,2100 2130,2730
With one twist, the methods

2051
01:00:37,740 --> 01:00:40,560
0,360 360,480 480,1080 1080,1620 2010,2820
only the capital named {ohn's

2052
01:00:40,890 --> 01:00:43,740
0,1470 1470,1470 2310,2670 2670,2790 2790,2850
-} a methods with the

2053
01:00:43,740 --> 01:00:45,450
0,570 960,1140 1140,1320 1320,1590 1590,1710
capital a will actually be

2054
01:00:45,450 --> 01:00:47,940
0,540 630,810 810,1110 1140,1950 2040,2490
recorded and so basically go

2055
01:00:47,940 --> 01:00:49,260
0,300 300,450 450,930 930,1230 1230,1320
use as capital means to

2056
01:00:49,260 --> 01:00:52,500
0,780 780,1350 1380,2040 2040,2520 2610,3240
indicate public methods, and um

2057
01:00:52,500 --> 01:00:54,360
0,150 150,660 660,810 810,870 870,1860
a method with a small

2058
01:00:54,630 --> 01:00:56,280
0,390 390,930 1020,1230 1230,1350 1350,1650
small caps is in Praise

2059
01:00:56,280 --> 01:00:59,070
0,510 840,1200 1200,1860 1890,2310 2310,2790
magnificence, so only, basically RBC

2060
01:00:59,070 --> 01:01:02,550
0,630 690,1620 1800,2190 2190,3000 3000,3480
register exports only capitalized methods

2061
01:01:02,820 --> 01:01:03,780
0,210 210,300 300,570 570,630 630,960
tend to use a method

2062
01:01:03,780 --> 01:01:05,010
0,360 360,510 510,630 630,840 840,1230
low, use a get method.

2063
01:01:05,430 --> 01:01:06,720
0,240 240,420 420,480 480,810 810,1290
It has a capital letter

2064
01:01:07,020 --> 01:01:09,210
0,600 600,1080 1110,1470 1470,2010 2010,2190
and by calling registered that

2065
01:01:09,210 --> 01:01:10,410
0,270 270,360 360,540 540,1020 1020,1200
method is not callable by

2066
01:01:10,410 --> 01:01:11,490
0,480 480,570 570,630 630,990 990,1080
applying to the connection, the

2067
01:01:11,490 --> 01:01:12,480
0,450
server.

2068
01:01:14,040 --> 01:01:17,010
0,210 210,630 630,1440 1470,2310 2310,2970
So disorder internally, basically it

2069
01:01:17,010 --> 01:01:19,260
0,270 270,360 360,720 720,1410 1650,2250
creates a tcp connection, um

2070
01:01:19,260 --> 01:01:21,000
0,390 390,750 750,930 930,1320 1320,1740
and wage on tcp connection

2071
01:01:21,000 --> 01:01:22,770
0,570 600,870 870,1050 1050,1560 1560,1770
to get a request for

2072
01:01:22,770 --> 01:01:24,450
0,60 60,750 780,1170 1170,1500 1500,1680
a new connection request for

2073
01:01:24,450 --> 01:01:26,070
0,300 300,720 720,840 840,960 960,1620
tcp connection, and then calls

2074
01:01:26,160 --> 01:01:28,590
0,390 390,1290 1290,1620 1620,2190 2220,2430
our PC serve com to

2075
01:01:28,590 --> 01:01:30,380
0,330 330,480 480,810 810,1290
serve that tcp connection.

2076
01:01:30,380 --> 01:01:32,090
0,120 120,810 960,1260 1260,1590 1590,1710
And basically every message that

2077
01:01:32,090 --> 01:01:33,440
0,240 240,570 600,960 960,1200 1230,1350
comes in over to you

2078
01:01:33,440 --> 01:01:35,570
0,120 120,780 960,1170 1170,1350 1350,2130
know connection, it will automatically

2079
01:01:35,570 --> 01:01:36,890
0,270 270,360 360,600 600,1110 1170,1320
find the right method, you

2080
01:01:36,890 --> 01:01:38,210
0,240 240,480 480,1080 1080,1260 1260,1320
know is associated with the

2081
01:01:38,210 --> 01:01:40,370
0,570 750,1320 1320,1650 1650,1830 1830,2160
message and call that method

2082
01:01:40,370 --> 01:01:42,380
0,330 360,720 720,870 870,1410 1410,2010
with a UN marshalled arguments

2083
01:01:42,380 --> 01:01:44,100
0,390 390,720 720,1230
and Marshal reply.

2084
01:01:45,380 --> 01:01:46,160
0,150 150,210 210,600 600,720 720,780
So, for example if the

2085
01:01:46,160 --> 01:01:47,450
0,390 390,660 660,1080 1080,1170 1170,1290
decline calls gets you know

2086
01:01:47,450 --> 01:01:49,040
0,300 300,510 510,690 690,990 990,1590
connects to its double calm

2087
01:01:49,370 --> 01:01:51,290
0,420 420,540 540,990 990,1200 1200,1920
makes this connection into existence

2088
01:01:51,650 --> 01:01:52,430
0,150 150,300 300,390 390,450 450,780
and then if the client

2089
01:01:52,430 --> 01:01:54,920
0,390 390,1050 1080,1440 1440,1860 2040,2490
calls call with get then

2090
01:01:54,920 --> 01:01:56,000
0,120 120,450 450,840 840,960 960,1080
the skip function will be

2091
01:01:56,000 --> 01:01:56,820
0,300
run.

2092
01:01:57,280 --> 01:01:58,030
0,330 330,420 420,510 510,600 600,750
And as you can see

2093
01:01:58,030 --> 01:01:59,200
0,90 90,270 270,720 720,1020 1020,1170
we get function first thing

2094
01:01:59,200 --> 01:02:00,070
0,90 90,330 330,420 420,660 660,870
it does it actually takes

2095
01:02:00,070 --> 01:02:02,680
0,90 90,600 600,1020 1320,1800 1830,2610
a walkout because a multiple

2096
01:02:03,250 --> 01:02:04,360
0,390 390,570 570,660 660,1020 1020,1110
clients could be calling the

2097
01:02:04,360 --> 01:02:05,410
0,510 510,630 630,750 750,840 840,1050
server and so there will

2098
01:02:05,410 --> 01:02:06,940
0,150 150,510 510,750 750,1140 1140,1530
be multiple gold routines running

2099
01:02:06,940 --> 01:02:08,500
0,120 120,180 180,450 450,1020 1050,1560
at the same time, perhaps

2100
01:02:08,500 --> 01:02:10,240
0,390 390,750 750,930 930,1260
invoking debt and put.

2101
01:02:10,580 --> 01:02:11,900
0,240 240,360 360,480 480,690 690,1320
And so they were manipulating

2102
01:02:11,900 --> 01:02:14,240
0,570 660,1110 1140,1650 1680,2250 2250,2340
the the map currently and

2103
01:02:14,240 --> 01:02:14,810
0,120 120,210 210,330 330,390 390,570
so we need to make

2104
01:02:14,810 --> 01:02:16,040
0,210 210,510 510,630 630,750 750,1230
sure that you know those

2105
01:02:16,070 --> 01:02:17,870
0,1170 1170,1290 1290,1500 1500,1680 1680,1800
zat is done in an

2106
01:02:17,870 --> 01:02:19,240
0,390 390,840
atomic way.

2107
01:02:19,240 --> 01:02:20,710
0,360 360,660 660,840 840,1020 1020,1470
Consider therefore we use locks.

2108
01:02:22,210 --> 01:02:23,560
0,150 150,210 210,390 390,960 1080,1350
So the get function looks

2109
01:02:23,560 --> 01:02:25,540
0,120 120,810 1170,1620 1620,1890 1890,1980
at the key into the

2110
01:02:25,540 --> 01:02:27,220
0,330 330,630 630,1200 1200,1620 1620,1680
map looks akil tricky in

2111
01:02:27,220 --> 01:02:28,510
0,60 60,480 480,870 870,1230 1230,1290
the mapper returns basically the

2112
01:02:28,510 --> 01:02:29,580
0,570
value.

2113
01:02:29,580 --> 01:02:31,290
0,390 390,630 630,840 840,1320 1320,1710
Um, if there's no entry

2114
01:02:31,290 --> 01:02:32,190
0,60 60,120 120,540 540,660 660,900
in the map, it will

2115
01:02:32,190 --> 01:02:34,530
0,720 750,1230 1230,1830 1830,2280 2280,2340
return error Nokia, otherwise it

2116
01:02:34,530 --> 01:02:37,020
0,120 120,720 750,1020 1020,1740 1740,2490
will return the appropriate value

2117
01:02:37,170 --> 01:02:38,300
0,150 150,300 300,540
and that's it.

2118
01:02:38,490 --> 01:02:39,780
0,420 420,810 810,900 900,960 960,1290
And so on the service

2119
01:02:39,780 --> 01:02:41,100
0,360 360,570 570,720 720,930 930,1320
side, when these get function

2120
01:02:41,100 --> 01:02:43,230
0,630 630,810 810,990 990,1740 1740,2130
returns, it will Marshal its

2121
01:02:43,230 --> 01:02:45,300
0,780 1110,1440 1440,1470 1470,1860 1860,2070
response sends a response back

2122
01:02:45,300 --> 01:02:47,340
0,90 90,630 630,1110 1110,1560 1590,2040
to decline decline will sign

2123
01:02:47,340 --> 01:02:48,840
0,180 180,510 510,930 930,1260 1260,1500
it will Marshal it actually

2124
01:02:48,840 --> 01:02:50,300
0,330 330,450 450,510 510,990
return to the caller.

2125
01:02:52,880 --> 01:02:54,530
0,300 300,450 450,900 930,1200 1200,1650
Okay so that makes sense,

2126
01:02:54,560 --> 01:02:56,060
0,180 180,330 330,510 510,630 630,1500
so that's sort of a

2127
01:02:56,060 --> 01:02:59,030
0,690 690,810 810,1440 1770,2580 2730,2970
do a simple a key

2128
01:02:59,030 --> 01:03:00,900
0,300 300,750 750,900 900,1320
value server in action.

2129
01:03:08,690 --> 01:03:09,440
0,240 240,330 330,480 480,540 540,750
Okay I want to make

2130
01:03:09,440 --> 01:03:10,850
0,360 360,570 570,1020 1020,1350 1350,1410
one more point which is

2131
01:03:10,850 --> 01:03:13,460
0,60 60,450 450,870 990,1740 2100,2610
an important point and um

2132
01:03:13,520 --> 01:03:14,800
0,150 150,300 300,750
in the end.

2133
01:03:15,150 --> 01:03:16,860
0,870 870,1200 1200,1260 1260,1380 1380,1710
What's important to think about

2134
01:03:16,860 --> 01:03:18,870
0,180 180,570 570,1080 1080,1620 1620,2010
is what RBC semantics are

2135
01:03:19,080 --> 01:03:20,540
0,270 270,900
their failures.

2136
01:03:30,160 --> 01:03:31,420
0,600
I'm.

2137
01:03:31,600 --> 01:03:32,710
0,150 150,270 270,330 330,780 780,1110
So there are different types

2138
01:03:32,710 --> 01:03:34,340
0,90 90,510 510,1050
of semantics possible.

2139
01:03:34,460 --> 01:03:35,600
0,330 330,450 450,780 780,870 870,1140
Something is called at least

2140
01:03:35,600 --> 01:03:36,760
0,540
once.

2141
01:03:37,800 --> 01:03:38,850
0,270 270,540 540,690 690,750 750,1050
This all has to do

2142
01:03:38,850 --> 01:03:40,230
0,300 300,660 660,810 810,900 900,1380
with what does the client

2143
01:03:40,230 --> 01:03:41,610
0,210 210,420 420,510 510,870 870,1380
do if the server fails,

2144
01:03:42,000 --> 01:03:44,070
0,750 900,1110 1110,1230 1230,1560 1560,2070
so let's say decline sensitive

2145
01:03:44,070 --> 01:03:46,600
0,630 960,1080 1080,1380 1380,1890
request, the server crashes.

2146
01:03:46,940 --> 01:03:49,640
0,720 990,1680 1680,1740 2040,2280 2280,2700
And, um, of course now

2147
01:03:49,640 --> 01:03:50,630
0,180 180,300 300,600 600,870 870,990
at some point climb will

2148
01:03:50,630 --> 01:03:51,980
0,240 240,600 630,810 810,1020 1020,1350
time out and just doesn't

2149
01:03:51,980 --> 01:03:53,390
0,300 300,600 600,690 690,1110 1110,1410
know whether the operation actually

2150
01:03:53,390 --> 01:03:55,000
0,360 360,450 450,690 690,990
happened or not happened.

2151
01:03:55,420 --> 01:03:57,100
0,300 300,510 510,750 750,1230 1230,1680
And at least once archie

2152
01:03:57,100 --> 01:03:59,230
0,660 660,1440 1440,1650 1650,1740 1740,2130
semantics means that the client

2153
01:03:59,230 --> 01:04:00,880
0,240 240,750 750,1320 1350,1530 1530,1650
will automatically retry and we'll

2154
01:04:00,880 --> 01:04:02,590
0,210 210,810 810,960 960,1500 1500,1710
keep going, so it has

2155
01:04:02,590 --> 01:04:04,320
0,480 480,540 540,780 780,1260
executed at least once.

2156
01:04:06,020 --> 01:04:07,400
0,420 450,900 900,960 960,1260 1260,1380
A downside, of course at

2157
01:04:07,400 --> 01:04:08,300
0,180 180,420 420,570 570,780 780,900
least once is that you

2158
01:04:08,300 --> 01:04:09,470
0,150 150,270 270,510 510,960 960,1170
know the same operation might

2159
01:04:09,470 --> 01:04:11,090
0,90 90,480 480,930 930,1440 1470,1620
be executed multiple times, so

2160
01:04:11,090 --> 01:04:11,900
0,450 450,510 510,600 600,750 750,810
example if you do a

2161
01:04:11,900 --> 01:04:12,980
0,390 450,570 570,750 750,900 900,1080
boot, you know the boot

2162
01:04:12,980 --> 01:04:14,480
0,180 180,330 330,660 660,1170 1170,1500
might be actually executed multiple

2163
01:04:14,480 --> 01:04:15,440
0,300 300,390 390,570 570,780 780,960
times and at least one

2164
01:04:15,440 --> 01:04:16,700
0,390 390,810
archi system.

2165
01:04:17,580 --> 01:04:18,690
0,120 120,390 390,570 570,1020 1020,1110
So that's not appropriate for

2166
01:04:18,690 --> 01:04:21,630
0,240 240,1110 1440,1590 1590,2190 2220,2940
many applications, so another type

2167
01:04:21,630 --> 01:04:22,950
0,60 60,540 540,750 750,1230 1230,1320
of semantics, that's common in

2168
01:04:22,950 --> 01:04:24,090
0,150 150,420 420,870 870,1020 1020,1140
our PC systems is at

2169
01:04:24,090 --> 01:04:25,440
0,300 300,750
most once.

2170
01:04:27,830 --> 01:04:30,440
0,630 660,1260 1290,1830 1830,2160 2160,2610
So the corresponding server request,

2171
01:04:30,440 --> 01:04:33,320
0,300 300,840 840,1350 1620,2340
actually executed either, um.

2172
01:04:33,590 --> 01:04:35,480
0,390 390,960 1050,1230 1230,1680 1680,1890
Zero times or once but

2173
01:04:35,480 --> 01:04:37,060
0,180 180,450 450,630 630,1080
no more than once.

2174
01:04:37,210 --> 01:04:38,170
0,390 390,450 450,720 720,870 870,960
And the way you know

2175
01:04:38,170 --> 01:04:39,610
0,210 210,300 300,660 660,1260 1260,1440
that is typically implemented by

2176
01:04:39,610 --> 01:04:41,680
0,420 420,990 1110,1410 1410,1770 1770,2070
filtering duplicates, you actually doing

2177
01:04:41,680 --> 01:04:43,320
0,360 360,720 720,1020
that in a.

2178
01:04:44,200 --> 01:04:45,780
0,270 270,540 540,1080
In later laps.

2179
01:04:46,280 --> 01:04:47,210
0,450 450,630 630,780 780,870 870,930
Good good good, be the

2180
01:04:47,210 --> 01:04:48,500
0,270 270,390 390,660 660,930 930,1290
case that actually both requests

2181
01:04:48,500 --> 01:04:50,300
0,210 210,360 360,810 1170,1710 1710,1800
actually come through, maybe the

2182
01:04:50,300 --> 01:04:52,610
0,450 450,840 1110,1680 1680,2250 2250,2310
networks like temporary petitioned, the

2183
01:04:52,610 --> 01:04:53,810
0,270 270,450 450,600 600,810 810,1200
server actually gets both request

2184
01:04:53,810 --> 01:04:54,740
0,270 270,390 390,690 690,840 840,930
and the server has to

2185
01:04:54,740 --> 01:04:57,590
0,390 390,690 810,1110 1140,2340 2490,2850
arrange that it detects a

2186
01:04:57,590 --> 01:04:59,090
0,390 390,780 780,900 900,1170 1170,1500
recent request and doesn't execute

2187
01:04:59,090 --> 01:05:00,100
0,90 90,600
it twice.

2188
01:05:01,390 --> 01:05:03,660
0,240 240,300 300,690 780,1680
Now, of course ideally.

2189
01:05:03,660 --> 01:05:04,830
0,120 120,300 300,540 540,690 690,1170
You might actually want exactly

2190
01:05:04,830 --> 01:05:06,000
0,450
once.

2191
01:05:06,060 --> 01:05:07,170
0,330 330,600 600,870 870,1020 1020,1110
Because that's actually what the

2192
01:05:07,170 --> 01:05:09,000
0,480 480,930 930,1110 1110,1380 1440,1830
normal procedure would be like

2193
01:05:09,000 --> 01:05:10,140
0,120 120,240 240,540 540,630 630,1140
if you call a procedure

2194
01:05:10,140 --> 01:05:11,520
0,150 150,450 450,660 660,1050 1050,1380
in a your server in

2195
01:05:11,520 --> 01:05:13,320
0,60 60,360 360,750 750,1170 1170,1800
a normal sequential program execution

2196
01:05:13,350 --> 01:05:15,060
0,540 540,810 810,960 960,1230 1230,1710
exactly once it's never possible

2197
01:05:15,060 --> 01:05:15,900
0,90 90,270 270,390 390,630 630,840
to be at least once

2198
01:05:15,900 --> 01:05:17,240
0,120 120,210 210,450 450,900
or at most once.

2199
01:05:17,330 --> 01:05:18,110
0,300 300,510 510,600 600,660 660,780
This turns out to be

2200
01:05:18,110 --> 01:05:19,400
0,180 180,420 420,660 660,720 720,1290
actually very hard to arrange.

2201
01:05:20,220 --> 01:05:21,750
0,330 330,540 540,1110 1110,1170 1170,1530
Um, this requires you know

2202
01:05:21,750 --> 01:05:23,160
0,540 570,810 810,1140 1140,1320 1320,1410
a you basically have to

2203
01:05:23,160 --> 01:05:25,350
0,390 390,660 660,780 780,1260 1590,2190
maintain state and disk a

2204
01:05:25,350 --> 01:05:27,540
0,330 600,900 900,1110 1110,1410 1410,2190
and tend to be expensive

2205
01:05:27,540 --> 01:05:28,860
0,240 240,300 300,600 600,870 870,1320
and in fact in practice

2206
01:05:28,860 --> 01:05:30,180
0,240 240,480 480,630 630,900 900,1320
very few are PC systems

2207
01:05:30,180 --> 01:05:32,190
0,240 240,630 630,1050 1320,1860 1860,2010
are exactly once, although in

2208
01:05:32,190 --> 01:05:32,910
0,90 90,420 420,540 540,660 660,720
the lab you're going to

2209
01:05:32,910 --> 01:05:34,080
0,240 240,510 510,810 810,930 930,1170
build actually one in lap

2210
01:05:34,080 --> 01:05:35,370
0,450 660,840 840,960 960,1020 1020,1290
three you're going to actually

2211
01:05:35,370 --> 01:05:36,630
0,240 240,300 300,690 690,1080 1080,1260
build an RBC system that's

2212
01:05:36,630 --> 01:05:38,340
0,480 480,930 930,1380
basically exactly once.

2213
01:05:38,890 --> 01:05:40,100
0,720
Okay.

2214
01:05:40,160 --> 01:05:43,340
0,480 570,780 780,1560 1740,2610 2610,3180
Um, in practice goes our

2215
01:05:43,340 --> 01:05:45,710
0,900 900,1590 1590,1680 1680,1920 1920,2370
system as at most once,

2216
01:05:45,740 --> 01:05:46,340
0,150 150,240 240,360 360,510 510,600
so if you do a

2217
01:05:46,340 --> 01:05:47,540
0,600 750,930 930,1020 1020,1110 1110,1200
call and you do the

2218
01:05:47,540 --> 01:05:49,040
0,270 270,570 570,630 630,1080 1080,1500
call across a tcp channel,

2219
01:05:49,040 --> 01:05:50,210
0,90 90,540 540,840 840,990 990,1170
the tcp channel will make

2220
01:05:50,210 --> 01:05:50,960
0,240 240,390 390,510 510,600 600,750
sure that there are no

2221
01:05:50,960 --> 01:05:53,660
0,660 1050,1590 1590,1860 1860,2130 2130,2700
duplicates, um, and so and

2222
01:05:53,660 --> 01:05:55,250
0,420 420,750 750,900 900,1170 1170,1590
um, and our PC system,

2223
01:05:55,250 --> 01:05:56,900
0,450 450,660 660,840 840,1200 1200,1650
a will either execute once

2224
01:05:57,170 --> 01:05:58,640
0,510 510,750 750,840 840,1110 1140,1470
or none at all, and

2225
01:05:58,640 --> 01:05:59,870
0,180 180,270 270,330 330,690 690,1230
then in the case and

2226
01:05:59,870 --> 01:06:00,980
0,270 270,360 360,720
return an error.

2227
01:06:01,580 --> 01:06:02,660
0,450 510,660 660,810 810,870 870,1080
Um, and then of course

2228
01:06:02,660 --> 01:06:04,130
0,60 60,450 450,600 600,1230 1260,1470
the application may retry, but

2229
01:06:04,130 --> 01:06:05,690
0,150 150,270 270,360 360,810 810,1560
now it's the applications responsibility

2230
01:06:05,690 --> 01:06:07,160
0,450 480,990 990,1110 1110,1170 1170,1470
to deal with the problems

2231
01:06:07,160 --> 01:06:08,810
0,90 90,750 750,870 870,1110 1110,1650
of duplication and failed messages.

2232
01:06:10,700 --> 01:06:11,990
0,240 240,360 360,810 810,990 990,1290
Okay so here's the sort

2233
01:06:11,990 --> 01:06:13,760
0,180 270,570 570,930 930,1290 1650,1770
of key point rick the

2234
01:06:13,760 --> 01:06:15,890
0,270 270,360 360,540 540,1260 1440,2130
fact that their failure basically

2235
01:06:15,890 --> 01:06:17,880
0,360 360,540 540,780 780,1500
makes your heart disease.

2236
01:06:18,860 --> 01:06:20,720
0,420 420,960 960,1050 1050,1440 1440,1860
Not identical to procedure calls

2237
01:06:21,200 --> 01:06:22,190
0,150 150,300 300,420 420,630 630,990
so you know the goal

2238
01:06:22,190 --> 01:06:22,940
0,90 90,210 210,420 420,570 570,750
is to make them look

2239
01:06:22,940 --> 01:06:24,560
0,120 120,480 480,600 600,1230 1260,1620
as similar as possible actually

2240
01:06:24,560 --> 01:06:26,510
0,300 300,810 840,1290 1290,1770 1770,1950
not identical and really the

2241
01:06:26,510 --> 01:06:28,310
0,180 180,330 330,960 960,1110 1110,1800
thing that exposes the differences

2242
01:06:28,400 --> 01:06:31,220
0,360 360,1410 1470,2130 2460,2730 2730,2820
is a failure of the

2243
01:06:31,220 --> 01:06:32,480
0,300 300,690
super crash.

2244
01:06:35,550 --> 01:06:37,590
0,600 780,1140 1410,1770 1770,1920 1920,2040
Any quick questions about this

2245
01:06:37,590 --> 01:06:39,270
0,240 240,690 690,1050 1050,1230 1230,1680
quick intro for our PC.

2246
01:06:47,190 --> 01:06:48,570
0,120 120,540 540,840 840,1140 1140,1380
So if not, then I

2247
01:06:48,570 --> 01:06:49,320
0,120 120,180 180,420 420,480 480,750
want to stop the lecture

2248
01:06:49,320 --> 01:06:50,310
0,420 420,540 540,660 660,720 720,990
here, so there are people

2249
01:06:50,310 --> 01:06:51,180
0,210 210,390 390,480 480,750 750,870
that need to go or

2250
01:06:51,180 --> 01:06:51,960
0,270 270,510 510,570 570,690 690,780
students need to go to

2251
01:06:51,960 --> 01:06:52,890
0,120 120,390 390,720 720,810 810,930
the next class, we can

2252
01:06:52,890 --> 01:06:53,760
0,120 120,180 180,240 240,450 450,870
go to the next class,

2253
01:06:53,760 --> 01:06:54,960
0,150 150,330 330,600 600,960 960,1200
I'll be hanging around so

2254
01:06:54,960 --> 01:06:56,190
0,90 90,300 300,480 480,720 720,1230
if there's any more questions

2255
01:06:56,190 --> 01:06:57,450
0,120 120,300 300,660 660,1020 1020,1260
I'll be happy to um.

2256
01:06:57,940 --> 01:06:59,000
0,480
AH.

2257
01:06:59,060 --> 01:07:00,560
0,150 150,390 390,660 810,1260 1260,1500
You entered up and stick

2258
01:07:00,560 --> 01:07:01,460
0,240 240,330 330,360 360,540 540,900
around for a little while.

2259
01:07:03,230 --> 01:07:04,550
0,60 60,150 150,720 720,1080 1080,1320
In the meantime, enjoy lab

2260
01:07:04,550 --> 01:07:05,600
0,390 420,570 570,690 690,900 900,1050
one and good luck with

2261
01:07:05,600 --> 01:07:06,360
0,210
it.
