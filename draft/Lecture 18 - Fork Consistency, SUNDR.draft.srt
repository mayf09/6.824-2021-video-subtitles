1
00:00:01,290 --> 00:00:03,860
0,540 540,1140 1140,2220
Okay, good afternoon,

2
00:00:04,750 --> 00:00:06,000
0,210 210,480 480,630 630,930
can everybody hear me?|

3
00:00:08,160 --> 00:00:09,080
0,660
Yep.|

4
00:00:09,130 --> 00:00:10,750
0,480 480,690 690,960 1230,1530 1530,1620
Okay, thank you,| yes I

5
00:00:10,750 --> 00:00:12,070
0,180 180,480 480,630 630,900 900,1320
will post the lecture notes

6
00:00:12,130 --> 00:00:13,390
0,510 510,630 630,720 720,810 810,1260
at the end of lecture,|

7
00:00:14,320 --> 00:00:16,500
0,600 690,1320 1320,1830
{} response to

8
00:00:17,730 --> 00:00:20,520
0,510 600,840 840,1320 1320,1830 2070,2790
{the,chat}.| {} Okay, so, {}

9
00:00:21,280 --> 00:00:22,780
0,240 240,630 630,1050 1050,1380 1380,1500
{} today basically I want

10
00:00:22,780 --> 00:00:24,430
0,60 60,300 300,540 570,1020 1020,1650
to start a new topic

11
00:00:24,460 --> 00:00:26,920
0,510 510,1410 1740,2160 2160,2340 2340,2460
in {} in {6.824 -

12
00:00:26,920 --> 00:00:28,510
0,480 660,840 840,1020 1020,1140 1140,1590
-},| and sort of {}

13
00:00:28,780 --> 00:00:30,610
0,420 420,720 720,870 870,1440 1470,1830
last topic that will be

14
00:00:30,640 --> 00:00:32,530
0,630 870,1110 1110,1440 1440,1530 1530,1890
discussing,| the topic is really

15
00:00:32,530 --> 00:00:34,540
0,630 630,1260
decentralized systems.|

16
00:00:40,830 --> 00:00:41,480
0,360

17
00:00:42,110 --> 00:00:42,900
0,330

18
00:00:45,490 --> 00:00:47,170
0,450 450,690 690,750 750,1470 1470,1680
And these are typically {}

19
00:00:47,170 --> 00:00:48,970
0,510 510,960 960,1290 1290,1710 1710,1800
{decentralized -} really refers to

20
00:00:48,970 --> 00:00:50,080
0,90 90,390 390,570 570,780 780,1110
the fact,| that there's no

21
00:00:50,080 --> 00:00:52,510
0,840 870,1890 1950,2250 2250,2370 2370,2430
single authority that is in

22
00:00:52,510 --> 00:00:53,900
0,420 420,510 510,570 570,1080
control of the system,|

23
00:00:54,320 --> 00:00:55,580
0,540 540,750 750,840 840,930 930,1260
a lot of the systems

24
00:00:55,580 --> 00:00:56,750
0,120 120,330 330,480 480,660 660,1170
that we've seen so far,|

25
00:00:56,930 --> 00:00:59,000
0,930 930,1440 1440,1530 1530,1860 1860,2070
{all,the} machines and servers {sort,of}

26
00:00:59,000 --> 00:01:01,970
0,870 1110,1650 1650,1950 1950,2220 2610,2970
cooperate| and on the under

27
00:01:01,970 --> 00:01:03,380
0,390 390,450 450,540 540,870 870,1410
control of a single institution

28
00:01:03,380 --> 00:01:05,320
0,150 150,270 270,810 810,1650
or any single authority.|

29
00:01:05,850 --> 00:01:08,040
0,510 810,1110 1110,1590 1590,1680 1680,2190
{} And systems are a

30
00:01:08,040 --> 00:01:09,030
0,150 150,240 240,390 390,600 600,990
lot of you ask questions,|

31
00:01:09,030 --> 00:01:10,110
0,240 240,390 390,720 720,870 870,1080
about like how would it

32
00:01:10,110 --> 00:01:12,600
0,390 390,1020 1320,2070 2100,2340 2340,2490
work,| if {} there's no

33
00:01:12,600 --> 00:01:14,140
0,450 450,690 690,780 780,1320
central point of trust.|

34
00:01:14,770 --> 00:01:17,240
0,510 750,960 960,1380 1470,2160
{} And so, {}

35
00:01:17,540 --> 00:01:18,620
0,270 270,540 540,750 750,870 870,1080
from now on, the three

36
00:01:18,620 --> 00:01:19,970
0,330 330,510 510,750 750,1200 1200,1350
systems or three papers were

37
00:01:19,970 --> 00:01:20,930
0,120 120,180 180,240 240,750 750,960
going to be discussing,| all

38
00:01:20,930 --> 00:01:21,980
0,210 210,330 330,510 510,840 840,1050
sit in this form of

39
00:01:21,980 --> 00:01:24,770
0,390 390,600 600,1230 1440,2400 2460,2790
{decentralized -} systems| and {decentralized

40
00:01:24,770 --> 00:01:27,290
0,300 300,960 960,1290 1290,2310 2370,2520
-} systems are harder to

41
00:01:27,290 --> 00:01:28,730
0,570 600,1020 1020,1200 1200,1380 1380,1440
build than the sort of

42
00:01:28,730 --> 00:01:32,060
0,270 270,900 900,1500 1920,2520 2550,3330
single trust systems,| {} because

43
00:01:32,060 --> 00:01:33,020
0,120 120,210 210,510 510,840 840,960
you know {you,might} have to

44
00:01:33,020 --> 00:01:35,810
0,390 390,900 900,1350 1350,1890 1890,2790
account for byzantine failures {or,byzantine

45
00:01:35,810 --> 00:01:37,240
0,270 360,1110
-} participants.|

46
00:01:45,540 --> 00:01:47,340
0,540 630,840 840,930 930,1410 1410,1800
And these are participants that

47
00:01:47,340 --> 00:01:48,420
0,210 210,390 390,750 750,960 960,1080
you know sometimes follow the

48
00:01:48,420 --> 00:01:49,500
0,390 390,480 480,810 810,900 900,1080
protocol| and sometimes they don't

49
00:01:49,500 --> 00:01:51,600
0,240 240,330 330,870 1470,1710 1710,2100
follow the protocol,| so again

50
00:01:51,600 --> 00:01:52,770
0,90 90,510 510,660 660,930 930,1170
they really they think about

51
00:01:52,770 --> 00:01:54,540
0,120 120,240 240,390 390,870 870,1770
it,| they are basically adversaries,|

52
00:01:54,780 --> 00:01:56,490
0,300 300,780 780,1080 1080,1350 1350,1710
{} and they may try

53
00:01:56,490 --> 00:01:59,250
0,480 480,1590 1650,2010 2010,2280 2280,2760
to abuse {} or trick

54
00:01:59,610 --> 00:02:02,820
0,150 150,1260 1260,2130 2130,2250 2250,3210
{} other participants in systems,|

55
00:02:02,820 --> 00:02:03,420
0,90 90,210 210,300 300,480 480,600
you know for their own

56
00:02:03,420 --> 00:02:04,740
0,420 420,750 750,930 930,1170 1170,1320
goods, but not maybe for

57
00:02:04,740 --> 00:02:05,320
0,480
others.|

58
00:02:05,800 --> 00:02:09,550
0,720 1080,1980 2340,3060 3330,3630 3630,3750
{} And {} so that

59
00:02:09,550 --> 00:02:11,170
0,240 240,600 600,930 930,1380 1380,1620
makes actually system design,| which

60
00:02:11,170 --> 00:02:12,970
0,420 420,720 720,1140 1140,1410 1410,1800
distributed system designs much more

61
00:02:12,970 --> 00:02:14,860
0,660 690,1050 1050,1230 1230,1470 1470,1890
challenging| and much more difficult

62
00:02:14,860 --> 00:02:16,240
0,60 60,330 330,750 1170,1290 1290,1380
to reason about,| [] feel

63
00:02:16,240 --> 00:02:17,080
0,120 120,210 210,300 300,750 750,840
like in the last you

64
00:02:17,080 --> 00:02:21,040
0,480 1200,1650 1650,1950 1950,2430 2640,3960
know 18 whatever lectures,| mostly

65
00:02:21,040 --> 00:02:22,510
0,390 390,570 570,1050 1050,1260 1260,1470
when we talk about, when

66
00:02:22,510 --> 00:02:23,770
0,90 90,420 420,930 930,1050 1050,1260
we design protocol or {we,thought}

67
00:02:23,770 --> 00:02:25,240
0,180 180,750 960,1170 1170,1320 1320,1470
about raft,| and we just

68
00:02:25,240 --> 00:02:28,330
0,510 510,660 660,930 930,1620 1650,3090
assume that actually every participant

69
00:02:28,330 --> 00:02:29,500
0,150 150,210 210,690 690,1080 1080,1170
in the protocol follows the

70
00:02:29,500 --> 00:02:33,160
0,450 900,1440 1440,1680 1680,3120 3120,3660
rules| and in {the,byzantine,with,byzantine} participants,

71
00:02:33,160 --> 00:02:33,910
0,180 180,270 270,450 450,510 510,750
that is not the case

72
00:02:33,910 --> 00:02:36,880
0,570 1530,2190 2190,2400 2520,2880 2880,2970
anymore,| {you,know,the,participants} can cook up

73
00:02:36,880 --> 00:02:38,500
0,150 150,960 960,1080 1080,1410 1410,1620
new messages,| you know send

74
00:02:38,500 --> 00:02:40,000
0,360 360,510 510,600 600,1080 1080,1500
messages out of order,| trick

75
00:02:40,000 --> 00:02:43,750
0,1290 1290,2010 2310,2640 2640,3090 3180,3750
other participants| and so the

76
00:02:43,780 --> 00:02:45,400
0,720 750,1170 1170,1320 1320,1500 1500,1620
we thinking about those kind

77
00:02:45,400 --> 00:02:46,390
0,60 60,600 600,690 690,870 870,990
of protocols is much more

78
00:02:46,390 --> 00:02:47,680
0,540 600,990 990,1110 1110,1230 1230,1290
difficult,| because we have to

79
00:02:47,680 --> 00:02:48,740
0,630 630,960
consider what,

80
00:02:49,050 --> 00:02:51,150
0,450 450,780 780,1380 1380,1560 1560,2100
what the adversary could do,|

81
00:02:51,210 --> 00:02:52,680
0,180 180,540 540,1140 1140,1410 1410,1470
{} to {} sort of

82
00:02:52,680 --> 00:02:53,700
0,210 210,300 300,750
make our life

83
00:02:54,010 --> 00:02:56,140
0,180 180,420 420,780 780,1680 1710,2130
to break basically the properties

84
00:02:56,140 --> 00:02:56,890
0,90 90,180 180,570 570,660 660,750
of the protocols, that we're

85
00:02:56,890 --> 00:02:58,690
0,270 270,510 1110,1440 1440,1590 1590,1800
shooting for,| so this tends

86
00:02:58,690 --> 00:02:59,950
0,60 60,660 660,870 870,930 930,1260
to be made the problem

87
00:02:59,950 --> 00:03:02,600
0,180 180,660
much harder.|

88
00:03:03,790 --> 00:03:05,680
0,660 900,1410 1410,1500 1500,1590 1590,1890
And really you know where

89
00:03:05,680 --> 00:03:07,690
0,1320 1320,1470 1470,1620 1620,1680 1680,2010
what this sort of topic

90
00:03:07,690 --> 00:03:08,920
0,450 450,600 600,870 870,960 960,1230
is,| so sits on the

91
00:03:08,920 --> 00:03:11,290
0,600 600,690 690,1140 1140,1890 2130,2370
intersection of distributed systems and

92
00:03:11,290 --> 00:03:12,400
0,570
security.|

93
00:03:16,120 --> 00:03:17,290
0,150 150,270 270,420 420,990 990,1170
And as we'll see in

94
00:03:17,290 --> 00:03:20,740
0,1770 1770,1950 1950,2100 2100,2550 2910,3450
the next {this,the,next,three} papers, {}|

95
00:03:21,160 --> 00:03:23,710
0,300 300,1410 1440,1740 1740,2160 2160,2550
{you,know} cryptography or security ideas,|

96
00:03:23,710 --> 00:03:25,180
0,180 180,600 600,690 690,1260 1260,1470
like signing and hashing| and

97
00:03:25,450 --> 00:03:26,350
0,390 390,510 510,570 570,750 750,900
are going to play a

98
00:03:26,350 --> 00:03:28,330
0,420 420,810 810,990 990,1470 1470,1980
crucial role to actually {}

99
00:03:28,330 --> 00:03:29,820
0,420 420,720 720,1350
make [forward] progress.|

100
00:03:31,140 --> 00:03:32,370
0,150 150,570 630,870 870,960 960,1230
In fact, {you,know} the paper

101
00:03:32,370 --> 00:03:33,390
0,330 330,540 540,690 690,900 900,1020
actually that we're reading for

102
00:03:33,390 --> 00:03:35,070
0,360 360,480 480,930 930,1110 1110,1680
today is also| is a

103
00:03:35,100 --> 00:03:36,330
0,390 390,540 540,690 690,1020 1020,1230
paper that we use in

104
00:03:36,330 --> 00:03:37,500
0,210 210,420 420,540 540,810 810,1170
the {6.858 - - -},|

105
00:03:38,250 --> 00:03:39,660
0,390 390,720 720,930 930,1170 1170,1410
taking maybe {6.858 - -}

106
00:03:39,660 --> 00:03:42,990
0,510 540,1230 1230,1740 1920,2370 2370,3330
last {} Spring,| {} we

107
00:03:43,020 --> 00:03:44,040
0,360 360,480 480,600 600,840 840,1020
talked about this paper too,|

108
00:03:44,040 --> 00:03:45,570
0,540 570,960 960,1110 1110,1410 1410,1530
although then for mostly from

109
00:03:45,570 --> 00:03:47,400
0,90 90,480 480,600 600,1230 1320,1830
the perspective of security| and

110
00:03:47,430 --> 00:03:48,390
0,390 390,510 510,630 630,690 690,960
today I'm going to mostly

111
00:03:48,390 --> 00:03:50,490
0,750 750,990 990,1110 1110,1620 1620,2100
focuses on the perspective of

112
00:03:50,490 --> 00:03:52,560
0,630 750,1350 1350,2010
{} distributed systems,|

113
00:03:53,100 --> 00:03:56,880
0,570 1050,1530 1530,1830 1830,2640 2670,3780
{} the SUNDR itself, a

114
00:03:56,970 --> 00:03:58,470
0,420 420,480 480,810 810,1320 1350,1500
lot of people ask,| a

115
00:03:58,470 --> 00:03:59,280
0,210 210,300 300,420 420,750 750,810
lot of you ask you

116
00:03:59,280 --> 00:04:02,520
0,330 330,750 750,990 990,1620 1800,3240
know SUNDR being used, {}|

117
00:04:02,520 --> 00:04:03,810
0,480 540,870 870,1050 1050,1200 1200,1290
and {} as far as

118
00:04:03,810 --> 00:04:04,860
0,120 120,420 420,630 630,840 840,1050
I know,| there's actually no

119
00:04:04,860 --> 00:04:07,320
0,630 840,990 990,1440 1440,1680 1680,2460
systems that actually {} implement

120
00:04:07,380 --> 00:04:09,570
0,330 330,660 840,1320 1320,1650 1680,2190
{SUNDR -} directly or based

121
00:04:09,570 --> 00:04:11,670
0,330 330,600 600,1080 1170,1620 1620,2100
directly based SUNDR,| other than

122
00:04:11,700 --> 00:04:13,770
0,330 330,690 690,1350 1380,1830 1830,2070
{} lab 4 in {6.858

123
00:04:13,770 --> 00:04:15,810
0,150 150,570 570,990 1050,1500 1650,2040
- - -},| in lab

124
00:04:15,810 --> 00:04:18,270
0,600 780,1470 1770,2220 2220,2370 2370,2460
4, {} what if you

125
00:04:18,270 --> 00:04:19,770
0,690 720,750 780,1170 1170,1410 1410,1500
do {} lab 4, the

126
00:04:19,770 --> 00:04:21,060
0,360 360,900 900,1020 1020,1140 1140,1290
default project,| { -} lab

127
00:04:21,060 --> 00:04:22,050
0,240 240,330 330,480 480,720 720,990
4 at {6.858 - -},|

128
00:04:22,170 --> 00:04:24,060
0,600 600,600 600,960 960,1320 1320,1890
then {} you actually implement

129
00:04:24,060 --> 00:04:25,540
0,240 240,780
{} SUNDR.|

130
00:04:26,000 --> 00:04:29,150
0,690 930,1530 1740,2220 2220,2880 2970,3150
Now, {} the reason, so

131
00:04:29,150 --> 00:04:30,290
0,90 90,240 240,420 420,630 630,1140
you might wonder why we

132
00:04:30,290 --> 00:04:32,090
0,540 600,990 990,1410 1410,1470 1470,1800
are studying {this,paper} at all,|

133
00:04:32,270 --> 00:04:33,200
0,180 180,300 300,510 510,630 630,930
{} the reason we're studying

134
00:04:33,200 --> 00:04:34,490
0,150 150,420 420,510 510,810 810,1290
it,| because it actually proposes

135
00:04:34,490 --> 00:04:35,600
0,60 60,270 270,330 330,600 600,1110
a number of very powerful,

136
00:04:35,600 --> 00:04:37,600
0,360 360,420 420,840 840,1440
techniques are powerful ideas.|

137
00:04:40,400 --> 00:04:41,930
0,450 450,690 690,810 810,1410 1410,1530
{} and so particularly the

138
00:04:41,930 --> 00:04:43,340
0,360 360,930
signed log,|

139
00:04:43,640 --> 00:04:45,710
0,420 420,750 750,1110 1110,1500 1500,2070
{} even though is a

140
00:04:45,710 --> 00:04:47,720
0,420 420,810 810,960 960,1470 1470,2010
strong design {} conceptual design,|

141
00:04:47,990 --> 00:04:50,690
0,540 540,810 810,1380 1380,2010 2190,2700
{} is incredibly powerful| and

142
00:04:50,690 --> 00:04:52,700
0,180 180,540 540,1110 1140,1620 1710,2010
you see back {} same

143
00:04:52,700 --> 00:04:53,840
0,330 330,690 690,780 780,1050 1050,1140
idea appear in lots of

144
00:04:53,840 --> 00:04:57,200
0,510 540,1140 1140,1770 2040,2820 2820,3360
other decentralized systems,| {you,know,ranging} from

145
00:04:57,500 --> 00:04:59,840
0,360 360,540 540,930 1680,2280 2280,2340
systems like git to you

146
00:04:59,840 --> 00:05:01,610
0,240 240,660 660,840 840,1440 1440,1770
know systems like Bitcoin| or

147
00:05:01,610 --> 00:05:02,780
0,150 150,360 360,510 510,570 570,1170
any other sort of cryptographic

148
00:05:02,780 --> 00:05:04,430
0,750 990,1110 1110,1230 1230,1320 1320,1650
ledger,| we're gonna be talking

149
00:05:04,430 --> 00:05:07,430
0,390 690,1380 1470,1800 1800,2370 2370,3000
about Monday or next Tuesday,|

150
00:05:07,610 --> 00:05:10,100
0,690 1050,1530 1530,1710 1710,2070 2070,2490
{} I know one system

151
00:05:10,100 --> 00:05:13,250
0,540 540,750 750,1380 1380,2010 2040,3150
actually is directly influenced by

152
00:05:13,250 --> 00:05:14,390
0,330 330,630 630,840 840,960 960,1140
{} SUNDR,| which is a

153
00:05:14,390 --> 00:05:16,100
0,270 270,510 510,690 690,1260
system called {keybase -},|

154
00:05:16,430 --> 00:05:17,510
0,630 630,690 690,780 780,1020 1020,1080
{} I mean {keybase -}

155
00:05:17,510 --> 00:05:20,090
0,420 420,480 690,1200 1200,1740 1770,2580
uses {SUNDR - -} techniques,|

156
00:05:20,090 --> 00:05:22,190
0,510 510,600 600,810 810,1290 1470,2100
and and many more {},|

157
00:05:22,190 --> 00:05:23,510
0,270 300,630 630,1020 1020,1170 1170,1320
{if,you're,not -} familiar with {keybase

158
00:05:23,510 --> 00:05:25,310
0,480 480,900 900,1320 1320,1470 1470,1800
-},| actually {} was originally

159
00:05:25,310 --> 00:05:28,520
0,480 480,810 810,1560 2190,2910 2940,3210
acquired by zoom,| which was

160
00:05:28,520 --> 00:05:29,820
0,210 210,420 420,810 810,1110
only all familiar with.|

161
00:05:32,180 --> 00:05:33,500
0,510 540,690 690,900 900,1110 1110,1320
Okay, so that's {sort,of} for

162
00:05:33,500 --> 00:05:35,840
0,570 660,990 990,1950 1980,2130 2130,2340
the quick intro to this

163
00:05:35,840 --> 00:05:38,330
0,1110 1200,1920 1920,1950 1950,2250 2250,2490
paper,| before I dive into

164
00:05:38,330 --> 00:05:39,590
0,300 300,390 390,450 450,900 900,1260
more of the setting,| any

165
00:05:39,590 --> 00:05:42,080
0,150 150,300 300,1110 1110,1980 2010,2490
sort of questions before {}

166
00:05:42,200 --> 00:05:43,550
0,510 510,570 570,720 720,1110 1110,1350
diving a little bit deeper

167
00:05:43,550 --> 00:05:44,320
0,60 60,120 120,510
in the paper.|

168
00:05:50,710 --> 00:05:52,660
0,690 960,1650
Okay. {}|

169
00:05:52,950 --> 00:05:53,760
0,240 240,390 390,540 540,600 600,810
So let's talk a little

170
00:05:53,760 --> 00:05:55,650
0,120 120,390 390,720 750,1350 1440,1890
bit about the setting of

171
00:05:55,650 --> 00:05:57,420
0,210 210,660 660,900 900,1200 1200,1770
this paper or the motivation

172
00:05:57,420 --> 00:05:58,880
0,90 90,270 270,1140
of this {}

173
00:05:59,430 --> 00:06:00,660
0,240 240,240 240,600 600,750 750,1230
{paper -}.| So the setting

174
00:06:00,660 --> 00:06:03,960
0,420 420,1140 2310,2640 2640,3060 3060,3300
{} in the [hour] that

175
00:06:03,960 --> 00:06:05,970
0,240 240,690 690,900 900,1470 1470,2010
the [officer] set forward is

176
00:06:05,970 --> 00:06:08,820
0,30 30,330 330,570 570,1080
a network file system,|

177
00:06:11,240 --> 00:06:13,220
0,600 630,1170 1590,1740 1740,1830 1830,1980
and, {} you can think

178
00:06:13,220 --> 00:06:14,270
0,360 360,630 630,720 720,900 900,1050
about this a little bit

179
00:06:14,270 --> 00:06:16,520
0,120 120,210 210,690 690,1860 1890,2250
in the style of earlier

180
00:06:16,520 --> 00:06:18,320
0,300 300,480 480,690 690,930 1320,1800
paper,| that we've read {}

181
00:06:18,320 --> 00:06:20,780
0,330 330,930 1110,1650 1650,2340 2340,2460
{Frangipani -},| {} where the

182
00:06:20,780 --> 00:06:22,190
0,360 360,570 570,840 870,960 960,1410
topic also was to implement

183
00:06:22,190 --> 00:06:24,170
0,360 390,1050 1050,1470 1470,1680 1680,1980
and consistent network file system.|

184
00:06:25,070 --> 00:06:26,690
0,540 780,1110 1110,1440 1440,1560 1560,1620
{} So we have a

185
00:06:26,690 --> 00:06:27,920
0,270 270,900
file server,|

186
00:06:30,770 --> 00:06:32,210
0,210 210,360 360,450 450,1230 1230,1440
{} we have clients that

187
00:06:32,210 --> 00:06:33,770
0,450 450,630 630,720 720,960 960,1560
interact with the file server,|

188
00:06:34,850 --> 00:06:35,990
0,390 390,570 570,780 780,1050 1050,1140
somebody might actually create a

189
00:06:35,990 --> 00:06:38,240
0,570 600,1290
file f,|

190
00:06:39,470 --> 00:06:42,590
0,510 510,1230 1260,1560 1560,2160 2640,3120
and maybe read f {on,another}

191
00:06:42,590 --> 00:06:43,580
0,630
client.|

192
00:06:44,420 --> 00:06:45,500
0,750

193
00:06:45,860 --> 00:06:47,540
0,480 480,600 600,720 720,1080 1080,1680
And you know the setting

194
00:06:47,540 --> 00:06:49,790
0,780 900,1770 1770,1980 1980,2130 2130,2250
{} we're in,| is that

195
00:06:49,790 --> 00:06:51,740
0,630 780,900 900,1170 1170,1770 1770,1950
basically the file server as

196
00:06:51,740 --> 00:06:54,950
0,330 330,540 540,1710 2430,2730 2730,3210
opposed to {in,the} {Frangipani -},|

197
00:06:55,100 --> 00:06:57,170
0,780 900,1410 1410,1620 1620,1920 1920,2070
{} {the,file,server} are actually can

198
00:06:57,170 --> 00:06:58,480
0,270 270,360 360,780
be {} Byzantine.|

199
00:07:02,790 --> 00:07:05,670
0,570 570,1110 1110,1770 1800,2340 2340,2880
And Byzantine {} really increasing

200
00:07:05,670 --> 00:07:07,650
0,570 570,1110 1110,1320 1320,1620 1620,1980
extremely powerful threat model| or

201
00:07:07,650 --> 00:07:09,300
0,150 150,330 330,570 570,960 960,1650
you know gives the attacker

202
00:07:09,300 --> 00:07:10,560
0,60 60,600 600,750 750,810 810,1260
an incredible amount of power.|

203
00:07:10,920 --> 00:07:12,330
0,390 390,540 540,1200 1200,1290 1290,1410
So in Byzantine you know

204
00:07:12,330 --> 00:07:14,910
0,210 210,600 600,1020 1320,2220 2250,2580
the server might {} send

205
00:07:14,910 --> 00:07:16,290
0,300 300,390 390,810 810,1230 1230,1380
different {RPCs -} back,| you

206
00:07:16,290 --> 00:07:17,340
0,240 240,330 330,480 480,690 690,1050
cook up its own {RPCs

207
00:07:17,340 --> 00:07:20,220
0,720 900,1830 2010,2670
-}, {} the

208
00:07:20,880 --> 00:07:25,470
0,600 2280,2910 2910,3030 3030,3690 3780,4590
the, takeover the machine, {}|

209
00:07:25,470 --> 00:07:27,240
0,120 120,300 300,630 630,690 690,1770
you know bribe the administrator|

210
00:07:27,240 --> 00:07:29,670
0,870 870,1080 1080,1530 1530,1710 1710,2430
and for everything is basically

211
00:07:29,670 --> 00:07:30,480
0,90 90,210 210,300 300,450 450,810
the way to think about

212
00:07:30,480 --> 00:07:32,010
0,150 150,330 630,840 840,1350 1350,1530
is that,| the adversary gets

213
00:07:32,010 --> 00:07:34,290
0,450 450,1140 1140,1290 1290,1830 1860,2280
complete control of the {file,server}.|

214
00:07:36,130 --> 00:07:38,350
0,630 930,1410 1440,1620 1620,1950 1950,2220
And so this covers {sort,of}

215
00:07:38,350 --> 00:07:40,690
0,630 630,1320 1350,1950 1980,2070 2070,2340
wide range of you know

216
00:07:40,690 --> 00:07:42,010
0,150 150,210 210,390 390,750 750,1320
sort of more common attacks|

217
00:07:42,010 --> 00:07:43,300
0,240 240,540 540,630 630,960 960,1290
or like the typical attacks

218
00:07:43,300 --> 00:07:44,410
0,180 180,360 360,720 720,960 960,1110
you might see in a

219
00:07:44,410 --> 00:07:45,970
0,210 210,600 600,810 810,1020 1020,1560
real system,| so real attacks

220
00:07:46,060 --> 00:07:47,320
0,630 630,870 870,960 960,1200 1200,1260
one bug in {software -

221
00:07:47,320 --> 00:07:47,980
0,570
-},|

222
00:07:51,920 --> 00:07:53,240
0,360 360,930 930,1020 1020,1110 1110,1320
so if you know there's

223
00:07:53,240 --> 00:07:54,680
0,60 60,270 270,420 420,930 960,1440
a bug in the software,|

224
00:07:54,680 --> 00:07:55,910
0,420 420,510 510,600 600,750 750,1230
then you know the adversary

225
00:07:55,910 --> 00:07:58,430
0,120 120,720 720,1860 1860,2040 2040,2520
can exploit,| that [] maybe

226
00:07:58,430 --> 00:08:01,310
0,300 300,930 1230,1800 1800,2490 2490,2880
to obtain {} privileges and

227
00:08:01,310 --> 00:08:03,170
0,60 60,330 330,1050 1050,1470 1470,1860
you know that Byzantine {}

228
00:08:03,170 --> 00:08:05,270
0,630 630,720 720,810 810,1320 1320,2100
model,| you know completely compasses

229
00:08:05,270 --> 00:08:08,450
0,390 810,1920 1920,2280 2280,2940 2940,3180
that organise system,| administrator might

230
00:08:08,450 --> 00:08:09,500
0,120 120,240 240,690
have a weak,

231
00:08:13,370 --> 00:08:15,500
0,360 360,630 630,1380
with weak password,|

232
00:08:16,460 --> 00:08:17,900
0,180 180,300 300,660 660,1320 1320,1440
if the attacker compromises and

233
00:08:17,900 --> 00:08:19,370
0,210 210,390 390,630 630,1020 1020,1470
then they take control over

234
00:08:19,370 --> 00:08:20,930
0,450 600,1170 1170,1260 1260,1350 1350,1560
the system,| you know that's

235
00:08:20,930 --> 00:08:22,220
0,240 240,510 510,600 600,810 810,1290
also covered by {Byzantine -}

236
00:08:22,430 --> 00:08:24,260
0,690 690,1350
physical breaking,|

237
00:08:28,150 --> 00:08:29,800
0,300 300,420 420,840 840,1470 1470,1650
maybe the attacker rangers {you,know}

238
00:08:29,800 --> 00:08:31,840
0,240 240,870 1110,1470 1470,1740 1740,2040
get access to the physical

239
00:08:31,840 --> 00:08:35,770
0,660 930,1830 1830,2610 2610,2640 2640,3930
machine,| {} and {} {you,know}

240
00:08:35,950 --> 00:08:37,270
0,210 210,540 540,960 960,1020 1020,1320
can therefore control the physical

241
00:08:37,270 --> 00:08:38,650
0,210 210,300 300,390 390,930 1020,1380
part of the machine,| again

242
00:08:38,650 --> 00:08:39,700
0,180 180,330 330,660 660,780 780,1050
it's all covered by this

243
00:08:39,700 --> 00:08:41,320
0,120 120,390 420,930 930,1140 1140,1620
you know Byzantine threat model|

244
00:08:41,710 --> 00:08:43,450
0,360 360,870 870,960 960,1170 1170,1740
or even you know, maybe

245
00:08:43,690 --> 00:08:45,550
0,120 120,300 300,960 990,1260 1260,1860
you know the the attacker

246
00:08:45,550 --> 00:08:46,420
0,750
bribes

247
00:08:49,380 --> 00:08:53,520
0,660 660,1530 1530,2310
{} an operator|

248
00:08:54,540 --> 00:08:56,700
0,630 810,1410 1410,1560 1560,1710 1710,2160
or colludes you know with

249
00:08:56,700 --> 00:08:59,970
0,1080 1410,2430 2580,3060 3060,3180 3180,3270
a malicious client,| you know

250
00:08:59,970 --> 00:09:01,170
0,240 240,330 330,780 780,1080 1080,1200
that is also covered by

251
00:09:01,170 --> 00:09:02,220
0,150 150,540 600,780 780,960 960,1050
this model,| so this is

252
00:09:02,220 --> 00:09:03,360
0,180 180,390 390,690 690,870 870,1140
a threat model,| that is

253
00:09:03,570 --> 00:09:05,460
0,270 270,720 720,1440 1470,1830 1830,1890
a very very gives a

254
00:09:05,460 --> 00:09:06,690
0,270 270,330 330,630 630,780 780,1230
lot of power to the

255
00:09:06,690 --> 00:09:07,560
0,600
adversary,|

256
00:09:08,060 --> 00:09:09,350
0,390 390,450 450,660 660,900 900,1290
{it,covers} a lot of standard

257
00:09:09,350 --> 00:09:12,260
0,570 1050,1800 1920,2310 2310,2490 2490,2910
attacks.| And and you know

258
00:09:12,260 --> 00:09:13,070
0,180 180,390 390,510 510,720 720,810
the first thing sort of

259
00:09:13,070 --> 00:09:14,960
0,870 870,930 930,1110 1110,1590 1590,1890
observed,| you know again that

260
00:09:14,960 --> 00:09:19,490
0,630 900,1560 2370,3030 3060,3870 3870,4530
{ - -} SUNDR place

261
00:09:19,640 --> 00:09:21,800
0,390 390,930 1020,1680 1770,2070 2070,2160
is that,| {} instead of

262
00:09:21,800 --> 00:09:22,610
0,390 390,510 510,600 600,750 750,810
actually you know sort of

263
00:09:22,610 --> 00:09:24,260
0,600 600,690 690,960 960,1290 1290,1650
maintaining the whole file system

264
00:09:24,260 --> 00:09:25,970
0,240 240,330 330,600 600,1140 1440,1710
on the file server, {}|

265
00:09:25,970 --> 00:09:27,140
0,330 330,570 570,900 900,1080 1080,1170
the file server is as

266
00:09:27,140 --> 00:09:29,390
0,330 330,450 450,1050 1530,1740 1740,2250
simple as possible,| {} and

267
00:09:29,390 --> 00:09:31,220
0,120 120,540 540,1290 1290,1500 1500,1830
in fact {you,know,the} file servers

268
00:09:31,220 --> 00:09:32,240
0,240 240,450 450,630 630,900 900,1020
very much like almost like

269
00:09:32,240 --> 00:09:33,770
0,450 690,960 960,1170 1170,1440 1440,1530
Pedal,| {} it's almost like

270
00:09:33,770 --> 00:09:34,910
0,90 90,420 420,930 930,1080 1080,1140
a block device with a

271
00:09:34,910 --> 00:09:36,180
0,150 150,270 270,690
little bit more.|

272
00:09:39,120 --> 00:09:40,260
0,150 150,360 360,540 540,840 840,1140
So there's a central place

273
00:09:40,260 --> 00:09:41,700
0,210 210,360 360,750 870,1350 1350,1440
where all the blocks are

274
00:09:41,700 --> 00:09:45,060
0,480 1500,2220 2220,3000 3000,3210 3210,3360
stored| {} and {} but

275
00:09:45,060 --> 00:09:46,590
0,450 450,870 870,1230 1230,1290 1290,1530
{the,clients} really implement the file

276
00:09:46,590 --> 00:09:48,360
0,450 450,870 1020,1260 1260,1500 1500,1770
system,| so it's not really,

277
00:09:48,360 --> 00:09:49,740
0,90 90,210 210,390 390,840 900,1380
you know that the client

278
00:09:49,740 --> 00:09:51,930
0,660 780,1170 1170,1350 1350,1740 1740,2190
sends, create for file actually,|

279
00:09:52,360 --> 00:09:53,650
0,210 210,450 450,900 900,1080 1080,1290
{you,know} sends blocks and reads

280
00:09:53,650 --> 00:09:54,940
0,660
blocks,

281
00:09:55,430 --> 00:09:58,940
0,750 750,840 840,1110 1110,1830 2100,3510
from the block server| and

282
00:09:59,480 --> 00:10:01,250
0,660 660,1290 1290,1410 1410,1530 1530,1770
basically constructs you know from

283
00:10:01,250 --> 00:10:02,000
0,60 60,360 360,480 480,630 630,750
the blocks with reads or

284
00:10:02,000 --> 00:10:03,590
0,330 330,780 780,1020 1020,1440 1440,1590
writes,| {you,know,its} own view of

285
00:10:03,590 --> 00:10:05,870
0,270 270,540 540,960 960,1410 1500,2280
the file system| and serve

286
00:10:05,900 --> 00:10:07,520
0,120 120,390 390,690 690,1230 1230,1620
a file system operations,| basically

287
00:10:07,520 --> 00:10:08,210
0,120 120,210 210,510 510,630 630,690
on the straight on the

288
00:10:08,210 --> 00:10:10,160
0,540 780,1080 1080,1290 1290,1680 1680,1950
client| and so here really,

289
00:10:10,160 --> 00:10:13,310
0,480 630,1470 2040,2190 2190,2310 2310,3150
we create you know f,

290
00:10:13,520 --> 00:10:16,240
0,540 540,960 990,1680
read f etc.|

291
00:10:16,430 --> 00:10:18,080
0,270 270,540 540,780 780,1200 1200,1650
So very very similar to

292
00:10:18,170 --> 00:10:20,120
0,90 90,330 330,690 1110,1860 1860,1950
the {Frangipani -},| except the

293
00:10:20,120 --> 00:10:21,770
0,180 180,510 510,810 810,1500 1500,1650
big difference of Frangipani is

294
00:10:21,770 --> 00:10:23,180
0,210 210,660 660,780 780,960 960,1410
that Pedal and all clients

295
00:10:23,180 --> 00:10:25,190
0,90 90,480 480,1020 1350,1680 1680,2010
were completely trusted.| And in

296
00:10:25,190 --> 00:10:26,600
0,180 180,660 840,1050 1050,1140 1140,1410
this setting,| {} the clients

297
00:10:26,600 --> 00:10:28,730
0,90 90,300 300,870 1080,1770 1770,2130
are not trusted| and {}

298
00:10:28,730 --> 00:10:30,650
0,180 180,390 390,1020 1020,1710 1710,1920
the file servers, {} it

299
00:10:30,650 --> 00:10:32,540
0,210 210,540 540,960 960,1530 1650,1890
can be also, {} is

300
00:10:32,540 --> 00:10:33,580
0,210 210,390 390,840
also not trusted.|

301
00:10:34,140 --> 00:10:34,980
0,540
Okay?|

302
00:10:38,510 --> 00:10:40,360
0,60 60,1560

303
00:10:41,410 --> 00:10:43,360
0,300 300,450 450,720 780,1620 1620,1950
Okay, so the paper focused

304
00:10:43,360 --> 00:10:45,490
0,90 90,150 150,1680 1740,2040 2040,2130
on a particular set of

305
00:10:45,490 --> 00:10:49,600
0,420 420,1200 1440,2190 2760,3270 3270,4110
security properties,| {} and {}

306
00:10:49,630 --> 00:10:51,420
0,600 600,960 960,1530
{focus,is} really on,

307
00:10:54,660 --> 00:10:55,890
0,210 210,330 330,630 630,780 780,1230
{} the focus is on

308
00:10:55,920 --> 00:10:58,500
0,300 300,720 720,1170 1170,1920
what's called integrity properties.|

309
00:11:00,550 --> 00:11:02,950
0,390 390,810 810,1410 1410,1500 1500,2400
And in contrast to confidentiality,|

310
00:11:03,040 --> 00:11:05,470
0,840 840,1380 1380,1890 1890,2220 2220,2430
confidentiality about protecting data from

311
00:11:05,470 --> 00:11:06,280
0,120 120,240 240,360 360,660 660,810
them,| so that nobody else

312
00:11:06,280 --> 00:11:08,020
0,120 120,330 330,570 870,1260 1260,1740
can read it,| {} integrity

313
00:11:08,020 --> 00:11:09,670
0,210 210,360 360,840 840,1080 1080,1650
is just ensuring that the

314
00:11:09,730 --> 00:11:12,130
0,390 390,1350 1350,1500 1500,2040 2040,2400
system structure is correct| and

315
00:11:12,130 --> 00:11:15,370
0,480 510,1590 1800,2250 2250,2670 2670,3240
the modifications, {} illegal modifications

316
00:11:15,370 --> 00:11:16,150
0,90 90,180 180,450 450,450 450,780
to the data are being

317
00:11:16,150 --> 00:11:17,440
0,510 600,720 720,990 990,1080 1080,1290
detected| and whether the data

318
00:11:17,440 --> 00:11:18,460
0,60 60,390 390,450 450,660 660,1020
is public or not public,|

319
00:11:18,460 --> 00:11:19,210
0,90 90,300 300,450 450,630 630,750
you know that sort of

320
00:11:19,210 --> 00:11:20,740
0,450 450,690 750,1110 1110,1380
besides the point here.|

321
00:11:21,330 --> 00:11:22,770
0,570 840,1080 1080,1230 1230,1290 1290,1440
{} To make a little

322
00:11:22,770 --> 00:11:24,270
0,120 120,330 330,900 900,1020 1020,1500
bit more concrete,| you know

323
00:11:24,270 --> 00:11:25,650
0,330 330,510 510,660 720,1200 1200,1380
there sort of, the thing

324
00:11:25,650 --> 00:11:26,940
0,300 300,630 630,690 690,750 750,1290
that happens in our minds

325
00:11:27,120 --> 00:11:27,930
0,330 330,450 450,570 570,630 630,810
is,| we have a set

326
00:11:27,930 --> 00:11:30,020
0,240 600,870 870,1020 1020,1650
of, we have developers,|

327
00:11:32,410 --> 00:11:35,740
0,1560 1590,1770 1770,2340 2880,3120 3120,3330
{you,know} {we,have} dev1, {you,know} {dev2

328
00:11:35,740 --> 00:11:38,500
0,570 990,1200 1200,1440 1440,2100 2220,2760
-},| they may share some

329
00:11:39,010 --> 00:11:41,170
0,810 840,1260 1260,1740 1740,1830 1830,2160
machine,| that contains the source

330
00:11:41,170 --> 00:11:44,350
0,330 330,1110 1110,1290 1290,1620 2850,3180
code repository of some source

331
00:11:44,350 --> 00:11:46,390
0,60 60,600 600,1410 1410,1500 1500,2040
of {} project,| the developers

332
00:11:46,390 --> 00:11:48,040
0,90 90,480 480,1080 1080,1440 1470,1650
{you,know} are collaborating on that

333
00:11:48,040 --> 00:11:51,700
0,660 1050,1620 1620,2370 2580,3420 3420,3660
project,| {} and {} and

334
00:11:51,700 --> 00:11:52,840
0,210 210,420 420,690 690,930 930,1140
so think about this as

335
00:11:52,840 --> 00:11:54,580
0,540 540,1020 1020,1110 1110,1350 1350,1740
a example,| the paper mentions

336
00:11:54,580 --> 00:11:56,350
0,420 420,960 990,1320 1320,1590 1590,1770
is,| {} {in,the,paper} maybe this

337
00:11:56,350 --> 00:11:58,420
0,150 150,480 660,1350 1350,1860 1860,2070
is the development machines| and

338
00:11:58,420 --> 00:12:00,790
0,60 60,630 630,1350 1560,1950 1950,2370
the server for a debian

339
00:12:00,790 --> 00:12:03,940
0,600 1710,2610 2670,2880 2880,2970 2970,3150
Linux| and what they want

340
00:12:03,940 --> 00:12:06,400
0,240 240,630 630,900 900,1380 1710,2460
to again, defend against is

341
00:12:06,400 --> 00:12:08,520
0,750 1020,2040
{trap,or} trapdoor,|

342
00:12:11,900 --> 00:12:12,710
0,180 180,450 450,660 660,750 750,810
{you,know} {trapdoor -} in the

343
00:12:12,710 --> 00:12:16,440
0,570
software.|

344
00:12:16,890 --> 00:12:19,040
0,330 330,810 1140,1860
So the {}

345
00:12:19,380 --> 00:12:21,090
0,780 780,840 840,1530 1530,1620 1620,1710
{you,know} the attacker, you know

346
00:12:21,090 --> 00:12:22,770
0,240 240,600 600,1080 1080,1350 1350,1680
takes over control,| breaks into

347
00:12:22,770 --> 00:12:24,600
0,420 450,810 810,960 960,1350 1350,1830
the machine, that contains the

348
00:12:24,720 --> 00:12:28,110
0,420 420,1080 1110,1950 1950,2820 2850,3390
source repo,| modifies the software

349
00:12:28,110 --> 00:12:30,270
0,570 810,1500 1500,1650 1650,1860 1860,2160
[noticed]| and then it's going

350
00:12:30,270 --> 00:12:31,050
0,90 90,150 150,300 300,600 600,780
out of that software gets

351
00:12:31,050 --> 00:12:32,910
0,660 690,930 930,1260 1260,1590 1590,1860
deployed,| {you,know,for} example debian Linux

352
00:12:32,910 --> 00:12:33,960
0,180 180,540 540,630 630,990 990,1050
gets deployed to lots of

353
00:12:33,960 --> 00:12:37,080
0,600 1020,1800 1800,2550 2580,2970 2970,3120
machines| and {} now the

354
00:12:37,080 --> 00:12:40,050
0,480 480,690 690,1380 1530,2400 2430,2970
attacker has control over those

355
00:12:40,050 --> 00:12:41,760
0,510 540,1050 1050,1140 1140,1290 1290,1710
machines,| because it's gonna exploit

356
00:12:41,760 --> 00:12:42,720
0,270 270,810
the trapdoor.|

357
00:12:43,210 --> 00:12:45,130
0,480 750,1290 1290,1380 1380,1650 1650,1920
{} The the paper talks

358
00:12:45,130 --> 00:12:47,410
0,210 210,510 540,1200 1230,1470 1470,2280
about this attack,| this particular

359
00:12:47,410 --> 00:12:49,930
0,570 570,1020 1050,1500 1500,1920 1920,2520
instance in debian Linux in

360
00:12:49,960 --> 00:12:54,400
0,510 630,3630 3840,3960 3960,4320 4320,4440
2003,| where the attack was

361
00:12:54,400 --> 00:12:55,900
0,240 240,480 480,1260 1260,1350 1350,1500
able to compromise you know

362
00:12:55,900 --> 00:12:58,180
0,270 270,1140 1170,1590 1590,2220 2220,2280
the development {} server or

363
00:12:58,180 --> 00:13:00,970
0,570 930,1470 1470,2070 2160,2670 2670,2790
cluster,| {} in recovering from

364
00:13:00,970 --> 00:13:02,140
0,150 150,330 330,390 390,750 750,1170
these kinds of attacks very

365
00:13:02,140 --> 00:13:04,090
0,690 780,1140 1140,1290 1290,1560 1560,1950
painful,| {} in fact {in,2003

366
00:13:04,090 --> 00:13:05,530
0,360 360,780 780,900 900,1020 1020,1440
-} you know they report,|

367
00:13:05,530 --> 00:13:08,260
0,210 630,1350 1380,2100 2100,2280 2280,2730
that the {debian,Linux} which froze

368
00:13:08,260 --> 00:13:09,790
0,480 480,720 720,780 780,1050 1050,1530
development for a couple days,|

369
00:13:09,790 --> 00:13:10,750
0,180 180,480 480,570 570,720 720,960
and while they were trying

370
00:13:10,750 --> 00:13:13,030
0,90 90,450 450,810 1080,1860 1890,2280
to sort out which parts

371
00:13:13,030 --> 00:13:14,020
0,90 90,210 210,540 540,900 900,990
of their source repo was

372
00:13:14,020 --> 00:13:15,700
0,570 600,1050 1050,1170 1170,1380 1380,1680
still correct| and which parts

373
00:13:15,700 --> 00:13:17,170
0,210 210,720 720,1230 1230,1350 1350,1470
were actually modified by the

374
00:13:17,170 --> 00:13:19,840
0,510 1080,1380 1380,1800 1800,2130 2130,2670
attacker| and these attacks happens

375
00:13:19,840 --> 00:13:22,540
0,930 930,1320 1350,1530 1560,2070 2070,2700
periodically,| I think last year

376
00:13:22,540 --> 00:13:23,530
0,150 150,390 390,570 570,630 630,990
{you,know} Ubuntu had a similar

377
00:13:23,530 --> 00:13:26,020
0,210 210,270 270,810 1320,2130 2340,2490
type of problem {in,in} 2018

378
00:13:26,020 --> 00:13:28,510
0,840 840,1680 1680,1890 1890,2220 2220,2490
or 2019,| {I,can't} remember {exactly

379
00:13:28,510 --> 00:13:29,800
0,330 510,870 870,1080 1080,1140 1140,1290
-},| {} and it was

380
00:13:29,800 --> 00:13:32,500
0,60 60,450 450,780 780,1290 1530,2700
a similar case,| where {

381
00:13:32,500 --> 00:13:33,940
0,270 360,720 720,810 810,1110 1110,1440
-} one of the core

382
00:13:33,940 --> 00:13:36,790
0,660 900,1260 1260,1920 1980,2370 2370,2850
development servers was broken into,|

383
00:13:37,440 --> 00:13:38,610
0,330 330,690 690,870 870,1080 1080,1170
you know they have to

384
00:13:38,610 --> 00:13:42,150
0,480 480,870 1110,1590 1590,2070 2070,3540
sort out,| {} what we're

385
00:13:42,480 --> 00:13:44,580
0,390 390,900 900,1410 1410,1740 1740,2100
see which software which files

386
00:13:44,580 --> 00:13:46,590
0,150 150,840 840,1350 1410,1770 1770,2010
got infected and affected by

387
00:13:46,620 --> 00:13:47,280
0,360
{that,breaking}.|

388
00:13:48,510 --> 00:13:49,860
0,660 840,990 990,1140 1140,1260 1260,1350
Okay, so that's sort of

389
00:13:49,860 --> 00:13:52,710
0,90 90,420 420,540 540,1950 2280,2850
the setting of {the,paper}, {}|

390
00:13:52,710 --> 00:13:53,520
0,180 180,360 360,600 600,660 660,810
and I'm going to make

391
00:13:53,520 --> 00:13:54,690
0,60 60,270 270,390 390,630 630,1170
a little bit more concrete,|

392
00:13:54,720 --> 00:13:55,650
0,510 510,690 690,780 780,870 870,930
a little bit of a

393
00:13:55,650 --> 00:13:57,510
0,240 240,810 900,1140 1140,1500 1500,1860
toy example,| {} to help

394
00:13:57,510 --> 00:13:58,920
0,420 420,510 510,720 720,990 990,1410
us, you know go through

395
00:13:58,920 --> 00:14:00,660
0,420 450,1020 1020,1350 1350,1470 1470,1740
the techniques, that this paper

396
00:14:00,660 --> 00:14:01,620
0,270 270,810
actually uses.|

397
00:14:03,420 --> 00:14:05,400
0,690 930,1320 1320,1380 1380,1830 1830,1980
{} So the example that

398
00:14:05,400 --> 00:14:07,770
0,90 90,270 270,840 1410,1800 1800,2370
I'm gonna use,| partially inspired

399
00:14:07,770 --> 00:14:09,780
0,540 990,1350 1350,1590 1590,1770 1770,2010
by {} {6.858 - -

400
00:14:09,780 --> 00:14:12,660
0,480 660,1140 1140,1860 1860,2280 2280,2880
-},| {} is, let's say

401
00:14:12,690 --> 00:14:13,350
0,120 120,360 360,480 480,600 600,660
you know we have a

402
00:14:13,350 --> 00:14:16,980
0,270 270,870 1410,2040 2070,2700 2850,3630
file system,| {} there's, you're

403
00:14:16,980 --> 00:14:18,020
0,330 330,720
doing the,|

404
00:14:18,880 --> 00:14:20,290
0,180 180,240 240,480 480,840 840,1410
and the file system contains

405
00:14:20,290 --> 00:14:21,280
0,90 90,210 210,330 330,630 630,990
you know the source code

406
00:14:21,280 --> 00:14:24,130
0,360 360,540 540,1080 1080,1590 1800,2850
for this application of using

407
00:14:24,130 --> 00:14:26,950
0,150 150,420 420,600 810,1380 1590,2820
{} {6.858 -} zoobar {}|

408
00:14:26,950 --> 00:14:29,350
0,750 780,1320 1320,1770 1770,1950 1950,2400
and {zoobar -} is a

409
00:14:29,380 --> 00:14:30,850
0,210 210,300 300,570 570,990 990,1470
sort of a virtual bank

410
00:14:31,180 --> 00:14:34,060
0,390 390,930 930,1470 1650,2250 2340,2880
type application,| where {} users

411
00:14:34,060 --> 00:14:35,980
0,90 90,180 180,930 960,1650 1650,1920
of the system, registered users

412
00:14:35,980 --> 00:14:37,540
0,90 90,180 180,540 540,840 870,1560
of the system can transfer

413
00:14:37,540 --> 00:14:38,650
0,180 180,510 510,630 630,780 780,1110
{zoobars -} to each other|

414
00:14:39,100 --> 00:14:39,700
0,180 180,300 300,390 390,540 540,600
and so it has a

415
00:14:39,700 --> 00:14:41,860
0,660 840,1410 1410,1710 1710,1950 1950,2160
file called {auth.py - -},

416
00:14:41,860 --> 00:14:45,820
0,600 1020,1650 1650,2940 3360,3750 3750,3960
{you,know} does authentication| and that's

417
00:14:45,820 --> 00:14:46,840
0,60 60,420 420,570 570,750 750,1020
a file that {basically -}

418
00:14:46,840 --> 00:14:49,930
0,210 210,690 1110,1980 2010,2490 2490,3090
{you,know} influence bank, {bank.py -}.|

419
00:14:51,170 --> 00:14:54,650
0,720 1080,1800 2100,2670 2670,2940 2940,3480
And, {} so, {} let's

420
00:14:54,650 --> 00:14:56,870
0,480 480,570 570,900 900,1500 1560,2220
consider the case where a

421
00:14:56,870 --> 00:14:57,560
0,210 210,330 330,360 360,510 510,690
you have a new set

422
00:14:57,560 --> 00:15:00,290
0,90 90,510 510,1410 1680,2310 2310,2730
of developers, {A,B,and,C}| and they

423
00:15:00,290 --> 00:15:02,120
0,390 390,540 540,630 630,990 990,1830
decided that they wanted to

424
00:15:02,120 --> 00:15:04,640
0,540 540,1110 1140,1860 1860,2130 2160,2520
increase the usability of {zoobar

425
00:15:04,640 --> 00:15:06,650
0,420 570,960 960,1410 1410,1530 1530,2010
-},| actually deployed for real

426
00:15:06,860 --> 00:15:08,960
0,810 900,1050 1050,1170 1170,1500 1500,2100
and make it real,| basically

427
00:15:08,960 --> 00:15:09,950
0,60 60,240 240,420 420,840 840,990
you know they decide to

428
00:15:09,950 --> 00:15:11,300
0,300 300,390 390,570 570,660 660,1350
divide the work as follows,|

429
00:15:11,480 --> 00:15:12,780
0,510 510,510
{} A,

430
00:15:13,690 --> 00:15:15,970
0,240 240,450 450,600 600,1560 1590,2280
{} is gonna modify {}

431
00:15:16,000 --> 00:15:17,680
0,360 360,780 780,1260
{auth.py - -}

432
00:15:20,560 --> 00:15:23,220
0,330 330,1020 1020,1830
{} to support

433
00:15:24,290 --> 00:15:26,480
0,390 390,930 930,1410 1740,2070 2070,2190
MIT certificates or {MIT -}

434
00:15:26,480 --> 00:15:27,720
0,540
certs,|

435
00:15:28,630 --> 00:15:32,020
0,360 360,900 900,1260 1680,2460 2730,3390
kerberos tickets or certificates,| and

436
00:15:32,020 --> 00:15:33,910
0,180 180,270 270,570 570,990 990,1890
with the idea that, {}

437
00:15:33,910 --> 00:15:35,050
0,330 330,420 420,600 600,810 810,1140
what we're gonna do is,|

438
00:15:35,050 --> 00:15:35,920
0,480

439
00:15:36,220 --> 00:15:38,230
0,360 360,810 810,960 960,1470 1500,2010
{ -} we're gonna auth.py

440
00:15:38,230 --> 00:15:39,040
0,90 90,210 210,270 270,330 330,810
is going to be modified,|

441
00:15:39,040 --> 00:15:41,170
0,120 120,270 270,840 840,1440 1440,2130
so that only legit {}

442
00:15:41,200 --> 00:15:43,840
0,990 1290,1890 1890,2220 2220,2490 2490,2640
MIT community members actually can

443
00:15:43,840 --> 00:15:45,280
0,300 300,600 600,690 690,900 900,1440
log into the file server,|

444
00:15:45,520 --> 00:15:46,960
0,390 390,570 570,1020 1020,1260 1260,1440
{} file server or into

445
00:15:46,960 --> 00:15:48,250
0,180 180,570 630,960 960,1050 1050,1290
{zoobar -},| instead we actually

446
00:15:48,250 --> 00:15:49,990
0,480 480,960 960,1080 1080,1350 1350,1740
know who it actually really

447
00:15:49,990 --> 00:15:51,760
0,360 420,870 870,1080 1080,1200 1200,1770
is,| {} that is associated

448
00:15:51,760 --> 00:15:53,320
0,150 150,330 330,720 720,1050 1050,1560
with that particular MIT certificate|

449
00:15:53,920 --> 00:15:54,820
0,270 270,660 660,750 750,840 840,900
and then you have to

450
00:15:54,820 --> 00:15:55,360
0,120 120,150 150,300 300,390 390,540
make a little bit more

451
00:15:55,360 --> 00:15:56,560
0,570 570,630 630,750 750,1050 1050,1200
useful.| You know B can

452
00:15:56,560 --> 00:15:58,150
0,390 390,780 780,870 870,1170 1170,1590
actually modify the {bank.py -}

453
00:15:58,150 --> 00:16:01,270
0,480 480,840 1620,1860 1860,2610 2670,3120
{to,actually} {link,it} {you,know} to {}

454
00:16:01,270 --> 00:16:02,120
0,330 330,780
cash tag

455
00:16:03,620 --> 00:16:08,240
0,240 240,1140 2760,3090 3090,3750 3900,4620
for techcash.| And so, {}

456
00:16:08,240 --> 00:16:09,200
0,180 180,240 240,360 360,660 660,960
you know the idea that

457
00:16:09,200 --> 00:16:10,550
0,480 480,750 750,900 900,1170 1170,1350
basically we can actually use

458
00:16:10,550 --> 00:16:12,620
0,120 120,690 690,1020 1530,1710 1710,2070
this zoobar system do that,|

459
00:16:12,620 --> 00:16:13,310
0,210 210,300 300,450 450,630 630,690
like we can use the

460
00:16:13,310 --> 00:16:14,540
0,180 180,330 330,660 660,810 810,1230
{zoobar -} system to actually

461
00:16:14,540 --> 00:16:16,790
0,360 690,1020 1020,1560 1560,2160 2160,2250
{ -} transfer money,| you

462
00:16:16,790 --> 00:16:18,530
0,330 330,960 990,1200 1200,1470 1470,1740
know {} real money instead

463
00:16:18,530 --> 00:16:20,750
0,150 150,630 690,1470 1620,2070 2070,2220
of zoobars,| between users that

464
00:16:20,750 --> 00:16:23,780
0,120 120,840 870,1890 1920,2490 2490,3030
are registered {} with {}

465
00:16:23,990 --> 00:16:25,880
0,720 1050,1320 1320,1620 1620,1680 1680,1890
{this,servers},| that {this,sounds} of course

466
00:16:25,880 --> 00:16:27,110
0,120 120,180 180,510 510,870 870,1230
like a crazy idea,| you

467
00:16:27,110 --> 00:16:28,010
0,180 180,360 360,480 480,630 630,900
don't really do it,| but

468
00:16:28,160 --> 00:16:29,960
0,270 270,390 390,750 750,1380 1410,1800
it's not completely ridiculous, {}|

469
00:16:29,960 --> 00:16:30,920
0,120 120,210 210,750 750,840 840,960
you know, because you know

470
00:16:30,920 --> 00:16:33,320
0,390 720,1380 1380,1650 1650,2070 2070,2400
the auth.py really checks who

471
00:16:33,320 --> 00:16:35,090
0,180 180,600 600,870 990,1650 1650,1770
would actually is| based on

472
00:16:35,090 --> 00:16:36,950
0,90 90,480 480,1080 1380,1620 1620,1860
the MIT certificate| and so

473
00:16:36,950 --> 00:16:38,660
0,240 240,360 360,540 540,1260 1260,1710
maybe it's not unreasonable that

474
00:16:38,660 --> 00:16:40,010
0,90 90,210 210,750 750,990 990,1350
we could connect {you,know} {bank.py

475
00:16:40,010 --> 00:16:41,540
0,150 150,600 600,930 930,1290 1290,1530
- -} to actually {techcash

476
00:16:41,540 --> 00:16:42,060
0,450
-}.|

477
00:16:43,750 --> 00:16:45,820
0,210 210,720 720,1230 1230,1800 1830,2070
And then basically C in

478
00:16:45,820 --> 00:16:47,440
0,570 750,1260 1260,1440 1440,1560 1560,1620
our scenario is going to

479
00:16:47,440 --> 00:16:48,730
0,150 150,300 300,810 810,1080 1080,1290
be that person,| that's actually

480
00:16:48,730 --> 00:16:49,870
0,120 120,210 210,630 630,720 720,1140
going to deploy the software,|

481
00:16:53,880 --> 00:16:55,860
0,420 420,1050 1140,1560 1560,1800 1800,1980
find machine takes {software -}

482
00:16:55,860 --> 00:16:57,030
0,330 330,450 450,720 720,960 960,1170
installs it and runs it|

483
00:16:57,390 --> 00:16:59,220
0,180 180,1290 1290,1500 1500,1740 1740,1830
and {} it opens it

484
00:16:59,220 --> 00:17:00,330
0,150 150,210 210,330 330,630 630,1110
up to the MIT community.|

485
00:17:00,860 --> 00:17:03,620
0,810 1470,1980 1980,2340 2340,2430 2430,2760
Now, {} in the case,|

486
00:17:03,620 --> 00:17:05,600
0,120 120,420 420,1200 1200,1740 1860,1980
now let's consider what you

487
00:17:05,600 --> 00:17:06,680
0,210 240,510 510,600 600,930 930,1080
know what could happen, what

488
00:17:06,680 --> 00:17:09,050
0,150 150,330 330,870 1170,1650 1650,2370
could go wrong,| {} {if,actually}

489
00:17:09,050 --> 00:17:10,760
0,300 300,570 570,840 840,990 990,1710
the file server was compromised|

490
00:17:10,760 --> 00:17:12,380
0,150 150,540 540,780 780,1350
and so was byzantine.|

491
00:17:14,690 --> 00:17:16,260
0,330

492
00:17:16,640 --> 00:17:18,620
0,570 780,1140 1140,1800 1800,1890 1890,1980
Well, the obvious you know

493
00:17:18,620 --> 00:17:19,790
0,390 390,450 450,720 720,780 780,1170
problems, a couple of obvious

494
00:17:19,790 --> 00:17:21,830
0,630 630,750 750,1020 1050,1560 1560,2040
problems, you know bad outcomes

495
00:17:21,830 --> 00:17:27,580
0,660 1590,2430 2430,2730 2730,3180
possible,| let's consider them,|

496
00:17:27,820 --> 00:17:29,680
0,540 540,840 840,1080 1080,1560 1560,1860
{you,know} that outcome one which

497
00:17:29,680 --> 00:17:30,490
0,90 90,180 180,330 330,480 480,810
is the one thing we

498
00:17:30,490 --> 00:17:31,570
0,240 240,330 330,690 690,990 990,1080
should be talking about| and

499
00:17:31,570 --> 00:17:32,950
0,360 360,450 450,510 510,780 780,1380
also in the previous examples,|

500
00:17:33,250 --> 00:17:35,830
0,210 210,570 570,1440 1440,1830 1860,2580
it is basically the adversary

501
00:17:35,830 --> 00:17:37,300
0,270 270,810 810,1050 1050,1140 1140,1470
gives arbitrary code to C,|

502
00:17:38,540 --> 00:17:43,100
0,1200 1230,1980
{} adversary

503
00:17:46,320 --> 00:17:47,760
0,570
provides

504
00:17:48,080 --> 00:17:51,280
0,300 300,840 1740,1920 1920,2370
own code to C.|

505
00:17:53,430 --> 00:17:54,450
0,420 420,570 570,690 690,840 840,1020
And you know that sort

506
00:17:54,450 --> 00:17:56,220
0,510 600,960 960,1320 1320,1590 1590,1770
of {} maybe that adversary

507
00:17:56,220 --> 00:17:58,650
0,600 600,1530 1590,1980 1980,2280 2280,2430
slightly {} subtle about it

508
00:17:58,650 --> 00:17:59,970
0,510 540,810 810,1110 1110,1230 1230,1320
or clever about it,| you

509
00:17:59,970 --> 00:18:01,710
0,180 180,690 1380,1650 1650,1710 1710,1740
know whatever makes it a

510
00:18:01,710 --> 00:18:02,640
0,150 150,270 270,450 450,540 540,930
little bit hard to spot,|

511
00:18:02,640 --> 00:18:04,410
0,180 180,720 720,900 900,1530 1530,1770
then actually {} modified {auth.py

512
00:18:04,410 --> 00:18:06,600
0,180 180,960 1530,1800 1800,1890 1890,2190
- -} {for,example} to delete

513
00:18:06,600 --> 00:18:08,490
0,60 60,420 420,1050 1410,1740 1740,1890
the MIT certificates,| but they're

514
00:18:08,490 --> 00:18:09,780
0,600 600,690 690,840 840,1020 1020,1290
basically you know there's really

515
00:18:09,780 --> 00:18:10,650
0,180 180,420 420,540 540,750 750,870
no way for C to

516
00:18:10,650 --> 00:18:12,540
0,510 750,1140 1140,1560 1560,1800 1800,1890
check,| that actually got the

517
00:18:12,540 --> 00:18:13,860
0,390 390,660 660,720 720,870 870,1320
software that A and B

518
00:18:13,860 --> 00:18:15,900
0,150 150,720 720,1140 1170,1650 1650,2040
{} produced| and {} without

519
00:18:15,900 --> 00:18:17,490
0,180 180,810 810,960 960,1080 1080,1590
any modifications from the adversary.|

520
00:18:17,490 --> 00:18:18,270
0,270 300,510 510,630 630,690 690,780
So that's sort of the

521
00:18:18,270 --> 00:18:19,740
0,600 660,900 900,1290 1290,1350 1350,1470
obvious {} problem we're going

522
00:18:19,740 --> 00:18:20,430
0,60 60,240 240,270 270,450 450,690
to talk a lot about,|

523
00:18:20,430 --> 00:18:22,680
0,180 300,870 870,1110 1110,1740 1770,2250
it there's a second {}

524
00:18:22,680 --> 00:18:23,520
0,150 150,210 210,420 420,690 690,840
sort of that outcome which

525
00:18:23,520 --> 00:18:24,330
0,210 210,330 330,390 390,630 630,810
may be a little more

526
00:18:24,330 --> 00:18:24,860
0,450
subtle,|

527
00:18:25,410 --> 00:18:28,140
0,720 780,1200 1200,1560 1560,2040 2130,2730
{} which is that {}

528
00:18:28,140 --> 00:18:30,240
0,150 150,990 990,1860
the adversary {}

529
00:18:30,580 --> 00:18:31,580
0,690
{

530
00:18:32,020 --> 00:18:33,820
0,270 270,720 720,840 840,1590 1590,1800
-} provides the changes {you,know}

531
00:18:33,820 --> 00:18:36,180
0,390 390,600 600,810 810,1500
{to,bank.py - - -},|

532
00:18:37,960 --> 00:18:39,620
0,900
without

533
00:18:39,890 --> 00:18:41,960
0,150 150,810
{} changes

534
00:18:43,190 --> 00:18:45,920
0,660 660,1320 1320,1710
to {auth.py -}.|

535
00:18:47,970 --> 00:18:49,080
0,450 450,570 570,660 660,750 750,1110
And so at this {point,,this

536
00:18:49,080 --> 00:18:51,120
0,660 660,870 870,1140 1140,1740 1740,2040
-} is pretty problematic, correct,|

537
00:18:51,120 --> 00:18:52,500
0,480 480,570 570,660 660,900 900,1380
because you {know -} {bank.py

538
00:18:52,500 --> 00:18:53,670
0,120 120,360 360,660 660,810 810,1170
-} link to {techcash -}

539
00:18:53,670 --> 00:18:55,800
0,450 720,1380 1380,1650 1650,1890 1890,2130
now,| but we actually don't

540
00:18:55,800 --> 00:18:58,500
0,300 300,1080 1080,2040 2100,2160 2160,2700
have appropriate authentication to users

541
00:18:58,500 --> 00:19:00,450
0,630 840,1020 1020,1380 1380,1770 1770,1950
anymore,| in fact anybody that

542
00:19:00,450 --> 00:19:02,550
0,570 570,960 990,1440 1440,1710 1710,2100
actually {} creates zoobar account

543
00:19:02,550 --> 00:19:04,350
0,120 120,870 870,1380 1380,1620 1620,1800
{can,now} actually interact with the

544
00:19:04,350 --> 00:19:06,480
0,270 270,720 1200,1710 1710,1890 1890,2130
{techcash -},| {} and so

545
00:19:06,480 --> 00:19:08,490
0,210 240,600 600,900 900,1170 1170,2010
{you,know} clearly very very undesirable,

546
00:19:08,760 --> 00:19:11,460
0,540 540,1080 1680,2190 2190,2280 2280,2700
{} and harder to spot,|

547
00:19:11,610 --> 00:19:13,620
0,420 420,1170 1230,1380 1380,1800 1800,2010
because basically the adversary actually

548
00:19:13,620 --> 00:19:15,480
0,240 240,450 450,1080 1080,1260 1260,1860
doesn't really modify any {software

549
00:19:15,540 --> 00:19:17,520
0,270 270,600 600,1440 1440,1560 1560,1980
-},| just selectively you know

550
00:19:17,550 --> 00:19:19,050
0,600 600,720 720,960 960,1350 1350,1500
presents you take pieces of

551
00:19:19,050 --> 00:19:20,640
0,300 300,960 990,1290 1290,1500 1500,1590
it| and present that to

552
00:19:20,640 --> 00:19:22,080
0,390 390,750 750,960 960,1230 1230,1440
see who then actually goes

553
00:19:22,080 --> 00:19:22,960
0,180 180,270 270,750
off and deployed.|

554
00:19:24,610 --> 00:19:26,590
0,330 330,480 480,1020 1020,1620 1650,1980
And so it's really {you,know}

555
00:19:26,590 --> 00:19:31,690
0,1650 2400,3180 3180,3510 3510,3930 3930,5100
{the,attacks -} {} the paper

556
00:19:32,140 --> 00:19:33,490
0,570 570,630 630,900 900,1050 1050,1350
considers of course the attack

557
00:19:33,490 --> 00:19:35,140
0,150 150,390 390,660 660,1050 1290,1650
number one to two,| but

558
00:19:35,140 --> 00:19:35,770
0,210 210,240 240,330 330,540 540,630
there are a lot of

559
00:19:35,770 --> 00:19:36,850
0,150 150,240 240,330 330,630 630,1080
some of the subtle issues

560
00:19:36,850 --> 00:19:38,410
0,510 510,840 840,1140 1140,1380 1380,1560
actually are brought out by

561
00:19:38,410 --> 00:19:40,090
0,390 390,720 720,1110 1110,1290 1290,1680
the second case,| that will

562
00:19:40,120 --> 00:19:41,340
0,270 270,660 660,960
be talking about.|

563
00:19:44,250 --> 00:19:45,840
0,390 390,720 720,870 870,1260
Any questions so far,|

564
00:19:47,950 --> 00:19:49,060
0,180 180,240 240,450 450,510 510,1110
you know about the setting

565
00:19:49,120 --> 00:19:51,400
0,390 390,480 480,1320
by the motivation,|

566
00:19:53,220 --> 00:19:54,810
0,240 240,420 420,540 540,870 1110,1590
before we're going to try

567
00:19:54,810 --> 00:19:56,240
0,120 120,480 480,1140
to discuss solutions.|

568
00:19:57,080 --> 00:19:57,950
0,240 240,420 420,690 690,780 780,870
So the problem with the

569
00:19:57,950 --> 00:19:59,540
0,390 390,720 720,810 810,1260 1320,1590
second case is that| the

570
00:19:59,540 --> 00:20:03,320
0,690 810,1440 1470,1680 1680,2160 2370,3780
user {} that the authentication

571
00:20:03,320 --> 00:20:06,500
0,180 180,660 870,1890 2100,2910 2910,3180
does not authenticate.| Yeah, it

572
00:20:06,500 --> 00:20:07,850
0,120 120,390 390,570 570,930 930,1350
{} doesn't use MIT certificates

573
00:20:07,850 --> 00:20:09,200
0,390 750,900 900,1050 1050,1140 1140,1350
anymore| and so we don't

574
00:20:09,200 --> 00:20:10,400
0,180 180,450 450,750 750,900 900,1200
really know actually who logs

575
00:20:10,400 --> 00:20:10,940
0,330
in.|

576
00:20:12,840 --> 00:20:14,040
0,390 390,930
Thank you.|

577
00:20:15,020 --> 00:20:17,030
0,360 360,630 630,780 780,1140 1140,2010
What about the case where

578
00:20:18,590 --> 00:20:20,300
0,150 150,450 450,780 780,1110 1110,1710
A like B won't see

579
00:20:20,720 --> 00:20:22,620
0,570 600,1050 1050,1140 1140,1680
is like the fork.|

580
00:20:23,360 --> 00:20:25,010
0,150 150,630 630,930 930,1470 1470,1650

581
00:20:25,310 --> 00:20:26,450
0,510 510,750 750,810 810,840 840,1140
Let's assume for a second

582
00:20:26,450 --> 00:20:27,800
0,180 180,570 570,930 930,1230 1230,1350
that {A,and,B} actually I have

583
00:20:27,800 --> 00:20:28,640
0,270 270,360 360,480 480,750 750,840
talked to each other and

584
00:20:28,640 --> 00:20:29,600
0,360 360,510 510,600 600,870 870,960
divide up the work,| so

585
00:20:29,600 --> 00:20:31,460
0,150 150,660 750,990 990,1590 1590,1860
they know {} they're supposed

586
00:20:31,460 --> 00:20:32,540
0,60 60,240 240,450 450,630 630,1080
to be doing it together.|

587
00:20:33,390 --> 00:20:34,140
0,480
Right.|

588
00:20:35,510 --> 00:20:37,040
0,300 300,540 540,600 600,1080
May form a team,

589
00:20:37,260 --> 00:20:39,240
0,570 660,990 990,1080 1080,1380 1380,1980
{} they're in close collaboration

590
00:20:39,240 --> 00:20:40,820
0,150 150,870 870,960 960,1260
in contact,| you know

591
00:20:41,310 --> 00:20:42,630
0,510 540,750 750,1140 1140,1230 1230,1320
and they've divided up the

592
00:20:42,630 --> 00:20:43,800
0,300 300,420 420,540 540,690 690,1170
work| and so they know

593
00:20:43,800 --> 00:20:45,330
0,90 90,420 450,1020 1020,1320 1320,1530
you know {B,tells,A},| when

594
00:20:45,330 --> 00:20:46,410
0,150 150,390 390,630 630,900 900,1080
B done, {tells,A -},| when

595
00:20:46,410 --> 00:20:47,220
0,120 120,330 330,450 450,690 690,810
they done and then they

596
00:20:47,220 --> 00:20:48,990
0,240 240,810 810,1230 1230,1530 1530,1770
tell C {go,ahead -}, {we,all,done -}.|

597
00:20:49,760 --> 00:20:50,700
0,630
Okay?|

598
00:20:52,190 --> 00:20:53,940
0,300 300,810 810,1440
Okay, so, {}

599
00:20:54,550 --> 00:20:56,710
0,270 270,870 870,1680 1680,2100 2100,2160
let's start with considering a

600
00:20:56,710 --> 00:20:57,790
0,270 270,630 630,780 780,930 930,1080
simple design,| that is too

601
00:20:57,790 --> 00:20:59,590
0,480 510,930 1020,1110 1110,1350 1350,1800
simple, meaning it doesn't work,|

602
00:21:00,370 --> 00:21:03,640
0,630 1830,2070 2070,2250 2250,2370 2370,3270
but it gives us some

603
00:21:04,150 --> 00:21:06,520
0,450 450,870 870,1590 1590,1680 1680,2370
starting points for {} more

604
00:21:06,580 --> 00:21:09,010
0,420 420,990 990,1560 1710,2160 2160,2430
{} sophisticated design,| hopefully might

605
00:21:09,010 --> 00:21:11,260
0,300 1170,1440 1440,1530 1530,1650 1650,2250
work| and so the simple

606
00:21:11,260 --> 00:21:13,390
0,390 390,720 720,1140 1440,2040 2040,2130
point is that| {} {A,and}

607
00:21:13,390 --> 00:21:16,150
0,240 240,480 480,960 960,1890 1950,2760
b or any { -},|

608
00:21:16,150 --> 00:21:17,020
0,300 300,390 390,720 720,750 750,870
all the files are going

609
00:21:17,020 --> 00:21:19,180
0,60 60,240 240,720 1020,1620 1680,2160
to be signed with {}

610
00:21:19,180 --> 00:21:21,880
0,600 600,990 990,1560 1590,2010 2190,2700
person who modified,| so when

611
00:21:21,880 --> 00:21:22,840
0,240 240,720
like A

612
00:21:23,390 --> 00:21:26,580
0,990 1020,1170 1170,1500 1500,2490
modifies {you,know} {auth.py -},|

613
00:21:29,200 --> 00:21:31,450
0,420 420,720 720,1080 1080,1770 1800,2250
{} A actually produces a

614
00:21:31,450 --> 00:21:35,020
0,780 1080,1740 1740,2610 2820,3360 3360,3570
signature,| {} and signed with

615
00:21:35,020 --> 00:21:36,740
0,450 510,900 900,1470
the public key,|

616
00:21:39,270 --> 00:21:41,580
0,720 780,960 960,1410 1830,2250 2250,2310
which {signature -} signed to

617
00:21:41,580 --> 00:21:42,840
0,90 90,390 390,600 600,720 720,1260
the public key of A,|

618
00:21:43,470 --> 00:21:45,420
0,1230 1230,1440 1440,1530 1530,1680 1680,1950
{} and you know that

619
00:21:45,420 --> 00:21:47,670
0,390 390,690 690,780 780,1320 1740,2250
signature covers the data of

620
00:21:47,670 --> 00:21:48,680
0,120 120,810
the file.|

621
00:21:51,500 --> 00:21:53,600
0,210 210,420 420,720 720,1410 1440,2100
And so when C {}

622
00:21:54,110 --> 00:21:56,210
0,1140 1140,1230 1230,1440 1440,1800 1800,2100
downloads, you know the {auth.py

623
00:21:56,210 --> 00:21:58,310
0,210 210,960 1230,1860 1860,1980 1980,2100
- -},| {} you know

624
00:21:58,310 --> 00:21:59,860
0,270 270,360 360,1110
check the signature,|

625
00:22:05,100 --> 00:22:06,120
0,330 330,420 420,510 510,780 780,1020
and if the signature checks

626
00:22:06,120 --> 00:22:07,290
0,360 360,420 420,630 630,1080 1080,1170
out,| you know then that

627
00:22:07,290 --> 00:22:08,280
0,180 180,480 480,660 660,840 840,990
C knows that actually this

628
00:22:08,280 --> 00:22:10,710
0,330 330,660 690,1200 1200,2250 2250,2430
file was produced,| {you,know,this} file

629
00:22:10,710 --> 00:22:13,050
0,330 330,690 690,870 870,1380 1620,2340
was produced by A| and

630
00:22:13,050 --> 00:22:14,280
0,390 390,570 570,810 810,930 930,1230
{} {you,know} might all believe

631
00:22:14,280 --> 00:22:16,680
0,180 180,420 420,660 660,1050 1710,2400
that things are good. {}|

632
00:22:17,300 --> 00:22:18,290
0,150 150,360 360,420 420,690 690,990
And that's the basic plan|

633
00:22:18,380 --> 00:22:19,880
0,600 840,1110 1110,1260 1260,1320 1320,1500
and we'll talk a little

634
00:22:19,880 --> 00:22:20,960
0,150 150,540 540,810 810,870 870,1080
bit about where the keys

635
00:22:20,960 --> 00:22:22,550
0,60 60,330 330,720 720,1320 1530,1590
are coming from,| although you

636
00:22:22,550 --> 00:22:23,840
0,330 330,450 450,780 780,990 990,1290
know the issue of public

637
00:22:23,840 --> 00:22:25,970
0,150 150,900 900,1170 1170,1470 1470,2130
key distribution is really an

638
00:22:25,970 --> 00:22:26,960
0,150 150,360 360,480 480,810 810,990
{6.858 - -} topics,| so

639
00:22:26,960 --> 00:22:27,620
0,60 60,180 180,390 390,480 480,660
{I'm,not,going,to -} talk too much

640
00:22:27,620 --> 00:22:29,180
0,240 240,360 630,990 990,1140 1140,1560
about it,| but just assume

641
00:22:29,180 --> 00:22:30,920
0,120 120,390 390,660 960,1500 1500,1740
for now,| that every user

642
00:22:30,920 --> 00:22:33,560
0,180 180,210 210,750 900,1800 2190,2640
has a key, {} {public,private}

643
00:22:33,560 --> 00:22:36,350
0,330 330,930 1050,1710 1710,2520 2520,2790
key pair| {} and the

644
00:22:36,350 --> 00:22:38,270
0,300 300,510 510,600 600,1320 1320,1920
private keys {are -} secret

645
00:22:38,270 --> 00:22:39,230
0,300 300,360 360,600 600,810 810,960
and the public keys are

646
00:22:39,230 --> 00:22:41,420
0,480 750,1290 1290,1530 1530,1830 1830,2190
public,| and every user knows

647
00:22:41,420 --> 00:22:43,070
0,510 540,1080 1080,1230 1230,1530 1530,1650
whose public key belongs to

648
00:22:43,070 --> 00:22:44,900
0,300
who.|

649
00:22:45,170 --> 00:22:48,590
0,180 180,540 540,780 780,2280 2670,3420
So now let's consider {}

650
00:22:48,590 --> 00:22:52,190
0,1110 2430,2970 2970,3180 3180,3390 3390,3600
attacks and see which one

651
00:22:52,190 --> 00:22:53,300
0,270 270,480 480,540 540,690 690,1110
sort of you know fail,|

652
00:22:53,300 --> 00:22:55,040
0,210 210,720 720,840 840,1350 1350,1740
which ones you know {}

653
00:22:55,040 --> 00:22:55,760
0,510
work.|

654
00:22:56,020 --> 00:22:57,130
0,300 300,390 390,630 630,810 810,1110
So, of course the obvious

655
00:22:57,130 --> 00:22:58,510
0,270 270,390 390,570 570,1110 1110,1380
attack was number one,| that

656
00:22:58,510 --> 00:22:59,680
0,90 90,300 300,750 750,1080 1080,1170
we talked about on the

657
00:22:59,680 --> 00:23:01,990
0,300 300,690 750,1080 1080,1440 1440,2310
previous slide,| this S modifies

658
00:23:03,030 --> 00:23:05,160
0,750
file,|

659
00:23:05,940 --> 00:23:07,350
0,570 660,1020 1020,1170 1170,1230 1230,1410
and that's not a little

660
00:23:07,350 --> 00:23:12,030
0,210 210,2010 2010,2310 2310,3390 4140,4680
bit,| {that's,not,directly -} {} {S,modified}

661
00:23:12,450 --> 00:23:14,790
0,630 1050,1590 1620,1830 1830,2130 2130,2340
auth.py,| {} that's not really

662
00:23:14,790 --> 00:23:16,560
0,120 120,180 180,600 630,1080 1080,1770
going to be possible anymore,|

663
00:23:16,740 --> 00:23:18,900
0,570 570,750 750,1230 1230,2040 2040,2160
because when C downloads you

664
00:23:18,900 --> 00:23:20,370
0,150 150,810 840,1290 1290,1410 1410,1470
know the file and the

665
00:23:20,370 --> 00:23:22,440
0,870 960,1320 1320,1500 1500,1770 1770,2070
signature,| {} and checks it

666
00:23:22,590 --> 00:23:23,550
0,210 210,300 300,480 480,780 780,960
and it will see that

667
00:23:23,550 --> 00:23:25,170
0,90 90,390 390,690 690,1290 1290,1620
the signature rejection check,| because

668
00:23:25,170 --> 00:23:26,490
0,90 90,390 390,630 630,1080 1080,1320
the data that actually was

669
00:23:26,490 --> 00:23:28,290
0,510 840,1080 1080,1530 1530,1710 1710,1800
signed is different than the

670
00:23:28,290 --> 00:23:30,120
0,270 270,480 480,900 900,1170 1170,1830
data that actually the server

671
00:23:30,300 --> 00:23:32,250
0,1050 1230,1530 1530,1620 1620,1740 1740,1950
produced| and so it's not

672
00:23:32,250 --> 00:23:34,140
0,210 210,720 720,1230 1320,1590 1590,1890
really possible for the server

673
00:23:34,140 --> 00:23:35,820
0,330 330,450 450,1050 1050,1440 1440,1680
really to modify {auth.py -

674
00:23:35,820 --> 00:23:37,620
0,180 180,690 690,1080 1080,1350 1350,1800
- -},| without actually being

675
00:23:37,620 --> 00:23:39,210
0,600 690,900 900,1260 1260,1410 1410,1590
attacked or {without,actually} {} being

676
00:23:39,210 --> 00:23:39,780
0,480
detected.|

677
00:23:40,470 --> 00:23:41,370
0,150 150,510 510,600 600,720 720,900
{} So you know this

678
00:23:41,370 --> 00:23:42,180
0,180 180,540 540,660 660,720 720,810
is we're sort of in

679
00:23:42,180 --> 00:23:43,260
0,150 150,450 450,690 690,1080 1080,1080
good shape here on {}

680
00:23:43,260 --> 00:23:45,270
0,480 480,1170 1200,1530 1530,1740 1740,2010
this attacks| and that's sort

681
00:23:45,270 --> 00:23:46,590
0,270 270,360 360,660 660,1080 1080,1320
of the core attack, right.|

682
00:23:47,210 --> 00:23:48,440
0,480 570,990 990,1020 1020,1170 1170,1230
But there's a lot of

683
00:23:48,440 --> 00:23:50,120
0,180 180,390 390,660 660,1410 1440,1680
other things that {S -}

684
00:23:50,120 --> 00:23:51,440
0,210 210,360 360,660 990,1170 1170,1320
still could do,| so let's

685
00:23:51,440 --> 00:23:52,490
0,330 330,450 450,570 570,660 660,1050
consider some of the other

686
00:23:52,520 --> 00:23:54,660
0,600 990,1830
things {},|

687
00:23:55,040 --> 00:23:57,440
0,480 480,570 570,840 840,1470 1950,2400
S {you,know} could actually, we

688
00:23:57,440 --> 00:23:59,150
0,540 570,930 930,1290 1290,1500 1500,1710
{} describe {S,send} {another -}

689
00:23:59,150 --> 00:24:00,200
0,660
file,|

690
00:24:00,710 --> 00:24:02,090
0,150 150,660 660,750 750,1110 1110,1380
and pretends to be {auth.py

691
00:24:02,090 --> 00:24:03,520
0,690
-},|

692
00:24:05,450 --> 00:24:07,340
0,900 900,1500 1500,1620 1620,1830 1830,1890
{} and {} because the

693
00:24:07,340 --> 00:24:08,960
0,390 390,600 600,810 810,1440 1470,1620
signature doesn't really say| you

694
00:24:08,960 --> 00:24:10,640
0,240 240,690 690,930 930,1560 1560,1680
know which actually file the

695
00:24:10,640 --> 00:24:12,590
0,210 210,600 600,930 1380,1680 1680,1950
data belongs to| and so

696
00:24:12,590 --> 00:24:15,380
0,270 300,660 660,1200 1200,2250 2280,2790
S you know {} produce

697
00:24:15,380 --> 00:24:17,000
0,90 90,870 900,1410 1410,1620 1620,1620
some other files,| like oh

698
00:24:17,000 --> 00:24:18,350
0,540 540,810 810,990 990,1110 1110,1350
yeah see this is actually

699
00:24:18,350 --> 00:24:20,750
0,240 240,810 1110,1800 1800,2160 2160,2400
{auth.py -},| {} you can

700
00:24:20,750 --> 00:24:22,070
0,300 300,450 450,510 510,780 780,1320
believe me in here,| the

701
00:24:22,130 --> 00:24:23,960
0,420 540,900 900,1530 1530,1740 1740,1830
sign the signature which of

702
00:24:23,960 --> 00:24:26,690
0,180 180,480 480,900 1410,1950 2010,2730
course produced {by,S},| so of

703
00:24:26,690 --> 00:24:27,800
0,240 240,330 330,480 480,570 570,1110
course this could be fixed,|

704
00:24:27,830 --> 00:24:29,300
0,150 150,450 450,900 900,1050 1050,1470
you know maybe the signature

705
00:24:29,300 --> 00:24:31,010
0,180 180,360 360,600 600,1050 1140,1710
should not only include data,|

706
00:24:31,010 --> 00:24:32,390
0,120 120,450 450,750 750,930 930,1380
but also probably should include

707
00:24:32,600 --> 00:24:33,300
0,120 120,390 390,570
the file name,|

708
00:24:35,340 --> 00:24:36,660
0,240 240,420 420,660 660,840 840,1320
so {you,know} maybe not too,

709
00:24:36,690 --> 00:24:38,130
0,450 510,660 660,990 990,1200 1200,1440
{} too bad in something

710
00:24:38,130 --> 00:24:39,750
0,180 180,360 360,540 540,810 810,1620
that you could be addressed.|

711
00:24:41,950 --> 00:24:43,330
0,510 510,600 600,870 870,1200 1200,1380
Third, you know another yet

712
00:24:43,330 --> 00:24:45,970
0,270 270,1200 1200,1410 1410,2040 2040,2640
another possibility is| to for

713
00:24:46,060 --> 00:24:49,000
0,810 1290,1680 1680,2040 2040,2550 2700,2940
S to basically send the

714
00:24:49,000 --> 00:24:50,880
0,420 420,540 540,780 780,1350
contents of old files,

715
00:24:51,970 --> 00:24:55,960
0,510 510,1230 3000,3360 3360,3540 3540,3990
old content,| maybe some new.|

716
00:25:03,460 --> 00:25:04,180
0,210 210,300 300,540 540,600 600,720
And it does a bit

717
00:25:04,180 --> 00:25:05,680
0,360 360,840 840,1080 1080,1320 1320,1500
more difficult now| for us

718
00:25:05,680 --> 00:25:08,050
0,360 360,1440 1470,1890 1890,2220 2220,2370
to {} handle correct this

719
00:25:08,050 --> 00:25:10,330
0,180 180,480 480,1020 1170,1650 1650,2280
to simple plan,| {} because

720
00:25:10,510 --> 00:25:12,160
0,120 120,390 390,1200 1230,1500 1500,1650
you know there there's no

721
00:25:12,160 --> 00:25:13,420
0,540 540,690 690,780 780,1170 1170,1260
way you know basically the

722
00:25:13,420 --> 00:25:16,210
0,360 360,1110 1110,2190 2190,2310 2310,2790
files individually authenticated, but not

723
00:25:16,210 --> 00:25:17,830
0,450 450,600 600,720 720,1170 1260,1620
together| and it's not {}

724
00:25:17,920 --> 00:25:19,960
0,570 570,780 780,960 960,1620 1620,2040
C, gets a consistent picture

725
00:25:19,960 --> 00:25:21,610
0,90 90,180 180,480 480,930 1110,1650
of the file system, {}|

726
00:25:21,610 --> 00:25:22,630
0,180 180,330 330,570 570,780 780,1020
it just gets like sign

727
00:25:22,630 --> 00:25:24,910
0,570 840,1290 1440,1800 1800,1980 1980,2280
files,| and how do sign

728
00:25:24,910 --> 00:25:26,110
0,270 270,480 480,600 600,720 720,1200
files relate to each other

729
00:25:26,110 --> 00:25:27,880
0,240 240,510 510,750 780,1110 1110,1770
in terms of their histories,|

730
00:25:28,090 --> 00:25:29,650
0,420 420,930 930,1140 1140,1440 1440,1560
is completely not covered in

731
00:25:29,650 --> 00:25:30,760
0,150 150,270 270,570 570,1020
these two simple design.|

732
00:25:31,380 --> 00:25:32,670
0,330 330,420 420,930 930,1020 1020,1290
This is exactly of course

733
00:25:32,670 --> 00:25:34,530
0,210 210,870 870,1290 1290,1440 1440,1860
gonna issue,| there's more subtle

734
00:25:34,530 --> 00:25:36,090
0,360 360,630 840,1260 1260,1410 1410,1560
attack that now could just

735
00:25:36,090 --> 00:25:37,860
0,450 450,690 690,1050 1050,1260 1260,1770
completely work out, correct,| because

736
00:25:38,070 --> 00:25:39,900
0,240 240,510 510,1020 1080,1470 1470,1830
you know S could send

737
00:25:39,900 --> 00:25:42,330
0,480 810,1440 1830,2130 2130,2340 2340,2430
the,| {} could send the

738
00:25:42,330 --> 00:25:44,340
0,300 300,690 690,870 870,1230 1380,2010
old version of {auth.py -},|

739
00:25:44,430 --> 00:25:46,020
0,570 570,720 720,930 930,1350 1350,1590
{} it will completely check

740
00:25:46,020 --> 00:25:47,580
0,390 720,990 990,1170 1170,1320 1320,1560
out,| {} and then send

741
00:25:47,580 --> 00:25:49,890
0,90 90,420 420,1020 1050,1440 1440,2310
the new version of the

742
00:25:49,980 --> 00:25:50,780
0,600
{}

743
00:25:51,270 --> 00:25:52,290
0,210 210,450 450,690 690,870 870,1020
of the {bank.py - -

744
00:25:52,290 --> 00:25:54,060
0,540 570,720 720,1200 1200,1440 1440,1770
-},| {} which actually talks

745
00:25:54,060 --> 00:25:55,350
0,180 180,390 390,450 450,660 660,1290
is linked to {techcash -},|

746
00:25:55,470 --> 00:25:57,210
0,420 420,660 660,1410 1410,1680 1680,1740
and now exactly back in

747
00:25:57,210 --> 00:25:59,490
0,270 270,390 390,720 720,1320 1500,2280
there's a {worse,some} case,| were

748
00:25:59,550 --> 00:26:00,210
0,150 150,240 240,390 390,480 480,660
you know with an old

749
00:26:00,210 --> 00:26:01,650
0,270 270,360 360,570 570,1290 1290,1440
version of {auth.py -}| or

750
00:26:01,650 --> 00:26:02,850
0,240 240,330 330,720 720,840 840,1200
not to change to {auth.py

751
00:26:02,850 --> 00:26:04,350
0,360 360,600 600,660 660,1170 1170,1500
-},| not the certificate changes

752
00:26:04,350 --> 00:26:06,480
0,150 150,510 510,1020 1260,1680 1680,2130
to {auth.py -},| {} and

753
00:26:06,480 --> 00:26:08,610
0,510 570,900 900,1500 1500,1830 1830,2130
the new version that actually

754
00:26:08,610 --> 00:26:09,680
0,180 180,270 270,450 450,960
link to {techcash -}.|

755
00:26:09,960 --> 00:26:11,250
0,330 330,660 660,990 990,1110 1110,1290
And so this is not

756
00:26:11,250 --> 00:26:13,200
0,150 150,480 900,1350 1470,1860 1860,1950
so good,| so and the

757
00:26:13,200 --> 00:26:14,220
0,300 300,540 540,660 660,780 780,1020
simple point that we have

758
00:26:14,220 --> 00:26:15,660
0,270 270,630 630,990 1020,1320 1320,1440
here, just doesn't deal with

759
00:26:15,660 --> 00:26:16,380
0,360
this.|

760
00:26:17,420 --> 00:26:18,470
0,210 210,390 390,450 450,900 900,1050
{} There's a similar sort

761
00:26:18,470 --> 00:26:19,850
0,150 150,600 600,1050 1050,1140 1140,1380
of another version of this,|

762
00:26:19,850 --> 00:26:21,350
0,180 180,570 750,840 840,1080 1080,1500
that where you know of

763
00:26:21,350 --> 00:26:22,370
0,330 330,420 420,690 690,840 840,1020
course {you,know,S -} can also

764
00:26:22,370 --> 00:26:23,360
0,210 210,600 600,690 690,780 780,990
just claim that the file

765
00:26:23,360 --> 00:26:24,560
0,240 240,750
doesn't exist,|

766
00:26:31,530 --> 00:26:33,420
0,510 510,780 780,990 990,1260 1260,1890
and C doesn't really have

767
00:26:33,750 --> 00:26:36,180
0,810 810,1140 1140,1470 1680,2190 2190,2430
any way of checking whether

768
00:26:36,180 --> 00:26:37,260
0,180 180,480 480,750 750,810 810,1080
that's actually true or not,|

769
00:26:37,260 --> 00:26:38,280
0,210 210,600 600,690 690,870 870,1020
because again they should have

770
00:26:38,280 --> 00:26:40,140
0,90 90,510 510,1080 1200,1620 1620,1860
a global picture where it's

771
00:26:40,140 --> 00:26:41,370
0,60 60,540 540,1020 1020,1140 1140,1230
a consistent view of the

772
00:26:41,370 --> 00:26:43,800
0,300 300,630 960,1800 1800,2250 2250,2430
file system,| nobody knows about

773
00:26:43,800 --> 00:26:45,330
0,240 240,510 510,960 960,1080 1080,1530
{signatures -} for each file.|

774
00:26:46,740 --> 00:26:47,910
0,240 240,360 360,540 540,720 720,1170
And so you see that

775
00:26:47,910 --> 00:26:49,410
0,540 540,780 780,1230 1230,1440 1440,1500
the simple design may be

776
00:26:49,410 --> 00:26:50,490
0,60 60,210 210,540 540,870 870,1080
a good starting point,| but

777
00:26:50,490 --> 00:26:52,740
0,120 120,300 300,540 540,1260 1500,2250
we need something more, {}

778
00:26:52,830 --> 00:26:54,690
0,510 510,1170 1200,1290 1290,1620 1620,1860
more complete| and I think

779
00:26:54,690 --> 00:26:56,550
0,180 180,330 330,990 1080,1500 1500,1860
we need something that really

780
00:26:56,550 --> 00:26:58,500
0,750 750,990 990,1110 1110,1410 1410,1950
ties all the file systems,

781
00:26:58,500 --> 00:26:59,640
0,120 120,210 210,510 510,1020 1020,1140
all the files together,| that

782
00:26:59,640 --> 00:27:01,290
0,300 300,810 810,1170 1170,1290 1290,1650
ties directories together, the content

783
00:27:01,290 --> 00:27:03,450
0,90 90,180 180,660 660,1230 1350,2160
of the directories together, {}|

784
00:27:03,450 --> 00:27:04,860
0,510 510,780 780,1170 1170,1320 1320,1410
and and we have to

785
00:27:04,860 --> 00:27:05,670
0,120 120,330 330,390 390,750 750,810
be able to decide in

786
00:27:05,670 --> 00:27:06,780
0,210 210,600 600,840 840,960 960,1110
some way,| what is the

787
00:27:06,780 --> 00:27:08,640
0,330 330,840 1200,1380 1380,1560 1560,1860
latest version of the file

788
00:27:08,640 --> 00:27:11,010
0,1050 1290,1500 1500,1890 1890,2100 2100,2370
system,| so that C can't

789
00:27:11,010 --> 00:27:13,050
0,120 120,480 480,1110 1320,1860 1860,2040
be tricked into {} in

790
00:27:13,050 --> 00:27:14,430
0,180 180,390 390,450 450,1050 1050,1380
this sort of problematic case,|

791
00:27:14,430 --> 00:27:16,230
0,480 570,930 930,1170 1170,1290 1290,1800
where one file is installed

792
00:27:16,230 --> 00:27:17,340
0,120 120,540 540,780 780,990 990,1110
and the other file is

793
00:27:17,340 --> 00:27:18,080
0,240 240,660
not installed.|

794
00:27:18,930 --> 00:27:20,520
0,210 210,390 390,750 750,1020 1020,1590
So that's really what the

795
00:27:20,550 --> 00:27:21,930
0,150 150,240 240,480 480,810 810,1380
{SUNDR -} paper tries to

796
00:27:21,990 --> 00:27:28,290
0,810 1080,1710 1710,5400 5400,5670 5670,6300
address| and the big idea

797
00:27:28,560 --> 00:27:29,940
0,540 540,900 900,1140 1140,1290 1290,1380
{} in the in the

798
00:27:29,940 --> 00:27:31,770
0,570 780,1410 1410,1590 1590,1680 1680,1830
paper,| {} and it just

799
00:27:31,770 --> 00:27:32,520
0,180 180,300 300,360 360,540 540,750
turns out to be just

800
00:27:32,520 --> 00:27:33,810
0,60 60,330 330,660 660,750 750,1290
a big idea in general,|

801
00:27:34,140 --> 00:27:35,060
0,720

802
00:27:35,220 --> 00:27:36,570
0,360 360,630 630,780 780,840 840,1350
{} and it's a conceptual

803
00:27:36,570 --> 00:27:37,620
0,420 420,630 630,750 750,840 840,1050
idea,| even though the paper

804
00:27:37,620 --> 00:27:39,540
0,210 210,570 600,1230 1230,1470 1470,1920
actually doesn't really {} implement

805
00:27:39,540 --> 00:27:41,280
0,120 120,300 300,600 600,1170 1290,1740
this big idea directly,| implement

806
00:27:41,280 --> 00:27:42,240
0,120 120,210 210,270 270,540 540,960
it in a more indirect

807
00:27:42,240 --> 00:27:44,910
0,390 600,1140 1350,1800 1800,2310 2310,2670
way,| {} it is an

808
00:27:44,910 --> 00:27:46,440
0,480 480,900 900,1290
incredibly powerful idea.|

809
00:27:47,130 --> 00:27:49,680
0,870 900,1020 1020,1230 1230,1830 2220,2550
So the big idea is

810
00:27:49,680 --> 00:27:50,820
0,570
to

811
00:27:51,080 --> 00:27:53,620
0,660 660,780 780,1410 1410,2070
have {} {signed,log,of}

812
00:27:54,690 --> 00:27:57,160
0,1350
operations.|

813
00:28:01,340 --> 00:28:02,690
0,180 180,240 240,480 480,1020 1020,1350
And of course you're well

814
00:28:02,690 --> 00:28:04,460
0,450 450,600 600,870 870,960 960,1770
familiar with logs of operations,|

815
00:28:04,700 --> 00:28:06,350
0,720 720,1050 1050,1440 1440,1560 1560,1650
and you and you know

816
00:28:06,350 --> 00:28:07,520
0,210 210,750 750,900 900,1080 1080,1170
you can| and this is

817
00:28:07,520 --> 00:28:08,840
0,420 420,840 840,1050 1050,1140 1140,1320
basically a sort of {}

818
00:28:08,840 --> 00:28:09,890
0,300 300,360 360,720 720,840 840,1050
[beefed] up version of it,|

819
00:28:10,190 --> 00:28:11,870
0,330 330,840 840,1050 1050,1530 1530,1680
{} where there signatures on

820
00:28:11,870 --> 00:28:13,430
0,330 330,720 720,930 930,1080 1080,1560
log entries,| that {both -}

821
00:28:13,430 --> 00:28:14,900
0,570 630,900 900,1020 1020,1350 1350,1470
consider cover the entry as

822
00:28:14,900 --> 00:28:16,560
0,300 300,480 510,960 960,1560
well as preceding entries.|

823
00:28:17,150 --> 00:28:19,520
0,450 750,1410 1620,1950 1950,2160 2160,2370
{} And {} this turns

824
00:28:19,520 --> 00:28:21,620
0,120 120,210 210,690 720,1350 1770,2100
out to be {} as

825
00:28:21,620 --> 00:28:22,580
0,330 330,540 540,630 630,810 810,960
we've seen in all the

826
00:28:22,580 --> 00:28:24,350
0,480 480,870 870,1260 1260,1470 1470,1770
previous distributed systems and failure

827
00:28:24,350 --> 00:28:26,000
0,720 720,1080 1080,1200 1200,1410 1410,1650
recovery protocols,| we talk about

828
00:28:26,000 --> 00:28:27,380
0,90 90,600 600,690 690,1140 1140,1380
the log is actually {}

829
00:28:27,530 --> 00:28:29,930
0,420 420,810 810,1200 1200,1710 1830,2400
very powerful idea to think

830
00:28:29,930 --> 00:28:31,130
0,510 510,600 600,990 990,1080 1080,1200
about the correctness of the

831
00:28:31,130 --> 00:28:33,230
0,540 780,1260 1260,1590 1590,1650 1650,2100
system| and in the same

832
00:28:33,230 --> 00:28:35,150
0,450 450,930 930,1290 1290,1560 1560,1920
way that idea is carried

833
00:28:35,150 --> 00:28:37,460
0,660 690,1140 1140,1380 1380,1860 1890,2310
for here in this {Byzantine

834
00:28:37,460 --> 00:28:38,340
0,150 150,810
-} context.|

835
00:28:38,880 --> 00:28:40,620
0,510 510,660 660,810 810,1680 1680,1740
{} And so let me

836
00:28:40,620 --> 00:28:43,060
0,390 390,960 1200,1500 1500,2010
draw a simple log,|

837
00:28:45,660 --> 00:28:47,580
0,390 1110,1620 1620,1770 1770,1860 1860,1920
so captures this in the

838
00:28:47,580 --> 00:28:49,410
0,510 720,930 930,1140 1140,1470 1470,1830
paper,| {} so log whatever

839
00:28:49,410 --> 00:28:50,580
0,120 120,270 270,750 750,960 960,1170
have some entries| and let's

840
00:28:50,580 --> 00:28:52,440
0,240 240,330 330,510 510,1320 1470,1860
say you know we're coming

841
00:28:52,440 --> 00:28:54,090
0,120 120,840 840,1050 1050,1380 1380,1650
up we are talking about,|

842
00:28:54,090 --> 00:28:56,040
0,300 600,750 750,780 780,1680
so it's {} modification,

843
00:28:56,220 --> 00:28:58,950
0,180 180,1080 2130,2250 2250,2430 2430,2730
a mod, you know {auth.py

844
00:28:58,950 --> 00:29:00,560
0,1140
-},|

845
00:29:01,330 --> 00:29:03,280
0,240 240,480 480,1140 1170,1770 1770,1950
{} by A, signed by

846
00:29:03,280 --> 00:29:05,460
0,570
A,|

847
00:29:05,760 --> 00:29:06,990
0,150 150,270 270,480 480,540 540,1230
you know there's a mod,|

848
00:29:07,620 --> 00:29:08,760
0,270 270,480 480,660 660,1050 1050,1140
if everything goes well, you

849
00:29:08,760 --> 00:29:10,410
0,120 120,270 270,330 330,720 720,1650
know there's a mod of

850
00:29:10,770 --> 00:29:11,920
0,720
the

851
00:29:12,160 --> 00:29:14,280
0,540 540,780 780,1620
{bank.py - -}

852
00:29:16,200 --> 00:29:18,380
0,450 450,780 780,1530
signed by B.|

853
00:29:20,630 --> 00:29:21,800
0,450 450,600 600,750 750,930 930,1170
And as we'll talk about

854
00:29:21,800 --> 00:29:22,490
0,60 60,120 120,480 480,600 600,690
in a second| you know

855
00:29:22,490 --> 00:29:23,750
0,120 120,330 330,600 600,930 930,1260
it turns out that not

856
00:29:23,750 --> 00:29:26,000
0,570 600,900 900,1050 1050,2040
only are the modifications

857
00:29:26,170 --> 00:29:27,160
0,300 300,480 480,570 570,810 810,990
{} in the log,| but

858
00:29:27,160 --> 00:29:28,930
0,510 510,750 750,1410 1440,1650 1650,1770
also the fetch of the

859
00:29:28,930 --> 00:29:30,220
0,210 210,1020
read operations.|

860
00:29:32,050 --> 00:29:34,120
0,330 330,1050 1140,2010
So fetch {}

861
00:29:35,650 --> 00:29:36,970
0,360 360,450 450,900 900,1080 1080,1320
fetch the log {you,know} signed

862
00:29:36,970 --> 00:29:39,680
0,120 120,810
by C,

863
00:29:40,160 --> 00:29:41,780
0,150 150,450 450,750 750,930 930,1620
{auth.py - - - -},|

864
00:29:43,750 --> 00:29:46,060
0,270 270,330 330,900 960,1680 1860,2310
and then fetch of {bank.py

865
00:29:46,060 --> 00:29:47,600
0,180 210,930
- -},

866
00:29:48,740 --> 00:29:51,480
0,390 390,600 600,1110
singed by C.|

867
00:29:52,620 --> 00:29:53,910
0,150 150,330 330,720 720,750 750,1290
We'll talk about {} those

868
00:29:53,910 --> 00:29:55,770
0,480 480,660 660,1080 1170,1470 1470,1860
operations, so the fetch operations,

869
00:29:55,770 --> 00:29:57,060
0,60 60,240 240,540 720,1050 1050,1290
a little bit,| I first

870
00:29:57,060 --> 00:29:57,780
0,120 120,180 180,360 360,660 660,720
want to talk about how

871
00:29:57,780 --> 00:30:00,660
0,1050 1140,1920 1920,2040 2040,2370 2370,2880
to operate the preceding operations

872
00:30:00,660 --> 00:30:02,620
0,270 270,1230
for modifications.|

873
00:30:03,180 --> 00:30:04,200
0,510

874
00:30:05,200 --> 00:30:06,520
0,240 240,420 420,510 510,810 810,1320
So, first of all, the

875
00:30:06,550 --> 00:30:08,350
0,210 210,660 660,960 960,1560 1560,1800
what's important to realize is

876
00:30:08,350 --> 00:30:09,760
0,420 420,600 600,1110 1110,1290 1290,1410
that,| this signature that is

877
00:30:09,760 --> 00:30:11,890
0,210 210,960 1020,1590 1650,1860 1860,2130
in the record not only

878
00:30:11,890 --> 00:30:14,740
0,390 390,2040 2040,2460 2640,2790 2790,2850
covers {the,current} records,| but it

879
00:30:14,740 --> 00:30:16,090
0,240 240,660 660,960 960,1050 1050,1350
also covers all the records

880
00:30:16,090 --> 00:30:16,960
0,480
before.|

881
00:30:23,590 --> 00:30:24,430
0,240 240,330 330,690 690,810 810,840
Let me stop for a

882
00:30:24,430 --> 00:30:25,420
0,300 300,570 570,720 720,840 840,990
second here,| because I'm not

883
00:30:25,420 --> 00:30:26,710
0,60 60,300 300,570 570,930 930,1290
a hundred percent sure if

884
00:30:27,070 --> 00:30:28,420
0,270 270,570 570,750 750,990 990,1350
can everybody still hear me.|

885
00:30:30,220 --> 00:30:32,080
0,780 810,1020 1020,1200 1200,1620 1680,1860
Yeah.| Yes.| {} Okay, I

886
00:30:32,080 --> 00:30:33,580
0,360 360,510 510,1140 1230,1350 1350,1500
got my ipad and I

887
00:30:33,580 --> 00:30:34,810
0,360 360,480 480,600 600,690 690,1230
walked out of the zoom

888
00:30:34,990 --> 00:30:37,390
0,510 510,1200 1200,1500 1500,1830 1830,2400
session,| I always walking twice

889
00:30:37,630 --> 00:30:40,120
0,630 630,1080 1080,1290 1290,2280 2280,2490
{} and my ipad logged

890
00:30:40,120 --> 00:30:41,530
0,270 300,660 930,1110 1110,1290 1290,1410
out,| so I just want

891
00:30:41,530 --> 00:30:42,670
0,60 60,180 180,450 450,600 600,1140
to make sure I'm still

892
00:30:42,700 --> 00:30:43,570
0,300 300,390 390,630 630,780 780,870
talking to you and you

893
00:30:43,570 --> 00:30:44,260
0,90 90,270 270,480
can hear me,|

894
00:30:46,140 --> 00:30:47,070
0,210 210,540 540,720 720,840 840,930
and start that is the

895
00:30:47,070 --> 00:30:49,050
0,450 660,1230 1260,1440 1440,1680 1680,1980
case.| Okay, so let's just

896
00:30:49,050 --> 00:30:51,600
0,540 630,1590 1620,2220
proceed {} the.|

897
00:30:52,030 --> 00:30:52,860
0,210 210,570
So, actually.|

898
00:31:20,620 --> 00:31:22,120
0,150 150,390 390,480 480,810 810,1500
I think we lost Frans.|

899
00:32:05,030 --> 00:32:06,050
0,150 150,360 360,540 540,600 600,1020
Can people hear me now,

900
00:32:08,540 --> 00:32:09,840
0,150 150,510 510,690 690,990
Does anybody hear me.|

901
00:32:11,620 --> 00:32:15,040
0,720 750,1710 2160,2670 2730,3270 3270,3420
Yes.| Okay.| Okay, {} I

902
00:32:15,040 --> 00:32:15,850
0,120 120,210 210,300 300,600 600,810
don't know if anything weird

903
00:32:15,850 --> 00:32:17,050
0,270 270,510 510,660 660,930 930,1200
happens {on,your} end,| but my

904
00:32:17,050 --> 00:32:18,420
0,300 420,990
end, {

905
00:32:18,900 --> 00:32:20,730
0,420 630,1260 1260,1440 1440,1680 1680,1830
-} I got logged out

906
00:32:20,730 --> 00:32:21,570
0,60 60,360 360,390 390,630 630,840
of Zoom and log back

907
00:32:21,570 --> 00:32:22,160
0,300
in.|

908
00:32:24,340 --> 00:32:26,440
0,390 390,750 750,1110 1140,1650 1650,2100
Maybe there's a Byzantine server

909
00:32:26,440 --> 00:32:28,880
0,120 120,660 1380,2040
at work. {}|

910
00:32:29,440 --> 00:32:32,140
0,600 600,1320 1530,1830 1830,2580 2580,2700
Okay, {} let me hold

911
00:32:32,140 --> 00:32:33,300
0,120 120,330 330,810
on one second,

912
00:32:33,500 --> 00:32:35,400
0,570 630,810 810,1230 1230,1560
and get myself in.|

913
00:32:49,800 --> 00:32:51,210
0,660 660,840 840,960 960,1260 1260,1410
And let me see, {}

914
00:32:51,210 --> 00:32:52,740
0,330 330,540 540,690 690,1230
that video goes off.|

915
00:32:56,880 --> 00:32:57,620
0,60

916
00:33:07,420 --> 00:33:10,540
0,480 480,990 1020,1530 1620,2400 2970,3120
{} Camera, okay, {} let

917
00:33:10,540 --> 00:33:11,380
0,60 60,210 210,300 300,420 420,840
me know if I'm good.|

918
00:33:14,280 --> 00:33:16,170
0,450 840,1440 1440,1500 1500,1650 1650,1890
Okay, good.| {No -} screen

919
00:33:16,170 --> 00:33:18,090
0,240 240,480 480,690 690,1170 1290,1920
sharing yet, but yeah.| Okay,

920
00:33:18,960 --> 00:33:20,790
0,120 120,930 930,1050 1050,1290 1290,1830
I hope this works better,|

921
00:33:20,820 --> 00:33:22,440
0,690 720,1350
{okay -},

922
00:33:22,680 --> 00:33:23,460
0,330 330,390 390,570 570,630 630,780
so it was at this

923
00:33:23,460 --> 00:33:25,290
0,120 120,420 420,720 720,1680 1740,1830
very important point,| where the

924
00:33:25,290 --> 00:33:26,880
0,360 360,600 600,810 810,1110 1110,1590
signature just not cover the

925
00:33:26,910 --> 00:33:29,010
0,450 450,570 570,1230 1320,1740 1740,2100
{log,entry -} itself,| {} but

926
00:33:29,010 --> 00:33:30,090
0,240 240,510 510,600 600,690 690,1080
also covers all the preceding

927
00:33:30,090 --> 00:33:31,100
0,240 240,780
log entries.|

928
00:33:31,480 --> 00:33:33,910
0,570 750,1170 1170,1680 1710,2340 2340,2430
{} And so when you

929
00:33:33,910 --> 00:33:36,190
0,240 240,570 570,1080 1080,1500 1530,2280
know A as this modification

930
00:33:36,190 --> 00:33:38,140
0,300 300,810 960,1260 1260,1560 1560,1950
to {auth.py -} to the

931
00:33:38,170 --> 00:33:39,790
0,570 630,840 840,1110 1110,1320 1320,1620
log,| it signs the log

932
00:33:39,790 --> 00:33:41,650
0,480 480,960 960,1290 1290,1500 1500,1860
records itself plus the preceding

933
00:33:41,650 --> 00:33:42,820
0,360 390,840 840,960 960,1080 1080,1170
log record,| so you can

934
00:33:42,820 --> 00:33:43,780
0,150 150,390 390,540 540,720 720,960
think about this,| that the

935
00:33:43,810 --> 00:33:45,100
0,480 480,840 840,960 960,1080 1080,1290
preceding log is may be

936
00:33:45,100 --> 00:33:46,870
0,660 660,1170 1200,1320 1320,1650 1650,1770
represented by,| the content of

937
00:33:46,870 --> 00:33:49,450
0,360 390,990 1080,1800 1800,2340 2340,2580
the preceding log is {}

938
00:33:49,450 --> 00:33:52,120
0,540 540,1140 1170,1740 1920,2310 2310,2670
cryptographic hash,| and a in

939
00:33:52,120 --> 00:33:54,400
0,150 150,570 570,1230 1470,2250 2250,2280
the record, basically { -}

940
00:33:54,460 --> 00:33:56,350
0,990 990,1230 1230,1410 1410,1560 1560,1890
modification to {auth.py - -},|

941
00:33:56,350 --> 00:33:58,990
0,120 120,420 420,870 1140,1770 1830,2640
you know the {} the

942
00:33:59,290 --> 00:34:00,790
0,510 510,900 900,1050 1050,1320 1320,1500
cryptographic hash the preceding part

943
00:34:00,790 --> 00:34:01,660
0,60 60,150 150,420 420,660 690,870
of the log| is {}

944
00:34:01,660 --> 00:34:03,430
0,600 600,1260 1290,1560 1560,1680 1680,1770
included and covered by the

945
00:34:03,430 --> 00:34:05,110
0,510 720,1080 1080,1140 1140,1230 1230,1680
signature.| Just to be clear,

946
00:34:05,140 --> 00:34:06,250
0,270 300,570 570,780 780,900 900,1110
we still can't see the

947
00:34:06,280 --> 00:34:08,080
0,480 1050,1110 1320,1530 1530,1710 1710,1800
screen.| You can't see the

948
00:34:08,080 --> 00:34:09,960
0,480
screen,

949
00:34:10,230 --> 00:34:11,640
0,270 270,540 540,780 780,1230 1230,1410
{} screen hasn't changed,| but,

950
00:34:11,640 --> 00:34:13,060
0,420 420,510 510,630 630,1140
{} {let,me - -}

951
00:34:13,720 --> 00:34:15,190
0,570 600,1050 1050,1230 1230,1350 1350,1470
{} see if I can

952
00:34:15,190 --> 00:34:16,640
0,120 120,450 450,720 720,1110
do something about that.|

953
00:34:17,340 --> 00:34:19,200
0,630 660,1050 1050,1320 1350,1470 1470,1860
And {[] -} I guess,|

954
00:34:19,990 --> 00:34:20,700
0,420

955
00:34:21,180 --> 00:34:22,500
0,420 420,660 660,960 960,1110 1110,1320
Zoom still thinks there's actually

956
00:34:22,500 --> 00:34:24,120
0,300 300,360 360,750 750,1020 1500,1620
sharing the screen,| but it

957
00:34:24,120 --> 00:34:25,500
0,210 210,390 390,570 570,990 990,1380
doesn't look like actually is.|

958
00:34:35,230 --> 00:34:36,260
0,150 150,300 300,720
How about this?|

959
00:34:37,680 --> 00:34:38,550
0,390 390,420 420,540 540,630 630,870
Yep, I can see now.|

960
00:34:39,030 --> 00:34:41,010
0,300 300,480 480,750 1590,1860 1860,1980
Okay, thank you.| Okay, so

961
00:34:41,010 --> 00:34:42,450
0,270 270,480 480,720 720,990 990,1440
I didn't change anything yet,|

962
00:34:42,510 --> 00:34:43,230
0,330 330,420 420,510 510,690 690,720
other than I think I

963
00:34:43,230 --> 00:34:43,920
0,90 90,210 210,270 270,510 510,690
was going to draw the

964
00:34:43,920 --> 00:34:45,600
0,240 240,510 510,690 690,1230 1320,1680
next arrow,| which basically when

965
00:34:45,600 --> 00:34:47,010
0,270 270,960 990,1110 1110,1230 1230,1410
these signs you know it's

966
00:34:47,010 --> 00:34:48,450
0,330 330,660 660,810 810,900 900,1440
actually covered all the preceding

967
00:34:48,450 --> 00:34:49,380
0,420 420,660
entries too.|

968
00:34:50,320 --> 00:34:51,400
0,360 360,600 600,690 690,840 840,1080
And this is a good,

969
00:34:51,400 --> 00:34:54,520
0,300 300,810 990,1380 1380,2040 2160,3120
correct,| because {} when {}

970
00:34:54,910 --> 00:34:57,790
0,810 1110,1920 1920,2130 2130,2640 2640,2880
{} client {you,know} C actually

971
00:34:57,790 --> 00:34:59,320
0,750 750,840 840,1140 1140,1290 1290,1530
receives you know or gets

972
00:34:59,320 --> 00:35:00,610
0,240 240,570 570,690 690,900 900,1290
actually sees the log entry

973
00:35:00,610 --> 00:35:04,570
0,210 210,630 960,1740 1830,2610 2730,3960
for B,| then {} it's

974
00:35:04,570 --> 00:35:05,920
0,600 600,720 720,780 780,1230 1230,1350
impossible for the server to

975
00:35:05,920 --> 00:35:07,750
0,510 540,960 960,1260 1260,1620 1620,1830
drop the log entry of

976
00:35:07,750 --> 00:35:09,580
0,510 600,1020 1020,1620 1620,1740 1740,1830
A,| {} because you know

977
00:35:09,580 --> 00:35:10,960
0,180 180,360 360,480 480,990 990,1380
that will be detected when

978
00:35:10,960 --> 00:35:13,060
0,480 480,1080 1080,1740 1770,2040 2040,2100
{C,actually,detect -} signature on the

979
00:35:13,060 --> 00:35:14,100
0,240 240,510 510,630 630,900
log entry of B.|

980
00:35:14,810 --> 00:35:15,920
0,240 240,540 570,750 750,930 930,1110
And so we really made

981
00:35:15,950 --> 00:35:17,810
0,270 270,480 480,720 720,1320 1560,1860
a big step forward, {}|

982
00:35:17,810 --> 00:35:19,550
0,180 180,240 240,570 570,960 1200,1740
in the sense that {}

983
00:35:19,550 --> 00:35:21,260
0,480 480,720 720,1140 1140,1470 1470,1710
it's much harder for the

984
00:35:21,260 --> 00:35:23,570
0,390 390,600 600,750 750,1620 1770,2310
server now to selectively {drop,log

985
00:35:23,570 --> 00:35:24,600
0,300 300,840
-} entries.|

986
00:35:25,590 --> 00:35:26,910
0,150 150,690 690,930 930,1140 1140,1320
So that's so we're {}

987
00:35:26,910 --> 00:35:28,470
0,210 210,690 690,870 870,1020 1410,1560
pretty good pretty good, you

988
00:35:28,470 --> 00:35:30,210
0,150 150,450 480,1080 1080,1410 1410,1740
know the servers cannot drop

989
00:35:30,210 --> 00:35:31,420
0,390
A,|

990
00:35:34,910 --> 00:35:36,120
0,900

991
00:35:36,540 --> 00:35:38,400
0,210 210,1020
and keep

992
00:35:38,840 --> 00:35:39,620
0,210

993
00:35:39,830 --> 00:35:42,440
0,420 420,1320
these modifications.|

994
00:35:44,250 --> 00:35:45,870
0,510 540,780 780,1110 1110,1380 1380,1620
So that's actually a big

995
00:35:45,870 --> 00:35:47,610
0,330 330,540 540,990 1320,1530 1530,1740
big step forward,| so let's

996
00:35:47,610 --> 00:35:48,480
0,420 420,480 480,630 630,750 750,870
look a little bit more

997
00:35:48,480 --> 00:35:49,770
0,60 60,630 630,840 840,930 930,1290
in detail,| how this actually

998
00:35:49,770 --> 00:35:50,640
0,90 90,210 210,270 270,510 510,870
is going to play out,|

999
00:35:50,850 --> 00:35:52,590
0,300 300,480 480,570 570,1170 1170,1740
so we're a client C

1000
00:35:53,700 --> 00:35:56,520
0,900 900,1140 1140,1770 1770,2130 2160,2820
and {you,know,we're} fetching the log

1001
00:35:56,520 --> 00:35:57,870
0,120 120,510 510,870 870,1260 1290,1350
to basically pull out you

1002
00:35:57,870 --> 00:35:59,100
0,180 180,570 570,1050 1050,1140 1140,1230
know the distribution of the

1003
00:35:59,100 --> 00:36:00,300
0,480 480,600 600,1020 1020,1140 1140,1200
software| to install on a

1004
00:36:00,300 --> 00:36:02,130
0,300 300,840 1170,1500 1500,1590 1590,1830
particular machine,| {} the first

1005
00:36:02,130 --> 00:36:03,360
0,180 180,540 540,990 990,1140 1140,1230
thing {the,client} does,| you know

1006
00:36:03,360 --> 00:36:04,560
0,540 540,1050
it actually

1007
00:36:04,600 --> 00:36:06,340
0,480 480,600 600,690 690,1350
check all the signatures.|

1008
00:36:13,990 --> 00:36:15,550
0,210 210,390 390,450 450,750 1230,1560
And {} you know always

1009
00:36:15,550 --> 00:36:16,210
0,60 60,300 300,360 360,570 570,660
the question of course is

1010
00:36:16,210 --> 00:36:17,380
0,180 180,600 600,720 720,990 990,1170
like,| when you know you

1011
00:36:17,380 --> 00:36:18,490
0,180 180,240 240,630 660,780 780,1110
want to check the signature

1012
00:36:18,490 --> 00:36:19,690
0,330 330,570 570,630 630,900 900,1200
log entry {you,know} which public

1013
00:36:19,690 --> 00:36:21,700
0,120 120,210 210,390 390,990 1350,2010
key do you use, {}|

1014
00:36:21,700 --> 00:36:22,960
0,540 540,750 750,990 990,1110 1110,1260
and {} because you want

1015
00:36:22,960 --> 00:36:25,360
0,60 60,210 210,450 450,1410 1950,2400
to make sure that,| you're

1016
00:36:25,360 --> 00:36:27,220
0,150 150,300 300,750 750,1440 1470,1860
not being tricked in accepting

1017
00:36:27,220 --> 00:36:28,820
0,120 120,750
{[] -}

1018
00:36:29,220 --> 00:36:30,360
0,600 600,720 720,960 960,1080 1080,1140
modification by A,| but it

1019
00:36:30,360 --> 00:36:31,290
0,180 180,270 270,390 390,750 750,930
turns out that {actually,A} was

1020
00:36:31,290 --> 00:36:32,580
0,120 120,180 180,480 480,780 960,1290
not the person actually signed

1021
00:36:32,580 --> 00:36:33,120
0,210
it.|

1022
00:36:33,350 --> 00:36:34,520
0,150 150,210 210,420 420,600 600,1170
And it turns out basically

1023
00:36:34,790 --> 00:36:37,880
0,1200 1650,2160 2160,2430 2430,2730 2730,3090
to figure out which key

1024
00:36:37,880 --> 00:36:39,980
0,120 120,450 450,600 600,870 870,2100
to use to actually verify

1025
00:36:40,040 --> 00:36:43,280
0,60 60,780 960,1650 2460,2820 2820,3240
the signature,| the key uses

1026
00:36:43,280 --> 00:36:44,360
0,120 120,420 420,510 510,600 600,1080
the owner of the file,|

1027
00:36:45,250 --> 00:36:46,780
0,330 330,480 480,750 750,1230
so the public key

1028
00:36:47,120 --> 00:36:48,410
0,510 510,600 600,1080 1080,1170 1170,1290
need to correspond to the

1029
00:36:48,410 --> 00:36:51,260
0,270 270,330 330,450 450,1050 2430,2850
owner of the file| and

1030
00:36:51,290 --> 00:36:53,900
0,510 510,810 810,930 930,1470 1830,2610
ignoring groups for now, {}|

1031
00:36:53,900 --> 00:36:54,980
0,210 210,330 330,720 720,990 990,1080
you know basically only the

1032
00:36:54,980 --> 00:36:55,790
0,270 270,360 360,450 450,720 720,810
owner of the file was

1033
00:36:55,790 --> 00:36:57,110
0,360 360,450 450,870 870,960 960,1320
allowed to modify a file.|

1034
00:36:57,880 --> 00:37:00,370
0,360 360,810 810,1230 1230,2100 2130,2490
So for simple for slightly

1035
00:37:00,370 --> 00:37:01,660
0,570 570,810 810,900 900,1050 1050,1290
simplified,| we can think about

1036
00:37:01,660 --> 00:37:03,370
0,540 540,1020 1020,1140 1170,1560 1560,1710
it {auth.py - -} is

1037
00:37:03,370 --> 00:37:04,960
0,240 240,420 420,900 1230,1470 1470,1590
owned by A| and the

1038
00:37:04,960 --> 00:37:06,010
0,390 390,450 450,570 570,960 960,1050
id of the file is

1039
00:37:06,010 --> 00:37:07,090
0,390 390,480 480,780 780,960 960,1080
basically the public key of

1040
00:37:07,090 --> 00:37:09,760
0,270 840,1410 1410,1890 1980,2430 2430,2670
A| and so we know

1041
00:37:09,760 --> 00:37:14,680
0,870 900,1860 1860,1950 1950,2520 2730,4920
which {public,key} to use and

1042
00:37:14,740 --> 00:37:16,750
0,420 420,780 780,870 870,1500 1590,2010
can verify the signature {}

1043
00:37:16,750 --> 00:37:17,950
0,210 210,420 420,570 570,930 1050,1200
with it,| and so if

1044
00:37:17,950 --> 00:37:19,720
0,300 300,780 780,1140 1140,1170 1170,1770
somebody else makes a modification

1045
00:37:19,720 --> 00:37:20,800
0,90 90,390 390,450 450,630 630,1080
that pretends to be A,|

1046
00:37:20,950 --> 00:37:21,730
0,150 150,330 330,540 540,600 600,780
{} that actually is not

1047
00:37:21,730 --> 00:37:22,600
0,120 120,180 180,450 450,750
going to check out.|

1048
00:37:23,560 --> 00:37:24,580
0,150 150,270 270,510 510,780 780,1020
So it's really only A

1049
00:37:24,580 --> 00:37:25,990
0,120 120,360 360,450 450,660 660,1410
can connects and make modifications

1050
00:37:25,990 --> 00:37:26,940
0,390 390,630
similar {for,B}.|

1051
00:37:28,540 --> 00:37:29,560
0,150 150,390 390,630 630,720 720,1020
So that's part of the

1052
00:37:29,800 --> 00:37:31,090
0,240 240,570 720,1020 1020,1170 1170,1290
you know one thing that's

1053
00:37:31,090 --> 00:37:33,490
0,270 270,870 900,1410 1410,2070 2220,2400
actually clever about SUNDR,| I'm

1054
00:37:33,490 --> 00:37:34,090
0,180 180,330 330,450 450,510 510,600
not really going to be

1055
00:37:34,090 --> 00:37:35,620
0,330 330,720 930,1170 1170,1410 1410,1530
talking about,| some since the

1056
00:37:35,620 --> 00:37:37,120
0,300 300,630 630,780 780,1020 1020,1500
file system is actually doubling

1057
00:37:37,120 --> 00:37:38,260
0,300 300,390 390,510 510,810 810,1140
both as a file system,|

1058
00:37:38,260 --> 00:37:40,810
0,750 750,840 840,1110 1110,1440 1440,2550
as a public key {}

1059
00:37:41,110 --> 00:37:44,680
0,570 570,1200 1830,2730 2730,3060 3060,3570
public key infrastructure or distribution

1060
00:37:44,680 --> 00:37:47,170
0,600 870,1740 1740,2010 2010,2220 2220,2490
infrastructure,| {} and so it's

1061
00:37:47,170 --> 00:37:48,970
0,300 300,840 840,1080 1080,1410 1410,1800
actually possible to something basically

1062
00:37:48,970 --> 00:37:50,740
0,390 390,570 570,1140 1140,1440 1440,1770
why we determine like which

1063
00:37:50,740 --> 00:37:52,150
0,390 390,600 600,810 810,1170 1170,1410
user has which public key.|

1064
00:37:53,380 --> 00:37:54,400
0,270 270,420 420,540 540,720 720,1020
{} But I'm not really

1065
00:37:54,400 --> 00:37:55,210
0,180 180,390 390,570 570,720 720,810
gonna talk about this,| I

1066
00:37:55,210 --> 00:37:56,080
0,210 210,330 330,390 390,690 690,870
really want to focus on

1067
00:37:56,080 --> 00:37:58,120
0,240 270,990 990,1530 1530,1740 1740,2040
the consistency aspects| and the

1068
00:37:58,210 --> 00:38:00,280
0,330 330,750 750,1230 1230,1860
more distributed systems aspects.|

1069
00:38:00,990 --> 00:38:01,830
0,60 60,300 300,480 480,630 630,840
The second thing that the

1070
00:38:01,830 --> 00:38:04,800
0,240 240,630 900,1710 1740,2640
client does is check

1071
00:38:05,020 --> 00:38:09,860
0,570 1530,2160 2160,2700
{its,own} last entry.|

1072
00:38:13,410 --> 00:38:15,000
0,150 150,270 270,660 660,930 930,1590
And this is to protect

1073
00:38:15,000 --> 00:38:16,530
0,390 390,630 630,990 990,1230 1230,1530
clients from actually being rolled

1074
00:38:16,530 --> 00:38:18,270
0,300 300,420 420,510 510,930 930,1740
back by the server {in,time},|

1075
00:38:18,270 --> 00:38:19,740
0,270 270,360 360,690 690,990 990,1470
so the server can actually

1076
00:38:19,740 --> 00:38:21,180
0,330 600,660 660,930 930,1140 1140,1440
by the client checks always

1077
00:38:21,180 --> 00:38:22,890
0,300 300,810 1260,1410 1410,1500 1500,1710
last entry,| if its last

1078
00:38:22,890 --> 00:38:24,300
0,390 390,540 540,600 600,870 870,1410
entries in the log steal,|

1079
00:38:24,450 --> 00:38:25,530
0,270 270,780 780,870 870,990 990,1080
{} then you know the

1080
00:38:25,530 --> 00:38:27,150
0,330 330,540 540,960 960,1230 1230,1620
only way forward for the

1081
00:38:27,150 --> 00:38:29,850
0,1440 1470,1740 1740,1860 1860,2250 2250,2700
attacker is to actually roll

1082
00:38:29,850 --> 00:38:30,900
0,90 90,330 330,600 600,930 930,1050
the file system for A

1083
00:38:30,900 --> 00:38:32,790
0,300 300,570 570,1170 1470,1650 1650,1890
can roll backwards,| so C

1084
00:38:32,790 --> 00:38:33,840
0,120 120,450 450,720 720,780 780,1050
will check whether the []

1085
00:38:33,840 --> 00:38:35,190
0,90 90,240 240,660 660,1200 1200,1350
of its previous operations are

1086
00:38:35,190 --> 00:38:37,320
0,120 120,330 690,1620 1620,2010 2010,2130
in it| and confirm that

1087
00:38:37,320 --> 00:38:38,200
0,240 240,450 450,570 570,750
they're still in it,|

1088
00:38:39,600 --> 00:38:41,130
0,300 300,780 780,1110 1110,1410 1410,1530
{} {actually,it's} last entries still

1089
00:38:41,130 --> 00:38:43,020
0,240 720,1230 1230,1380 1380,1500 1500,1890
in it.| Is the question

1090
00:38:43,020 --> 00:38:46,290
0,600 1050,1320 1320,1650 1650,2370 2700,3270
here,| {} this only I

1091
00:38:46,890 --> 00:38:48,840
0,510 510,900 900,1440 1440,1800 1800,1950
think this attack from the

1092
00:38:48,840 --> 00:38:50,610
0,450 450,570 570,1260 1260,1500 1500,1770
server to rollback,| would only

1093
00:38:50,610 --> 00:38:53,430
0,510 540,1140 1410,1920 1920,2190 2190,2820
work if no other client

1094
00:38:53,430 --> 00:38:55,530
0,540 540,660 660,840 840,1440 1590,2100
wrote to the log, {}|

1095
00:38:56,860 --> 00:38:59,410
0,420 450,750 750,1530 1650,2010 2010,2550
{} like after this client's

1096
00:38:59,410 --> 00:39:01,360
0,390 390,780 780,1020 1020,1200 1200,1950
last entry, right,| because otherwise

1097
00:39:01,390 --> 00:39:03,790
0,420 420,1020 1020,1200 1710,2220 2220,2400
checking signatures would figure that

1098
00:39:03,790 --> 00:39:04,580
0,360
out.|

1099
00:39:04,800 --> 00:39:08,250
0,510 510,1080 1080,1530 1530,1980 3030,3450
{} Yeah, although you know

1100
00:39:08,250 --> 00:39:09,120
0,300 300,450 450,690 690,810 810,870
let's talk about in a

1101
00:39:09,120 --> 00:39:10,110
0,270 270,540 540,690 690,900 900,990
second,| maybe I mean you

1102
00:39:10,110 --> 00:39:10,980
0,120 120,330 330,510 510,600 600,870
could always play a fork

1103
00:39:10,980 --> 00:39:12,540
0,510 570,750 750,900 900,1020 1020,1560
attack,| so you can always

1104
00:39:12,570 --> 00:39:14,160
0,720 750,840 840,990 990,1380 1380,1590
split you know the use

1105
00:39:14,160 --> 00:39:15,330
0,90 90,180 180,570 570,750 750,1170
of the {file,system} in multiple

1106
00:39:15,330 --> 00:39:17,220
0,510 720,1560 1560,1650 1650,1770 1770,1890
users,| but you can at

1107
00:39:17,220 --> 00:39:18,330
0,210 210,480 480,690 690,1020 1020,1110
least not roll back the

1108
00:39:18,330 --> 00:39:19,740
0,360 360,570 570,660 660,1020 1020,1410
client,| once the client saw

1109
00:39:19,740 --> 00:39:21,630
0,30 30,570 570,870 870,1350 1710,1890
a particular file system,| you

1110
00:39:21,630 --> 00:39:22,770
0,270 270,390 390,750 750,840 840,1140
can't go backwards in time.|

1111
00:39:24,150 --> 00:39:25,320
0,180 180,300 300,690 690,870 870,1170
{} The client could, {the,server}

1112
00:39:25,320 --> 00:39:26,400
0,90 90,180 180,540 540,840 840,1080
it can present different file

1113
00:39:26,400 --> 00:39:28,140
0,330 330,450 450,960 990,1530 1560,1740
systems in future,| but you

1114
00:39:28,140 --> 00:39:29,160
0,210 210,360 360,720
can't roll back.|

1115
00:39:31,020 --> 00:39:31,920
0,600

1116
00:39:32,280 --> 00:39:34,800
0,450 450,1020 1290,2190
Third part, {}

1117
00:39:35,100 --> 00:39:36,150
0,510 510,720 720,900 900,990 990,1050
the first place with the

1118
00:39:36,150 --> 00:39:37,440
0,240 240,630 630,720 720,870 870,1290
[] industry is a [constructive]

1119
00:39:37,440 --> 00:39:38,560
0,270 270,690
file system.|

1120
00:39:41,930 --> 00:39:43,490
0,210 210,810 810,900 900,1260 1260,1560
So after you know, it

1121
00:39:43,490 --> 00:39:44,990
0,450 450,780 780,930 930,1170 1170,1500
knows actually it's not rolled

1122
00:39:44,990 --> 00:39:45,890
0,60 60,420 420,750 750,810 810,900
{} past version of the

1123
00:39:45,890 --> 00:39:47,870
0,240 240,780 870,1410 1410,1680 1680,1980
file system,| {} it basically

1124
00:39:47,870 --> 00:39:49,580
0,420 420,510 510,600 600,1350 1350,1710
applies all the modifications,| basically

1125
00:39:49,580 --> 00:39:50,720
0,240 240,300 300,540 540,840 840,1140
builds a file system tree

1126
00:39:51,500 --> 00:39:53,600
0,180 180,360 360,420 420,960 1440,2100
{you,know} on the client| and

1127
00:39:53,600 --> 00:39:55,490
0,450 450,570 570,1110 1110,1500 1500,1890
{} and then before whatever

1128
00:39:55,490 --> 00:39:56,630
0,450 450,570 570,810 810,1080 1080,1140
operation it is,| {it,wants} to

1129
00:39:56,630 --> 00:39:57,950
0,480 480,660 660,840 840,1080 1080,1320
perform,| so let's say in

1130
00:39:57,950 --> 00:40:00,080
0,90 90,390 390,510 990,1500 1500,2130
the case of {} C,|

1131
00:40:00,170 --> 00:40:01,250
0,300 300,570 570,630 630,810 810,1080
{} what it will do

1132
00:40:01,250 --> 00:40:02,360
0,540 540,660 660,810 810,930 930,1110
is,| you know it will

1133
00:40:02,360 --> 00:40:04,550
0,390 390,510 510,780 780,1350 1350,2190
read you know {auth.py -}

1134
00:40:04,760 --> 00:40:06,360
0,660 690,810 810,1230
and {append -}

1135
00:40:06,530 --> 00:40:07,760
0,300 300,450 450,930 930,1110 1110,1230
{} an entry to the

1136
00:40:07,760 --> 00:40:08,980
0,570
log

1137
00:40:13,580 --> 00:40:15,020
0,570 570,1140
and {sign,it}.|

1138
00:40:17,330 --> 00:40:18,050
0,210 210,300 300,360 360,570 570,720
So in the case when

1139
00:40:18,050 --> 00:40:19,280
0,120 120,390 390,630 630,780 780,1230
it reads {auth.py - -},|

1140
00:40:19,280 --> 00:40:21,440
0,420 420,990 1110,1560 1560,1740 1740,2160
it will, {} it produce

1141
00:40:21,440 --> 00:40:22,760
0,510 510,570 570,1080 1080,1230 1230,1320
basically a signature or an

1142
00:40:22,760 --> 00:40:24,110
0,330 330,450 450,750 750,1050 1050,1350
entry for this log entry.|

1143
00:40:25,150 --> 00:40:26,680
0,360 360,720 720,1200 1290,1440 1440,1530
And basically then and then

1144
00:40:26,680 --> 00:40:27,700
0,90 90,390 390,690 690,750 750,1020
the final step in this

1145
00:40:27,760 --> 00:40:30,670
0,840 1020,1350 1350,1470 1470,2100 2670,2910
protocol is,| it uploads the

1146
00:40:30,670 --> 00:40:31,810
0,300 300,390 390,480 480,690 690,1140
log to the file server.|

1147
00:40:37,770 --> 00:40:39,480
0,180 180,270 270,390 390,1080 1530,1710
And you know clearly this

1148
00:40:39,480 --> 00:40:42,630
0,300 300,990 990,1680 1770,2340 2340,3150
protocol {is,completely} {in,practical},| {} and

1149
00:40:42,630 --> 00:40:43,710
0,210 210,480 480,690 690,810 810,1080
and really what it is,|

1150
00:40:43,710 --> 00:40:44,730
0,90 90,270 270,330 330,540 540,1020
it's sort of more conceptual

1151
00:40:44,730 --> 00:40:46,320
0,420 420,510 510,780 780,900 900,1590
protocol| to help us understand

1152
00:40:46,710 --> 00:40:48,360
0,720 720,1080 1080,1200 1200,1410 1410,1650
why eventually we might even

1153
00:40:48,360 --> 00:40:50,610
0,90 90,750 750,870 870,1590 1590,2250
be successful in achieving security|

1154
00:40:50,610 --> 00:40:53,610
0,240 240,330 330,900 900,1440 2250,3000
in the context of {}

1155
00:40:53,940 --> 00:40:55,080
0,480 480,990
Byzantine server.|

1156
00:40:55,540 --> 00:40:56,890
0,390 390,510 510,690 690,1080 1080,1350
Because if we're ridiculous correct

1157
00:40:56,890 --> 00:40:58,570
0,330 390,1020 1020,1110 1110,1530 1530,1680
to download the log for

1158
00:40:58,570 --> 00:41:00,370
0,210 210,990 1200,1500 1500,1530 1530,1800
every operation| and the log

1159
00:41:00,370 --> 00:41:01,180
0,60 60,300 300,360 360,690 690,810
{contains -} the history of

1160
00:41:01,180 --> 00:41:02,500
0,240 240,330 330,840 840,1020 1020,1320
all the operations ever happened

1161
00:41:02,500 --> 00:41:03,970
0,60 60,150 150,420 420,1020 1230,1470
to the file system,| in

1162
00:41:03,970 --> 00:41:05,290
0,270 270,720 720,810 810,960 960,1320
step three, you know the

1163
00:41:05,590 --> 00:41:07,180
0,390 390,630 630,1050 1050,1320 1320,1590
client actually constructs file system

1164
00:41:07,180 --> 00:41:08,800
0,150 150,480 480,930 930,1140 1140,1620
at all the, all operations

1165
00:41:08,830 --> 00:41:10,150
0,270 270,810 810,960 960,1050 1050,1320
ever performance since the beginning

1166
00:41:10,150 --> 00:41:11,950
0,120 120,690 960,1110 1110,1290 1290,1800
of time,| and then finally

1167
00:41:11,950 --> 00:41:13,060
0,120 120,360 360,720 720,1050 1050,1110
in step five,| upload the

1168
00:41:13,060 --> 00:41:13,900
0,210 210,450 450,660 660,750 750,840
whole log back to the

1169
00:41:13,900 --> 00:41:16,330
0,510 750,1110 1110,1440 1440,1980 2190,2430
server, seems completely ridiculous| and

1170
00:41:16,330 --> 00:41:17,920
0,90 90,240 240,840 1050,1290 1290,1590
it is ridiculous,| {} {in,terms,of}

1171
00:41:17,920 --> 00:41:19,390
0,60 60,720 810,1080 1080,1350 1350,1470
{} performance,| {} but it

1172
00:41:19,390 --> 00:41:21,940
0,150 150,480 480,570 570,1410 1650,2550
will help us understand {}|

1173
00:41:21,940 --> 00:41:23,620
0,120 120,240 240,990 990,1320 1350,1680
you know when we look

1174
00:41:23,620 --> 00:41:25,210
0,90 90,210 210,990 1200,1500 1500,1590
at the implementation of the

1175
00:41:25,210 --> 00:41:26,860
0,600 720,990 990,1200 1200,1350 1350,1650
scheme,| {} when it actually

1176
00:41:26,860 --> 00:41:28,210
0,480 480,810 810,1110 1110,1260 1260,1350
has the same set of

1177
00:41:28,210 --> 00:41:29,260
0,540 540,690 690,780 780,990 990,1050
properties,| that they sort of

1178
00:41:29,260 --> 00:41:32,170
0,780 900,1560 1560,2130 2610,2760 2760,2910
conceptual design has| and we'll

1179
00:41:32,170 --> 00:41:34,480
0,210 210,780 780,1410 1410,1860 1860,2310
see later example, {in,the,case,of} {}

1180
00:41:34,480 --> 00:41:36,520
0,660 750,960 960,1410 1410,1740 1740,2040
Bitcoin,| that literally does actually

1181
00:41:36,520 --> 00:41:37,840
0,300 300,360 360,870 870,1080 1080,1320
have a log| and since

1182
00:41:37,840 --> 00:41:38,830
0,90 90,450 450,540 540,840 840,990
the beginning of time, with

1183
00:41:38,830 --> 00:41:40,330
0,180 180,720 720,840 840,960 1140,1500
all operations in it| and

1184
00:41:40,330 --> 00:41:42,310
0,390 600,870 870,1620 1710,1890 1890,1980
so, {} maybe it was

1185
00:41:42,310 --> 00:41:43,480
0,60 60,420 420,810 810,1080 1080,1170
a crazy idea,| maybe in

1186
00:41:43,480 --> 00:41:45,460
0,60 60,360 360,420 420,870 870,1980
the context of 2004,| but

1187
00:41:45,460 --> 00:41:46,720
0,120 120,210 210,480 480,720 720,1260
you know people actually do

1188
00:41:46,720 --> 00:41:49,030
0,630 660,1200 1200,1590 1590,1860 1860,2310
{} have these sign logs

1189
00:41:49,030 --> 00:41:50,000
0,120 120,300 300,750 750,870
and really maintained it.|

1190
00:41:50,680 --> 00:41:51,670
0,180 180,330 330,390 390,600 600,990
And so in that sense,|

1191
00:41:51,820 --> 00:41:52,840
0,180 180,360 360,570 570,750 750,1020
you know it's not only

1192
00:41:52,840 --> 00:41:54,190
0,60 60,210 210,720 720,1200 1230,1350
a big conceptual idea,| that

1193
00:41:54,190 --> 00:41:54,880
0,120 120,330 330,510 510,600 600,690
some people do it in

1194
00:41:54,880 --> 00:41:55,800
0,660
practice.|

1195
00:41:58,340 --> 00:41:59,740
0,180 180,510 510,630 630,1110
Any questions so far?|

1196
00:42:04,290 --> 00:42:05,440
0,690
Okay.

1197
00:42:05,800 --> 00:42:06,820
0,780
Joe.

1198
00:42:07,270 --> 00:42:08,350
0,180 180,420 420,750 750,930 930,1080
The one thing you know

1199
00:42:08,350 --> 00:42:10,870
0,180 180,1110 1140,1530 1530,2040 2040,2520
that you're probably wondering about

1200
00:42:10,870 --> 00:42:13,060
0,720 720,1110 1110,1320 1320,2040 2040,2190
a it was proposed as

1201
00:42:13,060 --> 00:42:14,140
0,750
a.

1202
00:42:14,640 --> 00:42:16,110
0,330 330,690 690,780 780,1020 1020,1470
Question for the reading today

1203
00:42:16,320 --> 00:42:17,880
0,810 840,1170 1170,1260 1260,1440 1440,1560
is what is up with

1204
00:42:17,880 --> 00:42:19,440
0,180 180,630 630,750 750,1320 1320,1560
these features, yeah why are

1205
00:42:19,440 --> 00:42:21,150
0,90 90,480 480,660 660,1350 1380,1710
the factors in the law

1206
00:42:21,150 --> 00:42:23,660
0,540 750,1350 1560,2220
tube and um.

1207
00:42:24,030 --> 00:42:26,010
0,300 330,900 1500,1740 1740,1830 1830,1980
And the because you might

1208
00:42:26,010 --> 00:42:26,910
0,150 150,240 240,720 720,780 780,900
say and throughout you know

1209
00:42:26,910 --> 00:42:27,630
0,90 90,240 240,360 360,450 450,720
the only thing I really

1210
00:42:27,630 --> 00:42:28,800
0,210 210,630 630,750 750,960 960,1170
care about if we think

1211
00:42:28,800 --> 00:42:31,260
0,390 420,1230 1530,2010 2010,2220 2220,2460
about a we care about

1212
00:42:31,260 --> 00:42:32,790
0,240 450,780 780,840 840,1440 1440,1530
is only the modifications you

1213
00:42:32,790 --> 00:42:33,330
0,120 120,210 210,390 390,480 480,540
have to be in the

1214
00:42:33,330 --> 00:42:34,470
0,270 270,480 480,600 600,750 750,1140
world because there are actually

1215
00:42:34,470 --> 00:42:35,940
0,270 270,510 510,930 930,1020 1020,1470
things actually modify the files

1216
00:42:35,940 --> 00:42:37,110
0,120 210,390 390,630 630,810 810,1170
that you don't really modify

1217
00:42:37,110 --> 00:42:38,250
0,150 150,390 390,720 720,870 870,1140
this file system, so what's

1218
00:42:38,250 --> 00:42:40,680
0,210 210,450 450,540 540,990 1710,2430
the what's the problem, um.

1219
00:42:41,280 --> 00:42:42,390
0,150 150,480 600,810 810,990 990,1110
And so I think I

1220
00:42:42,390 --> 00:42:43,920
0,180 180,420 420,810 840,1110 1110,1530
wanna do a quick breakout

1221
00:42:43,920 --> 00:42:45,060
0,330 330,540 540,630 630,810 810,1140
here and I'm sure if

1222
00:42:45,090 --> 00:42:45,720
0,120 120,210 210,390 390,570 570,630
you can bring some of

1223
00:42:45,720 --> 00:42:46,620
0,150 150,390 390,540 540,780 780,900
each other, but what you

1224
00:42:46,620 --> 00:42:47,490
0,240 240,330 330,570 570,660 660,870
thought the answer to this

1225
00:42:47,490 --> 00:42:49,560
0,480 480,900 900,1380 1560,1740 1740,2070
particular question was and hopefully

1226
00:42:49,560 --> 00:42:53,520
0,600 750,1680 1710,2310 2310,3000 3030,3960
maybe a this initial a.

1227
00:42:54,340 --> 00:42:56,140
0,540 540,780 780,1320 1320,1500 1500,1800
Coverage like us and, um,

1228
00:42:56,140 --> 00:42:57,220
0,90 90,180 180,480 480,600 600,1080
you know maybe how to

1229
00:42:57,250 --> 00:42:59,770
0,390 390,480 480,1110 1410,2460 2460,2520
improve your understanding and you

1230
00:42:59,770 --> 00:43:00,820
0,150 150,300 300,540 540,810 810,1050
know you can figure out

1231
00:43:00,820 --> 00:43:01,510
0,120 120,240 240,480 480,570 570,690
what the answer is we're

1232
00:43:01,510 --> 00:43:03,070
0,210 210,360 360,600 600,1020 1230,1560
talking about something else, so

1233
00:43:03,070 --> 00:43:03,610
0,60 60,180 180,300 300,390 390,540
I would like to take

1234
00:43:03,610 --> 00:43:05,560
0,330 540,1020 1020,1320 1320,1560 1560,1950
a maybe do five minutes

1235
00:43:05,590 --> 00:43:07,140
0,600 600,990 990,1260
a breakout room.

1236
00:43:57,430 --> 00:43:58,340
0,510
MHM.

1237
00:45:12,500 --> 00:45:13,660
0,870
Perfect.

1238
00:46:06,640 --> 00:46:07,240
0,360
True.

1239
00:46:11,040 --> 00:46:11,720
0,60
Yeah.

1240
00:46:38,630 --> 00:46:39,480
0,750
Yeah.

1241
00:48:54,350 --> 00:48:55,480
0,330
Ouch.

1242
00:48:56,240 --> 00:48:56,900
0,60
Yeah.

1243
00:49:14,180 --> 00:49:15,360
0,600
Foot.

1244
00:49:18,650 --> 00:49:19,790
0,360 360,480 480,630 630,810 810,1140
Hi I'm just double checking,

1245
00:49:19,790 --> 00:49:21,080
0,360 360,900
everybody back.

1246
00:49:21,860 --> 00:49:23,720
0,360 360,480 480,660 1080,1590 1590,1860
Looks like a good, thank

1247
00:49:23,720 --> 00:49:24,480
0,300
you.

1248
00:49:24,810 --> 00:49:26,370
0,240 240,390 390,570 570,1050 1200,1560
Okay, so what I guess,

1249
00:49:26,370 --> 00:49:27,390
0,330 330,570 570,660 660,720 720,1020
let's start with the homework

1250
00:49:27,390 --> 00:49:28,300
0,630
questions.

1251
00:49:28,490 --> 00:49:30,680
0,510 510,660 660,930 930,1260 1260,2190
Um, we don't question why,

1252
00:49:30,710 --> 00:49:31,670
0,210 210,510 510,570 570,870 870,960
why are the factors in

1253
00:49:31,670 --> 00:49:32,460
0,90 90,480
the log.

1254
00:49:38,260 --> 00:49:39,240
0,690
Anybody.

1255
00:49:41,230 --> 00:49:42,430
0,330 330,540 540,690 690,930 930,1200
Um, if you have a

1256
00:49:42,430 --> 00:49:44,410
0,270 270,690 690,1440 1680,1860 1860,1980
read only server, if there

1257
00:49:44,410 --> 00:49:46,750
0,60 60,300 300,930 930,1410 1560,2340
are no features, this ecosystem

1258
00:49:46,750 --> 00:49:48,320
0,210 210,390 390,630 630,1290
can give it anything.

1259
00:49:48,630 --> 00:49:49,480
0,540
Good.

1260
00:49:49,970 --> 00:49:51,650
0,570 570,750 750,960 960,1320 1320,1680
Can give it because it

1261
00:49:51,830 --> 00:49:53,060
0,480 480,600 600,660 660,840 840,1230
because there are no factors

1262
00:49:53,060 --> 00:49:54,110
0,150 150,240 240,720 720,870 870,1050
in the log that would

1263
00:49:54,110 --> 00:49:55,940
0,240 240,600 750,1560
mean that um.

1264
00:49:57,250 --> 00:49:59,580
0,330 330,810 930,1350 1350,2040
There are their view.

1265
00:50:00,020 --> 00:50:02,060
0,330 330,870 900,1410 1410,1560 1560,2040
They'd only service would not

1266
00:50:02,060 --> 00:50:02,960
0,600
be.

1267
00:50:03,270 --> 00:50:04,350
0,600 600,690 690,900 900,990 990,1080
Doing a lot of the

1268
00:50:04,350 --> 00:50:05,520
0,330 330,480 480,600 600,960 960,1170
checks that we talked about

1269
00:50:05,520 --> 00:50:08,130
0,450 450,780 780,1230 1620,2160 2340,2610
before, so they um they

1270
00:50:08,130 --> 00:50:09,120
0,180 180,450 450,540 540,870 870,990
go back in time, for

1271
00:50:09,120 --> 00:50:10,860
0,450 450,810 810,1140 1140,1410 1410,1740
example might maybe not work

1272
00:50:10,860 --> 00:50:11,720
0,690
because.

1273
00:50:11,930 --> 00:50:13,070
0,240 240,360 360,600 600,780 780,1140
It did not put anything

1274
00:50:13,070 --> 00:50:14,570
0,120 120,210 210,780 900,1200 1200,1500
in the log because it

1275
00:50:14,570 --> 00:50:16,760
0,180 180,930 1170,1560 1560,1770 1770,2190
only fetches yeah okay good

1276
00:50:16,760 --> 00:50:18,650
0,270 270,450 450,690 690,930 930,1890
okay so I think you're

1277
00:50:18,680 --> 00:50:19,640
0,270 270,330 330,390 390,570 570,960
totally on the right track,

1278
00:50:19,910 --> 00:50:20,900
0,450 450,540 540,660 660,810 810,990
um, it was like trying

1279
00:50:20,900 --> 00:50:21,440
0,60 60,210 210,270 270,300 300,540
to make it a little

1280
00:50:21,440 --> 00:50:22,940
0,120 120,300 300,930 1080,1290 1290,1500
bit more precise a or

1281
00:50:22,940 --> 00:50:24,200
0,180 180,360 360,840 870,1050 1050,1260
make more concrete and I

1282
00:50:24,200 --> 00:50:24,830
0,180 180,270 270,420 420,510 510,630
think you know that is

1283
00:50:24,830 --> 00:50:26,090
0,420 480,630 630,780 780,1110 1110,1260
correct, so let's assume this

1284
00:50:26,090 --> 00:50:27,050
0,120 120,240 240,540 540,690 690,960
is the log looks like

1285
00:50:27,050 --> 00:50:28,310
0,270 270,360 360,750 750,1170 1170,1260
and the seas fetches are

1286
00:50:28,310 --> 00:50:29,100
0,270 270,390 390,570
not in it.

1287
00:50:29,480 --> 00:50:31,190
0,630 630,990 990,1290 1290,1410 1410,1710
Um, and let's you know,

1288
00:50:31,190 --> 00:50:32,480
0,360 540,720 720,900 900,960 960,1290
um, so this is the

1289
00:50:32,480 --> 00:50:34,730
0,540 540,900 900,1110 1110,1470 1470,2250
blog before actually see downloads

1290
00:50:34,880 --> 00:50:36,500
0,570 840,1050 1050,1230 1230,1500 1500,1620
blog, so let's say you

1291
00:50:36,500 --> 00:50:38,210
0,240 240,780 780,1080 1080,1290 1290,1710
know we're see a fetch.

1292
00:50:40,530 --> 00:50:42,750
0,300 300,600 720,1230 1230,1770 1860,2220
Such as such a off

1293
00:50:42,750 --> 00:50:44,190
0,150 150,510 510,900 930,1350 1350,1440
the few I reference to

1294
00:50:44,190 --> 00:50:45,300
0,120 120,420 420,510 510,630 630,1110
the file that was modified

1295
00:50:45,300 --> 00:50:48,210
0,180 180,690 1530,2190 2220,2790 2790,2910
by a and basically what

1296
00:50:48,210 --> 00:50:50,760
0,60 60,360 360,930 1170,1980 2010,2550
the server does a the

1297
00:50:50,790 --> 00:50:53,790
0,840 870,1380 1380,1500 1500,2130 2160,3000
server instead of actually providing

1298
00:50:53,790 --> 00:50:55,500
0,360 360,450 450,1080 1080,1500 1500,1710
both the modifications ab because

1299
00:50:55,500 --> 00:50:57,480
0,120 120,360 360,570 1380,1590 1590,1980
it has it which ab

1300
00:50:57,480 --> 00:50:59,280
0,120 120,600 600,870 870,990 990,1800
were done with its modifications,

1301
00:50:59,610 --> 00:51:04,200
0,210 210,690 690,1980 2010,2700 2940,4590
it sends the sea, um,

1302
00:51:04,200 --> 00:51:06,420
0,570 600,1410 1410,2130
um, basically prefix.

1303
00:51:08,880 --> 00:51:11,040
0,300 300,390 390,1080 1500,1890 1890,2160
Since the prefix, um that

1304
00:51:11,040 --> 00:51:12,280
0,900
excludes.

1305
00:51:13,110 --> 00:51:15,390
0,1200 1200,1380 1380,1950 1950,2100 2100,2280
Ozzy a modification to a

1306
00:51:15,390 --> 00:51:16,160
0,150 150,450
and b.

1307
00:51:16,900 --> 00:51:19,330
0,330 360,540 540,1020 1470,2070 2070,2430
So we have lots a

1308
00:51:19,330 --> 00:51:23,080
0,210 210,690 3090,3360 3360,3450 3450,3750
and b right, and so

1309
00:51:23,080 --> 00:51:24,820
0,420 420,600 600,900 900,1080 1080,1740
see you fetch this file,

1310
00:51:24,970 --> 00:51:26,650
0,510 510,630 630,990 990,1110 1110,1680
um, it fetches the log

1311
00:51:26,800 --> 00:51:28,120
0,270 270,420 420,750 750,1200 1200,1320
and so this basically is

1312
00:51:28,120 --> 00:51:29,320
0,210 210,480 480,570 570,660 660,1200
this part of the log

1313
00:51:29,680 --> 00:51:30,660
0,780
prefix.

1314
00:51:32,540 --> 00:51:35,060
0,570 570,690 690,1290 1500,2160 2160,2520
Um, you know, see, um

1315
00:51:35,060 --> 00:51:36,470
0,450 450,570 570,690 690,810 810,1410
checks, you know the signature

1316
00:51:36,470 --> 00:51:38,000
0,270 270,540 540,870 870,1140 1140,1530
she checks whether it's proceeding

1317
00:51:38,000 --> 00:51:39,410
0,510 510,660 660,750 750,960 1290,1410
operations are in it, you

1318
00:51:39,410 --> 00:51:40,640
0,480 480,660 660,810 810,930 930,1230
know and they're all there

1319
00:51:40,640 --> 00:51:41,600
0,210 210,360 360,600 600,750 750,960
because she hasn't done any

1320
00:51:41,600 --> 00:51:43,280
0,180 180,630 630,990 1320,1530 1530,1680
other operation yet and so

1321
00:51:43,280 --> 00:51:44,750
0,390 390,540 540,870 870,930 930,1470
basically we'll accept the log

1322
00:51:44,750 --> 00:51:46,100
0,810 810,900 900,1140 1140,1230 1230,1350
and the log as it

1323
00:51:46,100 --> 00:51:47,000
0,180 180,270 270,360 360,750 750,900
is with the prefix as

1324
00:51:47,000 --> 00:51:49,610
0,120 120,450 810,1440 1470,1920 1920,2610
it is and basically returns

1325
00:51:49,610 --> 00:51:50,810
0,120 120,300 300,540 540,720 780,1200
you know off the UI

1326
00:51:50,810 --> 00:51:52,600
0,150 150,690 690,1500
to whatever application.

1327
00:51:52,860 --> 00:51:54,450
0,240 240,360 360,1050 1050,1230 1230,1590
That is copying this offer

1328
00:51:54,450 --> 00:51:55,710
0,330 330,420 420,840 840,990 990,1260
into the machine that actually

1329
00:51:55,770 --> 00:51:57,680
0,480 480,660 660,1140 1140,1620
run the installed suffer.

1330
00:51:58,130 --> 00:52:00,960
0,180 180,630 870,1320 1320,1980
So then see Frederick.

1331
00:52:03,670 --> 00:52:08,890
0,390 390,780 780,960 960,1560 4920,5220
A bank of UI this

1332
00:52:08,890 --> 00:52:11,800
0,240 240,810 960,1410 1410,1530 1530,2910
time around, um, the server

1333
00:52:11,980 --> 00:52:14,580
0,720 750,1530 1560,1860 1860,2250
says a whole lot.

1334
00:52:19,460 --> 00:52:22,730
0,660 660,750 750,1350 1350,2010 2310,3270
And you know she, um,

1335
00:52:23,150 --> 00:52:25,550
0,90 90,1200 1200,1260 1260,1680 1680,2400
she looks at these entries

1336
00:52:25,550 --> 00:52:28,430
0,210 210,600 600,960 960,2220 2220,2880
from the civil law in

1337
00:52:28,580 --> 00:52:30,140
0,210 210,780 780,1020 1020,1470 1470,1560
the operations are presumably the

1338
00:52:30,140 --> 00:52:32,210
0,600 1170,1500 1500,1740 1740,1830 1830,2070
prefix, um, since we didn't

1339
00:52:32,210 --> 00:52:33,650
0,240 240,750 780,1260 1260,1350 1350,1440
care about fetches, you know

1340
00:52:33,650 --> 00:52:34,460
0,120 120,240 240,630 630,720 720,810
its all caught in the

1341
00:52:34,460 --> 00:52:36,560
0,510 750,1440 1440,1680 1680,1800 1800,2100
log a and so everything

1342
00:52:36,560 --> 00:52:38,270
0,300 300,420 420,630 630,990 1080,1710
which you know good a

1343
00:52:38,270 --> 00:52:39,020
0,150 150,210 210,390 390,450 450,750
you know these are valid

1344
00:52:39,020 --> 00:52:41,240
0,780 780,1350 1380,1740 1740,1920 1920,2220
modifications, the nothing has been

1345
00:52:41,270 --> 00:52:45,020
0,630 1140,1920 2190,2820 3090,3300 3300,3750
changed and um, and so

1346
00:52:45,020 --> 00:52:46,010
0,90 90,240 240,780 780,870 870,990
you know civil you know

1347
00:52:46,010 --> 00:52:48,080
0,390 390,480 480,870 870,1440 1590,2070
without the chechen log se

1348
00:52:48,080 --> 00:52:50,240
0,120 120,600 600,1260 1410,1650 1650,2160
will actually accept this log

1349
00:52:50,450 --> 00:52:52,250
0,720 750,1320 1320,1500 1500,1560 1560,1800
and basically build a file

1350
00:52:52,250 --> 00:52:56,750
0,420 420,600 600,1350 1590,3300 4020,4500
system that has a plot

1351
00:52:56,750 --> 00:52:59,180
0,420 420,900 900,1050 1050,1740 1890,2430
inclusive modifications to ab and

1352
00:52:59,180 --> 00:53:00,500
0,420 420,480 480,1080 1080,1170 1170,1320
returns the results you know

1353
00:53:00,500 --> 00:53:02,270
0,330 330,480 480,1140 1140,1470 1470,1770
to the application for bank

1354
00:53:02,270 --> 00:53:03,240
0,150 150,660
debt by.

1355
00:53:05,490 --> 00:53:06,450
0,180 180,330 330,420 420,540 540,960
So that it can install

1356
00:53:06,450 --> 00:53:07,530
0,210 210,600 600,750 750,1020 1020,1080
the machine that actually is

1357
00:53:07,530 --> 00:53:09,030
0,150 150,210 210,810 810,900 900,1500
going to run the surface

1358
00:53:09,360 --> 00:53:10,620
0,660 660,780 780,870 870,960 960,1260
and as you can see

1359
00:53:10,620 --> 00:53:11,310
0,90 90,300 300,480 480,630 630,690
you know we're sort of

1360
00:53:11,310 --> 00:53:12,630
0,90 90,150 150,450 450,990 1020,1320
in a bad situation right

1361
00:53:12,630 --> 00:53:14,100
0,540 570,870 870,1080 1080,1170 1170,1470
because we took the old

1362
00:53:14,100 --> 00:53:14,960
0,570
version.

1363
00:53:15,730 --> 00:53:18,610
0,270 270,510 510,690 720,1350 2490,2880
But off the UI and

1364
00:53:18,610 --> 00:53:20,140
0,90 90,270 270,930 960,1230 1230,1530
the new version of anchor

1365
00:53:20,140 --> 00:53:21,620
0,390 390,870
to UI.

1366
00:53:22,940 --> 00:53:24,110
0,600 630,750 750,930 930,1080 1080,1170
And the one way you

1367
00:53:24,110 --> 00:53:25,160
0,90 90,270 270,540 540,810 810,1050
can think about this is

1368
00:53:25,160 --> 00:53:26,480
0,300 480,630 630,750 750,1260 1260,1320
that you know from you

1369
00:53:26,480 --> 00:53:28,730
0,150 150,450 450,1170 1410,1890 1890,2250
know sees perspective, um what

1370
00:53:28,730 --> 00:53:29,960
0,240 240,450 450,630 630,810 810,1230
really seemed to have happened

1371
00:53:29,960 --> 00:53:33,110
0,210 210,540 540,720 720,2100 2370,3150
is that a wow, um.

1372
00:53:34,110 --> 00:53:35,520
0,690 690,810 810,900 900,1020 1020,1410
While you know it was

1373
00:53:35,550 --> 00:53:37,650
0,630 630,960 960,1710 1830,1950 1950,2100
reading off by you know

1374
00:53:37,650 --> 00:53:39,630
0,150 150,300 300,720 720,1530 1530,1980
there were concurrent modifications to

1375
00:53:39,630 --> 00:53:40,710
0,240 240,360 360,690 690,900 900,1080
a and b and just

1376
00:53:40,710 --> 00:53:41,760
0,300 300,660 660,720 720,810 810,1050
happened basically at the same

1377
00:53:41,760 --> 00:53:42,660
0,480 480,570 570,690 690,840 840,900
time or at least the

1378
00:53:42,660 --> 00:53:44,250
0,420 420,510 510,1170 1170,1290 1290,1590
server is pretending it happened

1379
00:53:44,250 --> 00:53:45,870
0,90 90,180 180,450 450,870 1350,1620
at the same time and

1380
00:53:45,870 --> 00:53:47,580
0,270 270,1350 1350,1440 1440,1530 1530,1710
so and so it gets

1381
00:53:47,580 --> 00:53:48,320
0,600
confused.

1382
00:53:48,550 --> 00:53:50,620
0,270 270,540 540,1170 1350,1650 1650,2070
Or can't detect the fact

1383
00:53:50,620 --> 00:53:52,330
0,180 180,420 420,930 930,1380 1380,1710
that these applications were did

1384
00:53:52,330 --> 00:53:54,080
0,360 360,960 960,1110 1110,1440
happen before any time.

1385
00:53:55,060 --> 00:53:56,170
0,210 210,390 390,510 510,840 870,1110
So this is the this

1386
00:53:56,170 --> 00:53:57,310
0,120 120,300 300,750 750,1050 1050,1140
is the problem that you

1387
00:53:57,310 --> 00:53:58,840
0,180 180,750 780,1080 1080,1200 1200,1530
know basically putting the fetches

1388
00:53:58,840 --> 00:54:00,700
0,90 90,180 180,540 570,1170 1170,1860
in the wok sauce sauce,

1389
00:54:01,090 --> 00:54:02,350
0,390 390,600 600,930 930,1110 1110,1260
um is like let's make

1390
00:54:02,350 --> 00:54:05,380
0,150 150,540 1110,1530 1560,2340 2430,3030
that actually, um, Jeff's also

1391
00:54:05,380 --> 00:54:09,490
0,630 2820,3420 3420,3660 3660,3810 3810,4110
concrete, um, and so see

1392
00:54:09,490 --> 00:54:11,260
0,450 450,810 810,1080 1080,1380 1380,1770
why, actually this problem is

1393
00:54:12,100 --> 00:54:13,380
0,420 420,480 480,630 630,1200
solved in that case.

1394
00:54:14,260 --> 00:54:15,400
0,330 330,570 570,960 960,1050 1050,1140
Because I I had a

1395
00:54:15,400 --> 00:54:18,820
0,630 690,1200 1710,2370 2460,3180 3210,3420
question yeah, um so I

1396
00:54:18,820 --> 00:54:20,170
0,390 390,720 720,870 870,1050 1050,1350
I'm having a little trouble

1397
00:54:20,170 --> 00:54:23,380
0,420 420,750 1050,1560 1560,2220 2610,3210
understand like understanding what the

1398
00:54:23,980 --> 00:54:25,630
0,390 420,660 660,720 720,1470 1500,1650
like sort of like the

1399
00:54:25,630 --> 00:54:29,110
0,780 780,1080 1080,1710 2430,3180 3180,3480
interface for like for fetch

1400
00:54:29,110 --> 00:54:30,550
0,120 120,630 630,810 810,960 960,1440
and modify is like what.

1401
00:54:31,350 --> 00:54:32,730
0,630 690,870 870,1050 1050,1260 1260,1380
Um, I I thought you

1402
00:54:32,730 --> 00:54:34,140
0,720 720,960 960,1140 1140,1320 1320,1410
fetched pretty much like the

1403
00:54:34,140 --> 00:54:36,180
0,720 750,1530 1560,1710 1710,1920 1920,2040
whole tree and had to

1404
00:54:36,180 --> 00:54:37,800
0,420 420,510 510,750 750,1050 1050,1620
rebuild the whole file system,

1405
00:54:37,860 --> 00:54:41,910
0,990 990,1740 2040,3330 3360,3690 3690,4050
basic example, but this slide

1406
00:54:41,910 --> 00:54:44,610
0,390 390,570 570,1050 1050,1800 1800,2700
before you're fetching specific files,

1407
00:54:44,850 --> 00:54:47,760
0,2310 2310,2520 2520,2640 2640,2700 2700,2910
giselle server is the one

1408
00:54:47,760 --> 00:54:49,170
0,120 120,450 450,570 570,990 1020,1410
that returns the walk correct,

1409
00:54:49,890 --> 00:54:51,360
0,210 210,540 540,720 720,1170 1170,1470
so deserve to cite what

1410
00:54:51,360 --> 00:54:52,420
0,300 300,390 390,900
entries to include.

1411
00:54:52,640 --> 00:54:54,260
0,600 600,780 780,1050 1050,1170 1170,1620
Yeah, and we're in seeing

1412
00:54:54,260 --> 00:54:55,910
0,210 210,780 780,1050 1050,1290 1290,1650
that it can't really delete

1413
00:54:55,910 --> 00:54:56,720
0,300 300,420 420,480 480,570 570,810
anything out in the middle

1414
00:54:56,720 --> 00:54:57,620
0,90 90,150 150,510 540,750 750,900
of the log and that's

1415
00:54:57,620 --> 00:54:59,900
0,210 210,480 480,1170 1470,1920 1920,2280
not really possible, it's always

1416
00:54:59,900 --> 00:55:01,130
0,150 150,600 600,720 720,810 810,1230
a prefix of the log

1417
00:55:01,160 --> 00:55:02,480
0,270 270,360 360,720 720,840 840,1320
because the prefix is always

1418
00:55:02,480 --> 00:55:05,510
0,510 510,660 660,1260 2190,2730 2730,3030
consistent with itself and so

1419
00:55:05,510 --> 00:55:07,020
0,150 150,330 330,750 750,1380
in this first case.

1420
00:55:07,710 --> 00:55:09,690
0,390 390,600 600,690 690,1440 1800,1980
Correct, said the prefix and

1421
00:55:09,690 --> 00:55:10,650
0,120 120,420 420,750 750,900 900,960
the second case in the

1422
00:55:10,650 --> 00:55:13,020
0,150 150,630 720,2100 2100,2250 2250,2370
whole walk yeah, so the

1423
00:55:13,020 --> 00:55:13,860
0,270 270,360 360,660 660,720 720,840
server can decide to do

1424
00:55:13,860 --> 00:55:15,210
0,270 270,510 510,840 840,1230 1230,1350
that but there's nothing that

1425
00:55:15,210 --> 00:55:16,770
0,90 90,540 540,1020 1050,1410 1410,1560
the client can lease it

1426
00:55:16,770 --> 00:55:18,120
0,240 240,420 420,900 960,1080 1080,1350
like so far you know,

1427
00:55:18,150 --> 00:55:19,440
0,570 570,900 900,1110 1110,1230 1230,1290
discuss there's nothing that the

1428
00:55:19,440 --> 00:55:20,490
0,510 510,630 630,690 690,960 960,1050
client how the client could

1429
00:55:20,490 --> 00:55:21,840
0,540 540,690 690,780 780,990 990,1350
detect that it didn't get

1430
00:55:21,840 --> 00:55:23,580
0,180 180,270 270,450 450,840 1110,1740
like the whole law right

1431
00:55:23,580 --> 00:55:25,560
0,600 600,1230 1290,1530 1530,1920 1920,1980
I I my question is

1432
00:55:25,560 --> 00:55:27,120
0,210 210,600 600,900 900,1470 1470,1560
more towards like what the

1433
00:55:27,120 --> 00:55:29,400
0,600 600,1140 1140,1770 1770,1860 1860,2280
interfaces for clients to use

1434
00:55:29,400 --> 00:55:31,020
0,180 180,540 540,690 690,1440
like fetch and modify.

1435
00:55:31,260 --> 00:55:33,330
0,510 810,990 990,1080 1080,1560 1560,2070
Like cause I thought initially

1436
00:55:33,330 --> 00:55:35,160
0,120 120,420 420,780 780,1440 1470,1830
I thought okay fetch fetch

1437
00:55:35,160 --> 00:55:36,360
0,90 90,270 270,360 360,900 900,1200
is like the whole file

1438
00:55:36,360 --> 00:55:38,160
0,510 540,780 780,1200 1200,1710 1710,1800
system, no no fetches, a

1439
00:55:38,160 --> 00:55:40,140
0,330 330,810 1050,1710
single file, okay.

1440
00:55:40,440 --> 00:55:42,150
0,570 570,840 840,1080 1080,1530 1530,1710
And and so basically what

1441
00:55:42,150 --> 00:55:43,170
0,330 330,600 600,810 810,960 960,1020
effect does it get to

1442
00:55:43,170 --> 00:55:45,810
0,120 120,390 390,840 840,1470 1980,2640
the law, unlike modifications modifications

1443
00:55:45,810 --> 00:55:46,800
0,120 120,300 300,390 390,870 870,990
are all the operations that

1444
00:55:46,800 --> 00:55:48,780
0,420 420,510 510,960 1380,1860 1860,1980
modify a file, and like

1445
00:55:48,780 --> 00:55:49,530
0,120 120,240 240,420 420,690 690,750
if you go back to

1446
00:55:49,530 --> 00:55:50,970
0,90 90,390 390,570 570,690 690,1440
a slight little bit earlier,

1447
00:55:51,000 --> 00:55:52,110
0,150 150,360 360,540 540,630 630,1110
you know in the modification

1448
00:55:52,110 --> 00:55:54,210
0,420 420,1200 1200,1470 1470,1950 1980,2100
record suspiciously, which file is

1449
00:55:54,210 --> 00:55:57,360
0,210 210,930 2100,2880 2880,3000 3000,3150
being modified and you know

1450
00:55:57,360 --> 00:55:58,770
0,450 450,600 600,870 870,1020 1020,1410
what's being said is similarly

1451
00:55:58,770 --> 00:55:59,790
0,90 90,180 180,690 690,780 780,1020
in the federal it says

1452
00:55:59,790 --> 00:56:01,200
0,270 270,660 660,960 960,1110 1110,1410
which file like this coin

1453
00:56:01,200 --> 00:56:01,780
0,480
saw.

1454
00:56:03,400 --> 00:56:04,420
0,750
Okay.

1455
00:56:04,640 --> 00:56:07,160
0,240 240,900 1200,1560 1560,1920 1920,2520
And then so so, so

1456
00:56:07,190 --> 00:56:09,710
0,720 720,1290 1320,1620 1620,2040 2040,2520
for fetch like a client

1457
00:56:09,710 --> 00:56:11,480
0,300 300,990 1020,1290 1290,1620 1620,1770
goes through the log but

1458
00:56:11,480 --> 00:56:12,860
0,240 240,690 690,1020
only looks at.

1459
00:56:13,130 --> 00:56:13,700
0,150 150,240 240,300 300,510 510,570
You have to find a

1460
00:56:13,700 --> 00:56:14,720
0,120 120,240 240,600 600,840 840,1020
thing that does actually read

1461
00:56:14,720 --> 00:56:15,500
0,60 60,330 330,480 480,690 690,780
the file that actually is

1462
00:56:15,500 --> 00:56:17,300
0,240 240,570 1050,1440 1440,1620 1620,1800
looking for okay but does

1463
00:56:17,300 --> 00:56:18,860
0,90 90,480 480,810 810,1200 1200,1560
it check every single entry

1464
00:56:18,860 --> 00:56:20,180
0,90 90,180 180,570 600,1110 1110,1320
in the log anyways for

1465
00:56:20,180 --> 00:56:23,000
0,60 60,660 660,1020 1110,2460 2490,2820
the signature, um, OK OK

1466
00:56:23,000 --> 00:56:24,260
0,90 90,330 330,540 540,600 600,1260
the first step is always

1467
00:56:24,290 --> 00:56:25,940
0,300 300,360 360,540 540,960 1110,1650
check the whole walk, go

1468
00:56:25,940 --> 00:56:27,500
0,780 780,1020 1020,1170 1170,1380 1380,1560
fervor and make sure that

1469
00:56:27,500 --> 00:56:29,630
0,180 180,690 690,780 780,1410 1410,2130
your last you know operations

1470
00:56:29,630 --> 00:56:30,200
0,120 120,240 240,390 390,510 510,570
in it when it's a

1471
00:56:30,200 --> 00:56:32,450
0,270 270,300 300,1080 1320,1860 1860,2250
Thatcher or modify a although

1472
00:56:32,450 --> 00:56:35,030
0,120 120,480 1080,1560 1560,1950 1950,2580
in this broken scheme, we

1473
00:56:35,030 --> 00:56:37,190
0,270 270,330 330,750 1200,1650 1650,2160
drop the fetches a it

1474
00:56:37,190 --> 00:56:38,810
0,510 510,780 780,1290 1290,1530 1530,1620
applies all the checks all

1475
00:56:38,810 --> 00:56:40,370
0,90 90,840 1110,1260 1260,1470 1470,1560
the signatures and then it

1476
00:56:40,370 --> 00:56:42,050
0,300 300,660 690,1080 1080,1410 1410,1680
builds up a the file

1477
00:56:42,050 --> 00:56:42,480
0,330
system.

1478
00:56:42,970 --> 00:56:44,260
0,390 390,810 810,900 900,1170 1170,1290
By replaying the log from

1479
00:56:44,260 --> 00:56:45,310
0,60 60,360 360,480 480,900 900,1050
the beginning of time, get

1480
00:56:45,310 --> 00:56:46,630
0,60 60,330 330,810 900,1050 1050,1320
a file system and then

1481
00:56:46,630 --> 00:56:48,190
0,120 120,330 330,540 540,1140 1200,1560
it does its operation and

1482
00:56:48,190 --> 00:56:48,790
0,120 120,180 180,300 300,510 510,600
so in this case, the

1483
00:56:48,790 --> 00:56:50,350
0,480 480,570 570,900 900,1350 1350,1560
operation is certainly fetched off,

1484
00:56:50,350 --> 00:56:51,880
0,510 510,660 660,960 960,1290 1290,1530
why is basically reading it.

1485
00:56:52,520 --> 00:56:54,290
0,510 660,810 810,1170 1170,1500 1500,1770
Again, the reason in ways

1486
00:56:54,290 --> 00:56:55,160
0,90 90,240 240,480 480,690 690,870
that we talk about such

1487
00:56:55,160 --> 00:56:56,390
0,60 60,570 570,780 780,1020 1020,1230
a modify is because all

1488
00:56:56,390 --> 00:56:58,280
0,450 450,600 600,1290 1320,1680 1680,1890
operations are basically following one

1489
00:56:58,280 --> 00:56:59,240
0,90 90,210 210,570 570,840 840,960
or two camps either to

1490
00:56:59,240 --> 00:57:00,060
0,570
fetch.

1491
00:57:00,320 --> 00:57:02,660
0,720 720,870 870,1110 1110,1860 1860,2340
Or it is a modification

1492
00:57:02,660 --> 00:57:04,160
0,450 450,780 780,1020 1020,1110 1110,1500
operation like writing a file,

1493
00:57:04,160 --> 00:57:05,240
0,330 330,450 450,810 810,960 960,1080
creating a file, there's a

1494
00:57:05,240 --> 00:57:07,610
0,420 480,1080 1080,1800 1890,2070 2070,2370
ol modification operations, the fetch

1495
00:57:07,610 --> 00:57:09,380
0,540 540,840 870,1200 1200,1320 1320,1770
operations are reading a file

1496
00:57:09,380 --> 00:57:12,410
0,510 540,1350 1350,2130 2160,2640 2640,3030
made ellison directory status file

1497
00:57:12,410 --> 00:57:13,260
0,150 150,270 270,330 330,600
that kind of thing.

1498
00:57:13,730 --> 00:57:15,260
0,450 480,630 630,780 780,870 870,1530
Okay, and then the modifies

1499
00:57:15,260 --> 00:57:17,080
0,660 870,1380
also like.

1500
00:57:17,890 --> 00:57:20,260
0,360 360,450 450,1170 1200,1740 1740,2370
Um, a modify like doesn't

1501
00:57:20,260 --> 00:57:22,840
0,1080 1290,1530 1530,1860 1860,2190 2190,2580
fetch the okay also fetches

1502
00:57:22,840 --> 00:57:25,300
0,90 90,390 390,540 540,1050 1800,2460
the log but then builds

1503
00:57:25,300 --> 00:57:27,040
0,150 150,390 390,870 900,1560 1560,1740
the file system, yeah, so

1504
00:57:27,040 --> 00:57:28,150
0,210 210,540 540,810 810,990 990,1110
maybe the feature here I'm

1505
00:57:28,150 --> 00:57:28,930
0,240 240,480 480,480 480,690 690,780
using fetch I guess in

1506
00:57:28,930 --> 00:57:30,880
0,180 180,720 750,1260 1260,1740 1740,1950
two ways, one describe read

1507
00:57:30,880 --> 00:57:33,280
0,270 270,1020 1200,1440 1440,1770 1770,2400
only operations and actually to

1508
00:57:33,310 --> 00:57:34,960
0,540 540,630 630,1110 1110,1230 1230,1650
obtain or receive the log

1509
00:57:34,960 --> 00:57:35,840
0,180 180,270 270,720
from the server.

1510
00:57:36,170 --> 00:57:38,540
0,570 840,1050 1050,1320 1320,1920 1920,2370
Okay, but then modified modifies

1511
00:57:38,540 --> 00:57:40,910
0,210 210,510 510,840 840,1440 1770,2370
also one single file, yes

1512
00:57:41,090 --> 00:57:42,560
0,180 180,360 360,630 630,1350 1350,1470
yeah for every modification in

1513
00:57:42,560 --> 00:57:43,520
0,120 120,330 330,690 690,810 810,960
the file system, you're gonna

1514
00:57:43,520 --> 00:57:44,640
0,150 150,210 210,450 450,840
have a lock entry.

1515
00:57:44,900 --> 00:57:45,680
0,570
Okay.

1516
00:57:47,900 --> 00:57:50,150
0,480 570,900 900,990 990,1530 1860,2250
I'm sorry I also have

1517
00:57:50,150 --> 00:57:52,070
0,60 60,510 510,1110 1110,1530 1560,1920
a question I am I

1518
00:57:52,490 --> 00:57:54,590
0,360 360,690 690,1560 1560,1890 1890,2100
don't really understand why this

1519
00:57:54,590 --> 00:57:56,440
0,540 540,690 690,780 780,1560
scenario is a problem.

1520
00:57:56,750 --> 00:57:58,800
0,480 480,660 660,810 810,1620
Because as you said.

1521
00:57:58,970 --> 00:58:00,620
0,390 450,690 690,1290 1290,1470 1470,1650
It's it's possible like from

1522
00:58:00,620 --> 00:58:01,940
0,90 90,540 540,660 660,810 810,1320
the perspective of the client,

1523
00:58:01,940 --> 00:58:03,050
0,90 90,300 300,600 600,750 750,1110
it may well be that

1524
00:58:03,230 --> 00:58:06,590
0,870 870,1350 1800,2310 2730,3270 3270,3360
amb got a created or

1525
00:58:06,590 --> 00:58:09,530
0,930 1380,1770 1770,1920 1920,2310 2310,2940
modified for a last fetch

1526
00:58:09,650 --> 00:58:10,670
0,210 210,300 300,750 750,840 840,1020
yeah in principle it could

1527
00:58:10,670 --> 00:58:11,780
0,240 240,630 630,840 840,960 960,1110
have happened correct that was

1528
00:58:11,780 --> 00:58:13,850
0,360 360,1020 1200,1470 1470,1680 1680,2070
occurring modification, we do know

1529
00:58:13,850 --> 00:58:15,440
0,390 390,600 600,750 750,1320 1350,1590
because like we were sort

1530
00:58:15,440 --> 00:58:16,880
0,150 300,720 720,870 870,960 960,1440
of look from the top

1531
00:58:17,120 --> 00:58:18,290
0,330 330,450 450,660 660,810 810,1170
and we know that basically

1532
00:58:18,290 --> 00:58:19,790
0,360 360,540 540,810 810,930 930,1500
see you rent the file

1533
00:58:19,850 --> 00:58:21,470
0,630 630,780 780,870 870,1020 1020,1620
after a and b modified.

1534
00:58:22,860 --> 00:58:24,480
0,180 180,240 240,780 780,930 930,1620
But the server can pretend

1535
00:58:24,540 --> 00:58:25,470
0,180 180,300 300,420 420,690 690,930
as if it actually happened

1536
00:58:25,470 --> 00:58:27,240
0,630 690,1050 1050,1470 1470,1680 1680,1770
concurrently and a in the

1537
00:58:27,240 --> 00:58:28,380
0,300 300,420 420,660 660,960 960,1140
second we'll see that if

1538
00:58:28,380 --> 00:58:29,460
0,300 300,570 570,660 660,990 990,1080
we stick the fetches in

1539
00:58:29,460 --> 00:58:30,930
0,60 60,540 600,960 960,1110 1110,1470
the log server can not

1540
00:58:30,930 --> 00:58:31,880
0,210 210,300 300,390 390,660
get to do that.

1541
00:58:33,240 --> 00:58:34,740
0,420 420,630 630,1050 1050,1290 1290,1500
OK, but even if the

1542
00:58:34,740 --> 00:58:37,500
0,630 630,1140 1140,1740 1770,2220 2220,2760
server pretends that does it.

1543
00:58:38,500 --> 00:58:39,820
0,390 390,720 720,930 930,1140 1140,1320
Eva is that even a

1544
00:58:39,820 --> 00:58:41,590
0,630 630,810 810,930 930,1260 1260,1770
problem, does it break anything

1545
00:58:41,590 --> 00:58:44,530
0,300 300,540 600,2430 2430,2790 2790,2940
because the eyes example where

1546
00:58:44,530 --> 00:58:45,250
0,90 90,300 300,390 390,480 480,720
it shows how to break

1547
00:58:45,250 --> 00:58:47,740
0,330 330,840 1110,1680 1710,2040 2040,2490
something correct like step one.

1548
00:58:48,300 --> 00:58:49,590
0,210 210,540 540,810 810,900 900,1290
You see, fetch is offset

1549
00:58:49,590 --> 00:58:51,180
0,510 660,810 810,1200 1200,1410 1410,1590
by the server gave it

1550
00:58:51,180 --> 00:58:53,130
0,690 930,1050 1050,1380 1380,1770 1770,1950
one you know as far

1551
00:58:53,130 --> 00:58:54,690
0,90 90,210 210,870 900,1140 1140,1560
as the fetch it gave

1552
00:58:54,690 --> 00:58:55,820
0,150 150,840
the prefix.

1553
00:58:56,260 --> 00:58:57,430
0,210 210,300 300,360 360,750 750,1170
And so the client restricted

1554
00:58:57,430 --> 00:58:59,230
0,270 270,600 600,1050 1050,1110 1110,1800
file system, executing the operation

1555
00:58:59,230 --> 00:59:00,910
0,540 540,780 780,1140 1140,1350 1350,1680
returned off w ay to

1556
00:59:00,910 --> 00:59:02,800
0,150 150,1170 1170,1350 1350,1800 1800,1890
the application and install the

1557
00:59:02,800 --> 00:59:04,120
0,450 450,570 570,630 630,1020 1080,1320
software on the machine just

1558
00:59:04,120 --> 00:59:05,680
0,90 90,210 210,270 270,570 600,1560
to make it very crisp,

1559
00:59:05,860 --> 00:59:07,480
0,390 420,810 810,930 930,1380 1410,1620
so now the first you're

1560
00:59:07,480 --> 00:59:09,100
0,300 300,540 540,720 720,1200 1200,1620
reading off the wide operation

1561
00:59:09,100 --> 00:59:11,680
0,120 120,480 900,1590 1590,1890 1890,2580
is done finished already executed

1562
00:59:11,920 --> 00:59:14,020
0,720 750,990 990,1560 1590,1740 1740,2100
and has installed the old

1563
00:59:14,020 --> 00:59:16,150
0,540 780,1110 1110,1350 1350,1530 1560,2130
version of off the UI

1564
00:59:16,150 --> 00:59:17,080
0,270 270,360 360,750
on the machine.

1565
00:59:18,700 --> 00:59:20,260
0,450 480,570 570,1170 1200,1380 1380,1560
Then the client you can

1566
00:59:20,260 --> 00:59:22,240
0,240 240,450 450,810 810,1440 1440,1980
fetch is banged a by.

1567
00:59:23,050 --> 00:59:25,750
0,450 450,960 960,1590 1770,2430 2430,2700
Now discover actually, um, we

1568
00:59:25,750 --> 00:59:27,340
0,600 600,870 870,1350 1350,1500 1500,1590
decline the application want to

1569
00:59:27,340 --> 00:59:29,710
0,360 360,780 780,1350 1470,1950 1950,2370
reach bank by decline fetches

1570
00:59:29,710 --> 00:59:30,970
0,90 90,450 450,600 600,690 690,1260
the walk from the server

1571
00:59:31,180 --> 00:59:32,470
0,360 360,660 660,720 720,1050 1050,1290
or asked the server, please

1572
00:59:32,470 --> 00:59:33,820
0,180 180,270 270,360 360,840 1200,1350
give me the log, the

1573
00:59:33,820 --> 00:59:34,900
0,240 240,420 420,630 630,930 930,1080
server this time around gives

1574
00:59:34,900 --> 00:59:35,880
0,90 90,330 330,810
the whole log.

1575
00:59:36,240 --> 00:59:37,620
0,120 120,510 510,720 720,780 780,1380
And not just the prefix

1576
00:59:38,010 --> 00:59:40,050
0,600 600,1080 1080,1380 1410,1920 1920,2040
you're delaying that builds up

1577
00:59:40,050 --> 00:59:41,340
0,90 90,240 240,510 510,990 1020,1290
the whole file system and

1578
00:59:41,340 --> 00:59:43,170
0,570 570,810 810,1230 1230,1530 1530,1830
returns back w ay to

1579
00:59:43,170 --> 00:59:44,220
0,120 120,720
the application.

1580
00:59:44,830 --> 00:59:47,410
0,390 390,750 780,1200 1320,1560 2220,2580
But in like I wouldn't

1581
00:59:47,410 --> 00:59:48,940
0,180 180,660 660,810 810,990 990,1530
this happen in an incorrect

1582
00:59:48,940 --> 00:59:50,470
0,630 630,750 750,870 870,1290 1290,1530
implementation of the client, because

1583
00:59:50,470 --> 00:59:52,030
0,120 120,240 240,750 750,1200 1200,1560
if the client finds that

1584
00:59:52,480 --> 00:59:54,250
0,450 450,600 600,1200 1290,1620 1620,1770
receives the log and it

1585
00:59:54,250 --> 00:59:56,260
0,420 420,540 540,1080 1080,1740 1740,2010
sees an additional modification on

1586
00:59:56,260 --> 00:59:58,420
0,510 720,1050 1050,1170 1170,1650 1650,2160
a if the client knows

1587
00:59:58,420 --> 01:00:00,670
0,390 630,930 930,1350 1350,1860 1860,2250
that its logic depends on

1588
01:00:00,700 --> 01:00:01,720
0,210 210,390 390,570 570,870 870,1020
a and B B and

1589
01:00:01,720 --> 01:00:02,950
0,330 330,420 420,570 570,870 870,1230
sink it would also fetch

1590
01:00:02,950 --> 01:00:05,590
0,0 0,690 1650,1770 1770,1920 1920,2640
a again okay so there's

1591
01:00:05,590 --> 01:00:08,230
0,270 270,1080 1350,1740 1740,2040 2040,2640
a question she doesn't know

1592
01:00:08,290 --> 01:00:10,460
0,540 540,1050 1380,1830
correct that um.

1593
01:00:12,460 --> 01:00:14,000
0,330 330,870 900,1200
Is she okay.

1594
01:00:15,420 --> 01:00:17,580
0,150 150,300 300,570 570,1290 1500,2160
In this particular scenario a

1595
01:00:18,390 --> 01:00:20,700
0,870 1110,1560 1560,1770 1770,1830 1830,2310
the were trying to establish

1596
01:00:20,700 --> 01:00:21,900
0,300 300,840 840,900 900,1020 1020,1200
whether actually you know she

1597
01:00:21,900 --> 01:00:23,190
0,120 120,570 570,810 810,1080 1080,1290
can determine whether actually ma

1598
01:00:23,190 --> 01:00:25,440
0,510 510,780 780,1560 1620,2130 2130,2250
communication happens concurrently or in

1599
01:00:25,440 --> 01:00:27,180
0,90 90,720 720,1080 1080,1380
the past before reading.

1600
01:00:27,480 --> 01:00:28,230
0,210 210,360 360,570 570,630 630,750
Now we want to be

1601
01:00:28,230 --> 01:00:29,220
0,90 90,150 150,510 510,720 720,990
in the case that actually

1602
01:00:29,220 --> 01:00:30,210
0,300 300,360 360,420 420,750 750,990
happened in the past, because

1603
01:00:30,210 --> 01:00:31,260
0,270 270,540 540,870 870,960 960,1050
actually really happened in the

1604
01:00:31,260 --> 01:00:32,040
0,540
past.

1605
01:00:32,110 --> 01:00:33,460
0,600 630,720 720,810 810,1020 1020,1350
But you know what this

1606
01:00:33,460 --> 01:00:35,170
0,90 90,540 540,960 990,1320 1320,1710
you know a server does

1607
01:00:35,200 --> 01:00:36,160
0,150 150,300 300,780 780,900 900,960
it just pretends that the

1608
01:00:36,160 --> 01:00:39,130
0,630 630,930 930,1440 1470,2550 2610,2970
modification actually happens currently we've

1609
01:00:39,130 --> 01:00:41,180
0,330 330,840 870,1800
actually sees operations.

1610
01:00:41,860 --> 01:00:43,810
0,540 540,1170 1170,1440 1440,1680 1680,1950
Um, and she doesn't really

1611
01:00:43,810 --> 01:00:45,160
0,300 300,450 450,630 630,750 750,1350
have any way to detect

1612
01:00:45,160 --> 01:00:46,990
0,360 450,870 870,1230 1230,1710 1710,1830
that other than you, you

1613
01:00:46,990 --> 01:00:48,790
0,210 210,750 780,1590 1590,1680 1680,1800
know maybe a you know

1614
01:00:48,790 --> 01:00:49,390
0,150 150,300 300,390 390,540 540,600
there should have been a

1615
01:00:49,390 --> 01:00:50,470
0,480 480,690 690,810 810,960 960,1080
modification for a and b

1616
01:00:50,470 --> 01:00:51,260
0,540
together.

1617
01:00:51,500 --> 01:00:52,760
0,480 510,660 660,840 840,1110 1110,1260
Um, but that only could

1618
01:00:52,760 --> 01:00:53,660
0,120 120,450 450,570 570,750 750,900
have known if there were

1619
01:00:53,660 --> 01:00:55,010
0,150 150,210 210,720 720,960 960,1350
sort of communication between c

1620
01:00:55,010 --> 01:00:56,390
0,150 150,240 240,360 360,690 720,1380
and a and b and

1621
01:00:56,420 --> 01:00:57,350
0,300 300,450 450,630 630,780 780,930
second let's talk about that

1622
01:00:57,350 --> 01:00:58,220
0,90 90,150 150,420 420,630 630,870
in a second, but if

1623
01:00:58,400 --> 01:00:59,360
0,270 270,420 420,660 660,870 870,960
she had not talked to

1624
01:00:59,360 --> 01:01:01,610
0,600 810,1200 1200,1260 1260,1680 1830,2250
Amy and you know yeah

1625
01:01:01,610 --> 01:01:03,200
0,240 240,390 390,510 510,900 900,1590
it could have gotten a

1626
01:01:03,230 --> 01:01:04,490
0,330 330,840 840,990 990,1170 1170,1260
good could end up in

1627
01:01:04,490 --> 01:01:06,140
0,150 150,870 870,1110 1110,1200 1200,1650
this scenario where it installed

1628
01:01:06,140 --> 01:01:08,180
0,90 90,300 300,750 930,1380 1380,2040
the old version of offset

1629
01:01:08,180 --> 01:01:09,170
0,360 360,450 450,630 630,930 930,990
by the new version of

1630
01:01:09,170 --> 01:01:10,180
0,270 270,390 390,780
bank debt by.

1631
01:01:10,640 --> 01:01:11,240
0,120 120,210 210,450 450,510 510,600
And we'll see in the

1632
01:01:11,240 --> 01:01:12,230
0,300 300,510 510,630 630,900 900,990
second degree you stick the

1633
01:01:12,230 --> 01:01:13,790
0,330 330,720 780,990 990,1140 1140,1560
fetches in then this promises

1634
01:01:13,790 --> 01:01:14,840
0,360 360,720
cannot happen.

1635
01:01:17,720 --> 01:01:19,190
0,330 330,660 660,780 780,1170 1200,1470
Somebody asked if we time

1636
01:01:19,190 --> 01:01:20,780
0,330 330,780 780,1380 1380,1500 1500,1590
stamp everything, then we could

1637
01:01:20,780 --> 01:01:22,310
0,360 360,780 810,1080 1080,1290 1290,1530
detect things all that thought

1638
01:01:22,310 --> 01:01:23,160
0,90 90,150 150,480
for a second.

1639
01:01:25,450 --> 01:01:26,740
0,240 240,450 450,630 630,720 720,1290
Okay, let's look at the

1640
01:01:27,190 --> 01:01:30,130
0,480 480,870 870,1830 1890,2370 2580,2940
vid, fetch scenario right, so

1641
01:01:30,130 --> 01:01:31,480
0,330 330,780 780,1020 1020,1290 1290,1350
see what actually happens in

1642
01:01:31,480 --> 01:01:34,420
0,180 180,660 780,1140 1740,2310 2310,2940
that case, so client fetch

1643
01:01:36,940 --> 01:01:37,780
0,180 180,270 270,390 390,690 690,840
what is the future of

1644
01:01:37,780 --> 01:01:39,320
0,270 270,1080
off wy.

1645
01:01:41,740 --> 01:01:43,220
0,330 330,540 540,780 780,1200
Oops, what happened now.

1646
01:01:43,520 --> 01:01:44,420
0,660
Wow.

1647
01:01:45,430 --> 01:01:46,820
0,840
Hello.

1648
01:01:48,660 --> 01:01:50,460
0,510 510,930 930,1560
Cheap holding SEC.

1649
01:01:51,320 --> 01:01:53,340
0,540 690,1080 1080,1710
Um something wrong.

1650
01:01:53,780 --> 01:01:55,130
0,390 390,660 660,810 810,1110 1110,1350
Absolutely, nobody can see my

1651
01:01:55,130 --> 01:01:56,700
0,420 720,1260
senior school.

1652
01:02:03,010 --> 01:02:06,740
0,210 210,810 840,3030
It's block, yeah.

1653
01:02:07,160 --> 01:02:08,200
0,720
I'm.

1654
01:02:10,850 --> 01:02:12,350
0,390 390,750 750,930 930,1230 1230,1500
A definite feel today, there's

1655
01:02:12,350 --> 01:02:14,600
0,240 270,720 720,990 990,1260 1740,2250
a business in the component

1656
01:02:14,600 --> 01:02:15,940
0,360 360,510 510,660 660,1020
to a two four.

1657
01:02:16,450 --> 01:02:17,360
0,630
Boy.

1658
01:02:32,480 --> 01:02:34,010
0,300 300,510 510,870 870,1200 1200,1530
And their stock sharing sweet

1659
01:02:34,010 --> 01:02:34,840
0,60 60,90 90,480
for a second.

1660
01:03:21,610 --> 01:03:23,580
0,660 660,780 780,990 990,1470
Hi we're back hopefully.

1661
01:03:24,730 --> 01:03:26,220
0,540 570,1170
Okay, um.

1662
01:03:28,320 --> 01:03:29,880
0,270 270,1230
Oh shoot.

1663
01:03:32,090 --> 01:03:34,460
0,480 780,1320 1560,1740 1740,2040 2040,2370
Okay, um, so back to

1664
01:03:34,460 --> 01:03:36,920
0,900 930,1110 1110,1980 2010,2250 2250,2460
um this example, we're now

1665
01:03:36,920 --> 01:03:37,790
0,120 120,420 420,690 690,810 810,870
the features are in the

1666
01:03:37,790 --> 01:03:39,470
0,390 390,660 660,1050 1050,1410 1410,1680
log, she fetches a off

1667
01:03:39,470 --> 01:03:40,540
0,150 150,300 300,750
dot p Y.

1668
01:03:42,300 --> 01:03:44,020
0,150 150,540 540,630 630,1230
So let me continue.

1669
01:03:44,970 --> 01:03:47,020
0,840 1260,1860
My dog.

1670
01:03:48,960 --> 01:03:50,540
0,360 360,570 570,810 810,1290
Save this for guest.

1671
01:03:51,730 --> 01:03:54,010
0,270 270,1080 1080,1350 1350,1560 1560,2280
A feature of the by,

1672
01:03:54,100 --> 01:03:56,620
0,360 360,930 960,1800 1950,2340 2340,2520
um, the server since the

1673
01:03:56,620 --> 01:03:57,860
0,660
prefix.

1674
01:04:03,180 --> 01:04:04,500
0,270 270,600 600,1140 1140,1260 1260,1320
So basically since you know

1675
01:04:04,500 --> 01:04:06,060
0,270 270,1320
these modifications.

1676
01:04:06,300 --> 01:04:07,500
0,570 570,630 630,930 930,1080 1080,1200
Correctness, the server can just

1677
01:04:07,500 --> 01:04:09,900
0,360 360,660 660,720 720,1230 1620,2400
return whatever it likes, um,

1678
01:04:09,930 --> 01:04:11,910
0,690 900,1590 1590,1680 1680,1800 1800,1980
then, um, you know, in

1679
01:04:11,910 --> 01:04:13,710
0,180 180,540 540,930 930,1200 1200,1800
this new plan current where

1680
01:04:13,710 --> 01:04:15,270
0,390 390,660 660,900 900,1140 1140,1560
defensive action are being logged

1681
01:04:15,540 --> 01:04:18,750
0,810 930,1770 2130,2490 2490,2970 2970,3210
then, um see constructive file

1682
01:04:18,750 --> 01:04:20,100
0,330 330,600 600,750 750,900 900,1350
system using a and B

1683
01:04:20,310 --> 01:04:22,860
0,600 600,930 930,1500 1530,2250 2250,2550
A and then returns of

1684
01:04:22,860 --> 01:04:23,850
0,300 300,390 390,480 480,720 720,990
course you know off dot

1685
01:04:23,850 --> 01:04:25,140
0,480 480,630 630,720 720,1050 1050,1290
pi to the client to

1686
01:04:25,140 --> 01:04:26,790
0,600 630,1260 1260,1410 1410,1530 1530,1650
the client or to the

1687
01:04:26,790 --> 01:04:28,950
0,780 1020,1200 1200,1560 1560,1920 1920,2160
application and then a it

1688
01:04:28,950 --> 01:04:33,450
0,630 1230,2610 3480,3690 3690,3810 3810,4500
adds fetch to the log.

1689
01:04:35,720 --> 01:04:37,700
0,510 510,840 840,1260 1260,1440 1440,1980
Yeah and uploads that log.

1690
01:04:42,050 --> 01:04:44,090
0,330 330,390 390,1050 1290,1560 1560,2040
Through the server, and then

1691
01:04:44,090 --> 01:04:45,880
0,60 60,300 300,690
you know the.

1692
01:04:46,330 --> 01:04:48,100
0,360 360,420 420,750 750,1440 1500,1770
There's a fish off your

1693
01:04:48,100 --> 01:04:51,340
0,270 270,450 450,630 630,1170
bank dot p Y.

1694
01:04:51,760 --> 01:04:53,410
0,720 750,1290 1290,1440 1440,1530 1530,1650
And a you know the

1695
01:04:53,410 --> 01:04:56,320
0,810 810,810 1620,1740 1740,2400 2400,2910
server, a you know previous

1696
01:04:56,320 --> 01:05:00,040
0,1020 1320,1950 2640,3030 3030,3510 3510,3720
example a first sentence just

1697
01:05:00,040 --> 01:05:01,080
0,60 60,720
a prefix.

1698
01:05:01,730 --> 01:05:04,720
0,150 150,270 270,480 480,1140
So you like prefix.

1699
01:05:05,050 --> 01:05:06,700
0,540 570,1110 1110,1260 1260,1440 1440,1650
Um, now you know guests

1700
01:05:06,700 --> 01:05:08,170
0,180 210,690 690,870 870,1200 1200,1470
are now the client sends

1701
01:05:08,170 --> 01:05:09,500
0,150 150,450 450,870
the whole thing.

1702
01:05:10,050 --> 01:05:11,940
0,300 300,570 570,840 840,1530 1560,1890
Right, so since the whole

1703
01:05:11,940 --> 01:05:16,170
0,510 1500,2100 2190,2820 2820,3900 3900,4230
log in, um it but

1704
01:05:16,170 --> 01:05:17,970
0,540 540,1290 1290,1440 1440,1680 1680,1800
it modifications are not in

1705
01:05:17,970 --> 01:05:18,540
0,330
it.

1706
01:05:18,810 --> 01:05:19,890
0,300 300,390 390,660 660,900 900,1080
Um, yeah, so and we'll

1707
01:05:19,890 --> 01:05:20,550
0,180 180,270 270,420 420,480 480,660
have to send the whole

1708
01:05:20,550 --> 01:05:21,420
0,330 330,510 510,600 600,810 810,870
lot well to send the

1709
01:05:21,420 --> 01:05:22,680
0,150 150,390 390,510 510,870 870,1260
whole log and must include

1710
01:05:22,680 --> 01:05:24,720
0,90 90,360 360,480 480,1020 1590,2040
the fetch from c right

1711
01:05:25,080 --> 01:05:27,630
0,540 540,990 990,2070 2100,2520 2520,2550
and so, um, um, um,

1712
01:05:27,630 --> 01:05:29,610
0,1110 1110,1200 1200,1650 1680,1800 1800,1980
if it doesn't you know

1713
01:05:29,610 --> 01:05:32,250
0,420 420,1230 1230,1320 1320,1800 1890,2640
sensitive effect, we see, um,

1714
01:05:32,250 --> 01:05:35,430
0,420 420,1170 1170,1440 1440,2160 2190,3180
it actually, um, {sees's -}

1715
01:05:35,430 --> 01:05:37,080
0,0 0,660 660,1020 1020,1260 1260,1650
a she's {actually -} not

1716
01:05:37,110 --> 01:05:39,990
0,300 300,570 870,1230 1230,1890 2220,2880
there's a read operation and

1717
01:05:39,990 --> 01:05:43,230
0,420 420,1050 1050,1560 2610,3120 3120,3240
a basically the client will

1718
01:05:43,230 --> 01:05:44,910
0,600 630,840 840,1020 1020,1350 1350,1680
reject a the log because

1719
01:05:44,910 --> 01:05:46,230
0,270 270,360 360,540 540,810 810,1320
actually it's own fetch operation,

1720
01:05:46,230 --> 01:05:47,520
0,360 360,570 570,690 690,900 1110,1290
Jackson dot in it so

1721
01:05:47,520 --> 01:05:49,950
0,180 180,360 360,900 900,1410 1560,2430
it's not possible for the

1722
01:05:51,090 --> 01:05:52,410
0,450 450,540 540,990 990,1200 1200,1320
server to pretend you know

1723
01:05:52,410 --> 01:05:53,970
0,300 300,390 390,780 780,1110 1110,1560
that to send the log

1724
01:05:53,970 --> 01:05:55,320
0,300 300,570 570,900 900,1200 1200,1350
later on, because actually the

1725
01:05:55,320 --> 01:05:57,120
0,270 270,780 810,1170 1170,1290 1290,1800
new log should have included

1726
01:05:57,120 --> 01:05:58,950
0,180 180,450 450,1110 1410,1590 1590,1830
that fetch operation, um that

1727
01:05:58,950 --> 01:06:01,260
0,150 150,270 270,510 810,1530 1770,2310
was in it and update

1728
01:06:01,260 --> 01:06:02,490
0,90 90,540 540,780 780,930 930,1230
the c or the server

1729
01:06:02,490 --> 01:06:04,350
0,390 390,960 960,1110 1110,1350 1350,1860
cannot twice that fetch operation

1730
01:06:04,350 --> 01:06:07,020
0,330 330,810 1230,2100 2340,2490 2490,2670
into here, um to make

1731
01:06:07,020 --> 01:06:08,220
0,90 90,510 510,660 660,900 900,1200
it consistent what actually happened

1732
01:06:08,220 --> 01:06:10,140
0,720 900,1350 1350,1590 1590,1740 1740,1920
before, um, because that would

1733
01:06:10,140 --> 01:06:11,730
0,90 90,750 780,1350 1350,1440 1440,1590
be detected because you know

1734
01:06:11,730 --> 01:06:13,050
0,180 180,870 870,990 990,1050 1050,1320
the modifications on the records

1735
01:06:13,050 --> 01:06:13,980
0,120 120,270 270,420 420,690 690,930
of a and b are

1736
01:06:13,980 --> 01:06:15,630
0,390 390,540 540,1170 1170,1410 1410,1650
not, um, wouldn't check out.

1737
01:06:18,420 --> 01:06:20,340
0,540 750,900 900,1320 1320,1740 1740,1920
Okay, so basically what this

1738
01:06:20,340 --> 01:06:21,990
0,240 240,690 690,1170 1170,1410 1440,1650
really does is to sort

1739
01:06:21,990 --> 01:06:23,310
0,60 60,330 330,810 930,1110 1110,1320
of step back is that

1740
01:06:23,310 --> 01:06:24,150
0,120 120,210 210,390 390,660 660,840
you can think about this

1741
01:06:24,150 --> 01:06:27,060
0,570 570,930 1230,1980 2190,2730 2730,2910
attack that a server sort

1742
01:06:27,060 --> 01:06:28,320
0,60 60,450 450,630 630,720 720,1260
of pretends that the modification

1743
01:06:28,320 --> 01:06:29,220
0,90 90,270 270,390 390,600 600,900
of a and b happen

1744
01:06:29,220 --> 01:06:31,380
0,690 900,1260 1260,1620 1620,1890 1890,2160
concurrently a with the sea

1745
01:06:31,380 --> 01:06:32,910
0,270 270,570 720,1080 1080,1350 1350,1530
reading it, um, even though

1746
01:06:32,910 --> 01:06:33,750
0,120 120,330 330,510 510,750 750,840
we know that actually it's

1747
01:06:33,750 --> 01:06:34,830
0,180 180,240 240,780 780,930 930,1080
not the case and by

1748
01:06:34,830 --> 01:06:36,150
0,390 390,480 480,870 870,1080 1080,1320
speaking the fetches in it,

1749
01:06:36,360 --> 01:06:38,820
0,540 540,1530 1530,1770 1770,2100 2100,2460
um, that attack cannot happen.

1750
01:06:43,440 --> 01:06:46,020
0,270 270,420 420,960 1470,1800 1800,2580
I have a two questions,

1751
01:06:46,080 --> 01:06:48,300
0,480 780,1140 1140,1500 1500,1890 2040,2220
um, maybe first just if

1752
01:06:48,300 --> 01:06:50,100
0,120 120,420 420,840 840,1530 1560,1800
you could like define for

1753
01:06:50,100 --> 01:06:52,200
0,810 810,960 960,1260 1290,1650 1650,2100
consistency and the fetch modify

1754
01:06:52,200 --> 01:06:53,610
0,720 720,870 870,990 990,1050 1050,1410
consistency, and then the second

1755
01:06:53,610 --> 01:06:55,950
0,420 750,960 960,1140 1140,2070 2100,2340
is in this example, so

1756
01:06:55,950 --> 01:06:57,780
0,210 210,630 630,720 720,1290 1290,1830
what exactly is stopping the

1757
01:06:58,260 --> 01:06:59,600
0,630 630,1200
server from.

1758
01:07:00,040 --> 01:07:02,200
0,690 690,1170 1200,1740 1740,2040 2040,2160
Placing the fetch in the

1759
01:07:02,200 --> 01:07:03,580
0,240 240,630 630,780 780,870 870,1380
right place of the log

1760
01:07:03,820 --> 01:07:06,100
0,510 510,1050 1050,1410 1410,1770 1770,2280
because remember every log entry

1761
01:07:06,310 --> 01:07:08,000
0,420 420,630 630,750 750,1380
covers all its proceedings.

1762
01:07:08,340 --> 01:07:09,260
0,690
Entries.

1763
01:07:09,660 --> 01:07:13,050
0,300 300,540 540,870 870,3120 3120,3390
Okay, so if z server

1764
01:07:13,050 --> 01:07:14,190
0,150 150,450 450,810 810,1020 1020,1140
could not slice that you

1765
01:07:14,190 --> 01:07:15,690
0,180 180,960 990,1110 1110,1200 1200,1500
know fetch you know after

1766
01:07:15,690 --> 01:07:17,250
0,120 120,570 570,900 900,960 960,1560
the prefix before the modification

1767
01:07:17,250 --> 01:07:18,180
0,120 120,300 300,420 420,660
of a and e.

1768
01:07:18,860 --> 01:07:19,670
0,240 240,390 390,510 510,630 630,810
So let's say it only

1769
01:07:19,670 --> 01:07:20,900
0,240 240,360 360,570 570,630 630,1230
wants to send the modification

1770
01:07:20,900 --> 01:07:21,920
0,90 90,360 360,510 510,930 930,1020
of a it knows the

1771
01:07:21,920 --> 01:07:23,330
0,420 420,690 690,780 780,1320 1320,1410
hash of the modification of

1772
01:07:23,330 --> 01:07:24,650
0,120 120,210 210,570 570,1050 1050,1320
a and everything preceding it,

1773
01:07:25,040 --> 01:07:26,600
0,180 180,300 300,420 420,810 900,1560
and then it could insert

1774
01:07:26,600 --> 01:07:27,680
0,120 120,450 450,600 600,810 810,1080
the fetch to see there

1775
01:07:27,680 --> 01:07:29,330
0,210 210,300 300,600 600,930 1500,1650
because it knows that it's

1776
01:07:29,330 --> 01:07:31,100
0,150 150,630 630,840 840,1260 1620,1770
a hash of that and

1777
01:07:31,100 --> 01:07:32,600
0,390 390,600 600,840 840,1140 1170,1500
then he says that yeah

1778
01:07:32,600 --> 01:07:33,320
0,90 90,210 210,300 300,540 540,720
but then they couldn't send

1779
01:07:33,320 --> 01:07:34,540
0,90 90,570 570,660 660,1020
the application to be.

1780
01:07:36,410 --> 01:07:37,700
0,270 270,330 330,840 840,960 960,1290
Because the modification would be,

1781
01:07:37,700 --> 01:07:39,140
0,120 120,480 480,720 720,1110 1110,1440
you know is directly after

1782
01:07:39,140 --> 01:07:40,700
0,420 450,690 690,930 930,1140 1140,1560
a and so any must

1783
01:07:40,700 --> 01:07:41,570
0,330 330,450 450,570 570,660 660,870
yeah and so it can't

1784
01:07:41,570 --> 01:07:42,560
0,360 360,450 450,750 750,870 870,990
spice it between a and

1785
01:07:42,560 --> 01:07:43,400
0,120 120,540
b either.

1786
01:07:44,490 --> 01:07:45,760
0,240 240,570 570,960
I see, okay.

1787
01:07:49,580 --> 01:07:50,690
0,210 210,390 390,660 660,750 750,1110
So it was a problem

1788
01:07:50,690 --> 01:07:51,950
0,210 210,600 600,840 840,1170 1170,1260
with having it where it

1789
01:07:51,950 --> 01:07:53,520
0,360 360,510 510,600 600,1320
is in the picture.

1790
01:07:54,220 --> 01:07:55,160
0,750
I'm.

1791
01:07:55,470 --> 01:07:56,400
0,240 240,330 330,570 570,720 720,930
What I've learned is now

1792
01:07:56,400 --> 01:07:57,540
0,150 150,360 360,450 450,900 960,1140
the picture is perfect, that's

1793
01:07:57,540 --> 01:07:59,460
0,420 750,1110 1170,1530 1530,1830 1830,1920
fine right, in fact you

1794
01:07:59,460 --> 01:08:00,720
0,120 120,330 330,720 720,1170 1170,1260
know this basically suggests you

1795
01:08:00,720 --> 01:08:01,890
0,150 150,540 660,840 840,1080 1080,1170
know that the fetch of

1796
01:08:01,890 --> 01:08:04,050
0,570 630,990 990,1500 1500,1590 1590,2160
c actually included the modification

1797
01:08:04,050 --> 01:08:04,860
0,120 120,270 270,570 570,720 720,810
of a be like the

1798
01:08:04,860 --> 01:08:06,000
0,240 240,390 390,480 480,720 720,1140
blue was the real wog.

1799
01:08:06,760 --> 01:08:08,170
0,630 630,870 870,990 990,1080 1080,1410
And we have the fashion

1800
01:08:08,170 --> 01:08:09,760
0,90 90,570 570,990 990,1500 1500,1590
to see it and you

1801
01:08:09,760 --> 01:08:11,170
0,150 150,630 720,1140 1140,1320 1320,1410
know the everything to be

1802
01:08:11,170 --> 01:08:11,960
0,510
perfect.

1803
01:08:18,660 --> 01:08:20,130
0,240 240,600 600,690 690,1320 1320,1470
So just to clarify the

1804
01:08:20,130 --> 01:08:22,170
0,570 570,690 690,930 930,1440 1440,2040
definition of for consistent, yeah,

1805
01:08:22,170 --> 01:08:25,950
0,60 60,270 270,1770 3480,3630 3630,3780
how about zero I haven't

1806
01:08:25,950 --> 01:08:26,850
0,210 210,390 390,450 450,840 840,900
talked about the definition of

1807
01:08:26,850 --> 01:08:28,080
0,420 420,870 870,960 960,1110 1110,1230
forecasters yet I'm gonna do

1808
01:08:28,080 --> 01:08:28,940
0,150 150,300 300,630
that right now.

1809
01:08:30,450 --> 01:08:31,280
0,540
Okay.

1810
01:08:32,860 --> 01:08:34,120
0,360 360,690 690,960 960,1110 1110,1260
Um, so we're talking about

1811
01:08:34,120 --> 01:08:35,360
0,150 150,930
for consistency.

1812
01:08:43,980 --> 01:08:45,750
0,570 780,1170 1170,1410 1410,1590 1590,1770
So, um, so what we've

1813
01:08:45,750 --> 01:08:47,640
0,450 660,900 900,1260 1260,1470 1470,1890
seen so far is that

1814
01:08:47,640 --> 01:08:50,220
0,720 720,1140 1140,1680 1680,2070 2070,2580
z server cannot really manipulate

1815
01:08:50,220 --> 01:08:51,150
0,90 90,480 480,570 570,690 690,930
the log, it can only

1816
01:08:51,150 --> 01:08:53,040
0,420 420,1080 1080,1410 1410,1530 1530,1890
send prefixes or can hide

1817
01:08:53,040 --> 01:08:55,620
0,540 540,780 1350,1590 1590,2010 2250,2580
parts you can hide it

1818
01:08:55,620 --> 01:08:57,300
0,90 90,330 330,690 690,1020 1020,1680
can send profits back to

1819
01:08:57,300 --> 01:08:58,740
0,90 90,630 810,1110 1110,1170 1170,1440
the client, but it can't

1820
01:08:58,740 --> 01:09:00,330
0,210 210,690 690,810 810,1260 1290,1590
really modify the walk, so

1821
01:09:00,330 --> 01:09:01,650
0,180 180,510 510,660 660,720 720,1320
just basically have an opportunity

1822
01:09:01,650 --> 01:09:03,690
0,330 330,420 420,600 1230,1590 1590,2040
to you know a show

1823
01:09:03,690 --> 01:09:05,730
0,300 300,630 630,720 720,1230 1230,2040
different logs to different, um,

1824
01:09:05,760 --> 01:09:06,810
0,300 300,690 690,780 780,930 930,1050
uh, clients, and that is

1825
01:09:06,810 --> 01:09:09,600
0,360 360,660 990,1770 2010,2190 2190,2790
basically what a poor consistency

1826
01:09:09,600 --> 01:09:11,430
0,420 720,960 960,1320 1350,1530 1530,1830
is and so it cannot

1827
01:09:11,430 --> 01:09:12,630
0,450 450,510 510,630 630,990 990,1200
provide you know the kind

1828
01:09:12,630 --> 01:09:14,490
0,240 420,930 930,1290 1290,1530 1530,1860
of a desert cannot provide

1829
01:09:14,490 --> 01:09:15,630
0,60 60,330 330,390 390,960 960,1140
the type of persistence that

1830
01:09:15,630 --> 01:09:16,440
0,120 120,300 300,510 510,750 750,810
we've seen so far in

1831
01:09:16,440 --> 01:09:17,820
0,90 90,420 420,660 660,1110 1110,1380
the past name likely arise

1832
01:09:17,820 --> 01:09:19,440
0,510 510,600 600,1020 1020,1530 1530,1620
ability and experimental persistency and

1833
01:09:19,440 --> 01:09:20,250
0,150 150,270 270,480 480,660 660,810
things like that, that's just

1834
01:09:20,250 --> 01:09:22,050
0,180 180,750 1200,1620 1620,1710 1710,1800
not possible, but it can

1835
01:09:22,050 --> 01:09:23,400
0,330 330,570 570,870 870,1050 1050,1350
provide this what this what

1836
01:09:23,400 --> 01:09:24,930
0,60 60,300 300,630 630,810 810,1530
the paper calls or introduces

1837
01:09:25,140 --> 01:09:26,280
0,210 210,420 420,1080
is for consistency.

1838
01:09:26,490 --> 01:09:28,110
0,630 630,780 780,1110 1110,1560 1560,1620
And let me abstract a

1839
01:09:28,110 --> 01:09:29,100
0,240 240,360 360,630 630,870 870,990
little bit away and to

1840
01:09:29,100 --> 01:09:30,340
0,300 300,420 420,600 600,990
explain what that is.

1841
01:09:30,620 --> 01:09:31,460
0,180 180,330 330,480 480,630 630,840
So let's say we have

1842
01:09:31,460 --> 01:09:33,170
0,210 210,540 540,990 1320,1530 1530,1710
a client a um, we

1843
01:09:33,170 --> 01:09:34,860
0,360 360,420 420,810 810,1350
have the server 's.

1844
01:09:35,280 --> 01:09:37,290
0,630 870,1140 1140,1290 1290,1350 1350,2010
And it has a log.

1845
01:09:39,150 --> 01:09:40,440
0,390 390,570 570,870 870,1140 1140,1290
And let's say I'm just

1846
01:09:40,440 --> 01:09:41,790
0,120 120,540 540,780 780,1110 1110,1350
gonna extract everything away as

1847
01:09:41,790 --> 01:09:43,820
0,420 420,990 990,1110 1110,1650
entries, atc and DNA.

1848
01:09:45,540 --> 01:09:47,370
0,660 690,1140 1140,1260 1260,1380 1380,1830
And, um, you know a

1849
01:09:47,370 --> 01:09:48,390
0,150 150,210 210,540 540,900 900,1020
you know whatever maybe you

1850
01:09:48,390 --> 01:09:49,680
0,210 300,570 570,840 840,1170 1170,1290
know panda dot entry to

1851
01:09:49,680 --> 01:09:51,720
0,120 120,630 780,1470 1470,1950 1950,2040
the walk a and you

1852
01:09:51,720 --> 01:09:52,280
0,270
know.

1853
01:09:52,740 --> 01:09:56,220
0,1320 1320,1410 1410,1590 1590,2100 2790,3480
Yeah, and that's basically a

1854
01:09:56,490 --> 01:09:58,260
0,690 810,1320 1320,1410 1410,1530 1530,1770
and maybe we have another

1855
01:09:58,260 --> 01:09:59,740
0,240 240,630
coin b.

1856
01:10:00,830 --> 01:10:02,930
0,810 1020,1380 1380,1770 1770,1860 1860,2100
And, um, what the server

1857
01:10:02,930 --> 01:10:04,520
0,150 150,780 900,1140 1140,1350 1350,1590
can do you sort of

1858
01:10:04,580 --> 01:10:06,350
0,810 1080,1290 1290,1470 1470,1740 1740,1770
give the other client a

1859
01:10:06,350 --> 01:10:07,370
0,390 390,660 660,840 840,930 930,1020
completely different view of the

1860
01:10:07,370 --> 01:10:09,230
0,510 570,1050 1050,1410 1410,1590 1590,1860
world, why basically have another

1861
01:10:09,230 --> 01:10:10,500
0,390 390,480 480,600 600,990
copy of the law.

1862
01:10:11,340 --> 01:10:12,360
0,210 210,330 330,510 510,810 810,1020
Or its own copy or

1863
01:10:12,360 --> 01:10:13,710
0,450 450,630 630,990 990,1290 1290,1350
give a different copy of

1864
01:10:13,710 --> 01:10:14,850
0,90 90,330 330,420 420,780 780,1140
the block, for example, maybe

1865
01:10:14,850 --> 01:10:16,980
0,360 360,930 930,1350 1350,1800
log contains director a.

1866
01:10:17,150 --> 01:10:18,800
0,480 480,660 660,870 870,1110 1110,1650
Um, but then every operation

1867
01:10:18,800 --> 01:10:20,330
0,90 90,270 270,810 930,1350 1350,1530
of b does goes into

1868
01:10:20,330 --> 01:10:22,160
0,240 240,780 1140,1320 1320,1650 1650,1830
this log b one b

1869
01:10:22,160 --> 01:10:24,080
0,630 660,1080 1080,1290 1290,1470 1470,1920
two maybe even some operations

1870
01:10:24,080 --> 01:10:25,130
0,150 150,300 300,690 690,840 840,1050
from other clients that also

1871
01:10:25,130 --> 01:10:26,510
0,180 180,330 330,810 900,1170 1170,1380
get this view and open

1872
01:10:26,510 --> 01:10:27,860
0,150 150,660 810,1080 1080,1200 1200,1350
this log, um but they're

1873
01:10:27,860 --> 01:10:29,390
0,270 270,540 540,990 990,1200 1200,1530
not actually shown to a.

1874
01:10:29,880 --> 01:10:31,560
0,120 120,240 240,540 540,1140 1140,1680
You know a basically haha,

1875
01:10:31,560 --> 01:10:32,940
0,420 420,600 600,870 870,1200 1200,1380
a may actually also add

1876
01:10:32,940 --> 01:10:34,200
0,240 240,570 570,750 750,1080 1080,1260
more entries to walk like

1877
01:10:34,200 --> 01:10:35,850
0,240 240,390 390,660 660,1050 1050,1650
maybe it had bc DNA

1878
01:10:36,090 --> 01:10:37,590
0,570 570,870 870,1230 1230,1290 1290,1500
a and those are not

1879
01:10:37,590 --> 01:10:39,780
0,240 240,570 570,1140 1170,1680 2010,2190
actually shown to be so

1880
01:10:39,780 --> 01:10:42,270
0,180 180,330 330,1050 1260,2040 2220,2490
these two logs to the

1881
01:10:42,300 --> 01:10:43,710
0,570 570,840 840,930 930,1290 1290,1410
rural view of a you

1882
01:10:43,710 --> 01:10:45,450
0,150 150,300 300,690 690,1350 1410,1740
know it's completely consistent because

1883
01:10:45,450 --> 01:10:46,620
0,150 150,750 750,840 840,1050 1050,1170
it's unaware of any of

1884
01:10:46,620 --> 01:10:48,870
0,240 240,810 1380,1770 1770,1890 1890,2250
these changes and to be

1885
01:10:48,870 --> 01:10:49,740
0,90 90,270 270,450 450,720 720,870
you know this log looks

1886
01:10:49,740 --> 01:10:51,240
0,420 420,900 900,1110 1110,1320 1320,1500
completely consistent because they're really

1887
01:10:51,240 --> 01:10:53,250
0,330 330,420 420,690 690,1170 1260,2010
aware of any a changes

1888
01:10:54,330 --> 01:10:55,410
0,330 330,480 480,900 900,990 990,1080
in this model of the

1889
01:10:55,410 --> 01:10:57,300
0,480 570,870 870,1230 1230,1440 1440,1890
world, the only sure shared

1890
01:10:57,300 --> 01:10:59,160
0,720 720,930 930,1530 1530,1740 1740,1860
communication a place that is

1891
01:10:59,160 --> 01:11:00,390
0,390 390,510 510,570 570,1080 1110,1230
there is the server, you

1892
01:11:00,390 --> 01:11:01,140
0,90 90,390 390,480 480,630 630,750
know that is sort of

1893
01:11:01,140 --> 01:11:02,460
0,360 600,780 780,870 870,1020 1020,1320
the you know the thing

1894
01:11:02,460 --> 01:11:04,650
0,210 210,300 300,480 480,1380 1410,2190
that you know a shows

1895
01:11:04,650 --> 01:11:05,880
0,120 120,270 270,540 540,990 990,1230
you know what actually is

1896
01:11:05,880 --> 01:11:06,780
0,90 90,330 330,390 390,480 480,900
the state of the system.

1897
01:11:07,600 --> 01:11:09,160
0,570 750,1020 1020,1320 1320,1470 1470,1560
Um, and one way you

1898
01:11:09,160 --> 01:11:10,120
0,90 90,270 270,600 600,780 780,960
can think about is like

1899
01:11:10,120 --> 01:11:11,140
0,210 210,480 480,600 600,780 780,1020
in terms that we've talked

1900
01:11:11,140 --> 01:11:12,460
0,270 270,930 960,1140 1140,1200 1200,1320
about before, this is sort

1901
01:11:12,460 --> 01:11:13,540
0,60 60,210 210,270 270,600 600,1080
of like a split brain.

1902
01:11:16,620 --> 01:11:19,500
0,1140 1440,2160 2340,2490 2490,2580 2580,2880
Basically a you know a

1903
01:11:19,500 --> 01:11:21,030
0,300 300,780 780,1050 1050,1320 1320,1530
gets A C one view

1904
01:11:21,030 --> 01:11:21,960
0,90 90,180 180,630 630,720 720,930
of the world, you know

1905
01:11:21,960 --> 01:11:24,450
0,240 240,360 360,750 750,1710 1740,2490
cooked up by a bylaw

1906
01:11:24,450 --> 01:11:26,610
0,270 270,720 720,870 870,1440 1680,2160
that's consistent with Asia and

1907
01:11:26,610 --> 01:11:27,390
0,90 90,210 210,630 630,690 690,780
you know be you know

1908
01:11:27,390 --> 01:11:28,200
0,240 240,450 450,630 630,720 720,810
it's another view of the

1909
01:11:28,200 --> 01:11:28,920
0,390
world.

1910
01:11:29,230 --> 01:11:30,910
0,480 480,840 840,960 960,1590 1590,1680
And basically the servers or

1911
01:11:30,910 --> 01:11:32,590
0,300 300,420 420,570 570,1110 1110,1680
keeps them to carefully separate

1912
01:11:32,800 --> 01:11:34,810
0,840 840,1410 1560,1710 1710,1920 1920,2010
and um, and then we

1913
01:11:34,810 --> 01:11:36,700
0,120 120,660 900,1350 1350,1440 1440,1890
can pretend that you know

1914
01:11:36,760 --> 01:11:38,530
0,360 360,630 630,990 1440,1710 1710,1770
he's looking one sees the

1915
01:11:38,530 --> 01:11:40,030
0,360 510,780 780,840 840,960 960,1500
left side of his brain

1916
01:11:40,060 --> 01:11:41,680
0,600 600,840 840,1200 1200,1410 1410,1620
be she's actually the right

1917
01:11:41,680 --> 01:11:42,940
0,300 300,510 510,720 720,1020
side {of's -} brain.

1918
01:11:43,830 --> 01:11:45,120
0,1050
Okay.

1919
01:11:45,800 --> 01:11:46,880
0,90 90,210 210,360 360,750
Does that make sense.

1920
01:11:50,120 --> 01:11:50,900
0,150 150,330 330,450 450,510 510,780
So that's sort of what

1921
01:11:50,900 --> 01:11:51,980
0,150 150,270 270,660 660,780 780,1080
you know basically they're saying

1922
01:11:51,980 --> 01:11:52,910
0,150 150,390 390,450 450,720 750,930
is like you know we

1923
01:11:52,910 --> 01:11:54,110
0,390 390,630 630,810 810,1080 1080,1200
can't really do better than

1924
01:11:54,110 --> 01:11:56,360
0,210 210,1020 1050,1650 1650,1830 1830,2250
for consistency because it's always

1925
01:11:56,360 --> 01:11:58,340
0,570 570,780 780,870 870,1500 1620,1980
possible for the server, um

1926
01:11:58,340 --> 01:12:00,740
0,630 630,1710 1740,2010 2010,2310 2310,2400
to um to basically make

1927
01:12:00,740 --> 01:12:02,030
0,90 90,510 510,630 630,720 720,1290
a copy of the log

1928
01:12:02,300 --> 01:12:03,830
0,300 300,660 660,780 780,1020 1020,1530
and then from then on

1929
01:12:03,860 --> 01:12:05,600
0,570 570,840 840,1260 1260,1350 1350,1740
present different views for these

1930
01:12:05,990 --> 01:12:06,860
0,750
clients.

1931
01:12:07,200 --> 01:12:09,360
0,510 810,1110 1110,1290 1290,1560 1560,2160
Now s could not merge

1932
01:12:09,360 --> 01:12:10,680
0,60 60,240 240,540 540,900 900,1320
the two logs again correct,

1933
01:12:10,710 --> 01:12:12,000
0,450 450,720 720,1020 1020,1110 1110,1290
these logs have to be

1934
01:12:12,000 --> 01:12:13,050
0,450 450,540 540,690 690,840 840,1050
separate, you know for a

1935
01:12:13,050 --> 01:12:14,640
0,120 120,450 750,1320 1320,1410 1410,1590
and b because it could

1936
01:12:14,640 --> 01:12:16,650
0,180 180,990 990,1650 1650,1770 1770,2010
be it's impossible for us

1937
01:12:16,650 --> 01:12:17,400
0,120 120,270 270,330 330,660 660,750
to sort of take you

1938
01:12:17,400 --> 01:12:18,720
0,150 150,270 270,840 840,1200 1200,1320
know the logs, let them

1939
01:12:18,720 --> 01:12:19,950
0,270 270,390 390,450 450,900 1020,1230
grow for a while and

1940
01:12:19,950 --> 01:12:21,300
0,90 90,420 420,960 960,1170 1170,1350
then basically splice these two

1941
01:12:21,300 --> 01:12:22,600
0,300 300,660 660,1020
logs together again.

1942
01:12:22,940 --> 01:12:24,710
0,510 510,870 870,1050 1050,1140 1140,1770
Um, because you know the

1943
01:12:24,980 --> 01:12:27,050
0,960 960,1170 1170,1560 1560,1740 1740,2070
because these entries should protect

1944
01:12:27,050 --> 01:12:28,310
0,150 150,360 360,750 750,1050 1050,1260
all these preceding entries, the

1945
01:12:28,310 --> 01:12:29,630
0,330 330,690 690,810 810,930 930,1320
entries protect all the preceding

1946
01:12:29,630 --> 01:12:31,310
0,330 330,420 420,930 1110,1560 1560,1680
entries with those and so

1947
01:12:31,310 --> 01:12:32,330
0,180 180,600 600,720 720,810 810,1020
you can't put them back

1948
01:12:32,330 --> 01:12:33,000
0,450
together.

1949
01:12:33,900 --> 01:12:35,100
0,300 300,480 480,570 570,960 960,1200
And because the signatures wouldn't

1950
01:12:35,100 --> 01:12:36,330
0,210 210,420 420,630 630,720 720,1230
check out because the signatures

1951
01:12:36,330 --> 01:12:37,590
0,330 330,630 630,690 690,960 960,1260
always covered the current entry

1952
01:12:37,590 --> 01:12:38,880
0,180 180,300 300,360 360,720 720,1290
for all the preceding entries.

1953
01:12:40,370 --> 01:12:41,420
0,390 390,570 570,720 720,810 810,1050
Um, and so the only

1954
01:12:41,420 --> 01:12:42,530
0,120 120,390 390,540 540,930 930,1110
thing they are basically do

1955
01:12:42,530 --> 01:12:44,210
0,450 450,780 780,1080 1080,1200 1200,1680
attack the server can do

1956
01:12:44,240 --> 01:12:46,340
0,780 810,1260 1260,1380 1380,1740 1740,2100
basically split the world, fourth

1957
01:12:46,340 --> 01:12:48,650
0,90 90,480 960,1560 1560,1980 1980,2310
the world into different um

1958
01:12:48,650 --> 01:12:51,200
0,270 270,420 420,690 690,1260 2310,2550
into two different logs, they

1959
01:12:51,200 --> 01:12:52,070
0,210 210,330 330,360 360,690 690,870
might have a common log

1960
01:12:52,070 --> 01:12:53,270
0,60 60,120 120,660 720,1110 1110,1200
at the beginning, then to

1961
01:12:53,270 --> 01:12:54,770
0,210 210,270 270,600 600,990 1110,1500
sort of force them now

1962
01:12:54,770 --> 01:12:55,640
0,240 240,360 360,540 540,750 750,870
that you know a and

1963
01:12:55,640 --> 01:12:57,020
0,270 270,630 630,1020 1020,1110 1110,1380
b basically operate in different

1964
01:12:57,020 --> 01:12:57,720
0,570
worlds.

1965
01:12:59,140 --> 01:13:00,260
0,510
AH.

1966
01:13:01,400 --> 01:13:02,360
0,360 360,540 540,720 720,870 870,960
So, and that's sort of

1967
01:13:02,360 --> 01:13:04,310
0,570 600,1140 1140,1320 1320,1860 1860,1950
the definition for consistency and

1968
01:13:04,310 --> 01:13:05,660
0,240 240,600 600,780 780,1290 1290,1350
that's basically the best you

1969
01:13:05,660 --> 01:13:07,040
0,90 90,270 270,660 660,900 900,1380
know this particular file system,

1970
01:13:07,040 --> 01:13:09,020
0,630 630,1110 1110,1350 1350,1470 1470,1980
this particular system can do

1971
01:13:09,080 --> 01:13:11,030
0,360 360,660 690,900 900,1350 1350,1950
if there's the only communication

1972
01:13:11,030 --> 01:13:12,660
0,300 300,660 660,1020 1020,1470
actually happens between s.

1973
01:13:15,170 --> 01:13:16,100
0,390 390,480 480,690 690,840 840,930
Node is actually by the

1974
01:13:16,100 --> 01:13:17,480
0,480 660,900 900,1110 1110,1170 1170,1380
way that's sort of for

1975
01:13:17,480 --> 01:13:18,890
0,570 570,660 660,840 840,1200 1200,1410
consistency is good enough for

1976
01:13:18,890 --> 01:13:20,300
0,180 180,540 540,1080 1080,1200 1200,1410
our particular applications, you keep

1977
01:13:20,300 --> 01:13:24,020
0,120 120,510 930,1500 1500,2640 3090,3720
a correct um, because um

1978
01:13:24,170 --> 01:13:25,670
0,480 480,630 630,1050 1050,1380 1380,1500
either the server shows the

1979
01:13:25,670 --> 01:13:27,590
0,480 510,1140 1170,1290 1290,1440 1440,1920
old version, you know without

1980
01:13:27,590 --> 01:13:28,400
0,600
amb.

1981
01:13:28,610 --> 01:13:30,620
0,660 660,1440 1470,1560 1560,1680 1680,2010
Um, or you know the

1982
01:13:30,620 --> 01:13:31,850
0,360 360,600 600,690 690,1110 1110,1230
server shows the s you

1983
01:13:31,850 --> 01:13:33,830
0,180 180,540 540,1170 1170,1500 1500,1980
know the modification with ab.

1984
01:13:37,430 --> 01:13:38,540
0,540 630,810 810,960 960,1020 1020,1110
Okay, so what do you

1985
01:13:38,540 --> 01:13:39,860
0,420 690,900 900,1110 1110,1260 1260,1320
do it seems like you

1986
01:13:39,860 --> 01:13:40,910
0,150 150,540 540,660 660,780 780,1050
know maybe this is actually

1987
01:13:40,910 --> 01:13:43,100
0,570 570,1470 1500,1650 1650,1770 1770,2190
profitable, how do you detect

1988
01:13:43,100 --> 01:13:45,350
0,600 1380,1560 1560,1710 1710,1890 1890,2250
forks and how could you.

1989
01:13:52,050 --> 01:13:52,890
0,240 240,300 300,390 390,630 630,840
So how do you take

1990
01:13:52,890 --> 01:13:55,020
0,120 120,720 720,1320 1320,1740 1740,2130
for twelve to a scheme

1991
01:13:55,020 --> 01:13:58,320
0,570 570,1560 1590,2280 2610,2910 2910,3300
that paper mentions a one

1992
01:13:58,320 --> 01:14:00,240
0,660 660,840 840,900 900,1140 1140,1920
is out of band communication.

1993
01:14:10,220 --> 01:14:11,780
0,180 180,300 300,510 510,1260
It is very straightforward.

1994
01:14:12,050 --> 01:14:13,610
0,120 120,420 420,870 870,1080 1080,1560
You know if you know

1995
01:14:13,610 --> 01:14:15,260
0,510 510,960 990,1440 1440,1530 1530,1650
AV ever talk to each

1996
01:14:15,260 --> 01:14:15,980
0,420
other.

1997
01:14:16,430 --> 01:14:17,480
0,210 210,600 600,690 690,900 900,1050
For example I ask each

1998
01:14:17,480 --> 01:14:18,470
0,360 390,540 540,690 690,780 780,990
other hey, what did your

1999
01:14:18,470 --> 01:14:19,700
0,300 300,600 600,690 690,750 750,1230
last entry in the log

2000
01:14:20,120 --> 01:14:21,170
0,420 420,570 570,660 660,780 780,1050
a and they get different

2001
01:14:21,170 --> 01:14:22,020
0,570
answers.

2002
01:14:22,440 --> 01:14:23,520
0,300 300,690 690,780 780,930 930,1080
They know you know that

2003
01:14:23,520 --> 01:14:25,560
0,60 60,180 180,330 330,630 1290,2040
they have been for a

2004
01:14:25,590 --> 01:14:28,140
0,720 720,1050 1050,1860 2040,2400 2400,2550
because either they could have

2005
01:14:28,140 --> 01:14:29,550
0,240 240,510 510,690 690,960 960,1410
different answers, but at least

2006
01:14:29,670 --> 01:14:30,780
0,330 330,540 540,810 810,990 990,1110
a then one should be

2007
01:14:30,780 --> 01:14:31,830
0,90 90,480 480,570 570,690 690,1050
the prefix of the other.

2008
01:14:32,330 --> 01:14:33,380
0,390 390,570 570,630 630,900 900,1050
Um, and if that's not

2009
01:14:33,380 --> 01:14:34,970
0,60 60,660 720,990 990,1440 1440,1590
the case, um, then they

2010
01:14:34,970 --> 01:14:36,050
0,180 180,330 330,450 450,750 750,1080
know that they're actually being

2011
01:14:36,050 --> 01:14:37,680
0,390 420,870 870,1380
a happy fork.

2012
01:14:40,660 --> 01:14:42,880
0,570 690,870 870,1110 1110,1500 1500,2220
So, um, that's one possible

2013
01:14:42,910 --> 01:14:45,070
0,840 960,1470 1470,1590 1590,1740 1740,2160
a scenario that they discussed

2014
01:14:45,070 --> 01:14:46,840
0,60 60,120 120,540 540,1200 1260,1770
in the paper, basically a

2015
01:14:46,840 --> 01:14:50,260
0,840 840,1110 1380,1860 1860,2730 2760,3420
share, the coins periodically exchange

2016
01:14:50,260 --> 01:14:51,730
0,240 240,330 330,690 690,930 930,1470
during the last log entries.

2017
01:14:52,630 --> 01:14:53,770
0,210 210,390 420,810 810,1080 1080,1140
Um the last entry in

2018
01:14:53,770 --> 01:14:55,450
0,120 120,540 690,1200 1200,1560 1560,1680
the log, another solution which

2019
01:14:55,450 --> 01:14:56,440
0,270 270,420 420,750 750,840 840,990
actually has mentioned in the

2020
01:14:56,440 --> 01:14:59,020
0,480 690,1650 1680,2310
chat is, um.

2021
01:14:59,700 --> 01:15:01,110
0,270 270,840 840,990 990,1080 1080,1410
You introduce what they call

2022
01:15:01,110 --> 01:15:05,280
0,90 90,540 540,1230 1530,2670 2760,4170
a trusted machine a I's

2023
01:15:05,280 --> 01:15:09,090
0,240 240,510 510,990 3120,3450 3450,3810
time stamp box and visually

2024
01:15:09,090 --> 01:15:10,890
0,150 150,780 780,1050 1050,1680 1680,1800
like every few seconds, you

2025
01:15:10,890 --> 01:15:12,480
0,120 120,240 240,540 540,1050 1350,1590
know it actually ends as

2026
01:15:12,480 --> 01:15:13,860
0,60 60,330 330,720 720,1200 1200,1380
a time stamp to a

2027
01:15:13,890 --> 01:15:17,850
0,660 930,1740 1740,2640 2640,3180 3390,3960
blog and um in every

2028
01:15:17,850 --> 01:15:19,470
0,510 510,870 870,1290 1290,1440 1440,1620
client knows that you know,

2029
01:15:19,500 --> 01:15:20,550
0,390 390,480 480,570 570,960 960,1050
maybe it's a file in

2030
01:15:20,550 --> 01:15:21,990
0,90 90,360 360,720 720,990 990,1440
the file system that contains

2031
01:15:21,990 --> 01:15:23,490
0,120 120,420 420,660 690,990 990,1500
you know the current time,

2032
01:15:23,610 --> 01:15:25,980
0,870 870,1440 1470,1800 1800,1980 1980,2370
everytime the time step box,

2033
01:15:25,980 --> 01:15:27,150
0,120 120,420 420,630 630,810 810,1170
you know every couple seconds

2034
01:15:27,150 --> 01:15:28,590
0,210 210,390 390,780 810,1230 1230,1440
time step box updates that

2035
01:15:28,590 --> 01:15:30,420
0,570 780,1080 1080,1470 1470,1680 1680,1830
file the clients read that

2036
01:15:30,420 --> 01:15:31,980
0,660 750,1020 1020,1170 1170,1440 1440,1560
file and they know there

2037
01:15:31,980 --> 01:15:33,180
0,180 180,270 270,330 330,510 510,1200
should be a new modification

2038
01:15:33,180 --> 01:15:34,360
0,240 240,450 450,660 660,1110
like every couple seconds.

2039
01:15:35,070 --> 01:15:36,300
0,300 300,480 480,960 960,1080 1080,1230
And that basically you know

2040
01:15:36,300 --> 01:15:38,400
0,600 630,960 960,1530 1560,1710 1710,2100
that that fork that contains

2041
01:15:38,400 --> 01:15:39,750
0,390 420,630 630,870 870,1170 1170,1350
the time stamp bug is

2042
01:15:39,750 --> 01:15:41,820
0,180 180,300 300,750 840,1440 1440,2070
sort of the fork, the

2043
01:15:42,120 --> 01:15:44,520
0,690 690,2160
decline sa.

2044
01:15:44,880 --> 01:15:45,900
0,210 210,300 300,600 600,840 840,1020
Then the server actually has

2045
01:15:45,900 --> 01:15:47,820
0,360 390,990 990,1140 1140,1350 1350,1920
to present to the clients.

2046
01:15:51,700 --> 01:15:52,580
0,630
Okay.

2047
01:15:53,620 --> 01:15:54,730
0,150 150,360 360,450 450,840 840,1110
So that's the two things

2048
01:15:54,730 --> 01:15:56,050
0,120 120,330 330,420 420,630 630,1320
that actually the paper discusses

2049
01:15:56,260 --> 01:15:57,250
0,150 150,360 360,510 510,600 600,990
and what's sort of interesting

2050
01:15:57,250 --> 01:15:58,870
0,150 150,300 300,510 510,870 900,1620
and we'll see on tuesday,

2051
01:15:58,990 --> 01:16:00,730
0,420 420,690 690,1140 1140,1500 1500,1740
um, is this, this whole

2052
01:16:00,730 --> 01:16:03,190
0,630 660,1350 1350,1470 1470,1860 1860,2460
fork detection in Fort resolution

2053
01:16:03,190 --> 01:16:04,390
0,390 390,600 600,750 750,810 810,1200
approach is sort of a

2054
01:16:04,390 --> 01:16:05,860
0,180 180,570 570,930 930,1020 1020,1470
key problem basically in Bitcoin

2055
01:16:06,820 --> 01:16:08,710
0,300 300,960 1020,1230 1230,1500 1500,1890
and we were talking tuesday

2056
01:16:08,710 --> 01:16:10,060
0,180 180,840 990,1110 1110,1230 1230,1350
but Bitcoin you know we

2057
01:16:10,060 --> 01:16:11,740
0,360 360,480 480,870 870,1320 1320,1680
see a way basically to

2058
01:16:11,740 --> 01:16:14,100
0,420 420,570 570,660 660,1290
settle on a fork.

2059
01:16:15,550 --> 01:16:16,900
0,150 150,720 750,960 960,1050 1050,1350
So even if the file

2060
01:16:16,900 --> 01:16:19,210
0,390 390,570 570,660 660,1230 1230,2310
system or the servers a

2061
01:16:19,240 --> 01:16:20,830
0,360 360,840 840,1110 1110,1230 1230,1590
byzantine servers actually have created

2062
01:16:20,830 --> 01:16:22,300
0,90 90,600 870,1320 1320,1380 1380,1470
a fork, um, you know

2063
01:16:22,300 --> 01:16:23,680
0,360 360,720 720,990 990,1110 1110,1380
Bitcoin basically has a way

2064
01:16:23,680 --> 01:16:25,360
0,150 150,780 780,1260 1290,1500 1500,1680
of deciding well we're gonna

2065
01:16:25,360 --> 01:16:26,920
0,240 240,420 420,870 870,1320 1320,1560
reach the senses on which

2066
01:16:26,920 --> 01:16:27,790
0,360 360,450 450,570 570,630 630,870
fork we're going to actually

2067
01:16:27,790 --> 01:16:28,560
0,330 330,450
proceed with.

2068
01:16:29,380 --> 01:16:31,090
0,570 750,1110 1110,1350 1350,1530 1530,1710
Um, so we'll leave that

2069
01:16:31,090 --> 01:16:32,860
0,390 390,630 630,720 720,1410 1500,1770
up to a tuesday, um

2070
01:16:32,860 --> 01:16:34,030
0,330 330,510 510,570 570,660 660,1170
we're sort of a connection

2071
01:16:34,030 --> 01:16:36,670
0,930 1170,1890 1890,1950 1950,2040 2040,2640
between a you know sunder

2072
01:16:36,670 --> 01:16:38,020
0,330 330,780 780,900 900,1080 1080,1350
and actually a good point.

2073
01:16:40,840 --> 01:16:44,660
0,210 210,510 510,690 690,930
Any questions about this.

2074
01:16:49,950 --> 01:16:51,260
0,540
Okay.

2075
01:16:51,540 --> 01:16:52,380
0,210 210,270 270,420 420,540 540,840
Okay I want to talk

2076
01:16:52,380 --> 01:16:53,790
0,330 330,690 690,930 930,1050 1050,1410
very quickly because I got

2077
01:16:53,790 --> 01:16:56,040
0,120 120,360 360,690 720,1470 1500,2250
three minutes left, um about

2078
01:16:56,070 --> 01:16:57,240
0,870
um.

2079
01:16:58,070 --> 01:16:59,930
0,780 810,1230 1230,1470 1470,1680 1680,1860
The other so I think

2080
01:16:59,930 --> 01:17:00,830
0,60 60,300 300,450 450,660 660,900
the key thing I'll get

2081
01:17:00,830 --> 01:17:02,210
0,90 90,420 420,660 660,1020 1020,1380
the paper is actually this

2082
01:17:02,390 --> 01:17:03,890
0,690 690,1140 1140,1350 1350,1410 1410,1500
log conceptual view of the

2083
01:17:03,890 --> 01:17:06,890
0,360 1110,1800 1800,2190 2190,2280 2280,3000
world, of course the impractical

2084
01:17:06,890 --> 01:17:08,390
0,150 150,210 210,540 540,1170 1320,1500
as I mentioned earlier and

2085
01:17:08,390 --> 01:17:09,290
0,180 180,390 390,720 720,840 840,900
so some directly has a

2086
01:17:09,290 --> 01:17:10,370
0,480 480,630 630,810 810,900 900,1080
proposal for how to do

2087
01:17:10,370 --> 01:17:12,170
0,510 780,1170 1170,1410 1410,1680 1680,1800
better, um, even though like

2088
01:17:12,170 --> 01:17:13,430
0,180 180,570 570,840 840,1050 1050,1260
other systems like going actually

2089
01:17:13,430 --> 01:17:14,660
0,210 210,570 570,630 630,840 840,1230
do maintain the whole log

2090
01:17:14,750 --> 01:17:16,430
0,390 390,510 510,600 600,750 750,1680
a and so what does

2091
01:17:16,640 --> 01:17:18,440
0,330 330,570 570,810 810,1290 1470,1800
somebody do things better instead

2092
01:17:18,440 --> 01:17:19,700
0,90 90,330 330,720 720,810 810,1260
of actually maintaining a log,

2093
01:17:19,700 --> 01:17:21,380
0,90 90,210 210,600 600,900 900,1680
you know that's actually snapshots.

2094
01:17:22,140 --> 01:17:23,490
0,270 270,690 690,960 960,1140 1140,1350
That's similar to sort of

2095
01:17:24,090 --> 01:17:25,860
0,660 660,810 810,990 990,1170 1170,1770
snapshots that we've seen before

2096
01:17:25,860 --> 01:17:27,420
0,300 300,330 330,840 840,1200 1200,1560
in a draft where we

2097
01:17:27,630 --> 01:17:29,160
0,510 510,960 990,1230 1230,1320 1320,1530
construct the part of the

2098
01:17:29,160 --> 01:17:30,630
0,390 390,600 600,690 690,1080 1080,1470
world based on log, we

2099
01:17:30,630 --> 01:17:31,530
0,150 150,210 210,690 690,780 780,900
take a snapshot and that

2100
01:17:31,530 --> 01:17:33,690
0,270 270,660 660,1020 1440,1980 1980,2160
actually forms the the current

2101
01:17:33,690 --> 01:17:36,000
0,420 600,810 810,1230 1410,2040 2040,2310
state, in fact really what

2102
01:17:36,000 --> 01:17:37,770
0,690 840,1170 1170,1440 1440,1530 1530,1770
the seller does it actually

2103
01:17:37,770 --> 01:17:39,480
0,240 240,870 870,1170 1170,1320 1320,1710
doesn't really literally take snapshot,

2104
01:17:39,480 --> 01:17:41,070
0,180 180,390 390,1020 1020,1080 1080,1590
it really maintains a snapshot

2105
01:17:41,070 --> 01:17:42,330
0,360 360,480 480,570 570,810 810,1260
view of the file system

2106
01:17:42,450 --> 01:17:43,620
0,150 150,330 330,450 450,690 690,1170
and does it per user.

2107
01:17:46,100 --> 01:17:46,760
0,150 150,300 300,420 420,510 510,660
So one way to think

2108
01:17:46,760 --> 01:17:47,600
0,240 240,360 360,480 480,660 660,840
about it is that that

2109
01:17:47,600 --> 01:17:49,220
0,240 240,600 600,810 810,1440 1440,1620
file systems show charlotte by

2110
01:17:49,220 --> 01:17:50,960
0,600 660,960 960,1320 1320,1620 1620,1740
user every user has its

2111
01:17:50,960 --> 01:17:52,370
0,330 330,630 630,1230 1230,1320 1320,1410
own view snapshot of the

2112
01:17:52,370 --> 01:17:54,200
0,510 840,1470 1470,1590 1590,1710 1710,1830
world and you know there's

2113
01:17:54,200 --> 01:17:54,740
0,60 60,240 240,360 360,450 450,540
a little bit of a

2114
01:17:54,740 --> 01:17:55,700
0,360 360,450 450,600 600,810 810,960
critical to make sure that

2115
01:17:55,700 --> 01:17:57,560
0,600 600,870 870,1410 1410,1560 1560,1860
these different snapshots and different

2116
01:17:57,560 --> 01:18:00,320
0,480 540,810 810,1080 1080,1740 2310,2760
users are actually consistent, um,

2117
01:18:00,320 --> 01:18:01,700
0,420 420,720 720,1200
and let me.

2118
01:18:02,020 --> 01:18:02,980
0,510
AH.

2119
01:18:03,080 --> 01:18:04,550
0,390 390,390 390,720 720,840 840,1470
Talk a little bit about

2120
01:18:04,610 --> 01:18:06,770
0,390 390,960 960,1440 1440,1710 1710,2160
um, how actually some directly

2121
01:18:06,770 --> 01:18:08,740
0,570 600,900 900,990 990,1650
has makes the snapshot.

2122
01:18:09,950 --> 01:18:12,980
0,750 870,1200 1200,1920 2010,2730
Basically eating sunder a.

2123
01:18:15,210 --> 01:18:16,290
0,150 150,300 300,420 420,810 810,1080
And so they're basically there's

2124
01:18:16,290 --> 01:18:17,250
0,240 240,360 360,540 540,630 630,960
something that's called the user

2125
01:18:17,250 --> 01:18:18,140
0,180 180,510
I handle.

2126
01:18:18,580 --> 01:18:19,660
0,270 270,330 330,630 630,810 810,1080
And the user I handle

2127
01:18:19,660 --> 01:18:21,970
0,360 360,1110 1110,1710 1710,2220 2220,2310
basically uniquely identifies snapshot in

2128
01:18:21,970 --> 01:18:23,620
0,90 90,360 360,810 1080,1290 1290,1650
the file system and visually

2129
01:18:23,620 --> 01:18:25,540
0,90 90,150 150,690 690,1290 1320,1920
is a cryptographic hash of

2130
01:18:25,540 --> 01:18:26,260
0,390
the.

2131
01:18:26,460 --> 01:18:27,900
0,240 240,690 690,1020 1020,1170 1170,1440
High table which can teach

2132
01:18:27,900 --> 01:18:28,770
0,210 210,360 360,480 480,810 810,870
all the AI nodes in

2133
01:18:28,770 --> 01:18:30,690
0,90 90,690 1020,1560 1560,1680 1680,1920
the system, and you know

2134
01:18:30,690 --> 01:18:32,850
0,510 510,930 930,1500 1590,1980 1980,2160
and um, um, forever I

2135
01:18:32,850 --> 01:18:33,840
0,240 240,450 450,480 480,810 810,990
know there's a hash or

2136
01:18:33,840 --> 01:18:35,100
0,150 150,390 390,480 480,630 630,1260
I know it would visually

2137
01:18:35,100 --> 01:18:36,270
0,300 300,540 540,660 660,1050 1050,1170
coverage all the data all

2138
01:18:36,270 --> 01:18:37,500
0,90 90,540 540,960 960,1050 1050,1230
the blocks belonging to that

2139
01:18:37,500 --> 01:18:38,620
0,390 390,540 540,900
particular I note.

2140
01:18:39,170 --> 01:18:41,870
0,210 210,270 270,810 1620,2220 2400,2700
So, for example when a

2141
01:18:41,870 --> 01:18:44,180
0,270 270,540 540,1410 1410,1890 1890,2310
say a modifies off W

2142
01:18:44,180 --> 01:18:45,290
0,240 240,390 390,570 570,870 870,1110
I in my drag one

2143
01:18:45,290 --> 01:18:48,260
0,570 900,1530 1560,2400 2430,2850 2850,2970
block, um, the client {re-computes

2144
01:18:48,260 --> 01:18:49,520
0,390 390,510 510,900 900,1080 1080,1260
-} the hash of this

2145
01:18:49,520 --> 01:18:51,770
0,540 570,1140 1140,1260 1260,1620 1620,2250
block updates the entry here

2146
01:18:52,010 --> 01:18:54,170
0,600 600,750 750,1110 1110,1710 1740,2160
updates the entry here updates

2147
01:18:54,170 --> 01:18:55,550
0,60 60,420 420,990 1050,1170 1170,1380
the entry here and that's

2148
01:18:55,550 --> 01:18:57,470
0,540 540,690 690,930 930,1590 1770,1920
basically a new handle that

2149
01:18:57,470 --> 01:18:59,840
0,630 630,1260 1260,1650 1650,1770 1770,2370
describes basically the the capture

2150
01:18:59,840 --> 01:19:01,310
0,90 90,180 180,450 450,990 1050,1470
you know the complete file

2151
01:19:01,310 --> 01:19:02,810
0,390 660,840 840,960 960,1020 1020,1500
system we're going to ignore

2152
01:19:02,810 --> 01:19:04,550
0,90 90,480 480,720 720,870 870,1740
the group in the directory

2153
01:19:04,760 --> 01:19:06,890
0,510 510,720 720,1500 1500,1800 1800,2130
block for a second, so

2154
01:19:06,950 --> 01:19:08,630
0,180 180,600 600,810 810,960 960,1680
this basically gives you complete

2155
01:19:08,660 --> 01:19:11,150
0,600 600,1230 1230,1530 1530,1800 1800,2490
a checkpoint where a snapshot

2156
01:19:11,300 --> 01:19:13,460
0,630 660,690 780,1200 1200,1560 1560,2160
of a user to view

2157
01:19:13,460 --> 01:19:14,440
0,120 120,210 210,510 510,900
of the file system.

2158
01:19:16,680 --> 01:19:18,990
0,690 900,1080 1080,1260 1260,1830 1860,2310
Now and then to deal

2159
01:19:18,990 --> 01:19:20,280
0,150 150,270 270,690 690,1020 1020,1290
with this issue of how

2160
01:19:20,280 --> 01:19:22,560
0,510 540,930 930,1410 1440,1740 1740,2280
to get a certain consistency

2161
01:19:22,560 --> 01:19:25,200
0,540 540,1080 1410,1980 1980,2340 2340,2640
across users, um, they have

2162
01:19:25,200 --> 01:19:26,550
0,150 150,450 450,510 510,810 810,1350
this notion of version factors.

2163
01:19:33,740 --> 01:19:35,120
0,480 480,720 720,1050 1050,1170 1170,1380
What version vectors is pretty

2164
01:19:35,120 --> 01:19:38,210
0,810 1410,1710 1710,2040 2040,2400 2400,3090
straightforward, every virtual vector has

2165
01:19:38,450 --> 01:19:39,620
0,180 180,360 360,690 690,1020 1020,1170
an I handle like a

2166
01:19:39,620 --> 01:19:40,760
0,330 330,630 630,750 750,870 870,1140
zai handle is in it

2167
01:19:41,000 --> 01:19:43,080
0,540 540,750 750,1500
after it modified.

2168
01:19:43,800 --> 01:19:46,800
0,570 570,1380 1590,2190 2190,2460 2460,3000
See a off W Y

2169
01:19:46,860 --> 01:19:48,660
0,120 120,270 270,450 450,1020 1230,1800
and then for every a

2170
01:19:48,660 --> 01:19:50,310
0,420 420,480 480,570 570,1200 1320,1650
user in the system, the

2171
01:19:50,310 --> 01:19:51,990
0,270 270,630 630,1140 1140,1230 1230,1680
version vector has a counter

2172
01:19:51,990 --> 01:19:53,160
0,150 150,240 240,420 420,480 480,1170
for the number of modifications

2173
01:19:53,160 --> 01:19:53,940
0,150 150,270 270,510 510,570 570,780
that were made by that

2174
01:19:53,940 --> 01:19:55,740
0,270 360,660 660,870 870,990 990,1800
user, so if a meda

2175
01:19:55,860 --> 01:19:58,200
0,450 450,870 870,1440 1650,2070 2070,2340
updated after UI account except

2176
01:19:58,200 --> 01:19:59,910
0,540 810,1050 1050,1260 1260,1500 1500,1710
one no b didn't make

2177
01:19:59,910 --> 01:20:01,740
0,150 150,1260 1260,1470 1470,1650 1650,1830
any modifications, you didn't make

2178
01:20:01,740 --> 01:20:04,470
0,180 180,1050 1350,1980 1980,2580 2580,2730
any modifications zero zero and

2179
01:20:04,470 --> 01:20:06,030
0,120 120,390 390,930 960,1110 1110,1560
this whole thing is silent.

2180
01:20:09,520 --> 01:20:11,200
0,240 240,390 390,810 870,1380 1380,1680
And so when b. makes

2181
01:20:11,200 --> 01:20:12,430
0,750 750,930 930,1050 1050,1170 1170,1230
modifications so we use the

2182
01:20:12,430 --> 01:20:15,100
0,240 240,600 600,1110 1710,2610 2610,2670
first infected furby version of

2183
01:20:15,100 --> 01:20:18,190
0,1620 1620,2070 2700,2820 2820,3060 3060,3090
a version it creates a

2184
01:20:18,190 --> 01:20:20,560
0,180 180,1050 1740,1920 1920,2310 2310,2370
new handle that includes of

2185
01:20:20,560 --> 01:20:23,620
0,240 240,420 420,780 990,1830 1830,3060
course, all the modification represents

2186
01:20:23,620 --> 01:20:25,360
0,90 90,150 150,930 1350,1590 1590,1740
all the medications and in

2187
01:20:25,360 --> 01:20:26,980
0,150 150,480 480,1020 1140,1290 1290,1620
its version handle it actually

2188
01:20:26,980 --> 01:20:28,270
0,300 300,390 390,660 660,1140 1170,1290
opened its version vector, it

2189
01:20:28,270 --> 01:20:30,610
0,510 510,1230 1260,1650 1650,1860 1860,2340
includes which how many operations

2190
01:20:30,610 --> 01:20:31,660
0,90 90,360 360,510 510,690 690,1050
are read by ed user

2191
01:20:31,660 --> 01:20:32,560
0,180 180,300 300,420 420,810 810,900
so it will record the

2192
01:20:32,560 --> 01:20:34,540
0,360 360,540 570,1140 1350,1800 1800,1980
fact for example that it

2193
01:20:34,540 --> 01:20:36,880
0,270 270,630 630,1020 1020,1890 2160,2340
actually saw ace modification, it

2194
01:20:36,880 --> 01:20:38,620
0,480 480,630 630,1020 1020,1140 1140,1740
updates going to be one

2195
01:20:38,860 --> 01:20:41,200
0,480 480,1200 1410,1980 1980,2280 2280,2340
CT zero eventually signed to

2196
01:20:41,200 --> 01:20:42,320
0,210 210,420 420,660
this whole thing.

2197
01:20:44,640 --> 01:20:45,840
0,120 120,270 270,900
You know she.

2198
01:20:47,010 --> 01:20:49,200
0,240 240,480 480,840 840,1650 1830,2190
When seeing exodus operation, a

2199
01:20:49,200 --> 01:20:50,340
0,300 300,510 510,870 870,990 990,1140
want to reach you know

2200
01:20:50,340 --> 01:20:52,410
0,210 210,360 390,960 960,1440 1440,2070
off the UI and a

2201
01:20:52,440 --> 01:20:56,310
0,360 360,720 1170,1890 2070,2850 3270,3870
fetch good and a bank

2202
01:20:56,310 --> 01:20:58,440
0,810 870,1050 1050,1410 1410,1980 1980,2130
wy, it basically downloads all

2203
01:20:58,440 --> 01:21:00,150
0,90 90,450 450,1020 1080,1350 1350,1710
the version vectors from every

2204
01:21:00,150 --> 01:21:02,190
0,510 540,1560 1560,1770 1770,1890 1890,2040
user, yeah and in this

2205
01:21:02,190 --> 01:21:02,940
0,300 300,390 390,510 510,690 690,750
case it will get the

2206
01:21:02,940 --> 01:21:05,130
0,180 180,510 510,750 750,1350 1680,2190
first effective for ab a

2207
01:21:06,150 --> 01:21:07,740
0,360 360,450 450,750 750,1110 1290,1590
takes the latest one which

2208
01:21:07,740 --> 01:21:08,760
0,60 60,210 210,450 450,600 600,1020
in this case is b

2209
01:21:09,150 --> 01:21:10,920
0,690 690,1080 1080,1230 1230,1590 1590,1770
because actually it includes all

2210
01:21:10,920 --> 01:21:12,330
0,90 90,690 690,810 810,1200 1230,1410
the operations of a in

2211
01:21:12,330 --> 01:21:14,520
0,300 750,930 930,1170 1170,1590 1590,2190
it and that's basically represented

2212
01:21:14,520 --> 01:21:15,900
0,360 360,480 480,570 570,840 840,1380
version of the file system

2213
01:21:15,900 --> 01:21:17,130
0,150 150,330 330,720 720,870 870,1230
from that version it reached

2214
01:21:17,130 --> 01:21:20,820
0,120 120,630 630,1260 2580,3180 3180,3690
no opt UI banks by.

2215
01:21:24,180 --> 01:21:25,590
0,660 660,720 720,840 840,990 990,1410
Note you know that basically

2216
01:21:25,590 --> 01:21:27,300
0,150 150,840 840,960 960,1020 1020,1710
it's impossible for the server

2217
01:21:27,540 --> 01:21:31,440
0,810 840,1440 1440,2100 2280,3240 3240,3900
to basically present bank dui

2218
01:21:31,650 --> 01:21:34,320
0,480 480,720 720,990 990,1920 2280,2670
not off the pui, um,

2219
01:21:34,320 --> 01:21:36,060
0,600 600,780 780,930 930,1110 1110,1740
because you know it cannot

2220
01:21:36,150 --> 01:21:37,110
0,150 150,270 270,420 420,690 690,960
you know it can only

2221
01:21:37,110 --> 01:21:38,130
0,210 210,360 360,450 450,720 720,1020
to sort of virtual factors

2222
01:21:38,130 --> 01:21:40,080
0,330 330,960 1080,1410 1410,1650 1650,1950
can return is this version

2223
01:21:40,080 --> 01:21:41,490
0,330 330,420 420,630 630,930 930,1410
vector or this version vector

2224
01:21:41,610 --> 01:21:43,500
0,540 540,810 810,1170 1170,1470 1470,1890
versus vector a doesn't include

2225
01:21:43,500 --> 01:21:45,600
0,450 450,900 930,1410 1560,1860 1860,2100
actually the changes of a

2226
01:21:45,600 --> 01:21:48,180
0,270 270,990 1170,1590 1590,2370 2400,2580
bank by a if she

2227
01:21:48,180 --> 01:21:49,350
0,240 240,480 480,660 660,1080 1080,1170
actually does get versions of

2228
01:21:49,350 --> 01:21:51,480
0,210 210,900 1050,1320 1320,1830 1830,2130
bank by it must actually

2229
01:21:51,480 --> 01:21:53,730
0,390 390,750 780,1440 1440,1620 1620,2250
have the versions, the modification

2230
01:21:53,730 --> 01:21:55,200
0,210 210,330 330,690 960,1380 1380,1470
a is made because the

2231
01:21:55,200 --> 01:21:56,460
0,300 300,630 630,690 690,1170 1170,1260
version vectors are constructed in

2232
01:21:56,460 --> 01:21:56,940
0,150 150,420
that way.

2233
01:21:58,740 --> 01:22:00,180
0,150 150,270 270,540 540,1170 1200,1440
And so that's basically the

2234
01:22:00,180 --> 01:22:03,000
0,360 360,1080 1320,2070 2070,2370 2370,2820
way for using version vectors

2235
01:22:03,060 --> 01:22:05,820
0,420 420,1140 1320,1800 1830,2340 2340,2760
to detect the s doesn't

2236
01:22:05,820 --> 01:22:08,280
0,510 540,1020 1020,1680 1800,2280 2280,2460
drop a changes, um, as

2237
01:22:08,280 --> 01:22:09,270
0,300 300,570 570,660 660,870 870,990
we as the same way

2238
01:22:09,270 --> 01:22:10,260
0,120 120,210 210,540 540,870 870,990
that the logging system is

2239
01:22:10,260 --> 01:22:10,740
0,180
done.

2240
01:22:12,020 --> 01:22:13,040
0,210 210,330 330,540 540,660 660,1020
Okay, so that's the essence

2241
01:22:13,040 --> 01:22:14,270
0,120 120,180 180,480 480,780 780,1230
of the version vector plan.

2242
01:22:16,670 --> 01:22:18,740
0,630 720,1110 1170,1710
I'm so worried.

2243
01:22:22,770 --> 01:22:26,460
0,660 690,1140 1170,1500 1500,1860 2700,3690
OK a decent in participants

2244
01:22:26,460 --> 01:22:28,440
0,120 120,540 540,960 1320,1770 1770,1980
you have a problem you

2245
01:22:28,440 --> 01:22:31,230
0,150 150,240 240,720 720,2010 2040,2790
have to handle inch decentralized

2246
01:22:31,230 --> 01:22:32,700
0,630
systems.

2247
01:22:33,940 --> 01:22:35,920
0,360 360,570 570,780 780,1380 1380,1980
Because there's no single institution

2248
01:22:35,920 --> 01:22:37,540
0,120 120,390 390,450 450,1020 1140,1620
that sort of, um, um,

2249
01:22:37,540 --> 01:22:38,620
0,210 210,360 360,720 720,810 810,1080
it can be a source

2250
01:22:38,620 --> 01:22:41,230
0,60 60,570 1800,2220 2220,2430 2430,2610
of trust and we've seen

2251
01:22:41,230 --> 01:22:42,550
0,120 120,450 450,510 510,780 780,1320
this notion of sign blogs

2252
01:22:42,700 --> 01:22:44,920
0,150 150,240 240,630 630,1350 1680,2220
it's a very powerful a

2253
01:22:44,950 --> 01:22:48,160
0,630 840,1740 1770,2610 2610,2820 2820,3210
tool to deal with malicious

2254
01:22:48,160 --> 01:22:49,060
0,570
servers.

2255
01:22:49,390 --> 01:22:51,100
0,540 690,1170 1170,1320 1320,1410 1410,1710
And, um, as I say

2256
01:22:51,100 --> 01:22:52,570
0,300 300,540 540,870 870,900 900,1470
on a on a tuesday

2257
01:22:52,570 --> 01:22:53,680
0,390 390,510 510,570 570,930 930,1110
we're going to continue this

2258
01:22:53,680 --> 01:22:55,390
0,570 780,990 990,1170 1170,1470 1470,1710
discussion and you'll see how

2259
01:22:55,390 --> 01:22:57,010
0,330 330,780 780,1110 1110,1200 1200,1620
this design wads are used

2260
01:22:57,010 --> 01:22:59,440
0,540 720,1080 1080,1770 1830,1950 1950,2430
in a Bitcoin in particular

2261
01:22:59,440 --> 01:23:01,270
0,210 210,600 600,900 900,1590 1590,1830
like how for consistency where

2262
01:23:01,270 --> 01:23:03,790
0,930 1020,1410 1590,2040 2040,2190 2190,2520
how the fact that forks

2263
01:23:03,790 --> 01:23:05,110
0,60 60,270 270,540 540,750 750,1320
are sort of being created

2264
01:23:05,140 --> 01:23:07,000
0,180 180,390 390,1080 1110,1740 1770,1860
are being resolved in the

2265
01:23:07,000 --> 01:23:08,040
0,270 270,360 360,810
case of Bitcoin.

2266
01:23:08,600 --> 01:23:10,250
0,570 780,1170 1200,1350 1350,1530 1530,1650
Alright, so that was it

2267
01:23:10,250 --> 01:23:11,810
0,330 330,540 540,1020 1020,1410 1410,1560
for an introduction to the

2268
01:23:11,810 --> 01:23:13,910
0,360 360,990 1320,1710 1710,1860 1860,2100
satellite systems, um, and I

2269
01:23:13,910 --> 01:23:16,820
0,240 240,360 360,1020 1470,2070 2190,2910
hope the paper a little

2270
01:23:16,820 --> 01:23:19,160
0,150 150,330 330,960 960,1470 1470,2340
bit more understandable than maybe

2271
01:23:19,190 --> 01:23:20,780
0,780 780,1080 1080,1140 1140,1380 1380,1590
when before you start reading

2272
01:23:20,780 --> 01:23:22,640
0,330 900,1290 1290,1440 1440,1710 1710,1860
it earlier this week or

2273
01:23:22,640 --> 01:23:23,340
0,390
today.

2274
01:23:23,430 --> 01:23:25,410
0,690 720,960 960,1110 1110,1440 1440,1980
OK see you on tuesday.

2275
01:23:26,860 --> 01:23:28,090
0,180 180,300 300,600 600,810 810,1230
And of course there's questions

2276
01:23:28,090 --> 01:23:29,710
0,180 180,720 720,990 1110,1200 1200,1620
go peacefully, um, um, please

2277
01:23:29,710 --> 01:23:31,030
0,360 360,600 600,720 720,870 870,1320
feel free to hang around,

2278
01:23:31,300 --> 01:23:32,020
0,300 300,450 450,540 540,660 660,720
um, if you need to

2279
01:23:32,020 --> 01:23:33,940
0,90 90,330 330,810 1380,1800 1800,1920
go somewhere else, absolutely go

2280
01:23:33,940 --> 01:23:37,060
0,240 240,630 1980,2370 2370,2460 2580,3120
somewhere else have a question

2281
01:23:37,060 --> 01:23:38,740
0,270 270,720 750,1170 1170,1560 1560,1680
about the data structure that

2282
01:23:38,740 --> 01:23:41,260
0,120 120,420 420,870 900,1410 1410,2520
they use the b plus

2283
01:23:41,320 --> 01:23:43,000
0,420 420,780 780,1230 1230,1410 1410,1680
tree or whatever like what's

2284
01:23:43,000 --> 01:23:44,170
0,90 90,450 450,660 660,930 930,1170
the difference between that and

2285
01:23:44,560 --> 01:23:45,120
0,360
like.

2286
01:23:45,830 --> 01:23:47,570
0,840 840,990 990,1080 1080,1410 1410,1740
Yeah, like the miracle dog,

2287
01:23:47,570 --> 01:23:49,190
0,150 150,660 780,1170 1170,1380 1380,1620
for example using local data

2288
01:23:49,190 --> 01:23:51,470
0,420 630,1500 1500,1620 1620,1800 1800,2280
structure, um, yeah I think

2289
01:23:51,470 --> 01:23:53,060
0,240 270,510 510,690 690,1470 1530,1590
the person who should be

2290
01:23:53,090 --> 01:23:54,710
0,540 540,660 660,780 780,1140 1140,1620
credited with his ideas Marco.

2291
01:23:55,260 --> 01:23:56,550
0,300 300,510 510,780 780,1050 1050,1290
And those wives often called

2292
01:23:56,550 --> 01:23:58,050
0,60 60,450 450,690 690,1110 1110,1500
the miracle data a treat.

2293
01:24:00,080 --> 01:24:01,190
0,150 150,330 330,660 660,840 840,1110
So this is the same

2294
01:24:01,190 --> 01:24:02,440
0,330
thing.

2295
01:24:03,080 --> 01:24:05,210
0,570 1050,1440 1440,1800 1800,2040 2040,2130
Okay episode basically uses a

2296
01:24:05,210 --> 01:24:06,020
0,210 210,480
mobile tree.

2297
01:24:11,800 --> 01:24:13,420
0,420 450,870 870,1110 1110,1470 1470,1620
I'm sorry, when when you

2298
01:24:13,420 --> 01:24:15,060
0,270 270,600 600,1290
are very fine.

2299
01:24:15,450 --> 01:24:18,510
0,660 690,1170 1380,1560 1560,2460 2700,3060
The um, the signatures doesn't

2300
01:24:18,510 --> 01:24:19,650
0,180 180,330 330,570 570,720 720,1140
mean you have to like.

2301
01:24:21,220 --> 01:24:22,630
0,540 540,750 750,870 870,1200 1200,1410
Basically, as you go, if

2302
01:24:22,630 --> 01:24:24,430
0,300 300,390 390,780 780,1440 1470,1800
you're a hundred entries into

2303
01:24:24,430 --> 01:24:27,040
0,540 570,1290 1680,1830 1830,2070 2070,2610
the log, you have to

2304
01:24:27,250 --> 01:24:29,560
0,990 1320,1470 1470,1830 1830,2040 2040,2310
compute the hash of all

2305
01:24:29,560 --> 01:24:32,470
0,480 570,1740 1740,2610 2610,2760 2760,2910
the {100,entries} contaminated and then

2306
01:24:32,470 --> 01:24:33,400
0,750
compute.

2307
01:24:34,410 --> 01:24:35,700
0,270 270,660 660,1110 1110,1230 1230,1290
And yeah you need to

2308
01:24:35,700 --> 01:24:37,050
0,150 150,210 210,450 450,990 1020,1350
keep a running hash, okay,

2309
01:24:37,050 --> 01:24:38,310
0,210 210,330 330,570 570,660 660,1260
let's go back to verify

2310
01:24:38,520 --> 01:24:40,000
0,150 150,600
that sooner.

2311
01:24:41,620 --> 01:24:45,240
0,900 1320,2250 2370,3300
A todo, um.

2312
01:24:45,550 --> 01:24:46,630
0,300 330,480 480,690 690,780 780,1080
Okay, so here is probably

2313
01:24:46,630 --> 01:24:47,350
0,30 30,180 180,420 420,510 510,720
a good place to talk

2314
01:24:47,350 --> 01:24:48,120
0,210 210,420
about it.

2315
01:24:48,480 --> 01:24:51,100
0,750 1110,1710 1710,2310
Um, so, um.

2316
01:24:51,550 --> 01:24:53,060
0,510 540,1230
So here.

2317
01:24:53,310 --> 01:24:54,660
0,420 450,660 660,780 780,1020 1020,1350
So let's say let's take

2318
01:24:54,660 --> 01:24:56,240
0,150 150,480 480,840 840,1320
the last entry correct.

2319
01:24:57,460 --> 01:25:00,190
0,630 930,1800 1800,2250 2250,2430 2430,2730
The last century will have

2320
01:25:00,190 --> 01:25:01,690
0,90 90,690 750,960 960,1110 1110,1500
a hash of the preceding

2321
01:25:01,690 --> 01:25:03,200
0,600
entries.

2322
01:25:03,790 --> 01:25:04,840
0,210 210,630 630,750 750,870 870,1050
To everything you know from

2323
01:25:04,840 --> 01:25:06,700
0,90 90,420 420,810 810,1410 1530,1860
the liquor whatever records let's

2324
01:25:06,700 --> 01:25:07,720
0,120 120,300 300,360 360,780 780,1020
say this is zero one

2325
01:25:07,720 --> 01:25:10,060
0,120 120,630 990,1230 1230,1800 1800,2340
and two zero zero one

2326
01:25:10,060 --> 01:25:11,240
0,240 240,480
and two.

2327
01:25:11,900 --> 01:25:12,950
0,210 210,510 510,690 690,780 780,1050
We're basically has the hash

2328
01:25:12,950 --> 01:25:14,720
0,90 90,180 180,900 1080,1470 1470,1770
of the previous entry number

2329
01:25:14,720 --> 01:25:15,660
0,390
two.

2330
01:25:18,070 --> 01:25:19,660
0,180 180,330 330,840 840,1380 1380,1590
In it and um that

2331
01:25:19,660 --> 01:25:21,250
0,240 240,1050 1050,1320 1320,1500 1500,1590
needs either that needs to

2332
01:25:21,250 --> 01:25:22,080
0,90 90,540
be checked.

2333
01:25:22,540 --> 01:25:26,380
0,750 750,1140 1140,1740 1740,2610 3540,3840
And the way a now

2334
01:25:26,380 --> 01:25:27,520
0,180 180,420 420,750 750,960 960,1140
this being checked is you

2335
01:25:27,520 --> 01:25:28,930
0,450 450,780 780,1140 1140,1260 1260,1410
know in principle, if you

2336
01:25:28,930 --> 01:25:29,860
0,300 300,510 510,630 630,690 690,930
start really from the beginning

2337
01:25:29,860 --> 01:25:31,000
0,90 90,180 180,630 840,1050 1050,1140
of the world and you

2338
01:25:31,000 --> 01:25:31,840
0,120 120,300 300,450 450,780 780,840
would have to compute the

2339
01:25:31,840 --> 01:25:33,640
0,270 270,390 390,660 660,1530 1650,1800
hash with record zero you

2340
01:25:33,640 --> 01:25:34,420
0,240 240,300 300,420 420,480 480,780
find out what the hash

2341
01:25:34,420 --> 01:25:39,430
0,420 720,1320 1320,1800 1800,2820 2820,5010
is a and double-check zai

2342
01:25:39,430 --> 01:25:40,660
0,510 510,600 600,720 720,1020 1020,1230
corresponds to the entry that's

2343
01:25:40,660 --> 01:25:41,470
0,180 180,510 510,600 600,720 720,810
in here and that the

2344
01:25:41,470 --> 01:25:42,600
0,480 480,600 600,930
signature is out.

2345
01:25:43,280 --> 01:25:44,680
0,600 600,1110
Etc, etc.

2346
01:25:46,060 --> 01:25:47,080
0,210 210,540 540,630 630,720 720,1020
Of course, you know in

2347
01:25:47,080 --> 01:25:48,130
0,240 240,450 450,810 810,930 930,1050
the real system, you can

2348
01:25:48,130 --> 01:25:49,510
0,390 390,630 630,780 780,900 900,1380
remember most of the log

2349
01:25:49,900 --> 01:25:51,460
0,720 720,900 900,1110 1110,1380 1380,1560
and just double check that,

2350
01:25:51,460 --> 01:25:53,170
0,180 180,1140 1140,1350 1350,1590 1590,1710
like whatever and start from

2351
01:25:53,170 --> 01:25:53,780
0,360
there.

2352
01:25:56,040 --> 01:25:57,180
0,180 180,900
Oh it's.

2353
01:25:57,710 --> 01:25:59,140
0,720 720,1110
Inefficient, okay.

2354
01:25:59,430 --> 01:26:00,420
0,270 270,420 420,540 540,630 630,990
Yeah you have to replay

2355
01:26:00,420 --> 01:26:01,200
0,90 90,150 150,390 390,450 450,780
from the beginning of time,

2356
01:26:01,200 --> 01:26:02,460
0,150 150,450 450,780 780,900 900,1260
you basically enough to really

2357
01:26:02,460 --> 01:26:03,600
0,570 570,630 630,990 990,1080 1080,1140
validate the walk from the

2358
01:26:03,600 --> 01:26:04,540
0,210 210,300 300,570
beginning of time.

2359
01:26:06,660 --> 01:26:08,190
0,330 330,690 690,810 810,990 990,1530
Thank you, it makes sense,

2360
01:26:08,250 --> 01:26:09,030
0,360 360,480 480,630 630,720 720,780
you'll see this in the

2361
01:26:09,030 --> 01:26:10,320
0,300 300,990
Bitcoin paper.

2362
01:26:10,940 --> 01:26:11,930
0,330 330,450 450,570 570,870 870,990
So are the hash is

2363
01:26:11,930 --> 01:26:14,060
0,750 810,1140 1140,1260 1260,1410 1410,2130
like almost like a merkle

2364
01:26:14,060 --> 01:26:17,210
0,660 690,870 870,1350 1740,2340 2850,3150
chain like this OK, same

2365
01:26:17,210 --> 01:26:17,960
0,450
idea.

2366
01:26:18,680 --> 01:26:21,080
0,750 750,990 990,1200 1200,2100
So, are they, um.

2367
01:26:22,770 --> 01:26:26,670
0,1230 1230,1530 2370,3270 3270,3690 3690,3900
Like if like leaf in

2368
01:26:26,670 --> 01:26:28,980
0,420 660,1020 1020,1380 1770,2160 2160,2310
the sort of tree a

2369
01:26:28,980 --> 01:26:31,290
0,570 600,1020 1020,1410 1410,1800 1800,2310
chain like an entire file

2370
01:26:31,290 --> 01:26:32,430
0,180 180,480 480,900 900,1020 1020,1140
or like blocks of a

2371
01:26:32,430 --> 01:26:33,570
0,390 420,630 630,750 750,810 810,1140
file, this is a block

2372
01:26:33,570 --> 01:26:34,830
0,210 210,540 540,720 720,990 990,1260
one block, so this four

2373
01:26:34,830 --> 01:26:38,160
0,240 240,390 390,990 990,1440
five from 96 bytes.

2374
01:26:40,620 --> 01:26:41,900
0,660
Boom.

2375
01:26:43,580 --> 01:26:44,450
0,150 150,300 300,360 360,600 600,870
And all the other hazards

2376
01:26:44,450 --> 01:26:45,470
0,180 180,510 510,750 750,870 870,1020
don't change correct, so it's

2377
01:26:45,470 --> 01:26:47,480
0,240 240,450 450,630 630,1200 1350,2010
actually not that efficient inefficient

2378
01:26:48,050 --> 01:26:49,040
0,360 360,480 480,570 570,750 750,990
because if you only change

2379
01:26:49,040 --> 01:26:50,000
0,240 240,360 360,540 540,870 870,960
part of the file that

2380
01:26:50,000 --> 01:26:51,590
0,450 510,900 900,1170 1170,1410 1440,1590
only rehash that part you

2381
01:26:51,590 --> 01:26:52,430
0,150 150,270 270,360 360,690 690,840
just have to rehash that

2382
01:26:52,430 --> 01:26:53,060
0,210 210,300 300,420 420,510 510,630
one and then you have

2383
01:26:53,060 --> 01:26:54,530
0,510 540,840 840,1170 1170,1260 1260,1470
to {re-compute -} the hash

2384
01:26:54,530 --> 01:26:55,420
0,210 210,300 300,630
up the tree.

2385
01:26:56,490 --> 01:26:57,120
0,210 210,270 270,420 420,540 540,630
All the way to the

2386
01:26:57,120 --> 01:26:58,300
0,300 300,450 450,870
users I handle.

2387
01:27:02,660 --> 01:27:03,650
0,150 150,360 360,570 570,810 810,990
The paper talks about there's

2388
01:27:03,650 --> 01:27:05,000
0,240 240,480 480,570 570,1260 1260,1350
a couple of optimization to

2389
01:27:05,000 --> 01:27:06,560
0,150 150,300 300,510 510,1080 1140,1560
make this more efficient but

2390
01:27:06,980 --> 01:27:08,450
0,360 360,540 630,1080 1080,1290 1290,1470
hashing is generally not that

2391
01:27:08,450 --> 01:27:10,010
0,450 450,930 930,1110 1110,1380 1380,1560
expensive designing is a more

2392
01:27:10,010 --> 01:27:11,420
0,420 420,1140
expensive operation.

2393
01:27:18,380 --> 01:27:19,100
0,120 120,210 210,270 270,540 540,720
I had a question about

2394
01:27:19,100 --> 01:27:22,220
0,330 330,990 2070,2730 2760,2940 2940,3120
version vectors, so we use

2395
01:27:22,220 --> 01:27:23,510
0,270 270,690 690,810 810,1020 1020,1290
version vectors to make sure

2396
01:27:23,510 --> 01:27:24,620
0,120 120,240 240,630 630,840 840,1110
that the system can't return

2397
01:27:24,620 --> 01:27:26,180
0,120 120,180 180,420 420,840 1080,1560
like an old state, why

2398
01:27:26,180 --> 01:27:27,470
0,300 300,930 960,1110 1110,1230 1230,1290
can't the why can't the

2399
01:27:27,470 --> 01:27:28,400
0,240 240,360 360,660 660,750 750,930
system just return the old

2400
01:27:28,400 --> 01:27:29,390
0,300 300,450 450,510 510,750 750,990
state and the old version

2401
01:27:29,390 --> 01:27:30,650
0,360 360,480 480,870 870,1080 1080,1260
vector if it keeps a

2402
01:27:30,650 --> 01:27:31,660
0,210 210,720
second copy.

2403
01:27:31,940 --> 01:27:33,220
0,240 240,450 450,900
Yeah, good work.

2404
01:27:33,840 --> 01:27:35,310
0,270 270,690 960,1140 1140,1320 1320,1470
Right, so we only have

2405
01:27:35,310 --> 01:27:37,440
0,150 150,660 660,960 1110,1830 1830,2130
four consistency, then yeah your

2406
01:27:37,440 --> 01:27:38,850
0,270 270,570 570,810 810,960 960,1410
version vectors only for consistent

2407
01:27:39,120 --> 01:27:40,830
0,240 240,690 690,1230 1230,1380 1380,1710
and therefore consistent, no more.

2408
01:27:47,360 --> 01:27:49,010
0,180 180,750 750,1170 1170,1500 1500,1650
Of course, you need the

2409
01:27:49,010 --> 01:27:50,280
0,390 390,990
time stamp.

2410
01:27:50,430 --> 01:27:52,230
0,570 570,1110 1110,1170 1170,1560 1560,1800
Before consistency, I mean, um,

2411
01:27:52,260 --> 01:27:56,010
0,90 90,720 990,1710 1950,2520 3000,3750
you know, um, the server

2412
01:27:56,040 --> 01:27:58,350
0,360 360,840 840,960 960,1590 1920,2310
can fork the log at

2413
01:27:58,350 --> 01:27:59,580
0,180 180,540 540,720 720,780 780,1230
any particular point in time.

2414
01:28:00,800 --> 01:28:02,180
0,330 330,360 360,780 780,1200 1200,1380
Present a consistent view of

2415
01:28:02,180 --> 01:28:04,490
0,1170 1260,1560 1560,1710 1710,2010 2010,2310
the one big can merge

2416
01:28:04,490 --> 01:28:05,740
0,300 300,510 510,960
once back together.

2417
01:28:07,750 --> 01:28:08,440
0,540
Hello.

2418
01:28:09,190 --> 01:28:10,920
0,300 300,600 600,1140
Really, this picture.

2419
01:28:11,190 --> 01:28:13,560
0,120 120,630 1140,1770 1860,2250 2250,2370
You know a server can

2420
01:28:13,560 --> 01:28:15,150
0,240 240,930 930,1110 1110,1380 1380,1590
actually construct giving different views

2421
01:28:15,150 --> 01:28:16,890
0,90 90,150 150,720 960,1170 1170,1740
of the world and split

2422
01:28:16,920 --> 01:28:17,790
0,120 120,270 270,390 390,720 720,870
you know the world the

2423
01:28:17,790 --> 01:28:20,220
0,420 420,1020 1320,1770 1770,2010 2010,2430
multiple world but can emerge

2424
01:28:20,220 --> 01:28:21,460
0,90 90,390 390,600 600,1020
the world back together.

2425
01:28:23,480 --> 01:28:24,660
0,300 300,870
And effectively.

2426
01:28:27,070 --> 01:28:28,000
0,750
SO.

2427
01:28:28,900 --> 01:28:29,920
0,210 210,540 540,630 630,780 780,1020
The best we can do

2428
01:28:29,920 --> 01:28:32,350
0,270 270,540 540,1500 1590,1950 1950,2430
is for consistency which allows

2429
01:28:32,350 --> 01:28:33,640
0,120 120,750 810,960 960,1050 1050,1290
for forking but we can

2430
01:28:33,640 --> 01:28:35,640
0,480 480,1110
detect forking.

2431
01:28:35,990 --> 01:28:37,520
0,180 180,330 330,390 390,840 840,1530
So if we detect forking.

2432
01:28:38,260 --> 01:28:39,310
0,210 210,420 420,630 630,810 810,1050
Can we then get something

2433
01:28:39,310 --> 01:28:41,260
0,390 390,720 750,930 930,1560 1560,1950
stronger than for consistency, well,

2434
01:28:41,290 --> 01:28:42,820
0,570 780,1020 1020,1140 1140,1230 1230,1530
yep well, we can settle

2435
01:28:42,820 --> 01:28:44,020
0,120 120,180 180,720 900,1050 1050,1200
on a fork, we're gonna

2436
01:28:44,020 --> 01:28:45,460
0,150 150,750 840,1110 1110,1200 1200,1440
have fork, we can try

2437
01:28:45,460 --> 01:28:46,690
0,330 330,660 660,840 840,990 990,1230
to settle like pick one

2438
01:28:46,690 --> 01:28:48,130
0,510 510,720 720,840 840,1020 1020,1440
forecast one to go forward,

2439
01:28:48,130 --> 01:28:48,660
0,330
which.

2440
01:28:49,440 --> 01:28:50,340
0,780
Okay.

2441
01:28:51,270 --> 01:28:52,710
0,210 210,600 600,1110 1110,1320 1320,1440
But standard doesn't have a

2442
01:28:52,710 --> 01:28:56,020
0,300 300,480 480,720 720,1500
way to do that.

2443
01:29:00,130 --> 01:29:01,780
0,120 120,660 660,960 960,1170 1170,1650
I mean sunder does propose

2444
01:29:01,780 --> 01:29:04,720
0,480 510,1080 1110,1680 1680,2130 2460,2940
some some methods now methods

2445
01:29:04,720 --> 01:29:06,820
0,120 120,780 810,1170 1170,1620 1620,2100
to detect and basically going

2446
01:29:06,820 --> 01:29:08,440
0,360 360,870 870,1080 1080,1410 1410,1620
basically proposes like you use

2447
01:29:08,440 --> 01:29:09,790
0,60 60,330 330,600 600,960 960,1350
the time stamp box to

2448
01:29:10,270 --> 01:29:11,620
0,600 600,780 780,1050
use that one.

2449
01:29:17,110 --> 01:29:18,940
0,660 990,1140 1140,1530
Thanks, you wonder.

2450
01:29:20,640 --> 01:29:22,920
0,180 180,450 450,960 1020,1650 1650,2280
The time sound time sandbox,

2451
01:29:22,920 --> 01:29:25,110
0,420 420,660 660,1050 1050,1410 1590,2190
just a server that upends

2452
01:29:25,110 --> 01:29:26,970
0,450 450,720 750,1080 1080,1320 1320,1860
entries and you're really struck.

2453
01:29:27,660 --> 01:29:28,680
0,120 120,240 240,450 450,630 630,1020
I was not under control

2454
01:29:28,680 --> 01:29:30,320
0,60 60,630 660,1320
of the adversary.

2455
01:29:35,280 --> 01:29:36,740
0,390 390,720
Thank you.

2456
01:29:38,050 --> 01:29:39,820
0,240 240,720 720,1290 1290,1620 1620,1770
Um, today, also ask one

2457
01:29:39,820 --> 01:29:41,320
0,240 240,570 570,840 840,990 990,1500
final question about the debian

2458
01:29:41,320 --> 01:29:43,150
0,570 570,690 690,960 960,1140 1140,1830
example you set up beginning

2459
01:29:43,630 --> 01:29:45,220
0,480 690,840 840,990 990,1500 1500,1590
a can you sick and

2460
01:29:45,220 --> 01:29:47,620
0,150 150,870 990,1650 1800,2190 2190,2400
what happened there I'm not

2461
01:29:47,620 --> 01:29:48,340
0,510
sure.

2462
01:29:48,730 --> 01:29:51,370
0,750 750,960 960,1410 1410,2400 2460,2640
Um, so basically the this

2463
01:29:51,370 --> 01:29:53,260
0,150 150,270 270,840 840,1620 1650,1890
is the source repo or

2464
01:29:53,260 --> 01:29:55,690
0,420 420,900 900,1530 1530,1860 1860,2430
develop machines for debian Linux

2465
01:29:55,720 --> 01:29:58,960
0,240 240,690 690,2220 2220,2730 2760,3240
in {2003,a -} an attacker

2466
01:29:58,960 --> 01:30:01,810
0,810 840,900 900,1830 1830,2250 2250,2850
compromised a brook introduced machines

2467
01:30:02,020 --> 01:30:03,620
0,390 390,900 900,1470
and modified files.

2468
01:30:05,330 --> 01:30:06,410
0,210 210,360 360,450 450,570 570,1080
And this is the distribution

2469
01:30:06,410 --> 01:30:07,790
0,120 120,240 240,540 540,1020 1020,1380
that has been shorthanded off

2470
01:30:07,790 --> 01:30:08,630
0,60 60,210 210,630 630,750 750,840
you know which you know

2471
01:30:08,630 --> 01:30:09,860
0,90 90,300 300,390 390,690 690,1230
if you're on debian Linux,

2472
01:30:09,860 --> 01:30:11,260
0,120 120,240 240,630 630,1080
you know you're you're.

2473
01:30:11,560 --> 01:30:13,030
0,480 480,930 930,1050 1050,1260 1260,1470
Um, anybody who got like

2474
01:30:13,030 --> 01:30:14,950
0,600 660,960 960,1230 1230,1470 1470,1920
the gaping limbs after attack,

2475
01:30:14,950 --> 01:30:16,180
0,150 150,300 300,630 630,720 720,1230
you've got maybe a compromise

2476
01:30:16,180 --> 01:30:17,260
0,330 330,870
debian Linux.

2477
01:30:17,770 --> 01:30:18,760
0,330 330,480 480,690 690,780 780,990
And so when they soon

2478
01:30:18,760 --> 01:30:20,140
0,90 90,210 210,660 660,870 870,1380
as they discovered this, they,

2479
01:30:20,410 --> 01:30:21,760
0,570 570,780 780,900 900,1110 1110,1350
um, didn't do any further

2480
01:30:21,760 --> 01:30:23,470
0,750 1080,1200 1200,1290 1290,1500 1500,1710
development and they were further

2481
01:30:23,470 --> 01:30:25,780
0,870 870,1110 1110,1470 1470,1770 1770,2310
distributions, a sorted out like

2482
01:30:25,840 --> 01:30:26,920
0,60 60,270 270,360 360,900 900,1080
they went to backups you

2483
01:30:26,950 --> 01:30:28,570
0,330 330,780 780,1110 1110,1200 1200,1620
started comparing files from backups

2484
01:30:28,570 --> 01:30:31,150
0,630 1050,1500 1500,1710 1710,1980 1980,2580
with files and a half

2485
01:30:31,150 --> 01:30:32,920
0,480 480,600 630,1200 1200,1470 1470,1770
and you basically double check

2486
01:30:32,920 --> 01:30:34,150
0,150 150,360 360,480 480,990 990,1230
that all the changes that

2487
01:30:34,150 --> 01:30:35,440
0,240 240,420 420,720 720,1140 1140,1290
were in the repo are

2488
01:30:35,440 --> 01:30:36,620
0,420 420,960
actually legit.

2489
01:30:38,070 --> 01:30:39,600
0,330 330,870 870,960 960,1380 1380,1530
Okay rollback and rollback any

2490
01:30:39,600 --> 01:30:40,980
0,300 300,420 420,660 660,1080
changes are not legit.

2491
01:30:42,300 --> 01:30:46,620
0,540 1020,2220 2370,3390 3480,4200 4200,4320
Yeah yeah yeah yeah, it

2492
01:30:46,620 --> 01:30:47,820
0,420 420,840 840,990 990,1110 1110,1200
occasionally happens this is a

2493
01:30:47,820 --> 01:30:48,660
0,150 150,570
real problem.

2494
01:30:49,660 --> 01:30:50,380
0,210 210,270 270,420 420,660 660,720
That's a real problem in

2495
01:30:50,380 --> 01:30:51,160
0,540
practice.

2496
01:30:52,230 --> 01:30:53,040
0,210 210,330 330,450 450,690 690,810
Thank you so much that

2497
01:30:53,040 --> 01:30:54,900
0,270 270,540 540,960 960,1560 1560,1860
was very interesting lecture, thank

2498
01:30:54,900 --> 01:30:56,200
0,450
you.

2499
01:30:56,810 --> 01:30:57,780
0,270 270,690
Thank you.
