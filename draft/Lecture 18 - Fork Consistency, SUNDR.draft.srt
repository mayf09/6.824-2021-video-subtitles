1
00:00:01,290 --> 00:00:03,860
0,540 540,1140 1140,2220
Okay, good afternoon,
好的，下午好，大家能听到我说话吗？

2
00:00:04,750 --> 00:00:06,000
0,210 210,480 480,630 630,930
can everybody hear me?|
|

3
00:00:08,160 --> 00:00:09,080
0,660
Yep.|
是的。|

4
00:00:09,130 --> 00:00:10,750
0,480 480,690 690,960 1230,1530 1530,1620
Okay, thank you,| yes I
好的，谢谢，|是的，我会在课程结束后贴上讲稿，

5
00:00:10,750 --> 00:00:12,070
0,180 180,480 480,630 630,900 900,1320
will post the lecture notes

6
00:00:12,130 --> 00:00:13,390
0,510 510,630 630,720 720,810 810,1260
at the end of lecture,|
|

7
00:00:14,320 --> 00:00:16,500
0,600 690,1320 1320,1830
{} response to
作为对聊天的回应。

8
00:00:17,730 --> 00:00:20,520
0,510 600,840 840,1320 1320,1830 2070,2790
{the,chat}.| {} Okay, so, {}
|好的，今天我想在 6.824 开始一个新的话题，

9
00:00:21,280 --> 00:00:22,780
0,240 240,630 630,1050 1050,1380 1380,1500
{} today basically I want

10
00:00:22,780 --> 00:00:24,430
0,60 60,300 300,540 570,1020 1020,1650
to start a new topic

11
00:00:24,460 --> 00:00:26,920
0,510 510,1410 1740,2160 2160,2340 2340,2460
in {} in {6.824 -

12
00:00:26,920 --> 00:00:28,510
0,480 660,840 840,1020 1020,1140 1140,1590
-},| and sort of {}
|这是最后一个要讨论的话题，

13
00:00:28,780 --> 00:00:30,610
0,420 420,720 720,870 870,1440 1470,1830
last topic that will be

14
00:00:30,640 --> 00:00:32,530
0,630 870,1110 1110,1440 1440,1530 1530,1890
discussing,| the topic is really
|主题是去中心化的系统。

15
00:00:32,530 --> 00:00:34,540
0,630 630,1260
decentralized systems.|
|

16
00:00:40,830 --> 00:00:41,480
0,360

17
00:00:42,110 --> 00:00:42,900
0,330

18
00:00:45,490 --> 00:00:47,170
0,450 450,690 690,750 750,1470 1470,1680
And these are typically {}
去中心化指的是，

19
00:00:47,170 --> 00:00:48,970
0,510 510,960 960,1290 1290,1710 1710,1800
{decentralized -} really refers to

20
00:00:48,970 --> 00:00:50,080
0,90 90,390 390,570 570,780 780,1110
the fact,| that there's no
|没有单一的权威机构来控制这个系统，

21
00:00:50,080 --> 00:00:52,510
0,840 870,1890 1950,2250 2250,2370 2370,2430
single authority that is in

22
00:00:52,510 --> 00:00:53,900
0,420 420,510 510,570 570,1080
control of the system,|
|

23
00:00:54,320 --> 00:00:55,580
0,540 540,750 750,840 840,930 930,1260
a lot of the systems
到目前为止，我们看到了很多系统，

24
00:00:55,580 --> 00:00:56,750
0,120 120,330 330,480 480,660 660,1170
that we've seen so far,|
|

25
00:00:56,930 --> 00:00:59,000
0,930 930,1440 1440,1530 1530,1860 1860,2070
{all,the} machines and servers {sort,of}
所有的机器和服务器都在某种程度上合作，

26
00:00:59,000 --> 00:01:01,970
0,870 1110,1650 1650,1950 1950,2220 2610,2970
cooperate,| and on the under
|在单一机构或任何单一当局的控制下。

27
00:01:01,970 --> 00:01:03,380
0,390 390,450 450,540 540,870 870,1410
control of a single institution

28
00:01:03,380 --> 00:01:05,320
0,150 150,270 270,810 810,1650
or any single authority.|
|

29
00:01:05,850 --> 00:01:08,040
0,510 810,1110 1110,1590 1590,1680 1680,2190
{} And since {} a
因为有很多人提问，

30
00:01:08,040 --> 00:01:09,030
0,150 150,240 240,390 390,600 600,990
lot of you ask questions,|
|

31
00:01:09,030 --> 00:01:10,110
0,240 240,390 390,720 720,870 870,1080
about like how would it
关于它是如何工作的，

32
00:01:10,110 --> 00:01:12,600
0,390 390,1020 1320,2070 2100,2340 2340,2490
work,| if {} there's no
|如果没有中心信任点的话。

33
00:01:12,600 --> 00:01:14,140
0,450 450,690 690,780 780,1320
central point of trust.|
|

34
00:01:14,770 --> 00:01:17,240
0,510 750,960 960,1380 1470,2160
{} And so, {}
所以，从现在开始，

35
00:01:17,540 --> 00:01:18,620
0,270 270,540 540,750 750,870 870,1080
from now on,| the three
|三个系统或三个论文要讨论，

36
00:01:18,620 --> 00:01:19,970
0,330 330,510 510,750 750,1200 1200,1350
systems or three papers were

37
00:01:19,970 --> 00:01:20,930
0,120 120,180 180,240 240,750 750,960
going to be discussing,| all
|都是以这种去中心化系统的形式存在的，

38
00:01:20,930 --> 00:01:21,980
0,210 210,330 330,510 510,840 840,1050
sit in this form of

39
00:01:21,980 --> 00:01:24,770
0,390 390,600 600,1230 1440,2400 2460,2790
{decentralized -} systems,| and {decentralized
|去中心化的系统更难建立，

40
00:01:24,770 --> 00:01:27,290
0,300 300,960 960,1290 1290,2310 2370,2520
-} systems are harder to

41
00:01:27,290 --> 00:01:28,730
0,570 600,1020 1020,1200 1200,1380 1380,1440
build| than the sort of
|比单一信任系统，

42
00:01:28,730 --> 00:01:32,060
0,270 270,900 900,1500 1920,2520 2550,3330
single trust systems,| {} because
|因为你可能不得不解释拜占庭失败

43
00:01:32,060 --> 00:01:33,020
0,120 120,210 210,510 510,840 840,960
you know {you,might} have to

44
00:01:33,020 --> 00:01:35,810
0,390 390,900 900,1350 1350,1890 1890,2790
account for byzantine failures| {or,byzantine
|或拜占庭参与者，

45
00:01:35,810 --> 00:01:37,240
0,270 360,1110
-} participants,|
|

46
00:01:45,540 --> 00:01:47,340
0,540 630,840 840,930 930,1410 1410,1800
and these are participants that
这些参与者有时会遵守协议，

47
00:01:47,340 --> 00:01:48,420
0,210 210,390 390,750 750,960 960,1080
you know sometimes follow the

48
00:01:48,420 --> 00:01:49,500
0,390 390,480 480,810 810,900 900,1080
protocol,| and sometimes they don't
|有时他们不遵守协议，

49
00:01:49,500 --> 00:01:51,600
0,240 240,330 330,870 1470,1710 1710,2100
follow the protocol,| so again
|所以再一次考虑这个，

50
00:01:51,600 --> 00:01:52,770
0,90 90,510 510,660 660,930 930,1170
{} really {} think about

51
00:01:52,770 --> 00:01:54,540
0,120 120,240 240,390 390,870 870,1770
it,| they are basically adversaries,|
|他们基本上是对手，|

52
00:01:54,780 --> 00:01:56,490
0,300 300,780 780,1080 1080,1350 1350,1710
{} and they may try
他们可能会试图伤害或欺骗系统中的其他参与者，

53
00:01:56,490 --> 00:01:59,250
0,480 480,1590 1650,2010 2010,2280 2280,2760
to abuse {} or trick

54
00:01:59,610 --> 00:02:02,820
0,150 150,1260 1260,2130 2130,2250 2250,3210
{} other participants in systems,|
|

55
00:02:02,820 --> 00:02:03,420
0,90 90,210 210,300 300,480 480,600
you know for their own
为了自己的财产，

56
00:02:03,420 --> 00:02:04,740
0,420 420,750 750,930 930,1170 1170,1320
goods,| but not maybe for
|但可能不是为了其他人。

57
00:02:04,740 --> 00:02:05,320
0,480
others.|
|

58
00:02:05,800 --> 00:02:09,550
0,720 1080,1980 2340,3060 3330,3630 3630,3750
{} And {} so that
所以，这使系统设计，

59
00:02:09,550 --> 00:02:11,170
0,240 240,600 600,930 930,1380 1380,1620
makes actually system design,| which
|分布式系统设计更具挑战性，

60
00:02:11,170 --> 00:02:12,970
0,420 420,720 720,1140 1140,1410 1410,1800
distributed system designs much more

61
00:02:12,970 --> 00:02:14,860
0,660 690,1050 1050,1230 1230,1470 1470,1890
challenging,| and much more difficult
|更难理解，

62
00:02:14,860 --> 00:02:16,240
0,60 60,330 330,750 1170,1290 1290,1380
to reason about,| {you,know -}
|在过去的 18 节课中，

63
00:02:16,240 --> 00:02:17,080
0,120 120,210 210,300 300,750 750,840
like in the last you

64
00:02:17,080 --> 00:02:21,040
0,480 1200,1650 1650,1950 1950,2430 2640,3960
know 18 whatever lectures,| mostly
|大多数时候，当我们谈到，

65
00:02:21,040 --> 00:02:22,510
0,390 390,570 570,1050 1050,1260 1260,1470
when we talk about,| when
|当我们设计协议或我们考虑 Raft ，

66
00:02:22,510 --> 00:02:23,770
0,90 90,420 420,930 930,1050 1050,1260
we design protocol or {we,thought}

67
00:02:23,770 --> 00:02:25,240
0,180 180,750 960,1170 1170,1320 1320,1470
about Raft,| and we just
|我们只是假设

68
00:02:25,240 --> 00:02:28,330
0,510 510,660 660,930 930,1620 1650,3090
assume that| actually every participant
|协议中的每个参与者都遵守规则，

69
00:02:28,330 --> 00:02:29,500
0,150 150,210 210,690 690,1080 1080,1170
in the protocol follows the

70
00:02:29,500 --> 00:02:33,160
0,450 900,1440 1440,1680 1680,3120 3120,3660
rules,| and in {the,byzantine,with,byzantine} participants,|
|在拜占庭和拜占庭参与者之间，|

71
00:02:33,160 --> 00:02:33,910
0,180 180,270 270,450 450,510 510,750
that is not the case
情况不再是这样了，

72
00:02:33,910 --> 00:02:36,880
0,570 1530,2190 2190,2400 2520,2880 2880,2970
anymore,| {you,know,the,participants} can cook up
|参与者可以编造新的消息，

73
00:02:36,880 --> 00:02:38,500
0,150 150,960 960,1080 1080,1410 1410,1620
new messages,| you know send
|发送无序的消息，

74
00:02:38,500 --> 00:02:40,000
0,360 360,510 510,600 600,1080 1080,1500
messages out of order,| trick
|欺骗其他参与者，

75
00:02:40,000 --> 00:02:43,750
0,1290 1290,2010 2310,2640 2640,3090 3180,3750
other participants,| and so the
|所以，我们考虑这类协议要困难得多，

76
00:02:43,780 --> 00:02:45,400
0,720 750,1170 1170,1320 1320,1500 1500,1620
we thinking about those kind

77
00:02:45,400 --> 00:02:46,390
0,60 60,600 600,690 690,870 870,990
of protocols is much more

78
00:02:46,390 --> 00:02:47,680
0,540 600,990 990,1110 1110,1230 1230,1290
difficult,| because we have to
|因为我们必须考虑对手能做什么，

79
00:02:47,680 --> 00:02:48,740
0,630 630,960
consider what,

80
00:02:49,050 --> 00:02:51,150
0,450 450,780 780,1380 1380,1560 1560,2100
what the adversary could do,|
|

81
00:02:51,210 --> 00:02:52,680
0,180 180,540 540,1140 1140,1410 1410,1470
{} to {} sort of
来创建[]，

82
00:02:52,680 --> 00:02:53,700
0,210 210,300 300,750
make our [],|
|

83
00:02:54,010 --> 00:02:56,140
0,180 180,420 420,780 780,1680 1710,2130
to break basically the properties
打破我们所追求的协议的属性，

84
00:02:56,140 --> 00:02:56,890
0,90 90,180 180,570 570,660 660,750
of the protocols, that we're

85
00:02:56,890 --> 00:02:58,690
0,270 270,510 1110,1440 1440,1590 1590,1800
shooting for,| so this tends
|所以，这会使问题变得更加困难。

86
00:02:58,690 --> 00:02:59,950
0,60 60,660 660,870 870,930 930,1260
to be made the problem

87
00:02:59,950 --> 00:03:02,600
0,180 180,660
much harder.|
|

88
00:03:03,790 --> 00:03:05,680
0,660 900,1410 1410,1500 1500,1590 1590,1890
And really you know where
这类话题在哪里，

89
00:03:05,680 --> 00:03:07,690
0,1320 1320,1470 1470,1620 1620,1680 1680,2010
what this sort of topic

90
00:03:07,690 --> 00:03:08,920
0,450 450,600 600,870 870,960 960,1230
is,| so sits on the
|它位于分布式系统和安全性的交汇点上。

91
00:03:08,920 --> 00:03:11,290
0,600 600,690 690,1140 1140,1890 2130,2370
intersection of distributed systems and

92
00:03:11,290 --> 00:03:12,400
0,570
security.|
|

93
00:03:16,120 --> 00:03:17,290
0,150 150,270 270,420 420,990 990,1170
And as we'll see in
正如我们将在接下来的三篇论文中看到的，

94
00:03:17,290 --> 00:03:20,740
0,1770 1770,1950 1950,2100 2100,2550 2910,3450
the next {this,paper\,,next,three} papers, {}|
|

95
00:03:21,160 --> 00:03:23,710
0,300 300,1410 1440,1740 1740,2160 2160,2550
{you,know} cryptography or security ideas,
密码学或安全理念，比如签名和哈希，

96
00:03:23,710 --> 00:03:25,180
0,180 180,600 600,690 690,1260 1260,1470
like signing and hashing,| and
|在取得进展方面发挥了关键作用。

97
00:03:25,450 --> 00:03:26,350
0,390 390,510 510,570 570,750 750,900
are going to play a

98
00:03:26,350 --> 00:03:28,330
0,420 420,810 810,990 990,1470 1470,1980
crucial role to actually {}

99
00:03:28,330 --> 00:03:29,820
0,420 420,720 720,1350
make [] progress.|
|

100
00:03:31,140 --> 00:03:32,370
0,150 150,570 630,870 870,960 960,1230
In fact, {you,know} the paper
事实上，我们今天读的这篇论文也是，

101
00:03:32,370 --> 00:03:33,390
0,330 330,540 540,690 690,900 900,1020
actually that we're reading for

102
00:03:33,390 --> 00:03:35,070
0,360 360,480 480,930 930,1110 1110,1680
today is also,| is a
|是我们在 6.858 中使用的一篇论文，

103
00:03:35,100 --> 00:03:36,330
0,390 390,540 540,690 690,1020 1020,1230
paper that we use in

104
00:03:36,330 --> 00:03:37,500
0,210 210,420 420,540 540,810 810,1170
the {6.858 - - -},|
|

105
00:03:38,250 --> 00:03:39,660
0,390 390,720 720,930 930,1170 1170,1410
taking maybe {6.858 - -}
去年春天，参加了 6.858 ，

106
00:03:39,660 --> 00:03:42,990
0,510 540,1230 1230,1740 1920,2370 2370,3330
last {} Spring,| {} we
|我们也谈到了这篇论文，

107
00:03:43,020 --> 00:03:44,040
0,360 360,480 480,600 600,840 840,1020
talked about this paper too,|
|

108
00:03:44,040 --> 00:03:45,570
0,540 570,960 960,1110 1110,1410 1410,1530
although then for mostly from
尽管主要是从安全的角度，

109
00:03:45,570 --> 00:03:47,400
0,90 90,480 480,600 600,1230 1320,1830
the perspective of security,| and
|今天，我将主要集中在

110
00:03:47,430 --> 00:03:48,390
0,390 390,510 510,630 630,690 690,960
today I'm going to mostly

111
00:03:48,390 --> 00:03:50,490
0,750 750,990 990,1110 1110,1620 1620,2100
focuses on| the perspective of
|分布式系统的角度，

112
00:03:50,490 --> 00:03:52,560
0,630 750,1350 1350,2010
{} distributed systems,|
|

113
00:03:53,100 --> 00:03:56,880
0,570 1050,1530 1530,1830 1830,2640 2670,3780
{} the SUNDR itself, a
很多人都会问 SUNDR 本身，

114
00:03:56,970 --> 00:03:58,470
0,420 420,480 480,810 810,1320 1350,1500
lot of people ask,| a
|你们中的许多人问 SUNDR 在使用吗，

115
00:03:58,470 --> 00:03:59,280
0,210 210,300 300,420 420,750 750,810
lot of you ask you

116
00:03:59,280 --> 00:04:02,520
0,330 330,750 750,990 990,1620 1800,3240
know SUNDR being used, {}|
|

117
00:04:02,520 --> 00:04:03,810
0,480 540,870 870,1050 1050,1200 1200,1290
and {} as far as
据我所知，

118
00:04:03,810 --> 00:04:04,860
0,120 120,420 420,630 630,840 840,1050
I know,| there's actually no
|没有任何系统直接实现 SUNDR ，

119
00:04:04,860 --> 00:04:07,320
0,630 840,990 990,1440 1440,1680 1680,2460
systems that actually {} implement

120
00:04:07,380 --> 00:04:09,570
0,330 330,660 840,1320 1320,1650 1680,2190
{SUNDR -} directly| or based
|或者直接基于 SUNDR ，

121
00:04:09,570 --> 00:04:11,670
0,330 330,600 600,1080 1170,1620 1620,2100
directly based SUNDR,| other than
|除了 6.858 中的实验 4 ，

122
00:04:11,700 --> 00:04:13,770
0,330 330,690 690,1350 1380,1830 1830,2070
{} lab 4 in {6.858

123
00:04:13,770 --> 00:04:15,810
0,150 150,570 570,990 1050,1500 1650,2040
- - -},| in lab
|在实验 4 中，如果你做实验 4 ，默认项目，

124
00:04:15,810 --> 00:04:18,270
0,600 780,1470 1770,2220 2220,2370 2370,2460
4, {} what if you

125
00:04:18,270 --> 00:04:19,770
0,690 720,750 780,1170 1170,1410 1410,1500
do {} lab 4, the

126
00:04:19,770 --> 00:04:21,060
0,360 360,900 900,1020 1020,1140 1140,1290
default project,| { -} lab
|实验 4 在 6.858 ，

127
00:04:21,060 --> 00:04:22,050
0,240 240,330 330,480 480,720 720,990
4 at {6.858 - -},|
|

128
00:04:22,170 --> 00:04:24,060
0,600 600,600 600,960 960,1320 1320,1890
then {} you actually implement
然后，你实现了 SUNDR 。

129
00:04:24,060 --> 00:04:25,540
0,240 240,780
{} SUNDR.|
|

130
00:04:26,000 --> 00:04:29,150
0,690 930,1530 1740,2220 2220,2880 2970,3150
Now, {} the reason, so
现在，所以你可能会想我们为什么要研究这篇论文，

131
00:04:29,150 --> 00:04:30,290
0,90 90,240 240,420 420,630 630,1140
you might wonder why we

132
00:04:30,290 --> 00:04:32,090
0,540 600,990 990,1410 1410,1470 1470,1800
are studying {this,paper} at all,|
|

133
00:04:32,270 --> 00:04:33,200
0,180 180,300 300,510 510,630 630,930
{} the reason we're studying
我们之所以要研究它，

134
00:04:33,200 --> 00:04:34,490
0,150 150,420 420,510 510,810 810,1290
it,| because it actually proposes
|因为它提出了一些

135
00:04:34,490 --> 00:04:35,600
0,60 60,270 270,330 330,600 600,1110
a number of| very powerful
|非常强大的技术或强大的想法，

136
00:04:35,600 --> 00:04:37,600
0,360 360,420 420,840 840,1440
techniques or powerful ideas,|
|

137
00:04:40,400 --> 00:04:41,930
0,450 450,690 690,810 810,1410 1410,1530
{} and so particularly the
特别是 signed log ，

138
00:04:41,930 --> 00:04:43,340
0,360 360,930
signed log,|
|

139
00:04:43,640 --> 00:04:45,710
0,420 420,750 750,1110 1110,1500 1500,2070
{} even though is a
尽管这是一个很强的设计，概念设计，

140
00:04:45,710 --> 00:04:47,720
0,420 420,810 810,960 960,1470 1470,2010
strong design {} conceptual design,|
|

141
00:04:47,990 --> 00:04:50,690
0,540 540,810 810,1380 1380,2010 2190,2700
{} is incredibly powerful,| and
令人难以置信的强大，|你可以看到，

142
00:04:50,690 --> 00:04:52,700
0,180 180,540 540,1110 1140,1620 1710,2010
you see back| {} same
|同样的想法也出现在许多其他去中心化的系统中，

143
00:04:52,700 --> 00:04:53,840
0,330 330,690 690,780 780,1050 1050,1140
idea appear in lots of

144
00:04:53,840 --> 00:04:57,200
0,510 540,1140 1140,1770 2040,2820 2820,3360
other decentralized systems,| {you,know,ranging} from
|从 Git 这样的系统到比特币这样的系统，

145
00:04:57,500 --> 00:04:59,840
0,360 360,540 540,930 1680,2280 2280,2340
systems like Git to you

146
00:04:59,840 --> 00:05:01,610
0,240 240,660 660,840 840,1440 1440,1770
know systems like Bitcoin| or
|或任何其他类型的加密账本，

147
00:05:01,610 --> 00:05:02,780
0,150 150,360 360,510 510,570 570,1170
any other sort of cryptographic

148
00:05:02,780 --> 00:05:04,430
0,750 990,1110 1110,1230 1230,1320 1320,1650
ledger,| we're gonna be talking
|我们会在周一或下周二讨论，

149
00:05:04,430 --> 00:05:07,430
0,390 690,1380 1470,1800 1800,2370 2370,3000
about Monday or next Tuesday,|
|

150
00:05:07,610 --> 00:05:10,100
0,690 1050,1530 1530,1710 1710,2070 2070,2490
{} I know one system
我知道有一个系统直接受到 SUNDR 的影响，

151
00:05:10,100 --> 00:05:13,250
0,540 540,750 750,1380 1380,2010 2040,3150
actually is directly influenced by

152
00:05:13,250 --> 00:05:14,390
0,330 330,630 630,840 840,960 960,1140
{} SUNDR,| which is a
|是一个被称为 Keybase 的系统，

153
00:05:14,390 --> 00:05:16,100
0,270 270,510 510,690 690,1260
system called {Keybase -},|
|

154
00:05:16,430 --> 00:05:17,510
0,630 630,690 690,780 780,1020 1020,1080
{} { -} {Keybase -}
Keybase 使用了 SUNDR 的技术，

155
00:05:17,510 --> 00:05:20,090
0,420 420,480 690,1200 1200,1740 1770,2580
uses {SUNDR - -} techniques,|
|

156
00:05:20,090 --> 00:05:22,190
0,510 510,600 600,810 810,1290 1470,2100
and and many more {},|
还有更多的，|

157
00:05:22,190 --> 00:05:23,510
0,270 300,630 630,1020 1020,1170 1170,1320
{if,you're,not -} familiar with {Keybase
如果你不熟悉 Keybase ，

158
00:05:23,510 --> 00:05:25,310
0,480 480,900 900,1320 1320,1470 1470,1800
-},| actually {} was originally
|[最初]被 Zoom 收购，

159
00:05:25,310 --> 00:05:28,520
0,480 480,810 810,1560 2190,2910 2940,3210
acquired by Zoom,| which was
|是大家都很熟悉的。

160
00:05:28,520 --> 00:05:29,820
0,210 210,420 420,810 810,1110
only all familiar with.|
|

161
00:05:32,180 --> 00:05:33,500
0,510 540,690 690,900 900,1110 1110,1320
Okay, so that's {sort,of} for
好了，这是这篇论文的简短介绍，

162
00:05:33,500 --> 00:05:35,840
0,570 660,990 990,1950 1980,2130 2130,2340
the quick intro to this

163
00:05:35,840 --> 00:05:38,330
0,1110 1200,1920 1920,1950 1950,2250 2250,2490
paper,| before I dive into
|在我深入到更多背景之前，

164
00:05:38,330 --> 00:05:39,590
0,300 300,390 390,450 450,900 900,1260
more of the setting,| any
|有任何的问题，

165
00:05:39,590 --> 00:05:42,080
0,150 150,300 300,1110 1110,1980 2010,2490
sort of questions| before {}
|在深入到论文之前。

166
00:05:42,200 --> 00:05:43,550
0,510 510,570 570,720 720,1110 1110,1350
diving a little bit deeper

167
00:05:43,550 --> 00:05:44,320
0,60 60,120 120,510
in the paper.|
|

168
00:05:50,710 --> 00:05:52,660
0,690 960,1650
Okay. {}|
好的。|

169
00:05:52,950 --> 00:05:53,760
0,240 240,390 390,540 540,600 600,810
So let's talk a little
所以，让我们来谈谈这篇论文的背景

170
00:05:53,760 --> 00:05:55,650
0,120 120,390 390,720 750,1350 1440,1890
bit about the setting of

171
00:05:55,650 --> 00:05:57,420
0,210 210,660 660,900 900,1200 1200,1770
this paper| or the motivation
|或者这篇论文的动机。

172
00:05:57,420 --> 00:05:58,880
0,90 90,270 270,1140
of this {}

173
00:05:59,430 --> 00:06:00,660
0,240 240,240 240,600 600,750 750,1230
{paper -}.| So the setting
|所以设置，

174
00:06:00,660 --> 00:06:03,960
0,420 420,1140 2310,2640 2640,3060 3060,3300
{} in the {},| that
|[]的设置是网络文件系统，

175
00:06:03,960 --> 00:06:05,970
0,240 240,690 690,900 900,1470 1470,2010
the [] set forward is

176
00:06:05,970 --> 00:06:08,820
0,30 30,330 330,570 570,1080
a network file system,|
|

177
00:06:11,240 --> 00:06:13,220
0,600 630,1170 1590,1740 1740,1830 1830,1980
and, {} you can think
你可以虑这个，

178
00:06:13,220 --> 00:06:14,270
0,360 360,630 630,720 720,900 900,1050
about this a little bit,|
|

179
00:06:14,270 --> 00:06:16,520
0,120 120,210 210,690 690,1860 1890,2250
in the style of earlier
以我们之前读过的 Frangipani 论文的风格，

180
00:06:16,520 --> 00:06:18,320
0,300 300,480 480,690 690,930 1320,1800
paper, that we've read {}

181
00:06:18,320 --> 00:06:20,780
0,330 330,930 1110,1650 1650,2340 2340,2460
{Frangipani -},| {} where the
|其中的主题也是实现一致的网络文件系统。

182
00:06:20,780 --> 00:06:22,190
0,360 360,570 570,840 870,960 960,1410
topic also was to implement

183
00:06:22,190 --> 00:06:24,170
0,360 390,1050 1050,1470 1470,1680 1680,1980
{} consistent network file system.|
|

184
00:06:25,070 --> 00:06:26,690
0,540 780,1110 1110,1440 1440,1560 1560,1620
{} So we have a
所以我们有一台文件服务器，

185
00:06:26,690 --> 00:06:27,920
0,270 270,900
file server,|
|

186
00:06:30,770 --> 00:06:32,210
0,210 210,360 360,450 450,1230 1230,1440
{} we have clients that
我们有与文件服务器交互的客户端，

187
00:06:32,210 --> 00:06:33,770
0,450 450,630 630,720 720,960 960,1560
interact with the file server,|
|

188
00:06:34,850 --> 00:06:35,990
0,390 390,570 570,780 780,1050 1050,1140
somebody might actually create a
有些人可能创建了一个文件 f ，

189
00:06:35,990 --> 00:06:38,240
0,570 600,1290
file f,|
|

190
00:06:39,470 --> 00:06:42,590
0,510 510,1230 1260,1560 1560,2160 2640,3120
and maybe read f {on,another}
可能在另一个客户端上读取 f 。

191
00:06:42,590 --> 00:06:43,580
0,630
client.|
|

192
00:06:44,420 --> 00:06:45,500
0,750

193
00:06:45,860 --> 00:06:47,540
0,480 480,600 600,720 720,1080 1080,1680
And you know the setting
我们所处的环境，

194
00:06:47,540 --> 00:06:49,790
0,780 900,1770 1770,1980 1980,2130 2130,2250
{} we're in,| is that
|文件服务器对比 Frangipani ，

195
00:06:49,790 --> 00:06:51,740
0,630 780,900 900,1170 1170,1770 1770,1950
basically the file server as

196
00:06:51,740 --> 00:06:54,950
0,330 330,540 540,1710 2430,2730 2730,3210
opposed to {in,the} {Frangipani -},|
|

197
00:06:55,100 --> 00:06:57,170
0,780 900,1410 1410,1620 1620,1920 1920,2070
{} {the,file,server} are actually can
文件服务器可以是拜占庭式的。

198
00:06:57,170 --> 00:06:58,480
0,270 270,360 360,780
be {} Byzantine.|
|

199
00:07:02,790 --> 00:07:05,670
0,570 570,1110 1110,1770 1800,2340 2340,2880
And Byzantine {} really increasing
拜占庭增加了非常强大的威胁模型，

200
00:07:05,670 --> 00:07:07,650
0,570 570,1110 1110,1320 1320,1620 1620,1980
extremely powerful threat model,| or
|或者给了攻击者难以置信的力量。

201
00:07:07,650 --> 00:07:09,300
0,150 150,330 330,570 570,960 960,1650
you know gives the attacker

202
00:07:09,300 --> 00:07:10,560
0,60 60,600 600,750 750,810 810,1260
an incredible amount of power.|
|

203
00:07:10,920 --> 00:07:12,330
0,390 390,540 540,1200 1200,1290 1290,1410
So in Byzantine you know
所以在拜占庭中，服务器可能会发回不同的 RPC ，

204
00:07:12,330 --> 00:07:14,910
0,210 210,600 600,1020 1320,2220 2250,2580
the server might {} send

205
00:07:14,910 --> 00:07:16,290
0,300 300,390 390,810 810,1230 1230,1380
different {RPCs -} back,| {you,know}
|编造自己的 RPC ，接管机器，

206
00:07:16,290 --> 00:07:17,340
0,240 240,330 330,480 480,690 690,1050
cook up its own {RPCs

207
00:07:17,340 --> 00:07:20,220
0,720 900,1830 2010,2670
-}, {} the

208
00:07:20,880 --> 00:07:25,470
0,600 2280,2910 2910,3030 3030,3690 3780,4590
the, takeover the machine, {}|
|

209
00:07:25,470 --> 00:07:27,240
0,120 120,300 300,630 630,690 690,1770
you know bribe the administrator,|
[贿赂]管理员，|

210
00:07:27,240 --> 00:07:29,670
0,870 870,1080 1080,1530 1530,1710 1710,2430
and for everything is basically
所有事情考虑的方式，

211
00:07:29,670 --> 00:07:30,480
0,90 90,210 210,300 300,450 450,810
the way to think about

212
00:07:30,480 --> 00:07:32,010
0,150 150,330 630,840 840,1350 1350,1530
is that,| the adversary gets
|对手获得文件服务器的完全控制权。

213
00:07:32,010 --> 00:07:34,290
0,450 450,1140 1140,1290 1290,1830 1860,2280
complete control of the {file,server}.|
|

214
00:07:36,130 --> 00:07:38,350
0,630 930,1410 1440,1620 1620,1950 1950,2220
And so this covers {sort,of}
所以，这涵盖了一系列

215
00:07:38,350 --> 00:07:40,690
0,630 630,1320 1350,1950 1980,2070 2070,2340
wide range| of you know
|更常见的攻击，

216
00:07:40,690 --> 00:07:42,010
0,150 150,210 210,390 390,750 750,1320
sort of more common attacks|
|

217
00:07:42,010 --> 00:07:43,300
0,240 240,540 540,630 630,960 960,1290
or like the typical attacks
或者你可能在真实系统中看到的典型攻击，

218
00:07:43,300 --> 00:07:44,410
0,180 180,360 360,720 720,960 960,1110
you might see in a

219
00:07:44,410 --> 00:07:45,970
0,210 210,600 600,810 810,1020 1020,1560
real system,| so real attacks
|所以攻击了软件中的一个漏洞，

220
00:07:46,060 --> 00:07:47,320
0,630 630,870 870,960 960,1200 1200,1260
one bug in {software -

221
00:07:47,320 --> 00:07:47,980
0,570
-},|
|

222
00:07:51,920 --> 00:07:53,240
0,360 360,930 930,1020 1020,1110 1110,1320
so if you know there's
如果软件中有漏洞，

223
00:07:53,240 --> 00:07:54,680
0,60 60,270 270,420 420,930 960,1440
a bug in the software,|
|

224
00:07:54,680 --> 00:07:55,910
0,420 420,510 510,600 600,750 750,1230
then you know the adversary
那么对手可以利用，

225
00:07:55,910 --> 00:07:58,430
0,120 120,720 720,1860 1860,2040 2040,2520
can exploit,| that [] maybe
|可能获得特权，

226
00:07:58,430 --> 00:08:01,310
0,300 300,930 1230,1800 1800,2490 2490,2880
to obtain {} privileges| and
|而拜占庭模式完全通过，

227
00:08:01,310 --> 00:08:03,170
0,60 60,330 330,1050 1050,1470 1470,1860
you know that Byzantine {}

228
00:08:03,170 --> 00:08:05,270
0,630 630,720 720,810 810,1320 1320,2100
model you know completely passes,|
|

229
00:08:05,270 --> 00:08:08,450
0,390 810,1920 1920,2280 2280,2940 2940,3180
that {or,you,know} system administrator might
或者系统管理员可能有一个弱密码，

230
00:08:08,450 --> 00:08:09,500
0,120 120,240 240,690
have a weak,

231
00:08:13,370 --> 00:08:15,500
0,360 360,630 630,1380
with weak password,|
|

232
00:08:16,460 --> 00:08:17,900
0,180 180,300 300,660 660,1320 1320,1440
if the attacker [] and
如果攻击者[]，然后他们控制了系统，

233
00:08:17,900 --> 00:08:19,370
0,210 210,390 390,630 630,1020 1020,1470
then they take control over

234
00:08:19,370 --> 00:08:20,930
0,450 600,1170 1170,1260 1260,1350 1350,1560
the system,| you know that's
|这也在拜占庭式的物理突破之中，

235
00:08:20,930 --> 00:08:22,220
0,240 240,510 510,600 600,810 810,1290
also covered by {Byzantine -}

236
00:08:22,430 --> 00:08:24,260
0,690 690,1350
physical breaking,|
|

237
00:08:28,150 --> 00:08:29,800
0,300 300,420 420,840 840,1470 1470,1650
maybe the attacker [] {you,know}
也许的攻击者可以进入物理机器，

238
00:08:29,800 --> 00:08:31,840
0,240 240,870 1110,1470 1470,1740 1740,2040
get access to the physical

239
00:08:31,840 --> 00:08:35,770
0,660 930,1830 1830,2610 2610,2640 2640,3930
machine,| {} and {} {you,know}
|因此可以控制机器的物理部分，

240
00:08:35,950 --> 00:08:37,270
0,210 210,540 540,960 960,1020 1020,1320
can therefore control the physical

241
00:08:37,270 --> 00:08:38,650
0,210 210,300 300,390 390,930 1020,1380
part of the machine,| again
|这些都涵盖在拜占庭威胁模型中，

242
00:08:38,650 --> 00:08:39,700
0,180 180,330 330,660 660,780 780,1050
it's all covered by this

243
00:08:39,700 --> 00:08:41,320
0,120 120,390 420,930 930,1140 1140,1620
you know Byzantine threat model,|
|

244
00:08:41,710 --> 00:08:43,450
0,360 360,870 870,960 960,1170 1170,1740
or even you know, maybe
或者甚至攻击者贿赂操作者，

245
00:08:43,690 --> 00:08:45,550
0,120 120,300 300,960 990,1260 1260,1860
you know the the attacker

246
00:08:45,550 --> 00:08:46,420
0,750
bribes

247
00:08:49,380 --> 00:08:53,520
0,660 660,1530 1530,2310
{} an operator|
|

248
00:08:54,540 --> 00:08:56,700
0,630 810,1410 1410,1560 1560,1710 1710,2160
or colludes you know with
或者与恶意客户端勾结，

249
00:08:56,700 --> 00:08:59,970
0,1080 1410,2430 2580,3060 3060,3180 3180,3270
a malicious client,| you know
|这也涵盖在这个模型中，

250
00:08:59,970 --> 00:09:01,170
0,240 240,330 330,780 780,1080 1080,1200
that is also covered by

251
00:09:01,170 --> 00:09:02,220
0,150 150,540 600,780 780,960 960,1050
this model,| so this is
|这是一个威胁模型，

252
00:09:02,220 --> 00:09:03,360
0,180 180,390 390,690 690,870 870,1140
a threat model,| that is
|给了对手很大的权力，

253
00:09:03,570 --> 00:09:05,460
0,270 270,720 720,1440 1470,1830 1830,1890
a very very gives a

254
00:09:05,460 --> 00:09:06,690
0,270 270,330 330,630 630,780 780,1230
lot of power to the

255
00:09:06,690 --> 00:09:07,560
0,600
adversary,|
|

256
00:09:08,060 --> 00:09:09,350
0,390 390,450 450,660 660,900 900,1290
{it,covers} a lot of standard
它涵盖了许多标准攻击。

257
00:09:09,350 --> 00:09:12,260
0,570 1050,1800 1920,2310 2310,2490 2490,2910
attacks.| And and you know
|首先观察到的是，

258
00:09:12,260 --> 00:09:13,070
0,180 180,390 390,510 510,720 720,810
the first thing sort of

259
00:09:13,070 --> 00:09:14,960
0,870 870,930 930,1110 1110,1590 1590,1890
observed,| you know again that
|再一次， SUNDR 是这样的，

260
00:09:14,960 --> 00:09:19,490
0,630 900,1560 2370,3030 3060,3870 3870,4530
{ - -} SUNDR [place]

261
00:09:19,640 --> 00:09:21,800
0,390 390,930 1020,1680 1770,2070 2070,2160
is that,| {} instead of
|实际上不是

262
00:09:21,800 --> 00:09:22,610
0,390 390,510 510,600 600,750 750,810
actually you know sort of|
|

263
00:09:22,610 --> 00:09:24,260
0,600 600,690 690,960 960,1290 1290,1650
maintaining the whole file system
在文件服务器上维护整个文件系统，

264
00:09:24,260 --> 00:09:25,970
0,240 240,330 330,600 600,1140 1440,1710
on the file server, {}|
|

265
00:09:25,970 --> 00:09:27,140
0,330 330,570 570,900 900,1080 1080,1170
the file server is as
文件服务器尽可能简单，

266
00:09:27,140 --> 00:09:29,390
0,330 330,450 450,1050 1530,1740 1740,2250
simple as possible,| {} and
|文件服务器非常类似于 Pedal ，

267
00:09:29,390 --> 00:09:31,220
0,120 120,540 540,1290 1290,1500 1500,1830
in fact {you,know,the} file servers

268
00:09:31,220 --> 00:09:32,240
0,240 240,450 450,630 630,900 900,1020
very much like almost like

269
00:09:32,240 --> 00:09:33,770
0,450 690,960 960,1170 1170,1440 1440,1530
Pedal,| {} it's almost like
|它几乎就像一个块设备。

270
00:09:33,770 --> 00:09:34,910
0,90 90,420 420,930 930,1080 1080,1140
a block device with a

271
00:09:34,910 --> 00:09:36,180
0,150 150,270 270,690
little bit more.|
|

272
00:09:39,120 --> 00:09:40,260
0,150 150,360 360,540 540,840 840,1140
So there's a central place
所以有一个中央位置，所有块都存储在那里，

273
00:09:40,260 --> 00:09:41,700
0,210 210,360 360,750 870,1350 1350,1440
where all the blocks are

274
00:09:41,700 --> 00:09:45,060
0,480 1500,2220 2220,3000 3000,3210 3210,3360
stored,| {} and {} but
|但是客户端真正实现了文件系统，

275
00:09:45,060 --> 00:09:46,590
0,450 450,870 870,1230 1230,1290 1290,1530
{the,clients} really implement the file

276
00:09:46,590 --> 00:09:48,360
0,450 450,870 1020,1260 1260,1500 1500,1770
system,| so it's not really
|所以它不是客户端发送、创建文件，

277
00:09:48,360 --> 00:09:49,740
0,90 90,210 210,390 390,840 900,1380
you know that the client

278
00:09:49,740 --> 00:09:51,930
0,660 780,1170 1170,1350 1350,1740 1740,2190
sends, create for file actually,|
|

279
00:09:52,360 --> 00:09:53,650
0,210 210,450 450,900 900,1080 1080,1290
{you,know} sends blocks and reads
从数据块服务器发送数据块和读取数据块，

280
00:09:53,650 --> 00:09:54,940
0,660
blocks,

281
00:09:55,430 --> 00:09:58,940
0,750 750,840 840,1110 1110,1830 2100,3510
from the block server,| and
|通过读或写来构建数据块，

282
00:09:59,480 --> 00:10:01,250
0,660 660,1290 1290,1410 1410,1530 1530,1770
basically constructs you know from

283
00:10:01,250 --> 00:10:02,000
0,60 60,360 360,480 480,630 630,750
the blocks with reads or

284
00:10:02,000 --> 00:10:03,590
0,330 330,780 780,1020 1020,1440 1440,1590
writes,| {you,know,its} own view of
|它自己对文件系统的看法，

285
00:10:03,590 --> 00:10:05,870
0,270 270,540 540,960 960,1410 1500,2280
the file system,| and {serve,you,know}
|并服务于文件系统操作，

286
00:10:05,900 --> 00:10:07,520
0,120 120,390 390,690 690,1230 1230,1620
a file system operations,| basically
|直接对于客户端，

287
00:10:07,520 --> 00:10:08,210
0,120 120,210 210,510 510,630 630,690
on the straight on the

288
00:10:08,210 --> 00:10:10,160
0,540 780,1080 1080,1290 1290,1680 1680,1950
client| and so here really,
|所以在这里，我们创建 f ，读取 f 等。

289
00:10:10,160 --> 00:10:13,310
0,480 630,1470 2040,2190 2190,2310 2310,3150
we create you know f,

290
00:10:13,520 --> 00:10:16,240
0,540 540,960 990,1680
read f, etc.|
|

291
00:10:16,430 --> 00:10:18,080
0,270 270,540 540,780 780,1200 1200,1650
So very very similar to
所以非常类似于 Frangipani ，

292
00:10:18,170 --> 00:10:20,120
0,90 90,330 330,690 1110,1860 1860,1950
the {Frangipani -},| except the
|除了 Frangipani 最大的不同之处在于，

293
00:10:20,120 --> 00:10:21,770
0,180 180,510 510,810 810,1500 1500,1650
big difference of Frangipani is,|
|

294
00:10:21,770 --> 00:10:23,180
0,210 210,660 660,780 780,960 960,1410
that Pedal and all clients
Pedal 和所有客户端是完全信任的，

295
00:10:23,180 --> 00:10:25,190
0,90 90,480 480,1020 1350,1680 1680,2010
were completely trusted,| and in
|在这种情况下，

296
00:10:25,190 --> 00:10:26,600
0,180 180,660 840,1050 1050,1140 1140,1410
this setting,| {} the clients
|客户端不受信任，

297
00:10:26,600 --> 00:10:28,730
0,90 90,300 300,870 1080,1770 1770,2130
are not trusted,| and {}
|而文件服务器，

298
00:10:28,730 --> 00:10:30,650
0,180 180,390 390,1020 1020,1710 1710,1920
the file servers,| {} it
|它也可以是不可信的。

299
00:10:30,650 --> 00:10:32,540
0,210 210,540 540,960 960,1530 1650,1890
can be also, {} is

300
00:10:32,540 --> 00:10:33,580
0,210 210,390 390,840
also not trusted.|
|

301
00:10:34,140 --> 00:10:34,980
0,540
Okay?|
好的?|

302
00:10:38,510 --> 00:10:40,360
0,60 60,1560

303
00:10:41,410 --> 00:10:43,360
0,300 300,450 450,720 780,1620 1620,1950
Okay, so the paper focused
好的，所以这篇论文集中在一些安全属性上，

304
00:10:43,360 --> 00:10:45,490
0,90 90,150 150,1680 1740,2040 2040,2130
on a particular set of

305
00:10:45,490 --> 00:10:49,600
0,420 420,1200 1440,2190 2760,3270 3270,4110
security properties,| {} and {}
|重点是，

306
00:10:49,630 --> 00:10:51,420
0,600 600,960 960,1530
{focus,is} really on,|
|

307
00:10:54,660 --> 00:10:55,890
0,210 210,330 330,630 630,780 780,1230
{} the focus is on
重点是所谓的完整性属性，

308
00:10:55,920 --> 00:10:58,500
0,300 300,720 720,1170 1170,1920
what's called integrity properties,|
|

309
00:11:00,550 --> 00:11:02,950
0,390 390,810 810,1410 1410,1500 1500,2400
and in contrast to confidentiality,|
与保密性相反，|

310
00:11:03,040 --> 00:11:05,470
0,840 840,1380 1380,1890 1890,2220 2220,2430
confidentiality about protecting data from
保密性关于保护数据，

311
00:11:05,470 --> 00:11:06,280
0,120 120,240 240,360 360,660 660,810
them,| so that nobody else
|让别人看不到它，

312
00:11:06,280 --> 00:11:08,020
0,120 120,330 330,570 870,1260 1260,1740
can read it,| {} integrity
|完整性只是确保系统结构是正确的，

313
00:11:08,020 --> 00:11:09,670
0,210 210,360 360,840 840,1080 1080,1650
is just ensuring that the

314
00:11:09,730 --> 00:11:12,130
0,390 390,1350 1350,1500 1500,2040 2040,2400
system structure is correct,| and
|对数据非法修改被检测到，

315
00:11:12,130 --> 00:11:15,370
0,480 510,1590 1800,2250 2250,2670 2670,3240
the modifications, {} illegal modifications

316
00:11:15,370 --> 00:11:16,150
0,90 90,180 180,450 450,450 450,780
to the data are being

317
00:11:16,150 --> 00:11:17,440
0,510 600,720 720,990 990,1080 1080,1290
detected,| and whether the data
|无论数据是否公开，

318
00:11:17,440 --> 00:11:18,460
0,60 60,390 390,450 450,660 660,1020
is public or not public,|
|

319
00:11:18,460 --> 00:11:19,210
0,90 90,300 300,450 450,630 630,750
you know that sort of
这有点超出了这里的重点。

320
00:11:19,210 --> 00:11:20,740
0,450 450,690 750,1110 1110,1380
besides the point here.|
|

321
00:11:21,330 --> 00:11:22,770
0,570 840,1080 1080,1230 1230,1290 1290,1440
{} To make a little
说得更具体一点，

322
00:11:22,770 --> 00:11:24,270
0,120 120,330 330,900 900,1020 1020,1500
bit more concrete,| you know
|在我们的脑海中发生的事情是，

323
00:11:24,270 --> 00:11:25,650
0,330 330,510 510,660 720,1200 1200,1380
there sort of, the thing

324
00:11:25,650 --> 00:11:26,940
0,300 300,630 630,690 690,750 750,1290
that happens in our minds

325
00:11:27,120 --> 00:11:27,930
0,330 330,450 450,570 570,630 630,810
is,| we have a set
|我们有开发人员，

326
00:11:27,930 --> 00:11:30,020
0,240 600,870 870,1020 1020,1650
of, we have developers,|
|

327
00:11:32,410 --> 00:11:35,740
0,1560 1590,1770 1770,2340 2880,3120 3120,3330
{you,know} {we,have} dev1, {you,know} {dev2
我们有 dev1 ， dev2 ，

328
00:11:35,740 --> 00:11:38,500
0,570 990,1200 1200,1440 1440,2100 2220,2760
-},| they may share some
|他们可能会共用一些机器，

329
00:11:39,010 --> 00:11:41,170
0,810 840,1260 1260,1740 1740,1830 1830,2160
machine,| that contains the source
|包含某个项目的源代码库，

330
00:11:41,170 --> 00:11:44,350
0,330 330,1110 1110,1290 1290,1620 2850,3180
code repository of some source

331
00:11:44,350 --> 00:11:46,390
0,60 60,600 600,1410 1410,1500 1500,2040
of {} project,| the developers
|开发人员为这个项目进行合作，

332
00:11:46,390 --> 00:11:48,040
0,90 90,480 480,1080 1080,1440 1470,1650
{you,know} are collaborating on that

333
00:11:48,040 --> 00:11:51,700
0,660 1050,1620 1620,2370 2580,3420 3420,3660
project,| {} and {} and
|所以把这个当作一个例子，

334
00:11:51,700 --> 00:11:52,840
0,210 210,420 420,690 690,930 930,1140
so think about this as

335
00:11:52,840 --> 00:11:54,580
0,540 540,1020 1020,1110 1110,1350 1350,1740
a example,| the paper mentions
|论文提到的是，

336
00:11:54,580 --> 00:11:56,350
0,420 420,960 990,1320 1320,1590 1590,1770
is,| {} {in,the,paper}, maybe this
|在论文中，这个是开发机器，

337
00:11:56,350 --> 00:11:58,420
0,150 150,480 660,1350 1350,1860 1860,2070
is the development machines,| and
|是一个 Debian Linux 服务器，

338
00:11:58,420 --> 00:12:00,790
0,60 60,630 630,1350 1560,1950 1950,2370
the server for a Debian

339
00:12:00,790 --> 00:12:03,940
0,600 1710,2610 2670,2880 2880,2970 2970,3150
Linux,| and what they want
|他们想要防御的是后门，

340
00:12:03,940 --> 00:12:06,400
0,240 240,630 630,900 900,1380 1710,2460
to {} defend against is

341
00:12:06,400 --> 00:12:08,520
0,750 1020,2040
trapdoor,| trapdoor,
|后门，软件中的后门。

342
00:12:11,900 --> 00:12:12,710
0,180 180,450 450,660 660,750 750,810
{you,know} {trapdoor -} in the

343
00:12:12,710 --> 00:12:16,440
0,570
software.|
|

344
00:12:16,890 --> 00:12:19,040
0,330 330,810 1140,1860
So the {}
所以攻击者接管了控制权，

345
00:12:19,380 --> 00:12:21,090
0,780 780,840 840,1530 1530,1620 1620,1710
{you,know} the attacker you know

346
00:12:21,090 --> 00:12:22,770
0,240 240,600 600,1080 1080,1350 1350,1680
takes over control,| breaks into
|侵入包含源代码库的机器，

347
00:12:22,770 --> 00:12:24,600
0,420 450,810 810,960 960,1350 1350,1830
the machine, that contains the

348
00:12:24,720 --> 00:12:28,110
0,420 420,1080 1110,1950 1950,2820 2850,3390
source repo,| modifies the software
|修改软件，

349
00:12:28,110 --> 00:12:30,270
0,570 810,1500 1500,1650 1650,1860 1860,2160
[],| and then it's going
|然后软件部署出来，

350
00:12:30,270 --> 00:12:31,050
0,90 90,150 150,300 300,600 600,780
out of that software gets

351
00:12:31,050 --> 00:12:32,910
0,660 690,930 930,1260 1260,1590 1590,1860
deployed,| {you,know,for} example Debian Linux
|例如， Debian Linux 被部署到很多机器上，

352
00:12:32,910 --> 00:12:33,960
0,180 180,540 540,630 630,990 990,1050
gets deployed to lots of

353
00:12:33,960 --> 00:12:37,080
0,600 1020,1800 1800,2550 2580,2970 2970,3120
machines,| and {} now the
|现在攻击者控制了这些机器，

354
00:12:37,080 --> 00:12:40,050
0,480 480,690 690,1380 1530,2400 2430,2970
attacker has control over those

355
00:12:40,050 --> 00:12:41,760
0,510 540,1050 1050,1140 1140,1290 1290,1710
machines,| because it's gonna exploit
|因为它会利用这个后门。

356
00:12:41,760 --> 00:12:42,720
0,270 270,810
the trapdoor.|
|

357
00:12:43,210 --> 00:12:45,130
0,480 750,1290 1290,1380 1380,1650 1650,1920
{} The the paper talks
论文谈到了这个攻击，

358
00:12:45,130 --> 00:12:47,410
0,210 210,510 540,1200 1230,1470 1470,2280
about this attack,| this particular
|2003 年 Debian Linux 的这个特定实例，

359
00:12:47,410 --> 00:12:49,930
0,570 570,1020 1050,1500 1500,1920 1920,2520
instance in Debian Linux in

360
00:12:49,960 --> 00:12:54,400
0,510 630,3630 3840,3960 3960,4320 4320,4440
2003,| where the attack was
|攻击能够危害

361
00:12:54,400 --> 00:12:55,900
0,240 240,480 480,1260 1260,1350 1350,1500
able to compromise| you know
|开发服务器或集群，

362
00:12:55,900 --> 00:12:58,180
0,270 270,1140 1170,1590 1590,2220 2220,2280
the development {} server or

363
00:12:58,180 --> 00:13:00,970
0,570 930,1470 1470,2070 2160,2670 2670,2790
cluster,| {} in recovering from
|从这种攻击中恢复非常痛苦，

364
00:13:00,970 --> 00:13:02,140
0,150 150,330 330,390 390,750 750,1170
these kinds of attacks very

365
00:13:02,140 --> 00:13:04,090
0,690 780,1140 1140,1290 1290,1560 1560,1950
painful,| {} in fact, {in,2003
|事实上，在 2003 年，他们报告说，

366
00:13:04,090 --> 00:13:05,530
0,360 360,780 780,900 900,1020 1020,1440
-} you know they report,|
|

367
00:13:05,530 --> 00:13:08,260
0,210 630,1350 1380,2100 2100,2280 2280,2730
that the {Debian,Linux} which froze
Debian Linux 开发冻结了几天，

368
00:13:08,260 --> 00:13:09,790
0,480 480,720 720,780 780,1050 1050,1530
development for a couple days,|
|

369
00:13:09,790 --> 00:13:10,750
0,180 180,480 480,570 570,720 720,960
and while they were trying
当他们试图找出

370
00:13:10,750 --> 00:13:13,030
0,90 90,450 450,810 1080,1860 1890,2280
to sort out| which parts
|源代码库中的哪些部分仍然是正确的，

371
00:13:13,030 --> 00:13:14,020
0,90 90,210 210,540 540,900 900,990
of their source repo was

372
00:13:14,020 --> 00:13:15,700
0,570 600,1050 1050,1170 1170,1380 1380,1680
still correct,| and which parts
|以及哪些部分被攻击者修改了，

373
00:13:15,700 --> 00:13:17,170
0,210 210,720 720,1230 1230,1350 1350,1470
were actually modified by the

374
00:13:17,170 --> 00:13:19,840
0,510 1080,1380 1380,1800 1800,2130 2130,2670
attacker,| and these attacks happens
|这些攻击会周期性地发生，

375
00:13:19,840 --> 00:13:22,540
0,930 930,1320 1350,1530 1560,2070 2070,2700
periodically,| I think last year,|
|我想在去年，|

376
00:13:22,540 --> 00:13:23,530
0,150 150,390 390,570 570,630 630,990
{you,know} Ubuntu had a similar
Ubuntu 在 2018 年或 2019 年也有类似的问题，

377
00:13:23,530 --> 00:13:26,020
0,210 210,270 270,810 1320,2130 2340,2490
type of problem {in,in} 2018

378
00:13:26,020 --> 00:13:28,510
0,840 840,1680 1680,1890 1890,2220 2220,2490
or 2019,| {I,can't} remember {exactly
|我记不清了，

379
00:13:28,510 --> 00:13:29,800
0,330 510,870 870,1080 1080,1140 1140,1290
-},| {} and it was
|这是一个类似的案例，

380
00:13:29,800 --> 00:13:32,500
0,60 60,450 450,780 780,1290 1530,2700
a similar case,| where {
|其中一台核心开发服务器被入侵，

381
00:13:32,500 --> 00:13:33,940
0,270 360,720 720,810 810,1110 1110,1440
-} one of the core

382
00:13:33,940 --> 00:13:36,790
0,660 900,1260 1260,1920 1980,2370 2370,2850
development servers was broken into,|
|

383
00:13:37,440 --> 00:13:38,610
0,330 330,690 690,870 870,1080 1080,1170
you know they have to
他们必须解决，

384
00:13:38,610 --> 00:13:42,150
0,480 480,870 1110,1590 1590,2070 2070,3540
sort out,| {} what {}
|查找哪些软件哪些文件被感染，

385
00:13:42,480 --> 00:13:44,580
0,390 390,900 900,1410 1410,1740 1740,2100
see which software which files

386
00:13:44,580 --> 00:13:46,590
0,150 150,840 840,1350 1410,1770 1770,2010
got infected| and affected by
|受到入侵的影响。

387
00:13:46,620 --> 00:13:47,280
0,360
{that,breaking}.|
|

388
00:13:48,510 --> 00:13:49,860
0,660 840,990 990,1140 1140,1260 1260,1350
Okay, so that's sort of
好的，这就是论文的背景，

389
00:13:49,860 --> 00:13:52,710
0,90 90,420 420,540 540,1950 2280,2850
the setting of {the,paper}, {}|
|

390
00:13:52,710 --> 00:13:53,520
0,180 180,360 360,600 600,660 660,810
and I'm going to make
我要说得更具体一点，

391
00:13:53,520 --> 00:13:54,690
0,60 60,270 270,390 390,630 630,1170
a little bit more concrete,|
|

392
00:13:54,720 --> 00:13:55,650
0,510 510,690 690,780 780,870 870,930
a little bit of a
一个小例子，

393
00:13:55,650 --> 00:13:57,510
0,240 240,810 900,1140 1140,1500 1500,1860
toy example,| {} to help
|为了帮助我们通过技术，

394
00:13:57,510 --> 00:13:58,920
0,420 420,510 510,720 720,990 990,1410
us you know go through

395
00:13:58,920 --> 00:14:00,660
0,420 450,1020 1020,1350 1350,1470 1470,1740
the techniques,| that this paper
|这篇论文所使用的。

396
00:14:00,660 --> 00:14:01,620
0,270 270,810
actually uses.|
|

397
00:14:03,420 --> 00:14:05,400
0,690 930,1320 1320,1380 1380,1830 1830,1980
{} So the example that
所以我要用的例子，

398
00:14:05,400 --> 00:14:07,770
0,90 90,270 270,840 1410,1800 1800,2370
I'm gonna use,| partially inspired
|部分灵感来自 6.858 ，

399
00:14:07,770 --> 00:14:09,780
0,540 990,1350 1350,1590 1590,1770 1770,2010
by {} {6.858 - -

400
00:14:09,780 --> 00:14:12,660
0,480 660,1140 1140,1860 1860,2280 2280,2880
-},| {} is, let's say
|假设我们有一个文件系统，

401
00:14:12,690 --> 00:14:13,350
0,120 120,360 360,480 480,600 600,660
you know we have a

402
00:14:13,350 --> 00:14:16,980
0,270 270,870 1410,2040 2070,2700 2850,3630
file system,| {} there's, you're
|你在做，

403
00:14:16,980 --> 00:14:18,020
0,330 330,720
doing the,|
|

404
00:14:18,880 --> 00:14:20,290
0,180 180,240 240,480 480,840 840,1410
and the file system contains|
文件系统包含|

405
00:14:20,290 --> 00:14:21,280
0,90 90,210 210,330 330,630 630,990
you know the source code
使用 6.858 zoobar 应用程序的源代码，

406
00:14:21,280 --> 00:14:24,130
0,360 360,540 540,1080 1080,1590 1800,2850
for this application of using

407
00:14:24,130 --> 00:14:26,950
0,150 150,420 420,600 810,1380 1590,2820
{} {6.858 -} zoobar {},|
|

408
00:14:26,950 --> 00:14:29,350
0,750 780,1320 1320,1770 1770,1950 1950,2400
and {zoobar -} is a
而 zoobar 是一个虚拟银行类型的应用程序，

409
00:14:29,380 --> 00:14:30,850
0,210 210,300 300,570 570,990 990,1470
sort of a virtual bank

410
00:14:31,180 --> 00:14:34,060
0,390 390,930 930,1470 1650,2250 2340,2880
type application,| where {} users
|系统的用户，

411
00:14:34,060 --> 00:14:35,980
0,90 90,180 180,930 960,1650 1650,1920
of the system,| registered users
|系统的注册用户可以相互转移 zoobar ，

412
00:14:35,980 --> 00:14:37,540
0,90 90,180 180,540 540,840 870,1560
of the system can transfer

413
00:14:37,540 --> 00:14:38,650
0,180 180,510 510,630 630,780 780,1110
{zoobars -} to each other,|
|

414
00:14:39,100 --> 00:14:39,700
0,180 180,300 300,390 390,540 540,600
and so it has a
它有一个名为 auth.py 的文件，进行身份验证，

415
00:14:39,700 --> 00:14:41,860
0,660 840,1410 1410,1710 1710,1950 1950,2160
file called {auth.py - -},

416
00:14:41,860 --> 00:14:45,820
0,600 1020,1650 1650,2940 3360,3750 3750,3960
{you,know} does authentication,| and have
|有一个影响银行的文件， bank.py 。

417
00:14:45,820 --> 00:14:46,840
0,60 60,420 420,570 570,750 750,1020
a file that {basically -}

418
00:14:46,840 --> 00:14:49,930
0,210 210,690 1110,1980 2010,2490 2490,3090
{you,know} influence bank, {bank.py -}.|
|

419
00:14:51,170 --> 00:14:54,650
0,720 1080,1800 2100,2670 2670,2940 2940,3480
And, {} so, {} let's
所以，让我们考虑这样的情况，

420
00:14:54,650 --> 00:14:56,870
0,480 480,570 570,900 900,1500 1560,2220
consider the case| where {}
|有一组新的开发人员， A B C ，

421
00:14:56,870 --> 00:14:57,560
0,210 210,330 330,360 360,510 510,690
{you,know} have a new set

422
00:14:57,560 --> 00:15:00,290
0,90 90,510 510,1410 1680,2310 2310,2730
of developers, {A,B,and,C},| and they
|他们决定增加 zoobar 的可用性，

423
00:15:00,290 --> 00:15:02,120
0,390 390,540 540,630 630,990 990,1830
decided that they wanted to

424
00:15:02,120 --> 00:15:04,640
0,540 540,1110 1140,1860 1860,2130 2160,2520
increase the usability of {zoobar

425
00:15:04,640 --> 00:15:06,650
0,420 570,960 960,1410 1410,1530 1530,2010
-},| actually deployed for real
|真正地部署，使其成为现实，

426
00:15:06,860 --> 00:15:08,960
0,810 900,1050 1050,1170 1170,1500 1500,2100
and make it real,| basically
|他们决定按如下方式划分工作，

427
00:15:08,960 --> 00:15:09,950
0,60 60,240 240,420 420,840 840,990
you know they decide to

428
00:15:09,950 --> 00:15:11,300
0,300 300,390 390,570 570,660 660,1350
divide the work as follows,|
|

429
00:15:11,480 --> 00:15:12,780
0,510 510,510
{} A,
A 将修改 auth.py

430
00:15:13,690 --> 00:15:15,970
0,240 240,450 450,600 600,1560 1590,2280
{} is gonna modify {}

431
00:15:16,000 --> 00:15:17,680
0,360 360,780 780,1260
{auth.py - -}|
|

432
00:15:20,560 --> 00:15:23,220
0,330 330,1020 1020,1830
{} to support
以支持 MIT 证书，

433
00:15:24,290 --> 00:15:26,480
0,390 390,930 930,1410 1740,2070 2070,2190
MIT certificates or {MIT -}

434
00:15:26,480 --> 00:15:27,720
0,540
certs,|
|

435
00:15:28,630 --> 00:15:32,020
0,360 360,900 900,1260 1680,2460 2730,3390
kerberos tickets or certificates,| and
kerberos ticket 或证书，|有了这个想法，

436
00:15:32,020 --> 00:15:33,910
0,180 180,270 270,570 570,990 990,1890
with the idea that, {}|
|

437
00:15:33,910 --> 00:15:35,050
0,330 330,420 420,600 600,810 810,1140
what we're gonna do is,|
我们要做的是，|

438
00:15:35,050 --> 00:15:35,920
0,480

439
00:15:36,220 --> 00:15:38,230
0,360 360,810 810,960 960,1470 1500,2010
{ -} we're gonna auth.py
我们将修改 auth.py ，

440
00:15:38,230 --> 00:15:39,040
0,90 90,210 210,270 270,330 330,810
is going to be modified,|
|

441
00:15:39,040 --> 00:15:41,170
0,120 120,270 270,840 840,1440 1440,2130
so that only legit {}
只有合法的 MIT 社区成员

442
00:15:41,200 --> 00:15:43,840
0,990 1290,1890 1890,2220 2220,2490 2490,2640
MIT community members| actually can
|才能登录到文件服务器，

443
00:15:43,840 --> 00:15:45,280
0,300 300,600 600,690 690,900 900,1440
log into the file server,|
|

444
00:15:45,520 --> 00:15:46,960
0,390 390,570 570,1020 1020,1260 1260,1440
{} file server or into
文件服务器或到 zoobar 中，

445
00:15:46,960 --> 00:15:48,250
0,180 180,570 630,960 960,1050 1050,1290
{zoobar -},| {and,sort,of} we actually
|我们知道它到底是谁，

446
00:15:48,250 --> 00:15:49,990
0,480 480,960 960,1080 1080,1350 1350,1740
know who it actually really

447
00:15:49,990 --> 00:15:51,760
0,360 420,870 870,1080 1080,1200 1200,1770
is,| {} that is associated
|与特定的 MIT 证书相关联。

448
00:15:51,760 --> 00:15:53,320
0,150 150,330 330,720 720,1050 1050,1560
with that particular MIT certificate.|
|

449
00:15:53,920 --> 00:15:54,820
0,270 270,660 660,750 750,840 840,900
And then you know to
然后为了让它变得更有用一点，

450
00:15:54,820 --> 00:15:55,360
0,120 120,150 150,300 300,390 390,540
make a little bit more

451
00:15:55,360 --> 00:15:56,560
0,570 570,630 630,750 750,1050 1050,1200
useful,| you know B can
|B 可以修改 bank.py ，

452
00:15:56,560 --> 00:15:58,150
0,390 390,780 780,870 870,1170 1170,1590
actually modify the {bank.py -}|
|

453
00:15:58,150 --> 00:16:01,270
0,480 480,840 1620,1860 1860,2610 2670,3120
{to,actually} {link,it} {you,know} to {}
将它链接到 TechCash 的 cash 标记。

454
00:16:01,270 --> 00:16:02,120
0,330 330,780
cash tag

455
00:16:03,620 --> 00:16:08,240
0,240 240,1140 2760,3090 3090,3750 3900,4620
for TechCash.| And so, {}
|所以，这个想法，

456
00:16:08,240 --> 00:16:09,200
0,180 180,240 240,360 360,660 660,960
you know the idea that|
|

457
00:16:09,200 --> 00:16:10,550
0,480 480,750 750,900 900,1170 1170,1350
basically we can actually use
我们可以使用 zoobar 系统来做到这个，

458
00:16:10,550 --> 00:16:12,620
0,120 120,690 690,1020 1530,1710 1710,2070
this zoobar system do that,|
|

459
00:16:12,620 --> 00:16:13,310
0,210 210,300 300,450 450,630 630,690
like we can use the
比如我们可以使用 zoobar 系统来转账，

460
00:16:13,310 --> 00:16:14,540
0,180 180,330 330,660 660,810 810,1230
{zoobar -} system to actually

461
00:16:14,540 --> 00:16:16,790
0,360 690,1020 1020,1560 1560,2160 2160,2250
{ -} transfer money,| you
|真正的钱，而不是 zoobar ，

462
00:16:16,790 --> 00:16:18,530
0,330 330,960 990,1200 1200,1470 1470,1740
know {} real money instead

463
00:16:18,530 --> 00:16:20,750
0,150 150,630 690,1470 1620,2070 2070,2220
of zoobars,| between users that
|在该服务器注册的用户之间，

464
00:16:20,750 --> 00:16:23,780
0,120 120,840 870,1890 1920,2490 2490,3030
are registered {} with {}

465
00:16:23,990 --> 00:16:25,880
0,720 1050,1320 1320,1620 1620,1680 1680,1890
{this,servers},| that {this,sounds} of course
|当然，这听起来像是一个疯狂的想法，

466
00:16:25,880 --> 00:16:27,110
0,120 120,180 180,510 510,870 870,1230
like a crazy idea,| you
|你并不会真的这么做，

467
00:16:27,110 --> 00:16:28,010
0,180 180,360 360,480 480,630 630,900
don't really do it,| but
|但这并不是完全荒谬的，

468
00:16:28,160 --> 00:16:29,960
0,270 270,390 390,750 750,1380 1410,1800
it's not completely ridiculous, {}|
|

469
00:16:29,960 --> 00:16:30,920
0,120 120,210 210,750 750,840 840,960
you know, because you know
因为 auth.py 会检查是谁，

470
00:16:30,920 --> 00:16:33,320
0,390 720,1380 1380,1650 1650,2070 2070,2400
the auth.py really checks who

471
00:16:33,320 --> 00:16:35,090
0,180 180,600 600,870 990,1650 1650,1770
would actually is,| based on
|基于 MIT 证书，

472
00:16:35,090 --> 00:16:36,950
0,90 90,480 480,1080 1380,1620 1620,1860
the MIT certificate,| and so
|也许这不是不合理，

473
00:16:36,950 --> 00:16:38,660
0,240 240,360 360,540 540,1260 1260,1710
maybe it's not unreasonable that|
|

474
00:16:38,660 --> 00:16:40,010
0,90 90,210 210,750 750,990 990,1350
we could connect {you,know} {bank.py
我们可以将 bank.py 连接到 TechCash 。

475
00:16:40,010 --> 00:16:41,540
0,150 150,600 600,930 930,1290 1290,1530
- -} to actually {TechCash

476
00:16:41,540 --> 00:16:42,060
0,450
-}.|
|

477
00:16:43,750 --> 00:16:45,820
0,210 210,720 720,1230 1230,1800 1830,2070
And then basically C in
在我们的场景中， C 是那个人，

478
00:16:45,820 --> 00:16:47,440
0,570 750,1260 1260,1440 1440,1560 1560,1620
our scenario is going to

479
00:16:47,440 --> 00:16:48,730
0,150 150,300 300,810 810,1080 1080,1290
be that person,| that's actually
|将会部署软件，

480
00:16:48,730 --> 00:16:49,870
0,120 120,210 210,630 630,720 720,1140
going to deploy the software,|
|

481
00:16:53,880 --> 00:16:55,860
0,420 420,1050 1140,1560 1560,1800 1800,1980
find machine, takes {software -}
寻找机器，安装软件，运行软件，

482
00:16:55,860 --> 00:16:57,030
0,330 330,450 450,720 720,960 960,1170
installs it and runs it,|
|

483
00:16:57,390 --> 00:16:59,220
0,180 180,1290 1290,1500 1500,1740 1740,1830
and {} it opens it
它向 MIT 社区开放。

484
00:16:59,220 --> 00:17:00,330
0,150 150,210 210,330 330,630 630,1110
up to the MIT community.|
|

485
00:17:00,860 --> 00:17:03,620
0,810 1470,1980 1980,2340 2340,2430 2430,2760
Now, {} in the case,|
现在，在这种情况下，|

486
00:17:03,620 --> 00:17:05,600
0,120 120,420 420,1200 1200,1740 1860,1980
now let's consider,| what you
现在让我们考虑一下，|可能发生什么，什么可能会出错，

487
00:17:05,600 --> 00:17:06,680
0,210 240,510 510,600 600,930 930,1080
know what could happen, what

488
00:17:06,680 --> 00:17:09,050
0,150 150,330 330,870 1170,1650 1650,2370
could go wrong,| {} {if,actually}
|如果文件服务器受到了威胁，

489
00:17:09,050 --> 00:17:10,760
0,300 300,570 570,840 840,990 990,1710
the file server was compromised,|
|

490
00:17:10,760 --> 00:17:12,380
0,150 150,540 540,780 780,1350
and so was byzantine.|
所以是拜占庭式的。|

491
00:17:14,690 --> 00:17:16,260
0,330

492
00:17:16,640 --> 00:17:18,620
0,570 780,1140 1140,1800 1800,1890 1890,1980
Well, the obvious you know
好的，很明显的一些问题，

493
00:17:18,620 --> 00:17:19,790
0,390 390,450 450,720 720,780 780,1170
problems,| a couple of obvious
|有几个明显的问题，可能会有糟糕的结果，

494
00:17:19,790 --> 00:17:21,830
0,630 630,750 750,1020 1050,1560 1560,2040
problems you know bad outcomes

495
00:17:21,830 --> 00:17:27,580
0,660 1590,2430 2430,2730 2730,3180
possible,| let's consider them,|
|让我们来考虑一下，|

496
00:17:27,820 --> 00:17:29,680
0,540 540,840 840,1080 1080,1560 1560,1860
{you,know} that outcome one,| which
结果 1 ，|这是我们应该谈论的一件事，

497
00:17:29,680 --> 00:17:30,490
0,90 90,180 180,330 330,480 480,810
is the one thing we

498
00:17:30,490 --> 00:17:31,570
0,240 240,330 330,690 690,990 990,1080
should be talking about,| and
|同样在前面的例子中，

499
00:17:31,570 --> 00:17:32,950
0,360 360,450 450,510 510,780 780,1380
also in the previous examples,|
|

500
00:17:33,250 --> 00:17:35,830
0,210 210,570 570,1440 1440,1830 1860,2580
it is basically the adversary
对手把任意代码给 C ，

501
00:17:35,830 --> 00:17:37,300
0,270 270,810 810,1050 1050,1140 1140,1470
gives arbitrary code to C,|
|

502
00:17:38,540 --> 00:17:43,100
0,1200 1230,1980
{} adversary
对手提供自己的代码给 C ，

503
00:17:46,320 --> 00:17:47,760
0,570
provides

504
00:17:48,080 --> 00:17:51,280
0,300 300,840 1740,1920 1920,2370
own code to C,|
|

505
00:17:53,430 --> 00:17:54,450
0,420 420,570 570,690 690,840 840,1020
and you know that sort
这有点，

506
00:17:54,450 --> 00:17:56,220
0,510 600,960 960,1320 1320,1590 1590,1770
of| {} maybe that adversary
|也许对手有点微妙或聪明，

507
00:17:56,220 --> 00:17:58,650
0,600 600,1530 1590,1980 1980,2280 2280,2430
slightly {} subtle about it

508
00:17:58,650 --> 00:17:59,970
0,510 540,810 810,1110 1110,1230 1230,1320
or clever about it,| you
|让它变得有点难以辨认，

509
00:17:59,970 --> 00:18:01,710
0,180 180,690 1380,1650 1650,1710 1710,1740
know whatever makes it a

510
00:18:01,710 --> 00:18:02,640
0,150 150,270 270,450 450,540 540,930
little bit hard to spot,|
|

511
00:18:02,640 --> 00:18:04,410
0,180 180,720 720,900 900,1530 1530,1770
then actually {} modified {auth.py
修改了 auth.py ，

512
00:18:04,410 --> 00:18:06,600
0,180 180,960 1530,1800 1800,1890 1890,2190
- -},| {for,example} to delete
|例如删除 MIT 证书，

513
00:18:06,600 --> 00:18:08,490
0,60 60,420 420,1050 1410,1740 1740,1890
the MIT certificates,| but they're
|但是对于 C 来说没有办法检查，

514
00:18:08,490 --> 00:18:09,780
0,600 600,690 690,840 840,1020 1020,1290
basically you know there's really

515
00:18:09,780 --> 00:18:10,650
0,180 180,420 420,540 540,750 750,870
no way for C to

516
00:18:10,650 --> 00:18:12,540
0,510 750,1140 1140,1560 1560,1800 1800,1890
check,| that actually got the
|得到 A 和 B 生产的软件，

517
00:18:12,540 --> 00:18:13,860
0,390 390,660 660,720 720,870 870,1320
software that A and B

518
00:18:13,860 --> 00:18:15,900
0,150 150,720 720,1140 1170,1650 1650,2040
{} produced| and {} without
|没有对手的任何修改。

519
00:18:15,900 --> 00:18:17,490
0,180 180,810 810,960 960,1080 1080,1590
any modifications from the adversary.|
|

520
00:18:17,490 --> 00:18:18,270
0,270 300,510 510,630 630,690 690,780
So that's sort of the
这是我们将要讨论的一个显而易见的问题，

521
00:18:18,270 --> 00:18:19,740
0,600 660,900 900,1290 1290,1350 1350,1470
obvious {} problem we're going

522
00:18:19,740 --> 00:18:20,430
0,60 60,240 240,270 270,450 450,690
to talk a lot about,|
|

523
00:18:20,430 --> 00:18:22,680
0,180 300,870 870,1110 1110,1740 1770,2250
then there's a second {}
然后有第二种结果，

524
00:18:22,680 --> 00:18:23,520
0,150 150,210 210,420 420,690 690,840
sort of that outcome,| which
|可能会更微妙一些，

525
00:18:23,520 --> 00:18:24,330
0,210 210,330 330,390 390,630 630,810
may be a little more

526
00:18:24,330 --> 00:18:24,860
0,450
subtle,|
|

527
00:18:25,410 --> 00:18:28,140
0,720 780,1200 1200,1560 1560,2040 2130,2730
{} which is that {}
对手修改了 bank.py ，

528
00:18:28,140 --> 00:18:30,240
0,150 150,990 990,1860
the adversary {}

529
00:18:30,580 --> 00:18:31,580
0,690
{

530
00:18:32,020 --> 00:18:33,820
0,270 270,720 720,840 840,1590 1590,1800
-} provides the changes {you,know}

531
00:18:33,820 --> 00:18:36,180
0,390 390,600 600,810 810,1500
{to,bank.py - - -},|
|

532
00:18:37,960 --> 00:18:39,620
0,900
without
而不修改 auth.py 。

533
00:18:39,890 --> 00:18:41,960
0,150 150,810
{} changes

534
00:18:43,190 --> 00:18:45,920
0,660 660,1320 1320,1710
to {auth.py -}.|
|

535
00:18:47,970 --> 00:18:49,080
0,450 450,570 570,660 660,750 750,1110
And so at this {point\,,this
所以，在这一点上，这是相当有问题的，

536
00:18:49,080 --> 00:18:51,120
0,660 660,870 870,1140 1140,1740 1740,2040
-} is pretty problematic, correct,|
|

537
00:18:51,120 --> 00:18:52,500
0,480 480,570 570,660 660,900 900,1380
because you {know -} {bank.py
因为现在 bank.py 链接在 TechCash 上，

538
00:18:52,500 --> 00:18:53,670
0,120 120,360 360,660 660,810 810,1170
-} link to {TechCash -}

539
00:18:53,670 --> 00:18:55,800
0,450 720,1380 1380,1650 1650,1890 1890,2130
now,| but we actually don't
|但我们不再对用户进行适当的身份验证，

540
00:18:55,800 --> 00:18:58,500
0,300 300,1080 1080,2040 2100,2160 2160,2700
have appropriate authentication to users

541
00:18:58,500 --> 00:19:00,450
0,630 840,1020 1020,1380 1380,1770 1770,1950
anymore,| in fact anybody that
|事实上，任何创建 zoobar 账户的人

542
00:19:00,450 --> 00:19:02,550
0,570 570,960 990,1440 1440,1710 1710,2100
actually {} creates zoobar account|
|

543
00:19:02,550 --> 00:19:04,350
0,120 120,870 870,1380 1380,1620 1620,1800
{can,now} actually interact with the
现在都可以与 TechCash 互动，

544
00:19:04,350 --> 00:19:06,480
0,270 270,720 1200,1710 1710,1890 1890,2130
{techcash -},| {} and so
|所以非常不受欢迎，

545
00:19:06,480 --> 00:19:08,490
0,210 240,600 600,900 900,1170 1170,2010
{you,know} clearly very very undesirable,|
|

546
00:19:08,760 --> 00:19:11,460
0,540 540,1080 1680,2190 2190,2280 2280,2700
{} and harder to spot,|
也更难被发现，|

547
00:19:11,610 --> 00:19:13,620
0,420 420,1170 1230,1380 1380,1800 1800,2010
because basically the adversary actually
因为对手并没有修改任何软件，

548
00:19:13,620 --> 00:19:15,480
0,240 240,450 450,1080 1080,1260 1260,1860
doesn't really modify any {software

549
00:19:15,540 --> 00:19:17,520
0,270 270,600 600,1440 1440,1560 1560,1980
-},| just selectively you know
|只是有选择地你拿走它的部分，

550
00:19:17,550 --> 00:19:19,050
0,600 600,720 720,960 960,1350 1350,1500
presents you take pieces of

551
00:19:19,050 --> 00:19:20,640
0,300 300,960 990,1290 1290,1500 1500,1590
it| and present that to
|并展示给 C ，

552
00:19:20,640 --> 00:19:22,080
0,390 390,750 750,960 960,1230 1230,1440
C,| who then actually goes
|然后继续并部署。

553
00:19:22,080 --> 00:19:22,960
0,180 180,270 270,750
off and deployed.|
|

554
00:19:24,610 --> 00:19:26,590
0,330 330,480 480,1020 1020,1620 1650,1980
And so it's really {you,know}
所以这些攻击，

555
00:19:26,590 --> 00:19:31,690
0,1650 2400,3180 3180,3510 3510,3930 3930,5100
{the,attacks -}| {} the paper
|论文当然考虑了攻击 1 和 2 ，

556
00:19:32,140 --> 00:19:33,490
0,570 570,630 630,900 900,1050 1050,1350
considers of course the attack

557
00:19:33,490 --> 00:19:35,140
0,150 150,390 390,660 660,1050 1290,1650
{} 1 and 2,| but
|但有很多微妙的问题

558
00:19:35,140 --> 00:19:35,770
0,210 210,240 240,330 330,540 540,630
there are a lot of

559
00:19:35,770 --> 00:19:36,850
0,150 150,240 240,330 330,630 630,1080
some of the subtle issues|
|

560
00:19:36,850 --> 00:19:38,410
0,510 510,840 840,1140 1140,1380 1380,1560
actually are brought out by
是由第二个案例带来的，

561
00:19:38,410 --> 00:19:40,090
0,390 390,720 720,1110 1110,1290 1290,1680
the second case,| that will
|这将是谈论的话题。

562
00:19:40,120 --> 00:19:41,340
0,270 270,660 660,960
be talking about.|
|

563
00:19:44,250 --> 00:19:45,840
0,390 390,720 720,870 870,1260
Any questions so far,|
到目前为止，有什么问题吗，|

564
00:19:47,950 --> 00:19:49,060
0,180 180,240 240,450 450,510 510,1110
you know about the setting,
关于背景，关于动机，

565
00:19:49,120 --> 00:19:51,400
0,390 390,480 480,1320
about the motivation,|
|

566
00:19:53,220 --> 00:19:54,810
0,240 240,420 420,540 540,870 1110,1590
before we're going to try
在我们尝试讨论解决方案之前。

567
00:19:54,810 --> 00:19:56,240
0,120 120,480 480,1140
to discuss solutions.|
|

568
00:19:57,080 --> 00:19:57,950
0,240 240,420 420,690 690,780 780,870
So the problem with the
所以第二种情况的问题是，

569
00:19:57,950 --> 00:19:59,540
0,390 390,720 720,810 810,1260 1320,1590
second case is that,| the
|身份验证不进行身份验证？

570
00:19:59,540 --> 00:20:03,320
0,690 810,1440 1470,1680 1680,2160 2370,3780
user {} that the authentication

571
00:20:03,320 --> 00:20:06,500
0,180 180,660 870,1890 2100,2910 2910,3180
does not authenticate?| Yeah, it
|是的，它不再使用 MIT 证书了，

572
00:20:06,500 --> 00:20:07,850
0,120 120,390 390,570 570,930 930,1350
{} doesn't use MIT certificates

573
00:20:07,850 --> 00:20:09,200
0,390 750,900 900,1050 1050,1140 1140,1350
anymore,| and so we don't
|所以，我们并不知道是谁登录的。

574
00:20:09,200 --> 00:20:10,400
0,180 180,450 450,750 750,900 900,1200
really know actually who logs

575
00:20:10,400 --> 00:20:10,940
0,330
in.|
|

576
00:20:12,840 --> 00:20:14,040
0,390 390,930
Thank you.|
谢谢。|

577
00:20:15,020 --> 00:20:17,030
0,360 360,630 630,780 780,1140 1140,2010
What about the case where
A 和 B 看不见，就像 fork ，会怎么样？

578
00:20:18,590 --> 00:20:20,300
0,150 150,450 450,780 780,1110 1110,1710
A {or,like} B won't see

579
00:20:20,720 --> 00:20:22,620
0,570 600,1050 1050,1140 1140,1680
is like the fork?|
|

580
00:20:23,360 --> 00:20:25,010
0,150 150,630 630,930 930,1470 1470,1650

581
00:20:25,310 --> 00:20:26,450
0,510 510,750 750,810 810,840 840,1140
Let's assume for a second,|
让我们假设，|

582
00:20:26,450 --> 00:20:27,800
0,180 180,570 570,930 930,1230 1230,1350
that {A,and,B} actually {} have
A 和 B 已经彼此交谈过，并划分了工作，

583
00:20:27,800 --> 00:20:28,640
0,270 270,360 360,480 480,750 750,840
talked to each other and

584
00:20:28,640 --> 00:20:29,600
0,360 360,510 510,600 600,870 870,960
divide up the work,| so
|所以他们知道他们应该一起做这件事。

585
00:20:29,600 --> 00:20:31,460
0,150 150,660 750,990 990,1590 1590,1860
they know {} they're supposed

586
00:20:31,460 --> 00:20:32,540
0,60 60,240 240,450 450,630 630,1080
to be doing it together.|
|

587
00:20:33,390 --> 00:20:34,140
0,480
Right.|
好的。|

588
00:20:35,510 --> 00:20:37,040
0,300 300,540 540,600 600,1080
May form a team,|
可能组成一个团队，|

589
00:20:37,260 --> 00:20:39,240
0,570 660,990 990,1080 1080,1380 1380,1980
{} they're in close collaboration,
他们密切合作，保持联系，

590
00:20:39,240 --> 00:20:40,820
0,150 150,870 870,960 960,1260
in contact,| you know
|他们已经把工作分了，

591
00:20:41,310 --> 00:20:42,630
0,510 540,750 750,1140 1140,1230 1230,1320
and they've divided up the

592
00:20:42,630 --> 00:20:43,800
0,300 300,420 420,540 540,690 690,1170
work,| and so they know
|所以他们知道， B 告诉 A ，

593
00:20:43,800 --> 00:20:45,330
0,90 90,420 450,1020 1020,1320 1320,1530
you know {B,tells,A -},| when
|当 B 完成后，告诉 A ，

594
00:20:45,330 --> 00:20:46,410
0,150 150,390 390,630 630,900 900,1080
B done, {tells,A -},| when
|当他们做完了，然后他们告诉 C ，

595
00:20:46,410 --> 00:20:47,220
0,120 120,330 330,450 450,690 690,810
they done and then they

596
00:20:47,220 --> 00:20:48,990
0,240 240,810 810,1230 1230,1530 1530,1770
tell C,| {go,ahead}, {we,all,done -}.|
|继续，我们都做完了。|

597
00:20:49,760 --> 00:20:50,700
0,630
Okay?|
好的?|

598
00:20:52,190 --> 00:20:53,940
0,300 300,810 810,1440
Okay, so, {}
好的，让我们从一个简单的设计开始，

599
00:20:54,550 --> 00:20:56,710
0,270 270,870 870,1680 1680,2100 2100,2160
let's start with considering a

600
00:20:56,710 --> 00:20:57,790
0,270 270,630 630,780 780,930 930,1080
simple design,| that is too
|它太简单了，它不能工作，

601
00:20:57,790 --> 00:20:59,590
0,480 510,930 1020,1110 1110,1350 1350,1800
simple, meaning it doesn't work,|
|

602
00:21:00,370 --> 00:21:03,640
0,630 1830,2070 2070,2250 2250,2370 2370,3270
but it gives us some
但它为我们提供了一些更复杂的设计的起点，

603
00:21:04,150 --> 00:21:06,520
0,450 450,870 870,1590 1590,1680 1680,2370
starting points for {} more

604
00:21:06,580 --> 00:21:09,010
0,420 420,990 990,1560 1710,2160 2160,2430
{} sophisticated design,| hopefully might
|希望能工作，

605
00:21:09,010 --> 00:21:11,260
0,300 1170,1440 1440,1530 1530,1650 1650,2250
work,| and so the simple
|所以简单的点是，

606
00:21:11,260 --> 00:21:13,390
0,390 390,720 720,1140 1440,2040 2040,2130
point is that| {} {A,and}
|A 和 B 或任何，

607
00:21:13,390 --> 00:21:16,150
0,240 240,480 480,960 960,1890 1950,2760
B or any { -},|
|

608
00:21:16,150 --> 00:21:17,020
0,300 300,390 390,720 720,750 750,870
all the files are going
所有文件都将被修改人签名，

609
00:21:17,020 --> 00:21:19,180
0,60 60,240 240,720 1020,1620 1680,2160
to be signed with {}

610
00:21:19,180 --> 00:21:21,880
0,600 600,990 990,1560 1590,2010 2190,2700
person who modified,| so when
|所以，当 A 修改 auth.py 时，

611
00:21:21,880 --> 00:21:22,840
0,240 240,720
like A

612
00:21:23,390 --> 00:21:26,580
0,990 1020,1170 1170,1500 1500,2490
modifies {you,know} {auth.py -},|
|

613
00:21:29,200 --> 00:21:31,450
0,420 420,720 720,1080 1080,1770 1800,2250
{} A actually produces a
A 产生一个签名，

614
00:21:31,450 --> 00:21:35,020
0,780 1080,1740 1740,2610 2820,3360 3360,3570
signature,| {} and signed with
|并用公钥签名，

615
00:21:35,020 --> 00:21:36,740
0,450 510,900 900,1470
the public key,|
|

616
00:21:39,270 --> 00:21:41,580
0,720 780,960 960,1410 1830,2250 2250,2310
which {signature -} signed to
签名签署到 A 的公钥，

617
00:21:41,580 --> 00:21:42,840
0,90 90,390 390,600 600,720 720,1260
the public key of A,|
|

618
00:21:43,470 --> 00:21:45,420
0,1230 1230,1440 1440,1530 1530,1680 1680,1950
{} and you know that
这个签名涵盖了文件的数据，

619
00:21:45,420 --> 00:21:47,670
0,390 390,690 690,780 780,1320 1740,2250
signature covers the data of

620
00:21:47,670 --> 00:21:48,680
0,120 120,810
the file,|
|

621
00:21:51,500 --> 00:21:53,600
0,210 210,420 420,720 720,1410 1440,2100
and so when C {}
所以当 C 下载 auth.py 时，

622
00:21:54,110 --> 00:21:56,210
0,1140 1140,1230 1230,1440 1440,1800 1800,2100
downloads you know the {auth.py

623
00:21:56,210 --> 00:21:58,310
0,210 210,960 1230,1860 1860,1980 1980,2100
- -},| {} you know
|检查签名，

624
00:21:58,310 --> 00:21:59,860
0,270 270,360 360,1110
check the signature,|
|

625
00:22:05,100 --> 00:22:06,120
0,330 330,420 420,510 510,780 780,1020
and if the signature checks
如果签名通过了，

626
00:22:06,120 --> 00:22:07,290
0,360 360,420 420,630 630,1080 1080,1170
out,| you know then that
|然后 C 知道这个文件生成，

627
00:22:07,290 --> 00:22:08,280
0,180 180,480 480,660 660,840 840,990
C knows that actually this

628
00:22:08,280 --> 00:22:10,710
0,330 330,660 690,1200 1200,2250 2250,2430
file was produced,| {you,know,this} file
|这个文件是由 A 产生的，

629
00:22:10,710 --> 00:22:13,050
0,330 330,690 690,870 870,1380 1620,2340
was produced by A,| and
|可能相信事情都是好的。

630
00:22:13,050 --> 00:22:14,280
0,390 390,570 570,810 810,930 930,1230
{} {you,know} might all believe

631
00:22:14,280 --> 00:22:16,680
0,180 180,420 420,660 660,1050 1710,2400
that things are good. {}|
|

632
00:22:17,300 --> 00:22:18,290
0,150 150,360 360,420 420,690 690,990
And that's the basic plan,|
这是基本的计划，|

633
00:22:18,380 --> 00:22:19,880
0,600 840,1110 1110,1260 1260,1320 1320,1500
and we'll talk a little
我们会稍微谈谈密钥来自哪里，

634
00:22:19,880 --> 00:22:20,960
0,150 150,540 540,810 810,870 870,1080
bit about where the keys

635
00:22:20,960 --> 00:22:22,550
0,60 60,330 330,720 720,1320 1530,1590
are coming from,| although you
|虽然公钥分发的问题是一个 6.858 个主题，

636
00:22:22,550 --> 00:22:23,840
0,330 330,450 450,780 780,990 990,1290
know the issue of public

637
00:22:23,840 --> 00:22:25,970
0,150 150,900 900,1170 1170,1470 1470,2130
key distribution is really an

638
00:22:25,970 --> 00:22:26,960
0,150 150,360 360,480 480,810 810,990
{6.858 - -} topics,| so
|所以我不会说太多，

639
00:22:26,960 --> 00:22:27,620
0,60 60,180 180,390 390,480 480,660
{I'm,not,going,to -} talk too much

640
00:22:27,620 --> 00:22:29,180
0,240 240,360 630,990 990,1140 1140,1560
about it,| but just assume
|但现在先假设一下，

641
00:22:29,180 --> 00:22:30,920
0,120 120,390 390,660 960,1500 1500,1740
for now,| that every user
|每个用户都有密钥，公钥和私钥对，

642
00:22:30,920 --> 00:22:33,560
0,180 180,210 210,750 900,1800 2190,2640
has a key, {} {public,private}

643
00:22:33,560 --> 00:22:36,350
0,330 330,930 1050,1710 1710,2520 2520,2790
key pair,| {} and the
|私钥是秘密的，而公钥是公开的，

644
00:22:36,350 --> 00:22:38,270
0,300 300,510 510,600 600,1320 1320,1920
private keys {are -} secret

645
00:22:38,270 --> 00:22:39,230
0,300 300,360 360,600 600,810 810,960
and the public keys are

646
00:22:39,230 --> 00:22:41,420
0,480 750,1290 1290,1530 1530,1830 1830,2190
public,| and every user knows
|每个用户都知道谁的公钥属于谁。

647
00:22:41,420 --> 00:22:43,070
0,510 540,1080 1080,1230 1230,1530 1530,1650
whose public key belongs to

648
00:22:43,070 --> 00:22:44,900
0,300
who.|
|

649
00:22:45,170 --> 00:22:48,590
0,180 180,540 540,780 780,2280 2670,3420
So now let's consider {}
现在让我们考虑一下攻击，

650
00:22:48,590 --> 00:22:52,190
0,1110 2430,2970 2970,3180 3180,3390 3390,3600
attacks| and see which one
|看看哪种攻击会失败，

651
00:22:52,190 --> 00:22:53,300
0,270 270,480 480,540 540,690 690,1110
sort of you know fail,|
|

652
00:22:53,300 --> 00:22:55,040
0,210 210,720 720,840 840,1350 1350,1740
which ones you know {}
哪种攻击会成功。

653
00:22:55,040 --> 00:22:55,760
0,510
work.|
|

654
00:22:56,020 --> 00:22:57,130
0,300 300,390 390,630 630,810 810,1110
So, of course the obvious
当然，最明显的攻击 1 ，

655
00:22:57,130 --> 00:22:58,510
0,270 270,390 390,570 570,1110 1110,1380
attack {} number one,| that
|我们在上一张幻灯片中谈到的，

656
00:22:58,510 --> 00:22:59,680
0,90 90,300 300,750 750,1080 1080,1170
we talked about on the

657
00:22:59,680 --> 00:23:01,990
0,300 300,690 750,1080 1080,1440 1440,2310
previous slide,| is S modifies
|是 S 修改文件，

658
00:23:03,030 --> 00:23:05,160
0,750
file,|
|

659
00:23:05,940 --> 00:23:07,350
0,570 660,1020 1020,1170 1170,1230 1230,1410
and that's not a little
这不是，

660
00:23:07,350 --> 00:23:12,030
0,210 210,2010 2010,2310 2310,3390 4140,4680
bit,| {that's,not,directly -} {} {S,modified}
|这不是直接由 S 修改 auth.py ，

661
00:23:12,450 --> 00:23:14,790
0,630 1050,1590 1620,1830 1830,2130 2130,2340
auth.py,| {} that's not really
|这不可能了，

662
00:23:14,790 --> 00:23:16,560
0,120 120,180 180,600 630,1080 1080,1770
going to be possible anymore,|
|

663
00:23:16,740 --> 00:23:18,900
0,570 570,750 750,1230 1230,2040 2040,2160
because when C downloads you
因为当 C 下载文件和签名时，

664
00:23:18,900 --> 00:23:20,370
0,150 150,810 840,1290 1290,1410 1410,1470
know the file and the

665
00:23:20,370 --> 00:23:22,440
0,870 960,1320 1320,1500 1500,1770 1770,2070
signature,| {} and checks it|
|并检查它，|

666
00:23:22,590 --> 00:23:23,550
0,210 210,300 300,480 480,780 780,960
and it will see that
它将看到签名拒绝检查，

667
00:23:23,550 --> 00:23:25,170
0,90 90,390 390,690 690,1290 1290,1620
the signature rejection check,| because
|因为实际签名的数据

668
00:23:25,170 --> 00:23:26,490
0,90 90,390 390,630 630,1080 1080,1320
the data that actually was

669
00:23:26,490 --> 00:23:28,290
0,510 840,1080 1080,1530 1530,1710 1710,1800
signed| is different than the
|与服务器生成的数据不同，

670
00:23:28,290 --> 00:23:30,120
0,270 270,480 480,900 900,1170 1170,1830
data that actually the server

671
00:23:30,300 --> 00:23:32,250
0,1050 1230,1530 1530,1620 1620,1740 1740,1950
produced,| and so it's not
|所以，服务器不可能修改 auth.py ，

672
00:23:32,250 --> 00:23:34,140
0,210 210,720 720,1230 1320,1590 1590,1890
really possible for the server

673
00:23:34,140 --> 00:23:35,820
0,330 330,450 450,1050 1050,1440 1440,1680
really to modify {auth.py -

674
00:23:35,820 --> 00:23:37,620
0,180 180,690 690,1080 1080,1350 1350,1800
- -},| without actually being
|没有被攻击。

675
00:23:37,620 --> 00:23:39,210
0,600 690,900 900,1260 1260,1410 1410,1590
attack or {without,actually} {} being

676
00:23:39,210 --> 00:23:39,780
0,480
attack.|
|

677
00:23:40,470 --> 00:23:41,370
0,150 150,510 510,600 600,720 720,900
{} So you know this
所以我们在这次攻击中是好的，

678
00:23:41,370 --> 00:23:42,180
0,180 180,540 540,660 660,720 720,810
is we're sort of in

679
00:23:42,180 --> 00:23:43,260
0,150 150,450 450,690 690,1080 1080,1080
good shape here on {}

680
00:23:43,260 --> 00:23:45,270
0,480 480,1170 1200,1530 1530,1740 1740,2010
this attack,| and that's sort
|这是核心攻击。

681
00:23:45,270 --> 00:23:46,590
0,270 270,360 360,660 660,1080 1080,1320
of the core attack, right.|
|

682
00:23:47,210 --> 00:23:48,440
0,480 570,990 990,1020 1020,1170 1170,1230
But there's a lot of
但是 S 还有很多其他的事情可以做，

683
00:23:48,440 --> 00:23:50,120
0,180 180,390 390,660 660,1410 1440,1680
other things that {S -}

684
00:23:50,120 --> 00:23:51,440
0,210 210,360 360,660 990,1170 1170,1320
still could do,| so let's
|所以让我们来考虑一些其他的事情，

685
00:23:51,440 --> 00:23:52,490
0,330 330,450 450,570 570,660 660,1050
consider some of the other

686
00:23:52,520 --> 00:23:54,660
0,600 990,1830
things {},|
|

687
00:23:55,040 --> 00:23:57,440
0,480 480,570 570,840 840,1470 1950,2400
S {you,know} could actually, we
假设 S 发送另一个文件，

688
00:23:57,440 --> 00:23:59,150
0,540 570,930 930,1290 1290,1500 1500,1710
{} describe {S,send} {another -}

689
00:23:59,150 --> 00:24:00,200
0,660
file,|
|

690
00:24:00,710 --> 00:24:02,090
0,150 150,660 660,750 750,1110 1110,1380
and pretends to be {auth.py
并假装是 auth.py ，

691
00:24:02,090 --> 00:24:03,520
0,690
-},|
|

692
00:24:05,450 --> 00:24:07,340
0,900 900,1500 1500,1620 1620,1830 1830,1890
{} and {} because the
因为签名并没有说，

693
00:24:07,340 --> 00:24:08,960
0,390 390,600 600,810 810,1440 1470,1620
signature doesn't really say,| you
|数据属于哪个文件，

694
00:24:08,960 --> 00:24:10,640
0,240 240,690 690,930 930,1560 1560,1680
know which actually file the

695
00:24:10,640 --> 00:24:12,590
0,210 210,600 600,930 1380,1680 1680,1950
data belongs to,| and so
|所以 S 可以产生一些其他的文件，

696
00:24:12,590 --> 00:24:15,380
0,270 300,660 660,1200 1200,2250 2280,2790
{S,could} you know {} produce

697
00:24:15,380 --> 00:24:17,000
0,90 90,870 900,1410 1410,1620 1620,1620
some other files,| like oh
|比如看到这个是 auth.py ，

698
00:24:17,000 --> 00:24:18,350
0,540 540,810 810,990 990,1110 1110,1350
yeah see this is actually

699
00:24:18,350 --> 00:24:20,750
0,240 240,810 1110,1800 1800,2160 2160,2400
{auth.py -},| {} you can
|你可以相信我，

700
00:24:20,750 --> 00:24:22,070
0,300 300,450 450,510 510,780 780,1320
believe me in here,| the
|签名当然是由 S 制作的签名，

701
00:24:22,130 --> 00:24:23,960
0,420 540,900 900,1530 1530,1740 1740,1830
sign the signature which of

702
00:24:23,960 --> 00:24:26,690
0,180 180,480 480,900 1410,1950 2010,2730
course produced {by,S},| so of
|这当然是可以修复的，

703
00:24:26,690 --> 00:24:27,800
0,240 240,330 330,480 480,570 570,1110
course this could be fixed,|
|

704
00:24:27,830 --> 00:24:29,300
0,150 150,450 450,900 900,1050 1050,1470
you know maybe the signature
也许签名不应该只包括数据，

705
00:24:29,300 --> 00:24:31,010
0,180 180,360 360,600 600,1050 1140,1710
should not only include data,|
|

706
00:24:31,010 --> 00:24:32,390
0,120 120,450 450,750 750,930 930,1380
but also probably should include
但也可能应该包括文件名，

707
00:24:32,600 --> 00:24:33,300
0,120 120,390 390,570
the file name,|
|

708
00:24:35,340 --> 00:24:36,660
0,240 240,420 420,660 660,840 840,1320
so {you,know} maybe not too,
所以在一些事情上也许不是太糟糕，

709
00:24:36,690 --> 00:24:38,130
0,450 510,660 660,990 990,1200 1200,1440
{} too bad in something,|
|

710
00:24:38,130 --> 00:24:39,750
0,180 180,360 360,540 540,810 810,1620
that you could be addressed.|
你可以处理。|

711
00:24:41,950 --> 00:24:43,330
0,510 510,600 600,870 870,1200 1200,1380
Third, you know another yet
第三，另一种可能性是，

712
00:24:43,330 --> 00:24:45,970
0,270 270,1200 1200,1410 1410,2040 2040,2640
another possibility is,| to for
|S 发送旧文件的内容，

713
00:24:46,060 --> 00:24:49,000
0,810 1290,1680 1680,2040 2040,2550 2700,2940
S to basically send the

714
00:24:49,000 --> 00:24:50,880
0,420 420,540 540,780 780,1350
contents of old files,

715
00:24:51,970 --> 00:24:55,960
0,510 510,1230 3000,3360 3360,3540 3540,3990
old content,| maybe some new,|
|也许有些新的，|

716
00:25:03,460 --> 00:25:04,180
0,210 210,300 300,540 540,600 600,720
and it does a bit
现在确实更难了，

717
00:25:04,180 --> 00:25:05,680
0,360 360,840 840,1080 1080,1320 1320,1500
more difficult now,| for us
|我们用简单的方案来处理这件事，

718
00:25:05,680 --> 00:25:08,050
0,360 360,1440 1470,1890 1890,2220 2220,2370
to {} handle correct this

719
00:25:08,050 --> 00:25:10,330
0,180 180,480 480,1020 1170,1650 1650,2280
to simple plan,| {} because
|因为没有方法，

720
00:25:10,510 --> 00:25:12,160
0,120 120,390 390,1200 1230,1500 1500,1650
you know there there's no

721
00:25:12,160 --> 00:25:13,420
0,540 540,690 690,780 780,1170 1170,1260
way| you know basically the
|这些文件是单独认证的，而不是一起认证的，

722
00:25:13,420 --> 00:25:16,210
0,360 360,1110 1110,2190 2190,2310 2310,2790
files individually authenticated, but not

723
00:25:16,210 --> 00:25:17,830
0,450 450,600 600,720 720,1170 1260,1620
together,| and it's not {}
|而且 C 不能得到文件系统的一致性图片，

724
00:25:17,920 --> 00:25:19,960
0,570 570,780 780,960 960,1620 1620,2040
C gets a consistent picture

725
00:25:19,960 --> 00:25:21,610
0,90 90,180 180,480 480,930 1110,1650
of the file system, {}|
|

726
00:25:21,610 --> 00:25:22,630
0,180 180,330 330,570 570,780 780,1020
it just gets like sign
它只得到了签名文件，

727
00:25:22,630 --> 00:25:24,910
0,570 840,1290 1440,1800 1800,1980 1980,2280
files,| and how do sign
|签名文件在它们的历史方面是如何相互关联的，

728
00:25:24,910 --> 00:25:26,110
0,270 270,480 480,600 600,720 720,1200
files relate to each other

729
00:25:26,110 --> 00:25:27,880
0,240 240,510 510,750 780,1110 1110,1770
in terms of {} histories,|
|

730
00:25:28,090 --> 00:25:29,650
0,420 420,930 930,1140 1140,1440 1440,1560
is completely not covered in
没有覆盖在这个很简单的设计中。

731
00:25:29,650 --> 00:25:30,760
0,150 150,270 270,570 570,1020
these too simple design.|
|

732
00:25:31,380 --> 00:25:32,670
0,330 330,420 420,930 930,1020 1020,1290
This is exactly of course
当然还有更多微妙的攻击，

733
00:25:32,670 --> 00:25:34,530
0,210 210,870 870,1290 1290,1440 1440,1860
gonna issue there's more subtle

734
00:25:34,530 --> 00:25:36,090
0,360 360,630 840,1260 1260,1410 1410,1560
attack,| that now couldn't just
|现在不能完全解决，

735
00:25:36,090 --> 00:25:37,860
0,450 450,690 690,1050 1050,1260 1260,1770
completely work out, correct,| because
|因为 S 可以发送，

736
00:25:38,070 --> 00:25:39,900
0,240 240,510 510,1020 1080,1470 1470,1830
you know S could send

737
00:25:39,900 --> 00:25:42,330
0,480 810,1440 1830,2130 2130,2340 2340,2430
the,| {} could send the
|可以发送旧版本的 auth.py ，

738
00:25:42,330 --> 00:25:44,340
0,300 300,690 690,870 870,1230 1380,2010
old version of {auth.py -},|
|

739
00:25:44,430 --> 00:25:46,020
0,570 570,720 720,930 930,1350 1350,1590
{} it will completely {checkout
它会完全通过检查，

740
00:25:46,020 --> 00:25:47,580
0,390 720,990 990,1170 1170,1320 1320,1560
-},| {} and then send
|然后发送新版本的 bank.py ，

741
00:25:47,580 --> 00:25:49,890
0,90 90,420 420,1020 1050,1440 1440,2310
the new version of the

742
00:25:49,980 --> 00:25:50,780
0,600
{}

743
00:25:51,270 --> 00:25:52,290
0,210 210,450 450,690 690,870 870,1020
of the {bank.py - -

744
00:25:52,290 --> 00:25:54,060
0,540 570,720 720,1200 1200,1440 1440,1770
-},| {} which actually talks
|它与 TechCash 有关，

745
00:25:54,060 --> 00:25:55,350
0,180 180,390 390,450 450,660 660,1290
is linked to {techcash -},|
|

746
00:25:55,470 --> 00:25:57,210
0,420 420,660 660,1410 1410,1680 1680,1740
and now exactly back in
现在又回到了一个更糟糕的案例中，

747
00:25:57,210 --> 00:25:59,490
0,270 270,390 390,720 720,1320 1500,2280
there's a {worse,some} case,| where
|有一个旧版本的 auth.py ，

748
00:25:59,550 --> 00:26:00,210
0,150 150,240 240,390 390,480 480,660
you know with an old

749
00:26:00,210 --> 00:26:01,650
0,270 270,360 360,570 570,1290 1290,1440
version of {auth.py -}| or
|或者不更改 auth.py ，

750
00:26:01,650 --> 00:26:02,850
0,240 240,330 330,720 720,840 840,1200
not to change to {auth.py

751
00:26:02,850 --> 00:26:04,350
0,360 360,600 600,660 660,1170 1170,1500
-},| not the certificate changes
|不是修改 auth.py 的证书，

752
00:26:04,350 --> 00:26:06,480
0,150 150,510 510,1020 1260,1680 1680,2130
to {auth.py -},| {} and
|以及链接到 TechCash 的新版本。

753
00:26:06,480 --> 00:26:08,610
0,510 570,900 900,1500 1500,1830 1830,2130
the new version that actually

754
00:26:08,610 --> 00:26:09,680
0,180 180,270 270,450 450,960
link to {TechCash -}.|
|

755
00:26:09,960 --> 00:26:11,250
0,330 330,660 660,990 990,1110 1110,1290
And so this is not
所以这不是很好，

756
00:26:11,250 --> 00:26:13,200
0,150 150,480 900,1350 1470,1860 1860,1950
so good,| so and the
|所以我们这里的简单点，

757
00:26:13,200 --> 00:26:14,220
0,300 300,540 540,660 660,780 780,1020
simple point that we have

758
00:26:14,220 --> 00:26:15,660
0,270 270,630 630,990 1020,1320 1320,1440
here,| just doesn't deal with
|不涉及这个问题。

759
00:26:15,660 --> 00:26:16,380
0,360
this.|
|

760
00:26:17,420 --> 00:26:18,470
0,210 210,390 390,450 450,900 900,1050
{} There's a similar sort
还有类似的另一种版本，

761
00:26:18,470 --> 00:26:19,850
0,150 150,600 600,1050 1050,1140 1140,1380
of another version of this,|
|

762
00:26:19,850 --> 00:26:21,350
0,180 180,570 750,840 840,1080 1080,1500
that where you know of
当然 S 也可以声明文件不存在，

763
00:26:21,350 --> 00:26:22,370
0,330 330,420 420,690 690,840 840,1020
course {you,know,S -} can also

764
00:26:22,370 --> 00:26:23,360
0,210 210,600 600,690 690,780 780,990
just claim that the file

765
00:26:23,360 --> 00:26:24,560
0,240 240,750
doesn't exist,|
|

766
00:26:31,530 --> 00:26:33,420
0,510 510,780 780,990 990,1260 1260,1890
and C doesn't really have
而 C 没有任何方法来检查这是否是真的，

767
00:26:33,750 --> 00:26:36,180
0,810 810,1140 1140,1470 1680,2190 2190,2430
any way of checking whether

768
00:26:36,180 --> 00:26:37,260
0,180 180,480 480,750 750,810 810,1080
that's actually true or not,|
|

769
00:26:37,260 --> 00:26:38,280
0,210 210,600 600,690 690,870 870,1020
because again they should have
因为它们同样应该有一个全局图片，

770
00:26:38,280 --> 00:26:40,140
0,90 90,510 510,1080 1200,1620 1620,1860
a global picture,| where it's
|其中是文件系统的一致视图，

771
00:26:40,140 --> 00:26:41,370
0,60 60,540 540,1020 1020,1140 1140,1230
a consistent view of the

772
00:26:41,370 --> 00:26:43,800
0,300 300,630 960,1800 1800,2250 2250,2430
file system,| nobody knows about
|没有人知道每个文件的签名。

773
00:26:43,800 --> 00:26:45,330
0,240 240,510 510,960 960,1080 1080,1530
{signatures -} for each file.|
|

774
00:26:46,740 --> 00:26:47,910
0,240 240,360 360,540 540,720 720,1170
And so you see that
所以你可以看到，简单的设计可能是一个很好的起点，

775
00:26:47,910 --> 00:26:49,410
0,540 540,780 780,1230 1230,1440 1440,1500
the simple design may be

776
00:26:49,410 --> 00:26:50,490
0,60 60,210 210,540 540,870 870,1080
a good starting point,| but
|但我们需要更完整的东西，

777
00:26:50,490 --> 00:26:52,740
0,120 120,300 300,540 540,1260 1500,2250
we need something more, {}

778
00:26:52,830 --> 00:26:54,690
0,510 510,1170 1200,1290 1290,1620 1620,1860
more complete,| and I think
|我认为我们需要一个将所有文件系统捆绑，

779
00:26:54,690 --> 00:26:56,550
0,180 180,330 330,990 1080,1500 1500,1860
we need something that really

780
00:26:56,550 --> 00:26:58,500
0,750 750,990 990,1110 1110,1410 1410,1950
ties all the file systems,|
|

781
00:26:58,500 --> 00:26:59,640
0,120 120,210 210,510 510,1020 1020,1140
all the files together,| that
所有文件一起，|将目录捆绑在一起，

782
00:26:59,640 --> 00:27:01,290
0,300 300,810 810,1170 1170,1290 1290,1650
ties directories together,| the content
|将目录的内容捆绑在一起，

783
00:27:01,290 --> 00:27:03,450
0,90 90,180 180,660 660,1230 1350,2160
of the directories together, {}|
|

784
00:27:03,450 --> 00:27:04,860
0,510 510,780 780,1170 1170,1320 1320,1410
and and we have to
我们必须能够以某种方式做出决定，

785
00:27:04,860 --> 00:27:05,670
0,120 120,330 330,390 390,750 750,810
be able to decide in

786
00:27:05,670 --> 00:27:06,780
0,210 210,600 600,840 840,960 960,1110
some way,| what is the
|文件系统的最新版本是什么，

787
00:27:06,780 --> 00:27:08,640
0,330 330,840 1200,1380 1380,1560 1560,1860
latest version of the file

788
00:27:08,640 --> 00:27:11,010
0,1050 1290,1500 1500,1890 1890,2100 2100,2370
system,| so that C can't
|所以在这种有问题的情况下， C 不会被骗，

789
00:27:11,010 --> 00:27:13,050
0,120 120,480 480,1110 1320,1860 1860,2040
be tricked into {} in

790
00:27:13,050 --> 00:27:14,430
0,180 180,390 390,450 450,1050 1050,1380
this sort of problematic case,|
|

791
00:27:14,430 --> 00:27:16,230
0,480 570,930 930,1170 1170,1290 1290,1800
where one file is installed
其中安装了一个文件，而没有安装另一个文件。

792
00:27:16,230 --> 00:27:17,340
0,120 120,540 540,780 780,990 990,1110
and the other file is

793
00:27:17,340 --> 00:27:18,080
0,240 240,660
not installed.|
|

794
00:27:18,930 --> 00:27:20,520
0,210 210,390 390,750 750,1020 1020,1590
So that's really what the
所以这就是 SUNDR 论文试图解决的问题，

795
00:27:20,550 --> 00:27:21,930
0,150 150,240 240,480 480,810 810,1380
{SUNDR -} paper tries to

796
00:27:21,990 --> 00:27:28,290
0,810 1080,1710 1710,5400 5400,5670 5670,6300
address,| and the big idea
|论文中的大的想法，

797
00:27:28,560 --> 00:27:29,940
0,540 540,900 900,1140 1140,1290 1290,1380
{} in the in the

798
00:27:29,940 --> 00:27:31,770
0,570 780,1410 1410,1590 1590,1680 1680,1830
paper,| {} and it just
|这只是一个普遍的大的想法，

799
00:27:31,770 --> 00:27:32,520
0,180 180,300 300,360 360,540 540,750
turns out to be just

800
00:27:32,520 --> 00:27:33,810
0,60 60,330 330,660 660,750 750,1290
a big idea in general,|
|

801
00:27:34,140 --> 00:27:35,060
0,720

802
00:27:35,220 --> 00:27:36,570
0,360 360,630 630,780 780,840 840,1350
{} and it's a conceptual
这是一个概念性的想法，

803
00:27:36,570 --> 00:27:37,620
0,420 420,630 630,750 750,840 840,1050
idea,| even though the paper
|尽管论文并没有直接实现这个大的想法，

804
00:27:37,620 --> 00:27:39,540
0,210 210,570 600,1230 1230,1470 1470,1920
actually doesn't really {} implement

805
00:27:39,540 --> 00:27:41,280
0,120 120,300 300,600 600,1170 1290,1740
this big idea directly,| implement
|以一种更间接的方式实现它，

806
00:27:41,280 --> 00:27:42,240
0,120 120,210 210,270 270,540 540,960
it in a more indirect

807
00:27:42,240 --> 00:27:44,910
0,390 600,1140 1350,1800 1800,2310 2310,2670
way,| {} it is an
|这是一个令人难以置信的强大的想法。

808
00:27:44,910 --> 00:27:46,440
0,480 480,900 900,1290
incredibly powerful idea.|
|

809
00:27:47,130 --> 00:27:49,680
0,870 900,1020 1020,1230 1230,1830 2220,2550
So the big idea is
所以大想法是对操作的日志签名。

810
00:27:49,680 --> 00:27:50,820
0,570
to

811
00:27:51,080 --> 00:27:53,620
0,660 660,780 780,1410 1410,2070
have {} {signed,log,of -}

812
00:27:54,690 --> 00:27:57,160
0,1350
operations.|
|

813
00:28:01,340 --> 00:28:02,690
0,180 180,240 240,480 480,1020 1020,1350
And of course you're well
当然，你对操作日志很熟悉，

814
00:28:02,690 --> 00:28:04,460
0,450 450,600 600,870 870,960 960,1770
familiar with logs of operations,|
|

815
00:28:04,700 --> 00:28:06,350
0,720 720,1050 1050,1440 1440,1560 1560,1650
and you and you know
你可以，

816
00:28:06,350 --> 00:28:07,520
0,210 210,750 750,900 900,1080 1080,1170
you can,| and this is
|这是它的一种[增强]版本，

817
00:28:07,520 --> 00:28:08,840
0,420 420,840 840,1050 1050,1140 1140,1320
basically a sort of {}

818
00:28:08,840 --> 00:28:09,890
0,300 300,360 360,720 720,840 840,1050
[beefed] up version of it,|
|

819
00:28:10,190 --> 00:28:11,870
0,330 330,840 840,1050 1050,1530 1530,1680
{} where there signatures on
在日志条目上有签名的情况下，

820
00:28:11,870 --> 00:28:13,430
0,330 330,720 720,930 930,1080 1080,1560
log entries,| that {both -}
|涵盖了条目以及之前的条目。

821
00:28:13,430 --> 00:28:14,900
0,570 630,900 900,1020 1020,1350 1350,1470
consider cover the entry as

822
00:28:14,900 --> 00:28:16,560
0,300 300,480 510,960 960,1560
well as preceding entries.|
|

823
00:28:17,150 --> 00:28:19,520
0,450 750,1410 1620,1950 1950,2160 2160,2370
{} And {} this turns
这就是，

824
00:28:19,520 --> 00:28:21,620
0,120 120,210 210,690 720,1350 1770,2100
out to be,| {} as
|我们在之前的所有分布式系统和故障恢复协议中看到的，

825
00:28:21,620 --> 00:28:22,580
0,330 330,540 540,630 630,810 810,960
we've seen in all the

826
00:28:22,580 --> 00:28:24,350
0,480 480,870 870,1260 1260,1470 1470,1770
previous distributed systems and failure

827
00:28:24,350 --> 00:28:26,000
0,720 720,1080 1080,1200 1200,1410 1410,1650
recovery protocols,| we talk about
|我们说过日志是一个非常强大的想法，

828
00:28:26,000 --> 00:28:27,380
0,90 90,600 600,690 690,1140 1140,1380
the log is actually {}

829
00:28:27,530 --> 00:28:29,930
0,420 420,810 810,1200 1200,1710 1830,2400
very powerful idea| to think
|来考虑系统的正确性，

830
00:28:29,930 --> 00:28:31,130
0,510 510,600 600,990 990,1080 1080,1200
about the correctness of the

831
00:28:31,130 --> 00:28:33,230
0,540 780,1260 1260,1590 1590,1650 1650,2100
system,| and in the same
|同样地，这个想法也是在这个拜占庭式的背景下进行的。

832
00:28:33,230 --> 00:28:35,150
0,450 450,930 930,1290 1290,1560 1560,1920
way that idea is carried

833
00:28:35,150 --> 00:28:37,460
0,660 690,1140 1140,1380 1380,1860 1890,2310
for here in this {Byzantine

834
00:28:37,460 --> 00:28:38,340
0,150 150,810
-} context.|
|

835
00:28:38,880 --> 00:28:40,620
0,510 510,660 660,810 810,1680 1680,1740
{} And so let me
所以，让我画一个简单的日志，

836
00:28:40,620 --> 00:28:43,060
0,390 390,960 1200,1500 1500,2010
draw a simple log,|
|

837
00:28:45,660 --> 00:28:47,580
0,390 1110,1620 1620,1770 1770,1860 1860,1920
so captures this in the
从论文中拿出这个，

838
00:28:47,580 --> 00:28:49,410
0,510 720,930 930,1140 1140,1470 1470,1830
paper,| {} so log whatever
|所以日志有一些条目，

839
00:28:49,410 --> 00:28:50,580
0,120 120,270 270,750 750,960 960,1170
have some entries,| and let's
|比如，我们已经讨论过的，

840
00:28:50,580 --> 00:28:52,440
0,240 240,330 330,510 510,1320 1470,1860
say you know we're coming

841
00:28:52,440 --> 00:28:54,090
0,120 120,840 840,1050 1050,1380 1380,1650
up we are talking about,|
|

842
00:28:54,090 --> 00:28:56,040
0,300 600,750 750,780 780,1680
so it's {} modification,|
所以它是修改，|

843
00:28:56,220 --> 00:28:58,950
0,180 180,1080 2130,2250 2250,2430 2430,2730
{you,know} mod you know {auth.py
由 A 修改 auth.py ，由 A 签名，

844
00:28:58,950 --> 00:29:00,560
0,1140
-}

845
00:29:01,330 --> 00:29:03,280
0,240 240,480 480,1140 1170,1770 1770,1950
{} by A, signed by

846
00:29:03,280 --> 00:29:05,460
0,570
A,|
|

847
00:29:05,760 --> 00:29:06,990
0,150 150,270 270,480 480,540 540,1230
you know there's a mod,|
这里有个 mod ，|

848
00:29:07,620 --> 00:29:08,760
0,270 270,480 480,660 660,1050 1050,1140
if everything goes well,| you
如果一切顺利，|这里有一个 bank.py ，由 B 签名。

849
00:29:08,760 --> 00:29:10,410
0,120 120,270 270,330 330,720 720,1650
know there's a mod of

850
00:29:10,770 --> 00:29:11,920
0,720
the

851
00:29:12,160 --> 00:29:14,280
0,540 540,780 780,1620
{bank.py - -}

852
00:29:16,200 --> 00:29:18,380
0,450 450,780 780,1530
signed by B.|
|

853
00:29:20,630 --> 00:29:21,800
0,450 450,600 600,750 750,930 930,1170
And as we'll talk about
正如我们稍后要谈到的，

854
00:29:21,800 --> 00:29:22,490
0,60 60,120 120,480 480,600 600,690
in a second,| you know
|不仅日志中的修改，

855
00:29:22,490 --> 00:29:23,750
0,120 120,330 330,600 600,930 930,1260
it turns out that not

856
00:29:23,750 --> 00:29:26,000
0,570 600,900 900,1050 1050,2040
only are the modifications

857
00:29:26,170 --> 00:29:27,160
0,300 300,480 480,570 570,810 810,990
{} in the log,| but
|还包括读取操作的获取，

858
00:29:27,160 --> 00:29:28,930
0,510 510,750 750,1410 1440,1650 1650,1770
also the fetch of the

859
00:29:28,930 --> 00:29:30,220
0,210 210,1020
read operations,|
|

860
00:29:32,050 --> 00:29:34,120
0,330 330,1050 1140,2010
so fetch, {}
所以，获取 C 签名的日志， auth.py ，

861
00:29:35,650 --> 00:29:36,970
0,360 360,450 450,900 900,1080 1080,1320
fetch the log {you,know} signed

862
00:29:36,970 --> 00:29:39,680
0,120 120,810
by C,

863
00:29:40,160 --> 00:29:41,780
0,150 150,450 450,750 750,930 930,1620
{auth.py - - - -},|
|

864
00:29:43,750 --> 00:29:46,060
0,270 270,330 330,900 960,1680 1860,2310
and then fetch of {bank.py
然后获取由 C 签名的 bank.py .

865
00:29:46,060 --> 00:29:47,600
0,180 210,930
- -},

866
00:29:48,740 --> 00:29:51,480
0,390 390,600 600,1110
singed by C.|
|

867
00:29:52,620 --> 00:29:53,910
0,150 150,330 330,720 720,750 750,1290
We'll talk about {} those
我们将讨论这些操作，取回操作，

868
00:29:53,910 --> 00:29:55,770
0,480 480,660 660,1080 1170,1470 1470,1860
operations, so the fetch operations,

869
00:29:55,770 --> 00:29:57,060
0,60 60,240 240,540 720,1050 1050,1290
a little bit,| I first
|我首先想讨论，

870
00:29:57,060 --> 00:29:57,780
0,120 120,180 180,360 360,660 660,720
want to talk about,| how
|如何操作前面的操作进行修改。

871
00:29:57,780 --> 00:30:00,660
0,1050 1140,1920 1920,2040 2040,2370 2370,2880
to operate the preceding operations

872
00:30:00,660 --> 00:30:02,620
0,270 270,1230
for modifications.|
|

873
00:30:03,180 --> 00:30:04,200
0,510

874
00:30:05,200 --> 00:30:06,520
0,240 240,420 420,510 510,810 810,1320
So, first of all, the
所以，首先，重要的是要认识到，

875
00:30:06,550 --> 00:30:08,350
0,210 210,660 660,960 960,1560 1560,1800
what's important to realize is

876
00:30:08,350 --> 00:30:09,760
0,420 420,600 600,1110 1110,1290 1290,1410
that,| this signature that is
|记录中的签名不仅覆盖当前记录，

877
00:30:09,760 --> 00:30:11,890
0,210 210,960 1020,1590 1650,1860 1860,2130
in the record not only

878
00:30:11,890 --> 00:30:14,740
0,390 390,2040 2040,2460 2640,2790 2790,2850
covers {the,current} records,| but it
|它也涵盖了以前的所有记录。

879
00:30:14,740 --> 00:30:16,090
0,240 240,660 660,960 960,1050 1050,1350
also covers all the records

880
00:30:16,090 --> 00:30:16,960
0,480
before.|
|

881
00:30:23,590 --> 00:30:24,430
0,240 240,330 330,690 690,810 810,840
Let me stop for a
让我在这里停一下，

882
00:30:24,430 --> 00:30:25,420
0,300 300,570 570,720 720,840 840,990
second here,| because I'm not
|因为我不能百分之百确定是否每个人都能听到我。

883
00:30:25,420 --> 00:30:26,710
0,60 60,300 300,570 570,930 930,1290
a hundred percent sure if

884
00:30:27,070 --> 00:30:28,420
0,270 270,570 570,750 750,990 990,1350
can everybody still hear me.|
|

885
00:30:30,220 --> 00:30:32,080
0,780 810,1020 1020,1200 1200,1620 1680,1860
Yeah.| Yes.| {} Okay, I
是的。|是的。|好了，我拿了我的 iPad ，走出了 Zoom ，

886
00:30:32,080 --> 00:30:33,580
0,360 360,510 510,1140 1230,1350 1350,1500
got my iPad and I

887
00:30:33,580 --> 00:30:34,810
0,360 360,480 480,600 600,690 690,1230
walked out of the Zoom

888
00:30:34,990 --> 00:30:37,390
0,510 510,1200 1200,1500 1500,1830 1830,2400
session,| I always login twice
|我登录了两次，然后我的 iPad 退出了，

889
00:30:37,630 --> 00:30:40,120
0,630 630,1080 1080,1290 1290,2280 2280,2490
{} and my iPad logged

890
00:30:40,120 --> 00:30:41,530
0,270 300,660 930,1110 1110,1290 1290,1410
out,| so I just want
|所以我只想确定，

891
00:30:41,530 --> 00:30:42,670
0,60 60,180 180,450 450,600 600,1140
to make sure,| I'm still
|我还在和你说话，你能听到我说话，

892
00:30:42,700 --> 00:30:43,570
0,300 300,390 390,630 630,780 780,870
talking to you and you

893
00:30:43,570 --> 00:30:44,260
0,90 90,270 270,480
can hear me,|
|

894
00:30:46,140 --> 00:30:47,070
0,210 210,540 540,720 720,840 840,930
and start that is the
情况就是这样。

895
00:30:47,070 --> 00:30:49,050
0,450 660,1230 1260,1440 1440,1680 1680,1980
case.| Okay, so let's just
|好的，那我们开始。

896
00:30:49,050 --> 00:30:51,600
0,540 630,1590 1620,2220
proceed, {} the.|
|

897
00:30:52,030 --> 00:30:52,860
0,210 210,570
So, actually.|
所以，实际上。|

898
00:31:20,620 --> 00:31:22,120
0,150 150,390 390,480 480,810 810,1500
I think we lost Frans.|
我想我们丢了 Frans 。|

899
00:32:05,030 --> 00:32:06,050
0,150 150,360 360,540 540,600 600,1020
Can people hear me now,
现在大家能听到我说话吗，有人能听到我说话吗？

900
00:32:08,540 --> 00:32:09,840
0,150 150,510 510,690 690,990
does anybody hear me?|
|

901
00:32:11,620 --> 00:32:15,040
0,720 750,1710 2160,2670 2730,3270 3270,3420
Yes.| Okay.| Okay, {} I
是的。|好的。|好的，我不知道你那边有没有发生什么奇怪的事，

902
00:32:15,040 --> 00:32:15,850
0,120 120,210 210,300 300,600 600,810
don't know if anything weird

903
00:32:15,850 --> 00:32:17,050
0,270 270,510 510,660 660,930 930,1200
happens {on,your} end,| but my
|但在我这一边，

904
00:32:17,050 --> 00:32:18,420
0,300 420,990
end, {}|
|

905
00:32:18,900 --> 00:32:20,730
0,420 630,1260 1260,1440 1440,1680 1680,1830
{} I got logged out
我退出了 Zoom ，然后重新登录，

906
00:32:20,730 --> 00:32:21,570
0,60 60,360 360,390 390,630 630,840
of Zoom and log back

907
00:32:21,570 --> 00:32:22,160
0,300
in,|
|

908
00:32:24,340 --> 00:32:26,440
0,390 390,750 750,1110 1140,1650 1650,2100
maybe there's a Byzantine server
也许有个拜占庭式的服务器在工作。

909
00:32:26,440 --> 00:32:28,880
0,120 120,660 1380,2040
at work. {}|
|

910
00:32:29,440 --> 00:32:32,140
0,600 600,1320 1530,1830 1830,2580 2580,2700
Okay, {} let me, hold
好的，让我，稍等片刻，然后我自己。

911
00:32:32,140 --> 00:32:33,300
0,120 120,330 330,810
on one second,

912
00:32:33,500 --> 00:32:35,400
0,570 630,810 810,1230 1230,1560
and get myself {}.|
|

913
00:32:49,800 --> 00:32:51,210
0,660 660,840 840,960 960,1260 1260,1410
And let me see, {}
让我看看，视频开始播放了。

914
00:32:51,210 --> 00:32:52,740
0,330 330,540 540,690 690,1230
that video goes off.|
|

915
00:32:56,880 --> 00:32:57,620
0,60

916
00:33:07,420 --> 00:33:10,540
0,480 480,990 1020,1530 1620,2400 2970,3120
{} Camera, okay, {} let
摄像机，好的，如果我好了就告诉我。

917
00:33:10,540 --> 00:33:11,380
0,60 60,210 210,300 300,420 420,840
me know if I'm good.|
|

918
00:33:14,280 --> 00:33:16,170
0,450 840,1440 1440,1500 1500,1650 1650,1890
Okay, good.| {No -} screen
好的，很好。|还不能分享屏幕，但是。

919
00:33:16,170 --> 00:33:18,090
0,240 240,480 480,690 690,1170 1290,1920
sharing yet, but yeah.| Okay,
|好的，我希望这能更好地工作。

920
00:33:18,960 --> 00:33:20,790
0,120 120,930 930,1050 1050,1290 1290,1830
I hope this works better.|
|

921
00:33:20,820 --> 00:33:22,440
0,690 720,1350
{Okay -},
好的，在这个非常重要的时刻，

922
00:33:22,680 --> 00:33:23,460
0,330 330,390 390,570 570,630 630,780
so it was at this

923
00:33:23,460 --> 00:33:25,290
0,120 120,420 420,720 720,1680 1740,1830
very important point,| where the
|签名不只覆盖日志条目本身，

924
00:33:25,290 --> 00:33:26,880
0,360 360,600 600,810 810,1110 1110,1590
signature just not cover the

925
00:33:26,910 --> 00:33:29,010
0,450 450,570 570,1230 1320,1740 1740,2100
{log,entry -} itself,| {} but
|而且还覆盖了所有之前的日志条目。

926
00:33:29,010 --> 00:33:30,090
0,240 240,510 510,600 600,690 690,1080
also covers all the preceding

927
00:33:30,090 --> 00:33:31,100
0,240 240,780
log entries.|
|

928
00:33:31,480 --> 00:33:33,910
0,570 750,1170 1170,1680 1710,2340 2340,2430
{} And so when you
所以，当 A 对 auth.py 的日志修改时，

929
00:33:33,910 --> 00:33:36,190
0,240 240,570 570,1080 1080,1500 1530,2280
know A as this modification

930
00:33:36,190 --> 00:33:38,140
0,300 300,810 960,1260 1260,1560 1560,1950
to {auth.py -} to the

931
00:33:38,170 --> 00:33:39,790
0,570 630,840 840,1110 1110,1320 1320,1620
log,| it signs the log
|它对日志记录本身以及之前的日志记录进行签名，

932
00:33:39,790 --> 00:33:41,650
0,480 480,960 960,1290 1290,1500 1500,1860
records itself plus the preceding

933
00:33:41,650 --> 00:33:42,820
0,360 390,840 840,960 960,1080 1080,1170
log record,| so you can
|所以你可以想一想，

934
00:33:42,820 --> 00:33:43,780
0,150 150,390 390,540 540,720 720,960
think about this,| that the
|之前的日志可以表示为，

935
00:33:43,810 --> 00:33:45,100
0,480 480,840 840,960 960,1080 1080,1290
preceding log is may be

936
00:33:45,100 --> 00:33:46,870
0,660 660,1170 1200,1320 1320,1650 1650,1770
represented by,| the content of
|之前日志的内容是加密哈希，

937
00:33:46,870 --> 00:33:49,450
0,360 390,990 1080,1800 1800,2340 2340,2580
the preceding log is {}

938
00:33:49,450 --> 00:33:52,120
0,540 540,1140 1170,1740 1920,2310 2310,2670
cryptographic hash,| and {} in
|在记录中，修改 auth.py ，

939
00:33:52,120 --> 00:33:54,400
0,150 150,570 570,1230 1470,2250 2250,2280
the record, basically { -}

940
00:33:54,460 --> 00:33:56,350
0,990 990,1230 1230,1410 1410,1560 1560,1890
modification to {auth.py - -},|
|

941
00:33:56,350 --> 00:33:58,990
0,120 120,420 420,870 1140,1770 1830,2640
you know the {} the
日志的前面部分的加密散列是

942
00:33:59,290 --> 00:34:00,790
0,510 510,900 900,1050 1050,1320 1320,1500
cryptographic hash the preceding part

943
00:34:00,790 --> 00:34:01,660
0,60 60,150 150,420 420,660 690,870
of the log| is {}
|包括并覆盖在签名中。

944
00:34:01,660 --> 00:34:03,430
0,600 600,1260 1290,1560 1560,1680 1680,1770
included and covered by the

945
00:34:03,430 --> 00:34:05,110
0,510 720,1080 1080,1140 1140,1230 1230,1680
signature.| Just to be clear,
|确认一下，我们还是看不到屏幕。

946
00:34:05,140 --> 00:34:06,250
0,270 300,570 570,780 780,900 900,1110
we still can't see the

947
00:34:06,280 --> 00:34:08,080
0,480 1050,1110 1320,1530 1530,1710 1710,1800
screen.| You can't see the
|你看不到屏幕，屏幕没有改变，

948
00:34:08,080 --> 00:34:09,960
0,480
screen,

949
00:34:10,230 --> 00:34:11,640
0,270 270,540 540,780 780,1230 1230,1410
{} screen hasn't changed,| but,
|但是，让我看看我能不能做点什么。

950
00:34:11,640 --> 00:34:13,060
0,420 420,510 510,630 630,1140
{} {let,me - -}

951
00:34:13,720 --> 00:34:15,190
0,570 600,1050 1050,1230 1230,1350 1350,1470
{} see if I can

952
00:34:15,190 --> 00:34:16,640
0,120 120,450 450,720 720,1110
do something about that.|
|

953
00:34:17,340 --> 00:34:19,200
0,630 660,1050 1050,1320 1350,1470 1470,1860
And {[] -} I guess,|
我想，|

954
00:34:19,990 --> 00:34:20,700
0,420

955
00:34:21,180 --> 00:34:22,500
0,420 420,660 660,960 960,1110 1110,1320
Zoom still thinks there's actually
Zoom 仍然认为这是在分享屏幕，

956
00:34:22,500 --> 00:34:24,120
0,300 300,360 360,750 750,1020 1500,1620
sharing the screen,| but it
|但它看起来并不是。

957
00:34:24,120 --> 00:34:25,500
0,210 210,390 390,570 570,990 990,1380
doesn't look like actually is.|
|

958
00:34:35,230 --> 00:34:36,260
0,150 150,300 300,720
How about this?|
这个怎么样？|

959
00:34:37,680 --> 00:34:38,550
0,390 390,420 420,540 540,630 630,870
Yep, I can see now.|
是的，我现在能看到了。|

960
00:34:39,030 --> 00:34:41,010
0,300 300,480 480,750 1590,1860 1860,1980
Okay, thank you.| Okay, so
好的，谢谢。|好的，所以我什么都没改，

961
00:34:41,010 --> 00:34:42,450
0,270 270,480 480,720 720,990 990,1440
I didn't change anything yet,|
|

962
00:34:42,510 --> 00:34:43,230
0,330 330,420 420,510 510,690 690,720
other than I think I
除了我画了一个箭头，

963
00:34:43,230 --> 00:34:43,920
0,90 90,210 210,270 270,510 510,690
was going to draw the

964
00:34:43,920 --> 00:34:45,600
0,240 240,510 510,690 690,1230 1320,1680
next arrow,| which basically when
|这些签名，

965
00:34:45,600 --> 00:34:47,010
0,270 270,960 990,1110 1110,1230 1230,1410
these signs| you know it's
|它也涵盖了前面的所有条目。

966
00:34:47,010 --> 00:34:48,450
0,330 330,660 660,810 810,900 900,1440
actually covered all the preceding

967
00:34:48,450 --> 00:34:49,380
0,420 420,660
entries too.|
|

968
00:34:50,320 --> 00:34:51,400
0,360 360,600 600,690 690,840 840,1080
And this is {} good,
这很好，

969
00:34:51,400 --> 00:34:54,520
0,300 300,810 990,1380 1380,2040 2160,3120
correct,| because {} when {}
|因为当客户端 C 接收到

970
00:34:54,910 --> 00:34:57,790
0,810 1110,1920 1920,2130 2130,2640 2640,2880
{} client {you,know} C actually

971
00:34:57,790 --> 00:34:59,320
0,750 750,840 840,1140 1140,1290 1290,1530
receives| you know or gets
|获得 B 的日志条目时，

972
00:34:59,320 --> 00:35:00,610
0,240 240,570 570,690 690,900 900,1290
actually sees the log entry

973
00:35:00,610 --> 00:35:04,570
0,210 210,630 960,1740 1830,2610 2730,3960
for B,| then {} it's
|服务器不可能丢弃 A 的日志条目，

974
00:35:04,570 --> 00:35:05,920
0,600 600,720 720,780 780,1230 1230,1350
impossible for the server to

975
00:35:05,920 --> 00:35:07,750
0,510 540,960 960,1260 1260,1620 1620,1830
drop the log entry of

976
00:35:07,750 --> 00:35:09,580
0,510 600,1020 1020,1620 1620,1740 1740,1830
A,| {} because you know
|因为这会被检测到，

977
00:35:09,580 --> 00:35:10,960
0,180 180,360 360,480 480,990 990,1380
that will be detected,| when
|当 C 检测 B 的日志条目的签名时。

978
00:35:10,960 --> 00:35:13,060
0,480 480,1080 1080,1740 1770,2040 2040,2100
{C,actually,detect -} signature on the

979
00:35:13,060 --> 00:35:14,100
0,240 240,510 510,630 630,900
log entry of B.|
|

980
00:35:14,810 --> 00:35:15,920
0,240 240,540 570,750 750,930 930,1110
And so we really made
所以，我们向前迈出了一大步，

981
00:35:15,950 --> 00:35:17,810
0,270 270,480 480,720 720,1320 1560,1860
a big step forward, {}|
|

982
00:35:17,810 --> 00:35:19,550
0,180 180,240 240,570 570,960 1200,1740
in the sense that {},|
从这个意义上说，|

983
00:35:19,550 --> 00:35:21,260
0,480 480,720 720,1140 1140,1470 1470,1710
it's much harder for the
服务器现在更难有选择地删除日志条目。

984
00:35:21,260 --> 00:35:23,570
0,390 390,600 600,750 750,1620 1770,2310
server now to selectively {drop,log

985
00:35:23,570 --> 00:35:24,600
0,300 300,840
-} entries.|
|

986
00:35:25,590 --> 00:35:26,910
0,150 150,690 690,930 930,1140 1140,1320
So that's so we're {}
所以这非常好，

987
00:35:26,910 --> 00:35:28,470
0,210 210,690 690,870 870,1020 1410,1560
pretty good pretty good,| you
|服务器不能丢弃 A ，

988
00:35:28,470 --> 00:35:30,210
0,150 150,450 480,1080 1080,1410 1410,1740
know the servers cannot drop

989
00:35:30,210 --> 00:35:31,420
0,390
A,|
|

990
00:35:34,910 --> 00:35:36,120
0,900

991
00:35:36,540 --> 00:35:38,400
0,210 210,1020
and keep
并保留这些修改。

992
00:35:38,840 --> 00:35:39,620
0,210

993
00:35:39,830 --> 00:35:42,440
0,420 420,1320
these modifications.|
|

994
00:35:44,250 --> 00:35:45,870
0,510 540,780 780,1110 1110,1380 1380,1620
So that's actually a big
所以这是向前迈出的一大步，

995
00:35:45,870 --> 00:35:47,610
0,330 330,540 540,990 1320,1530 1530,1740
big step forward,| so let's
|所以让我们更详细地看一下，

996
00:35:47,610 --> 00:35:48,480
0,420 420,480 480,630 630,750 750,870
look a little bit more

997
00:35:48,480 --> 00:35:49,770
0,60 60,630 630,840 840,930 930,1290
in detail,| how this actually
|这件事到底会如何发展。

998
00:35:49,770 --> 00:35:50,640
0,90 90,210 210,270 270,510 510,870
is going to play out.|
|

999
00:35:50,850 --> 00:35:52,590
0,300 300,480 480,570 570,1170 1170,1740
So we're a client C|
我们是客户端 C ，|

1000
00:35:53,700 --> 00:35:56,520
0,900 900,1140 1140,1770 1770,2130 2160,2820
and {you,know,we're} fetching the log|
我们获取日志，|

1001
00:35:56,520 --> 00:35:57,870
0,120 120,510 510,870 870,1260 1290,1350
to basically {rollout -} you
为了[]软件的分发版本，

1002
00:35:57,870 --> 00:35:59,100
0,180 180,570 570,1050 1050,1140 1140,1230
know the distribution of the

1003
00:35:59,100 --> 00:36:00,300
0,480 480,600 600,1020 1020,1140 1140,1200
software| to install on a
|在特定机器上安装，

1004
00:36:00,300 --> 00:36:02,130
0,300 300,840 1170,1500 1500,1590 1590,1830
particular machine,| {} the first
|客户端做的第一件事，

1005
00:36:02,130 --> 00:36:03,360
0,180 180,540 540,990 990,1140 1140,1230
thing {the,client} does,| you know
|它检查所有的签名，

1006
00:36:03,360 --> 00:36:04,560
0,540 540,1050
it actually

1007
00:36:04,600 --> 00:36:06,340
0,480 480,600 600,690 690,1350
check all the signatures,|
|

1008
00:36:13,990 --> 00:36:15,550
0,210 210,390 390,450 450,750 1230,1560
and {} you know always
问题总是这样的，

1009
00:36:15,550 --> 00:36:16,210
0,60 60,300 300,360 360,570 570,660
the question of course is

1010
00:36:16,210 --> 00:36:17,380
0,180 180,600 600,720 720,990 990,1170
like,| when you know you
|当你要检查签名日志条目，

1011
00:36:17,380 --> 00:36:18,490
0,180 180,240 240,630 660,780 780,1110
want to check the signature

1012
00:36:18,490 --> 00:36:19,690
0,330 330,570 570,630 630,900 900,1200
log entry| {you,know} which public
|使用哪个公钥，

1013
00:36:19,690 --> 00:36:21,700
0,120 120,210 210,390 390,990 1350,2010
key do you use, {}|
|

1014
00:36:21,700 --> 00:36:22,960
0,540 540,750 750,990 990,1110 1110,1260
and {} because you want
因为你想要确保，

1015
00:36:22,960 --> 00:36:25,360
0,60 60,210 210,450 450,1410 1950,2400
to make sure that,| you're
|你没有被骗，接受 A 的修改，

1016
00:36:25,360 --> 00:36:27,220
0,150 150,300 300,750 750,1440 1470,1860
not being tricked in accepting

1017
00:36:27,220 --> 00:36:28,820
0,120 120,750
{[] -}

1018
00:36:29,220 --> 00:36:30,360
0,600 600,720 720,960 960,1080 1080,1140
modification by A,| but it
|但是 A 并不是对它签名的人，

1019
00:36:30,360 --> 00:36:31,290
0,180 180,270 270,390 390,750 750,930
turns out that {actually,A} was

1020
00:36:31,290 --> 00:36:32,580
0,120 120,180 180,480 480,780 960,1290
not the person actually signed

1021
00:36:32,580 --> 00:36:33,120
0,210
it,|
|

1022
00:36:33,350 --> 00:36:34,520
0,150 150,210 210,420 420,600 600,1170
and it turns out basically
为了找出使用哪个密钥来验证签名，

1023
00:36:34,790 --> 00:36:37,880
0,1200 1650,2160 2160,2430 2430,2730 2730,3090
to figure out which key

1024
00:36:37,880 --> 00:36:39,980
0,120 120,450 450,600 600,870 870,2100
to use to actually verify

1025
00:36:40,040 --> 00:36:43,280
0,60 60,780 960,1650 2460,2820 2820,3240
the signature,| the key uses
|密钥使用文件的所有者，

1026
00:36:43,280 --> 00:36:44,360
0,120 120,420 420,510 510,600 600,1080
the owner of the file,|
|

1027
00:36:45,250 --> 00:36:46,780
0,330 330,480 480,750 750,1230
so the public key
所以，公钥需要与文件的所有者相对应，

1028
00:36:47,120 --> 00:36:48,410
0,510 510,600 600,1080 1080,1170 1170,1290
need to correspond to the

1029
00:36:48,410 --> 00:36:51,260
0,270 270,330 330,450 450,1050 2430,2850
owner of the file,| and
|暂时忽略组，

1030
00:36:51,290 --> 00:36:53,900
0,510 510,810 810,930 930,1470 1830,2610
ignoring groups for now, {}|
|

1031
00:36:53,900 --> 00:36:54,980
0,210 210,330 330,720 720,990 990,1080
you know basically only the
只有文件的所有者才能修改文件。

1032
00:36:54,980 --> 00:36:55,790
0,270 270,360 360,450 450,720 720,810
owner of the file was

1033
00:36:55,790 --> 00:36:57,110
0,360 360,450 450,870 870,960 960,1320
allowed to modify a file.|
|

1034
00:36:57,880 --> 00:37:00,370
0,360 360,810 810,1230 1230,2100 2130,2490
So for simple for slightly
因此，稍微简化一下，

1035
00:37:00,370 --> 00:37:01,660
0,570 570,810 810,900 900,1050 1050,1290
simplified,| we can think about
|我们可以认为 auth.py 是 A 所有的，

1036
00:37:01,660 --> 00:37:03,370
0,540 540,1020 1020,1140 1170,1560 1560,1710
it {auth.py - -} is

1037
00:37:03,370 --> 00:37:04,960
0,240 240,420 420,900 1230,1470 1470,1590
owned by A,| and the
|文件的 id 是 A 的公钥，

1038
00:37:04,960 --> 00:37:06,010
0,390 390,450 450,570 570,960 960,1050
id of the file is

1039
00:37:06,010 --> 00:37:07,090
0,390 390,480 480,780 780,960 960,1080
basically the public key of

1040
00:37:07,090 --> 00:37:09,760
0,270 840,1410 1410,1890 1980,2430 2430,2670
A,| and so we know
|所以，我们知道要使用哪个公钥，

1041
00:37:09,760 --> 00:37:14,680
0,870 900,1860 1860,1950 1950,2520 2730,4920
which {public,key} to use| and
|并可以用它验证签名，

1042
00:37:14,740 --> 00:37:16,750
0,420 420,780 780,870 870,1500 1590,2010
can verify the signature {}

1043
00:37:16,750 --> 00:37:17,950
0,210 210,420 420,570 570,930 1050,1200
with it,| and so if
|所以，如果其他人做了一个伪装成 A 的修改，

1044
00:37:17,950 --> 00:37:19,720
0,300 300,780 780,1140 1140,1170 1170,1770
somebody else makes a modification

1045
00:37:19,720 --> 00:37:20,800
0,90 90,390 390,450 450,630 630,1080
that pretends to be A,|
|

1046
00:37:20,950 --> 00:37:21,730
0,150 150,330 330,540 540,600 600,780
{} that actually is not
这是不会通过检验的。

1047
00:37:21,730 --> 00:37:22,600
0,120 120,180 180,450 450,750
going to check out.|
|

1048
00:37:23,560 --> 00:37:24,580
0,150 150,270 270,510 510,780 780,1020
So it's really only A
所以，只有 A 可以连接并修改，

1049
00:37:24,580 --> 00:37:25,990
0,120 120,360 360,450 450,660 660,1410
can connects and make modifications,|
|

1050
00:37:25,990 --> 00:37:26,940
0,390 390,630
similar {for,B}.|
B 也是一样。|

1051
00:37:28,540 --> 00:37:29,560
0,150 150,390 390,630 630,720 720,1020
So that's part of the
这是 SUNDR 聪明之处的一部分，

1052
00:37:29,800 --> 00:37:31,090
0,240 240,570 720,1020 1020,1170 1170,1290
you know one thing that's

1053
00:37:31,090 --> 00:37:33,490
0,270 270,870 900,1410 1410,2070 2220,2400
actually clever about SUNDR,| I'm
|我不是要讨论，

1054
00:37:33,490 --> 00:37:34,090
0,180 180,330 330,450 450,510 510,600
not really going to be

1055
00:37:34,090 --> 00:37:35,620
0,330 330,720 930,1170 1170,1410 1410,1530
talking about,| some since the
|因为文件系统是文件系统的两倍，

1056
00:37:35,620 --> 00:37:37,120
0,300 300,630 630,780 780,1020 1020,1500
file system is actually doubling

1057
00:37:37,120 --> 00:37:38,260
0,300 300,390 390,510 510,810 810,1140
both as a file system,|
|

1058
00:37:38,260 --> 00:37:40,810
0,750 750,840 840,1110 1110,1440 1440,2550
as a public key {}
作为公钥公钥基础设施或分发基础设施，

1059
00:37:41,110 --> 00:37:44,680
0,570 570,1200 1830,2730 2730,3060 3060,3570
public key infrastructure or distribution

1060
00:37:44,680 --> 00:37:47,170
0,600 870,1740 1740,2010 2010,2220 2220,2490
infrastructure,| {} and so it's
|所以，使用 SUNDR 是可能的，

1061
00:37:47,170 --> 00:37:48,970
0,300 300,840 840,1080 1080,1410 1410,1800
actually possible to {use,SUNDR},| basically
|我们确定哪个用户拥有哪个公钥。

1062
00:37:48,970 --> 00:37:50,740
0,390 390,570 570,1140 1140,1440 1440,1770
why we determine like which

1063
00:37:50,740 --> 00:37:52,150
0,390 390,600 600,810 810,1170 1170,1410
user has which public key.|
|

1064
00:37:53,380 --> 00:37:54,400
0,270 270,420 420,540 540,720 720,1020
{} But I'm not really
但我不想讨论这个，

1065
00:37:54,400 --> 00:37:55,210
0,180 180,390 390,570 570,720 720,810
gonna talk about this,| I
|我想专注于一致性方面，

1066
00:37:55,210 --> 00:37:56,080
0,210 210,330 330,390 390,690 690,870
really want to focus on

1067
00:37:56,080 --> 00:37:58,120
0,240 270,990 990,1530 1530,1740 1740,2040
the consistency aspects| and the
|以及更多的分布式系统方面。

1068
00:37:58,210 --> 00:38:00,280
0,330 330,750 750,1230 1230,1860
more distributed systems aspects.|
|

1069
00:38:00,990 --> 00:38:01,830
0,60 60,300 300,480 480,630 630,840
The second thing that the
客户端做的第二件事是，检查它自己的最后一个条目。

1070
00:38:01,830 --> 00:38:04,800
0,240 240,630 900,1710 1740,2640
client does is check

1071
00:38:05,020 --> 00:38:09,860
0,570 1530,2160 2160,2700
{its,own} last entry.|
|

1072
00:38:13,410 --> 00:38:15,000
0,150 150,270 270,660 660,930 930,1590
And this is to protect
这是为了保护客户端不会被服务器回滚，

1073
00:38:15,000 --> 00:38:16,530
0,390 390,630 630,990 990,1230 1230,1530
clients from actually being rolled

1074
00:38:16,530 --> 00:38:18,270
0,300 300,420 420,510 510,930 930,1740
back by the server {in,time},|
|

1075
00:38:18,270 --> 00:38:19,740
0,270 270,360 360,690 690,990 990,1470
so the server can actually
所以服务器总是检查最后一个条目，

1076
00:38:19,740 --> 00:38:21,180
0,330 600,660 660,930 930,1140 1140,1440
by the client checks always

1077
00:38:21,180 --> 00:38:22,890
0,300 300,810 1260,1410 1410,1500 1500,1710
last entry,| if its last
|如果它在日志中的最后条目被窃取，

1078
00:38:22,890 --> 00:38:24,300
0,390 390,540 540,600 600,870 870,1410
entries in the log steal,|
|

1079
00:38:24,450 --> 00:38:25,530
0,270 270,780 780,870 870,990 990,1080
{} then you know the
然后，对于攻击者的唯一方法，

1080
00:38:25,530 --> 00:38:27,150
0,330 330,540 540,960 960,1230 1230,1620
only way {} for the

1081
00:38:27,150 --> 00:38:29,850
0,1440 1470,1740 1740,1860 1860,2250 2250,2700
attacker| is to actually roll
|回滚文件系统，因为 A 可以回滚，

1082
00:38:29,850 --> 00:38:30,900
0,90 90,330 330,600 600,930 930,1050
the file system, for A

1083
00:38:30,900 --> 00:38:32,790
0,300 300,570 570,1170 1470,1650 1650,1890
can roll backwards,| so C
|所以， C 将检查它之前的任何操作是否在其中，

1084
00:38:32,790 --> 00:38:33,840
0,120 120,450 450,720 720,780 780,1050
will check whether the any

1085
00:38:33,840 --> 00:38:35,190
0,90 90,240 240,660 660,1200 1200,1350
of its previous operations are

1086
00:38:35,190 --> 00:38:37,320
0,120 120,330 690,1620 1620,2010 2010,2130
in it,| and confirm that
|并确认它们还在里面，

1087
00:38:37,320 --> 00:38:38,200
0,240 240,450 450,570 570,750
they're still in it,|
|

1088
00:38:39,600 --> 00:38:41,130
0,300 300,780 780,1110 1110,1410 1410,1530
{} {actually,it's} last entries still
它的最后一个条目还在里面。

1089
00:38:41,130 --> 00:38:43,020
0,240 720,1230 1230,1380 1380,1500 1500,1890
in it.| Is the question
|这里的问题是，

1090
00:38:43,020 --> 00:38:46,290
0,600 1050,1320 1320,1650 1650,2370 2700,3270
here,| {} this only I
|我觉得这个攻击是从服务器回滚，

1091
00:38:46,890 --> 00:38:48,840
0,510 510,900 900,1440 1440,1800 1800,1950
think this attack from the

1092
00:38:48,840 --> 00:38:50,610
0,450 450,570 570,1260 1260,1500 1500,1770
server to rollback,| would only
|只有在没有其他客户端写入日志的情况下才能工作，

1093
00:38:50,610 --> 00:38:53,430
0,510 540,1140 1410,1920 1920,2190 2190,2820
work if no other client

1094
00:38:53,430 --> 00:38:55,530
0,540 540,660 660,840 840,1440 1590,2100
wrote to the log, {}|
|

1095
00:38:56,860 --> 00:38:59,410
0,420 450,750 750,1530 1650,2010 2010,2550
{} like after this client's
在这个客户端最后一个条目之后，

1096
00:38:59,410 --> 00:39:01,360
0,390 390,780 780,1020 1020,1200 1200,1950
last entry, right,| because otherwise
|因为否则检查签名就会知道了。

1097
00:39:01,390 --> 00:39:03,790
0,420 420,1020 1020,1200 1710,2220 2220,2400
checking signatures would figure that

1098
00:39:03,790 --> 00:39:04,580
0,360
out.|
|

1099
00:39:04,800 --> 00:39:08,250
0,510 510,1080 1080,1530 1530,1980 3030,3450
{} Yeah, although you know
是的，我们待会再谈，

1100
00:39:08,250 --> 00:39:09,120
0,300 300,450 450,690 690,810 810,870
let's talk about in a

1101
00:39:09,120 --> 00:39:10,110
0,270 270,540 540,690 690,900 900,990
second,| maybe I mean you
|我的意思是你总是可以使用 fork 攻击，

1102
00:39:10,110 --> 00:39:10,980
0,120 120,330 330,510 510,600 600,870
could always play a fork

1103
00:39:10,980 --> 00:39:12,540
0,510 570,750 750,900 900,1020 1020,1560
attack,| so you can always
|你可以拆分文件系统在多个用户中的使用，

1104
00:39:12,570 --> 00:39:14,160
0,720 750,840 840,990 990,1380 1380,1590
split you know the use

1105
00:39:14,160 --> 00:39:15,330
0,90 90,180 180,570 570,750 750,1170
of the {file,system} in multiple

1106
00:39:15,330 --> 00:39:17,220
0,510 720,1560 1560,1650 1650,1770 1770,1890
users,| but you can at
|但你至少可以不回滚客户端，

1107
00:39:17,220 --> 00:39:18,330
0,210 210,480 480,690 690,1020 1020,1110
least not roll back the

1108
00:39:18,330 --> 00:39:19,740
0,360 360,570 570,660 660,1020 1020,1410
client,| once the client saw
|一旦客户端看到特定的文件系统，

1109
00:39:19,740 --> 00:39:21,630
0,30 30,570 570,870 870,1350 1710,1890
a particular file system,| you
|你不能在时间上倒退，

1110
00:39:21,630 --> 00:39:22,770
0,270 270,390 390,750 750,840 840,1140
can't go backwards in time,|
|

1111
00:39:24,150 --> 00:39:25,320
0,180 180,300 300,690 690,870 870,1170
{} the client could, {the,server}
客户端可以呈现未来的不同文件系统的服务器，

1112
00:39:25,320 --> 00:39:26,400
0,90 90,180 180,540 540,840 840,1080
it can present different file

1113
00:39:26,400 --> 00:39:28,140
0,330 330,450 450,960 990,1530 1560,1740
systems in future,| but you
|但你不能倒退。

1114
00:39:28,140 --> 00:39:29,160
0,210 210,360 360,720
can't roll back.|
|

1115
00:39:31,020 --> 00:39:31,920
0,600

1116
00:39:32,280 --> 00:39:34,800
0,450 450,1020 1290,2190
Third part, {}|
第三部分，|

1117
00:39:35,100 --> 00:39:36,150
0,510 510,720 720,900 900,990 990,1050
the third part with the
第三部分[]是一个[建设性的]文件系统，

1118
00:39:36,150 --> 00:39:37,440
0,240 240,630 630,720 720,870 870,1290
{[] -} is a [constructive]

1119
00:39:37,440 --> 00:39:38,560
0,270 270,690
file system,|
|

1120
00:39:41,930 --> 00:39:43,490
0,210 210,810 810,900 900,1260 1260,1560
so after you know, it
它知道它没有滚动到文件系统的之前版本，

1121
00:39:43,490 --> 00:39:44,990
0,450 450,780 780,930 930,1170 1170,1500
knows actually it's not rolled

1122
00:39:44,990 --> 00:39:45,890
0,60 60,420 420,750 750,810 810,900
{} past version of the

1123
00:39:45,890 --> 00:39:47,870
0,240 240,780 870,1410 1410,1680 1680,1980
file system,| {} it basically
|它应用所有的修改，

1124
00:39:47,870 --> 00:39:49,580
0,420 420,510 510,600 600,1350 1350,1710
applies all the modifications,| basically
|基本上在客户机上构建文件系统树，

1125
00:39:49,580 --> 00:39:50,720
0,240 240,300 300,540 540,840 840,1140
builds a file system tree

1126
00:39:51,500 --> 00:39:53,600
0,180 180,360 360,420 420,960 1440,2100
{you,know} on the client,| and
|然后在做任何操作之前，

1127
00:39:53,600 --> 00:39:55,490
0,450 450,570 570,1110 1110,1500 1500,1890
{} and then before whatever

1128
00:39:55,490 --> 00:39:56,630
0,450 450,570 570,810 810,1080 1080,1140
operation it is,| {it,wants} to
|它想要[]，

1129
00:39:56,630 --> 00:39:57,950
0,480 480,660 660,840 840,1080 1080,1320
perform,| so let's say in
|我们假设在 C 的情况下，

1130
00:39:57,950 --> 00:40:00,080
0,90 90,390 390,510 990,1500 1500,2130
the case of {} C,|
|

1131
00:40:00,170 --> 00:40:01,250
0,300 300,570 570,630 630,810 810,1080
{} what it will do
它将会做的是，

1132
00:40:01,250 --> 00:40:02,360
0,540 540,660 660,810 810,930 930,1110
is,| you know it will
|它将读取 auth.py ，

1133
00:40:02,360 --> 00:40:04,550
0,390 390,510 510,780 780,1350 1350,2190
read you know {auth.py -}|
|

1134
00:40:04,760 --> 00:40:06,360
0,660 690,810 810,1230
and {append -}
并在日志中附加一个条目，并对其进行签名，

1135
00:40:06,530 --> 00:40:07,760
0,300 300,450 450,930 930,1110 1110,1230
{} an entry to the

1136
00:40:07,760 --> 00:40:08,980
0,570
log

1137
00:40:13,580 --> 00:40:15,020
0,570 570,1140
and {sign,it},|
|

1138
00:40:17,330 --> 00:40:18,050
0,210 210,300 300,360 360,570 570,720
so in the case when
所以，在读取 auth.py 的情况下，

1139
00:40:18,050 --> 00:40:19,280
0,120 120,390 390,630 630,780 780,1230
it reads {auth.py - -},|
|

1140
00:40:19,280 --> 00:40:21,440
0,420 420,990 1110,1560 1560,1740 1740,2160
it will, {} it produce
它将产生这个日志条目签名。

1141
00:40:21,440 --> 00:40:22,760
0,510 510,570 570,1080 1080,1230 1230,1320
basically a signature or an

1142
00:40:22,760 --> 00:40:24,110
0,330 330,450 450,750 750,1050 1050,1350
entry for this log entry.|
|

1143
00:40:25,150 --> 00:40:26,680
0,360 360,720 720,1200 1290,1440 1440,1530
And basically then and then
然后这个协议的最后一步是，

1144
00:40:26,680 --> 00:40:27,700
0,90 90,390 390,690 690,750 750,1020
the final step in this

1145
00:40:27,760 --> 00:40:30,670
0,840 1020,1350 1350,1470 1470,2100 2670,2910
protocol is,| it uploads the
|它将日志上传到文件服务器，

1146
00:40:30,670 --> 00:40:31,810
0,300 300,390 390,480 480,690 690,1140
log to the file server,|
|

1147
00:40:37,770 --> 00:40:39,480
0,180 180,270 270,390 390,1080 1530,1710
and you know clearly this
这个协议在现实中是未完成的，

1148
00:40:39,480 --> 00:40:42,630
0,300 300,990 990,1680 1770,2340 2340,3150
protocol imcompletely {in,practical},| {} and
|它实际上是，

1149
00:40:42,630 --> 00:40:43,710
0,210 210,480 480,690 690,810 810,1080
and really what it is,|
|

1150
00:40:43,710 --> 00:40:44,730
0,90 90,270 270,330 330,540 540,1020
it's sort of more conceptual
这是一种更具概念性的协议，

1151
00:40:44,730 --> 00:40:46,320
0,420 420,510 510,780 780,900 900,1590
protocol| to help us understand|
|帮助我们理解|

1152
00:40:46,710 --> 00:40:48,360
0,720 720,1080 1080,1200 1200,1410 1410,1650
why eventually we might even
为什么我们最终可能成功地实现安全，

1153
00:40:48,360 --> 00:40:50,610
0,90 90,750 750,870 870,1590 1590,2250
be successful in achieving security,|
|

1154
00:40:50,610 --> 00:40:53,610
0,240 240,330 330,900 900,1440 2250,3000
in the context of {}
在拜占庭服务器的上下文中。

1155
00:40:53,940 --> 00:40:55,080
0,480 480,990
Byzantine server.|
|

1156
00:40:55,540 --> 00:40:56,890
0,390 390,510 510,690 690,1080 1080,1350
Because if we're ridiculous correct
因为如果我们激进地下载每个操作的日志，

1157
00:40:56,890 --> 00:40:58,570
0,330 390,1020 1020,1110 1110,1530 1530,1680
to download the log for

1158
00:40:58,570 --> 00:41:00,370
0,210 210,990 1200,1500 1500,1530 1530,1800
every operation,| and the log
|并且日志包含发生在文件系统上的所有操作的历史，

1159
00:41:00,370 --> 00:41:01,180
0,60 60,300 300,360 360,690 690,810
{contains -} the history of

1160
00:41:01,180 --> 00:41:02,500
0,240 240,330 330,840 840,1020 1020,1320
all the operations ever happened

1161
00:41:02,500 --> 00:41:03,970
0,60 60,150 150,420 420,1020 1230,1470
to the file system,| in
|在第三步中，

1162
00:41:03,970 --> 00:41:05,290
0,270 270,720 720,810 810,960 960,1320
step three,| you know the
|客户端构建了文件系统，

1163
00:41:05,590 --> 00:41:07,180
0,390 390,630 630,1050 1050,1320 1320,1590
client actually constructs file system|
|

1164
00:41:07,180 --> 00:41:08,800
0,150 150,480 480,930 930,1140 1140,1620
and all the, all operations
所有操作从一开始就执行，

1165
00:41:08,830 --> 00:41:10,150
0,270 270,810 810,960 960,1050 1050,1320
ever performance since the beginning

1166
00:41:10,150 --> 00:41:11,950
0,120 120,690 960,1110 1110,1290 1290,1800
of time,| and then finally
|最后在第五步，

1167
00:41:11,950 --> 00:41:13,060
0,120 120,360 360,720 720,1050 1050,1110
in step five,| upload the
|将整个日志上传回服务器，看起来非常荒谬，

1168
00:41:13,060 --> 00:41:13,900
0,210 210,450 450,660 660,750 750,840
whole log back to the

1169
00:41:13,900 --> 00:41:16,330
0,510 750,1110 1110,1440 1440,1980 2190,2430
server, seems completely ridiculous,| and
|这很荒谬，在性能方面，

1170
00:41:16,330 --> 00:41:17,920
0,90 90,240 240,840 1050,1290 1290,1590
it is ridiculous, {} {in,terms,of}

1171
00:41:17,920 --> 00:41:19,390
0,60 60,720 810,1080 1080,1350 1350,1470
{} performance,| {} but it
|但这将帮助我们理解，

1172
00:41:19,390 --> 00:41:21,940
0,150 150,480 480,570 570,1410 1650,2550
will help us understand {}|
|

1173
00:41:21,940 --> 00:41:23,620
0,120 120,240 240,990 990,1320 1350,1680
you know when we look
当我们观察这个方案的实现时，

1174
00:41:23,620 --> 00:41:25,210
0,90 90,210 210,990 1200,1500 1500,1590
at the implementation of the

1175
00:41:25,210 --> 00:41:26,860
0,600 720,990 990,1200 1200,1350 1350,1650
scheme,| {} when it actually
|当它具有相同的属性时，

1176
00:41:26,860 --> 00:41:28,210
0,480 480,810 810,1110 1110,1260 1260,1350
has the same set of

1177
00:41:28,210 --> 00:41:29,260
0,540 540,690 690,780 780,990 990,1050
properties,| that they sort of
|他们的概念设计所有的，

1178
00:41:29,260 --> 00:41:32,170
0,780 900,1560 1560,2130 2610,2760 2760,2910
conceptual design has| and we'll
|我们将看到，在比特币的情况下，

1179
00:41:32,170 --> 00:41:34,480
0,210 210,780 780,1410 1410,1860 1860,2310
see later {you,know,for,example}, {in,the,case,of} {}

1180
00:41:34,480 --> 00:41:36,520
0,660 750,960 960,1410 1410,1740 1740,2040
Bitcoin,| that literally does actually
|从字面上看，它确实有一个日志，

1181
00:41:36,520 --> 00:41:37,840
0,300 300,360 360,870 870,1080 1080,1320
have a log,| and since
|从一开始，所有的操作都在其中，

1182
00:41:37,840 --> 00:41:38,830
0,90 90,450 450,540 540,840 840,990
the beginning of time, with

1183
00:41:38,830 --> 00:41:40,330
0,180 180,720 720,840 840,960 1140,1500
all operations in it| and
|所以，也许这是一个疯狂的想法，

1184
00:41:40,330 --> 00:41:42,310
0,390 600,870 870,1620 1710,1890 1890,1980
so, {} maybe it was

1185
00:41:42,310 --> 00:41:43,480
0,60 60,420 420,810 810,1080 1080,1170
a crazy idea,| maybe in
|也许在 2004 年的背景下，

1186
00:41:43,480 --> 00:41:45,460
0,60 60,360 360,420 420,870 870,1980
the context of 2004,| but
|但是人们确实做了，

1187
00:41:45,460 --> 00:41:46,720
0,120 120,210 210,480 480,720 720,1260
you know people actually do|
|

1188
00:41:46,720 --> 00:41:49,030
0,630 660,1200 1200,1590 1590,1860 1860,2310
{} have these sign logs
对日志进行签名，并维护它。

1189
00:41:49,030 --> 00:41:50,000
0,120 120,300 300,750 750,870
and really maintained it.|
|

1190
00:41:50,680 --> 00:41:51,670
0,180 180,330 330,390 390,600 600,990
And so in that sense,|
所以，从这个意义上说，|

1191
00:41:51,820 --> 00:41:52,840
0,180 180,360 360,570 570,750 750,1020
you know it's not only
这不仅是一个大的概念，

1192
00:41:52,840 --> 00:41:54,190
0,60 60,210 210,720 720,1200 1230,1350
a big conceptual idea,| that
|一些人在实践中这样做了。

1193
00:41:54,190 --> 00:41:54,880
0,120 120,330 330,510 510,600 600,690
some people do it in

1194
00:41:54,880 --> 00:41:55,800
0,660
practice.|
|

1195
00:41:58,340 --> 00:41:59,740
0,180 180,510 510,630 630,1110
Any questions so far?|
到目前为止，有什么问题吗？|

1196
00:42:04,290 --> 00:42:05,440
0,690
Okay.|
好的。|

1197
00:42:05,800 --> 00:42:06,820
0,780

1198
00:42:07,270 --> 00:42:08,350
0,180 180,420 420,750 750,930 930,1080
The one thing you know
你可能在想的一件事，

1199
00:42:08,350 --> 00:42:10,870
0,180 180,1110 1140,1530 1530,2040 2040,2520
that you're probably wondering about,|
|

1200
00:42:10,870 --> 00:42:13,060
0,720 720,1110 1110,1320 1320,2040 2040,2190
{} it was proposed as
这是作为今天阅读的议题提出的，

1201
00:42:13,060 --> 00:42:14,140
0,750
{}

1202
00:42:14,640 --> 00:42:16,110
0,330 330,690 690,780 780,1020 1020,1470
question for the reading today,|
|

1203
00:42:16,320 --> 00:42:17,880
0,810 840,1170 1170,1260 1260,1440 1440,1560
is what is up with
就是这些获取有什么问题，

1204
00:42:17,880 --> 00:42:19,440
0,180 180,630 630,750 750,1320 1320,1560
these fetches,| {you,know} why are
|为什么也要获取日志，

1205
00:42:19,440 --> 00:42:21,150
0,90 90,480 480,660 660,1350 1380,1710
the fetches in the log

1206
00:42:21,150 --> 00:42:23,660
0,540 750,1350 1560,2220
too,| and {}
|因为你可能会想，

1207
00:42:24,030 --> 00:42:26,010
0,300 330,900 1500,1740 1740,1830 1830,1980
and the because you might

1208
00:42:26,010 --> 00:42:26,910
0,150 150,240 240,720 720,780 780,900
think,| {well -}, you know
|我唯一真正关心的是，

1209
00:42:26,910 --> 00:42:27,630
0,90 90,240 240,360 360,450 450,720
the only thing I really

1210
00:42:27,630 --> 00:42:28,800
0,210 210,630 630,750 750,960 960,1170
care about,| if we think
|如果我们想一想，关心的是，

1211
00:42:28,800 --> 00:42:31,260
0,390 420,1230 1530,2010 2010,2220 2220,2460
about, {} really care about

1212
00:42:31,260 --> 00:42:32,790
0,240 450,780 780,840 840,1440 1440,1530
is| only the modifications you
|只有在日志中的修改，

1213
00:42:32,790 --> 00:42:33,330
0,120 120,210 210,390 390,480 480,540
have to be in the

1214
00:42:33,330 --> 00:42:34,470
0,270 270,480 480,600 600,750 750,1140
log,| because there are actually
|因为有一些东西修改了文件系统，

1215
00:42:34,470 --> 00:42:35,940
0,270 270,510 510,930 930,1020 1020,1470
things actually modify the {file,system},|
|

1216
00:42:35,940 --> 00:42:37,110
0,120 210,390 390,630 630,810 810,1170
{reads -} don't really modify
读取并不会修改文件系统，

1217
00:42:37,110 --> 00:42:38,250
0,150 150,390 390,720 720,870 870,1140
this file system,| so what's
|所以，到底是什么问题。

1218
00:42:38,250 --> 00:42:40,680
0,210 210,450 450,540 540,990 1710,2430
the what's the problem. {}|
|

1219
00:42:41,280 --> 00:42:42,390
0,150 150,480 600,810 810,990 990,1110
And so I think I
所以我想在这里做一个快速分组会议室，

1220
00:42:42,390 --> 00:42:43,920
0,180 180,420 420,810 840,1110 1110,1530
wanna do a quick {breakout,room}

1221
00:42:43,920 --> 00:42:45,060
0,330 330,540 540,630 630,810 810,1140
here,| and I'm sure if
|我相信如果你们能互相讨论一下，

1222
00:42:45,090 --> 00:42:45,720
0,120 120,210 210,390 390,570 570,630
you can bring some of

1223
00:42:45,720 --> 00:42:46,620
0,150 150,390 390,540 540,780 780,900
each other,| {} what you
|你认为这个问题的答案是什么，

1224
00:42:46,620 --> 00:42:47,490
0,240 240,330 330,570 570,660 660,870
thought the answer to this

1225
00:42:47,490 --> 00:42:49,560
0,480 480,900 900,1380 1560,1740 1740,2070
particular question was,| and hopefully
|希望像 SUNDR 这样的[初始报道]

1226
00:42:49,560 --> 00:42:53,520
0,600 750,1680 1710,2310 2310,3000 3030,3960
maybe {} this initial {}

1227
00:42:54,340 --> 00:42:56,140
0,540 540,780 780,1320 1320,1500 1500,1800
coverage like {SUNDR -} {}|
|

1228
00:42:56,140 --> 00:42:57,220
0,90 90,180 180,480 480,600 600,1080
you know maybe how to
可能会提高你的理解，

1229
00:42:57,250 --> 00:42:59,770
0,390 390,480 480,1110 1410,2460 2460,2520
improve your understanding,| and you
|你可以弄清楚答案是什么

1230
00:42:59,770 --> 00:43:00,820
0,150 150,300 300,540 540,810 810,1050
know you can {sort,of,figure} out

1231
00:43:00,820 --> 00:43:01,510
0,120 120,240 240,480 480,570 570,690
what the answer is,| or
|或者谈论一些其他的事情，

1232
00:43:01,510 --> 00:43:03,070
0,210 210,360 360,600 600,1020 1230,1560
talking about something else,| so
|所以我想，也许做一个五分钟的分组会议室。

1233
00:43:03,070 --> 00:43:03,610
0,60 60,180 180,300 300,390 390,540
I would like to take,

1234
00:43:03,610 --> 00:43:05,560
0,330 540,1020 1020,1320 1320,1560 1560,1950
{} maybe do {a,five} minutes

1235
00:43:05,590 --> 00:43:07,140
0,600 600,990 990,1260
{} breakout room.|
|

1236
00:43:57,430 --> 00:43:58,340
0,510

1237
00:45:12,500 --> 00:45:13,660
0,870

1238
00:46:06,640 --> 00:46:07,240
0,360

1239
00:46:11,040 --> 00:46:11,720
0,60

1240
00:46:38,630 --> 00:46:39,480
0,750

1241
00:48:54,350 --> 00:48:55,480
0,330

1242
00:48:56,240 --> 00:48:56,900
0,60

1243
00:49:14,180 --> 00:49:15,360
0,600

1244
00:49:18,650 --> 00:49:19,790
0,360 360,480 480,630 630,810 810,1140
Okay, {} just {} checking
好的，检查一下所有人回来了吗？

1245
00:49:19,790 --> 00:49:21,080
0,360 360,900
everybody back?|
|

1246
00:49:21,860 --> 00:49:23,720
0,360 360,480 480,660 1080,1590 1590,1860
Looks like it.| Good, thank
看起来是的。|很好，谢谢。

1247
00:49:23,720 --> 00:49:24,480
0,300
you.|
|

1248
00:49:24,810 --> 00:49:26,370
0,240 240,390 390,570 570,1050 1200,1560
Okay, so what,| I guess,
好的，那么，|我想，让我们从家庭作业的问题开始，

1249
00:49:26,370 --> 00:49:27,390
0,330 330,570 570,660 660,720 720,1020
let's start with the homework

1250
00:49:27,390 --> 00:49:28,300
0,630
questions,|
|

1251
00:49:28,490 --> 00:49:30,680
0,510 510,660 660,930 930,1260 1260,2190
{} with [] question why,
为什么获取要在日志中？

1252
00:49:30,710 --> 00:49:31,670
0,210 210,510 510,570 570,870 870,960
why are the fetches in

1253
00:49:31,670 --> 00:49:32,460
0,90 90,480
the log?|
|

1254
00:49:38,260 --> 00:49:39,240
0,690
Anybody?|
有人知道吗？|

1255
00:49:41,230 --> 00:49:42,430
0,330 330,540 540,690 690,930 930,1200
{} If you have a
如果你有只读服务器，

1256
00:49:42,430 --> 00:49:44,410
0,270 270,690 690,1440 1680,1860 1860,1980
{read-only -} server,| if there
|如果没有获取，

1257
00:49:44,410 --> 00:49:46,750
0,60 60,300 300,930 930,1410 1560,2340
are no fetches,| this {file,system}
|这个文件系统可以为它提供任何东西。

1258
00:49:46,750 --> 00:49:48,320
0,210 210,390 390,630 630,1290
can give it anything.|
|

1259
00:49:48,630 --> 00:49:49,480
0,540
{Can,it}?|
可以吗？|

1260
00:49:49,970 --> 00:49:51,650
0,570 570,750 750,960 960,1320 1320,1680
Can give it, because it,|
可以，因为它，|

1261
00:49:51,830 --> 00:49:53,060
0,480 480,600 600,660 660,840 840,1230
because there are no fetches
因为在日志中没有提取，

1262
00:49:53,060 --> 00:49:54,110
0,150 150,240 240,720 720,870 870,1050
in the log,| that would
|这意味着，

1263
00:49:54,110 --> 00:49:55,940
0,240 240,600 750,1560
mean that {}

1264
00:49:57,250 --> 00:49:59,580
0,330 330,810 930,1350 1350,2040
there are,| there be
|只读服务器不会进行大量的检查，

1265
00:50:00,020 --> 00:50:02,060
0,330 330,870 900,1410 1410,1560 1560,2040
{read-only -} servers would not

1266
00:50:02,060 --> 00:50:02,960
0,600
be

1267
00:50:03,270 --> 00:50:04,350
0,600 600,690 690,900 900,990 990,1080
doing a lot of the

1268
00:50:04,350 --> 00:50:05,520
0,330 330,480 480,600 600,960 960,1170
checks,| that we talked about
|我们之前谈过的，

1269
00:50:05,520 --> 00:50:08,130
0,450 450,780 780,1230 1620,2160 2340,2610
before,| so they {} they
|所以它们回到过去，

1270
00:50:08,130 --> 00:50:09,120
0,180 180,450 450,540 540,870 870,990
go back in time,| for
|可能不起作用，

1271
00:50:09,120 --> 00:50:10,860
0,450 450,810 810,1140 1140,1410 1410,1740
example might maybe not work,|
|

1272
00:50:10,860 --> 00:50:11,720
0,690
because
因为它没有在日志中放任何东西，

1273
00:50:11,930 --> 00:50:13,070
0,240 240,360 360,600 600,780 780,1140
it did not put anything

1274
00:50:13,070 --> 00:50:14,570
0,120 120,210 210,780 900,1200 1200,1500
in the log,| because it
|因为它只获取。

1275
00:50:14,570 --> 00:50:16,760
0,180 180,930 1170,1560 1560,1770 1770,2190
only fetches.| Yeah, okay, good,|
|是的，好的，很好，|

1276
00:50:16,760 --> 00:50:18,650
0,270 270,450 450,690 690,930 930,1890
okay, so I think you're
好的，所以我想你完全是对的，

1277
00:50:18,680 --> 00:50:19,640
0,270 270,330 330,390 390,570 570,960
totally on the right track,|
|

1278
00:50:19,910 --> 00:50:20,900
0,450 450,540 540,660 660,810 810,990
{} it was like trying
试图让它变得更精确一点或更具体，

1279
00:50:20,900 --> 00:50:21,440
0,60 60,210 210,270 270,300 300,540
to make it a little

1280
00:50:21,440 --> 00:50:22,940
0,120 120,300 300,930 1080,1290 1290,1500
bit more precise {} or

1281
00:50:22,940 --> 00:50:24,200
0,180 180,360 360,840 870,1050 1050,1260
make more concrete,| and I
|我想这是正确的。

1282
00:50:24,200 --> 00:50:24,830
0,180 180,270 270,420 420,510 510,630
think you know that is

1283
00:50:24,830 --> 00:50:26,090
0,420 480,630 630,780 780,1110 1110,1260
correct.| So let's assume this
|我们假设这是如下所示的日志，

1284
00:50:26,090 --> 00:50:27,050
0,120 120,240 240,540 540,690 690,960
is the log looks like,|
|

1285
00:50:27,050 --> 00:50:28,310
0,270 270,360 360,750 750,1170 1170,1260
and the C's fetches are
而且 C 的获取不在里面。

1286
00:50:28,310 --> 00:50:29,100
0,270 270,390 390,570
not in it.|
|

1287
00:50:29,480 --> 00:50:31,190
0,630 630,990 990,1290 1290,1410 1410,1710
{} And let's you know,|
让我们，|

1288
00:50:31,190 --> 00:50:32,480
0,360 540,720 720,900 900,960 960,1290
{} so this is the
这是 C 下载之前的日志，

1289
00:50:32,480 --> 00:50:34,730
0,540 540,900 900,1110 1110,1470 1470,2250
log before actually C downloads

1290
00:50:34,880 --> 00:50:36,500
0,570 840,1050 1050,1230 1230,1500 1500,1620
log,| so let's say you
|假设 C 获取 auth.py ，

1291
00:50:36,500 --> 00:50:38,210
0,240 240,780 780,1080 1080,1290 1290,1710
know where C {} {fetches

1292
00:50:40,530 --> 00:50:42,750
0,300 300,600 720,1230 1230,1770 1860,2220
- -}, fetches {} {auth.py

1293
00:50:42,750 --> 00:50:44,190
0,150 150,510 510,900 930,1350 1350,1440
- - -}, {correct -},|
|

1294
00:50:44,190 --> 00:50:45,300
0,120 120,420 420,510 510,630 630,1110
the file that was modified
A 修改的文件，

1295
00:50:45,300 --> 00:50:48,210
0,180 180,690 1530,2190 2220,2790 2790,2910
by A,| and basically what
|服务器所做的，

1296
00:50:48,210 --> 00:50:50,760
0,60 60,360 360,930 1170,1980 2010,2550
the server does,| {} the
|服务器不是提供 A 和 B 的修改，

1297
00:50:50,790 --> 00:50:53,790
0,840 870,1380 1380,1500 1500,2130 2160,3000
server instead of actually providing

1298
00:50:53,790 --> 00:50:55,500
0,360 360,450 450,1080 1080,1500 1500,1710
both the modifications {A,and,B},| because
|因为它拥有它，

1299
00:50:55,500 --> 00:50:57,480
0,120 120,360 360,570 1380,1590 1590,1980
it has it,| which {A,and,B}
|A 和 B 对其进行了修改，

1300
00:50:57,480 --> 00:50:59,280
0,120 120,600 600,870 870,990 990,1800
were done with its modifications,|
|

1301
00:50:59,610 --> 00:51:04,200
0,210 210,690 690,1980 2010,2700 2940,4590
it sends the C {
它发送给 C 前缀，

1302
00:51:04,200 --> 00:51:06,420
0,570 600,1410 1410,2130
-} basically prefix,|
|

1303
00:51:08,880 --> 00:51:11,040
0,300 300,390 390,1080 1500,1890 1890,2160
since the prefix {} that
因为前缀排除了 A 和 B 的修改，

1304
00:51:11,040 --> 00:51:12,280
0,900
excludes

1305
00:51:13,110 --> 00:51:15,390
0,1200 1200,1380 1380,1950 1950,2100 2100,2280
the {} modifications to A

1306
00:51:15,390 --> 00:51:16,160
0,150 150,450
and B,|
|

1307
00:51:16,900 --> 00:51:19,330
0,330 360,540 540,1020 1470,2070 2070,2430
so we have mods A
所以我们有 mod A 和 B ，

1308
00:51:19,330 --> 00:51:23,080
0,210 210,690 3090,3360 3360,3450 3450,3750
and B, right,| and so
|所以 C 获取文件，

1309
00:51:23,080 --> 00:51:24,820
0,420 420,600 600,900 900,1080 1080,1740
C {you,know} fetches this file,|
|

1310
00:51:24,970 --> 00:51:26,650
0,510 510,630 630,990 990,1110 1110,1680
{} it fetches the log,|
它获取日志，|

1311
00:51:26,800 --> 00:51:28,120
0,270 270,420 420,750 750,1200 1200,1320
and so this basically is
这是日志前缀的这一部分，

1312
00:51:28,120 --> 00:51:29,320
0,210 210,480 480,570 570,660 660,1200
this part of the log

1313
00:51:29,680 --> 00:51:30,660
0,780
prefix,|
|

1314
00:51:32,540 --> 00:51:35,060
0,570 570,690 690,1290 1500,2160 2160,2520
{} you know {the,C} {}
C 检查签名，

1315
00:51:35,060 --> 00:51:36,470
0,450 450,570 570,690 690,810 810,1410
checks you know the signature,|
|

1316
00:51:36,470 --> 00:51:38,000
0,270 270,540 540,870 870,1140 1140,1530
{} checks whether it's proceeding
检查进行的操作是否在其中，

1317
00:51:38,000 --> 00:51:39,410
0,510 510,660 660,750 750,960 1290,1410
operations are in it,| you
|它们都在那里，

1318
00:51:39,410 --> 00:51:40,640
0,480 480,660 660,810 810,930 930,1230
know and they're all there,|
|

1319
00:51:40,640 --> 00:51:41,600
0,210 210,360 360,600 600,750 750,960
because C hasn't done any
因为 C 还没有做任何其他的操作，

1320
00:51:41,600 --> 00:51:43,280
0,180 180,630 630,990 1320,1530 1530,1680
other operation yet,| and so
|所以它会接受日志，

1321
00:51:43,280 --> 00:51:44,750
0,390 390,540 540,870 870,930 930,1470
basically {it,will} accept the log,|
|

1322
00:51:44,750 --> 00:51:46,100
0,810 810,900 900,1140 1140,1230 1230,1350
and the log as it
原样的日志或原样的前缀，

1323
00:51:46,100 --> 00:51:47,000
0,180 180,270 270,360 360,750 750,900
is or the prefix as

1324
00:51:47,000 --> 00:51:49,610
0,120 120,450 810,1440 1470,1920 1920,2610
it is,| and basically returns
|并且返回 auth.py 给应用程序，

1325
00:51:49,610 --> 00:51:50,810
0,120 120,300 300,540 540,720 780,1200
you know {auth.py - -}

1326
00:51:50,810 --> 00:51:52,600
0,150 150,690 690,1500
to whatever application,|
|

1327
00:51:52,860 --> 00:51:54,450
0,240 240,360 360,1050 1050,1230 1230,1590
that is copying this software
将这个软件复制到机器中，

1328
00:51:54,450 --> 00:51:55,710
0,330 330,420 420,840 840,990 990,1260
into the machine,| that actually
|运行安装的软件。

1329
00:51:55,770 --> 00:51:57,680
0,480 480,660 660,1140 1140,1620
run the installed software.|
|

1330
00:51:58,130 --> 00:52:00,960
0,180 180,630 870,1320 1320,1980
So then C fetches
然后 C 获取 bank.py ，

1331
00:52:03,670 --> 00:52:08,890
0,390 390,780 780,960 960,1560 4920,5220
{} {bank.py - -},| {and,this}
|这一次，服务器发送整个日志，

1332
00:52:08,890 --> 00:52:11,800
0,240 240,810 960,1410 1410,1530 1530,2910
time around, {} the server

1333
00:52:11,980 --> 00:52:14,580
0,720 750,1530 1560,1860 1860,2250
sends the whole log,|
|

1334
00:52:19,460 --> 00:52:22,730
0,660 660,750 750,1350 1350,2010 2310,3270
and you know {the,C}, {}
C 查看这些条目，

1335
00:52:23,150 --> 00:52:25,550
0,90 90,1200 1200,1260 1260,1680 1680,2400
C looks at these entries,|
|

1336
00:52:25,550 --> 00:52:28,430
0,210 210,600 600,960 960,2220 2220,2880
{and,it's} a valid log,| in
这是一份有效的日志，|操作的前缀，

1337
00:52:28,580 --> 00:52:30,140
0,210 210,780 780,1020 1020,1470 1470,1560
the operations are presumably the

1338
00:52:30,140 --> 00:52:32,210
0,600 1170,1500 1500,1740 1740,1830 1830,2070
prefix,| {} since we didn't
|因为我们不关心获取，

1339
00:52:32,210 --> 00:52:33,650
0,240 240,750 780,1260 1260,1350 1350,1440
care about fetches,| you know
|这些都在日志中，

1340
00:52:33,650 --> 00:52:34,460
0,120 120,240 240,630 630,720 720,810
its all caught in the

1341
00:52:34,460 --> 00:52:36,560
0,510 750,1440 1440,1680 1680,1800 1800,2100
log,| {} and so everything
|所以一切看起来都很好，

1342
00:52:36,560 --> 00:52:38,270
0,300 300,420 420,630 630,990 1080,1710
looks you know good, {}|
|

1343
00:52:38,270 --> 00:52:39,020
0,150 150,210 210,390 390,450 450,750
you know these are valid
这些都是有效的修改，

1344
00:52:39,020 --> 00:52:41,240
0,780 780,1350 1380,1740 1740,1920 1920,2220
modifications,| the nothing has been
|什么都没有改变，

1345
00:52:41,270 --> 00:52:45,020
0,630 1140,1920 2190,2820 3090,3300 3300,3750
changed,| and {} and so
|所以 C 没有从日志中获取，

1346
00:52:45,020 --> 00:52:46,010
0,90 90,240 240,780 780,870 870,990
you know C you know

1347
00:52:46,010 --> 00:52:48,080
0,390 390,480 480,870 870,1440 1590,2070
without the {fetches,in,the} log,| C
|C 会接受这个日志，

1348
00:52:48,080 --> 00:52:50,240
0,120 120,600 600,1260 1410,1650 1650,2160
will actually accept this log,|
|

1349
00:52:50,450 --> 00:52:52,250
0,720 750,1320 1320,1500 1500,1560 1560,1800
and basically build a file
建立一个文件系统，

1350
00:52:52,250 --> 00:52:56,750
0,420 420,600 600,1350 1590,3300 4020,4500
system,| that has, {} {that,deploy}
|包括对 A 和 B 修改，

1351
00:52:56,750 --> 00:52:59,180
0,420 420,900 900,1050 1050,1740 1890,2430
includes modifications to {A,and,B}| and
|并且返回 bank.py 应用程序的结果。

1352
00:52:59,180 --> 00:53:00,500
0,420 420,480 480,1080 1080,1170 1170,1320
returns the results you know

1353
00:53:00,500 --> 00:53:02,270
0,330 330,480 480,1140 1140,1470 1470,1770
to the application for {bank.py

1354
00:53:02,270 --> 00:53:03,240
0,150 150,660
- -}.|
|

1355
00:53:05,490 --> 00:53:06,450
0,180 180,330 330,420 420,540 540,960
So that it can install
这样它可以安装机器，

1356
00:53:06,450 --> 00:53:07,530
0,210 210,600 600,750 750,1020 1020,1080
the machine,| that actually is
|运行服务器，

1357
00:53:07,530 --> 00:53:09,030
0,150 150,210 210,810 810,900 900,1500
going to run the servers|
|

1358
00:53:09,360 --> 00:53:10,620
0,660 660,780 780,870 870,960 960,1260
and as you can see
如你所见，我们的处境很糟糕，

1359
00:53:10,620 --> 00:53:11,310
0,90 90,300 300,480 480,630 630,690
you know we're sort of

1360
00:53:11,310 --> 00:53:12,630
0,90 90,150 150,450 450,990 1020,1320
in a bad situation, right,|
|

1361
00:53:12,630 --> 00:53:14,100
0,540 570,870 870,1080 1080,1170 1170,1470
because we took the old
因为我们使用了旧版本的 auth.py ，

1362
00:53:14,100 --> 00:53:14,960
0,570
version

1363
00:53:15,730 --> 00:53:18,610
0,270 270,510 510,690 720,1350 2490,2880
of {auth.py - -}| and
|以及新版本的 bank.py ，

1364
00:53:18,610 --> 00:53:20,140
0,90 90,270 270,930 960,1230 1230,1530
the new version of {bank.py

1365
00:53:20,140 --> 00:53:21,620
0,390 390,870
- -},|
|

1366
00:53:22,940 --> 00:53:24,110
0,600 630,750 750,930 930,1080 1080,1170
and the one way you
你能想到的一种方式是，

1367
00:53:24,110 --> 00:53:25,160
0,90 90,270 270,540 540,810 810,1050
can think about this is

1368
00:53:25,160 --> 00:53:26,480
0,300 480,630 630,750 750,1260 1260,1320
that,| you know from you
|从 C 的角度来看，

1369
00:53:26,480 --> 00:53:28,730
0,150 150,450 450,1170 1410,1890 1890,2250
know C's perspective,| {} what
|真正发生的事情是，

1370
00:53:28,730 --> 00:53:29,960
0,240 240,450 450,630 630,810 810,1230
really seemed to have happened

1371
00:53:29,960 --> 00:53:33,110
0,210 210,540 540,720 720,2100 2370,3150
is that, { - -}|
|

1372
00:53:34,110 --> 00:53:35,520
0,690 690,810 810,900 900,1020 1020,1410
while you know it was
虽然它读取 auth.py ，

1373
00:53:35,550 --> 00:53:37,650
0,630 630,960 960,1710 1830,1950 1950,2100
reading {auth.py -},| you know
|对 A 和 B 的修改是同时进行的，

1374
00:53:37,650 --> 00:53:39,630
0,150 150,300 300,720 720,1530 1530,1980
there were concurrent modifications to

1375
00:53:39,630 --> 00:53:40,710
0,240 240,360 360,690 690,900 900,1080
A and B,| and just
|基本上是同时发生的，

1376
00:53:40,710 --> 00:53:41,760
0,300 300,660 660,720 720,810 810,1050
happened basically at the same

1377
00:53:41,760 --> 00:53:42,660
0,480 480,570 570,690 690,840 840,900
time| or at least the
|或者至少服务器认为它是同时发生的，

1378
00:53:42,660 --> 00:53:44,250
0,420 420,510 510,1170 1170,1290 1290,1590
server is pretending it happened

1379
00:53:44,250 --> 00:53:45,870
0,90 90,180 180,450 450,870 1350,1620
at the same time,| and
|所以，它被搞糊涂了，

1380
00:53:45,870 --> 00:53:47,580
0,270 270,1350 1350,1440 1440,1530 1530,1710
so and so it gets

1381
00:53:47,580 --> 00:53:48,320
0,600
confused,|
|

1382
00:53:48,550 --> 00:53:50,620
0,270 270,540 540,1170 1350,1650 1650,2070
or can't detect the fact,|
或者无法察觉这样一个事实，|

1383
00:53:50,620 --> 00:53:52,330
0,180 180,420 420,930 930,1380 1380,1710
that these applications were did
这些应用程序在之前就已经发生了。

1384
00:53:52,330 --> 00:53:54,080
0,360 360,960 960,1110 1110,1440
happen before any time.|
|

1385
00:53:55,060 --> 00:53:56,170
0,210 210,390 390,510 510,840 870,1110
So this is the, this
所以这就是问题所在，

1386
00:53:56,170 --> 00:53:57,310
0,120 120,300 300,750 750,1050 1050,1140
is the problem,| that you
|把获取放在日志中，

1387
00:53:57,310 --> 00:53:58,840
0,180 180,750 780,1080 1080,1200 1200,1530
know basically putting the fetches

1388
00:53:58,840 --> 00:54:00,700
0,90 90,180 180,540 570,1170 1170,1860
in the log {[] -},|
|

1389
00:54:01,090 --> 00:54:02,350
0,390 390,600 600,930 930,1110 1110,1260
{} is like let's make
让我们把它变得更加具体，

1390
00:54:02,350 --> 00:54:05,380
0,150 150,540 1110,1530 1560,2340 2430,3030
that actually {} just also

1391
00:54:05,380 --> 00:54:09,490
0,630 2820,3420 3420,3660 3660,3810 3810,4110
concrete,| {} and so see
|看看为什么在这种情况下，这个问题得到了解决。

1392
00:54:09,490 --> 00:54:11,260
0,450 450,810 810,1080 1080,1380 1380,1770
why actually this problem is

1393
00:54:12,100 --> 00:54:13,380
0,420 420,480 480,630 630,1200
solved in that case.|
|

1394
00:54:14,260 --> 00:54:15,400
0,330 330,570 570,960 960,1050 1050,1140
Professor, I I had a
教授，我有个问题。

1395
00:54:15,400 --> 00:54:18,820
0,630 690,1200 1710,2370 2460,3180 3210,3420
question.| Yeah, {} so I
|是的，所以我有点理解不了，

1396
00:54:18,820 --> 00:54:20,170
0,390 390,720 720,870 870,1050 1050,1350
I'm having a little trouble

1397
00:54:20,170 --> 00:54:23,380
0,420 420,750 1050,1560 1560,2220 2610,3210
understand,| like understanding what the,
|比如理解接口，

1398
00:54:23,980 --> 00:54:25,630
0,390 420,660 660,720 720,1470 1500,1650
like sort of like the

1399
00:54:25,630 --> 00:54:29,110
0,780 780,1080 1080,1710 2430,3180 3180,3480
interface,| for like for fetch
|对于获取和修改，

1400
00:54:29,110 --> 00:54:30,550
0,120 120,630 630,810 810,960 960,1440
and modify is like what,|
|

1401
00:54:31,350 --> 00:54:32,730
0,630 690,870 870,1050 1050,1260 1260,1380
{} I I thought you
我想你获取了大概整个树，

1402
00:54:32,730 --> 00:54:34,140
0,720 720,960 960,1140 1140,1320 1320,1410
fetched pretty much like the

1403
00:54:34,140 --> 00:54:36,180
0,720 750,1530 1560,1710 1710,1920 1920,2040
whole tree,| and had to
|不得不重建整个文件系统，

1404
00:54:36,180 --> 00:54:37,800
0,420 420,510 510,750 750,1050 1050,1620
rebuild the whole file system,|
|

1405
00:54:37,860 --> 00:54:41,910
0,990 990,1740 2040,3330 3360,3690 3690,4050
basic example,| but this slide
基本的例子，|但在幻灯片中，获取特定文件之前。

1406
00:54:41,910 --> 00:54:44,610
0,390 390,570 570,1050 1050,1800 1800,2700
before you're fetching specific files.|
|

1407
00:54:44,850 --> 00:54:47,760
0,2310 2310,2520 2520,2640 2640,2700 2700,2910
The server is the one
服务器是返回日志的服务器，

1408
00:54:47,760 --> 00:54:49,170
0,120 120,450 450,570 570,990 1020,1410
that returns the log, correct,|
|

1409
00:54:49,890 --> 00:54:51,360
0,210 210,540 540,720 720,1170 1170,1470
so {the,server} can decide what
所以服务器就可以决定要包括哪些条目。

1410
00:54:51,360 --> 00:54:52,420
0,300 300,390 390,900
entries to include.|
|

1411
00:54:52,640 --> 00:54:54,260
0,600 600,780 780,1050 1050,1170 1170,1620
Yeah.| And we're already seeing
是的。|我们已经看到，

1412
00:54:54,260 --> 00:54:55,910
0,210 210,780 780,1050 1050,1290 1290,1650
that,| it can't really delete
|它不能删除日志中间的任何内容，

1413
00:54:55,910 --> 00:54:56,720
0,300 300,420 420,480 480,570 570,810
anything out in the middle

1414
00:54:56,720 --> 00:54:57,620
0,90 90,150 150,510 540,750 750,900
of the log,| and that's
|这是不可能的，

1415
00:54:57,620 --> 00:54:59,900
0,210 210,480 480,1170 1470,1920 1920,2280
not really possible,| it's {always,send}
|它总是发送日志的前缀，

1416
00:54:59,900 --> 00:55:01,130
0,150 150,600 600,720 720,810 810,1230
a prefix of the log,|
|

1417
00:55:01,160 --> 00:55:02,480
0,270 270,360 360,720 720,840 840,1320
because the prefix is always
因为前缀总是与其本身一致。

1418
00:55:02,480 --> 00:55:05,510
0,510 510,660 660,1260 2190,2730 2730,3030
consistent with itself.| And so
|所以在第一种情况下，

1419
00:55:05,510 --> 00:55:07,020
0,150 150,330 330,750 750,1380
in this first case,

1420
00:55:07,710 --> 00:55:09,690
0,390 390,600 600,690 690,1440 1800,1980
correct,| {it,sends} the prefix,| and
|它发送前缀，|在第二种情况下，发送整个日志。

1421
00:55:09,690 --> 00:55:10,650
0,120 120,420 420,750 750,900 900,960
{in,the} second case, sends the

1422
00:55:10,650 --> 00:55:13,020
0,150 150,630 720,2100 2100,2250 2250,2370
whole log.| Yeah.| So the
|是的。|所以服务器可以决定这样做，

1423
00:55:13,020 --> 00:55:13,860
0,270 270,360 360,660 660,720 720,840
server can decide to do

1424
00:55:13,860 --> 00:55:15,210
0,270 270,510 510,840 840,1230 1230,1350
that,| but there's nothing that
|但客户没有任何可以，

1425
00:55:15,210 --> 00:55:16,770
0,90 90,540 540,1020 1050,1410 1410,1560
the client can,| {or,at,least} it
|或至少到目前为止，

1426
00:55:16,770 --> 00:55:18,120
0,240 240,420 420,900 960,1080 1080,1350
like so far,| you know
|讨论客户端没有，

1427
00:55:18,150 --> 00:55:19,440
0,570 570,900 900,1110 1110,1230 1230,1290
discuss there's nothing that the

1428
00:55:19,440 --> 00:55:20,490
0,510 510,630 630,690 690,960 960,1050
client,| how the client could
|客户如何检测到，

1429
00:55:20,490 --> 00:55:21,840
0,540 540,690 690,780 780,990 990,1350
detect,| that it did get
|它获得了整个日志。

1430
00:55:21,840 --> 00:55:23,580
0,180 180,270 270,450 450,840 1110,1740
like the whole log.| Right,
|是的，我的问题更多的是针对，

1431
00:55:23,580 --> 00:55:25,560
0,600 600,1230 1290,1530 1530,1920 1920,1980
I I my question is

1432
00:55:25,560 --> 00:55:27,120
0,210 210,600 600,900 900,1470 1470,1560
more towards,| like what the
|比如客户端使用的接口，

1433
00:55:27,120 --> 00:55:29,400
0,600 600,1140 1140,1770 1770,1860 1860,2280
{interface,is} for clients to use,|
|

1434
00:55:29,400 --> 00:55:31,020
0,180 180,540 540,690 690,1440
like fetch and modify,
比如获取和修改，

1435
00:55:31,260 --> 00:55:33,330
0,510 810,990 990,1080 1080,1560 1560,2070
like,| because I thought, initially
|因为我想，一开始我想，

1436
00:55:33,330 --> 00:55:35,160
0,120 120,420 420,780 780,1440 1470,1830
I thought,| okay, fetch fetch
|好的，获取整个文件系统。

1437
00:55:35,160 --> 00:55:36,360
0,90 90,270 270,360 360,900 900,1200
is like the whole file

1438
00:55:36,360 --> 00:55:38,160
0,510 540,780 780,1200 1200,1710 1710,1800
system.| No, no, {fetch,is} a
|不，获取是一个单独的文件。

1439
00:55:38,160 --> 00:55:40,140
0,330 330,810 1050,1710
single file.| Okay.|
|好的。|

1440
00:55:40,440 --> 00:55:42,150
0,570 570,840 840,1080 1080,1530 1530,1710
And and so basically what
所以，获取所做的是，

1441
00:55:42,150 --> 00:55:43,170
0,330 330,600 600,810 810,960 960,1020
{the,fetch} does,| it get to
|它获取日志，比如修改，

1442
00:55:43,170 --> 00:55:45,810
0,120 120,390 390,840 840,1470 1980,2640
the log, like modifications,| modifications
|修改是修改文件的所有操作，

1443
00:55:45,810 --> 00:55:46,800
0,120 120,300 300,390 390,870 870,990
are all the operations that

1444
00:55:46,800 --> 00:55:48,780
0,420 420,510 510,960 1380,1860 1860,1980
modify a file,| and like
|如果你回到稍微早一点的幻灯片上，

1445
00:55:48,780 --> 00:55:49,530
0,120 120,240 240,420 420,690 690,750
if you go back to

1446
00:55:49,530 --> 00:55:50,970
0,90 90,390 390,570 570,690 690,1440
a {slide,a} little bit earlier,|
|

1447
00:55:51,000 --> 00:55:52,110
0,150 150,360 360,540 540,630 630,1110
you know in the modification
在修改记录中，

1448
00:55:52,110 --> 00:55:54,210
0,420 420,1200 1200,1470 1470,1950 1980,2100
record,| {it,says,explicitly} which file is
|它明确说明修改的是哪个文件，

1449
00:55:54,210 --> 00:55:57,360
0,210 210,930 2100,2880 2880,3000 3000,3150
being modified,| and you know
|它所说的是，

1450
00:55:57,360 --> 00:55:58,770
0,450 450,600 600,870 870,1020 1020,1410
what's being said is,| similarly
|类似在获取中，

1451
00:55:58,770 --> 00:55:59,790
0,90 90,180 180,690 690,780 780,1020
in the fetch,| it says
|它说哪个文件客户端会看到。

1452
00:55:59,790 --> 00:56:01,200
0,270 270,660 660,960 960,1110 1110,1410
which file like this client

1453
00:56:01,200 --> 00:56:01,780
0,480
saw.|
|

1454
00:56:03,400 --> 00:56:04,420
0,750
Okay.|
好的。|

1455
00:56:04,640 --> 00:56:07,160
0,240 240,900 1200,1560 1560,1920 1920,2520
And then, so so, so
然后，所以对于获取，

1456
00:56:07,190 --> 00:56:09,710
0,720 720,1290 1320,1620 1620,2040 2040,2520
for fetch,| like a client
|客户端通过日志，

1457
00:56:09,710 --> 00:56:11,480
0,300 300,990 1020,1290 1290,1620 1620,1770
goes through the log,| but
|但只看了。

1458
00:56:11,480 --> 00:56:12,860
0,240 240,690 690,1020
only looks at.|
|

1459
00:56:13,130 --> 00:56:13,700
0,150 150,240 240,300 300,510 510,570
{Yeah - -}, feath a
是的，获取所做的是读取它要查看的文件。

1460
00:56:13,700 --> 00:56:14,720
0,120 120,240 240,600 600,840 840,1020
thing that does actually read

1461
00:56:14,720 --> 00:56:15,500
0,60 60,330 330,480 480,690 690,780
the file that actually is

1462
00:56:15,500 --> 00:56:17,300
0,240 240,570 1050,1440 1440,1620 1620,1800
looking for.| Okay, but does
|好的，但它会检查日志中的每一项签名吗？

1463
00:56:17,300 --> 00:56:18,860
0,90 90,480 480,810 810,1200 1200,1560
it check every single entry

1464
00:56:18,860 --> 00:56:20,180
0,90 90,180 180,570 600,1110 1110,1320
in the log anyways for

1465
00:56:20,180 --> 00:56:23,000
0,60 60,660 660,1020 1110,2460 2490,2820
the signature.| {} Yeah, okay,
|是的，好的，第一步总是检查整个日志，

1466
00:56:23,000 --> 00:56:24,260
0,90 90,330 330,540 540,600 600,1260
the first step is always

1467
00:56:24,290 --> 00:56:25,940
0,300 300,360 360,540 540,960 1110,1650
check the whole log,| go
|确保你的最后一次操作在其中，

1468
00:56:25,940 --> 00:56:27,500
0,780 780,1020 1020,1170 1170,1380 1380,1560
for and make sure that

1469
00:56:27,500 --> 00:56:29,630
0,180 180,690 690,780 780,1410 1410,2130
your last you know operations

1470
00:56:29,630 --> 00:56:30,200
0,120 120,240 240,390 390,510 510,570
in it,| whether it's a
|无论是获取还是修改，

1471
00:56:30,200 --> 00:56:32,450
0,270 270,300 300,1080 1320,1860 1860,2250
fetch or modify,| {} although
|尽管在这个失败的方案中，我们放弃了获取，

1472
00:56:32,450 --> 00:56:35,030
0,120 120,480 1080,1560 1560,1950 1950,2580
in this broken scheme, {you,know,we}

1473
00:56:35,030 --> 00:56:37,190
0,270 270,330 330,750 1200,1650 1650,2160
drop the fetches,| {} it
|它应用所有的检查，所有的签名，

1474
00:56:37,190 --> 00:56:38,810
0,510 510,780 780,1290 1290,1530 1530,1620
applies all the checks, all

1475
00:56:38,810 --> 00:56:40,370
0,90 90,840 1110,1260 1260,1470 1470,1560
the signatures,| and then it
|然后它构建文件系统，

1476
00:56:40,370 --> 00:56:42,050
0,300 300,660 690,1080 1080,1410 1410,1680
builds up {} the file

1477
00:56:42,050 --> 00:56:42,480
0,330
system,|
|

1478
00:56:42,970 --> 00:56:44,260
0,390 390,810 810,900 900,1170 1170,1290
by replaying the log from
通过从头开始重放日志，

1479
00:56:44,260 --> 00:56:45,310
0,60 60,360 360,480 480,900 900,1050
the beginning of time,| get
|获取文件系统，

1480
00:56:45,310 --> 00:56:46,630
0,60 60,330 330,810 900,1050 1050,1320
a file system,| and then
|然后它开始执行操作，

1481
00:56:46,630 --> 00:56:48,190
0,120 120,330 330,540 540,1140 1200,1560
it does its operation,| and
|所以在本例中，

1482
00:56:48,190 --> 00:56:48,790
0,120 120,180 180,300 300,510 510,600
so in this case,| the
|操作当然是读取 auth.py ，是读取它。

1483
00:56:48,790 --> 00:56:50,350
0,480 480,570 570,900 900,1350 1350,1560
operation is certainly fetched {auth.py

1484
00:56:50,350 --> 00:56:51,880
0,510 510,660 660,960 960,1290 1290,1530
-}, is basically reading it.|
|

1485
00:56:52,520 --> 00:56:54,290
0,510 660,810 810,1170 1170,1500 1500,1770
Okay.| The reason {you,know,basically -}
好的。|我们讨论 fetch 和 modify 的原因是，

1486
00:56:54,290 --> 00:56:55,160
0,90 90,240 240,480 480,690 690,870
that we talk about fetch

1487
00:56:55,160 --> 00:56:56,390
0,60 60,570 570,780 780,1020 1020,1230
and modify is,| because all
|因为所有操作都是在一个或两个[]，

1488
00:56:56,390 --> 00:56:58,280
0,450 450,600 600,1290 1320,1680 1680,1890
operations are basically following one

1489
00:56:58,280 --> 00:56:59,240
0,90 90,210 210,570 570,840 840,960
or two [],| either to
|要么是获取，要么是修改操作，

1490
00:56:59,240 --> 00:57:00,060
0,570
fetch

1491
00:57:00,320 --> 00:57:02,660
0,720 720,870 870,1110 1110,1860 1860,2340
or it is a modification

1492
00:57:02,660 --> 00:57:04,160
0,450 450,780 780,1020 1020,1110 1110,1500
operation,| like writing a file,
|比如写入文件，创建文件，

1493
00:57:04,160 --> 00:57:05,240
0,330 330,450 450,810 810,960 960,1080
creating a file,| there's {all
|都是修改操作，

1494
00:57:05,240 --> 00:57:07,610
0,420 480,1080 1080,1800 1890,2070 2070,2370
-} modification operations,| the fetch
|获取操作是读取文件，[]目录状态文件，

1495
00:57:07,610 --> 00:57:09,380
0,540 540,840 870,1200 1200,1320 1320,1770
operations are reading a file,

1496
00:57:09,380 --> 00:57:12,410
0,510 540,1350 1350,2130 2160,2640 2640,3030
maybe [] directory status file,|
|

1497
00:57:12,410 --> 00:57:13,260
0,150 150,270 270,330 330,600
that kind of thing.|
这种之类的东西。|

1498
00:57:13,730 --> 00:57:15,260
0,450 480,630 630,780 780,870 870,1530
Okay, and then the {modify,is}
好的，然后 modify 也是，

1499
00:57:15,260 --> 00:57:17,080
0,660 870,1380
also,| like
|modify 不会获取，

1500
00:57:17,890 --> 00:57:20,260
0,360 360,450 450,1170 1200,1740 1740,2370
{} a modify, like doesn't

1501
00:57:20,260 --> 00:57:22,840
0,1080 1290,1530 1530,1860 1860,2190 2190,2580
fetch the,| okay, also fetches
|好的，也会获取日志，

1502
00:57:22,840 --> 00:57:25,300
0,90 90,390 390,540 540,1050 1800,2460
the log,| but then builds
|然后构建文件系统。

1503
00:57:25,300 --> 00:57:27,040
0,150 150,390 390,870 900,1560 1560,1740
the file system.| Yeah, so
|是的，所以我在这里使用的 fetch ，

1504
00:57:27,040 --> 00:57:28,150
0,210 210,540 540,810 810,990 990,1110
maybe the fetches here, I'm

1505
00:57:28,150 --> 00:57:28,930
0,240 240,480 480,480 480,690 690,780
using fetch,| I guess in
|我想有两种方式，

1506
00:57:28,930 --> 00:57:30,880
0,180 180,720 750,1260 1260,1740 1740,1950
two ways,| one describe {read-only
|一个是只读操作，

1507
00:57:30,880 --> 00:57:33,280
0,270 270,1020 1200,1440 1440,1770 1770,2400
-} operations,| and actually to
|并且从服务器获取或接收日志。

1508
00:57:33,310 --> 00:57:34,960
0,540 540,630 630,1110 1110,1230 1230,1650
obtain or receive the log

1509
00:57:34,960 --> 00:57:35,840
0,180 180,270 270,720
from the server.|
|

1510
00:57:36,170 --> 00:57:38,540
0,570 840,1050 1050,1320 1320,1920 1920,2370
Okay, but then modify modifies
好的，然后 modify 修改一个单独的文件。

1511
00:57:38,540 --> 00:57:40,910
0,210 210,510 510,840 840,1440 1770,2370
also one single file.| Yes,
|是的，对于文件系统的每一次修改，

1512
00:57:41,090 --> 00:57:42,560
0,180 180,360 360,630 630,1350 1350,1470
yeah, for every modification in

1513
00:57:42,560 --> 00:57:43,520
0,120 120,330 330,690 690,810 810,960
the file system,| you're gonna
|你会有一个日志条目。

1514
00:57:43,520 --> 00:57:44,640
0,150 150,210 210,450 450,840
have a log entry.|
|

1515
00:57:44,900 --> 00:57:45,680
0,570
{Okay\,,thanks}.|
好的，谢谢。|

1516
00:57:47,900 --> 00:57:50,150
0,480 570,900 900,990 990,1530 1860,2250
{} Sorry, I also have
抱歉，我也有一个问题，

1517
00:57:50,150 --> 00:57:52,070
0,60 60,510 510,1110 1110,1530 1560,1920
a question,| I {} I
|我真的不明白为什么这个场景是个问题，

1518
00:57:52,490 --> 00:57:54,590
0,360 360,690 690,1560 1560,1890 1890,2100
don't really understand why this

1519
00:57:54,590 --> 00:57:56,440
0,540 540,690 690,780 780,1560
scenario is a problem,|
|

1520
00:57:56,750 --> 00:57:58,800
0,480 480,660 660,810 810,1620
because as you said,|
因为就像你说的，|

1521
00:57:58,970 --> 00:58:00,620
0,390 450,690 690,1290 1290,1470 1470,1650
it's it's possible,| like from
这是可能的，|从客户端的角度来看，

1522
00:58:00,620 --> 00:58:01,940
0,90 90,540 540,660 660,810 810,1320
the perspective of the client,|
|

1523
00:58:01,940 --> 00:58:03,050
0,90 90,300 300,600 600,750 750,1110
it may well be that,|
很可能是，|

1524
00:58:03,230 --> 00:58:06,590
0,870 870,1350 1800,2310 2730,3270 3270,3360
{A,and,B} got {} created or
A 和 B 创建或修改了最后一次 fetch 。

1525
00:58:06,590 --> 00:58:09,530
0,930 1380,1770 1770,1920 1920,2310 2310,2940
modified, for the last fetch.|
|

1526
00:58:09,650 --> 00:58:10,670
0,210 210,300 300,750 750,840 840,1020
Yeah, in principle, it could
是的，原则上，这是有可能发生的，

1527
00:58:10,670 --> 00:58:11,780
0,240 240,630 630,840 840,960 960,1110
have happen, correct,| that was
|这是[恢复的]修改，

1528
00:58:11,780 --> 00:58:13,850
0,360 360,1020 1200,1470 1470,1680 1680,2070
[recovering] modification,| we do know,|
|我们知道，|

1529
00:58:13,850 --> 00:58:15,440
0,390 390,600 600,750 750,1320 1350,1590
because like we were sort
因为我们是从上面看的，

1530
00:58:15,440 --> 00:58:16,880
0,150 300,720 720,870 870,960 960,1440
of look from the top,|
|

1531
00:58:17,120 --> 00:58:18,290
0,330 330,450 450,660 660,810 810,1170
and we know that basically
我们知道，在 A 和 B 修改后， C 读取了文件，

1532
00:58:18,290 --> 00:58:19,790
0,360 360,540 540,810 810,930 930,1500
C you read the file,

1533
00:58:19,850 --> 00:58:21,470
0,630 630,780 780,870 870,1020 1020,1620
after A and B modified,|
|

1534
00:58:22,860 --> 00:58:24,480
0,180 180,240 240,780 780,930 930,1620
but the server can pretend
但服务器可以认为它同时发生，

1535
00:58:24,540 --> 00:58:25,470
0,180 180,300 300,420 420,690 690,930
as if it actually happened

1536
00:58:25,470 --> 00:58:27,240
0,630 690,1050 1050,1470 1470,1680 1680,1770
concurrently,| and {} in the
|稍后我们将看到，

1537
00:58:27,240 --> 00:58:28,380
0,300 300,420 420,660 660,960 960,1140
second, we'll see that,| if
|如果我们把 fetch 放在日志中，

1538
00:58:28,380 --> 00:58:29,460
0,300 300,570 570,660 660,990 990,1080
we stick the fetches in

1539
00:58:29,460 --> 00:58:30,930
0,60 60,540 600,960 960,1110 1110,1470
the log,| server can not
|服务器不能认为是这样的。

1540
00:58:30,930 --> 00:58:31,880
0,210 210,300 300,390 390,660
pretend to do that.|
|

1541
00:58:33,240 --> 00:58:34,740
0,420 420,630 630,1050 1050,1290 1290,1500
Okay, but even if the
好的，但是即使服务器认为是这样，

1542
00:58:34,740 --> 00:58:37,500
0,630 630,1140 1140,1740 1770,2220 2220,2760
server pretends that,| does it,
|这是个问题吗，

1543
00:58:38,500 --> 00:58:39,820
0,390 390,720 720,930 930,1140 1140,1320
{} is that even a

1544
00:58:39,820 --> 00:58:41,590
0,630 630,810 810,930 930,1260 1260,1770
problem,| does it break anything,|
|它有没有打破什么东西，|

1545
00:58:41,590 --> 00:58:44,530
0,300 300,540 600,2430 2430,2790 2790,2940
because.| Yeah, {this,is,a} example where
因为。|是的，这是一个展示如何打破东西的例子，

1546
00:58:44,530 --> 00:58:45,250
0,90 90,300 300,390 390,480 480,720
it shows how to break

1547
00:58:45,250 --> 00:58:47,740
0,330 330,840 1110,1680 1710,2040 2040,2490
something, correct,| like step one,
|比如第一步， C 获取的是 auth.py ，

1548
00:58:48,300 --> 00:58:49,590
0,210 210,540 540,810 810,900 900,1290
{you,know} C {fetches -} {auth.py

1549
00:58:49,590 --> 00:58:51,180
0,510 660,810 810,1200 1200,1410 1410,1590
-},| the server gave it
|服务器给了它一个，

1550
00:58:51,180 --> 00:58:53,130
0,690 930,1050 1050,1380 1380,1770 1770,1950
one,| you know as far
|关于获取，它给了前缀，

1551
00:58:53,130 --> 00:58:54,690
0,90 90,210 210,870 900,1140 1140,1560
as the fetch, it gave

1552
00:58:54,690 --> 00:58:55,820
0,150 150,840
the prefix,|
|

1553
00:58:56,260 --> 00:58:57,430
0,210 210,300 300,360 360,750 750,1170
and so the client constructed
所以客户端构建了文件系统，

1554
00:58:57,430 --> 00:58:59,230
0,270 270,600 600,1050 1050,1110 1110,1800
file system,| executing the operation,|
|执行该操作，|

1555
00:58:59,230 --> 00:59:00,910
0,540 540,780 780,1140 1140,1350 1350,1680
returned {auth.py - -} to
将 auth.py 返回给应用程序，

1556
00:59:00,910 --> 00:59:02,800
0,150 150,1170 1170,1350 1350,1800 1800,1890
the application,| and install the
|并在机器上安装软件，

1557
00:59:02,800 --> 00:59:04,120
0,450 450,570 570,630 630,1020 1080,1320
software on the machine,| just
|为了让它非常[]，

1558
00:59:04,120 --> 00:59:05,680
0,90 90,210 210,270 270,570 600,1560
to make it very [],|
|

1559
00:59:05,860 --> 00:59:07,480
0,390 420,810 810,930 930,1380 1410,1620
so now the first, you're
所以现在第一个，读取 auth.py 已经完成，

1560
00:59:07,480 --> 00:59:09,100
0,300 300,540 540,720 720,1200 1200,1620
reading {auth.py -} that operation

1561
00:59:09,100 --> 00:59:11,680
0,120 120,480 900,1590 1590,1890 1890,2580
is done,| finished already executed,|
|完成已执行，|

1562
00:59:11,920 --> 00:59:14,020
0,720 750,990 990,1560 1590,1740 1740,2100
and has installed the old
在计算机上安装了旧版本的 auth.py ，

1563
00:59:14,020 --> 00:59:16,150
0,540 780,1110 1110,1350 1350,1530 1560,2130
version of {auth.py - -}

1564
00:59:16,150 --> 00:59:17,080
0,270 270,360 360,750
on the machine,|
|

1565
00:59:18,700 --> 00:59:20,260
0,450 480,570 570,1170 1200,1380 1380,1560
then the client {you,know} can
然后客户端可以获取 bank.py ，

1566
00:59:20,260 --> 00:59:22,240
0,240 240,450 450,810 810,1440 1440,1980
fetch is {bank.py - -},|
|

1567
00:59:23,050 --> 00:59:25,750
0,450 450,960 960,1590 1770,2430 2430,2700
now {the,server} actually, { -}
现在服务器，客户端应用程序想要读取 bank.py ，

1568
00:59:25,750 --> 00:59:27,340
0,600 600,870 870,1350 1350,1500 1500,1590
{the,client} the application want to

1569
00:59:27,340 --> 00:59:29,710
0,360 360,780 780,1350 1470,1950 1950,2370
read {bank.py -},| {so,the,client} fetches
|所以客户端从服务器获取日志，

1570
00:59:29,710 --> 00:59:30,970
0,90 90,450 450,600 600,690 690,1260
the log from the server|
|

1571
00:59:31,180 --> 00:59:32,470
0,360 360,660 660,720 720,1050 1050,1290
or ask the server, please
或者要求服务器，请把日志给我，

1572
00:59:32,470 --> 00:59:33,820
0,180 180,270 270,360 360,840 1200,1350
give me the log,| the
|这一次，服务器给出了整个日志，

1573
00:59:33,820 --> 00:59:34,900
0,240 240,420 420,630 630,930 930,1080
server this time around gives

1574
00:59:34,900 --> 00:59:35,880
0,90 90,330 330,810
the whole log,|
|

1575
00:59:36,240 --> 00:59:37,620
0,120 120,510 510,720 720,780 780,1380
and not just the prefix.|
而不仅是前缀。|

1576
00:59:38,010 --> 00:59:40,050
0,600 600,1080 1080,1380 1410,1920 1920,2040
{Yeah\,,but}.| {The,[]} that builds up
是的，但是。|[]构建整个文件系统，

1577
00:59:40,050 --> 00:59:41,340
0,90 90,240 240,510 510,990 1020,1290
the whole file system| and
|并将 bank.py 返回给应用程序。

1578
00:59:41,340 --> 00:59:43,170
0,570 570,810 810,1230 1230,1530 1530,1830
returns {bank.py - -} to

1579
00:59:43,170 --> 00:59:44,220
0,120 120,720
the application.|
|

1580
00:59:44,830 --> 00:59:47,410
0,390 390,750 780,1200 1320,1560 2220,2580
But in like, {} wouldn't
但是，这不会在不正确的客户端实现中发生吗，

1581
00:59:47,410 --> 00:59:48,940
0,180 180,660 660,810 810,990 990,1530
this happen in an incorrect

1582
00:59:48,940 --> 00:59:50,470
0,630 630,750 750,870 870,1290 1290,1530
implementation of the client,| because
|因为如果客户端发现收到日志，

1583
00:59:50,470 --> 00:59:52,030
0,120 120,240 240,750 750,1200 1200,1560
if the client finds that

1584
00:59:52,480 --> 00:59:54,250
0,450 450,600 600,1200 1290,1620 1620,1770
receives the log,| and it
|它看到了对 A 的额外修改，

1585
00:59:54,250 --> 00:59:56,260
0,420 420,540 540,1080 1080,1740 1740,2010
sees an additional modification on

1586
00:59:56,260 --> 00:59:58,420
0,510 720,1050 1050,1170 1170,1650 1650,2160
A,| if the client knows
|如果客户端知道逻辑依赖于 A 和 B 同步，

1587
00:59:58,420 --> 01:00:00,670
0,390 630,930 930,1350 1350,1860 1860,2250
that its logic depends on

1588
01:00:00,700 --> 01:00:01,720
0,210 210,390 390,570 570,870 870,1020
A and B {being -}

1589
01:00:01,720 --> 01:00:02,950
0,330 330,420 420,570 570,870 870,1230
{in,sync},| it would also fetch
|它还会再次获取 A 。

1590
01:00:02,950 --> 01:00:05,590
0,0 0,690 1650,1770 1770,1920 1920,2640
A again.| Okay, so there's
|好的，有个问题，

1591
01:00:05,590 --> 01:00:08,230
0,270 270,1080 1350,1740 1740,2040 2040,2640
a question,| C doesn't know,
|C 不知道，

1592
01:00:08,290 --> 01:00:10,460
0,540 540,1050 1380,1830
correct,| that, {}
|C 是，

1593
01:00:12,460 --> 01:00:14,000
0,330 330,870 900,1200
is C,| okay,
|好的，在这个特殊的场景中，

1594
01:00:15,420 --> 01:00:17,580
0,150 150,300 300,570 570,1290 1500,2160
in this particular scenario, {}|
|

1595
01:00:18,390 --> 01:00:20,700
0,870 1110,1560 1560,1770 1770,1830 1830,2310
the we're trying to establish
我们试图确定是否，

1596
01:00:20,700 --> 01:00:21,900
0,300 300,840 840,900 900,1020 1020,1200
whether actually,| you know C
|C 可以确定，

1597
01:00:21,900 --> 01:00:23,190
0,120 120,570 570,810 810,1080 1080,1290
can determine| whether actually {modification
|修改是同时发生的还是在过去发生的，

1598
01:00:23,190 --> 01:00:25,440
0,510 510,780 780,1560 1620,2130 2130,2250
-} happens concurrently or in

1599
01:00:25,440 --> 01:00:27,180
0,90 90,720 720,1080 1080,1380
the past,| before reading,|
|在读取之前，|

1600
01:00:27,480 --> 01:00:28,230
0,210 210,360 360,570 570,630 630,750
{you,know} we want to be
我们想是这种情况，

1601
01:00:28,230 --> 01:00:29,220
0,90 90,150 150,510 510,720 720,990
in the case,| that actually
|这在过去发生过，

1602
01:00:29,220 --> 01:00:30,210
0,300 300,360 360,420 420,750 750,990
happened in the past,| because
|因为确实发生在过去，

1603
01:00:30,210 --> 01:00:31,260
0,270 270,540 540,870 870,960 960,1050
actually really happened in the

1604
01:00:31,260 --> 01:00:32,040
0,540
past,|
|

1605
01:00:32,110 --> 01:00:33,460
0,600 630,720 720,810 810,1020 1020,1350
but you know what this
但是这个服务器所做的，

1606
01:00:33,460 --> 01:00:35,170
0,90 90,540 540,960 990,1320 1320,1710
you know {} server does,|
|

1607
01:00:35,200 --> 01:00:36,160
0,150 150,300 300,780 780,900 900,960
it just pretends that the
它只是认为修改是同时进行的，

1608
01:00:36,160 --> 01:00:39,130
0,630 630,930 930,1440 1470,2550 2610,2970
modification actually happened concurrently,| with
|看到了操作，

1609
01:00:39,130 --> 01:00:41,180
0,330 330,840 870,1800
actually sees operations,|
|

1610
01:00:41,860 --> 01:00:43,810
0,540 540,1170 1170,1440 1440,1680 1680,1950
{} and C doesn't really
C 没有任何方法可以检测到这一点，

1611
01:00:43,810 --> 01:00:45,160
0,300 300,450 450,630 630,750 750,1350
have any way to detect

1612
01:00:45,160 --> 01:00:46,990
0,360 450,870 870,1230 1230,1710 1710,1830
that,| other than {a,new} you
|除了一个新的也许 A ，

1613
01:00:46,990 --> 01:00:48,790
0,210 210,750 780,1590 1590,1680 1680,1800
know maybe A,| you know
|A 和 B 应该一起修改，

1614
01:00:48,790 --> 01:00:49,390
0,150 150,300 300,390 390,540 540,600
there should have been a

1615
01:00:49,390 --> 01:00:50,470
0,480 480,690 690,810 810,960 960,1080
modification for A and B

1616
01:00:50,470 --> 01:00:51,260
0,540
together,|
|

1617
01:00:51,500 --> 01:00:52,760
0,480 510,660 660,840 840,1110 1110,1260
{} but that only could
但这只有可能知道，

1618
01:00:52,760 --> 01:00:53,660
0,120 120,450 450,570 570,750 750,900
have known,| if there were
|如果 C 和 A B 之间有某种通信，

1619
01:00:53,660 --> 01:00:55,010
0,150 150,210 210,720 720,960 960,1350
sort of communication between C

1620
01:00:55,010 --> 01:00:56,390
0,150 150,240 240,360 360,690 720,1380
and A and B,| and
|我们待会再谈这个问题，

1621
01:00:56,420 --> 01:00:57,350
0,300 300,450 450,630 630,780 780,930
second, let's talk about that

1622
01:00:57,350 --> 01:00:58,220
0,90 90,150 150,420 420,630 630,870
in a second,| but if
|但是如果 C 没有和 A B 通信，

1623
01:00:58,400 --> 01:00:59,360
0,270 270,420 420,660 660,870 870,960
C had not talked to

1624
01:00:59,360 --> 01:01:01,610
0,600 810,1200 1200,1260 1260,1680 1830,2250
{A,and,B}| and you know yeah
|它可能会，

1625
01:01:01,610 --> 01:01:03,200
0,240 240,390 390,510 510,900 900,1590
it could have gotten, {}|
|

1626
01:01:03,230 --> 01:01:04,490
0,330 330,840 840,990 990,1170 1170,1260
{} could end up in
可能会是这种情况，

1627
01:01:04,490 --> 01:01:06,140
0,150 150,870 870,1110 1110,1200 1200,1650
this scenario,| where it installed
|它安装了旧版本的 auth.py ，

1628
01:01:06,140 --> 01:01:08,180
0,90 90,300 300,750 930,1380 1380,2040
the old version in {auth.py

1629
01:01:08,180 --> 01:01:09,170
0,360 360,450 450,630 630,930 930,990
-},| the new version of
|新版本的 bank.py 。

1630
01:01:09,170 --> 01:01:10,180
0,270 270,390 390,780
{bank.py - -}.|
|

1631
01:01:10,640 --> 01:01:11,240
0,120 120,210 210,450 450,510 510,600
And we'll see in the
我们稍后会看到，

1632
01:01:11,240 --> 01:01:12,230
0,300 300,510 510,630 630,900 900,990
second,| if we stick the
|如果我们把 fetch 放进去，

1633
01:01:12,230 --> 01:01:13,790
0,330 330,720 780,990 990,1140 1140,1560
fetches in,| then this probably
|那么这种情况不会发生。

1634
01:01:13,790 --> 01:01:14,840
0,360 360,720
cannot happen.|
|

1635
01:01:17,720 --> 01:01:19,190
0,330 330,660 660,780 780,1170 1200,1470
Somebody asked, if we {timestamp
有人问，如果给每个东西都加了时间戳，

1636
01:01:19,190 --> 01:01:20,780
0,330 330,780 780,1380 1380,1500 1500,1590
-} everything,| then we could
|然后我们检测东西，

1637
01:01:20,780 --> 01:01:22,310
0,360 360,780 810,1080 1080,1290 1290,1530
detect things,| hold that thought
|这个想法先稍等一下。

1638
01:01:22,310 --> 01:01:23,160
0,90 90,150 150,480
for a second.|
|

1639
01:01:25,450 --> 01:01:26,740
0,240 240,450 450,630 630,720 720,1290
Okay, let's look at the
好的，让我们看看包含 fetch 的场景，

1640
01:01:27,190 --> 01:01:30,130
0,480 480,870 870,1830 1890,2370 2580,2940
with fetches scenario, right,| so
|所以看看在这种情况下会发生什么，

1641
01:01:30,130 --> 01:01:31,480
0,330 330,780 780,1020 1020,1290 1290,1350
see what actually happens in

1642
01:01:31,480 --> 01:01:34,420
0,180 180,660 780,1140 1740,2310 2310,2940
that case,| so client fetches,
|所以，客户端获取 auth.py 。

1643
01:01:36,940 --> 01:01:37,780
0,180 180,270 270,390 390,690 690,840
what is the fetches of

1644
01:01:37,780 --> 01:01:39,320
0,270 270,1080
{auth.py -}.|
|

1645
01:01:41,740 --> 01:01:43,220
0,330 330,540 540,780 780,1200
Oops, what happened now.|
糟糕，现在发生了什么。|

1646
01:01:43,520 --> 01:01:44,420
0,660

1647
01:01:45,430 --> 01:01:46,820
0,840

1648
01:01:48,660 --> 01:01:50,460
0,510 510,930 930,1560
{} {Hold,on,a} second,
稍等一下，出了点问题。

1649
01:01:51,320 --> 01:01:53,340
0,540 690,1080 1080,1710
{} something wrong.|
|

1650
01:01:53,780 --> 01:01:55,130
0,390 390,660 660,810 810,1110 1110,1350
{I,presumably} nobody can see my
我想现在没人能看到我的屏幕。

1651
01:01:55,130 --> 01:01:56,700
0,420 720,1260
screen {}.|
|

1652
01:02:03,010 --> 01:02:06,740
0,210 210,810 840,3030
It's black.| {Yeah\,,yeah\,,coming,back\,,hold,on,a,second}.|
它是黑的。|是的，稍等一下，回来。|

1653
01:02:07,160 --> 01:02:08,200
0,720

1654
01:02:10,850 --> 01:02:12,350
0,390 390,750 750,930 930,1230 1230,1500
{} {I,definitely} feel today, there's
我今天绝对觉得， 6.824 有一个拜占庭的成分。

1655
01:02:12,350 --> 01:02:14,600
0,240 270,720 720,990 990,1260 1740,2250
a {Byzantine - -} component

1656
01:02:14,600 --> 01:02:15,940
0,360 360,510 510,660 660,1020
to {6.824 - -}.|
|

1657
01:02:16,450 --> 01:02:17,360
0,630

1658
01:02:32,480 --> 01:02:34,010
0,300 300,510 510,870 870,1200 1200,1530
Okay, {I,need,to} stop sharing screen
好的，我需要暂停一下分享屏幕。

1659
01:02:34,010 --> 01:02:34,840
0,60 60,90 90,480
for a second.|
|

1660
01:03:21,610 --> 01:03:23,580
0,660 660,780 780,990 990,1470
Alright, we're back hopefully.|
好的，希望我们回来了。|

1661
01:03:24,730 --> 01:03:26,220
0,540 570,1170
Okay. {}|
好的。|

1662
01:03:28,320 --> 01:03:29,880
0,270 270,1230

1663
01:03:32,090 --> 01:03:34,460
0,480 780,1320 1560,1740 1740,2040 2040,2370
Okay, {} so back to
好的，回到这个例子，

1664
01:03:34,460 --> 01:03:36,920
0,900 930,1110 1110,1980 2010,2250 2250,2460
{} this example,| where now
|现在 fetch 在日志中，

1665
01:03:36,920 --> 01:03:37,790
0,120 120,420 420,690 690,810 810,870
the fetches are in the

1666
01:03:37,790 --> 01:03:39,470
0,390 390,660 660,1050 1050,1410 1410,1680
log,| C fetches the {auth.py
|C 获取 auth.py 。

1667
01:03:39,470 --> 01:03:40,540
0,150 150,300 300,750
- - -}.|
|

1668
01:03:42,300 --> 01:03:44,020
0,150 150,540 540,630 630,1230
So let me continue,
所以让我继续，

1669
01:03:44,970 --> 01:03:47,020
0,840 1260,1860
right then,|
|

1670
01:03:48,960 --> 01:03:50,540
0,360 360,570 570,810 810,1290
save this for just.|
把这个保存下来。|

1671
01:03:51,730 --> 01:03:54,010
0,270 270,1080 1080,1350 1350,1560 1560,2280
{} {C,fetches} {auth.py - -},|
C 获取 auth.py ，|

1672
01:03:54,100 --> 01:03:56,620
0,360 360,930 960,1800 1950,2340 2340,2520
{} the server sends the
服务器发送前缀，

1673
01:03:56,620 --> 01:03:57,860
0,660
prefix,|
|

1674
01:04:03,180 --> 01:04:04,500
0,270 270,600 600,1140 1140,1260 1260,1320
so basically sends you know
所以发送这些修改，

1675
01:04:04,500 --> 01:04:06,060
0,270 270,1320
these modifications,

1676
01:04:06,300 --> 01:04:07,500
0,570 570,630 630,930 930,1080 1080,1200
correct,| the server can just
|服务器可以返回它想返回的任何内容，

1677
01:04:07,500 --> 01:04:09,900
0,360 360,660 660,720 720,1230 1620,2400
return whatever it likes, {}|
|

1678
01:04:09,930 --> 01:04:11,910
0,690 900,1590 1590,1680 1680,1800 1800,1980
then {} you know in
然后，在这个新的方案中，

1679
01:04:11,910 --> 01:04:13,710
0,180 180,540 540,930 930,1200 1200,1800
this new plan, correct,| where
|fetch 是日志，

1680
01:04:13,710 --> 01:04:15,270
0,390 390,660 660,900 900,1140 1140,1560
the fetches are being log,|
|

1681
01:04:15,540 --> 01:04:18,750
0,810 930,1770 2130,2490 2490,2970 2970,3210
then, {} C constructs file
然后， C 使用 A 和 B 构建文件系统，

1682
01:04:18,750 --> 01:04:20,100
0,330 330,600 600,750 750,900 900,1350
system using A and B,|
|

1683
01:04:20,310 --> 01:04:22,860
0,600 600,930 930,1500 1530,2250 2250,2550
{} and then returns of
然后将 auth.py 返回给客户端，

1684
01:04:22,860 --> 01:04:23,850
0,300 300,390 390,480 480,720 720,990
course you know {auth.py -

1685
01:04:23,850 --> 01:04:25,140
0,480 480,630 630,720 720,1050 1050,1290
-} to the client,| to
|客户端或应用程序，

1686
01:04:25,140 --> 01:04:26,790
0,600 630,1260 1260,1410 1410,1530 1530,1650
the client or to the

1687
01:04:26,790 --> 01:04:28,950
0,780 1020,1200 1200,1560 1560,1920 1920,2160
application,| and then {} it
|然后它向日志中添加一个 fetch ，

1688
01:04:28,950 --> 01:04:33,450
0,630 1230,2610 3480,3690 3690,3810 3810,4500
adds {a,fetch} to the log,|
|

1689
01:04:35,720 --> 01:04:37,700
0,510 510,840 840,1260 1260,1440 1440,1980
{} and uploads that log
并将那个日志上传到服务器，

1690
01:04:42,050 --> 01:04:44,090
0,330 330,390 390,1050 1290,1560 1560,2040
to the server,| and then
|然后是一个获取 bank.py ，

1691
01:04:44,090 --> 01:04:45,880
0,60 60,300 300,690
you know the,

1692
01:04:46,330 --> 01:04:48,100
0,360 360,420 420,750 750,1440 1500,1770
{that,does} a fetch of {you,know}

1693
01:04:48,100 --> 01:04:51,340
0,270 270,450 450,630 630,1170
{bank.py - - -},|
|

1694
01:04:51,760 --> 01:04:53,410
0,720 750,1290 1290,1440 1440,1530 1530,1650
and {} you know the
服务器，

1695
01:04:53,410 --> 01:04:56,320
0,810 810,810 1620,1740 1740,2400 2400,2910
server,| {} you know {in,previous}
|在前面的例子中，

1696
01:04:56,320 --> 01:05:00,040
0,1020 1320,1950 2640,3030 3030,3510 3510,3720
example,| {} first, {it,sends} just
|首先，它只发送一个前缀，

1697
01:05:00,040 --> 01:05:01,080
0,60 60,720
a prefix,|
|

1698
01:05:01,730 --> 01:05:04,720
0,150 150,270 270,480 480,1140
so here's like prefix,|
所以这里是前缀，|

1699
01:05:05,050 --> 01:05:06,700
0,540 570,1110 1110,1260 1260,1440 1440,1650
{} now you know sends,
现在客户端发送整个东西，

1700
01:05:06,700 --> 01:05:08,170
0,180 210,690 690,870 870,1200 1200,1470
{} now the client sends

1701
01:05:08,170 --> 01:05:09,500
0,150 150,450 450,870
the whole thing,

1702
01:05:10,050 --> 01:05:11,940
0,300 300,570 570,840 840,1530 1560,1890
right,| so sends the whole
|发送整个日志，

1703
01:05:11,940 --> 01:05:16,170
0,510 1500,2100 2190,2820 2820,3900 3900,4230
log,| and {} it, but
|但是如果修改在，

1704
01:05:16,170 --> 01:05:17,970
0,540 540,1290 1290,1440 1440,1680 1680,1800
if modifications are {} in

1705
01:05:17,970 --> 01:05:18,540
0,330
it,|
|

1706
01:05:18,810 --> 01:05:19,890
0,300 300,390 390,660 660,900 900,1080
{ -} so and we'll
我们必须发送整个日志，

1707
01:05:19,890 --> 01:05:20,550
0,180 180,270 270,420 420,480 480,660
have to send the whole

1708
01:05:20,550 --> 01:05:21,420
0,330 330,510 510,600 600,810 810,870
log,| we'll {} send the
|我们发送整个日志，

1709
01:05:21,420 --> 01:05:22,680
0,150 150,390 390,510 510,870 870,1260
whole log| and must include
|并且必须包括 fetch C ，

1710
01:05:22,680 --> 01:05:24,720
0,90 90,360 360,480 480,1020 1590,2040
the fetch from C, right,|
|

1711
01:05:25,080 --> 01:05:27,630
0,540 540,990 990,2070 2100,2520 2520,2550
and so, { - -},
如果它没有发送 fetch C ，

1712
01:05:27,630 --> 01:05:29,610
0,1110 1110,1200 1200,1650 1680,1800 1800,1980
if it doesn't you know

1713
01:05:29,610 --> 01:05:32,250
0,420 420,1230 1230,1320 1320,1800 1890,2640
sends {fetch -} C, {}|
|

1714
01:05:32,250 --> 01:05:35,430
0,420 420,1170 1170,1440 1440,2160 2190,3180
it actually, {} {C,is -},
那么 C 的读取操作不在那里，

1715
01:05:35,430 --> 01:05:37,080
0,0 0,660 660,1020 1020,1260 1260,1650
{} {C,is} {actually -} not

1716
01:05:37,110 --> 01:05:39,990
0,300 300,570 870,1230 1230,1890 2220,2880
there, the read operation,| and
|客户端将会拒绝该日志，

1717
01:05:39,990 --> 01:05:43,230
0,420 420,1050 1050,1560 2610,3120 3120,3240
{} basically the client will

1718
01:05:43,230 --> 01:05:44,910
0,600 630,840 840,1020 1020,1350 1350,1680
reject {} the log,| because
|因为它自己的 fetch 操作不在其中，

1719
01:05:44,910 --> 01:05:46,230
0,270 270,360 360,540 540,810 810,1320
actually it's own fetch operation

1720
01:05:46,230 --> 01:05:47,520
0,360 360,570 570,690 690,900 1110,1290
{is,actually} not in it,| so
|所以服务器不可能认为，

1721
01:05:47,520 --> 01:05:49,950
0,180 180,360 360,900 900,1410 1560,2430
it's not possible for the

1722
01:05:51,090 --> 01:05:52,410
0,450 450,540 540,990 990,1200 1200,1320
server to pretend| you know
|为了稍后发送日志，

1723
01:05:52,410 --> 01:05:53,970
0,300 300,390 390,780 780,1110 1110,1560
that to send the log

1724
01:05:53,970 --> 01:05:55,320
0,300 300,570 570,900 900,1200 1200,1350
later on,| because actually the
|因为新日志应该包括那个 fetch 操作，

1725
01:05:55,320 --> 01:05:57,120
0,270 270,780 810,1170 1170,1290 1290,1800
new log should have included

1726
01:05:57,120 --> 01:05:58,950
0,180 180,450 450,1110 1410,1590 1590,1830
that fetch operation,| {} that
|它在里面，并更新 C ，

1727
01:05:58,950 --> 01:06:01,260
0,150 150,270 270,510 810,1530 1770,2310
was in it and update

1728
01:06:01,260 --> 01:06:02,490
0,90 90,540 540,780 780,930 930,1230
the C,| or the server
|或者服务器不能将该 fetch 操作加倍到这里，

1729
01:06:02,490 --> 01:06:04,350
0,390 390,960 960,1110 1110,1350 1350,1860
cannot twice that fetch operation

1730
01:06:04,350 --> 01:06:07,020
0,330 330,810 1230,2100 2340,2490 2490,2670
into here,| {} to make
|为了让它与之前发生的保持一致，

1731
01:06:07,020 --> 01:06:08,220
0,90 90,510 510,660 660,900 900,1200
it consistent what actually happened

1732
01:06:08,220 --> 01:06:10,140
0,720 900,1350 1350,1590 1590,1740 1740,1920
before,| {} because that would
|因为这会被检测到，

1733
01:06:10,140 --> 01:06:11,730
0,90 90,750 780,1350 1350,1440 1440,1590
be detected,| because you know
|因为 A 和 B 记录上的修改不是，

1734
01:06:11,730 --> 01:06:13,050
0,180 180,870 870,990 990,1050 1050,1320
the modifications on the records

1735
01:06:13,050 --> 01:06:13,980
0,120 120,270 270,420 420,690 690,930
of A and B are

1736
01:06:13,980 --> 01:06:15,630
0,390 390,540 540,1170 1170,1410 1410,1650
not,| {} wouldn't check out.|
|不会检查出来。|

1737
01:06:18,420 --> 01:06:20,340
0,540 750,900 900,1320 1320,1740 1740,1920
Okay, so basically what this
好的，所以这是在退后一步，

1738
01:06:20,340 --> 01:06:21,990
0,240 240,690 690,1170 1170,1410 1440,1650
really does is to sort

1739
01:06:21,990 --> 01:06:23,310
0,60 60,330 330,810 930,1110 1110,1320
of step back,| is that
|你可以考虑这次攻击，

1740
01:06:23,310 --> 01:06:24,150
0,120 120,210 210,390 390,660 660,840
you can think about this

1741
01:06:24,150 --> 01:06:27,060
0,570 570,930 1230,1980 2190,2730 2730,2910
attack,| that the server sort
|服务器会认为 A 和 B 的修改同时发生，

1742
01:06:27,060 --> 01:06:28,320
0,60 60,450 450,630 630,720 720,1260
of pretends that the modification

1743
01:06:28,320 --> 01:06:29,220
0,90 90,270 270,390 390,600 600,900
of A and B happen

1744
01:06:29,220 --> 01:06:31,380
0,690 900,1260 1260,1620 1620,1890 1890,2160
concurrently,| {} with the C
|当 C 读取它时，

1745
01:06:31,380 --> 01:06:32,910
0,270 270,570 720,1080 1080,1350 1350,1530
reading it,| {} even though
|即使我们事实并非如此，

1746
01:06:32,910 --> 01:06:33,750
0,120 120,330 330,510 510,750 750,840
we know that actually it's

1747
01:06:33,750 --> 01:06:34,830
0,180 180,240 240,780 780,930 930,1080
not the case,| and by
|通过说 fetch 在它里面，

1748
01:06:34,830 --> 01:06:36,150
0,390 390,480 480,870 870,1080 1080,1320
speaking the fetches in it,|
|

1749
01:06:36,360 --> 01:06:38,820
0,540 540,1530 1530,1770 1770,2100 2100,2460
{} that attack cannot happen.|
这种攻击不能发生。|

1750
01:06:43,440 --> 01:06:46,020
0,270 270,420 420,960 1470,1800 1800,2580
I have {} two questions,|
我有两个问题，|

1751
01:06:46,080 --> 01:06:48,300
0,480 780,1140 1140,1500 1500,1890 2040,2220
{} maybe first just,| if
首先，|如果你可以定义 fork 一致性和 fetch modify 一致性。

1752
01:06:48,300 --> 01:06:50,100
0,120 120,420 420,840 840,1530 1560,1800
you could like define fork

1753
01:06:50,100 --> 01:06:52,200
0,810 810,960 960,1260 1290,1650 1650,2100
consistency and the fetch modify

1754
01:06:52,200 --> 01:06:53,610
0,720 720,870 870,990 990,1050 1050,1410
consistency.| And then the second
|然后第二个是，

1755
01:06:53,610 --> 01:06:55,950
0,420 750,960 960,1140 1140,2070 2100,2340
is,| in this example,| so
|在这个例子中，|是什么阻止服务器将 fetch 放在日志的正确位置？

1756
01:06:55,950 --> 01:06:57,780
0,210 210,630 630,720 720,1290 1290,1830
what exactly is stopping the

1757
01:06:58,260 --> 01:06:59,600
0,630 630,1200
server from

1758
01:07:00,040 --> 01:07:02,200
0,690 690,1170 1200,1740 1740,2040 2040,2160
placing the fetch in the

1759
01:07:02,200 --> 01:07:03,580
0,240 240,630 630,780 780,870 870,1380
right place of the log?|
|

1760
01:07:03,820 --> 01:07:06,100
0,510 510,1050 1050,1410 1410,1770 1770,2280
Because remember every log entry
因为记得每个日志条目都包含其之前的所有条目。

1761
01:07:06,310 --> 01:07:08,000
0,420 420,630 630,750 750,1380
covers all its proceeding

1762
01:07:08,340 --> 01:07:09,260
0,690
entries.|
|

1763
01:07:09,660 --> 01:07:13,050
0,300 300,540 540,870 870,3120 3120,3390
Okay, so if.| The server
好的，那么如果。|服务器不能切片，

1764
01:07:13,050 --> 01:07:14,190
0,150 150,450 450,810 810,1020 1020,1140
could not slice that,| you
|fetch 在修改 A 和 B 之前的前缀之后。

1765
01:07:14,190 --> 01:07:15,690
0,180 180,960 990,1110 1110,1200 1200,1500
know fetch you know after

1766
01:07:15,690 --> 01:07:17,250
0,120 120,570 570,900 900,960 960,1560
the prefix before the modification

1767
01:07:17,250 --> 01:07:18,180
0,120 120,300 300,420 420,660
of A and B.|
|

1768
01:07:18,860 --> 01:07:19,670
0,240 240,390 390,510 510,630 630,810
So let's say it only
所以，假设它只想发送 A 的修改，

1769
01:07:19,670 --> 01:07:20,900
0,240 240,360 360,570 570,630 630,1230
wants to send the modification

1770
01:07:20,900 --> 01:07:21,920
0,90 90,360 360,510 510,930 930,1020
of A,| it knows the
|它知道 A 的修改和它之前的所有内容的哈希，

1771
01:07:21,920 --> 01:07:23,330
0,420 420,690 690,780 780,1320 1320,1410
hash of the modification of

1772
01:07:23,330 --> 01:07:24,650
0,120 120,210 210,570 570,1050 1050,1320
A and everything preceding it,|
|

1773
01:07:25,040 --> 01:07:26,600
0,180 180,300 300,420 420,810 900,1560
and then it could insert
然后它可以把 fetch C 插入到那里，

1774
01:07:26,600 --> 01:07:27,680
0,120 120,450 450,600 600,810 810,1080
the fetch to C there,|
|

1775
01:07:27,680 --> 01:07:29,330
0,210 210,300 300,600 600,930 1500,1650
because it knows that,| it's
因为它知道，|这是一个哈希。

1776
01:07:29,330 --> 01:07:31,100
0,150 150,630 630,840 840,1260 1620,1770
a hash of that, and.|
|

1777
01:07:31,100 --> 01:07:32,600
0,390 390,600 600,840 840,1140 1170,1500
Then {they,couldn't} send {}.| Yeah,
然后他们就不能发送。|是的，然后他们就不能发送 B 的修改，

1778
01:07:32,600 --> 01:07:33,320
0,90 90,210 210,300 300,540 540,720
but then they couldn't send

1779
01:07:33,320 --> 01:07:34,540
0,90 90,570 570,660 660,1020
the modification to B,|
|

1780
01:07:36,410 --> 01:07:37,700
0,270 270,330 330,840 840,960 960,1290
because the modification to B
因为 B 的修改直接在 A 之后，

1781
01:07:37,700 --> 01:07:39,140
0,120 120,480 480,720 720,1110 1110,1440
you know is directly after

1782
01:07:39,140 --> 01:07:40,700
0,420 450,690 690,930 930,1140 1140,1560
A,| and so A must,|
|所以 A 必须，|

1783
01:07:40,700 --> 01:07:41,570
0,330 330,450 450,570 570,660 660,870
{} and so it can't
所以它也不能切分 A 和 B 。

1784
01:07:41,570 --> 01:07:42,560
0,360 360,450 450,750 750,870 870,990
slice it between A and

1785
01:07:42,560 --> 01:07:43,400
0,120 120,540
B either.|
|

1786
01:07:44,490 --> 01:07:45,760
0,240 240,570 570,960
I see, okay.|
我明白了，好的。|

1787
01:07:49,580 --> 01:07:50,690
0,210 210,390 390,660 660,750 750,1110
Sorry, what was a problem
抱歉，图片上有什么问题吗？

1788
01:07:50,690 --> 01:07:51,950
0,210 210,600 600,840 840,1170 1170,1260
with having it where it

1789
01:07:51,950 --> 01:07:53,520
0,360 360,510 510,600 600,1320
is in the picture?|
|

1790
01:07:54,220 --> 01:07:55,160
0,750

1791
01:07:55,470 --> 01:07:56,400
0,240 240,330 330,570 570,720 720,930
Well, where it is, now
好的，现在的图片是完美的，

1792
01:07:56,400 --> 01:07:57,540
0,150 150,360 360,450 450,900 960,1140
the picture is perfect,| that's
|它是好的，

1793
01:07:57,540 --> 01:07:59,460
0,420 750,1110 1170,1530 1530,1830 1830,1920
fine, right,| in fact you
|事实上，这表明，

1794
01:07:59,460 --> 01:08:00,720
0,120 120,330 330,720 720,1170 1170,1260
know this basically suggests| you
|fetch C 已经包括 A 和 B 的修改，

1795
01:08:00,720 --> 01:08:01,890
0,150 150,540 660,840 840,1080 1080,1170
know that the fetch of

1796
01:08:01,890 --> 01:08:04,050
0,570 630,990 990,1500 1500,1590 1590,2160
C actually included the modification

1797
01:08:04,050 --> 01:08:04,860
0,120 120,270 270,570 570,720 720,810
of {A,and,B -},| like the
|蓝色的是真正的日志，

1798
01:08:04,860 --> 01:08:06,000
0,240 240,390 390,480 480,720 720,1140
blue was the real log,|
|

1799
01:08:06,760 --> 01:08:08,170
0,630 630,870 870,990 990,1080 1080,1410
and we have the fetch
我们在其中有 fetch C ，

1800
01:08:08,170 --> 01:08:09,760
0,90 90,570 570,990 990,1500 1500,1590
to C {in,it},| and you
|一切都是完美的。

1801
01:08:09,760 --> 01:08:11,170
0,150 150,630 720,1140 1140,1320 1320,1410
know the everything to be

1802
01:08:11,170 --> 01:08:11,960
0,510
perfect.|
|

1803
01:08:18,660 --> 01:08:20,130
0,240 240,600 600,690 690,1320 1320,1470
So just to clarify the
所以我想确认一下 fork 一致性的定义。

1804
01:08:20,130 --> 01:08:22,170
0,570 570,690 690,930 930,1440 1440,2040
definition of fork consistent.| Yeah,
|好的，等一下，因为我还没讲过这张幻灯片，

1805
01:08:22,170 --> 01:08:25,950
0,60 60,270 270,1770 3480,3630 3630,3780
hold on, {hold,on,a,second\,,because,I,haven't,talked,the,slide},| I haven't
|我还没有谈到 fork 一致性的定义，

1806
01:08:25,950 --> 01:08:26,850
0,210 210,390 390,450 450,840 840,900
talked about the definition of

1807
01:08:26,850 --> 01:08:28,080
0,420 420,870 870,960 960,1110 1110,1230
{fork,consistency -},| I'm gonna do
|我现在就要这么做。

1808
01:08:28,080 --> 01:08:28,940
0,150 150,300 300,630
that right now.|
|

1809
01:08:30,450 --> 01:08:31,280
0,540
Okay?|
好的?|

1810
01:08:32,860 --> 01:08:34,120
0,360 360,690 690,960 960,1110 1110,1260
{} So we're {going,to,talk} about
所以我们将谈论 fork 一致性。

1811
01:08:34,120 --> 01:08:35,360
0,150 150,930
fork consistency.|
|

1812
01:08:43,980 --> 01:08:45,750
0,570 780,1170 1170,1410 1410,1590 1590,1770
So, {} so what we've
所以，到目前为止我们所看到的是，

1813
01:08:45,750 --> 01:08:47,640
0,450 660,900 900,1260 1260,1470 1470,1890
seen so far is that,|
|

1814
01:08:47,640 --> 01:08:50,220
0,720 720,1140 1140,1680 1680,2070 2070,2580
the server cannot really manipulate
服务器不能真正操作日志，

1815
01:08:50,220 --> 01:08:51,150
0,90 90,480 480,570 570,690 690,930
the log,| it can only
|它只能发送前缀或隐藏部分，

1816
01:08:51,150 --> 01:08:53,040
0,420 420,1080 1080,1410 1410,1530 1530,1890
send prefixes or can hide

1817
01:08:53,040 --> 01:08:55,620
0,540 540,780 1350,1590 1590,2010 2250,2580
parts,| you can hide, it
|它可以将前缀发送回客户端，

1818
01:08:55,620 --> 01:08:57,300
0,90 90,330 330,690 690,1020 1020,1680
can send prefix back to

1819
01:08:57,300 --> 01:08:58,740
0,90 90,630 810,1110 1110,1170 1170,1440
the client,| but it can't
|但它并不能修改日志，

1820
01:08:58,740 --> 01:09:00,330
0,210 210,690 690,810 810,1260 1290,1590
really modify the log,| so
|所以有机会

1821
01:09:00,330 --> 01:09:01,650
0,180 180,510 510,660 660,720 720,1320
just basically have an opportunity|
|

1822
01:09:01,650 --> 01:09:03,690
0,330 330,420 420,600 1230,1590 1590,2040
to you know {sort,of} show
向不同客户端显示不同的日志，

1823
01:09:03,690 --> 01:09:05,730
0,300 300,630 630,720 720,1230 1230,2040
different logs to different {

1824
01:09:05,760 --> 01:09:06,810
0,300 300,690 690,780 780,930 930,1050
-} clients,| and that is
|这就是 fork 一致性的含义。

1825
01:09:06,810 --> 01:09:09,600
0,360 360,660 990,1770 2010,2190 2190,2790
basically what {} fork consistency

1826
01:09:09,600 --> 01:09:11,430
0,420 720,960 960,1320 1350,1530 1530,1830
is.| And so it cannot
|所以它不能提供那种，

1827
01:09:11,430 --> 01:09:12,630
0,450 450,510 510,630 630,990 990,1200
provide you know the kind

1828
01:09:12,630 --> 01:09:14,490
0,240 420,930 930,1290 1290,1530 1530,1860
of,| {} {the,server} cannot provide
|服务器不能提供那种一致性，

1829
01:09:14,490 --> 01:09:15,630
0,60 60,330 330,390 390,960 960,1140
the type of consistency| that
|我们在过去看到的那种，

1830
01:09:15,630 --> 01:09:16,440
0,120 120,300 300,510 510,750 750,810
we've seen so far in

1831
01:09:16,440 --> 01:09:17,820
0,90 90,420 420,660 660,1110 1110,1380
the past,| name likely {linearizability
|也就是线性一致性和外部一致性等东西，

1832
01:09:17,820 --> 01:09:19,440
0,510 510,600 600,1020 1020,1530 1530,1620
-} and external consistency and

1833
01:09:19,440 --> 01:09:20,250
0,150 150,270 270,480 480,660 660,810
things like that,| that's just
|这是不可能的，

1834
01:09:20,250 --> 01:09:22,050
0,180 180,750 1200,1620 1620,1710 1710,1800
not possible,| but it can
|但它可以提供这个，

1835
01:09:22,050 --> 01:09:23,400
0,330 330,570 570,870 870,1050 1050,1350
provide this,| what this what
|这就是本文所说的或介绍的是 fork 一致性。

1836
01:09:23,400 --> 01:09:24,930
0,60 60,300 300,630 630,810 810,1530
the paper calls or introduces

1837
01:09:25,140 --> 01:09:26,280
0,210 210,420 420,1080
is fork consistency.|
|

1838
01:09:26,490 --> 01:09:28,110
0,630 630,780 780,1110 1110,1560 1560,1620
And let me abstract a
让我稍微抽象一下，来解释一下这是什么。

1839
01:09:28,110 --> 01:09:29,100
0,240 240,360 360,630 630,870 870,990
little bit away and to

1840
01:09:29,100 --> 01:09:30,340
0,300 300,420 420,600 600,990
explain what that is.|
|

1841
01:09:30,620 --> 01:09:31,460
0,180 180,330 330,480 480,630 630,840
So let's say we have
假设我们有客户端 A ，

1842
01:09:31,460 --> 01:09:33,170
0,210 210,540 540,990 1320,1530 1530,1710
{} client A,| {} we
|我们有服务器 S ，

1843
01:09:33,170 --> 01:09:34,860
0,360 360,420 420,810 810,1350
have the server S,|
|

1844
01:09:35,280 --> 01:09:37,290
0,630 870,1140 1140,1290 1290,1350 1350,2010
and it has a log,|
它有一个日志，|

1845
01:09:39,150 --> 01:09:40,440
0,390 390,570 570,870 870,1140 1140,1290
and let's say I'm just
比如，我要把所有东西列出来，

1846
01:09:40,440 --> 01:09:41,790
0,120 120,540 540,780 780,1110 1110,1350
gonna extract everything away,| {it,has}
|它有条目 A B C D 和 E ，

1847
01:09:41,790 --> 01:09:43,820
0,420 420,990 990,1110 1110,1650
entries {A,B,C} and {D,and,E},|
|

1848
01:09:45,540 --> 01:09:47,370
0,660 690,1140 1140,1260 1260,1380 1380,1830
and {} you know A
A 追加条目到日志中，

1849
01:09:47,370 --> 01:09:48,390
0,150 150,210 210,540 540,900 900,1020
you know whatever maybe you

1850
01:09:48,390 --> 01:09:49,680
0,210 300,570 570,840 840,1170 1170,1290
know {append -} entry to

1851
01:09:49,680 --> 01:09:51,720
0,120 120,630 780,1470 1470,1950 1950,2040
the log| {} and you
|这基本上就是[]。

1852
01:09:51,720 --> 01:09:52,280
0,270
know

1853
01:09:52,740 --> 01:09:56,220
0,1320 1320,1410 1410,1590 1590,2100 2790,3480
{} and that's basically [].|
|

1854
01:09:56,490 --> 01:09:58,260
0,690 810,1320 1320,1410 1410,1530 1530,1770
And maybe we have another
也许我们还有另一个客户端 B ，

1855
01:09:58,260 --> 01:09:59,740
0,240 240,630
client B,|
|

1856
01:10:00,830 --> 01:10:02,930
0,810 1020,1380 1380,1770 1770,1860 1860,2100
and {} what the server
服务器所能做的

1857
01:10:02,930 --> 01:10:04,520
0,150 150,780 900,1140 1140,1350 1350,1590
can do| is sort of
|让另一个客户端看到一个完全不同的世界，

1858
01:10:04,580 --> 01:10:06,350
0,810 1080,1290 1290,1470 1470,1740 1740,1770
give the other client a

1859
01:10:06,350 --> 01:10:07,370
0,390 390,660 660,840 840,930 930,1020
completely different view of the

1860
01:10:07,370 --> 01:10:09,230
0,510 570,1050 1050,1410 1410,1590 1590,1860
world,| by basically have another
|通过日志的另一个副本

1861
01:10:09,230 --> 01:10:10,500
0,390 390,480 480,600 600,990
copy of the log|
|

1862
01:10:11,340 --> 01:10:12,360
0,210 210,330 330,510 510,810 810,1020
or its own copy| or
或者它自己的副本|或者给出一个不同的日志副本，

1863
01:10:12,360 --> 01:10:13,710
0,450 450,630 630,990 990,1290 1290,1350
give a different copy of

1864
01:10:13,710 --> 01:10:14,850
0,90 90,330 330,420 420,780 780,1140
the log,| for example, {maybe,that}
|例如，日志可能包含记录 A ，

1865
01:10:14,850 --> 01:10:16,980
0,360 360,930 930,1350 1350,1800
log contains {the,record} A,|
|

1866
01:10:17,150 --> 01:10:18,800
0,480 480,660 660,870 870,1110 1110,1650
{} but then every operation
但 B 做的每一次操作，

1867
01:10:18,800 --> 01:10:20,330
0,90 90,270 270,810 930,1350 1350,1530
of B does,| goes into
|进入这个日志， B1 B2 ，

1868
01:10:20,330 --> 01:10:22,160
0,240 240,780 1140,1320 1320,1650 1650,1830
this log {you,know,B1 -} {B2

1869
01:10:22,160 --> 01:10:24,080
0,630 660,1080 1080,1290 1290,1470 1470,1920
-},| maybe even some operations
|可能来自其他客户端的一些操作，也会获得这个，

1870
01:10:24,080 --> 01:10:25,130
0,150 150,300 300,690 690,840 840,1050
from other clients, that also

1871
01:10:25,130 --> 01:10:26,510
0,180 180,330 330,810 900,1170 1170,1380
get this view| and {end,up,in}
|最后出现在这个日志中，

1872
01:10:26,510 --> 01:10:27,860
0,150 150,660 810,1080 1080,1200 1200,1350
this log,| {} but they're
|但是它们并没有展示给 A ，

1873
01:10:27,860 --> 01:10:29,390
0,270 270,540 540,990 990,1200 1200,1530
not actually shown to A,|
|

1874
01:10:29,880 --> 01:10:31,560
0,120 120,240 240,540 540,1140 1140,1680
you know A basically {}
A 也可能添加更多的条目到日志中，

1875
01:10:31,560 --> 01:10:32,940
0,420 420,600 600,870 870,1200 1200,1380
A may actually also add

1876
01:10:32,940 --> 01:10:34,200
0,240 240,570 570,750 750,1080 1080,1260
more entries to log,| like
|比如它可能有 B C 和 E ，

1877
01:10:34,200 --> 01:10:35,850
0,240 240,390 390,660 660,1050 1050,1650
maybe it had {B,C} {and,E},|
|

1878
01:10:36,090 --> 01:10:37,590
0,570 570,870 870,1230 1230,1290 1290,1500
{} and those are not
而这些并没有显示给 B ，

1879
01:10:37,590 --> 01:10:39,780
0,240 240,570 570,1140 1170,1680 2010,2190
actually shown to B,| so
|所以这两个日志到 A 的视图，

1880
01:10:39,780 --> 01:10:42,270
0,180 180,330 330,1050 1260,2040 2220,2490
these two logs to the

1881
01:10:42,300 --> 01:10:43,710
0,570 570,840 840,930 930,1290 1290,1410
[] view of A,| you
|是完全一致的，

1882
01:10:43,710 --> 01:10:45,450
0,150 150,300 300,690 690,1350 1410,1740
know it's completely consistent,| because
|因为它没有意识到任何这些变化，

1883
01:10:45,450 --> 01:10:46,620
0,150 150,750 750,840 840,1050 1050,1170
it's unaware of any of

1884
01:10:46,620 --> 01:10:48,870
0,240 240,810 1380,1770 1770,1890 1890,2250
these changes,| and to B
|对于 B ，这个日志看起来完全一致，

1885
01:10:48,870 --> 01:10:49,740
0,90 90,270 270,450 450,720 720,870
you know this log looks

1886
01:10:49,740 --> 01:10:51,240
0,420 420,900 900,1110 1110,1320 1320,1500
completely consistent,| because they don't
|因为它们没有意识到任何 A 的变化，

1887
01:10:51,240 --> 01:10:53,250
0,330 330,420 420,690 690,1170 1260,2010
aware of any A {changes\,,right},|
|

1888
01:10:54,330 --> 01:10:55,410
0,330 330,480 480,900 900,990 990,1080
in this model of the
在这个世界模型中，

1889
01:10:55,410 --> 01:10:57,300
0,480 570,870 870,1230 1230,1440 1440,1890
world,| the only sort shared
|唯一的共享通信的地方是服务器，

1890
01:10:57,300 --> 01:10:59,160
0,720 720,930 930,1530 1530,1740 1740,1860
communication {} place that is,

1891
01:10:59,160 --> 01:11:00,390
0,390 390,510 510,570 570,1080 1110,1230
there is the server,| you
|这是一种，

1892
01:11:00,390 --> 01:11:01,140
0,90 90,390 390,480 480,630 630,750
know that is sort of

1893
01:11:01,140 --> 01:11:02,460
0,360 600,780 780,870 870,1020 1020,1320
the,| you know the thing
|展示的东西，

1894
01:11:02,460 --> 01:11:04,650
0,210 210,300 300,480 480,1380 1410,2190
that you know {} shows|
|

1895
01:11:04,650 --> 01:11:05,880
0,120 120,270 270,540 540,990 990,1230
you know what actually is
什么是系统的状态。

1896
01:11:05,880 --> 01:11:06,780
0,90 90,330 330,390 390,480 480,900
the state of the system.|
|

1897
01:11:07,600 --> 01:11:09,160
0,570 750,1020 1020,1320 1320,1470 1470,1560
{} And one way you
你可以考虑的一种方式是，

1898
01:11:09,160 --> 01:11:10,120
0,90 90,270 270,600 600,780 780,960
can think about is,| like
|就像我们之前讨论过的那样，

1899
01:11:10,120 --> 01:11:11,140
0,210 210,480 480,600 600,780 780,1020
in terms that we've talked

1900
01:11:11,140 --> 01:11:12,460
0,270 270,930 960,1140 1140,1200 1200,1320
about before,| this is sort
|这有点像脑裂，

1901
01:11:12,460 --> 01:11:13,540
0,60 60,210 210,270 270,600 600,1080
of like a split brain,|
|

1902
01:11:16,720 --> 01:11:19,600
0,1140 1440,2160 2340,2490 2490,2580 2580,2880
{you,know,basically} {} you know A
A 可以看到一个世界，

1903
01:11:19,600 --> 01:11:21,130
0,300 300,780 780,1050 1050,1320 1320,1530
gets {} {see,one -} view

1904
01:11:21,130 --> 01:11:22,060
0,90 90,180 180,630 630,720 720,930
of the world,| you know
|这与 A 的视角是一致的，

1905
01:11:22,060 --> 01:11:24,550
0,240 240,360 360,750 750,1710 1740,2490
cooked up by {} {by,log}

1906
01:11:24,550 --> 01:11:26,710
0,270 270,720 720,870 870,1440 1680,2160
that's consistent with {A,view},| and
|对于 B ，是另一个世界视角，

1907
01:11:26,710 --> 01:11:27,490
0,90 90,210 210,630 630,690 690,780
you know B you know

1908
01:11:27,490 --> 01:11:28,300
0,240 240,450 450,630 630,720 720,810
it's another view of the

1909
01:11:28,300 --> 01:11:29,020
0,390
world,|
|

1910
01:11:29,330 --> 01:11:31,010
0,480 480,840 840,960 960,1590 1590,1680
and basically the servers {sort,of}
服务器小心地把它们分开，

1911
01:11:31,010 --> 01:11:32,690
0,300 300,420 420,570 570,1110 1110,1680
keeps them to carefully separate,|
|

1912
01:11:32,900 --> 01:11:34,910
0,840 840,1410 1560,1710 1710,1920 1920,2010
and {} and {therefore -}
因此可以认为，

1913
01:11:34,910 --> 01:11:36,800
0,120 120,660 900,1350 1350,1440 1440,1890
can pretend that,| you know
|A 看到脑裂的左侧，

1914
01:11:36,860 --> 01:11:38,630
0,360 360,630 630,990 1440,1710 1710,1770
{A,is} looking one, sees the

1915
01:11:38,630 --> 01:11:40,130
0,360 510,780 780,840 840,960 960,1500
left side of split brain,|
|

1916
01:11:40,160 --> 01:11:41,780
0,600 600,840 840,1200 1200,1410 1410,1620
B is actually the right
B 看到是脑裂的右侧。

1917
01:11:41,780 --> 01:11:43,040
0,300 300,510 510,720 720,1020
side {of,split -} brain.|
|

1918
01:11:43,930 --> 01:11:45,220
0,1050
Okay?|
好的？|

1919
01:11:45,900 --> 01:11:46,980
0,90 90,210 210,360 360,750
Does that make sense?|
这能理解吗？|

1920
01:11:50,220 --> 01:11:51,000
0,150 150,330 330,450 450,510 510,780
So that's sort of what
这就是他们所说的，

1921
01:11:51,000 --> 01:11:52,080
0,150 150,270 270,660 660,780 780,1080
you know basically they're saying

1922
01:11:52,080 --> 01:11:53,010
0,150 150,390 390,450 450,720 750,930
is,| like you know we
|我们不能做得比 fork 一致性更好，

1923
01:11:53,010 --> 01:11:54,210
0,390 390,630 630,810 810,1080 1080,1200
can't really do better than

1924
01:11:54,210 --> 01:11:56,460
0,210 210,1020 1050,1650 1650,1830 1830,2250
fork consistency,| because it's always
|因为服务器总是有可能复制一份日志，

1925
01:11:56,460 --> 01:11:58,440
0,570 570,780 780,870 870,1500 1620,1980
possible for the server {}

1926
01:11:58,440 --> 01:12:00,840
0,630 630,1710 1740,2010 2010,2310 2310,2400
to {} to basically make

1927
01:12:00,840 --> 01:12:02,130
0,90 90,510 510,630 630,720 720,1290
a copy of the log,|
|

1928
01:12:02,400 --> 01:12:03,930
0,300 300,660 660,780 780,1020 1020,1530
and then from then on,
然后从那时起，为这些客户端提供不同的视角。

1929
01:12:03,960 --> 01:12:05,700
0,570 570,840 840,1260 1260,1350 1350,1740
{you,know,present} different views for these

1930
01:12:06,090 --> 01:12:06,960
0,750
clients.|
|

1931
01:12:07,300 --> 01:12:09,460
0,510 810,1110 1110,1290 1290,1560 1560,2160
Now, S could not merge
现在， S 无法再次合并这两个日志，

1932
01:12:09,460 --> 01:12:10,780
0,60 60,240 240,540 540,900 900,1320
the two logs again, correct,|
|

1933
01:12:10,810 --> 01:12:12,100
0,450 450,720 720,1020 1020,1110 1110,1290
these logs have to be
对于 A 和 B ，这些日志必须分开，

1934
01:12:12,100 --> 01:12:13,150
0,450 450,540 540,690 690,840 840,1050
separate, you know for A

1935
01:12:13,150 --> 01:12:14,740
0,120 120,450 750,1320 1320,1410 1410,1590
and B,| because it could
|因为这可能，

1936
01:12:14,740 --> 01:12:16,750
0,180 180,990 990,1650 1650,1770 1770,2010
be,| it's impossible for S
|S 不可能使用日志，

1937
01:12:16,750 --> 01:12:17,500
0,120 120,270 270,330 330,660 660,750
to sort of take you

1938
01:12:17,500 --> 01:12:18,820
0,150 150,270 270,840 840,1200 1200,1320
know the logs,| let them
|让它们更长一点，

1939
01:12:18,820 --> 01:12:20,050
0,270 270,390 390,450 450,900 1020,1230
go for a while,| and
|然后再把这两个日志拼接在一起，

1940
01:12:20,050 --> 01:12:21,400
0,90 90,420 420,960 960,1170 1170,1350
then basically splice these two

1941
01:12:21,400 --> 01:12:22,700
0,300 300,660 660,1020
logs together again,|
|

1942
01:12:23,040 --> 01:12:24,810
0,510 510,870 870,1050 1050,1140 1140,1770
{} because you know the,
因为这些条目应该保护所有前面的条目，

1943
01:12:25,080 --> 01:12:27,150
0,960 960,1170 1170,1560 1560,1740 1740,2070
because these entries should protect

1944
01:12:27,150 --> 01:12:28,410
0,150 150,360 360,750 750,1050 1050,1260
all these preceding entries,| these
|使用这些条目保护前面的所有条目，

1945
01:12:28,410 --> 01:12:29,730
0,330 330,690 690,810 810,930 930,1320
entries protect all the preceding

1946
01:12:29,730 --> 01:12:31,410
0,330 330,420 420,930 1110,1560 1560,1680
entries with those| and so
|所以你不能把它们放在一起，

1947
01:12:31,410 --> 01:12:32,430
0,180 180,600 600,720 720,810 810,1020
you can't put them back

1948
01:12:32,430 --> 01:12:33,100
0,450
together,|
|

1949
01:12:34,000 --> 01:12:35,200
0,300 300,480 480,570 570,960 960,1200
and because the signatures wouldn't
因为签名不能通过，

1950
01:12:35,200 --> 01:12:36,430
0,210 210,420 420,630 630,720 720,1230
check out,| because the signatures
|因为签名总是覆盖当前条目和所有之前条目。

1951
01:12:36,430 --> 01:12:37,690
0,330 330,630 630,690 690,960 960,1260
always covered the current entry

1952
01:12:37,690 --> 01:12:38,980
0,180 180,300 300,360 360,720 720,1290
for all the preceding entries.|
|

1953
01:12:40,470 --> 01:12:41,520
0,390 390,570 570,720 720,810 810,1050
{} And so the only
所以，他们要做的唯一一件事，

1954
01:12:41,520 --> 01:12:42,630
0,120 120,390 390,540 540,930 930,1110
thing they are basically do,|
|

1955
01:12:42,630 --> 01:12:44,310
0,450 450,780 780,1080 1080,1200 1200,1680
{} the server can do|
服务器可以|

1956
01:12:44,340 --> 01:12:46,440
0,780 810,1260 1260,1380 1380,1740 1740,2100
basically split the world, fork
将世界分成两个不同的日志，

1957
01:12:46,440 --> 01:12:48,750
0,90 90,480 960,1560 1560,1980 1980,2310
the world into different {}

1958
01:12:48,750 --> 01:12:51,300
0,270 270,420 420,690 690,1260 2310,2550
into two different logs,| they
|它们可能在开始时有一个共同的日志，

1959
01:12:51,300 --> 01:12:52,170
0,210 210,330 330,360 360,690 690,870
might have a common log

1960
01:12:52,170 --> 01:12:53,370
0,60 60,120 120,660 720,1110 1110,1200
at the beginning,| then to
|然后 fork 它们，

1961
01:12:53,370 --> 01:12:54,870
0,210 210,270 270,600 600,990 1110,1500
sort of fork them,| now
|现在， A 和 B 在不同的世界运行。

1962
01:12:54,870 --> 01:12:55,740
0,240 240,360 360,540 540,750 750,870
that you know A and

1963
01:12:55,740 --> 01:12:57,120
0,270 270,630 630,1020 1020,1110 1110,1380
B basically operate in different

1964
01:12:57,120 --> 01:12:57,820
0,570
worlds.|
|

1965
01:12:59,240 --> 01:13:00,360
0,510

1966
01:13:01,500 --> 01:13:02,460
0,360 360,540 540,720 720,870 870,960
So, and that's sort of
所以，这就是 fork 一致性的定义，

1967
01:13:02,460 --> 01:13:04,410
0,570 600,1140 1140,1320 1320,1860 1860,1950
the definition fork consistency,| and
|这基本上是最好的，

1968
01:13:04,410 --> 01:13:05,760
0,240 240,600 600,780 780,1290 1290,1350
that's basically the best| you
|这个文件系所能做的，

1969
01:13:05,760 --> 01:13:07,140
0,90 90,270 270,660 660,900 900,1380
know this particular file system,

1970
01:13:07,140 --> 01:13:09,120
0,630 630,1110 1110,1350 1350,1470 1470,1980
this particular system can do,|
|

1971
01:13:09,180 --> 01:13:11,130
0,360 360,660 690,900 900,1350 1350,1950
if there's, the only communication
唯一的通信发生在 S 之间。

1972
01:13:11,130 --> 01:13:12,760
0,300 300,660 660,1020 1020,1470
actually happens between S.|
|

1973
01:13:15,270 --> 01:13:16,200
0,390 390,480 480,690 690,840 840,930
Notice is actually by the
顺便说一句，

1974
01:13:16,200 --> 01:13:17,580
0,480 660,900 900,1110 1110,1170 1170,1380
way,| that's sort of fork
|这种 fork 一致性足够，

1975
01:13:17,580 --> 01:13:18,990
0,570 570,660 660,840 840,1200 1200,1410
consistency is good enough| for
|对于我们的特定应用程序 zookeeper ，

1976
01:13:18,990 --> 01:13:20,400
0,180 180,540 540,1080 1080,1200 1200,1410
our particular applications {zookeeper -},

1977
01:13:20,400 --> 01:13:24,120
0,120 120,510 930,1500 1500,2640 3090,3720
{} correct,| {} because the,
|因为，要么服务器显示旧版本，没有 A B ，

1978
01:13:24,270 --> 01:13:25,770
0,480 480,630 630,1050 1050,1380 1380,1500
either the server shows the

1979
01:13:25,770 --> 01:13:27,690
0,480 510,1140 1170,1290 1290,1440 1440,1920
old version, you know without

1980
01:13:27,690 --> 01:13:28,500
0,600
{A,B},|
|

1981
01:13:28,710 --> 01:13:30,720
0,660 660,1440 1470,1560 1560,1680 1680,2010
{} or you know the
或者服务器显示 S 的 A 和 B 的修改。

1982
01:13:30,720 --> 01:13:31,950
0,360 360,600 600,690 690,1110 1110,1230
server shows the S you

1983
01:13:31,950 --> 01:13:33,930
0,180 180,540 540,1170 1170,1500 1500,1980
know the modification with {A,and,B}.|
|

1984
01:13:37,530 --> 01:13:38,640
0,540 630,810 810,960 960,1020 1020,1110
Okay, so what do you
好的，那你要怎么做，

1985
01:13:38,640 --> 01:13:39,960
0,420 690,900 900,1110 1110,1260 1260,1320
do,| it seems like you
|这看起来是个问题，

1986
01:13:39,960 --> 01:13:41,010
0,150 150,540 540,660 660,780 780,1050
know maybe this is actually

1987
01:13:41,010 --> 01:13:43,200
0,570 570,1470 1500,1650 1650,1770 1770,2190
problem,| how do you detect
|你如何检测 fork ，

1988
01:13:43,200 --> 01:13:45,450
0,600 1380,1560 1560,1710 1710,1890 1890,2250
forks| and how could you,
|如何检测 fork 。

1989
01:13:52,150 --> 01:13:52,990
0,240 240,300 300,390 390,630 630,840
so how do you detect

1990
01:13:52,990 --> 01:13:55,120
0,120 120,720 720,1320 1320,1740 1740,2130
fork.| {Well\,,there's} two {} schemes,
|这篇论文提到了两个方案，

1991
01:13:55,120 --> 01:13:58,420
0,570 570,1560 1590,2280 2610,2910 2910,3300
that paper mentions,| {} one
|一种是带外通信，

1992
01:13:58,420 --> 01:14:00,340
0,660 660,840 840,900 900,1140 1140,1920
is {out-of-band - -} communication,|
|

1993
01:14:10,320 --> 01:14:11,880
0,180 180,300 300,510 510,1260
it is pretty straightforward,|
这很简单，|

1994
01:14:12,150 --> 01:14:13,710
0,120 120,420 420,870 870,1080 1080,1560
you know if you know
如果 A 和 B 互相通信，

1995
01:14:13,710 --> 01:14:15,360
0,510 510,960 990,1440 1440,1530 1530,1650
{A,and,B} ever talk to each

1996
01:14:15,360 --> 01:14:16,080
0,420
other,|
|

1997
01:14:16,530 --> 01:14:17,580
0,210 210,600 600,690 690,900 900,1050
for example {} ask each
比如询问对方，

1998
01:14:17,580 --> 01:14:18,570
0,360 390,540 540,690 690,780 780,990
other,| hey, what did your
|你在日志里的最后一条记录是什么，

1999
01:14:18,570 --> 01:14:19,800
0,300 300,600 600,690 690,750 750,1230
last entry in the log,|
|

2000
01:14:20,220 --> 01:14:21,270
0,420 420,570 570,660 660,780 780,1050
{} and they get different
它们得到不同的答案，

2001
01:14:21,270 --> 01:14:22,120
0,570
answers,|
|

2002
01:14:22,540 --> 01:14:23,620
0,300 300,690 690,780 780,930 930,1080
they know you know that
它们知道他们被分叉了，

2003
01:14:23,620 --> 01:14:25,660
0,60 60,180 180,330 330,630 1290,2040
they have been fork, {}|
|

2004
01:14:25,690 --> 01:14:28,240
0,720 720,1050 1050,1860 2040,2400 2400,2550
because either they could have
因为它们可能会有不同的答案，

2005
01:14:28,240 --> 01:14:29,650
0,240 240,510 510,690 690,960 960,1410
different answers,| but at least
|但至少其中一个应该是另一个的前缀，

2006
01:14:29,770 --> 01:14:30,880
0,330 330,540 540,810 810,990 990,1110
{} then one should be

2007
01:14:30,880 --> 01:14:31,930
0,90 90,480 480,570 570,690 690,1050
the prefix of the other,|
|

2008
01:14:32,430 --> 01:14:33,480
0,390 390,570 570,630 630,900 900,1050
{} and if that's not
如果不是这样的话，

2009
01:14:33,480 --> 01:14:35,070
0,60 60,660 720,990 990,1440 1440,1590
the case,| {} then they
|然后它们就会知道它们分叉了。

2010
01:14:35,070 --> 01:14:36,150
0,180 180,330 330,450 450,750 750,1080
know that they're actually being

2011
01:14:36,150 --> 01:14:37,780
0,390 420,870 870,1380
{} exactly fork.|
|

2012
01:14:40,760 --> 01:14:42,980
0,570 690,870 870,1110 1110,1500 1500,2220
So, {} that's one possible
所以，这是他们在论文中讨论的一种可能的情况，

2013
01:14:43,010 --> 01:14:45,170
0,840 960,1470 1470,1590 1590,1740 1740,2160
{} scenario, that they discussed

2014
01:14:45,170 --> 01:14:46,940
0,60 60,120 120,540 540,1200 1260,1770
in the paper,| basically {}
|客户端定期交换的最新的日志条目，

2015
01:14:46,940 --> 01:14:50,360
0,840 840,1110 1380,1860 1860,2730 2760,3420
share the clients periodically exchange

2016
01:14:50,360 --> 01:14:51,830
0,240 240,330 330,690 690,930 930,1470
{} the last log entries,|
|

2017
01:14:52,730 --> 01:14:53,870
0,210 210,390 420,810 810,1080 1080,1140
{} the last entry in
它们日志中的最后一条记录。

2018
01:14:53,870 --> 01:14:55,550
0,120 120,540 690,1200 1200,1560 1560,1680
their log.| Another solution which
|聊天中已经提到的另一个解决方案是，

2019
01:14:55,550 --> 01:14:56,540
0,270 270,420 420,750 750,840 840,990
actually has mentioned in the

2020
01:14:56,540 --> 01:14:59,120
0,480 690,1650 1680,2310
chat is, {}|
|

2021
01:14:59,800 --> 01:15:01,210
0,270 270,840 840,990 990,1080 1080,1410
{you,know} introduce what they call
引入了他们所说的某种受信任的机器，

2022
01:15:01,210 --> 01:15:05,380
0,90 90,540 540,1230 1530,2670 2760,4170
{sort,of} trusted machine,| {} {that,is}
|也就是时间戳机器，

2023
01:15:05,380 --> 01:15:09,190
0,240 240,510 510,990 3120,3450 3450,3810
time stamp box,| and basically
|基本上每隔几秒钟，

2024
01:15:09,190 --> 01:15:10,990
0,150 150,780 780,1050 1050,1680 1680,1800
like every few seconds,| you
|它将时间戳添加到日志中，

2025
01:15:10,990 --> 01:15:12,580
0,120 120,240 240,540 540,1050 1350,1590
know it actually ends adds

2026
01:15:12,580 --> 01:15:13,960
0,60 60,330 330,720 720,1200 1200,1380
a time stamp to the

2027
01:15:13,990 --> 01:15:17,950
0,660 930,1740 1740,2640 2640,3180 3390,3960
log,| and {} and every
|每个客户端知道它是一个文件，

2028
01:15:17,950 --> 01:15:19,570
0,510 510,870 870,1290 1290,1440 1440,1620
client knows that you know

2029
01:15:19,600 --> 01:15:20,650
0,390 390,480 480,570 570,960 960,1050
basically it's a file,| in
|在文件系统中，包含当前时间，

2030
01:15:20,650 --> 01:15:22,090
0,90 90,360 360,720 720,990 990,1440
the file system that contains

2031
01:15:22,090 --> 01:15:23,590
0,120 120,420 420,660 690,990 990,1500
you know the current time,|
|

2032
01:15:23,710 --> 01:15:26,080
0,870 870,1440 1470,1800 1800,1980 1980,2370
everytime the time stamp box,|
每次时间戳机器，|

2033
01:15:26,080 --> 01:15:27,250
0,120 120,420 420,630 630,810 810,1170
you know every couple seconds
每隔几秒时间戳机器就会更新一次文件，

2034
01:15:27,250 --> 01:15:28,690
0,210 210,390 390,780 810,1230 1230,1440
time stamp box updates that

2035
01:15:28,690 --> 01:15:30,520
0,570 780,1080 1080,1470 1470,1680 1680,1830
file,| the clients read that
|客户端读取该文件，

2036
01:15:30,520 --> 01:15:32,080
0,660 750,1020 1020,1170 1170,1440 1440,1560
file,| and they know there
|它们知道每隔几秒钟就会有一次新的修改，

2037
01:15:32,080 --> 01:15:33,280
0,180 180,270 270,330 330,510 510,1200
should be a new modification

2038
01:15:33,280 --> 01:15:34,460
0,240 240,450 450,660 660,1110
like every couple seconds,|
|

2039
01:15:35,170 --> 01:15:36,400
0,300 300,480 480,960 960,1080 1080,1230
and that basically you know
基本上这个 fork ，

2040
01:15:36,400 --> 01:15:38,500
0,600 630,960 960,1530 1560,1710 1710,2100
that that fork,| that contains
|包含时间戳盒的是那个 fork ，

2041
01:15:38,500 --> 01:15:39,850
0,390 420,630 630,870 870,1170 1170,1350
the time stamp box is

2042
01:15:39,850 --> 01:15:41,920
0,180 180,300 300,750 840,1440 1440,2070
sort of the fork,| the
|客户端，服务器呈现给客户端的。

2043
01:15:42,220 --> 01:15:44,620
0,690 690,2160
{the,clients -},

2044
01:15:44,980 --> 01:15:46,000
0,210 210,300 300,600 600,840 840,1020
{} the server actually has

2045
01:15:46,000 --> 01:15:47,920
0,360 390,990 990,1140 1140,1350 1350,1920
to present to the clients.|
|

2046
01:15:51,800 --> 01:15:52,680
0,630
Okay?|
好的?|

2047
01:15:53,720 --> 01:15:54,830
0,150 150,360 360,450 450,840 840,1110
So that's the two things
这就是这篇论文讨论的两件事，

2048
01:15:54,830 --> 01:15:56,150
0,120 120,330 330,420 420,630 630,1320
that actually the paper discusses,|
|

2049
01:15:56,360 --> 01:15:57,350
0,150 150,360 360,510 510,600 600,990
and what's sort of interesting
我们将在周二看到有趣的，

2050
01:15:57,350 --> 01:15:58,970
0,150 150,300 300,510 510,870 900,1620
and we'll see on Tuesday,|
|

2051
01:15:59,090 --> 01:16:00,830
0,420 420,690 690,1140 1140,1500 1500,1740
{} is this, this whole
这个 fork 检测方法，

2052
01:16:00,830 --> 01:16:03,290
0,630 660,1350 1350,1470 1470,1860 1860,2460
fork detection in fork resolution

2053
01:16:03,290 --> 01:16:04,490
0,390 390,600 600,750 750,810 810,1200
approach| is sort of a
|是比特币的一个关键问题，

2054
01:16:04,490 --> 01:16:05,960
0,180 180,570 570,930 930,1020 1020,1470
key problem basically in Bitcoin,|
|

2055
01:16:06,920 --> 01:16:08,810
0,300 300,960 1020,1230 1230,1500 1500,1890
and we will talking Tuesday,|
我们将在周二讨论，|

2056
01:16:08,810 --> 01:16:10,160
0,180 180,840 990,1110 1110,1230 1230,1350
but Bitcoin you know we
但是比特币，我们会看到一种解决 fork 的方法，

2057
01:16:10,160 --> 01:16:11,840
0,360 360,480 480,870 870,1320 1320,1680
see a way basically to

2058
01:16:11,840 --> 01:16:14,200
0,420 420,570 570,660 660,1290
settle on the fork,|
|

2059
01:16:15,650 --> 01:16:17,000
0,150 150,720 750,960 960,1050 1050,1350
so even if the file
所以，即使文件系统或服务器，

2060
01:16:17,000 --> 01:16:19,310
0,390 390,570 570,660 660,1230 1230,2310
system or the servers,| the
|拜占庭服务器已经创建了一个 fork ，

2061
01:16:19,340 --> 01:16:20,930
0,360 360,840 840,1110 1110,1230 1230,1590
Byzantine servers actually have created

2062
01:16:20,930 --> 01:16:22,400
0,90 90,600 870,1320 1320,1380 1380,1470
a fork,| {} you know
|比特币有一种方式来决定，

2063
01:16:22,400 --> 01:16:23,780
0,360 360,720 720,990 990,1110 1110,1380
Bitcoin basically has a way

2064
01:16:23,780 --> 01:16:25,460
0,150 150,780 780,1260 1290,1500 1500,1680
of deciding,| well, we're gonna
|好的，我们将读取共识，

2065
01:16:25,460 --> 01:16:27,020
0,240 240,420 420,870 870,1320 1320,1560
reads the consensus| {on,like} which
|哪个 fork 将会继续。

2066
01:16:27,020 --> 01:16:27,890
0,360 360,450 450,570 570,630 630,870
fork we're going to actually

2067
01:16:27,890 --> 01:16:28,660
0,330 330,450
proceed with.|
|

2068
01:16:29,480 --> 01:16:31,190
0,570 750,1110 1110,1350 1350,1530 1530,1710
{} So we'll leave that
所以我们把这件事留到周二，

2069
01:16:31,190 --> 01:16:32,960
0,390 390,630 630,720 720,1410 1500,1770
up to {} Tuesday, {}|
|

2070
01:16:32,960 --> 01:16:34,130
0,330 330,510 510,570 570,660 660,1170
{but,here} sort of a connection
但这是 SUNDR 和比特币之间的某种联系。

2071
01:16:34,130 --> 01:16:36,770
0,930 1170,1890 1890,1950 1950,2040 2040,2640
between {} you know SUNDR

2072
01:16:36,770 --> 01:16:38,120
0,330 330,780 780,900 900,1080 1080,1350
and actually {} {Bitcoin -}.|
|

2073
01:16:40,940 --> 01:16:44,760
0,210 210,510 510,690 690,930
Any questions about this?|
对于这个，有什么问题吗？|

2074
01:16:50,050 --> 01:16:51,360
0,540
Okay.|
好的。|

2075
01:16:51,640 --> 01:16:52,480
0,210 210,270 270,420 420,540 540,840
Okay, I want to talk
好的，我想说得很快，

2076
01:16:52,480 --> 01:16:53,890
0,330 330,690 690,930 930,1050 1050,1410
very quickly,| because I got
|因为我只剩三分钟了，

2077
01:16:53,890 --> 01:16:56,140
0,120 120,360 360,690 720,1470 1500,2250
three minutes left,| {} about
|关于另一个，

2078
01:16:56,170 --> 01:16:57,340
0,870
{}

2079
01:16:58,170 --> 01:17:00,030
0,780 810,1230 1230,1470 1470,1680 1680,1860
the other,| so I think
|所以我认为这篇论文的关键是

2080
01:17:00,030 --> 01:17:00,930
0,60 60,300 300,450 450,660 660,900
the key thing I'll get

2081
01:17:00,930 --> 01:17:02,310
0,90 90,420 420,660 660,1020 1020,1380
the paper is| actually this
|这个关于世界的日志概念观，

2082
01:17:02,490 --> 01:17:03,990
0,690 690,1140 1140,1350 1350,1410 1410,1500
log conceptual view of the

2083
01:17:03,990 --> 01:17:06,990
0,360 1110,1800 1800,2190 2190,2280 2280,3000
world,| of course the impractical
|当然，我前面提到的不切实际的，

2084
01:17:06,990 --> 01:17:08,490
0,150 150,210 210,540 540,1170 1320,1500
as I mentioned earlier,| and
|所以，一些人提出了如何做得更好的建议，

2085
01:17:08,490 --> 01:17:09,390
0,180 180,390 390,720 720,840 840,900
so some directly has a

2086
01:17:09,390 --> 01:17:10,470
0,480 480,630 630,810 810,900 900,1080
proposal for how to do

2087
01:17:10,470 --> 01:17:12,270
0,510 780,1170 1170,1410 1410,1680 1680,1800
better,| {} even though like
|即使其他系统维护整个日志，

2088
01:17:12,270 --> 01:17:13,530
0,180 180,570 570,840 840,1050 1050,1260
other systems like going actually

2089
01:17:13,530 --> 01:17:14,760
0,210 210,570 570,630 630,840 840,1230
do maintain the whole log,|
|

2090
01:17:14,850 --> 01:17:16,530
0,390 390,510 510,600 600,750 750,1680
{} and so what does
那么，其他人怎么把事情做好呢，

2091
01:17:16,740 --> 01:17:18,540
0,330 330,570 570,810 810,1290 1470,1800
somebody do things better,| instead
|不是维护日志，

2092
01:17:18,540 --> 01:17:19,800
0,90 90,330 330,720 720,810 810,1260
of actually maintaining a log,|
|

2093
01:17:19,800 --> 01:17:21,480
0,90 90,210 210,600 600,900 900,1680
you know that's actually snapshots,|
而是维护快照，|

2094
01:17:22,240 --> 01:17:23,590
0,270 270,690 690,960 960,1140 1140,1350
that's similar to sort of
类似于某种快照，

2095
01:17:24,190 --> 01:17:25,960
0,660 660,810 810,990 990,1170 1170,1770
snapshots,| that we've seen before,
|我们之前在 Raft 中看到的，

2096
01:17:25,960 --> 01:17:27,520
0,300 300,330 330,840 840,1200 1200,1560
in {} Raft,| where we
|我们以日志为基础构建世界的一部分，

2097
01:17:27,730 --> 01:17:29,260
0,510 510,960 990,1230 1230,1320 1320,1530
construct the part of the

2098
01:17:29,260 --> 01:17:30,730
0,390 390,600 600,690 690,1080 1080,1470
world based on log,| we
|我们创建一个快照，

2099
01:17:30,730 --> 01:17:31,630
0,150 150,210 210,690 690,780 780,900
take a snapshot,| and that
|这形成了当前的状态，

2100
01:17:31,630 --> 01:17:33,790
0,270 270,660 660,1020 1440,1980 1980,2160
actually forms the the current

2101
01:17:33,790 --> 01:17:36,100
0,420 600,810 810,1230 1410,2040 2040,2310
state,| in fact, really what
|事实上， SUNDR 所做的，

2102
01:17:36,100 --> 01:17:37,870
0,690 840,1170 1170,1440 1440,1530 1530,1770
the SUNDR does,| it actually
|它不是从字面上创建快照，

2103
01:17:37,870 --> 01:17:39,580
0,240 240,870 870,1170 1170,1320 1320,1710
doesn't really literally make snapshot,|
|

2104
01:17:39,580 --> 01:17:41,170
0,180 180,390 390,1020 1020,1080 1080,1590
it really maintains a snapshot
它维护着文件系统的快照视图，

2105
01:17:41,170 --> 01:17:42,430
0,360 360,480 480,570 570,810 810,1260
view of the file system,|
|

2106
01:17:42,550 --> 01:17:43,720
0,150 150,330 330,450 450,690 690,1170
and does it per user.|
并针对每个用户。|

2107
01:17:46,200 --> 01:17:46,860
0,150 150,300 300,420 420,510 510,660
So one way to think
所以考虑这个问题的一种方式是，

2108
01:17:46,860 --> 01:17:47,700
0,240 240,360 360,480 480,660 660,840
about it is that,| that
|文件系统按用户进行分片，

2109
01:17:47,700 --> 01:17:49,320
0,240 240,600 600,810 810,1440 1440,1620
file systems is sharded by

2110
01:17:49,320 --> 01:17:51,060
0,600 660,960 960,1320 1320,1620 1620,1740
user,| every user has its
|每个用户都有自己的世界视图快照，

2111
01:17:51,060 --> 01:17:52,470
0,330 330,630 630,1230 1230,1320 1320,1410
own view snapshot of the

2112
01:17:52,470 --> 01:17:54,300
0,510 840,1470 1470,1590 1590,1710 1710,1830
world,| and you know there's
|这里有一些协议，

2113
01:17:54,300 --> 01:17:54,840
0,60 60,240 240,360 360,450 450,540
a little bit of {}

2114
01:17:54,840 --> 01:17:55,800
0,360 360,450 450,600 600,810 810,960
protocol| to make sure that
|确保不同的快照和不同的用户是一致的。

2115
01:17:55,800 --> 01:17:57,660
0,600 600,870 870,1410 1410,1560 1560,1860
these different snapshots and different

2116
01:17:57,660 --> 01:18:00,420
0,480 540,810 810,1080 1080,1740 2310,2760
users are actually consistent. {}|
|

2117
01:18:00,420 --> 01:18:01,800
0,420 420,720 720,1200
And let me
让我来谈一谈，

2118
01:18:02,120 --> 01:18:03,080
0,510
{}

2119
01:18:03,180 --> 01:18:04,650
0,390 390,390 390,720 720,840 840,1470
talk a little bit about,|
|

2120
01:18:04,710 --> 01:18:06,870
0,390 390,960 960,1440 1440,1710 1710,2160
{} how actually {SUNDR,actually -}
SUNDR 是如何创建快照的。

2121
01:18:06,870 --> 01:18:08,840
0,570 600,900 900,990 990,1650
has makes the snapshot.|
|

2122
01:18:10,050 --> 01:18:13,080
0,750 870,1200 1200,1920 2010,2730
Basically in SUNDR, {}|
基本上在 SUNDR 中，|

2123
01:18:15,310 --> 01:18:16,390
0,150 150,300 300,420 420,810 810,1080
and {SUNDR -} basically there's
SUNDR 有一种叫做用户 i-handle 的东西，

2124
01:18:16,390 --> 01:18:17,350
0,240 240,360 360,540 540,630 630,960
something that's called the user

2125
01:18:17,350 --> 01:18:18,240
0,180 180,510
{i-handle -},|
|

2126
01:18:18,680 --> 01:18:19,760
0,270 270,330 330,630 630,810 810,1080
and the user {i-handle -}
并且用户 i-handle 唯一地标识文件系统中的快照，

2127
01:18:19,760 --> 01:18:22,070
0,360 360,1110 1110,1710 1710,2220 2220,2310
basically uniquely identifies snapshot in

2128
01:18:22,070 --> 01:18:23,720
0,90 90,360 360,810 1080,1290 1290,1650
the file system,| and basically
|并且是 i-table 的加密哈希，

2129
01:18:23,720 --> 01:18:25,640
0,90 90,150 150,690 690,1290 1320,1920
is a cryptographic hash of

2130
01:18:25,640 --> 01:18:26,360
0,390
the

2131
01:18:26,560 --> 01:18:28,000
0,240 240,690 690,1020 1020,1170 1170,1440
{i-table -},| which {completes -}
|它完成了系统中的所有 inode ，

2132
01:18:28,000 --> 01:18:28,870
0,210 210,360 360,480 480,810 810,870
all the {inodes -} in

2133
01:18:28,870 --> 01:18:30,790
0,90 90,690 1020,1560 1560,1680 1680,1920
the system,| and you know
|对于每个 inode ，

2134
01:18:30,790 --> 01:18:32,950
0,510 510,930 930,1500 1590,1980 1980,2160
and { -} {for,every} {inode

2135
01:18:32,950 --> 01:18:33,940
0,240 240,450 450,480 480,810 810,990
-},| there's a hash {}
|有一个哈希 inode ，

2136
01:18:33,940 --> 01:18:35,200
0,150 150,390 390,480 480,630 630,1260
{inode -},| it would basically
|它涵盖了这个 inode 所有数据，所有数据块，

2137
01:18:35,200 --> 01:18:36,370
0,300 300,540 540,660 660,1050 1050,1170
covers all the data, all

2138
01:18:36,370 --> 01:18:37,600
0,90 90,540 540,960 960,1050 1050,1230
the blocks belong to that

2139
01:18:37,600 --> 01:18:38,720
0,390 390,540 540,900
particular {inode -},|
|

2140
01:18:39,270 --> 01:18:41,970
0,210 210,270 270,810 1620,2220 2400,2700
so, for example, when {}
例如，假设 A 在我的写入块中修改 auth.py ，

2141
01:18:41,970 --> 01:18:44,280
0,270 270,540 540,1410 1410,1890 1890,2310
say A modifies {auth.py -

2142
01:18:44,280 --> 01:18:45,390
0,240 240,390 390,570 570,870 870,1110
-} in my write one

2143
01:18:45,390 --> 01:18:48,360
0,570 900,1530 1560,2400 2430,2850 2850,2970
block,| {} the client {re-computes
|客户端重新计算该块的哈希值，

2144
01:18:48,360 --> 01:18:49,620
0,390 390,510 510,900 900,1080 1080,1260
-} the hash of this

2145
01:18:49,620 --> 01:18:51,870
0,540 570,1140 1140,1260 1260,1620 1620,2250
block,| updates the entry here,
|更新这里的条目，更新这里的条目，更新这里的条目，

2146
01:18:52,110 --> 01:18:54,270
0,600 600,750 750,1110 1110,1710 1740,2160
updates the entry here, updates

2147
01:18:54,270 --> 01:18:55,650
0,60 60,420 420,990 1050,1170 1170,1380
the entry here,| and that's
|这是一个新的 handle ，

2148
01:18:55,650 --> 01:18:57,570
0,540 540,690 690,930 930,1590 1770,1920
basically a new handle,| that
|这描述了，是对完整文件系统的快照，

2149
01:18:57,570 --> 01:18:59,940
0,630 630,1260 1260,1650 1650,1770 1770,2370
describes basically the the capture

2150
01:18:59,940 --> 01:19:01,410
0,90 90,180 180,450 450,990 1050,1470
you know the complete file

2151
01:19:01,410 --> 01:19:02,910
0,390 660,840 840,960 960,1020 1020,1500
system,| we're going to ignore
|我们将暂时忽略目录块中的组，

2152
01:19:02,910 --> 01:19:04,650
0,90 90,480 480,720 720,870 870,1740
the group in the directory

2153
01:19:04,860 --> 01:19:06,990
0,510 510,720 720,1500 1500,1800 1800,2130
block for a second,| so
|所以这给了你一个完整的检查点，

2154
01:19:07,050 --> 01:19:08,730
0,180 180,600 600,810 810,960 960,1680
this basically gives you complete

2155
01:19:08,760 --> 01:19:11,250
0,600 600,1230 1230,1530 1530,1800 1800,2490
{} checkpoint,| where {} snapshot
|用户的快照来查看文件系统。

2156
01:19:11,400 --> 01:19:13,560
0,630 660,690 780,1200 1200,1560 1560,2160
of {} user to view

2157
01:19:13,560 --> 01:19:14,540
0,120 120,210 210,510 510,900
of the file system.|
|

2158
01:19:16,780 --> 01:19:19,090
0,690 900,1080 1080,1260 1260,1830 1860,2310
Now and then to deal
为了处理这个问题，

2159
01:19:19,090 --> 01:19:20,380
0,150 150,270 270,690 690,1020 1020,1290
with this issue,| of how
|如何在用户之间获得某种一致性，

2160
01:19:20,380 --> 01:19:22,660
0,510 540,930 930,1410 1440,1740 1740,2280
to get a {sort,of} consistency

2161
01:19:22,660 --> 01:19:25,300
0,540 540,1080 1410,1980 1980,2340 2340,2640
across users,| {} they have
|他们有这个版本向量的概念。

2162
01:19:25,300 --> 01:19:26,650
0,150 150,450 450,510 510,810 810,1350
this notion of version vectors.|
|

2163
01:19:33,840 --> 01:19:35,220
0,480 480,720 720,1050 1050,1170 1170,1380
What version vector is pretty
版本向量非常简单，

2164
01:19:35,220 --> 01:19:38,310
0,810 1410,1710 1710,2040 2040,2400 2400,3090
straightforward,| every version vector has
|每个版本向量都有一个 i-handle ，

2165
01:19:38,550 --> 01:19:39,720
0,180 180,360 360,690 690,1020 1020,1170
an {i-handle -},| like A
|比如 A 有一个 i-handle ，

2166
01:19:39,720 --> 01:19:40,860
0,330 330,630 630,750 750,870 870,1140
{has,i-handle -} is in it|
|

2167
01:19:41,100 --> 01:19:43,180
0,540 540,750 750,1500
after it modified
在它修改 auth.py 之后，

2168
01:19:43,900 --> 01:19:46,900
0,570 570,1380 1590,2190 2190,2460 2460,3000
say {} {auth.py - -}|
|

2169
01:19:46,960 --> 01:19:48,760
0,120 120,270 270,450 450,1020 1230,1800
and then for every {}
然后对于系统中的每个用户，

2170
01:19:48,760 --> 01:19:50,410
0,420 420,480 480,570 570,1200 1320,1650
user in the system,| the
|版本向量具有修改次数的计数器，

2171
01:19:50,410 --> 01:19:52,090
0,270 270,630 630,1140 1140,1230 1230,1680
version vector has a counter

2172
01:19:52,090 --> 01:19:53,260
0,150 150,240 240,420 420,480 480,1170
for the number of modifications,|
|

2173
01:19:53,260 --> 01:19:54,040
0,150 150,270 270,510 510,570 570,780
that were made by that
由该用户进行的修改，

2174
01:19:54,040 --> 01:19:55,840
0,270 360,660 660,870 870,990 990,1800
user,| so if A made
|所以，如果 A 更新了 auth.py ，

2175
01:19:55,960 --> 01:19:58,300
0,450 450,870 870,1440 1650,2070 2070,2340
updated {auth.py -},| {that,counter} {is,set,to}
|则该计数器被设置为 1 ，

2176
01:19:58,300 --> 01:20:00,010
0,540 810,1050 1050,1260 1260,1500 1500,1710
1,| {you,know} B didn't make
|B 没有做任何修改，

2177
01:20:00,010 --> 01:20:01,840
0,150 150,1260 1260,1470 1470,1650 1650,1830
any modifications,| {you,know,C} didn't make
|C 没有做任何修改，

2178
01:20:01,840 --> 01:20:04,570
0,180 180,1050 1350,1980 1980,2580 2580,2730
any modifications,| 0 0,| and
|就是 0 0 ，|这整个东西都是签名的。

2179
01:20:04,570 --> 01:20:06,130
0,120 120,390 390,930 960,1110 1110,1560
this whole thing is signed.|
|

2180
01:20:09,620 --> 01:20:11,300
0,240 240,390 390,810 870,1380 1380,1680
And so when B makes
所以，当 B 进行修改时，

2181
01:20:11,300 --> 01:20:12,530
0,750 750,930 930,1050 1050,1170 1170,1230
modifications,| so we use the
|所以我们使用 B 的版本向量，

2182
01:20:12,530 --> 01:20:15,200
0,240 240,600 600,1110 1710,2610 2610,2670
version vector {for,B},| {A,version,vector -},
|A 版本向量， B 版本向量，

2183
01:20:15,200 --> 01:20:18,290
0,1620 1620,2070 2700,2820 2820,3060 3060,3090
{} {B,version,vector},| it creates a
|它会创建一个新的 handle ，

2184
01:20:18,290 --> 01:20:20,660
0,180 180,1050 1740,1920 1920,2310 2310,2370
new handle,| that includes of
|当然，这包括所有的修改，

2185
01:20:20,660 --> 01:20:23,720
0,240 240,420 420,780 990,1830 1830,3060
course all the modification, represents

2186
01:20:23,720 --> 01:20:25,460
0,90 90,150 150,930 1350,1590 1590,1740
all the modifications,| and in
|并且在它的版本 handle 中，

2187
01:20:25,460 --> 01:20:27,080
0,150 150,480 480,1020 1140,1290 1290,1620
its version handle,| it actually
|它打开了它的版本向量，

2188
01:20:27,080 --> 01:20:28,370
0,300 300,390 390,660 660,1140 1170,1290
opened its version vector,| it
|它包括用户读取了多少操作，

2189
01:20:28,370 --> 01:20:30,710
0,510 510,1230 1260,1650 1650,1860 1860,2340
includes which how many operations

2190
01:20:30,710 --> 01:20:31,760
0,90 90,360 360,510 510,690 690,1050
are read by a user,|
|

2191
01:20:31,760 --> 01:20:32,660
0,180 180,300 300,420 420,810 810,900
so it will record the
所以它会记录这个事实，

2192
01:20:32,660 --> 01:20:34,640
0,360 360,540 570,1140 1350,1800 1800,1980
fact,| for example that it
|比如它看到了 A 的修改，

2193
01:20:34,640 --> 01:20:36,980
0,270 270,630 630,1020 1020,1890 2160,2340
actually saw A's modification,| it
|它更新 B 为 1 ， C 为 0 ，

2194
01:20:36,980 --> 01:20:38,720
0,480 480,630 630,1020 1020,1140 1140,1740
updates {B,is} to be 1,

2195
01:20:38,960 --> 01:20:41,300
0,480 480,1200 1410,1980 1980,2280 2280,2340
{C,is} 0,| {and,basically} signed to
|并且对整个事情签名。

2196
01:20:41,300 --> 01:20:42,420
0,210 210,420 420,660
this whole thing.|
|

2197
01:20:44,740 --> 01:20:45,940
0,120 120,270 270,900
You know C,
当 C 执行操作时，

2198
01:20:47,110 --> 01:20:49,300
0,240 240,480 480,840 840,1650 1830,2190
when C {actually,does,an} operation, {}|
|

2199
01:20:49,300 --> 01:20:50,440
0,300 300,510 510,870 870,990 990,1140
want to read you know
想要读取 auth.py ，

2200
01:20:50,440 --> 01:20:52,510
0,210 210,360 390,960 960,1440 1440,2070
{auth.py - -}| and {}
|并且获取 bank.py ，

2201
01:20:52,540 --> 01:20:56,410
0,360 360,720 1170,1890 2070,2850 3270,3870
fetch {you,know} and {} {bank.py

2202
01:20:56,410 --> 01:20:58,540
0,810 870,1050 1050,1410 1410,1980 1980,2130
-},| it basically downloads all
|它下载每个用户的所有版本向量，

2203
01:20:58,540 --> 01:21:00,250
0,90 90,450 450,1020 1080,1350 1350,1710
the version vectors from every

2204
01:21:00,250 --> 01:21:02,290
0,510 540,1560 1560,1770 1770,1890 1890,2040
user,| {you,know} and in this
|在这种情况下，

2205
01:21:02,290 --> 01:21:03,040
0,300 300,390 390,510 510,690 690,750
case,| it will get the
|它将获得 A 和 B 的版本向量，

2206
01:21:03,040 --> 01:21:05,230
0,180 180,510 510,750 750,1350 1680,2190
{version,vector -} for {A,and,B}, {}|
|

2207
01:21:06,250 --> 01:21:07,840
0,360 360,450 450,750 750,1110 1290,1590
takes the latest one, which
取最新的一个，在本例中是 B ，

2208
01:21:07,840 --> 01:21:08,860
0,60 60,210 210,450 450,600 600,1020
in this case is B,|
|

2209
01:21:09,250 --> 01:21:11,020
0,690 690,1080 1080,1230 1230,1590 1590,1770
because actually it includes all
因为它包含了 A 的所有操作，

2210
01:21:11,020 --> 01:21:12,430
0,90 90,690 690,810 810,1200 1230,1410
the operations of A in

2211
01:21:12,430 --> 01:21:14,620
0,300 750,930 930,1170 1170,1590 1590,2190
it,| and that's basically represented
|这代表了文件系统的版本，

2212
01:21:14,620 --> 01:21:16,000
0,360 360,480 480,570 570,840 840,1380
version of the file system,|
|

2213
01:21:16,000 --> 01:21:17,230
0,150 150,330 330,720 720,870 870,1230
from that version, it reads
从那个版本，它读取 auth.py 和 bank.py ，

2214
01:21:17,230 --> 01:21:20,920
0,120 120,630 630,1260 2580,3180 3180,3690
{you,know} {auth.py,and -} {bank.py -},|
|

2215
01:21:24,280 --> 01:21:25,690
0,660 660,720 720,840 840,990 990,1410
note, you know that basically
注意，服务器不可能

2216
01:21:25,690 --> 01:21:27,400
0,150 150,840 840,960 960,1020 1020,1710
it's impossible for the server|
|

2217
01:21:27,640 --> 01:21:31,540
0,810 840,1440 1440,2100 2280,3240 3240,3900
to basically present {bank.py -},
只显示 bank.py ，而不是 auth.py ，

2218
01:21:31,750 --> 01:21:34,420
0,480 480,720 720,990 990,1920 2280,2670
not {auth.py - -}, {}|
|

2219
01:21:34,420 --> 01:21:36,160
0,600 600,780 780,930 930,1110 1110,1740
because you know it cannot,|
因为你知道它不能，|

2220
01:21:36,250 --> 01:21:37,210
0,150 150,270 270,420 420,690 690,960
you know it can only
因为它只能返回的版本向量是，

2221
01:21:37,210 --> 01:21:38,230
0,210 210,360 360,450 450,720 720,1020
to sort of version vector

2222
01:21:38,230 --> 01:21:40,180
0,330 330,960 1080,1410 1410,1650 1650,1950
can return is,| this version
|这个版本向量或这个版本向量，

2223
01:21:40,180 --> 01:21:41,590
0,330 330,420 420,630 630,930 930,1410
vector or this version vector,|
|

2224
01:21:41,710 --> 01:21:43,600
0,540 540,810 810,1170 1170,1470 1470,1890
version vector A doesn't include
版本向量 A 不包括 bank.py 的修改，

2225
01:21:43,600 --> 01:21:45,700
0,450 450,900 930,1410 1560,1860 1860,2100
actually the changes of {}

2226
01:21:45,700 --> 01:21:48,280
0,270 270,990 1170,1590 1590,2370 2400,2580
{bank.py -},| {} if C
|如果 C 得到了这个版本的 bank.py ，

2227
01:21:48,280 --> 01:21:49,450
0,240 240,480 480,660 660,1080 1080,1170
actually does get versions of

2228
01:21:49,450 --> 01:21:51,580
0,210 210,900 1050,1320 1320,1830 1830,2130
{bank.py -},| it must actually
|它必须有版本，修改是 A 所做的，

2229
01:21:51,580 --> 01:21:53,830
0,390 390,750 780,1440 1440,1620 1620,2250
have the versions, the modification

2230
01:21:53,830 --> 01:21:55,300
0,210 210,330 330,690 960,1380 1380,1470
A is made,| because the
|因为版本向量是以这种方式构造的。

2231
01:21:55,300 --> 01:21:56,560
0,300 300,630 630,690 690,1170 1170,1260
version vectors are constructed in

2232
01:21:56,560 --> 01:21:57,040
0,150 150,420
that way.|
|

2233
01:21:58,840 --> 01:22:00,280
0,150 150,270 270,540 540,1170 1200,1440
And so that's basically the
所以这就是使用版本向量的方法，

2234
01:22:00,280 --> 01:22:03,100
0,360 360,1080 1320,2070 2070,2370 2370,2820
way for using version vectors|
|

2235
01:22:03,160 --> 01:22:05,920
0,420 420,1140 1320,1800 1830,2340 2340,2760
to detect the S doesn't
为了检测 S 不会丢弃更改，

2236
01:22:05,920 --> 01:22:08,380
0,510 540,1020 1020,1680 1800,2280 2280,2460
drop {} changes,| {} as
|跟日志系统所使用的方式一样.

2237
01:22:08,380 --> 01:22:09,370
0,300 300,570 570,660 660,870 870,990
we as the same way

2238
01:22:09,370 --> 01:22:10,360
0,120 120,210 210,540 540,870 870,990
that the logging system is

2239
01:22:10,360 --> 01:22:10,840
0,180
done.|
|

2240
01:22:12,120 --> 01:22:13,140
0,210 210,330 330,540 540,660 660,1020
Okay, so that's the essence
好的，这就是版本向量方案的本质。

2241
01:22:13,140 --> 01:22:14,370
0,120 120,180 180,480 480,780 780,1230
of the version vector plan.|
|

2242
01:22:16,770 --> 01:22:18,840
0,630 720,1110 1170,1710
{} So, summary.|
所以，总结。|

2243
01:22:22,870 --> 01:22:26,560
0,660 690,1140 1170,1500 1500,1860 2700,3690
Okay, {} {Byzantine -} participants
好的，拜占庭式的参与者是一个问题，

2244
01:22:26,560 --> 01:22:28,540
0,120 120,540 540,960 1320,1770 1770,1980
{you,know} {sort,of} a problem| you
|你必须在去中心化系统中处理的，

2245
01:22:28,540 --> 01:22:31,330
0,150 150,240 240,720 720,2010 2040,2790
have to handle in decentralized

2246
01:22:31,330 --> 01:22:32,800
0,630
systems,|
|

2247
01:22:34,040 --> 01:22:36,020
0,360 360,570 570,780 780,1380 1380,1980
because there's no single institution
因为没有单一的机构，

2248
01:22:36,020 --> 01:22:37,640
0,120 120,390 390,450 450,1020 1140,1620
that sort of, { -}|
|

2249
01:22:37,640 --> 01:22:38,720
0,210 210,360 360,720 720,810 810,1080
it can be {} source
它可以成为信任的来源，

2250
01:22:38,720 --> 01:22:41,330
0,60 60,570 1800,2220 2220,2430 2430,2610
of trust,| and we've seen
|我们已经看到了这种签名日志的概念，

2251
01:22:41,330 --> 01:22:42,650
0,120 120,450 450,510 510,780 780,1320
this notion of signed logs,|
|

2252
01:22:42,800 --> 01:22:45,020
0,150 150,240 240,630 630,1350 1680,2220
it's a very powerful {}
它是对付恶意服务器的一个非常强大的工具。

2253
01:22:45,050 --> 01:22:48,260
0,630 840,1740 1770,2610 2610,2820 2820,3210
tool to deal with malicious

2254
01:22:48,260 --> 01:22:49,160
0,570
servers.|
|

2255
01:22:49,490 --> 01:22:51,200
0,540 690,1170 1170,1320 1320,1410 1410,1710
And, {} as I said,
就像我说的，在周二，

2256
01:22:51,200 --> 01:22:52,670
0,300 300,540 540,870 870,900 900,1470
on {} on {} Tuesday,|
|

2257
01:22:52,670 --> 01:22:53,780
0,390 390,510 510,570 570,930 930,1110
we're going to continue this
我们将继续讨论这个问题，

2258
01:22:53,780 --> 01:22:55,490
0,570 780,990 990,1170 1170,1470 1470,1710
discussion,| and you'll see how
|你会看到这个设计日志是如何在比特币中使用的，

2259
01:22:55,490 --> 01:22:57,110
0,330 330,780 780,1110 1110,1200 1200,1620
this design logs are used

2260
01:22:57,110 --> 01:22:59,540
0,540 720,1080 1080,1770 1830,1950 1950,2430
in {} Bitcoin,| in particular
|特别是比如 fork 一致性，

2261
01:22:59,540 --> 01:23:01,370
0,210 210,600 600,900 900,1590 1590,1830
like how fork consistency,| where
|fork 是如何被创建的，

2262
01:23:01,370 --> 01:23:03,890
0,930 1020,1410 1590,2040 2040,2190 2190,2520
how the fact that forks

2263
01:23:03,890 --> 01:23:05,210
0,60 60,270 270,540 540,750 750,1320
are sort of being created,|
|

2264
01:23:05,240 --> 01:23:07,100
0,180 180,390 390,1080 1110,1740 1770,1860
are being resolved in the
在比特币的案例中是如何解决的。

2265
01:23:07,100 --> 01:23:08,140
0,270 270,360 360,810
case of Bitcoin.|
|

2266
01:23:08,700 --> 01:23:10,350
0,570 780,1170 1200,1350 1350,1530 1530,1650
Okay, so that was it
好的，这就是对去中心化系统的介绍，

2267
01:23:10,350 --> 01:23:11,910
0,330 330,540 540,1020 1020,1410 1410,1560
for an introduction to the

2268
01:23:11,910 --> 01:23:14,010
0,360 360,990 1320,1710 1710,1860 1860,2100
decentralized systems,| {} and I
|我希望这篇论文能更容易理解，

2269
01:23:14,010 --> 01:23:16,920
0,240 240,360 360,1020 1470,2070 2190,2910
hope the paper a little

2270
01:23:16,920 --> 01:23:19,260
0,150 150,330 330,960 960,1470 1470,2340
bit more understandable,| than maybe
|比你本周早些时候或今天开始阅读它之前要好。

2271
01:23:19,290 --> 01:23:20,880
0,780 780,1080 1080,1140 1140,1380 1380,1590
when before you start reading

2272
01:23:20,880 --> 01:23:22,740
0,330 900,1290 1290,1440 1440,1710 1710,1860
it earlier this week or

2273
01:23:22,740 --> 01:23:23,440
0,390
today.|
|

2274
01:23:23,530 --> 01:23:25,510
0,690 720,960 960,1110 1110,1440 1440,1980
Okay, see you on Tuesday.|
好的，周二见。|

2275
01:23:26,960 --> 01:23:28,190
0,180 180,300 300,600 600,810 810,1230
And of course, there's questions,
当然，如果有问题，请随意停留，

2276
01:23:28,190 --> 01:23:29,810
0,180 180,720 720,990 1110,1200 1200,1620
feel free, { -} please

2277
01:23:29,810 --> 01:23:31,130
0,360 360,600 600,720 720,870 870,1320
feel free to hang around,|
|

2278
01:23:31,400 --> 01:23:32,120
0,300 300,450 450,540 540,660 660,720
{} if you need to
如果你需要去别的地方，可以去别的地方。

2279
01:23:32,120 --> 01:23:34,040
0,90 90,330 330,810 1380,1800 1800,1920
go somewhere else, absolutely go

2280
01:23:34,040 --> 01:23:37,160
0,240 240,630 1980,2370 2370,2460 2580,3120
somewhere else.| {I,have} a question
|我有一个关于数据结构的问题，

2281
01:23:37,160 --> 01:23:38,840
0,270 270,720 750,1170 1170,1560 1560,1680
about the data structure,| that
|他们使用B+树或其他什么，

2282
01:23:38,840 --> 01:23:41,360
0,120 120,420 420,870 900,1410 1410,2520
they use the {B+ -}

2283
01:23:41,420 --> 01:23:43,100
0,420 420,780 780,1230 1230,1410 1410,1680
tree or whatever,| like what's
|像这样有什么不同，

2284
01:23:43,100 --> 01:23:44,270
0,90 90,450 450,660 660,930 930,1170
the difference between that and

2285
01:23:44,660 --> 01:23:45,220
0,360
like,|
|

2286
01:23:45,930 --> 01:23:47,670
0,840 840,990 990,1080 1080,1410 1410,1740
yeah, like the {Merkle -},
比如 Merkle ，

2287
01:23:47,670 --> 01:23:49,290
0,150 150,660 780,1170 1170,1380 1380,1620
for example.| Using Merkle data
|使用 Merkle 数据结构，

2288
01:23:49,290 --> 01:23:51,570
0,420 630,1500 1500,1620 1620,1800 1800,2280
structure,| {} {you,know} I think
|我认为那个人的名字叫 Merkle ，

2289
01:23:51,570 --> 01:23:53,160
0,240 270,510 510,690 690,1470 1530,1590
the person who {sort,of -}

2290
01:23:53,190 --> 01:23:54,810
0,540 540,660 660,780 780,1140 1140,1620
credited with his {id,is} Merkle,|
|

2291
01:23:55,360 --> 01:23:56,650
0,300 300,510 510,780 780,1050 1050,1290
and that's why it called
这就是为什么它叫 Merkle 树？

2292
01:23:56,650 --> 01:23:58,150
0,60 60,450 450,690 690,1110 1110,1500
the Merkle data {} tree?|
|

2293
01:24:00,180 --> 01:24:01,290
0,150 150,330 330,660 660,840 840,1110
So this is the same
所以这是一回事？

2294
01:24:01,290 --> 01:24:02,540
0,330
thing?|
|

2295
01:24:03,180 --> 01:24:05,310
0,570 1050,1440 1440,1800 1800,2040 2040,2130
Okay.| SUNDR basically uses a
好的。|SUNDR 使用了 Merkle 树。

2296
01:24:05,310 --> 01:24:06,120
0,210 210,480
Merkle tree.|
|

2297
01:24:11,900 --> 01:24:13,520
0,420 450,870 870,1110 1110,1470 1470,1620
{} Sorry, when when you
抱歉，当你验证签名时，

2298
01:24:13,520 --> 01:24:15,160
0,270 270,600 600,1290
are {verifying -}

2299
01:24:15,550 --> 01:24:18,610
0,660 690,1170 1380,1560 1560,2460 2700,3060
the {} the signatures,| doesn't
|是不是意味着你必须，

2300
01:24:18,610 --> 01:24:19,750
0,180 180,330 330,570 570,720 720,1140
mean you have to,| like,
|比如，在你执行的时候，

2301
01:24:21,320 --> 01:24:22,730
0,540 540,750 750,870 870,1200 1200,1410
basically, as you go,| if
|如果在日志中有 100 个条目，

2302
01:24:22,730 --> 01:24:24,530
0,300 300,390 390,780 780,1440 1470,1800
you're a hundred entries into

2303
01:24:24,530 --> 01:24:27,140
0,540 570,1290 1680,1830 1830,2070 2070,2610
the log,| you have to
|你必须计算所有 100 个条目的哈希，

2304
01:24:27,350 --> 01:24:29,660
0,990 1320,1470 1470,1830 1830,2040 2040,2310
compute the hash of all

2305
01:24:29,660 --> 01:24:32,570
0,480 570,1740 1740,2610 2610,2760 2760,2910
the {100,entries}| concatenated and then
|连接然后计算。

2306
01:24:32,570 --> 01:24:33,500
0,750
compute,

2307
01:24:34,510 --> 01:24:35,800
0,270 270,660 660,1110 1110,1230 1230,1290
and.| Yeah, you need to
|是的，你需要一个运行的哈希，

2308
01:24:35,800 --> 01:24:37,150
0,150 150,210 210,450 450,990 1020,1350
keep a running hash,| okay,
|好的，我们回去核实一下，

2309
01:24:37,150 --> 01:24:38,410
0,210 210,330 330,570 570,660 660,1260
let's go back to verify,|
|

2310
01:24:38,620 --> 01:24:40,100
0,150 150,600

2311
01:24:41,720 --> 01:24:45,340
0,900 1320,2250 2370,3300

2312
01:24:45,650 --> 01:24:46,730
0,300 330,480 480,690 690,780 780,1080
okay, so here is probably
好的，这里可能是一个谈论它的好地方。

2313
01:24:46,730 --> 01:24:47,450
0,30 30,180 180,420 420,510 510,720
a good place to talk

2314
01:24:47,450 --> 01:24:48,220
0,210 210,420
about it.|
|

2315
01:24:48,580 --> 01:24:51,200
0,750 1110,1710 1710,2310
{} So, {}
所以，在这里，

2316
01:24:51,650 --> 01:24:53,160
0,510 540,1230
so here,|
|

2317
01:24:53,410 --> 01:24:54,760
0,420 450,660 660,780 780,1020 1020,1350
so let's say, let's take
让我们来看最后一个条目，

2318
01:24:54,760 --> 01:24:56,340
0,150 150,480 480,840 840,1320
the last entry, correct,|
|

2319
01:24:57,560 --> 01:25:00,290
0,630 930,1800 1800,2250 2250,2430 2430,2730
the last entry will have
最后的条目将会有之前条目的哈希，

2320
01:25:00,290 --> 01:25:01,790
0,90 90,690 750,960 960,1110 1110,1500
a hash of the preceding

2321
01:25:01,790 --> 01:25:03,300
0,600
entries,|
|

2322
01:25:03,890 --> 01:25:04,940
0,210 210,630 630,750 750,870 870,1050
so everything you know from
所以从记录中的任何东西，

2323
01:25:04,940 --> 01:25:06,800
0,90 90,420 420,810 810,1410 1530,1860
the like whatever records,| let's
|假设这是 0 1 和 2 ，

2324
01:25:06,800 --> 01:25:07,820
0,120 120,300 300,360 360,780 780,1020
say this is 0 1

2325
01:25:07,820 --> 01:25:10,160
0,120 120,630 990,1230 1230,1800 1800,2340
and 2, {0 -} 1

2326
01:25:10,160 --> 01:25:11,340
0,240 240,480
and 2,|
|

2327
01:25:12,000 --> 01:25:13,050
0,210 210,510 510,690 690,780 780,1050
where basically has the hash
其中有前一个条目 2 的哈希，

2328
01:25:13,050 --> 01:25:14,820
0,90 90,180 180,900 1080,1470 1470,1770
of the previous entry number

2329
01:25:14,820 --> 01:25:15,760
0,390
{2}

2330
01:25:18,170 --> 01:25:19,760
0,180 180,330 330,840 840,1380 1380,1590
in it,| and {} that
|这是需要检查的。

2331
01:25:19,760 --> 01:25:21,350
0,240 240,1050 1050,1320 1320,1500 1500,1590
needs {to,be}, that needs to

2332
01:25:21,350 --> 01:25:22,180
0,90 90,540
be checked.|
|

2333
01:25:22,640 --> 01:25:26,480
0,750 750,1140 1140,1740 1740,2610 3540,3840
And the way {} {}
而被检查的方式是，

2334
01:25:26,480 --> 01:25:27,620
0,180 180,420 420,750 750,960 960,1140
that being checked is,| you
|原则上，如果你从世界之初开始，

2335
01:25:27,620 --> 01:25:29,030
0,450 450,780 780,1140 1140,1260 1260,1410
know in principle, if you

2336
01:25:29,030 --> 01:25:29,960
0,300 300,510 510,630 630,690 690,930
start really from the beginning

2337
01:25:29,960 --> 01:25:31,100
0,90 90,180 180,630 840,1050 1050,1140
of the world,| and you
|你必须计算记录为 0 的哈希，

2338
01:25:31,100 --> 01:25:31,940
0,120 120,300 300,450 450,780 780,840
would have to compute the

2339
01:25:31,940 --> 01:25:33,740
0,270 270,390 390,660 660,1530 1650,1800
hash with record 0,| you
|你会发现哈希是什么，

2340
01:25:33,740 --> 01:25:34,520
0,240 240,300 300,420 420,480 480,780
find out what the hash

2341
01:25:34,520 --> 01:25:39,530
0,420 720,1320 1320,1800 1800,2820 2820,5010
is,| {} and {double,check} that
|并仔细检查与条目对应的条目，

2342
01:25:39,530 --> 01:25:40,760
0,510 510,600 600,720 720,1020 1020,1230
corresponds to the entry,| that's
|它在这里，以及签名是否有效，等等。

2343
01:25:40,760 --> 01:25:41,570
0,180 180,510 510,600 600,720 720,810
in here and that the

2344
01:25:41,570 --> 01:25:42,700
0,480 480,600 600,930
signature is valid,

2345
01:25:43,380 --> 01:25:44,780
0,600 600,1110
etc, etc.|
|

2346
01:25:46,160 --> 01:25:47,180
0,210 210,540 540,630 630,720 720,1020
Of course, you know in
当然，在真实的系统中，

2347
01:25:47,180 --> 01:25:48,230
0,240 240,450 450,810 810,930 930,1050
the real system,| you can
|你可以记住大部分的日志，

2348
01:25:48,230 --> 01:25:49,610
0,390 390,630 630,780 780,900 900,1380
remember most of the log|
|

2349
01:25:50,000 --> 01:25:51,560
0,720 720,900 900,1110 1110,1380 1380,1560
and just double check that,|
再仔细检查一下，|

2350
01:25:51,560 --> 01:25:53,270
0,180 180,1140 1140,1350 1350,1590 1590,1710
like whatever and start from
然后从那里开始。

2351
01:25:53,270 --> 01:25:53,880
0,360
there.|
|

2352
01:25:56,140 --> 01:25:57,280
0,180 180,900
Oh, it's
哦，这效率太低了，好吧。

2353
01:25:57,810 --> 01:25:59,240
0,720 720,1110
inefficient, okay.|
|

2354
01:25:59,530 --> 01:26:00,520
0,270 270,420 420,540 540,630 630,990
Yeah, you have to replay
是的，你必须从头开始回放，

2355
01:26:00,520 --> 01:26:01,300
0,90 90,150 150,390 390,450 450,780
from the beginning of time,|
|

2356
01:26:01,300 --> 01:26:02,560
0,150 150,450 450,780 780,900 900,1260
you basically have to really
你必须从一开始验证整个日志。

2357
01:26:02,560 --> 01:26:03,700
0,570 570,630 630,990 990,1080 1080,1140
validate the {whole,log} from the

2358
01:26:03,700 --> 01:26:04,640
0,210 210,300 300,570
beginning of time.|
|

2359
01:26:06,760 --> 01:26:08,290
0,330 330,690 690,810 810,990 990,1530
Thank you, it makes sense.|
谢谢，理解了。|

2360
01:26:08,350 --> 01:26:09,130
0,360 360,480 480,630 630,720 720,780
You'll see this in the
你会在比特币论文上看到这一点。

2361
01:26:09,130 --> 01:26:10,420
0,300 300,990
Bitcoin paper.|
|

2362
01:26:11,040 --> 01:26:12,030
0,330 330,450 450,570 570,870 870,990
So are the hash is
所以哈希是，就像一条 Merkle 链。

2363
01:26:12,030 --> 01:26:14,160
0,750 810,1140 1140,1260 1260,1410 1410,2130
like, almost like a Merkle

2364
01:26:14,160 --> 01:26:17,310
0,660 690,870 870,1350 1740,2340 2850,3150
chain, like.| Yes.| Okay.| Same
|是的。|好的。|同样的想法。

2365
01:26:17,310 --> 01:26:18,060
0,450
idea.|
|

2366
01:26:18,780 --> 01:26:21,180
0,750 750,990 990,1200 1200,2100
So, are they, {}|
那么，它们是不是|

2367
01:26:22,870 --> 01:26:26,770
0,1230 1230,1530 2370,3270 3270,3690 3690,3900
like if like leaf in
比如树或链上的叶子，

2368
01:26:26,770 --> 01:26:29,080
0,420 660,1020 1020,1380 1770,2160 2160,2310
the sort of tree or

2369
01:26:29,080 --> 01:26:31,390
0,570 600,1020 1020,1410 1410,1800 1800,2310
chain,| like an entire file
|是整个文件或文件块。

2370
01:26:31,390 --> 01:26:32,530
0,180 180,480 480,900 900,1020 1020,1140
or like blocks of a

2371
01:26:32,530 --> 01:26:33,670
0,390 420,630 630,750 750,810 810,1140
file.| This is a block,
|这是一个块，

2372
01:26:33,670 --> 01:26:34,930
0,210 210,540 540,720 720,990 990,1260
one block,| so this {4096
|所以这是 4096 个字节，

2373
01:26:34,930 --> 01:26:38,260
0,240 240,390 390,990 990,1440
- - -} bytes,|
|

2374
01:26:40,720 --> 01:26:42,000
0,660

2375
01:26:43,680 --> 01:26:44,550
0,150 150,300 300,360 360,600 600,870
and all the other hashes
所有其他哈希都不会改变，

2376
01:26:44,550 --> 01:26:45,570
0,180 180,510 510,750 750,870 870,1020
don't change, correct,| so it's
|所以它并不是那么低效。

2377
01:26:45,570 --> 01:26:47,580
0,240 240,450 450,630 630,1200 1350,2010
actually not that {} inefficient.|
|

2378
01:26:48,150 --> 01:26:49,140
0,360 360,480 480,570 570,750 750,990
Because if you only change
因为如果你只更改文件的一部分，

2379
01:26:49,140 --> 01:26:50,100
0,240 240,360 360,540 540,870 870,960
part of the file,| that
|只对这一部分的重新哈希。

2380
01:26:50,100 --> 01:26:51,690
0,450 510,900 900,1170 1170,1410 1440,1590
only rehashes that part.| {Yeah\,,you}
|是的，你只需要重新哈希那个，

2381
01:26:51,690 --> 01:26:52,530
0,150 150,270 270,360 360,690 690,840
just have to rehash that

2382
01:26:52,530 --> 01:26:53,160
0,210 210,300 300,420 420,510 510,630
one,| and then you have
|然后你必须重新计算树的哈希，

2383
01:26:53,160 --> 01:26:54,630
0,510 540,840 840,1170 1170,1260 1260,1470
to {re-compute -} the hash

2384
01:26:54,630 --> 01:26:55,520
0,210 210,300 300,630
of the tree,|
|

2385
01:26:56,590 --> 01:26:57,220
0,210 210,270 270,420 420,540 540,630
all the way to the
一直到用户的 i-handle 。

2386
01:26:57,220 --> 01:26:58,400
0,300 300,450 450,870
users {i-handle -}.|
|

2387
01:27:02,760 --> 01:27:03,750
0,150 150,360 360,570 570,810 810,990
The paper talks about,| there's
这篇论文谈到，|有一种优化可以使这一过程更有效率，

2388
01:27:03,750 --> 01:27:05,100
0,240 240,480 480,570 570,1260 1260,1350
a sort of optimization to

2389
01:27:05,100 --> 01:27:06,660
0,150 150,300 300,510 510,1080 1140,1560
make this more efficient,| but
|但哈希通常并不那么昂贵，

2390
01:27:07,080 --> 01:27:08,550
0,360 360,540 630,1080 1080,1290 1290,1470
hashing is generally not that

2391
01:27:08,550 --> 01:27:10,110
0,450 450,930 930,1110 1110,1380 1380,1560
expensive,| signing is a more
|签名是一项成本更高的操作。

2392
01:27:10,110 --> 01:27:11,520
0,420 420,1140
expensive operation.|
|

2393
01:27:18,480 --> 01:27:19,200
0,120 120,210 210,270 270,540 540,720
I had a question about
我有一个关于版本向量的问题，

2394
01:27:19,200 --> 01:27:22,320
0,330 330,990 2070,2730 2760,2940 2940,3120
version vectors,| so we use
|所以，我们使用版本向量

2395
01:27:22,320 --> 01:27:23,610
0,270 270,690 690,810 810,1020 1020,1290
version vectors| to make sure
|来确保系统不会返回旧状态，

2396
01:27:23,610 --> 01:27:24,720
0,120 120,240 240,630 630,840 840,1110
that the system can't return

2397
01:27:24,720 --> 01:27:26,280
0,120 120,180 180,420 420,840 1080,1560
like an old state,| why
|为什么系统不能直接返回旧状态和旧版本向量，

2398
01:27:26,280 --> 01:27:27,570
0,300 300,930 960,1110 1110,1230 1230,1290
can't the, why can't the

2399
01:27:27,570 --> 01:27:28,500
0,240 240,360 360,660 660,750 750,930
system just return the old

2400
01:27:28,500 --> 01:27:29,490
0,300 300,450 450,510 510,750 750,990
state and the old version

2401
01:27:29,490 --> 01:27:30,750
0,360 360,480 480,870 870,1080 1080,1260
vector,| if it keeps a
|如果它保留第二份复制的话。

2402
01:27:30,750 --> 01:27:31,760
0,210 210,720
second copy.|
|

2403
01:27:32,040 --> 01:27:33,320
0,240 240,450 450,900
Yeah, got fork,
是的， fork ，是吗？

2404
01:27:33,940 --> 01:27:35,410
0,270 270,690 960,1140 1140,1320 1320,1470
right?| So we only have
|所以，我们只有 fork 一致性。

2405
01:27:35,410 --> 01:27:37,540
0,150 150,660 660,960 1110,1830 1830,2130
fork consistency, then.| Yeah, {}
|是的，版本向量只有 fork 一致性，

2406
01:27:37,540 --> 01:27:38,950
0,270 270,570 570,810 810,960 960,1410
version vectors only fork consistent,|
|

2407
01:27:39,220 --> 01:27:40,930
0,240 240,690 690,1230 1230,1380 1380,1710
{SUNDR,fork -} consistent, no more.|
SUNDR fork 一致性，没有更多。|

2408
01:27:47,460 --> 01:27:49,110
0,180 180,750 750,1170 1170,1500 1500,1650
So {fork,consistency}, you need the
所以 fork 一致性，你需要时间戳吗？

2409
01:27:49,110 --> 01:27:50,380
0,390 390,990
{timestamp -}?|
|

2410
01:27:50,530 --> 01:27:52,330
0,570 570,1110 1110,1170 1170,1560 1560,1800
{The,fork} consistency, I mean, {}|
fork 一致性，我的意思是，|

2411
01:27:52,360 --> 01:27:56,110
0,90 90,720 990,1710 1950,2520 3000,3750
you know {} the server
服务器可以在任何时间点 fork 日志，

2412
01:27:56,140 --> 01:27:58,450
0,360 360,840 840,960 960,1590 1920,2310
can fork the log at

2413
01:27:58,450 --> 01:27:59,680
0,180 180,540 540,720 720,780 780,1230
any particular point in time,|
|

2414
01:28:00,900 --> 01:28:02,280
0,330 330,360 360,780 780,1200 1200,1380
present a consistent view of
为它们可以将日志合并回一起提供一致的视图。

2415
01:28:02,280 --> 01:28:04,590
0,1170 1260,1560 1560,1710 1710,2010 2010,2310
the what they can merge

2416
01:28:04,590 --> 01:28:05,840
0,300 300,510 510,960
logs back together.|
|

2417
01:28:07,850 --> 01:28:08,540
0,540
So,
所以，这张图片，

2418
01:28:09,290 --> 01:28:11,020
0,300 300,600 600,1140
really this picture,|
|

2419
01:28:11,290 --> 01:28:13,660
0,120 120,630 1140,1770 1860,2250 2250,2370
that the {} server can
服务器可以构建不同的世界观，

2420
01:28:13,660 --> 01:28:15,250
0,240 240,930 930,1110 1110,1380 1380,1590
actually construct {you,know} different views

2421
01:28:15,250 --> 01:28:16,990
0,90 90,150 150,720 960,1170 1170,1740
of the world,| and split
|分裂为多个世界，

2422
01:28:17,020 --> 01:28:17,890
0,120 120,270 270,390 390,720 720,870
you know the world, the

2423
01:28:17,890 --> 01:28:20,320
0,420 420,1020 1320,1770 1770,2010 2010,2430
multiple world,| but can emerge
|但可以在不被察觉的情况下重新合并在一起。

2424
01:28:20,320 --> 01:28:21,560
0,90 90,390 390,600 600,1020
the world back together

2425
01:28:23,580 --> 01:28:24,760
0,300 300,870
{undetectably -}.|
|

2426
01:28:27,170 --> 01:28:28,100
0,750
So,
所以，我们能做的最好的就是保持 fork 一致性，

2427
01:28:29,000 --> 01:28:30,020
0,210 210,540 540,630 630,780 780,1020
the best we can do

2428
01:28:30,020 --> 01:28:32,450
0,270 270,540 540,1500 1590,1950 1950,2430
is fork consistency,| which allows
|它允许 fork ，

2429
01:28:32,450 --> 01:28:33,740
0,120 120,750 810,960 960,1050 1050,1290
for forking,| but we can
|但我们可以检测到 fork 。

2430
01:28:33,740 --> 01:28:35,740
0,480 480,1110
detect forking.|
|

2431
01:28:36,090 --> 01:28:37,620
0,180 180,330 330,390 390,840 840,1530
So if we detect forking,|
所以如果我们检测到 fork ，|

2432
01:28:38,360 --> 01:28:39,410
0,210 210,420 420,630 630,810 810,1050
can we then get something
那么我们能得到比 fork 一致性更强的东西吗？

2433
01:28:39,410 --> 01:28:41,360
0,390 390,720 750,930 930,1560 1560,1950
stronger than fork consistency?| Well,
|好的，是的，我们可以选一个 fork ，

2434
01:28:41,390 --> 01:28:42,920
0,570 780,1020 1020,1140 1140,1230 1230,1530
yep, well, we can settle

2435
01:28:42,920 --> 01:28:44,120
0,120 120,180 180,720 900,1050 1050,1200
on a fork,| we're gonna
|我们会有 fork ，

2436
01:28:44,120 --> 01:28:45,560
0,150 150,750 840,1110 1110,1200 1200,1440
have forks,| we can try
|我们可以选择一个 fork 并继续。

2437
01:28:45,560 --> 01:28:46,790
0,330 330,660 660,840 840,990 990,1230
to settle like pick one

2438
01:28:46,790 --> 01:28:48,230
0,510 510,720 720,840 840,1020 1020,1440
forks one to go forward

2439
01:28:48,230 --> 01:28:48,760
0,330
with.|
|

2440
01:28:49,540 --> 01:28:50,440
0,780
Okay,|
好的,|

2441
01:28:51,370 --> 01:28:52,810
0,210 210,600 600,1110 1110,1320 1320,1440
but SUNDR doesn't have a
但是 SUNDR 没有办法做到这一点。

2442
01:28:52,810 --> 01:28:56,120
0,300 300,480 480,720 720,1500
way to do that.|
|

2443
01:29:00,230 --> 01:29:01,880
0,120 120,660 660,960 960,1170 1170,1650
I mean SUNDR does propose
我是说， SUNDR 现在提出了一些方法吗？

2444
01:29:01,880 --> 01:29:04,820
0,480 510,1080 1110,1680 1680,2130 2460,2940
some some methods now?| Methods
|检测的方法，

2445
01:29:04,820 --> 01:29:06,920
0,120 120,780 810,1170 1170,1620 1620,2100
to detect| and basically {you,know}
|提出使用时间戳机器来使用该方法。

2446
01:29:06,920 --> 01:29:08,540
0,360 360,870 870,1080 1080,1410 1410,1620
basically proposes like you use

2447
01:29:08,540 --> 01:29:09,890
0,60 60,330 330,600 600,960 960,1350
the {timestamp -} box to

2448
01:29:10,370 --> 01:29:11,720
0,600 600,780 780,1050
use that one.|
|

2449
01:29:17,210 --> 01:29:19,040
0,660 990,1140 1140,1530
Thanks.| You're welcome.|
谢谢。|不用谢。|

2450
01:29:20,740 --> 01:29:23,020
0,180 180,450 450,960 1020,1650 1650,2280
The {timestamp -}, {timestamp,box -}
时间戳机器只是一个附加条目的服务器？

2451
01:29:23,020 --> 01:29:25,210
0,420 420,660 660,1050 1050,1410 1590,2190
just a server that appends

2452
01:29:25,210 --> 01:29:27,070
0,450 450,720 750,1080 1080,1320 1320,1860
entries?| {Yeah\,,and} {is -} trusted,
|是的，并且是可信的，它不在对手的控制之下。

2453
01:29:27,760 --> 01:29:28,780
0,120 120,240 240,450 450,630 630,1020
it was not under control

2454
01:29:28,780 --> 01:29:30,420
0,60 60,630 660,1320
of the adversary.|
|

2455
01:29:35,380 --> 01:29:36,840
0,390 390,720
Thank you.|
谢谢。|

2456
01:29:38,150 --> 01:29:39,920
0,240 240,720 720,1290 1290,1620 1620,1770
{} {Can,I} also ask one
我还可以问最后一个问题，

2457
01:29:39,920 --> 01:29:41,420
0,240 240,570 570,840 840,990 990,1500
final question| about the Debian
|关于你在开始说的 Debian 的例子，

2458
01:29:41,420 --> 01:29:43,250
0,570 570,690 690,960 960,1140 1140,1830
example, you set up {in,beginning},|
|

2459
01:29:43,730 --> 01:29:45,320
0,480 690,840 840,990 990,1500 1500,1590
{} can you say again
你能再说一遍那里发生了什么吗？

2460
01:29:45,320 --> 01:29:47,720
0,150 150,870 990,1650 1800,2190 2190,2400
what happened there?| {} Yeah,
|是的，当然，

2461
01:29:47,720 --> 01:29:48,440
0,510
sure,|
|

2462
01:29:48,830 --> 01:29:51,470
0,750 750,960 960,1410 1410,2400 2460,2640
{} so basically the,| this
所以基本上，|这是 2003 年 Debian Linux 的源代码仓库或开发机器，

2463
01:29:51,470 --> 01:29:53,360
0,150 150,270 270,840 840,1620 1650,1890
is the source repo or

2464
01:29:53,360 --> 01:29:55,790
0,420 420,900 900,1530 1530,1860 1860,2430
develop machines for Debian Linux

2465
01:29:55,820 --> 01:29:59,060
0,240 240,690 690,2220 2220,2730 2760,3240
in {2003 -},| an attacker
|一名攻击者侵入了这台机器并修改了文件，

2466
01:29:59,060 --> 01:30:01,910
0,810 840,900 900,1830 1830,2250 2250,2850
compromised {} broke {into,this} machines

2467
01:30:02,120 --> 01:30:03,720
0,390 390,900 900,1470
and modified files,|
|

2468
01:30:05,430 --> 01:30:06,510
0,210 210,360 360,450 450,570 570,1080
and this is the distribution
这是个发行版，

2469
01:30:06,510 --> 01:30:07,890
0,120 120,240 240,540 540,1020 1020,1380
that has been {sort,of,handed} off,|
|

2470
01:30:07,890 --> 01:30:08,730
0,60 60,210 210,630 630,750 750,840
you know which you know
如果你使用的是 Debian Linux ，

2471
01:30:08,730 --> 01:30:09,960
0,90 90,300 300,390 390,690 690,1230
if you're on Debian Linux,|
|

2472
01:30:09,960 --> 01:30:11,360
0,120 120,240 240,630 630,1080
you know you're you're,|
你是，|

2473
01:30:11,660 --> 01:30:13,130
0,480 480,930 930,1050 1050,1260 1260,1470
{} anybody who got like
任何人在受到攻击后得到 Debian Linux ，

2474
01:30:13,130 --> 01:30:15,050
0,600 660,960 960,1230 1230,1470 1470,1920
the Debian linux after attack,|
|

2475
01:30:15,050 --> 01:30:16,280
0,150 150,300 300,630 630,720 720,1230
you've got maybe a compromise
你可能得到了一个[妥协]的 Debian Linux 。

2476
01:30:16,280 --> 01:30:17,360
0,330 330,870
Debian Linux.|
|

2477
01:30:17,870 --> 01:30:18,860
0,330 330,480 480,690 690,780 780,990
And so when they soon
当他们很快发现这一点时，

2478
01:30:18,860 --> 01:30:20,240
0,90 90,210 210,660 660,870 870,1380
as they discovered this,| they
|他们没有做任何进一步的开发，

2479
01:30:20,510 --> 01:30:21,860
0,570 570,780 780,900 900,1110 1110,1350
{} didn't do any further

2480
01:30:21,860 --> 01:30:23,570
0,750 1080,1200 1200,1290 1290,1500 1500,1710
development,| and they were {defer,to}
|延迟了发行版，

2481
01:30:23,570 --> 01:30:25,880
0,870 870,1110 1110,1470 1470,1770 1770,2310
distributions,| {} sorted out like
|他们去到备份，

2482
01:30:25,940 --> 01:30:27,020
0,60 60,270 270,360 360,900 900,1080
they went to backups,| {you,know}
|开始将备份中的文件与他们拥有的文件进行比较，

2483
01:30:27,050 --> 01:30:28,670
0,330 330,780 780,1110 1110,1200 1200,1620
started comparing files from backups

2484
01:30:28,670 --> 01:30:31,250
0,630 1050,1500 1500,1710 1710,1980 1980,2580
with files that they have,|
|

2485
01:30:31,250 --> 01:30:33,020
0,480 480,600 630,1200 1200,1470 1470,1770
and {you,know} basically double check
仔细检所有更改，

2486
01:30:33,020 --> 01:30:34,250
0,150 150,360 360,480 480,990 990,1230
that all the changes| that
|在仓库中的是合法的。

2487
01:30:34,250 --> 01:30:35,540
0,240 240,420 420,720 720,1140 1140,1290
were in the repo are

2488
01:30:35,540 --> 01:30:36,720
0,420 420,960
actually legit.|
|

2489
01:30:38,170 --> 01:30:39,700
0,330 330,870 870,960 960,1380 1380,1530
Okay.| Rollback and rollback any
好的。|回滚任何不合法的修改。

2490
01:30:39,700 --> 01:30:41,080
0,300 300,420 420,660 660,1080
changes are not legit.|
|

2491
01:30:42,400 --> 01:30:46,720
0,540 1020,2220 2370,3390 3480,4200 4200,4320
{That's,pretty,bad -}.| Yeah, {that's,pretty,bad},| it
那真是太糟糕了。|是的，那真的很糟糕，|它偶尔会发生，

2492
01:30:46,720 --> 01:30:47,920
0,420 420,840 840,990 990,1110 1110,1200
occasionally happens,| this is a
|这是一个真正的问题，

2493
01:30:47,920 --> 01:30:48,760
0,150 150,570
real problem,|
|

2494
01:30:49,760 --> 01:30:50,480
0,210 210,270 270,420 420,660 660,720
that's a real problem in
这在实践中是一个真正的问题。

2495
01:30:50,480 --> 01:30:51,260
0,540
practice.|
|

2496
01:30:52,330 --> 01:30:53,140
0,210 210,330 330,450 450,690 690,810
Thank you so much that
太感谢了，这节课很有趣，谢谢。

2497
01:30:53,140 --> 01:30:55,000
0,270 270,540 540,960 960,1560 1560,1860
was very interesting lecture, {thank,you}.|
|

2498
01:30:55,000 --> 01:30:56,300
0,450
{You're,welcome}.|
不用谢。|

2499
01:30:56,910 --> 01:30:57,880
0,270 270,690
Thank you.
谢谢。
