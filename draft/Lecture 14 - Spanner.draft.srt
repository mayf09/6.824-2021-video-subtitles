1
00:00:00,000 --> 00:00:01,230
0,120 120,540 540,720 720,1080 1080,1230
Good afternoon, good evening, good

2
00:00:01,230 --> 00:00:02,880
0,390 390,540 540,960 960,1500 1500,1650
night, good morning, wherever you

3
00:00:02,880 --> 00:00:04,680
0,390 720,1080 1080,1410 1410,1500 1500,1800
are| or whenever you're watching

4
00:00:04,680 --> 00:00:07,890
0,360 900,1650 1650,2310 2310,2940 2970,3210
this.| So today I wanna

5
00:00:07,890 --> 00:00:10,260
0,210 210,810 1320,2130
talk about {}

6
00:00:10,410 --> 00:00:12,480
0,900 1410,1590 1590,1710 1710,1920 1920,2070
Spanner,| is a paper from

7
00:00:12,480 --> 00:00:15,870
0,1740 1740,2190 2190,2310 2310,3030 3030,3390
2012,| but the Spanner {}

8
00:00:15,870 --> 00:00:17,340
0,390 390,570 570,690 690,1050 1050,1470
system is in active use|

9
00:00:17,340 --> 00:00:19,470
0,360 360,900 900,1170 1170,1680 1680,2130
and also still continuously under

10
00:00:19,470 --> 00:00:20,360
0,630
development,|

11
00:00:20,970 --> 00:00:22,410
0,240 240,510 510,930 930,1110 1110,1440
so it's a real system.|

12
00:00:23,130 --> 00:00:25,200
0,570 660,1020 1020,1680 1680,1800 1800,2070
The main topic and why

13
00:00:25,200 --> 00:00:26,520
0,120 120,390 390,510 510,750 750,1320
you Spanner is really interesting,|

14
00:00:26,550 --> 00:00:28,710
0,390 390,960 960,1320 1320,1590 1590,2160
{} is supports {wide-area,transactions},|

15
00:00:38,400 --> 00:00:40,140
0,300 300,930 930,1080 1080,1200 1200,1740
and this is a really

16
00:00:40,140 --> 00:00:42,840
0,300 300,1320 1350,1980 1980,2370 2370,2700
{} powerful programming model,| so

17
00:00:43,080 --> 00:00:45,150
0,300 300,720 720,840 840,1470 1740,2070
even though the data, maybe

18
00:00:45,150 --> 00:00:47,250
0,60 60,360 360,690 690,1140 1140,2100
the data shared across multiple

19
00:00:47,280 --> 00:00:48,630
0,510 510,630 630,690 690,1050 1050,1350
servers| and the servers being

20
00:00:48,630 --> 00:00:49,920
0,210 210,540 540,750 750,1110 1110,1290
in different data centers| and

21
00:00:49,920 --> 00:00:52,110
0,930 930,1320 1320,1770 1770,2130 2130,2190
different pieces on on the

22
00:00:52,110 --> 00:00:53,610
0,480 840,1080 1080,1230 1230,1350 1350,1500
planet,| {} you can just

23
00:00:53,610 --> 00:00:56,670
0,540 570,1380 1380,2460 2490,2700 2700,3060
run transactions| and they have

24
00:00:56,670 --> 00:00:59,640
0,600 1260,1890 1890,2130 2130,2430 2430,2970
ACID semantics| and their atomic

25
00:00:59,640 --> 00:01:00,840
0,150 150,570 570,930 930,1050 1050,1200
{you,know} respect failure,| that all

26
00:01:00,840 --> 00:01:01,680
0,120 120,330 330,570 570,660 660,840
the writes happen or none

27
00:01:01,680 --> 00:01:03,840
0,90 90,450 750,1290 1290,1830 1860,2160
of them| and they provide

28
00:01:03,840 --> 00:01:04,720
0,810
serializability.|

29
00:01:05,230 --> 00:01:07,870
0,270 270,720 750,1020 1020,1800 1800,2640
And so {that's,an} incredibly powerful

30
00:01:07,900 --> 00:01:10,330
0,720 750,1200 1200,1890 2160,2370 2370,2430
{} programming abstraction| and of

31
00:01:10,330 --> 00:01:12,070
0,270 270,990 990,1410 1410,1650 1650,1740
course the challenge is to

32
00:01:12,070 --> 00:01:14,560
0,450 600,1050 1050,1620 1680,2190 2190,2490
implement it efficiently,| {} and

33
00:01:14,920 --> 00:01:16,720
0,540 540,900 900,1590 1590,1740 1740,1800
one big {challenge,is} like a

34
00:01:16,720 --> 00:01:17,650
0,180 180,270 270,690 690,810 810,930
law of physics you know

35
00:01:17,650 --> 00:01:18,640
0,210 210,450 450,540 540,900 900,990
the speed of light,| you

36
00:01:18,640 --> 00:01:19,690
0,240 240,510 510,570 570,930 930,1050
know sending a packet from

37
00:01:19,690 --> 00:01:21,520
0,270 270,510 1200,1410 1410,1620 1620,1830
one end| in one part

38
00:01:21,520 --> 00:01:22,060
0,60 60,120 120,360 360,450 450,540
of the US to the

39
00:01:22,060 --> 00:01:22,810
0,180 180,330 330,390 390,480 480,750
other part of the US|

40
00:01:22,810 --> 00:01:24,310
0,210 210,360 360,600 600,1230 1350,1500
or to another continent| and

41
00:01:24,310 --> 00:01:24,820
0,90 90,270 270,300 300,450 450,510
it takes a lot of

42
00:01:24,820 --> 00:01:26,560
0,390 600,1320 1320,1440 1440,1560 1560,1740
time,| {} you know we're

43
00:01:26,560 --> 00:01:28,000
0,270 270,450 450,660 660,720 720,1440
talking about tens of milliseconds.|

44
00:01:28,870 --> 00:01:30,790
0,510 690,1170 1170,1440 1440,1620 1620,1920
So, {} what we see

45
00:01:30,790 --> 00:01:32,080
0,90 90,420 450,810 810,900 900,1290
in this paper is that|

46
00:01:32,080 --> 00:01:34,060
0,540 660,1020 1020,1230 1230,1800 1800,1980
{} {read-write -} transactions are

47
00:01:34,060 --> 00:01:36,280
0,420 420,600 600,1080 1080,1410 1410,2220
actually, are indeed quite expensive,|

48
00:01:36,520 --> 00:01:38,380
0,360 360,570 570,780 780,1500 1500,1860
{} but they work very

49
00:01:38,380 --> 00:01:40,660
0,600 1110,1380 1380,1830 1830,1980 1980,2280
hard to make {read-only -}

50
00:01:40,660 --> 00:01:43,220
0,810 840,1500 1500,2280
transactions very inexpensive.|

51
00:01:43,780 --> 00:01:46,870
0,330 330,720 810,1530 1920,2550 2730,3090
And so the {} {read-write

52
00:01:46,870 --> 00:01:48,940
0,330 330,1110
-} transactions

53
00:01:50,020 --> 00:01:51,910
0,540 630,1020 1020,1530 1530,1770 1770,1890
are are implemented using {two-phase

54
00:01:51,910 --> 00:01:53,100
0,240 240,780
-} commit,|

55
00:01:53,810 --> 00:01:55,130
0,180 180,270 270,510 510,780 780,1320
as we talked about last

56
00:01:55,160 --> 00:01:56,900
0,420 420,630 630,780 780,1050 1050,1740
week| and {two-phase -} locking|

57
00:01:57,260 --> 00:01:58,730
0,540 540,1020 1020,1320 1320,1410 1410,1470
{} and one of the

58
00:01:58,730 --> 00:02:00,530
0,210 210,390 390,810 1140,1530 1530,1800
things that is interesting about

59
00:02:00,530 --> 00:02:02,240
0,180 180,270 270,600 930,1230 1230,1710
it is that,| {} the

60
00:02:02,240 --> 00:02:04,100
0,630 630,810 810,990 990,1590 1620,1860
participants in this protocol are

61
00:02:04,100 --> 00:02:05,900
0,180 180,510 510,1020 1020,1500
just basically Paxos groups.|

62
00:02:11,400 --> 00:02:14,060
0,690 780,1170 1170,1470 1470,2250
{} The {read-only -} transactions

63
00:02:14,590 --> 00:02:16,840
0,240 240,900 900,1200 1200,1740 1800,2250
can execute at any {}

64
00:02:16,840 --> 00:02:18,020
0,240 240,750
data center,|

65
00:02:19,570 --> 00:02:20,500
0,390 390,540 540,690 690,750 750,930
and they're going to run

66
00:02:20,500 --> 00:02:21,730
0,240 240,570 570,660 660,960 960,1230
very fast,| in fact you

67
00:02:21,760 --> 00:02:22,870
0,210 210,330 330,390 390,990 990,1110
look at the table {}

68
00:02:22,870 --> 00:02:23,710
0,330 330,420 420,480 480,780 780,840
six in the back of

69
00:02:23,710 --> 00:02:25,030
0,90 90,660 780,1020 1020,1200 1200,1320
the paper,| you'll see that

70
00:02:25,030 --> 00:02:26,770
0,180 180,480 630,1290 1290,1530 1530,1740
{read-only -} transaction somewhere like

71
00:02:26,770 --> 00:02:28,300
0,210 210,630 630,1080 1140,1350 1350,1530
ten times faster {read-write -}

72
00:02:28,300 --> 00:02:29,240
0,750
transactions.|

73
00:02:29,630 --> 00:02:30,590
0,240 240,330 330,360 360,720 720,960
And there are two key

74
00:02:30,590 --> 00:02:32,240
0,450 450,840 960,1380 1380,1560 1560,1650
ideas there,| {} and we'll

75
00:02:32,240 --> 00:02:33,410
0,210 210,390 390,600 600,870 870,1170
talk about this lecture,| one

76
00:02:33,410 --> 00:02:34,960
0,180 180,1050
is snapshot

77
00:02:35,540 --> 00:02:37,580
0,930 1410,1620 1620,1860 1860,1950 1950,2040
isolation,| which actually is a

78
00:02:37,580 --> 00:02:40,040
0,600 630,1380 1380,1860 1860,2310 2310,2460
standard database idea,| {} but

79
00:02:40,040 --> 00:02:41,300
0,60 60,330 330,420 420,930 1140,1260
I use it here to

80
00:02:41,300 --> 00:02:43,430
0,390 390,510 510,720 720,1200 1650,2130
make the read fast, {}|

81
00:02:43,430 --> 00:02:44,660
0,270 270,840 840,930 930,1080 1080,1230
in particular you know to

82
00:02:44,660 --> 00:02:46,340
0,210 210,300 300,660 660,1230 1230,1680
make it actually work well

83
00:02:46,370 --> 00:02:47,810
0,240 240,330 330,870 870,1140 1140,1440
in a distributed {wide-area -}

84
00:02:47,810 --> 00:02:49,790
0,480 570,930 930,1380 1380,1500 1500,1980
setting,| they rely on synchronized

85
00:02:49,790 --> 00:02:53,280
0,540 930,1260 1260,1740
clocks or [],|

86
00:02:54,300 --> 00:02:55,620
0,210 210,420 420,720 720,930 930,1320
{you,know} those clocks are perfectly

87
00:02:55,620 --> 00:02:58,710
0,840 1350,1860 1860,2100 2100,2610 2700,3090
synchronized| {} and so, {}

88
00:02:58,710 --> 00:03:00,420
0,420 420,840 840,1170 1170,1410 1410,1710
their transaction scheme must deal

89
00:03:00,420 --> 00:03:01,170
0,150 150,210 210,420 420,690 690,750
with a little bit of

90
00:03:01,200 --> 00:03:04,680
0,450 450,1080 1110,1350 1350,2040 2730,3480
{} [] or drift {or,error}

91
00:03:04,680 --> 00:03:06,780
0,600 630,1170 1170,1650 1650,1830 1830,2100
margin| in exactly know what

92
00:03:06,780 --> 00:03:08,520
0,360 390,630 630,990 990,1530
the true time is.|

93
00:03:09,590 --> 00:03:11,300
0,360 360,570 570,660 660,1050 1050,1710
{As,I} said is widely used,

94
00:03:14,460 --> 00:03:16,290
0,480 480,600 600,810 810,1320 1320,1830
both in {} internal Google,|

95
00:03:16,380 --> 00:03:18,480
0,870 900,1080 1080,1800 1800,2040 2040,2100
{} but also as a

96
00:03:18,480 --> 00:03:19,920
0,270 270,780 780,900 900,1020 1020,1440
Google customer, you can use

97
00:03:19,980 --> 00:03:21,210
0,300 300,750 750,840 840,1200 1200,1230
it,| spanner is basically a

98
00:03:21,210 --> 00:03:22,440
0,300 300,720 720,870 870,1080 1080,1230
cloud service that you can

99
00:03:22,440 --> 00:03:24,600
0,330 330,450 450,720 720,1320 1470,2160
use {as,a} Google customer, {}|

100
00:03:24,600 --> 00:03:26,850
0,180 180,870 870,1080 1080,1860 1980,2250
if you use gmail, {}

101
00:03:26,850 --> 00:03:28,950
0,450 450,930 930,1440 1470,1920 1920,2100
probably your email or parts

102
00:03:28,950 --> 00:03:29,850
0,90 90,180 180,420 420,690 690,900
of the email system actually

103
00:03:29,850 --> 00:03:31,120
0,180 180,600 600,930
go through Spanner.|

104
00:03:32,520 --> 00:03:34,980
0,600 750,1080 1080,1500 1500,1950 1950,2460
{} Maybe before diving into

105
00:03:34,980 --> 00:03:37,770
0,510 510,1050 1050,1530 1860,2400 2400,2790
a more detail,| {} I

106
00:03:37,770 --> 00:03:39,150
0,180 180,240 240,420 420,750 750,1380
want to make one logistic

107
00:03:39,150 --> 00:03:41,580
0,540 570,1440 1440,1830 1830,1920 1920,2430
comment,| not related to Spanner,|

108
00:03:41,760 --> 00:03:43,950
0,660 660,930 930,1620 1650,1920 1920,2190
{} as you may already

109
00:03:43,950 --> 00:03:45,420
0,90 90,600 630,1080 1080,1290 1290,1470
have seen,| {} we made

110
00:03:45,420 --> 00:03:47,730
0,150 150,690 690,960 960,1320 1800,2310
some adjustments for the long

111
00:03:47,730 --> 00:03:50,430
0,330 330,630 630,1020 1020,2220 2490,2700
weekend, long upcoming weekend, first

112
00:03:50,430 --> 00:03:51,600
0,60 60,330 330,630 630,900 900,1170
of all, {} lab {4a

113
00:03:51,600 --> 00:03:54,120
0,420 540,1260 1260,1860 1890,2430 2430,2520
-} {} is not as

114
00:03:54,120 --> 00:03:55,560
0,240 240,750 750,1020 1020,1260 1260,1440
heavy duty as the other

115
00:03:55,560 --> 00:03:57,060
0,450 450,660 660,1170 1170,1350 1350,1500
labs| and hopefully take them

116
00:03:57,060 --> 00:03:58,740
0,210 210,750 990,1290 1290,1440 1440,1680
less time,| {} we also

117
00:03:58,740 --> 00:04:00,450
0,570 570,840 840,1080 1080,1440 1440,1710
cancelled next week's lecture,| so

118
00:04:00,450 --> 00:04:01,440
0,150 150,270 270,420 420,750 750,990
that you can actually use

119
00:04:01,440 --> 00:04:02,940
0,270 270,630 630,930 960,1260 1260,1500
that as {} time to

120
00:04:02,940 --> 00:04:05,130
0,300 300,1020 1020,1320 1320,1680 1920,2190
work on {4a -}| and

121
00:04:05,130 --> 00:04:06,720
0,120 120,360 360,540 540,1110 1110,1590
we made the deadline for

122
00:04:06,720 --> 00:04:08,340
0,300 300,390 390,690 690,1230 1260,1620
{4a -} more flexible,| so

123
00:04:08,370 --> 00:04:09,540
0,240 240,480 480,840 840,960 960,1170
your next Friday is now

124
00:04:09,540 --> 00:04:11,010
0,360 360,480 480,840 1080,1350 1350,1470
convenient for you,| you can

125
00:04:11,010 --> 00:04:12,870
0,330 330,630 630,1110 1140,1350 1350,1860
actually choose to have another

126
00:04:12,900 --> 00:04:14,700
0,450 450,690 690,1140 1230,1410 1410,1800
extra late hours {} to

127
00:04:14,700 --> 00:04:16,000
0,300 330,630 630,750 750,1140
{} submit it later.|

128
00:04:16,870 --> 00:04:18,130
0,330 330,510 510,810 810,930 930,1260
{} And hopefully that will

129
00:04:18,130 --> 00:04:20,470
0,540 540,720 720,1290 1290,2010 2010,2340
allow you to enjoy the

130
00:04:20,470 --> 00:04:22,180
0,240 240,660 660,930 1200,1560 1560,1710
long weekend| and perhaps get

131
00:04:22,180 --> 00:04:24,340
0,300 300,900 900,1350 1530,2070 2070,2160
some sleep and maybe do

132
00:04:24,340 --> 00:04:27,070
0,240 240,540 540,870 870,870 1920,2730
something else than {} debugging

133
00:04:27,070 --> 00:04:28,200
0,150 150,270 270,990
{} your labs.|

134
00:04:29,100 --> 00:04:30,450
0,420 660,990 990,1170 1170,1200 1200,1350
{} {The,second} point I want

135
00:04:30,450 --> 00:04:31,890
0,60 60,270 270,660 750,1140 1140,1440
to make is directly related

136
00:04:31,890 --> 00:04:33,540
0,90 90,390 390,690 840,1200 1200,1650
to {Spanner -},| {} you

137
00:04:33,870 --> 00:04:34,800
0,60 120,330 330,450 450,630 630,930
know some of you noticed

138
00:04:34,800 --> 00:04:36,780
0,150 150,270 270,450 450,840 840,1980
this and came through the

139
00:04:37,050 --> 00:04:38,670
0,600 780,1050 1050,1230 1230,1470 1470,1620
questions,| {} this paper is

140
00:04:38,670 --> 00:04:41,640
0,420 420,1200 1860,2190 2190,2520 2820,2970
quite complicated| and there are

141
00:04:41,640 --> 00:04:43,020
0,210 210,450 450,540 540,630 630,1380
many reasons why it's complicated,|

142
00:04:43,020 --> 00:04:44,460
0,420 420,690 690,990 990,1260 1260,1440
but one reason is that|

143
00:04:44,460 --> 00:04:45,810
0,450 450,810 810,870 870,1260 1260,1350
actually there's a lot of

144
00:04:45,810 --> 00:04:47,730
0,210 210,450 450,690 1560,1860 1860,1920
things going on,| that's a

145
00:04:47,730 --> 00:04:49,050
0,360 360,870 870,1110 1110,1170 1170,1320
powerful system,| has a lot

146
00:04:49,050 --> 00:04:50,310
0,90 90,330 330,840 840,1050 1050,1260
of different components to it,|

147
00:04:50,550 --> 00:04:52,170
0,570 570,1140 1140,1200 1200,1350 1350,1620
{} and you know the

148
00:04:52,170 --> 00:04:53,970
0,450 450,720 720,960 960,1560 1560,1800
interaction between different components is

149
00:04:53,970 --> 00:04:56,640
0,660 1020,1560 1800,2220 2220,2370 2370,2670
important,| {} and so there's

150
00:04:56,640 --> 00:04:58,440
0,150 150,900 900,960 960,1530 1530,1800
a lot of material in

151
00:04:58,590 --> 00:04:59,910
0,150 150,540 540,690 690,930 1020,1320
this paper,| and so although

152
00:04:59,910 --> 00:05:01,050
0,120 120,420 420,540 540,990 990,1140
I'll try to do in

153
00:05:01,050 --> 00:05:02,040
0,180 180,600 600,720 720,930 930,990
this lecture| is {try,to} to

154
00:05:02,040 --> 00:05:03,690
0,150 150,270 270,450 450,960 1170,1650
make that more clear| by

155
00:05:03,690 --> 00:05:05,340
0,510 510,630 630,720 720,1200 1200,1650
focusing on a couple aspects

156
00:05:05,340 --> 00:05:06,540
0,60 60,150 150,570 570,840 840,1200
of the paper| and I'm

157
00:05:06,540 --> 00:05:07,290
0,300 300,420 420,480 480,630 630,750
not going to do a

158
00:05:07,290 --> 00:05:08,970
0,240 240,720 720,1140 1140,1230 1230,1680
full treatment of the paper,|

159
00:05:09,210 --> 00:05:11,220
0,420 420,1710 1710,1770 1770,1920 1920,2010
{} {but,you,know,}, of course I

160
00:05:11,220 --> 00:05:12,030
0,150 150,330 330,420 420,540 540,810
think what are the most

161
00:05:12,030 --> 00:05:13,380
0,330 330,810 810,900 900,1140 1140,1350
important ideas| and why we're

162
00:05:13,380 --> 00:05:15,120
0,240 240,450 450,750 870,1590
reading it in 6.824.|

163
00:05:15,830 --> 00:05:18,530
0,540 1050,1350 1350,1440 1440,1890 1890,2700
That took me actually a

164
00:05:18,530 --> 00:05:19,490
0,210 210,330 330,390 390,810 810,960
little bit of time| or

165
00:05:19,490 --> 00:05:21,800
0,840 1140,1470 1470,1770 1770,2010 2010,2310
{} few years to figure

166
00:05:21,800 --> 00:05:23,390
0,150 150,420 420,690 690,1230 1260,1590
out actually how to present

167
00:05:23,390 --> 00:05:24,470
0,120 120,480 480,630 630,960 960,1080
this paper| or explain it

168
00:05:24,470 --> 00:05:25,160
0,60 60,150 150,390 390,570 570,690
in a way that I

169
00:05:25,160 --> 00:05:27,920
0,660 690,930 930,1650 1770,2460 2460,2760
think it's a maybe easier

170
00:05:27,920 --> 00:05:29,150
0,90 90,630 630,780 780,1050 1050,1230
to understand| you know if

171
00:05:29,150 --> 00:05:30,860
0,150 150,390 390,930 1200,1380 1380,1710
you are for the concept

172
00:05:30,860 --> 00:05:31,700
0,90 90,270 270,390 390,480 480,840
of {6.824 - - -}.|

173
00:05:32,210 --> 00:05:33,800
0,510 630,810 810,1020 1020,1440 1440,1590
Okay, but ask questions as

174
00:05:33,800 --> 00:05:34,660
0,570
always.|

175
00:05:36,650 --> 00:05:39,260
0,420 420,930 960,1170 1170,1740 2160,2610
Okay, {} so let's dive

176
00:05:39,260 --> 00:05:40,340
0,180 180,600 630,840 840,870 870,1080
in and talk a little

177
00:05:40,340 --> 00:05:42,410
0,210 210,360 360,630 630,1170 1170,2070
bit of the high-level organization.|

178
00:05:42,800 --> 00:05:43,780
0,660

179
00:05:49,430 --> 00:05:50,690
0,420 420,750 750,900 900,1080 1080,1260
And more from the point

180
00:05:50,690 --> 00:05:52,400
0,60 60,930 930,1230 1230,1500 1500,1710
of view| from the way

181
00:05:52,400 --> 00:05:53,540
0,90 90,420 420,600 600,870 870,1140
I want to talk about

182
00:05:53,540 --> 00:05:55,190
0,210 210,930 1020,1410 1410,1500 1500,1650
this {} Spanner in this

183
00:05:55,190 --> 00:05:55,820
0,330
lecture.|

184
00:05:56,240 --> 00:05:57,470
0,180 180,360 360,660 660,900 900,1230
So there's multiple data centers|

185
00:05:57,470 --> 00:05:59,540
0,180 210,420 420,1020 1200,1560 1560,2070
and {you,know} for {} convenience

186
00:05:59,540 --> 00:06:01,910
0,900 930,1590 1590,1680 1680,1830 1830,2370
for simplicity,| you know, just

187
00:06:01,910 --> 00:06:03,020
0,210 210,420 420,630 630,840 840,1110
think about there 3 data

188
00:06:03,020 --> 00:06:05,510
0,390 630,1170 1200,1770 1770,1950 1950,2490
centers, A B and C,|

189
00:06:08,900 --> 00:06:09,680
0,120 120,480 480,540 540,660 660,780
I mean it can be

190
00:06:09,680 --> 00:06:11,100
0,360 360,420 420,480 480,990
anywhere in the world,|

191
00:06:12,480 --> 00:06:14,610
0,660 840,1560 1560,1830 1830,1980 1980,2130
and the goal is that

192
00:06:14,610 --> 00:06:15,960
0,450 450,570 570,750 750,1170 1170,1350
basically you know data will

193
00:06:15,960 --> 00:06:16,680
0,240 240,480 480,570 570,690 690,720
be like,| we have a

194
00:06:16,680 --> 00:06:18,480
0,600 600,870 990,1590 1590,1740 1740,1800
data like {} like a

195
00:06:18,480 --> 00:06:19,590
0,540 540,630 630,750 750,1020 1020,1110
shard,| you know that you

196
00:06:19,590 --> 00:06:22,110
0,270 480,1140 1140,1590 1590,2040 2040,2520
know contains some database rows

197
00:06:22,110 --> 00:06:23,790
0,360 450,630 630,810 810,1110 1110,1680
or some key value pairs,|

198
00:06:24,350 --> 00:06:26,440
0,330 330,570 570,1080 1080,1920
{} so after shard,|

199
00:06:26,840 --> 00:06:28,220
0,300 300,390 390,660 660,750 750,1380
maybe it has the {keys,a}

200
00:06:28,220 --> 00:06:30,140
0,690 720,780 780,990 990,1410
to you know m,|

201
00:06:31,080 --> 00:06:32,160
0,270 270,330 330,690 690,930 930,1080
and the basic idea is

202
00:06:32,160 --> 00:06:33,570
0,330 330,630 630,720 720,1200 1200,1410
actually going to replicate that

203
00:06:33,570 --> 00:06:35,380
0,270 270,690 690,900 900,1260
shard across data centers,|

204
00:06:37,440 --> 00:06:38,520
0,360 360,630 630,780 780,840 840,1080
{} and with the goal

205
00:06:38,520 --> 00:06:39,780
0,180 180,360 360,690 690,840 840,1260
that like even if complete

206
00:06:39,780 --> 00:06:41,400
0,240 240,540 540,750 750,1320
data center goes down,|

207
00:06:41,890 --> 00:06:44,350
0,600 720,990 990,1350 1350,1920 1980,2460
{then,you,know} we can proceed {}|

208
00:06:44,350 --> 00:06:45,430
0,120 120,510 510,690 690,930 930,1080
you know the way we're

209
00:06:45,430 --> 00:06:46,300
0,120 120,240 240,630 630,750 750,870
going to arrange,| that we're

210
00:06:46,300 --> 00:06:46,810
0,120 120,180 180,240 240,420 420,510
going to be able to

211
00:06:46,810 --> 00:06:49,840
0,390 390,600 600,930 1080,1770 1770,3030
proceed is that| basically {these,shards}

212
00:06:49,840 --> 00:06:51,440
0,420 420,540 540,600 600,1320
you're going to form

213
00:06:52,380 --> 00:06:53,640
0,180 180,780 780,930 930,1020 1020,1260
these replicas,| that are sitting

214
00:06:53,640 --> 00:06:54,960
0,90 90,360 360,540 540,1020 1140,1320
in different data center will

215
00:06:54,960 --> 00:06:56,980
0,390 390,900 900,1350 1350,1770
form one paxos group,|

216
00:07:03,520 --> 00:07:04,810
0,210 210,300 300,660 660,1020 1020,1290
so if you're thinking about

217
00:07:04,810 --> 00:07:05,530
0,150 150,300 300,510 510,570 570,720
this,| we're trying to think

218
00:07:05,530 --> 00:07:06,370
0,240 240,390 390,480 480,750 750,840
about this in terms of

219
00:07:06,370 --> 00:07:08,560
0,480 510,810 810,1320 1470,1890 1890,2190
lab {} 3,| then you

220
00:07:08,560 --> 00:07:09,340
0,90 90,210 210,480 480,690 690,780
can think about that,| you

221
00:07:09,340 --> 00:07:10,120
0,210 210,330 330,570 570,630 630,780
know we have a key

222
00:07:10,120 --> 00:07:11,560
0,360 360,900 1020,1230 1230,1290 1290,1440
value store| where the key

223
00:07:11,560 --> 00:07:14,380
0,300 300,930 960,2100 2130,2460 2460,2820
value servers are spread around

224
00:07:14,380 --> 00:07:16,780
0,240 240,450 450,990 1230,2010 2010,2400
different data centers| and the

225
00:07:17,560 --> 00:07:19,960
0,300 300,420 420,930 930,1620 1620,2400
keys are updated,| the []

226
00:07:19,960 --> 00:07:22,000
0,360 390,990 1080,1770 1770,1890 1890,2040
{} raft writes,| you know

227
00:07:22,000 --> 00:07:23,800
0,330 330,570 570,900 900,1440 1590,1800
through the raft log| and

228
00:07:23,800 --> 00:07:24,370
0,240 240,330 330,420 420,480 480,570
then we go to the

229
00:07:24,370 --> 00:07:26,950
0,780 780,1020 1020,1410 1440,2220 2310,2580
individual key {} kvs,| {you,know}

230
00:07:26,950 --> 00:07:27,980
0,360 360,450 450,930
update their state,|

231
00:07:28,750 --> 00:07:29,500
0,180 180,300 300,420 420,570 570,750
and so you can think

232
00:07:29,500 --> 00:07:31,180
0,390 390,480 480,690 810,1350 1350,1680
about you know lab 3

233
00:07:31,180 --> 00:07:32,620
0,270 270,480 480,870 870,1080 1080,1440
being here| instead of running

234
00:07:32,620 --> 00:07:33,520
0,120 120,270 270,660 660,780 780,900
you know 3 {} kv

235
00:07:33,520 --> 00:07:35,080
0,330 330,420 420,510 510,1110 1200,1560
servers on your machine, {}|

236
00:07:35,080 --> 00:07:36,130
0,240 240,360 360,420 420,660 660,1050
you're going to run one

237
00:07:36,220 --> 00:07:39,100
0,300 300,660 660,810 810,1470 1530,2880
kv server in different data

238
00:07:39,100 --> 00:07:39,800
0,480
centers.|

239
00:07:42,080 --> 00:07:43,980
0,750 870,1590
Okay? {}|

240
00:07:44,170 --> 00:07:46,510
0,450 450,1050 1140,1530 1530,1740 1740,2340
So we, then look there's

241
00:07:46,510 --> 00:07:47,560
0,150 150,270 270,360 360,630 630,1050
gonna be a paxos group

242
00:07:47,560 --> 00:07:49,690
0,510 540,990 990,1470 1470,1860 1890,2130
per shard,| so { -}

243
00:07:49,720 --> 00:07:51,720
0,660 960,1620
there, {}

244
00:07:54,570 --> 00:07:55,800
0,300 300,510 510,600 600,810 810,1230
it might be other shards|

245
00:07:55,800 --> 00:07:57,030
0,270 270,600 600,810 810,1110 1110,1230
that hold other parts of

246
00:07:57,030 --> 00:07:58,380
0,570
the,

247
00:07:59,620 --> 00:08:01,660
0,150 150,720 720,1200 1200,1500 1500,2040
the key-value space or database

248
00:08:01,660 --> 00:08:03,520
0,660 1020,1230 1230,1440 1440,1770 1770,1860
rows,| so let's say you

249
00:08:03,520 --> 00:08:04,300
0,120 120,240 240,360 360,600 600,780
know we have only two

250
00:08:04,300 --> 00:08:05,260
0,510 510,630 630,720 720,810 810,960
shards,| you know for this

251
00:08:05,260 --> 00:08:07,330
0,330 330,1020 1230,1830 1830,1920 1920,2070
particular database, {} you know

252
00:08:07,330 --> 00:08:08,680
0,330 330,750 750,960 960,1020 1020,1350
shards containing a to m,|

253
00:08:08,680 --> 00:08:09,640
0,120 120,210 210,270 270,570 570,960
and then the shard containing

254
00:08:09,640 --> 00:08:10,480
0,150 150,240 240,570
n to z,|

255
00:08:11,280 --> 00:08:12,840
0,450 510,960 960,1170 1170,1410 1410,1560
then they have form their

256
00:08:12,840 --> 00:08:14,480
0,420 480,870 870,1440
own access group,|

257
00:08:17,110 --> 00:08:18,100
0,180 180,240 240,600 600,720 720,990
and the reason we want

258
00:08:18,100 --> 00:08:19,390
0,60 60,210 210,240 240,600 600,1290
to get {} multiple shards

259
00:08:20,020 --> 00:08:21,960
0,360 360,480 480,870 870,1530
is to get parallelism.|

260
00:08:31,110 --> 00:08:31,920
0,210 210,330 330,420 420,720 720,810
So that we can you

261
00:08:31,920 --> 00:08:35,490
0,1380 1770,2520 2520,2880 2880,3150 3150,3570
know transactions involve different shards,|

262
00:08:35,490 --> 00:08:38,310
0,1860 1860,2070 2070,2130 2130,2430 2430,2820
{you,know,disjoint - -} {set,of} shards,|

263
00:08:38,580 --> 00:08:39,480
0,90 90,210 210,360 360,450 450,900
{you,know} they can be used

264
00:08:39,480 --> 00:08:41,340
0,330 330,660 660,960 960,1350 1350,1860
disjoint {can,actually} proceed completely {in,parallel}.|

265
00:08:42,860 --> 00:08:44,120
0,300 300,450 450,660 660,960 960,1260
{} So, as mentioned earlier,|

266
00:08:44,120 --> 00:08:45,920
0,120 120,420 420,1410 1410,1710 1710,1800
we have {} {paxos -}

267
00:08:45,920 --> 00:08:48,580
0,270 270,390 390,1200
group {} shard

268
00:08:52,920 --> 00:08:54,120
0,270 270,330 330,450 450,570 570,1200
{} you know for replication,|

269
00:08:54,120 --> 00:08:55,620
0,210 210,390 390,690 690,990 990,1500
but {you,know} paxos actually provides

270
00:08:55,620 --> 00:08:57,300
0,390 570,1140 1140,1260 1260,1500 1500,1680
us {} you know an

271
00:08:57,300 --> 00:08:59,160
0,390 390,540 540,630 630,1230 1260,1860
additional sort of benefit, {}|

272
00:08:59,850 --> 00:09:01,950
0,570 570,1140 1140,1560 1560,1770 1770,2100
{you,know,the} communication costs right for

273
00:09:01,980 --> 00:09:02,760
0,150 150,270 270,510 510,660 660,780
a to b or from

274
00:09:02,760 --> 00:09:03,600
0,90 90,210 210,390 390,600 600,840
b to c might be

275
00:09:03,600 --> 00:09:05,730
0,180 180,420 420,1080 1290,1830 1830,2130
{} very expensive,| {} and

276
00:09:05,730 --> 00:09:07,170
0,420 420,510 510,630 630,1080 1080,1440
seems you know paxos allows

277
00:09:07,170 --> 00:09:08,550
0,120 120,600 600,810 810,1110 1110,1380
to proceed,| where raft allows

278
00:09:08,550 --> 00:09:09,510
0,90 90,180 180,600 600,720 720,960
us to proceed with just

279
00:09:09,510 --> 00:09:11,010
0,30 30,720 870,1290 1290,1380 1380,1500
{} majority,| {} you know

280
00:09:11,010 --> 00:09:12,450
0,120 120,420 420,930 930,1140 1140,1440
the slow machine might actually

281
00:09:12,450 --> 00:09:13,770
0,210 210,450 450,660 660,900 900,1320
have not that much performance

282
00:09:13,770 --> 00:09:15,990
0,600 960,1290 1290,1800 1860,2130 2130,2220
impact| and so we can

283
00:09:15,990 --> 00:09:17,850
0,180 180,270 270,570 570,1410 1440,1860
sort of easily tolerate either

284
00:09:17,850 --> 00:09:19,800
0,330 330,900 930,1140 1140,1380 1380,1950
slow machines| or actually one

285
00:09:19,800 --> 00:09:21,210
0,90 90,180 180,450 450,930 930,1410
you know data center {}

286
00:09:21,240 --> 00:09:22,180
0,330 330,480 480,870
being {} down.|

287
00:09:22,830 --> 00:09:25,170
0,600 750,1110 1110,1260 1260,1920 1920,2340
So, {} the majority rule

288
00:09:25,170 --> 00:09:26,970
0,330 330,660 750,930 930,1140 1140,1800
helps us in two ways,|

289
00:09:27,700 --> 00:09:28,840
0,210 210,300 300,420 420,780 780,1140
you know we get {}

290
00:09:28,840 --> 00:09:32,320
0,300 300,930 1290,1680 1680,2460
data center fault tolerance,|

291
00:09:35,920 --> 00:09:39,060
0,720 720,900 900,1290 1290,1650
and through {slowness -}.|

292
00:09:40,170 --> 00:09:41,160
0,660

293
00:09:41,480 --> 00:09:43,430
0,360 360,540 540,1020 1020,1620 1650,1950
The {} final goal as

294
00:09:43,430 --> 00:09:45,590
0,180 180,480 480,690 690,1620 1650,2160
we'll see in a little

295
00:09:45,590 --> 00:09:46,700
0,90 90,210 210,600 600,780 780,1110
bit more detail is that,|

296
00:09:46,940 --> 00:09:49,730
0,480 480,870 870,1470 1470,2130 2160,2790
{} a client of {}

297
00:09:50,030 --> 00:09:52,130
0,720 720,960 990,1680 1770,1950 1950,2100
{ -} Spanner,| so let's

298
00:09:52,130 --> 00:09:53,560
0,180 180,390 390,540 540,1200
say here's some server

299
00:09:54,460 --> 00:09:56,530
0,420 420,1050 1320,1590 1590,1770 1770,2070
{that,uses} Spanner,| {} would like

300
00:09:56,530 --> 00:09:57,460
0,120 120,180 180,330 330,390 390,930
it to be the case|

301
00:09:57,460 --> 00:09:58,630
0,360 360,510 510,630 630,810 810,1170
that you know this server

302
00:09:58,630 --> 00:09:59,890
0,120 120,540 540,900 900,960 960,1260
can actually use a close

303
00:09:59,890 --> 00:10:00,700
0,540
replica,|

304
00:10:01,200 --> 00:10:03,330
0,510 510,900 1050,1290 1290,1980 1980,2130
and so the replica {you,know}

305
00:10:03,330 --> 00:10:04,880
0,450 450,570 570,1260
typically are placed

306
00:10:06,450 --> 00:10:09,240
0,840 870,1410 1410,2010 2100,2310 2310,2790
closed, close to the clients

307
00:10:09,240 --> 00:10:10,170
0,150 150,210 210,390 390,600 600,930
that {actually -} use them.|

308
00:10:11,760 --> 00:10:12,990
0,150 150,420 420,540 540,840 840,1230
In fact, we'll see that

309
00:10:13,230 --> 00:10:15,780
0,510 510,750 750,1980 2070,2340 2340,2550
{read-only -} transactions can be

310
00:10:15,780 --> 00:10:17,550
0,540 540,990 990,1320 1320,1440 1440,1770
executed basically by the local

311
00:10:17,550 --> 00:10:20,400
0,600 750,1350 1350,1590 1590,2310 2310,2850
replica| without any communication to

312
00:10:20,400 --> 00:10:21,740
0,150 150,330 330,570 570,1080
the other data centers.|

313
00:10:22,210 --> 00:10:22,960
0,210 210,360 360,360 360,570 570,750
And when I talk about

314
00:10:22,960 --> 00:10:25,030
0,570 660,870 870,1320 1620,1950 1950,2070
client,| {} here, this is

315
00:10:25,030 --> 00:10:27,370
0,840 840,1020 1020,1110 1110,1560 1680,2340
typically sort of the backend

316
00:10:27,370 --> 00:10:30,940
0,720 750,1410 1440,2430 2460,3090 3090,3570
servers of some Google servers,|

317
00:10:30,970 --> 00:10:32,020
0,60 90,510 510,630 630,840 840,1050
for example, this might be

318
00:10:32,020 --> 00:10:34,360
0,180 180,960 990,1650 1650,1890 1890,2340
the Gmail server,| that's sitting

319
00:10:34,690 --> 00:10:37,360
0,1320 1320,1860 1860,2010 2010,2250 2250,2670
{} {also,in} some data center|

320
00:10:37,360 --> 00:10:38,590
0,420 420,690 690,780 780,990 990,1230
and maybe the same data

321
00:10:38,590 --> 00:10:39,520
0,330 330,450 450,750 750,840 840,930
center| and talks to the

322
00:10:39,520 --> 00:10:40,810
0,480 480,570 570,750 750,1050 1050,1290
replica in that particular data

323
00:10:40,810 --> 00:10:42,730
0,450 900,1080 1080,1170 1170,1440 1440,1920
centers| and of course outside

324
00:10:42,730 --> 00:10:44,500
0,150 150,390 390,930 930,1110 1110,1770
our real clients like users

325
00:10:45,640 --> 00:10:47,170
0,540 540,720 720,1200 1200,1470 1470,1530
you know you read or

326
00:10:47,170 --> 00:10:47,940
0,240 240,690
write email.|

327
00:10:48,860 --> 00:10:50,180
0,660 690,840 840,1080 1080,1260 1260,1320
Okay, {any -} sort of

328
00:10:50,180 --> 00:10:53,000
0,330 330,570 570,690 690,1560 1680,2820
questions about this high-level organization?|

329
00:11:01,470 --> 00:11:04,200
0,360 360,570 570,780 780,1650 2190,2730
Okay, let me {sort,of -}

330
00:11:04,230 --> 00:11:06,420
0,570 600,1080 1110,1500 1500,1590 1590,2190
{ -} layout the challenges,|

331
00:11:06,420 --> 00:11:08,130
0,210 210,330 330,390 390,930 1050,1710
{} that I wanna focus

332
00:11:08,130 --> 00:11:10,170
0,150 150,240 240,390 390,840 1470,2040
on in this lecture, {}|

333
00:11:10,820 --> 00:11:13,280
0,30 150,510 510,1080 1860,2220 2220,2460
I mean, {we're,going,to -} {sort,of}

334
00:11:13,280 --> 00:11:15,400
0,570 570,960 960,1590
three main challenges.|

335
00:11:17,490 --> 00:11:20,580
0,450 450,1050 1440,2130 2310,2940 2940,3090
One is, {} {the,way} is

336
00:11:20,580 --> 00:11:21,450
0,180 180,420 420,600 600,780 780,870
it like I said,| we

337
00:11:21,450 --> 00:11:22,800
0,180 180,240 240,570 570,750 750,1350
want to actually {read-only -}

338
00:11:22,800 --> 00:11:24,360
0,540 540,990 990,1230 1230,1470 1470,1560
transactions without actually having to

339
00:11:24,360 --> 00:11:26,160
0,780 810,1320 1320,1500 1500,1650 1650,1800
communicate {} with any other

340
00:11:26,160 --> 00:11:27,990
0,570 810,1260 1260,1650 1650,1740 1740,1830
server,| {} but you know

341
00:11:27,990 --> 00:11:28,830
0,120 120,240 240,300 300,450 450,840
we got to make sure

342
00:11:28,830 --> 00:11:29,670
0,150 150,240 240,480 480,750 750,840
that the reads sees the

343
00:11:29,670 --> 00:11:30,720
0,300 300,720
latest write,|

344
00:11:47,960 --> 00:11:49,400
0,210 210,480 480,570 570,1050 1050,1440
this sort of classic {}

345
00:11:49,430 --> 00:11:50,930
0,390 390,540 540,720 720,930 930,1500
challenge that we've seen before,|

346
00:11:50,930 --> 00:11:52,760
0,240 240,420 420,1170 1170,1500 1530,1830
{you,know} {zookeeper -}, {} zookeeper

347
00:11:52,760 --> 00:11:55,010
0,300 300,810 1380,1830 1830,2010 2010,2250
{sort,of} avoid, doesn't really address

348
00:11:55,010 --> 00:11:56,180
0,90 90,360 360,600 600,810 810,1170
the challenge direct head on|

349
00:11:56,180 --> 00:11:57,890
0,210 210,420 420,600 600,990 990,1710
and just like weaken consistency,|

350
00:11:58,340 --> 00:11:59,990
0,420 420,780 780,840 840,1140 1140,1650
but here in this {}

351
00:11:59,990 --> 00:12:01,430
0,480 480,630 630,810 810,1020 1020,1440
design,| we'd like to arrange

352
00:12:01,430 --> 00:12:02,510
0,180 180,270 270,600 600,840 840,1080
in a way that actually

353
00:12:02,510 --> 00:12:04,610
0,90 90,750 900,1380 1380,1740 1740,2100
we still keep {linearizability -},|

354
00:12:04,610 --> 00:12:06,680
0,90 90,510 510,960 1470,1890 1890,2070
in fact {you,know} Spanner shoot

355
00:12:06,680 --> 00:12:08,660
0,180 180,630 630,900 900,1530 1530,1980
for [] {} stronger property

356
00:12:08,660 --> 00:12:09,700
0,180 180,510 510,870
than {linearizability -}.|

357
00:12:10,940 --> 00:12:12,290
0,330 330,570 570,930 1020,1290 1290,1350
Second thing is when you

358
00:12:12,290 --> 00:12:14,090
0,180 180,240 240,840 870,1440 1470,1800
want to support,| {} Spanner

359
00:12:14,090 --> 00:12:16,340
0,270 270,570 570,1140 1140,1590 1590,2250
{wants,to} support transactions across shards,|

360
00:12:21,240 --> 00:12:22,770
0,390 390,870 870,1140 1140,1410 1410,1530
so {even,this,is} actually like we

361
00:12:22,770 --> 00:12:24,420
0,120 120,180 180,450 450,1170 1170,1650
do a bank transfer| and

362
00:12:24,510 --> 00:12:26,070
0,330 330,780 780,870 870,1080 1080,1560
one account in one shard,|

363
00:12:26,070 --> 00:12:27,360
0,90 90,270 270,750 750,840 840,1290
the other account, the destination

364
00:12:27,360 --> 00:12:28,950
0,210 210,330 330,630 630,1080 1290,1590
account, there's another shard,| we

365
00:12:28,950 --> 00:12:30,690
0,150 150,210 210,660 660,750 750,1740
want to arrange you know

366
00:12:30,690 --> 00:12:32,820
0,210 210,1260 1290,1470 1470,1560 1560,2130
it still can be executed

367
00:12:32,820 --> 00:12:34,590
0,240 240,900 900,1020 1020,1350 1350,1770
{like,a} introduction and have ACID

368
00:12:34,890 --> 00:12:36,600
0,780
semantics.|

369
00:12:36,960 --> 00:12:38,670
0,600 600,690 690,840 840,1020 1020,1710
Finally, you know the transactions

370
00:12:38,670 --> 00:12:40,860
0,270 270,540 540,780 780,1140 1140,2190
both {read-only -} ones| and

371
00:12:40,890 --> 00:12:43,470
0,450 450,960 1020,1650 1650,1890 1890,2580
read-write ones must be serializable,|

372
00:12:45,420 --> 00:12:46,890
0,600 600,630 630,780 780,870 870,1470
{in,fact} a little bit stronger

373
00:12:46,890 --> 00:12:48,460
0,150 180,930
than serializable.|

374
00:12:48,920 --> 00:12:51,040
0,60 60,480 480,630 630,960

375
00:12:53,150 --> 00:12:56,060
0,600 600,960 960,1200 1200,2070 2190,2910
And {you,know,we'll} see that, {}|

376
00:12:56,210 --> 00:12:57,350
0,360 360,480 480,570 570,660 660,1140
{} you know for this,

377
00:12:57,350 --> 00:12:59,630
0,120 120,210 210,720 1080,2040 2130,2280
you know for basically for

378
00:12:59,630 --> 00:13:01,100
0,120 120,330 330,540 540,1290 1290,1470
the {read-write -} transactions,| we're

379
00:13:01,100 --> 00:13:01,910
0,120 120,180 180,360 360,480 480,810
going to use {two-phase -}

380
00:13:01,910 --> 00:13:04,520
0,480 480,600 600,810 810,1200 1560,2610
locking, {two-phase -} commit| and

381
00:13:04,550 --> 00:13:07,160
0,660 1080,1740 1740,2100 2100,2520 2520,2610
{} basically two [] that

382
00:13:07,160 --> 00:13:08,660
0,60 60,300 300,690 690,1320 1320,1500
we talked about {} in

383
00:13:08,660 --> 00:13:09,540
0,90 90,390 390,690
the last lecture.|

384
00:13:10,300 --> 00:13:11,470
0,330 330,660 720,960 960,1050 1050,1170
And so what I'd like

385
00:13:11,470 --> 00:13:13,180
0,60 60,240 240,810 1020,1470 1470,1710
to do first is| talk

386
00:13:13,180 --> 00:13:14,920
0,480 480,600 600,810 810,990 990,1740
about {} {read-write -} transactions|

387
00:13:15,190 --> 00:13:17,020
0,450 450,1020 1020,1500 1530,1770 1770,1830
and then {} talk in

388
00:13:17,020 --> 00:13:19,630
0,180 180,930 930,1890 1920,2220 2220,2610
more detail how {read-only -}

389
00:13:19,630 --> 00:13:20,980
0,450 450,540 540,1020 1020,1200 1200,1350
transactions are executed,| so that

390
00:13:20,980 --> 00:13:23,650
0,300 480,660 660,1200 1320,2430 2430,2670
they can run {} very

391
00:13:23,650 --> 00:13:24,420
0,540
efficiently.|

392
00:13:27,370 --> 00:13:29,020
0,270 270,690 720,960 960,1140 1140,1650
Okay, so {read-write -} transactions

393
00:13:29,020 --> 00:13:29,980
0,180 180,210 210,570 570,750 750,960
{you,know -} basically {two-phase -}

394
00:13:29,980 --> 00:13:31,600
0,330 330,450 450,540 540,1050 1080,1620
locking and {two-phase -} {}

395
00:13:31,600 --> 00:13:32,380
0,480
commit.|

396
00:13:33,300 --> 00:13:34,860
0,570 600,960 960,1110 1110,1200 1200,1560
So hopefully this is pretty

397
00:13:35,610 --> 00:13:38,600
0,810 810,960 960,1650
easy to understand,|

398
00:13:42,650 --> 00:13:43,370
0,330 330,510 510,540 540,660 660,720
and {there -} going to

399
00:13:43,370 --> 00:13:45,080
0,420 420,720 720,930 930,1320 1320,1710
involve these {sort,of} complex timing

400
00:13:45,080 --> 00:13:46,850
0,570 570,810 810,1260 1260,1530 1530,1770
diagrams, that we looked at

401
00:13:46,850 --> 00:13:50,390
0,1230 1230,1500 2220,2700 2700,3150 3270,3540
last week| and so the

402
00:13:50,390 --> 00:13:52,070
0,480 480,660 660,900 900,1320 1470,1680
way it's set up| and

403
00:13:52,070 --> 00:13:53,630
0,870 870,990 990,1050 1050,1470 1470,1560
I'm going to simplify a

404
00:13:53,630 --> 00:13:54,500
0,240 270,510 510,660 660,750 750,870
bit,| looking at the way

405
00:13:54,500 --> 00:13:56,330
0,870 870,1050 1050,1230 1230,1680 1680,1830
it's set up in {}

406
00:13:56,330 --> 00:13:58,370
0,570 660,1140 1140,1650 1680,1980 1980,2040
Spanner,| is we have the

407
00:13:58,370 --> 00:14:00,200
0,480 1080,1260 1260,1320 1320,1740 1740,1830
client| and the client is

408
00:14:00,200 --> 00:14:01,400
0,360 360,450 450,540 540,990 990,1200
sort of in charge of

409
00:14:01,400 --> 00:14:03,500
0,270 270,600 600,720 720,1290 1470,2100
really running the transaction| and

410
00:14:03,500 --> 00:14:06,290
0,330 330,750 750,1620 1680,2190 2190,2790
user transaction manager transaction library,|

411
00:14:06,620 --> 00:14:08,840
0,690 780,1320 1320,1710 1710,1920 1920,2220
{} actually runs on the

412
00:14:08,840 --> 00:14:12,020
0,270 270,1080 1710,2220 2220,2550 2550,3180
client machine| and in charge

413
00:14:12,050 --> 00:14:14,340
0,180 180,600 600,840 840,1740
of basically {you,know} orchestrate

414
00:14:14,670 --> 00:14:16,380
0,480 480,750 750,1200 1260,1410 1410,1710
{} this transaction| and again

415
00:14:16,380 --> 00:14:17,790
0,90 90,510 510,810 810,930 930,1410
the client here is not

416
00:14:17,790 --> 00:14:18,570
0,90 90,180 180,330 330,600 600,780
you know the user web

417
00:14:18,570 --> 00:14:20,790
0,570 570,930 1020,1530 1530,1770 1770,2220
browser or gmail,| but basically

418
00:14:20,790 --> 00:14:22,860
0,120 120,840 840,1410 1440,1920 1920,2070
the servers {} server on,

419
00:14:22,860 --> 00:14:24,390
0,360 390,930 930,1380 1380,1440 1440,1530
the gmail server in the

420
00:14:24,390 --> 00:14:26,250
0,240 240,690 810,1080 1080,1380 1380,1860
data center,| {} that's {the,client}

421
00:14:26,250 --> 00:14:27,080
0,120 120,600
of Spanner.|

422
00:14:28,100 --> 00:14:29,210
0,150 150,270 270,480 480,990 990,1110
And so let's make the

423
00:14:29,210 --> 00:14:30,890
0,330 330,630 630,1140 1170,1560 1560,1680
picture reasonable simple,| {} so

424
00:14:30,890 --> 00:14:32,210
0,210 210,330 330,480 480,1050 1050,1320
we have two shards instead

425
00:14:32,210 --> 00:14:34,580
0,90 90,630 870,1200 1200,1830 2100,2370
of three four five,| so

426
00:14:34,580 --> 00:14:35,960
0,90 90,210 210,510 510,990 1020,1380
we have shard a and

427
00:14:35,960 --> 00:14:37,800
0,120 120,240 240,540 540,1020
we have shard b.|

428
00:14:38,000 --> 00:14:39,230
0,450 450,630 630,990 990,1110 1110,1230
And let's assume we're going

429
00:14:39,230 --> 00:14:41,900
0,510 540,870 870,1650 1680,1920 1920,2670
to just execute the transfer

430
00:14:41,930 --> 00:14:43,280
0,360 360,960 960,1020 1020,1230 1230,1350
{} transaction, the same one

431
00:14:43,280 --> 00:14:44,330
0,120 120,600 600,870 870,990 990,1050
as before,| we're going to

432
00:14:44,330 --> 00:14:45,620
0,390 390,510 510,930 930,1110 1110,1290
deduct some money from one

433
00:14:45,620 --> 00:14:46,520
0,360 360,510 510,660 660,780 780,900
account, then add it to

434
00:14:46,520 --> 00:14:47,480
0,300 300,750
another account.|

435
00:14:48,690 --> 00:14:49,650
0,180 180,660 660,780 780,900 900,960
And initially, I'm going to

436
00:14:49,650 --> 00:14:50,640
0,180 180,390 390,570 570,720 720,990
talk about this {[without] -}

437
00:14:50,640 --> 00:14:52,620
0,90 90,330 330,870
the {timestamps -},|

438
00:14:57,690 --> 00:14:58,530
0,90 90,300 300,630 630,690 690,840
in some ways you know

439
00:14:58,530 --> 00:15:00,000
0,480 600,990 990,1260 1260,1350 1350,1470
the one reason to do

440
00:15:00,000 --> 00:15:01,140
0,270 270,450 450,750 750,1020 1020,1140
so is that,| actually for

441
00:15:01,140 --> 00:15:02,430
0,120 120,360 360,570 570,1050 1050,1290
the {read-write -} transaction {timestamps

442
00:15:02,430 --> 00:15:04,050
0,270 270,360 360,780 780,1020 1020,1620
-} are not very important,|

443
00:15:04,560 --> 00:15:05,490
0,150 150,360 360,630 630,840 840,930
the {timestamps -} actually are

444
00:15:05,490 --> 00:15:07,020
0,570 570,870 870,1080 1080,1260 1260,1530
mostly there for {read-only -}

445
00:15:07,020 --> 00:15:08,520
0,720 870,1050 1050,1200 1200,1410 1410,1500
transactions| and they need a

446
00:15:08,520 --> 00:15:10,080
0,360 360,930 930,1050 1050,1320 1320,1560
little tweaking to the read-write

447
00:15:10,080 --> 00:15:12,270
0,660 660,990 1080,1800 1860,2040 2040,2190
transactions to support,| {} that

448
00:15:12,270 --> 00:15:13,350
0,90 90,270 270,420 420,960 960,1080
we don't need transactions| and

449
00:15:13,350 --> 00:15:14,490
0,270 270,360 360,570 570,960 960,1140
therefore the {timestamps -} are

450
00:15:14,490 --> 00:15:17,850
0,300 720,1320 1710,2190 2190,2490 2520,3360
{sort,of} { -} in drifting

451
00:15:17,850 --> 00:15:19,560
0,360 360,540 540,720 720,1200 1200,1710
to {read-write -} transactions too,|

452
00:15:19,590 --> 00:15:21,090
0,360 360,630 630,870 870,1410 1410,1500
{} but in essence you

453
00:15:21,090 --> 00:15:22,230
0,150 150,270 270,450 450,630 630,1140
know the {read-write -} transactions

454
00:15:22,230 --> 00:15:23,970
0,210 210,540 540,1140 1170,1500 1500,1740
are basically straight {} {two-phase

455
00:15:23,970 --> 00:15:25,080
0,240 240,630 630,780 780,900 900,1110
-} locking and {two-phase -}

456
00:15:25,080 --> 00:15:25,600
0,270
commit.|

457
00:15:26,610 --> 00:15:27,690
0,390 390,570 570,900 900,960 960,1080
So the client is going

458
00:15:27,690 --> 00:15:29,100
0,90 90,360 360,540 540,1050 1050,1410
to reads these accounts,| for

459
00:15:29,100 --> 00:15:31,140
0,450 450,660 660,1170 1170,1380 1980,2040
example let's assume that you

460
00:15:31,140 --> 00:15:32,720
0,300 300,540 540,1230
know read x,|

461
00:15:33,220 --> 00:15:34,540
0,360 360,540 540,720 720,1170 1170,1320
{} so we just gonna

462
00:15:34,540 --> 00:15:35,980
0,120 120,240 240,630 630,1110 1110,1440
do the transfer transaction from

463
00:15:35,980 --> 00:15:37,780
0,390 390,630 630,900 900,1260 1260,1800
moving money, form adding {}

464
00:15:37,780 --> 00:15:38,980
0,240 240,390 390,960 960,1080 1080,1200
1 to x,| you know

465
00:15:38,980 --> 00:15:42,070
0,750 750,1170 1860,2310 2310,2580 2580,3090
subtracting {} subtracting 1 dollar

466
00:15:42,070 --> 00:15:43,630
0,210 210,510 510,720 720,1020 1020,1560
from x| and adding a

467
00:15:43,630 --> 00:15:45,220
0,330 330,420 420,840 1290,1470 1470,1590
dollar to y,| it's going

468
00:15:45,220 --> 00:15:46,180
0,90 90,240 240,690 690,810 810,960
to be x,| and let's

469
00:15:46,180 --> 00:15:47,470
0,390 390,720 720,1020 1020,1230 1230,1290
assume that x sits in

470
00:15:47,470 --> 00:15:49,120
0,210 210,720 990,1230 1230,1350 1350,1650
one shard,| {} so it's

471
00:15:49,120 --> 00:15:50,110
0,120 120,180 180,420 420,570 570,990
going to be a cross

472
00:15:50,110 --> 00:15:52,930
0,150 150,930 1290,1980 2100,2670 2670,2820
shard transaction| and and you

473
00:15:52,930 --> 00:15:55,270
0,120 120,270 270,540 540,1080 1530,2340
have to read of y,|

474
00:15:55,770 --> 00:15:57,640
0,690 690,1410
{} and,

475
00:15:58,310 --> 00:15:59,340
0,720

476
00:15:59,640 --> 00:16:01,260
0,330 330,480 480,960 990,1230 1230,1620
there's gonna be,| {} when

477
00:16:01,260 --> 00:16:03,960
0,90 90,450 450,900 900,1170 1170,2700
the client executes these {}

478
00:16:03,960 --> 00:16:05,160
0,210 210,810 810,960 960,1110 1110,1200
read operations,| they go to

479
00:16:05,160 --> 00:16:06,360
0,120 120,510 510,660 660,960 960,1200
the shards and shards actually

480
00:16:06,360 --> 00:16:09,720
0,780 1440,2130 2160,2700
keep lock table,|

481
00:16:10,090 --> 00:16:11,800
0,210 210,390 390,540 540,1170 1170,1710
and so they record basically

482
00:16:11,800 --> 00:16:13,450
0,210 210,1020 1050,1140 1140,1260 1260,1650
this transaction,| you know so

483
00:16:13,450 --> 00:16:14,650
0,180 180,300 300,510 510,630 630,1200
let's say this is transaction

484
00:16:14,650 --> 00:16:16,340
0,390 390,570 570,1140
whatever {TID -},|

485
00:16:16,620 --> 00:16:18,510
0,810 810,1110 1110,1260 1260,1410 1410,1890
{} and they're gonna record

486
00:16:18,510 --> 00:16:20,250
0,420 450,570 570,720 720,1020 1020,1740
that you know the {x,is}

487
00:16:20,250 --> 00:16:21,660
0,300 450,630 630,930
owned you know,|

488
00:16:22,050 --> 00:16:23,670
0,330 330,630 630,900 900,1080 1080,1620
lock table actually owned by

489
00:16:23,700 --> 00:16:25,290
0,90 90,720 720,810 810,1260 1260,1590
the clients,| you know and

490
00:16:25,290 --> 00:16:26,790
0,150 150,990 990,1260 1260,1440 1440,1500
here {is,y} owned by the

491
00:16:26,790 --> 00:16:29,190
0,600 1320,1830 1830,2160 2160,2310 2310,2400
client| and that sort of

492
00:16:29,190 --> 00:16:31,350
0,330 360,660 660,1620 1620,1980 1980,2160
a very standards {you,know,we've} seen

493
00:16:31,350 --> 00:16:32,100
0,540
before.|

494
00:16:32,630 --> 00:16:33,800
0,120 120,270 270,600 660,990 990,1170
You know the thing that

495
00:16:33,800 --> 00:16:36,560
0,180 180,930 930,1290 1290,1680 1680,2760
is slightly different here| and

496
00:16:36,770 --> 00:16:38,180
0,540 540,810 810,1110 1110,1230 1230,1410
not fully drawing it out

497
00:16:38,180 --> 00:16:39,590
0,300 300,480 480,810 1020,1290 1290,1410
here is that,| when we're

498
00:16:39,590 --> 00:16:41,240
0,420 420,570 570,810 810,1200 1200,1650
talking to one shard a,|

499
00:16:41,300 --> 00:16:43,220
0,420 420,870 930,1110 1110,1650 1650,1920
shard a is really one

500
00:16:43,220 --> 00:16:44,520
0,90 90,270 270,630 630,1140
of these paxos groups,|

501
00:16:44,800 --> 00:16:45,850
0,240 240,390 390,570 570,630 630,1050
and so {it,has - -}

502
00:16:45,850 --> 00:16:47,830
0,90 90,240 240,780 780,1980 1980,1980
you know three { -}

503
00:16:48,100 --> 00:16:49,180
0,270 270,540 540,690 690,960 960,1080
{} in this case, you

504
00:16:49,180 --> 00:16:51,130
0,150 150,1350 1350,1710 1710,1770 1770,1950
know a group of three

505
00:16:51,130 --> 00:16:53,770
0,510 840,1470 1590,2010 2010,2220 2220,2640
peers| and {so,SA - -}

506
00:16:53,800 --> 00:16:57,460
0,330 330,1170 1320,2580 2580,3240 3240,3660
really replicated {} servers consisting

507
00:16:57,460 --> 00:16:59,860
0,120 120,480 480,990 1440,2160 2190,2400
of multiple peers,| in when

508
00:16:59,860 --> 00:17:01,900
0,480 480,600 600,840 840,1530 1680,2040
executing {read-only -} transaction,| we're

509
00:17:01,900 --> 00:17:02,710
0,150 150,240 240,540 540,630 630,810
gonna be talking to the

510
00:17:02,710 --> 00:17:04,000
0,480 480,750 750,930 930,1170 1170,1290
leader of that peers,| so

511
00:17:04,000 --> 00:17:04,720
0,90 90,180 180,390 390,450 450,720
if you think in terms

512
00:17:04,720 --> 00:17:05,770
0,330 330,720 720,810 810,900 900,1050
raft style,| you can just

513
00:17:05,770 --> 00:17:07,480
0,150 150,390 390,600 840,1260 1260,1710
think about it,| {} the

514
00:17:07,510 --> 00:17:09,070
0,240 240,720 720,1020 1020,1260 1260,1560
read request goes to the

515
00:17:09,100 --> 00:17:12,400
0,630 630,930 930,1500 1980,2640 2820,3300
leader of the {} paxos

516
00:17:12,400 --> 00:17:12,920
0,450
group.|

517
00:17:13,760 --> 00:17:17,690
0,420 810,1350 1500,2310 2340,2970 2970,3930
And, {} another, {} so

518
00:17:17,690 --> 00:17:18,440
0,180 180,420 420,510 510,690 690,750
every time I sort of

519
00:17:18,440 --> 00:17:19,640
0,240 240,450 450,630 630,930 930,1200
draw this one single arrow

520
00:17:19,640 --> 00:17:22,040
0,270 270,750 750,1260 1260,1800 1800,2400
here for SA or {for,SB},|

521
00:17:22,100 --> 00:17:23,510
0,570 570,900 900,1050 1050,1260 1260,1410
{you,know} it's a much more

522
00:17:23,510 --> 00:17:26,060
0,720 1290,1740 1740,2100 2100,2280 2280,2550
complicated story,| particularly when writes

523
00:17:26,060 --> 00:17:27,470
0,120 120,600 750,1020 1020,1290 1290,1410
get involved,| {because,writes -} actually

524
00:17:27,470 --> 00:17:29,000
0,120 120,210 210,480 480,1260 1260,1530
going to go through the

525
00:17:29,000 --> 00:17:30,540
0,570 570,900 900,1200
{paxos,of} raft group.|

526
00:17:31,480 --> 00:17:32,700
0,600

527
00:17:33,100 --> 00:17:35,350
0,360 390,630 630,1230 1410,2070 2070,2250
The {read-only -} {} or

528
00:17:35,350 --> 00:17:37,180
0,330 330,660 660,870 870,1170 1170,1830
lock tables actually not replicated,|

529
00:17:37,270 --> 00:17:39,520
0,930 930,1290 1290,1440 1440,2070 2070,2250
{} it is stored at

530
00:17:39,520 --> 00:17:41,740
0,120 120,720 720,1230 1230,1650 1680,2220
the leader of the paxos

531
00:17:41,770 --> 00:17:44,200
0,840 1320,1860 1860,1950 1950,2040 2040,2430
group,| and if the leader

532
00:17:44,200 --> 00:17:46,090
0,210 210,690 690,1080 1080,1170 1170,1890
goes down during the transaction,|

533
00:17:46,330 --> 00:17:48,370
0,450 450,1140 1170,1860 1860,1980 1980,2040
{} then {} you know

534
00:17:48,370 --> 00:17:49,450
0,330 330,420 420,870 870,990 990,1080
basically the transaction has to

535
00:17:49,450 --> 00:17:50,920
0,150 150,720 720,960 960,1080 1080,1470
be restarted,| where the transaction

536
00:17:50,920 --> 00:17:52,690
0,150 150,240 240,810 990,1530 1530,1770
will be aborted,| {} because

537
00:17:52,690 --> 00:17:54,160
0,90 90,330 330,810 810,930 930,1470
the lock information is lost.|

538
00:17:55,320 --> 00:17:57,570
0,540 960,1350 1350,1530 1530,1950 1950,2250
The reason that these lock

539
00:17:57,570 --> 00:18:00,990
0,300 300,480 480,1020 1020,1980 2790,3420
table is not, { -}

540
00:18:01,880 --> 00:18:03,620
0,240 240,720 720,900 900,990 990,1740
-} is not the replica,|

541
00:18:03,620 --> 00:18:05,240
0,150 150,360 360,810 810,1380
{this,is,may} read operation fast.|

542
00:18:05,840 --> 00:18:07,730
0,300 300,750 1110,1650 1650,1800 1800,1890
Okay, so once you know

543
00:18:07,730 --> 00:18:08,700
0,660
the

544
00:18:08,970 --> 00:18:11,130
0,420 420,630 630,720 720,1020 1020,2160
client actually has gotten the

545
00:18:11,220 --> 00:18:13,320
0,1020 1020,1140 1140,1320 1320,1440 1440,2100
values of x and y|

546
00:18:13,320 --> 00:18:14,310
0,330 330,450 450,750 750,900 900,990
and it's taken out the

547
00:18:14,310 --> 00:18:15,420
0,510 510,630 630,870 870,1050 1050,1110
locks you know sort of

548
00:18:15,420 --> 00:18:18,990
0,390 390,660 660,1290 1470,2310 2970,3570
two-phase locking style,| the {}

549
00:18:18,990 --> 00:18:21,300
0,300 300,840 1050,1680 1680,1980 1980,2310
it's gonna subtract one from

550
00:18:21,300 --> 00:18:22,740
0,420 420,510 510,690 690,900 900,1440
x, you know add one

551
00:18:22,740 --> 00:18:24,840
0,90 90,360 480,1260 1500,1950 1950,2100
you know y,| and then

552
00:18:24,840 --> 00:18:26,010
0,270 270,420 420,480 480,1050 1080,1170
basically going to submit a

553
00:18:26,010 --> 00:18:26,840
0,630
transaction.|

554
00:18:27,430 --> 00:18:28,480
0,210 210,450 450,690 690,930 930,1050
{} So basically all the

555
00:18:28,480 --> 00:18:29,740
0,270 270,390 390,600 600,1110 1110,1260
writes are done locally at

556
00:18:29,740 --> 00:18:31,390
0,420 450,930 930,1230 1230,1350 1350,1650
the client,| again so this

557
00:18:31,390 --> 00:18:33,700
0,120 120,240 240,690 690,1350 1590,2310
is the gmail server {}|

558
00:18:33,700 --> 00:18:35,290
0,630 630,810 810,1200 1200,1380 1380,1590
and {} one [] thing

559
00:18:35,290 --> 00:18:37,240
0,300 300,1320 1350,1650 1650,1740 1740,1950
is, {} {when,the,client} is done

560
00:18:37,240 --> 00:18:38,890
0,210 210,750 750,840 840,1170 1170,1650
with transaction,| it submits transaction

561
00:18:38,890 --> 00:18:41,880
0,330 330,1050 1860,2130 2130,2700
to {} to Spanner,|

562
00:18:42,320 --> 00:18:44,990
0,510 780,1320 1560,1770 1770,2190 2190,2670
and, {} it submits to

563
00:18:44,990 --> 00:18:46,640
0,90 90,570 570,1350
a transaction coordinator,|

564
00:18:48,600 --> 00:18:50,220
0,480 480,1050 1200,1350 1350,1470 1470,1620
so some you know set

565
00:18:50,220 --> 00:18:51,990
0,90 90,690 720,1500 1500,1680 1680,1770
of servers {} you know

566
00:18:51,990 --> 00:18:53,670
0,270 360,690 690,1200 1200,1440 1440,1680
or some machines you pick

567
00:18:53,670 --> 00:18:55,530
0,210 210,360 360,750 750,1500 1710,1860
as the transaction coordinator| and

568
00:18:55,530 --> 00:18:57,270
0,450 450,570 570,960 960,1560 1560,1740
again the transaction coordinator is

569
00:18:57,270 --> 00:18:59,040
0,420 420,840 1290,1440 1440,1620 1620,1770
paxos group,| {as,I} said it's

570
00:18:59,040 --> 00:19:02,280
0,810 840,2220 2220,2760 2790,2970 2970,3240
multiple appears in a different

571
00:19:02,280 --> 00:19:03,160
0,210 210,690
data centers.|

572
00:19:03,890 --> 00:19:05,810
0,360 420,780 780,1170 1170,1650 1650,1920
And one reason we want

573
00:19:05,810 --> 00:19:06,680
0,150 150,270 270,420 420,480 480,870
this to be a paxos

574
00:19:06,680 --> 00:19:08,930
0,570 750,1080 1080,1230 1230,1680 2040,2250
group is,| so that as

575
00:19:08,930 --> 00:19:11,060
0,510 510,750 750,1260 1260,1680 1680,2130
we've seen before,| {in,two-phase -}

576
00:19:11,060 --> 00:19:12,680
0,660 690,900 900,990 990,1320 1320,1620
protocol or the two-phase commit,|

577
00:19:12,830 --> 00:19:15,290
0,300 300,510 510,780 780,1740 1740,2460
that if the coordinator fails,|

578
00:19:15,560 --> 00:19:17,780
0,210 210,420 420,720 720,1350 1380,2220
it might actually block {}

579
00:19:17,810 --> 00:19:19,850
0,330 330,990 990,1320 1320,1440 1440,2040
the participants, right,| if participants

580
00:19:19,850 --> 00:19:21,530
0,330 330,990 990,1200 1200,1590 1590,1680
have prepared and agreed to

581
00:19:21,530 --> 00:19:23,030
0,210 210,660 660,840 840,930 930,1500
go along with the transaction,|

582
00:19:23,240 --> 00:19:24,560
0,180 180,330 330,420 420,900 900,1320
but then the coordinate fails

583
00:19:24,560 --> 00:19:25,910
0,150 150,330 330,690 690,1050 1080,1350
{you,knwo} this petition to have

584
00:19:25,910 --> 00:19:26,750
0,60 60,360 360,510 510,600 600,840
to hold on to their

585
00:19:26,750 --> 00:19:28,220
0,360 540,960 960,1140 1140,1230 1230,1470
locks| and have to wait

586
00:19:28,220 --> 00:19:30,740
0,330 330,690 1020,1890 1890,2100 2100,2520
until the coordinator comes back|

587
00:19:30,800 --> 00:19:33,200
0,420 420,1110 1110,1410 1440,2160 2160,2400
by replicating the coordinator using

588
00:19:33,200 --> 00:19:35,510
0,720 930,1290 1290,1440 1440,1620 1620,2310
paxos| and we make the

589
00:19:35,600 --> 00:19:37,580
0,600 600,990 990,1560 1560,1710 1710,1980
coordinate highly available| and so

590
00:19:37,580 --> 00:19:40,730
0,570 1170,1800 1800,1980 1980,2700 2760,3150
basically avoid that particular sort

591
00:19:40,730 --> 00:19:42,120
0,60 60,660 660,1320
of disaster scenario.|

592
00:19:43,340 --> 00:19:46,190
0,540 1080,1320 1320,1590 1590,2010 2010,2850
Okay?| So the transaction coordinators

593
00:19:46,190 --> 00:19:47,300
0,180 180,540 540,600 600,930 930,1110
then basically in charge of

594
00:19:47,300 --> 00:19:48,620
0,450 450,600 600,780 780,1050 1050,1320
running the {two-phase -} commit

595
00:19:48,620 --> 00:19:50,480
0,630 930,1290 1290,1440 1440,1560 1560,1860
protocol| and so it will

596
00:19:50,480 --> 00:19:52,970
0,330 330,1650 1650,2100 2100,2250 2250,2490
send {you,know,the} updates for {x,and}

597
00:19:52,970 --> 00:19:54,340
0,600 600,1110
y to

598
00:19:55,060 --> 00:19:57,580
0,570 690,1320 1320,1710 1710,2040 2040,2520
the leader of shard a,|

599
00:19:57,670 --> 00:19:59,290
0,510 510,810 810,1140 1140,1410 1410,1620
{} x y to the

600
00:19:59,320 --> 00:20:01,420
0,540 540,1020 1050,1260 1260,1560 1560,2100
leaders of a shard b,|

601
00:20:01,780 --> 00:20:02,860
0,780

602
00:20:03,390 --> 00:20:04,770
0,480 510,870 870,960 960,1110 1110,1380
the they you know grab

603
00:20:04,770 --> 00:20:05,700
0,90 90,600 600,720 720,810 810,930
the logs| {you,know} in this

604
00:20:05,700 --> 00:20:07,560
0,390 390,480 480,660 660,1350 1740,1860
case, you know, {} you

605
00:20:07,560 --> 00:20:09,120
0,120 120,480 480,750 750,960 960,1560
know the already hold {the,locks},|

606
00:20:09,120 --> 00:20:10,980
0,420 450,930 930,1290 1290,1710 1710,1860
or promote locks write, {read-write

607
00:20:10,980 --> 00:20:15,090
0,210 210,750 1170,2040 2070,3150 3150,4110
-} locks| and basically prepare

608
00:20:15,210 --> 00:20:16,470
0,690 690,840 840,900 900,1080 1080,1260
{you,know,transaction},| so they don't really

609
00:20:16,470 --> 00:20:18,180
0,540 540,870 870,1290 1290,1500 1500,1710
{execute,it} yet,| but just make

610
00:20:18,180 --> 00:20:20,760
0,480 720,840 840,1680 2010,2340 2340,2580
the you know typically using

611
00:20:20,760 --> 00:20:21,810
0,180 180,360 360,780 780,900 900,1050
write ahead logging,| you know

612
00:20:21,810 --> 00:20:24,360
0,750 750,930 930,1590 1920,2460 2460,2550
prepared to changes| and if

613
00:20:24,360 --> 00:20:26,820
0,270 270,360 360,960 1020,1470 1470,2460
everything is okay,| then they

614
00:20:26,850 --> 00:20:28,950
0,900 990,1230 1230,1740 1770,1980 1980,2100
basically {} commit to the

615
00:20:28,950 --> 00:20:31,200
0,450 450,960 1200,1740 1740,2070 2070,2250
transaction by {} entering sort

616
00:20:31,200 --> 00:20:32,500
0,60 60,240 240,690 690,1080
of this prepared state,|

617
00:20:35,460 --> 00:20:36,360
0,240 240,360 360,480 480,690 690,900
and this is {sort,of,a} big

618
00:20:36,360 --> 00:20:37,500
0,600
moment,|

619
00:20:37,750 --> 00:20:39,220
0,390 390,630 630,720 720,900 900,1470
{} because at this point,|

620
00:20:39,430 --> 00:20:41,380
0,150 150,930 930,1260 1260,1470 1470,1950
the transaction is what appears,

621
00:20:41,380 --> 00:20:43,300
0,120 300,1110 1110,1440 1440,1830 1830,1920
when participants are committed to

622
00:20:43,300 --> 00:20:45,340
0,360 390,1290 1290,1470 1470,1590 1590,2040
this transaction| and we know

623
00:20:45,460 --> 00:20:46,720
0,240 240,540 540,930 930,1020 1020,1260
from last lecture,| you know

624
00:20:46,720 --> 00:20:48,310
0,630 630,1140 1140,1260 1260,1500 1500,1590
the participants do actually have

625
00:20:48,310 --> 00:20:50,140
0,90 90,630 630,1200 1350,1590 1590,1830
to record state,| so that

626
00:20:50,140 --> 00:20:51,340
0,210 210,390 390,960 960,1110 1110,1200
if they fail and they

627
00:20:51,340 --> 00:20:52,750
0,120 120,390 390,570 570,780 780,1410
come back up,| they can

628
00:20:52,750 --> 00:20:53,980
0,360 360,480 480,660 660,900 930,1230
recover and pick up from

629
00:20:53,980 --> 00:20:55,930
0,270 270,390 390,660 660,960 1440,1950
where they left off,| so,

630
00:20:55,960 --> 00:20:57,700
0,270 270,450 450,540 540,1410 1410,1740
{} at the prepared state,|

631
00:20:57,700 --> 00:20:59,380
0,390 390,570 570,1050 1050,1530 1530,1680
basically this results into a

632
00:20:59,380 --> 00:21:00,420
0,390 390,930
paxos write,|

633
00:21:04,370 --> 00:21:05,600
0,210 210,780 780,870 870,1140 1140,1230
{you,know} recording the state of

634
00:21:05,600 --> 00:21:08,930
0,90 90,900 1170,2250 2250,3180 3180,3330
the transaction,| {} and {2PC

635
00:21:08,930 --> 00:21:14,120
0,390 390,1110 3450,4290 4290,4290 4290,5190
-} {state -} {} {the,logs}

636
00:21:14,330 --> 00:21:18,470
0,690 1860,2580 2580,3120 3150,3690 3690,4140
that participate holding etc etc|

637
00:21:18,500 --> 00:21:20,210
0,180 180,600 720,1080 1080,1380 1380,1710
and so {} this paxos

638
00:21:20,210 --> 00:21:22,160
0,480 750,870 870,1200 1200,1740 1770,1950
write,| so the leader of

639
00:21:22,160 --> 00:21:23,660
0,180 180,510 510,870 870,1440 1440,1500
this particular shard,| there's a

640
00:21:23,660 --> 00:21:25,670
0,480 480,480 480,1170 1170,1440 1440,2010
push {} paxos write across

641
00:21:25,670 --> 00:21:27,470
0,120 120,330 330,540 540,1170 1260,1800
you know the different peers

642
00:21:27,470 --> 00:21:29,030
0,90 90,150 150,600 810,1080 1080,1560
in the group| to ensure

643
00:21:29,030 --> 00:21:31,040
0,480 510,900 900,1260 1260,1380 1380,2010
that {} state is replicated

644
00:21:31,040 --> 00:21:31,880
0,210 210,720
fault tolerant.|

645
00:21:33,480 --> 00:21:35,610
0,630 1050,1380 1380,1920 1920,2010 2010,2130
{} So once you know

646
00:21:35,610 --> 00:21:36,540
0,630
the,

647
00:21:36,780 --> 00:21:39,450
0,690 840,1410 1410,2010 2040,2580 2580,2670
the participants have prepared and

648
00:21:39,450 --> 00:21:41,310
0,270 270,330 330,930 1200,1770 1770,1860
agreed to prepared,| then you

649
00:21:41,310 --> 00:21:42,810
0,120 120,210 210,390 390,810 810,1500
know they sent back okay,|

650
00:21:42,840 --> 00:21:44,900
0,150 150,630 690,1530
you know, okay,|

651
00:21:45,560 --> 00:21:46,640
0,240 240,390 390,630 630,930 930,1080
this is very similar {two-phase

652
00:21:46,640 --> 00:21:47,990
0,300 330,690 690,780 780,1200 1200,1350
- -} {protocol -} that

653
00:21:47,990 --> 00:21:50,180
0,60 60,300 300,870 1200,1890 1890,2190
we talked before| and at

654
00:21:50,180 --> 00:21:51,260
0,180 180,660 660,750 750,870 870,1080
this point you know the

655
00:21:51,260 --> 00:21:52,880
0,510 510,600 600,1080
coordinator can commit,|

656
00:21:55,180 --> 00:21:56,260
0,120 120,180 180,540 540,750 750,1080
and of course the point

657
00:21:56,260 --> 00:21:58,120
0,60 60,510 660,720 720,720 1260,1860
to commit, the {} coordinated,

658
00:21:58,120 --> 00:21:59,590
0,180 180,900 900,1170 1170,1380 1380,1470
these records actually made the

659
00:21:59,590 --> 00:22:01,360
0,300 300,930 960,1590 1590,1680 1680,1770
commit decision,| because when our

660
00:22:01,360 --> 00:22:02,830
0,480 480,630 630,960 960,1230 1230,1470
participants may come back later,|

661
00:22:02,830 --> 00:22:03,640
0,90 90,210 210,300 300,690 690,810
and want to know and

662
00:22:03,640 --> 00:22:04,660
0,210 210,360 360,660 660,780 780,1020
find out about it| and

663
00:22:04,660 --> 00:22:06,490
0,390 390,540 540,660 660,1110 1560,1830
we might have failures,| so

664
00:22:06,490 --> 00:22:08,380
0,570 600,720 720,1080 1080,1560 1560,1890
again the paxos state with

665
00:22:08,650 --> 00:22:10,570
0,840 840,960 960,1200 1200,1440 1440,1920
PC {two-phase -} commit state

666
00:22:10,690 --> 00:22:13,810
0,540 540,810 810,1350 1350,2340 2370,3120
{} is written {} to

667
00:22:13,810 --> 00:22:16,900
0,300 300,930 1320,1590 1590,2340 2550,3090
using paxos and replicated using

668
00:22:16,900 --> 00:22:17,540
0,570
paxos.|

669
00:22:18,790 --> 00:22:21,130
0,240 240,360 360,1080 1110,1680 1680,2340
And from this whole presentation,|

670
00:22:21,130 --> 00:22:22,030
0,150 150,270 270,450 450,600 600,900
you can just think about

671
00:22:22,030 --> 00:22:24,010
0,330 330,480 480,720 720,1230 1260,1980
paxos as being complete substitute

672
00:22:24,010 --> 00:22:25,840
0,150 150,660 660,780 780,1320 1350,1830
or equivalent to raft,| you

673
00:22:26,200 --> 00:22:29,950
0,540 1500,2130 2130,2730 2730,3570 3570,3750
know spanner predates raft,| but

674
00:22:29,950 --> 00:22:31,750
0,330 330,570 570,1260 1260,1680 1680,1800
{like,you,know} for perceptually and you

675
00:22:31,750 --> 00:22:33,640
0,150 150,330 330,600 600,1140 1290,1890
know through first order, {}|

676
00:22:33,640 --> 00:22:34,360
0,120 120,180 180,300 300,420 420,720
you know for this paper

677
00:22:34,360 --> 00:22:35,660
0,270 270,660 660,750 750,1110
is basically the same.|

678
00:22:36,630 --> 00:22:37,800
0,570

679
00:22:38,150 --> 00:22:39,740
0,480 750,990 990,1200 1200,1380 1380,1590
So this point is actually

680
00:22:39,740 --> 00:22:41,750
0,330 330,750 750,1200 1200,1500 1500,2010
commits,| this {you,know,is} really {commit,point},|

681
00:22:42,080 --> 00:22:45,020
0,150 150,480 480,1680 1710,2340 2340,2940
which ones {} transaction coordinator,|

682
00:22:45,020 --> 00:22:46,970
0,150 150,420 420,990 990,1530 1530,1950
has written down the transaction

683
00:22:46,970 --> 00:22:48,890
0,120 120,630 930,1500 1500,1770 1770,1920
is committed,| {} that is

684
00:22:48,890 --> 00:22:50,750
0,540 540,870 870,1440 1440,1710 1710,1860
{} actual {commit,point}| and then

685
00:22:50,750 --> 00:22:52,520
0,630 630,720 720,840 840,1050 1050,1770
informs you know their participants,|

686
00:22:52,520 --> 00:22:53,880
0,120 120,390
you know

687
00:22:55,000 --> 00:22:57,980
0,210 210,450 450,1230
that has happened.|

688
00:22:58,650 --> 00:22:59,610
0,420 420,540 540,690 690,840 840,960
And you know they're going

689
00:22:59,610 --> 00:23:01,170
0,60 60,420 420,750 750,990 990,1560
to respond back, if okay,|

690
00:23:01,170 --> 00:23:02,820
0,420 420,840 840,930 930,1440 1440,1650
great transaction is committed| and

691
00:23:02,820 --> 00:23:04,200
0,120 120,540 540,1050 1050,1170 1170,1380
the transaction coordinator can clean

692
00:23:04,200 --> 00:23:06,240
0,120 120,240 240,690 1020,1680 1680,2040
up its state| {} and

693
00:23:06,240 --> 00:23:07,380
0,120 120,240 240,420 420,750 750,1140
at some point later the

694
00:23:07,380 --> 00:23:08,490
0,390 390,540 540,750 750,960 960,1110
shards can also clean up

695
00:23:08,490 --> 00:23:11,040
0,510 630,1050 1050,1590 1800,2310 2310,2550
their {} state,| {} and

696
00:23:11,040 --> 00:23:12,420
0,330 330,390 390,570 570,1050 1110,1380
that at {the,point,of} commit and

697
00:23:12,420 --> 00:23:14,760
0,330 360,810 810,1680 1680,1830 1830,2340
the participants release their locks.|

698
00:23:25,860 --> 00:23:27,540
0,240 240,810 900,1410 1410,1500 1500,1680
Okay, so that is sort

699
00:23:27,540 --> 00:23:29,700
0,90 90,660 690,1110 1110,1740 1740,2160
of the basic story for

700
00:23:29,700 --> 00:23:32,250
0,450 450,1200 1290,1590 1590,2190 2190,2550
read-write transactions| and so any

701
00:23:32,250 --> 00:23:33,440
0,360 360,600 600,1020
questions about this?|

702
00:23:34,250 --> 00:23:35,480
0,360 360,510 510,690 690,870 900,1230
And I think the simple

703
00:23:35,480 --> 00:23:36,500
0,120 120,240 240,390 390,750 750,1020
way to think about is,|

704
00:23:36,530 --> 00:23:38,060
0,210 210,420 420,570 570,1050 1050,1530
this is {two-phase -} commit,

705
00:23:38,090 --> 00:23:39,890
0,180 180,420 420,990 1260,1590 1590,1800
{two-phase -} locking,| {} with

706
00:23:39,890 --> 00:23:41,630
0,120 120,390 390,810 810,1470 1470,1740
the main difference between what

707
00:23:41,630 --> 00:23:42,710
0,90 90,360 360,540 540,840 840,1080
we talked about last week|

708
00:23:42,710 --> 00:23:44,330
0,210 210,630 630,900 900,1260 1260,1620
and this week is that

709
00:23:44,510 --> 00:23:46,850
0,240 240,870 870,1440 1440,1650 1830,2340
the {participant -}, the transaction

710
00:23:46,850 --> 00:23:49,850
0,810 930,1500 1530,2220 2280,2490 2490,3000
coordinator,| the participants are all

711
00:23:49,850 --> 00:23:51,560
0,420 420,720 720,900 900,990 990,1710
paxos groups,| or they replicated

712
00:23:51,560 --> 00:23:53,390
0,120 120,450 450,1080 1170,1650 1650,1830
their highly available,| {} and

713
00:23:53,390 --> 00:23:54,200
0,180 180,240 240,300 300,660 660,810
some of the problems that

714
00:23:54,200 --> 00:23:55,160
0,330 330,570 570,750 750,810 810,960
we talked about the {two-phase

715
00:23:55,160 --> 00:23:57,080
0,270 270,540 540,810 810,1260 1410,1920
-} commit last time {}

716
00:23:57,080 --> 00:23:59,420
0,720 750,1230 1230,1470 1470,1950 1950,2340
are less, less relevant here,|

717
00:23:59,420 --> 00:24:01,610
0,270 270,360 360,930 930,1410 1620,2190
because the participants are much

718
00:24:01,610 --> 00:24:02,620
0,120 120,450 450,930
more highly available.|

719
00:24:04,420 --> 00:24:06,310
0,240 240,750 960,1290 1290,1530 1530,1890
So the {} each shard

720
00:24:06,310 --> 00:24:08,710
0,420 450,1290 1290,1380 1380,1710 1710,2400
is replicating the lock table

721
00:24:08,740 --> 00:24:09,820
0,180 180,810
or not?|

722
00:24:10,410 --> 00:24:11,970
0,420 420,660 660,1020 1020,1440 1440,1560
{Yeah,well}, it's not replicating the

723
00:24:11,970 --> 00:24:13,470
0,270 270,720 720,870 870,1380 1380,1500
lock table,| it's replicating the

724
00:24:13,470 --> 00:24:14,910
0,360 360,570 570,1080 1080,1320 1320,1440
lock that's holding when it

725
00:24:14,910 --> 00:24:16,100
0,240 240,330 330,930
does the prepare.|

726
00:24:17,000 --> 00:24:17,990
0,180 180,390 390,480 480,840 840,990
So only the lock when

727
00:24:17,990 --> 00:24:19,430
0,330 330,630 630,780 780,1170 1170,1440
it's that it's holding during.|

728
00:24:20,360 --> 00:24:21,590
0,450 450,720 720,840 840,930 930,1230
{Yeah,the} state that it needs

729
00:24:21,590 --> 00:24:22,760
0,120 120,420 420,570 570,780 780,1170
to do {two-phase -} commit.|

730
00:24:25,870 --> 00:24:28,060
0,570 570,1020 1020,1500 1620,2070 2070,2190
So then they like the

731
00:24:28,060 --> 00:24:30,130
0,690 690,1200 1200,1350 1350,1770 1800,2070
current locks for {} some

732
00:24:30,130 --> 00:24:32,000
0,570 570,720 720,1440
transaction that hasn't

733
00:24:32,210 --> 00:24:33,860
0,300 300,390 390,810 810,1470 1500,1650
reach the prepared stage,| it

734
00:24:33,860 --> 00:24:36,240
0,480 510,750 750,1080 1290,2100
will they just lost.|

735
00:24:36,390 --> 00:24:37,290
0,270 270,360 360,480 480,810 810,900
They will be lost and

736
00:24:37,290 --> 00:24:38,550
0,120 120,210 210,600 600,780 780,1260
then the transaction will abort,|

737
00:24:38,580 --> 00:24:40,350
0,240 240,840 840,960 960,1140 1140,1770
{} participant does not participate,|

738
00:24:41,710 --> 00:24:42,820
0,240 240,390 390,480 480,930 930,1110
and tell the coordinator hey

739
00:24:42,820 --> 00:24:43,780
0,60 60,330 330,420 420,840 840,960
I lost my locks to

740
00:24:43,780 --> 00:24:45,280
0,360 510,810 810,900 900,1200
that, can't do it.|

741
00:24:46,000 --> 00:24:46,980
0,480

742
00:24:47,100 --> 00:24:48,380
0,450 450,960
Thank you.|

743
00:24:50,230 --> 00:24:51,820
0,510 870,1050 1050,1200 1200,1320 1320,1590
Okay, so that the rest

744
00:24:51,820 --> 00:24:53,560
0,390 390,570 570,1110 1110,1470 1470,1740
of this lecture is about

745
00:24:53,560 --> 00:24:55,000
0,60 60,210 210,360 360,1260
the {read-only -} transactions,|

746
00:24:55,350 --> 00:24:56,880
0,480 480,1230
{} and,

747
00:25:03,750 --> 00:25:05,130
0,270 270,540 540,1080 1080,1170 1170,1380
so these transactions are only

748
00:25:05,130 --> 00:25:08,000
0,150 150,570 1530,2040 2040,2580
do reads no writes,|

749
00:25:09,360 --> 00:25:10,980
0,270 270,390 390,780 810,1200 1200,1620
and they are {} common|

750
00:25:11,220 --> 00:25:12,540
0,270 270,510 510,1170 1170,1230 1230,1320
and so one of the

751
00:25:12,540 --> 00:25:13,560
0,360 360,450 450,630 630,840 840,1020
goals is to actually make

752
00:25:13,560 --> 00:25:14,700
0,90 90,360 360,900
them very fast.|

753
00:25:18,560 --> 00:25:19,970
0,390 390,690 690,780 780,1020 1020,1410
{} And the way you're,

754
00:25:19,970 --> 00:25:22,370
0,450 450,1050 1440,1860 1890,2220 2220,2400
{} there, the way they

755
00:25:22,370 --> 00:25:24,350
0,540 570,660 660,1140 1170,1380 1380,1980
achieve you know high performance|

756
00:25:24,350 --> 00:25:25,850
0,540 570,870 870,1230 1230,1410 1410,1500
is the range that the

757
00:25:25,850 --> 00:25:27,950
0,420 870,1290 1290,1530 1530,1680 1680,2100
reads,| Spanner makes high performance

758
00:25:27,950 --> 00:25:29,990
0,240 240,720 1080,1560 1560,1860 1860,2040
because reads are only for

759
00:25:29,990 --> 00:25:31,480
0,330 330,840
local shards,|

760
00:25:36,570 --> 00:25:37,760
0,900

761
00:25:38,040 --> 00:25:40,800
0,570 570,1590 1620,1890 1890,2100 2100,2760
and they have no locks,|

762
00:25:43,040 --> 00:25:44,030
0,180 180,360 360,630 630,720 720,990
and no lock is good,|

763
00:25:44,030 --> 00:25:45,170
0,330 330,540 540,780 780,990 990,1140
because it means that {read-write

764
00:25:45,170 --> 00:25:47,150
0,150 150,690 690,990 1050,1860 1860,1980
-} transactions can block {the,read-write}

765
00:25:47,150 --> 00:25:48,920
0,600 600,840 840,1200 1200,1530 1530,1770
transactions| or {another,way} saying is

766
00:25:49,070 --> 00:25:50,630
0,240 240,450 450,930 930,1170 1170,1560
{read-only -} transactions can't block

767
00:25:50,630 --> 00:25:51,960
0,150 150,330 330,1080
{read-write -} transactions,|

768
00:25:52,370 --> 00:25:54,980
0,420 420,900 900,1320 1470,2130 2400,2610
{} and no no {two-phase

769
00:25:54,980 --> 00:25:57,350
0,240 240,630 1920,2130 2130,2220 2220,2370
-} commit| and so that

770
00:25:57,350 --> 00:25:58,520
0,180 180,450 450,630 630,870 870,1170
means also no {wide-area -}

771
00:25:58,520 --> 00:26:00,920
0,480 480,1110 1230,1650 1650,2100 2100,2400
communication necessary| and so {}

772
00:26:00,920 --> 00:26:02,180
0,240 240,330 330,540 540,630 630,1260
that the reads can definitely

773
00:26:02,180 --> 00:26:03,830
0,630 630,810 810,840 840,1110 1110,1650
execute from a local replica.|

774
00:26:05,320 --> 00:26:06,910
0,660 900,1110 1110,1320 1320,1470 1470,1590
And {you,know} also see of

775
00:26:06,910 --> 00:26:08,260
0,420 420,510 510,630 630,1170 1170,1350
course you know this is

776
00:26:08,260 --> 00:26:09,130
0,240 240,420 420,570 570,600 600,870
the read from a local

777
00:26:09,130 --> 00:26:10,960
0,420 420,900 900,1380 1380,1560 1560,1830
shards,| {} the the real

778
00:26:10,960 --> 00:26:12,430
0,420 420,780 780,1080 1080,1260 1260,1470
challenge here is like how

779
00:26:12,430 --> 00:26:15,220
0,210 210,510 510,720 720,1380
to still get consistency

780
00:26:15,690 --> 00:26:17,520
0,660 660,810 810,1500
or {you,know} serializability,|

781
00:26:18,010 --> 00:26:19,480
0,450 660,840 840,1170 1170,1230 1230,1470
{} {but,it's} important to point

782
00:26:19,480 --> 00:26:20,740
0,390 390,480 480,930 960,1140 1140,1260
out| you know, but for

783
00:26:20,740 --> 00:26:22,960
0,120 120,570 570,1260 1260,1830 1830,2220
a moment {you,know} assume| that

784
00:26:22,960 --> 00:26:23,530
0,90 90,210 210,390 390,450 450,570
we know how to do

785
00:26:23,530 --> 00:26:24,460
0,300 300,510 510,600 600,780 780,930
this, {} you know we

786
00:26:24,460 --> 00:26:26,620
0,300 690,1350 1350,1560 1560,1710 1710,2160
could,| then reading from only

787
00:26:26,650 --> 00:26:29,410
0,840 840,1380 1620,2220 2220,2580 2580,2760
local shard, {} holding no

788
00:26:29,410 --> 00:26:31,270
0,600 630,900 900,1110 1110,1530 1530,1860
locks, not doing two-phase commit|

789
00:26:31,270 --> 00:26:32,650
0,210 210,540 540,750 750,810 810,1380
means that all the communication

790
00:26:32,650 --> 00:26:34,390
0,90 90,420 420,900 1050,1470 1470,1740
is local within {} within

791
00:26:34,390 --> 00:26:36,670
0,180 180,510 510,750 750,1200 1590,2280
that particular data center| and

792
00:26:36,850 --> 00:26:37,780
0,360 360,480 480,600 600,660 660,930
{} it can be very

793
00:26:37,780 --> 00:26:38,980
0,450 450,720 720,900 900,1020 1020,1200
fast,| then if you look

794
00:26:38,980 --> 00:26:40,600
0,90 90,240 240,600 810,1290 1320,1620
at the end in table

795
00:26:40,600 --> 00:26:41,880
0,210 210,300 300,870
3 and 6

796
00:26:42,220 --> 00:26:44,340
0,180 180,240 240,870
in the paper,|

797
00:26:45,260 --> 00:26:46,940
0,300 300,450 450,810 810,1170 1170,1680
{} you basically see that,|

798
00:26:46,970 --> 00:26:48,740
0,630 660,1320 1320,1380 1380,1560 1560,1770
{} basically you know {read-only

799
00:26:48,740 --> 00:26:53,450
0,330 330,1200 3330,3900 3990,4410 4410,4710
-} transactions are ten times

800
00:26:53,450 --> 00:26:54,380
0,630
faster

801
00:26:54,640 --> 00:26:57,280
0,480 480,600 600,1560 1710,1920 1920,2640
than read-write transactions,| read-write transactions

802
00:26:57,280 --> 00:26:58,000
0,150 150,240 240,330 330,660 660,720
are in the order of

803
00:26:58,000 --> 00:26:59,710
0,330 330,420 420,1170 1290,1560 1560,1710
hundreds of milliseconds,| which sort

804
00:26:59,710 --> 00:27:00,880
0,60 60,240 240,600 600,1080 1080,1170
of makes sense,| because they

805
00:27:00,880 --> 00:27:02,950
0,180 180,480 780,1080 1080,1830 1830,2070
have to {} communicate long

806
00:27:02,950 --> 00:27:05,200
0,660 900,1440 1440,1890 1890,2040 2040,2250
distance| {} and but {read-only

807
00:27:05,200 --> 00:27:06,280
0,210 210,690 690,840 840,900 900,1080
-} transactions on a new

808
00:27:06,280 --> 00:27:09,190
0,330 330,690 990,1830 2370,2790 2790,2910
order of a 5 to

809
00:27:09,190 --> 00:27:10,260
0,180 180,960
10 milliseconds.|

810
00:27:12,940 --> 00:27:14,560
0,240 240,420 420,660 660,1290 1320,1620
Okay, so the key challenge

811
00:27:14,560 --> 00:27:15,340
0,60 60,300 300,390 390,660 660,780
of course is always going

812
00:27:15,340 --> 00:27:17,080
0,60 60,450 480,930 930,1170 1170,1740
to be| {} we've executed

813
00:27:17,080 --> 00:27:18,700
0,330 330,960 990,1290 1290,1440 1440,1620
local replica, how to get

814
00:27:18,700 --> 00:27:20,200
0,870
correctness.|

815
00:27:21,240 --> 00:27:21,840
0,180 180,300 300,360 360,540 540,600
So let me talk a

816
00:27:21,840 --> 00:27:22,860
0,210 210,360 360,630 630,750 750,1020
little bit about it,| because

817
00:27:22,860 --> 00:27:25,740
0,240 240,840 840,1410 1860,2490 2490,2880
it's slightly different than what

818
00:27:25,740 --> 00:27:27,540
0,120 120,300 300,900 1050,1620 1620,1800
we've seen before,| {} so

819
00:27:27,540 --> 00:27:28,920
0,360 360,570 570,810 810,1110 1110,1380
correctness means two things here,|

820
00:27:28,920 --> 00:27:30,420
0,480 510,630 630,750 750,930 930,1500
one you know that transactions

821
00:27:30,420 --> 00:27:31,840
0,150 150,720
are serializable,|

822
00:27:32,860 --> 00:27:34,120
0,180 180,300 300,600 600,1110 1110,1260
so they must execute in

823
00:27:34,120 --> 00:27:35,800
0,270 270,630 630,1200 1380,1590 1590,1680
some serial order,| so if

824
00:27:35,800 --> 00:27:36,670
0,90 90,270 270,510 510,750 750,870
you think about it,| we

825
00:27:36,670 --> 00:27:38,080
0,150 150,240 240,450 450,690 690,1410
have a {read-write -} transaction,|

826
00:27:39,220 --> 00:27:40,750
0,360 360,810 840,1110 1110,1440 1440,1530
{} we, {} and we

827
00:27:40,750 --> 00:27:42,130
0,90 90,330 330,510 510,750 750,1380
have another {read-write -} transaction,|

828
00:27:42,550 --> 00:27:43,420
0,450 450,540 540,630 630,660 660,870
then we have a {read-only

829
00:27:43,420 --> 00:27:45,580
0,270 270,930 1170,1530 1530,1740 1740,2160
-} transaction,| {you,know,the,read-only -} transaction

830
00:27:45,580 --> 00:27:46,390
0,150 150,210 210,360 360,420 420,810
has to sort of fit

831
00:27:46,420 --> 00:27:47,890
0,450 450,570 570,1020 1020,1230 1230,1470
between the two {read-write -}

832
00:27:47,890 --> 00:27:50,170
0,720 960,1380 1380,1560 1560,1770 1770,2280
transactions| and {read-only -} transaction

833
00:27:50,170 --> 00:27:52,630
0,210 210,450 450,1110 1200,1740 1740,2460
should not observe some part

834
00:27:52,990 --> 00:27:54,700
0,420 420,750 750,1320 1350,1530 1530,1710
{} of the {read-write -}

835
00:27:54,700 --> 00:27:55,900
0,480 480,750 750,870 870,1050 1050,1200
transaction,| so the {read-write -}

836
00:27:55,900 --> 00:27:57,430
0,510 510,930 930,1290 1290,1440 1440,1530
transactions {does,multiple} writes like the

837
00:27:57,430 --> 00:27:58,600
0,240 240,600
first one,|

838
00:27:58,800 --> 00:28:00,480
0,570 570,630 630,810 810,1020 1020,1680
then the {read-only -} transaction

839
00:28:00,480 --> 00:28:01,530
0,180 180,420 420,600 600,810 810,1050
{you,know} see all those writes

840
00:28:01,530 --> 00:28:02,420
0,120 120,300 300,360 360,570
with none of them,|

841
00:28:03,190 --> 00:28:04,180
0,360 360,480 480,810 810,930 930,990
{} and similarly for the

842
00:28:04,180 --> 00:28:05,560
0,180 180,300 300,660 660,930 930,1380
one that actually is {past,them}.|

843
00:28:05,800 --> 00:28:08,740
0,690 1140,1350 1350,1440 1440,2460 2460,2940
Okay?| So the second, this

844
00:28:08,740 --> 00:28:09,580
0,120 120,180 180,570 570,720 720,840
is a standard thing that

845
00:28:09,580 --> 00:28:11,440
0,90 90,330 330,720 720,1680 1680,1860
we talked about last week,

846
00:28:11,440 --> 00:28:13,330
0,150 150,660 660,780 780,1170 1380,1890
{serializability -}| and then would

847
00:28:13,330 --> 00:28:14,440
0,60 60,240 240,330 330,540 540,1110
they go for something stronger?|

848
00:28:14,950 --> 00:28:16,270
0,180 180,360 360,480 480,900 900,1320
And what they call external

849
00:28:16,270 --> 00:28:17,520
0,840
consistency,|

850
00:28:24,900 --> 00:28:26,970
0,570 570,930 930,1500 1500,1830 1830,2070
and external consistency means that

851
00:28:26,970 --> 00:28:28,560
0,330 330,450 450,1200
if a transaction

852
00:28:30,250 --> 00:28:33,370
0,690 780,1530 1560,2040 2040,2520 2520,3120
2 start after transaction 1

853
00:28:33,520 --> 00:28:34,940
0,360 360,930
has committed,|

854
00:28:35,820 --> 00:28:37,320
0,420 420,1020 1050,1140 1140,1260 1260,1500
{} then you know {t2

855
00:28:37,320 --> 00:28:38,420
0,540
-}

856
00:28:38,660 --> 00:28:40,120
0,510 510,1050
must see

857
00:28:41,720 --> 00:28:43,960
0,240 240,990 1440,2010
{t1's -} write.|

858
00:28:48,250 --> 00:28:49,540
0,270 270,780 780,900 900,1170 1170,1290
So we'll go back into

859
00:28:49,540 --> 00:28:50,920
0,150 150,480 480,930 930,1110 1110,1380
this previous picture,| like if

860
00:28:50,920 --> 00:28:52,810
0,210 210,390 390,660 660,1290 1710,1890
{} {read-only -} transaction, this

861
00:28:52,810 --> 00:28:55,930
0,420 870,1380 1380,2160 2190,2700 2700,3120
one started after { -}

862
00:28:55,930 --> 00:28:57,670
0,120 120,330 330,750 750,1260 1380,1740
the first transaction committed,| then

863
00:28:57,670 --> 00:28:59,020
0,150 150,330 330,540 540,1020 1020,1350
is {read-only -} transaction must

864
00:28:59,020 --> 00:29:01,960
0,480 540,1080 1080,1740 1770,2280 2790,2940
see {} the reads the

865
00:29:01,960 --> 00:29:03,610
0,330 330,600 600,840 840,1200 1230,1650
writes of that {} transaction

866
00:29:03,610 --> 00:29:04,760
0,390
t1,|

867
00:29:05,080 --> 00:29:07,570
0,570 840,1380 1740,2250 2250,2370 2370,2490
and, {} and so the

868
00:29:07,570 --> 00:29:09,400
0,1050 1050,1140 1350,1530 1530,1650 1650,1830
idea is if you think

869
00:29:09,400 --> 00:29:11,440
0,210 210,600 630,1380 1380,1530 1530,2040
about this,| basically this sort

870
00:29:11,440 --> 00:29:13,330
0,150 150,510 510,1140 1140,1530 1530,1890
of external consistency means {serializability

871
00:29:13,330 --> 00:29:15,880
0,720 960,1200 1200,1380 1380,1890 1890,2550
-} plus this real-time requirement|

872
00:29:16,270 --> 00:29:17,080
0,150 150,210 210,570 570,630 630,810
and in fact you know

873
00:29:17,080 --> 00:29:19,180
0,360 360,510 510,810 810,1470 1590,2100
it is very similar to

874
00:29:19,180 --> 00:29:20,360
0,330 330,510 510,990
{linearizability - -}.|

875
00:29:28,560 --> 00:29:31,500
0,630 1380,2100 2100,2670 2670,2760 2760,2940
{ -} Except you know

876
00:29:31,500 --> 00:29:34,020
0,690 750,1050 1050,1260 1260,1530 1950,2520
the one way to contrast

877
00:29:34,020 --> 00:29:36,540
0,390 390,1200 1200,1710 1710,1830 1830,2520
external consistency {} for transactions,|

878
00:29:36,900 --> 00:29:38,340
0,240 240,510 510,1020 1020,1170 1170,1440
with {linearizability -} is that

879
00:29:38,340 --> 00:29:40,290
0,510 510,870 870,1230 1230,1500 1500,1950
{} external consistency really transaction

880
00:29:40,290 --> 00:29:41,970
0,240 240,810 1110,1410 1410,1470 1470,1680
level property| and the way

881
00:29:41,970 --> 00:29:43,140
0,330 330,480 480,750 750,930 930,1170
we've been talking about {linearizability

882
00:29:43,140 --> 00:29:44,640
0,120 120,480 480,690 690,1230 1350,1500
- -} so far| and

883
00:29:44,640 --> 00:29:45,660
0,240 240,390 390,600 600,840 840,1020
always has been sort of

884
00:29:45,660 --> 00:29:47,120
0,540 540,810 810,1350
individual {reads,and} writes.|

885
00:29:47,410 --> 00:29:49,600
0,690 1080,1560 1590,1830 1830,2130 2160,2190
{} And {} but {

886
00:29:49,600 --> 00:29:51,160
0,480 600,750 750,1080 1080,1500 1500,1560
-} {to,the} first order,| you

887
00:29:51,160 --> 00:29:51,940
0,90 90,210 210,420 420,600 600,780
know I think you should

888
00:29:51,940 --> 00:29:53,230
0,180 180,510 510,960 960,1020 1020,1290
think about exactly the same

889
00:29:53,230 --> 00:29:53,720
0,180
way.|

890
00:29:54,340 --> 00:29:57,010
0,510 660,1290 1290,1410 1410,2100 2100,2670
And like {} linearizability, external

891
00:29:57,010 --> 00:29:58,630
0,420 420,690 690,990 990,1110 1110,1620
consistency is pleasant for programs,|

892
00:29:59,290 --> 00:30:02,830
0,2010 2010,2280 2280,2550 2550,3090 3090,3540
{} is very strong consistency

893
00:30:02,830 --> 00:30:04,500
0,90 90,810 840,1410
to require property.|

894
00:30:06,200 --> 00:30:07,550
0,270 270,420 420,750 750,990 990,1350
Okay, any questions about the

895
00:30:07,580 --> 00:30:08,900
0,420 420,900 900,1110 1110,1230 1230,1320
correctness definition there or the

896
00:30:08,900 --> 00:30:09,720
0,540
correctness

897
00:30:10,100 --> 00:30:12,140
0,690 690,900 900,1260 1260,1620 1620,2040
goal that the Spanner has.|

898
00:30:17,900 --> 00:30:18,820
0,540
Okay.|

899
00:30:18,980 --> 00:30:20,150
0,330 330,570 570,720 720,930 930,1170
Okay, let's then talk about

900
00:30:20,150 --> 00:30:21,530
0,180 180,450 450,750 750,1230 1230,1380
how to actually achieve this

901
00:30:21,530 --> 00:30:23,300
0,450 450,660 660,840 840,1050 1050,1770
correctness for {read-only -} transactions,|

902
00:30:23,780 --> 00:30:25,100
0,360 360,600 600,780 780,930 930,1320
{} and let me start

903
00:30:25,100 --> 00:30:27,020
0,420 420,750 750,1410 1410,1680 1680,1920
out by explaining that plan

904
00:30:27,020 --> 00:30:28,670
0,120 120,330 330,630 630,1050 1470,1650
that actually doesn't work| and

905
00:30:28,670 --> 00:30:29,990
0,660 660,900 900,1050 1050,1110 1110,1320
then we're going to talk

906
00:30:29,990 --> 00:30:32,180
0,300 300,630 630,900 900,1230
about a better plan.|

907
00:30:33,520 --> 00:30:34,780
0,150 150,210 210,450 450,690 690,1260
So the bad plan is,|

908
00:30:34,840 --> 00:30:37,600
0,660 660,780 780,870 870,1410 2520,2760
we're going to read the

909
00:30:37,600 --> 00:30:38,890
0,390 390,600 600,750 750,990 990,1290
range that we read always

910
00:30:38,890 --> 00:30:40,520
0,60 60,360 360,600 600,990
the latest committed value,|

911
00:30:43,550 --> 00:30:45,880
0,360 360,870 900,1320 1320,1950
that seems about write,

912
00:30:46,520 --> 00:30:47,690
0,420 510,810 810,930 930,1110 1110,1170
right,| because we have to

913
00:30:47,690 --> 00:30:49,340
0,420 420,630 630,1020 1020,1410 1440,1650
arrange that if {} {t2

914
00:30:49,340 --> 00:30:51,560
0,300 300,780 780,1440 1470,1860 1860,2220
-} starts after t1 committed,|

915
00:30:51,560 --> 00:30:52,550
0,300 300,540 540,690 690,780 780,990
{we'll,see}, you have to see

916
00:30:52,550 --> 00:30:54,200
0,390 390,720 720,1050 1080,1410 1410,1650
it's right,| so why not

917
00:30:54,200 --> 00:30:55,340
0,150 150,240 240,540 540,780 780,1140
read the latest committed value,|

918
00:30:55,340 --> 00:30:56,360
0,90 90,270 270,450 450,750 750,1020
then we should be maybe

919
00:30:56,360 --> 00:30:57,240
0,240 240,510
we're good.|

920
00:30:58,270 --> 00:30:59,860
0,180 180,870 870,990 990,1050 1080,1590
So here is the,| the

921
00:31:00,220 --> 00:31:01,570
0,420 420,630 630,690 690,1020 1020,1350
problem case of course it

922
00:31:01,570 --> 00:31:02,820
0,270 270,510 510,960
doesn't actually work,|

923
00:31:03,120 --> 00:31:05,850
0,690 690,870 870,1410 1740,2310 2310,2730
so {t1 -} {namely,t1 -}

924
00:31:06,000 --> 00:31:08,020
0,300 300,600 600,1080 1140,1650
does a write of

925
00:31:08,960 --> 00:31:10,970
0,360 360,570 570,930 930,1260 1290,2010
x, does write of y,|

926
00:31:11,030 --> 00:31:13,220
0,630 630,780 780,1320 1320,1950
{} as transfer commits,|

927
00:31:13,670 --> 00:31:15,650
0,690 1050,1170 1170,1380 1380,1590 1590,1980
then you know we have

928
00:31:15,650 --> 00:31:17,420
0,360 360,840 840,1440 1440,1560 1560,1770
another t transaction,| we have

929
00:31:17,420 --> 00:31:18,950
0,600 630,840 840,1200 1200,1350 1350,1530
transaction {t3 -}| or {t3

930
00:31:18,950 --> 00:31:19,820
0,240 240,360 360,480 480,660 660,870
-} is the {read-only -}

931
00:31:19,820 --> 00:31:21,350
0,600 630,930 930,1230 1230,1410 1410,1530
action,| it actually does a

932
00:31:21,350 --> 00:31:23,210
0,180 180,270 270,870 1500,1710 1710,1860
read of x,| so this

933
00:31:23,210 --> 00:31:24,830
0,60 60,300 300,510 510,1080 1350,1620
is {sort,of} real time| and

934
00:31:24,830 --> 00:31:27,710
0,390 420,1260 1290,1680 1680,2310 2550,2880
then after {t2 -},| then

935
00:31:27,710 --> 00:31:29,150
0,390 390,540 540,1020 1020,1260 1260,1440
after {t1 -} {t3 -}

936
00:31:29,150 --> 00:31:31,850
0,330 330,930 930,1200 1200,1740 2130,2700
starts,| {t2 -} runs {}

937
00:31:31,970 --> 00:31:33,350
0,210 210,390 390,960 960,1290 1290,1380
{runs -} quickly,| [] the

938
00:31:33,350 --> 00:31:34,640
0,240 240,420 420,900 900,990 990,1290
write of x, the write

939
00:31:34,640 --> 00:31:37,400
0,630 870,1530 1800,1980 1980,2490 2490,2760
{of,y},| commits and then {you,know}

940
00:31:37,400 --> 00:31:37,970
0,120 120,270 270,390 390,420 420,570
{t3 -} got a little

941
00:31:37,970 --> 00:31:39,080
0,90 90,480 480,600 600,780 780,1110
bit delayed| and then actually

942
00:31:39,080 --> 00:31:40,400
0,240 240,540 540,870 870,1170 1170,1320
does {secondary -} read {}

943
00:31:40,400 --> 00:31:41,100
0,210 210,270 270,600
read of y,|

944
00:31:42,510 --> 00:31:45,120
0,570 990,1920 1920,2010 2010,2400 2400,2610
{} sort of time you

945
00:31:45,120 --> 00:31:46,170
0,150 150,270 270,660 660,870 870,1050
know as usual going that

946
00:31:46,170 --> 00:31:47,020
0,240
way.|

947
00:31:50,100 --> 00:31:53,880
0,720 870,1260 1260,1830 1830,2220 2220,3780
{} And {you,know,if,you're} following a

948
00:31:54,240 --> 00:31:55,710
0,690 690,870 870,1140 1140,1380 1380,1470
release the latest {committed -}

949
00:31:55,710 --> 00:31:56,940
0,270 270,450 450,930 930,1170 1170,1230
{value -},| then what is

950
00:31:56,940 --> 00:31:58,200
0,210 210,390 390,540 540,630 630,1260
this really going to return,|

951
00:31:58,470 --> 00:31:59,670
0,210 210,330 330,390 390,930 930,1200
it's going to return the

952
00:31:59,730 --> 00:32:01,470
0,600 600,870 870,1080 1080,1500 1500,1740
value from this transaction {t1

953
00:32:01,470 --> 00:32:02,120
0,390
-},|

954
00:32:02,360 --> 00:32:04,610
0,600 600,960 960,1350 1350,1650 1650,2250
and this read {is,going,to} return,|

955
00:32:05,210 --> 00:32:06,470
0,390 390,750 750,870 870,1170 1170,1260
the value from y and

956
00:32:06,470 --> 00:32:07,580
0,150 150,600 600,870 870,960 960,1110
that objection,| because you know

957
00:32:07,580 --> 00:32:09,230
0,240 240,480 480,720 720,1170 1170,1650
that's why this commited value.|

958
00:32:09,910 --> 00:32:11,260
0,420 420,630 630,750 750,990 990,1350
And that would be wrong,

959
00:32:11,290 --> 00:32:12,020
0,390
right,|

960
00:32:19,360 --> 00:32:20,440
0,390 390,630 630,780 780,1020 1020,1080
because now we're actually in

961
00:32:20,440 --> 00:32:21,610
0,30 30,540 540,660 660,1110 1110,1170
a situation where basically you

962
00:32:21,610 --> 00:32:23,230
0,180 180,390 390,810 810,1500 1500,1620
know {t3 -} observes the

963
00:32:23,230 --> 00:32:25,000
0,450 450,600 600,840 840,1380 1410,1770
writes you know from {}

964
00:32:25,000 --> 00:32:26,830
0,270 270,1020 1080,1320 1320,1680 1680,1830
different transactions| and not get

965
00:32:26,830 --> 00:32:28,140
0,60 60,480 480,930
a consistent [].|

966
00:32:29,620 --> 00:32:31,690
0,510 510,1410 1500,1680 1680,1860 1860,2070
So, {} so this rule

967
00:32:31,690 --> 00:32:32,880
0,90 90,300 300,480 480,1050
is not good enough,|

968
00:32:33,080 --> 00:32:36,320
0,600 600,1260 1500,2190 2220,2580 2580,3240
{} and {} to avoid

969
00:32:36,470 --> 00:32:37,940
0,180 180,510 510,660 660,1050 1050,1470
this problem and not use

970
00:32:37,940 --> 00:32:39,770
0,150 150,390 390,810 960,1440 1470,1830
this bad plan,| {} Spanner

971
00:32:39,770 --> 00:32:41,140
0,270 270,360 360,660 660,1110
uses a different plan.|

972
00:32:41,480 --> 00:32:43,850
0,540 540,870 870,1620 1680,2220 2220,2370
And that's plan {} is

973
00:32:43,850 --> 00:32:47,280
0,240 240,840 840,1470
called snapshot isolation,|

974
00:32:53,520 --> 00:32:55,020
0,270 270,510 510,570 570,570 570,1500
this actually is a standard

975
00:32:55,020 --> 00:33:00,390
0,780 780,1560 1650,2640 2640,3900 4500,5370
database idea,| {} and mostly

976
00:33:00,390 --> 00:33:02,580
0,240 240,330 330,720 720,1500 1620,2190
sort of local databases {}|

977
00:33:02,580 --> 00:33:04,260
0,480 480,840 840,1230 1230,1590 1590,1680
and not actually across the

978
00:33:04,260 --> 00:33:05,020
0,180 180,540
{wide-area -}.|

979
00:33:05,820 --> 00:33:06,810
0,120 120,270 270,510 510,690 690,990
And so we'll talk about

980
00:33:06,810 --> 00:33:10,080
0,180 180,1380 1830,2580 2580,2880 2880,3270
in {the,sort,of} {white-area -} aspect

981
00:33:10,080 --> 00:33:11,190
0,120 120,150 150,480 480,960 960,1110
in a second,| but just

982
00:33:11,190 --> 00:33:12,240
0,150 150,240 240,450 450,750 750,1050
let me first explain what's

983
00:33:12,240 --> 00:33:13,640
0,300 300,870 870,1170
snapshot isolation is.|

984
00:33:14,230 --> 00:33:15,100
0,270 270,360 360,480 480,720 720,870
And so what {snapshot -}

985
00:33:15,100 --> 00:33:16,810
0,420 420,690 690,1290 1350,1590 1590,1710
isolation does is,| we're going

986
00:33:16,810 --> 00:33:18,250
0,60 60,540 540,630 630,900 900,1440
to assign a {timestamp -}

987
00:33:21,930 --> 00:33:24,000
0,780 780,1140 1140,1650
to a transaction,|

988
00:33:26,930 --> 00:33:27,980
0,450 450,540 540,660 660,900 900,1050
and you know there's two

989
00:33:27,980 --> 00:33:29,360
0,240 240,540 540,780 780,1050 1050,1380
different points,| we're gonna assign

990
00:33:29,360 --> 00:33:33,020
0,180 180,1080 1680,2670 2670,3150 3210,3660
this {} {timestamps -} for

991
00:33:33,020 --> 00:33:34,760
0,210 210,390 390,1230
{read-write -} transactions,|

992
00:33:35,420 --> 00:33:36,350
0,210 210,360 360,720 720,780 780,930
it's gonna be you know

993
00:33:36,350 --> 00:33:37,880
0,210 210,540 630,1050 1050,1110 1110,1530
the commit started to commit.|

994
00:33:40,690 --> 00:33:42,610
0,330 330,540 540,750 750,990 990,1920
And for {read-only -} transactions,|

995
00:33:43,270 --> 00:33:44,320
0,300 300,630 630,750 750,810 810,1050
it is going to be

996
00:33:44,320 --> 00:33:46,030
0,330 330,810 810,900 900,990 990,1710
the start of the transactions.|

997
00:33:48,900 --> 00:33:50,130
0,210 210,720 720,720 720,1110 1110,1230
And then {} we're gonna

998
00:33:50,130 --> 00:33:51,240
0,780
execute

999
00:33:53,160 --> 00:33:54,700
0,270 270,1080
all operations,|

1000
00:33:55,920 --> 00:33:58,860
0,1170 1170,1830 1890,2220 2220,2490 2490,2940
transaction in {timestamp -} order.|

1001
00:34:01,950 --> 00:34:02,850
0,150 150,390 390,510 510,840 840,900
{} I will explain in

1002
00:34:02,850 --> 00:34:03,870
0,30 30,330 330,570 570,930 930,1020
a second, but whatever I

1003
00:34:03,870 --> 00:34:04,880
0,330 330,690
mean that.|

1004
00:34:05,180 --> 00:34:07,220
0,630 720,1050 1050,1290 1290,1530 1530,2040
{} {And,be} able to execute

1005
00:34:07,220 --> 00:34:08,840
0,150 150,210 210,630 630,1020 1020,1620
all the operation {in,timestamp} order,

1006
00:34:09,080 --> 00:34:10,540
0,270 270,960
{you,know,each} replica,|

1007
00:34:11,750 --> 00:34:13,100
0,210 210,300 300,570 570,900 900,1350
this is store one value

1008
00:34:13,100 --> 00:34:15,140
0,180 180,240 240,660 660,1140 1530,2040
for a particular key, {}|

1009
00:34:15,560 --> 00:34:18,170
0,540 540,810 810,1440 1470,1920 1920,2610
replica actually stores multiple values

1010
00:34:18,500 --> 00:34:20,330
0,360 360,630 630,1110 1110,1680 1680,1830
for key namely with their

1011
00:34:20,330 --> 00:34:21,240
0,510
timestamp.|

1012
00:34:34,670 --> 00:34:35,780
0,210 210,270 270,780 780,1020 1020,1110
So, for example at a

1013
00:34:35,780 --> 00:34:37,190
0,330 330,720 720,810 810,930 930,1410
particular replica,| we can ask,

1014
00:34:37,190 --> 00:34:38,510
0,300 300,510 510,900 900,990 990,1320
please give me the value

1015
00:34:38,510 --> 00:34:39,920
0,120 120,480 480,690 690,1050 1050,1410
of x at time 10|

1016
00:34:39,980 --> 00:34:41,360
0,390 390,540 540,840 840,930 930,1380
or give me the value

1017
00:34:41,360 --> 00:34:44,390
0,450 630,930 930,1320 1350,2370 2550,3030
of {timestamp -} {x,at} 20|

1018
00:34:44,840 --> 00:34:46,130
0,210 210,630 690,1110 1110,1230 1230,1290
and so sometimes this is

1019
00:34:46,130 --> 00:34:48,710
0,240 240,630 630,1260 1680,2130 2130,2580
called multi version {} {databases

1020
00:34:48,710 --> 00:34:50,030
0,90 90,210 210,420 420,750 750,1320
-} or multi version storage,|

1021
00:34:50,030 --> 00:34:51,710
0,120 120,360 360,780 780,1110 1110,1680
you know {what,basically} keep for

1022
00:34:51,710 --> 00:34:53,090
0,240 240,720 720,840 840,1140 1140,1380
every update,| you basically keep

1023
00:34:53,090 --> 00:34:54,680
0,30 30,570 870,1140 1140,1350 1350,1590
a version of the data

1024
00:34:54,680 --> 00:34:55,520
0,270 270,420 420,600 600,720 720,840
item,| so you can go

1025
00:34:55,520 --> 00:34:56,400
0,270 270,360 360,720
back in time.|

1026
00:34:58,340 --> 00:35:00,020
0,630 630,750 750,900 900,1110 1110,1680
And, {} so this fixes

1027
00:35:00,050 --> 00:35:01,850
0,120 120,270 270,1140 1260,1650 1650,1800
you know the problem that

1028
00:35:01,850 --> 00:35:03,050
0,330 360,810 810,870 870,960 960,1200
I showed in the first

1029
00:35:03,050 --> 00:35:04,250
0,300 300,570 570,870 870,1080 1080,1200
case,| because basically what's going

1030
00:35:04,250 --> 00:35:05,210
0,60 60,480 480,690 690,870 870,960
to happen,| let's look at

1031
00:35:05,210 --> 00:35:06,770
0,90 90,300 300,810 810,1230 1350,1560
the three transaction again,| so

1032
00:35:06,770 --> 00:35:08,180
0,90 90,300 300,510 510,1020 1290,1410
we got {T1 -}, we've

1033
00:35:08,180 --> 00:35:09,920
0,180 180,420 420,990 1080,1320 1320,1740
got {T2 -}, we got

1034
00:35:11,020 --> 00:35:13,390
0,270 270,840 1170,1650 1650,2190 2190,2370
{T3 -},| {} T1 just

1035
00:35:13,390 --> 00:35:14,920
0,330 330,960 1050,1230 1230,1320 1320,1530
write one,| you know there's

1036
00:35:14,920 --> 00:35:16,990
0,150 150,480 810,1410 1620,1980 1980,2070
a write, {} write of

1037
00:35:16,990 --> 00:35:19,060
0,360 360,630 630,1140 1290,1530 1530,2070
x, {write,of} y,| let's commit,|

1038
00:35:19,300 --> 00:35:20,740
0,480 480,750 750,870 870,1140 1140,1440
let's say the commit actually

1039
00:35:20,740 --> 00:35:23,290
0,510 510,840 840,960 960,2100 2130,2550
happens at you know 10,|

1040
00:35:24,220 --> 00:35:26,200
0,270 270,450 450,1200 1200,1620 1620,1980
so this transaction basically runs

1041
00:35:26,200 --> 00:35:27,420
0,90 90,330 330,1020
at timestamp 10,|

1042
00:35:27,970 --> 00:35:30,160
0,720 840,1560 1590,1860 1860,2070 2070,2190
{} then you know at

1043
00:35:30,160 --> 00:35:31,280
0,150 150,690
some point,|

1044
00:35:31,500 --> 00:35:32,100
0,120 120,240 240,300 300,450 450,600
we're going to get our

1045
00:35:32,100 --> 00:35:33,720
0,210 210,870 930,1290 1290,1470 1470,1620
{read,of} x,| we'll talk about

1046
00:35:33,720 --> 00:35:35,370
0,180 180,270 270,330 330,870 1230,1650
that in a second, {}|

1047
00:35:35,370 --> 00:35:36,630
0,300 300,690 690,870 870,1170 1170,1260
and here we have this

1048
00:35:36,630 --> 00:35:38,400
0,210 210,840 840,1530 1530,1680 1680,1770
other transaction,| we get the

1049
00:35:38,400 --> 00:35:39,780
0,330 330,420 420,1050
write of y,|

1050
00:35:39,990 --> 00:35:41,760
0,450 450,840 930,1470 1470,1530 1530,1770
the write sort of write

1051
00:35:41,760 --> 00:35:43,710
0,300 300,1050 1050,1320 1320,1830 1860,1950
{} x, write y, the

1052
00:35:43,710 --> 00:35:45,480
0,540 810,1020 1020,1140 1140,1350 1350,1770
commit,| let's say this transaction

1053
00:35:45,480 --> 00:35:46,980
0,390 390,570 570,780 780,990 990,1500
commit at {timestamp -} 20,|

1054
00:35:47,580 --> 00:35:50,460
0,540 540,1020
{just,run} basically

1055
00:35:50,700 --> 00:35:52,590
0,510 510,990 990,1590 1590,1680 1680,1890
{} {at -} that {timestamp

1056
00:35:52,590 --> 00:35:53,820
0,390 750,930 930,1050 1050,1140 1140,1230
-}| and then we have

1057
00:35:53,820 --> 00:35:54,570
0,90 90,240 240,300 300,600 600,750
to read of x| and

1058
00:35:54,570 --> 00:35:55,500
0,150 150,240 240,330 330,540 540,930
we have the {read,of} y,|

1059
00:35:56,250 --> 00:35:57,030
0,300 300,480 480,540 540,690 690,780
now when the read of

1060
00:35:57,030 --> 00:35:58,980
0,330 330,1110 1440,1770 1770,1890 1890,1950
x happens,| it's going to

1061
00:35:58,980 --> 00:36:00,210
0,120 120,420 420,510 510,720 720,1230
be assigned to {timestamp -}

1062
00:36:00,360 --> 00:36:02,250
0,450 450,840 870,1170 1170,1290 1290,1890
starting type type of transaction,|

1063
00:36:02,280 --> 00:36:04,290
0,360 600,1050 1050,1500 1500,1770 1770,2010
so starting times,| let's say

1064
00:36:04,290 --> 00:36:05,520
0,240 240,570 570,840 840,960 960,1230
the starting time of this

1065
00:36:05,520 --> 00:36:07,260
0,390 390,870 870,990 990,1560
{} transaction is 15,|

1066
00:36:07,670 --> 00:36:09,890
0,330 330,600 600,1140 1260,1860 1860,2220
so {T2 -} runs at

1067
00:36:10,670 --> 00:36:12,100
0,840
15,|

1068
00:36:12,940 --> 00:36:13,870
0,150 150,270 270,540 540,780 780,930
and so when the read

1069
00:36:13,870 --> 00:36:16,000
0,90 90,450 450,690 690,1320 1530,2130
of x is executed, {}|

1070
00:36:16,000 --> 00:36:17,710
0,510 510,750 750,1260 1260,1440 1440,1710
it needs basically to read

1071
00:36:17,710 --> 00:36:20,320
0,120 120,450 450,1050 1170,2460 2460,2610
the latest value {} of

1072
00:36:20,320 --> 00:36:24,010
0,540 570,1350 1350,2550 2580,3030 3030,3690
x,| after, {} after, {}

1073
00:36:24,040 --> 00:36:26,590
0,690 690,1380 1680,2010 2010,2490 2490,2550
before 15,| {} and you

1074
00:36:26,590 --> 00:36:28,030
0,510 660,900 900,1020 1020,1320 1320,1440
know we do that you

1075
00:36:28,030 --> 00:36:29,710
0,120 120,390 420,840 840,1140 1140,1680
know the latest committed value

1076
00:36:29,710 --> 00:36:32,410
0,540 780,1440 1470,1710 1710,1890 1890,2700
for {} {timestamp -} 15,|

1077
00:36:32,410 --> 00:36:33,850
0,330 330,570 570,930 930,1350 1350,1440
{before -} timestamp 15 is

1078
00:36:33,850 --> 00:36:35,230
0,150 150,210 210,450 450,930 930,1380
going to be times the

1079
00:36:35,290 --> 00:36:37,660
0,510 600,1170 1170,1440 1440,2250
the values from {this,transaction}.|

1080
00:36:38,720 --> 00:36:40,490
0,210 210,810 810,1140 1140,1380 1410,1770
So {read,x}, reads the value

1081
00:36:40,490 --> 00:36:42,290
0,60 60,480 480,900 1260,1620 1620,1800
of transaction one,| {} but

1082
00:36:42,290 --> 00:36:43,850
0,90 90,540 540,1050 1050,1410 1410,1560
of course, {read,y} also will

1083
00:36:43,850 --> 00:36:45,110
0,450 450,540 540,630 630,900 900,1260
execute at the {timestamp -}

1084
00:36:45,260 --> 00:36:46,430
0,390 390,720 720,1020 1020,1110 1110,1170
of the start of the

1085
00:36:46,430 --> 00:36:47,660
0,600 600,810 810,930 930,1080 1080,1230
transaction,| so it's going to

1086
00:36:47,660 --> 00:36:49,070
0,270 270,930 930,1020 1020,1110 1110,1410
also {read,y} at that time

1087
00:36:49,340 --> 00:36:51,350
0,150 150,960 1320,1830 1830,1920 1920,2010
at 15| and you know

1088
00:36:51,350 --> 00:36:52,010
0,180 180,300 300,360 360,450 450,660
there's going to be only

1089
00:36:52,010 --> 00:36:54,260
0,180 180,720 720,960 990,1620 1620,2250
one value for y 15,|

1090
00:36:54,290 --> 00:36:55,760
0,540 540,750 750,930 930,1080 1080,1470
namely that is the one

1091
00:36:55,760 --> 00:36:57,650
0,480 480,780 780,1050 1050,1680 1680,1890
produced by the transaction {T1

1092
00:36:57,650 --> 00:36:59,300
0,330 330,900 900,1050 1050,1200 1200,1650
-}| and so read one,

1093
00:36:59,570 --> 00:37:01,400
0,510 570,900 900,1170 1170,1350 1350,1830
{} read y will also

1094
00:37:01,460 --> 00:37:03,710
0,750 1140,1350 1350,1830 1830,2130 2130,2250
reads from {T1 -}| and

1095
00:37:03,710 --> 00:37:05,300
0,120 120,300 300,810 1080,1230 1230,1590
so we avoid this problem

1096
00:37:05,300 --> 00:37:06,950
0,150 150,270 270,420 420,1050 1230,1650
that we had before,| where

1097
00:37:06,950 --> 00:37:09,650
0,810 840,1440 1440,1560 1560,2070 2070,2700
we read from different transactions.|

1098
00:37:10,590 --> 00:37:12,180
0,270 270,390 390,570 570,1020 1260,1590
And so this gives the

1099
00:37:12,210 --> 00:37:14,400
0,900 900,1050 1050,1350 1350,1770 1770,2190
linearizability or {} {serializability -}

1100
00:37:14,400 --> 00:37:15,990
0,150 150,420 420,690 690,1140 1380,1590
that we're looking for,| all

1101
00:37:15,990 --> 00:37:17,340
0,90 90,600 600,750 750,1230 1230,1350
the transactions are executed in

1102
00:37:17,340 --> 00:37:19,080
0,210 300,750 750,1020 1020,1320 1350,1740
a global {timestamp -} order.|

1103
00:37:22,770 --> 00:37:23,840
0,150 150,240 240,360 360,780
Does that make sense?|

1104
00:37:25,670 --> 00:37:26,450
0,150 150,450 450,540 540,630 630,780
So what you can think

1105
00:37:26,450 --> 00:37:27,590
0,240 240,330 330,480 480,750 750,1140
about is that every replica

1106
00:37:27,590 --> 00:37:30,340
0,420 420,690 690,780 780,1290
basically keeps a table,|

1107
00:37:30,700 --> 00:37:33,400
0,1350 1350,1500 1500,1710 1710,2400 2400,2700
{write,of,values} and {timestamps -}| and

1108
00:37:33,400 --> 00:37:34,570
0,390 390,570 570,720 720,960 960,1170
so we're gonna have like

1109
00:37:34,570 --> 00:37:38,560
0,570 570,1110 1380,2070 2070,2820 3600,3990
x at value 9 at

1110
00:37:38,560 --> 00:37:41,890
0,630 960,1440 1440,1950 1950,2370 2370,3330
10| and x at value

1111
00:37:41,890 --> 00:37:44,920
0,480 990,1590 1620,2340
8 at 20.|

1112
00:37:45,260 --> 00:37:46,130
0,210 210,330 330,570 570,660 660,870
And so when the read

1113
00:37:46,130 --> 00:37:47,000
0,180 180,510 510,600 600,780 780,870
comes in you know at

1114
00:37:47,000 --> 00:37:49,070
0,30 30,360 360,1140 1290,1710 1710,2070
a particular replica,| reads 15

1115
00:37:49,070 --> 00:37:49,850
0,180 180,330 330,390 390,510 510,780
comes in,| I can just

1116
00:37:49,880 --> 00:37:50,990
0,270 270,540 540,660 660,780 780,1110
pick out you know the

1117
00:37:51,050 --> 00:37:53,300
0,780 810,1500 1500,1590 1590,1710 1710,2250
latest write,| you know preceding

1118
00:37:53,300 --> 00:37:54,300
0,150 150,420 420,810
its {timestamp -}.|

1119
00:37:56,690 --> 00:37:57,560
0,240 240,330 330,480 480,540 540,870
So I have a question,|

1120
00:37:57,560 --> 00:37:58,850
0,330 330,720 720,1020 1020,1110 1110,1290
so {} when we do

1121
00:37:58,850 --> 00:38:00,350
0,270 270,510 510,1020 1080,1320 1320,1500
the read x,| let's say,

1122
00:38:00,350 --> 00:38:01,130
0,120 120,240 240,390 390,660 660,780
so let's just focus on

1123
00:38:01,130 --> 00:38:03,320
0,150 150,450 780,1380 1380,1590 1590,2190
read x,| so x itself

1124
00:38:03,350 --> 00:38:05,270
0,720 720,900 900,1110 1110,1650 1650,1920
exists on some shard,| which

1125
00:38:05,270 --> 00:38:05,900
0,480
is

1126
00:38:06,100 --> 00:38:08,020
0,600 600,690 690,780 780,1470 1500,1920
replicated on a paxos group,|

1127
00:38:08,020 --> 00:38:09,670
0,210 210,420 420,1080 1410,1560 1560,1650
which let's say you know

1128
00:38:09,670 --> 00:38:10,930
0,240 240,330 330,570 570,750 750,1260
there are like three servers

1129
00:38:10,930 --> 00:38:13,000
0,570 600,1050 1050,1290 1650,1890 1890,2070
that replicate x| and when

1130
00:38:13,000 --> 00:38:13,990
0,150 150,300 300,450 450,690 690,990
you read from x,| because

1131
00:38:13,990 --> 00:38:14,770
0,90 90,330 330,420 420,570 570,780
we want to {read-only -}

1132
00:38:14,770 --> 00:38:16,150
0,540 540,630 630,690 690,960 960,1380
transactions to be very fast,|

1133
00:38:16,150 --> 00:38:17,440
0,480 510,840 840,1050 1050,1200 1200,1290
we just read from the

1134
00:38:17,440 --> 00:38:20,050
0,660 840,1560 1620,2070 2160,2430 2430,2610
local replica,| which need not

1135
00:38:20,050 --> 00:38:22,540
0,480 480,570 570,690 690,1140 2190,2490
necessarily be the leader,| so

1136
00:38:22,540 --> 00:38:23,530
0,150 150,390 390,480 480,600 600,990
like how do we guarantee

1137
00:38:23,530 --> 00:38:24,340
0,120 120,210 210,480 510,720 720,810
that we don't read the

1138
00:38:24,340 --> 00:38:26,650
0,690 1230,1350 1350,1680 1710,2160 2160,2310
stale,| how do that {we,don't}

1139
00:38:26,650 --> 00:38:27,640
0,180 180,240 240,780
make a [].|

1140
00:38:28,190 --> 00:38:30,350
0,150 150,390 390,960 960,1500 1530,2160
You know brilliant question| and

1141
00:38:30,380 --> 00:38:32,420
0,510 870,1080 1080,1620 1620,1710 1710,2040
{} that's exactly the topic

1142
00:38:32,420 --> 00:38:33,170
0,60 60,270 270,360 360,570 570,750
I want to talk about

1143
00:38:33,170 --> 00:38:33,900
0,540
next.|

1144
00:38:34,520 --> 00:38:37,730
0,780 1410,1980 1980,2610 2610,2910 2910,3210
{} {The,problem} as you point

1145
00:38:37,730 --> 00:38:39,290
0,330 330,450 450,1260 1290,1500 1500,1560
out,| you know there's a

1146
00:38:39,290 --> 00:38:40,640
0,360 360,540 540,870 870,990 990,1350
challenge that maybe the replica

1147
00:38:40,640 --> 00:38:42,660
0,300 300,780
hasn't seen,|

1148
00:38:45,920 --> 00:38:47,630
0,210 210,300 300,930 960,1170 1170,1710
as in seeing the write

1149
00:38:47,780 --> 00:38:50,120
0,150 150,810 810,1230 1680,2010 2010,2340
to x at {timestamp -}

1150
00:38:50,120 --> 00:38:52,040
0,360 360,750
whatever 10,

1151
00:38:52,320 --> 00:38:53,220
0,480
right.|

1152
00:38:54,500 --> 00:38:56,360
0,570 780,960 960,1140 1140,1260 1260,1860
{} And so the way

1153
00:38:56,360 --> 00:38:58,730
0,750 780,1080 1080,1440 1440,1740 1740,2370
{} {you,know} this problem solved

1154
00:38:58,790 --> 00:39:01,040
0,450 450,1080 1080,1560 1590,2160 2160,2250
{} in the Spanner,| the

1155
00:39:01,040 --> 00:39:02,420
0,330 330,450 450,930 930,1200 1200,1380
solution they called something that's

1156
00:39:02,420 --> 00:39:04,060
0,390 390,570 570,900 900,1290
called {} "safe time".|

1157
00:39:09,560 --> 00:39:11,600
0,780 810,1260 1260,1620 1620,1830 1830,2040
And, {} so the way

1158
00:39:11,600 --> 00:39:13,250
0,450 450,1050 1050,1140 1140,1350 1350,1650
this result is that,| basically

1159
00:39:13,250 --> 00:39:17,000
0,810 1740,2490 2790,2970 2970,3450 3450,3750
paxos {or,raft} you know sends

1160
00:39:17,000 --> 00:39:18,380
0,240 240,840
all writes

1161
00:39:19,840 --> 00:39:21,670
0,690 690,810 810,1020 1020,1290 1290,1830
also in {timestamp -} order,|

1162
00:39:25,280 --> 00:39:27,770
0,180 180,390 390,630 630,840 2040,2490
so there's not {} {you,know,you}

1163
00:39:27,770 --> 00:39:28,850
0,120 120,240 240,690 690,780 780,1080
can think about the total

1164
00:39:28,850 --> 00:39:30,110
0,270 270,420 420,570 570,630 630,1260
order is not a counter

1165
00:39:30,110 --> 00:39:31,490
0,150 150,450 450,930 930,1020 1020,1380
as usual {for,example -} maybe

1166
00:39:31,490 --> 00:39:35,390
0,240 240,1200 1230,2130 2670,3270 3300,3900
in {} lab, {} lab

1167
00:39:35,390 --> 00:39:36,530
0,420 450,690 690,810 810,1080 1080,1140
3,| but it actually is

1168
00:39:36,530 --> 00:39:37,850
0,360 360,420 420,630 630,990 1080,1320
literally a {timestamp -}| and

1169
00:39:37,850 --> 00:39:39,170
0,210 210,270 270,750 750,1050 1050,1320
since the timestamp also form

1170
00:39:39,170 --> 00:39:41,450
0,330 330,1200 1470,1800 1800,2100 2100,2280
global order, that global order

1171
00:39:41,450 --> 00:39:42,410
0,90 90,300 300,690 690,780 780,960
of {timestamps -},| you know

1172
00:39:42,410 --> 00:39:43,700
0,510 510,810 810,1110 1110,1200 1200,1290
sufficient to order all the

1173
00:39:43,700 --> 00:39:44,340
0,450
writes.|

1174
00:39:45,000 --> 00:39:46,680
0,540 540,780 780,1290 1320,1590 1590,1680
{} And then there's a

1175
00:39:46,680 --> 00:39:48,120
0,480 480,630 630,720 720,1170 1170,1440
rule,| there's an additional rule

1176
00:39:48,120 --> 00:39:49,080
0,210 210,660
for read,|

1177
00:39:49,800 --> 00:39:51,600
0,600 600,690 690,960 960,1500
before you do read,|

1178
00:39:52,980 --> 00:39:54,360
0,240 240,570 570,750 750,810 810,1380
so before read of x

1179
00:39:54,820 --> 00:40:00,640
0,780 1230,1830 2610,2790 2790,3030 3030,5820
{} at you know {timestamp,15},|

1180
00:40:00,820 --> 00:40:02,340
0,450 450,600 600,720 720,1260
{the,replica} has to wait

1181
00:40:02,990 --> 00:40:03,780
0,240
{}

1182
00:40:04,580 --> 00:40:06,400
0,390 390,1050
for write,|

1183
00:40:07,020 --> 00:40:09,180
0,480 480,1050 1260,1710 1710,1950 1950,2160
that is with {timestamp -}

1184
00:40:09,180 --> 00:40:10,580
0,300 300,840
{bigger,than} 15,|

1185
00:40:11,810 --> 00:40:13,670
0,390 390,720 720,1110 1110,1320 1320,1860
this C write with timestamp

1186
00:40:13,670 --> 00:40:15,350
0,180 180,300 300,900 1140,1350 1350,1680
bigger than 15,| it knows

1187
00:40:15,350 --> 00:40:16,340
0,120 120,240 240,540 540,750 750,990
that there's certainly no writes

1188
00:40:16,340 --> 00:40:18,040
0,420 420,810 810,1440
anymore before 15,|

1189
00:40:18,300 --> 00:40:19,890
0,540 540,660 660,1080 1080,1350 1350,1590
and so therefore for {}

1190
00:40:19,920 --> 00:40:21,300
0,420 420,510 510,900 900,990 990,1380
safe to execute the read

1191
00:40:21,330 --> 00:40:23,060
0,510 510,750 750,1410
at timestamp 15,|

1192
00:40:23,270 --> 00:40:24,680
0,180 180,510 510,780 780,1140 1140,1410
and know what value actually

1193
00:40:24,680 --> 00:40:25,960
0,180 180,270 270,390 390,870
needs to be returned.|

1194
00:40:26,520 --> 00:40:28,140
0,240 240,660 690,1050 1050,1470 1470,1620
And so for services that

1195
00:40:28,140 --> 00:40:29,520
0,360 630,870 870,1020 1020,1260 1260,1380
are,| so this means that

1196
00:40:29,520 --> 00:40:30,540
0,60 60,540 540,780 780,960 960,1020
the {read,action} may have to

1197
00:40:30,540 --> 00:40:31,410
0,150 150,240 240,630 630,660 660,870
get a delayed a little

1198
00:40:31,410 --> 00:40:32,610
0,240 240,600 600,660 660,870 870,1200
bit until the next write,|

1199
00:40:32,610 --> 00:40:33,420
0,90 90,150 150,420 420,570 570,810
now of course for busy

1200
00:40:33,420 --> 00:40:34,920
0,630 630,990 990,1230 1230,1350 1350,1500
servers,| these writes will come

1201
00:40:34,920 --> 00:40:36,570
0,330 330,600 600,690 690,1170 1380,1650
along all the time| and

1202
00:40:36,570 --> 00:40:38,850
0,150 150,390 390,780 780,1230 1230,2280
so that wait probably non-existence

1203
00:40:38,850 --> 00:40:40,240
0,150 150,480 480,630 630,1200
or almost {non-existence -}.|

1204
00:40:40,930 --> 00:40:42,460
0,600 900,1170 1170,1320 1320,1410 1410,1530
Okay?| But this is the

1205
00:40:42,460 --> 00:40:43,240
0,270 270,420 420,600 600,660 660,780
rule that needs to be

1206
00:40:43,240 --> 00:40:44,380
0,390 390,480 480,660 660,930 930,1140
followed| to make sure that

1207
00:40:44,380 --> 00:40:47,080
0,330 330,510 510,1050 1350,2130 2160,2700
indeed this problem of replica

1208
00:40:47,080 --> 00:40:48,130
0,270 270,300 300,420 420,690 690,1050
actually {} have not seen

1209
00:40:48,130 --> 00:40:49,990
0,90 90,300 300,660 930,1590 1590,1860
the write yet,| { -}

1210
00:40:49,990 --> 00:40:51,300
0,360 360,420 420,600 600,1020
returning the wrong value.|

1211
00:40:52,250 --> 00:40:54,110
0,150 150,360 360,900 900,1080 1080,1860
The real slightly more complicated,|

1212
00:40:54,470 --> 00:40:55,730
0,630 660,840 840,1020 1020,1140 1140,1260
{} you also have to

1213
00:40:55,730 --> 00:40:56,720
0,720
wait,|

1214
00:40:57,260 --> 00:40:58,970
0,480 480,750 750,1020 1020,1110 1110,1710
{} also wait for transactions

1215
00:40:58,970 --> 00:41:00,140
0,180 180,330 330,870 870,960 960,1170
that have prepared but not

1216
00:41:00,140 --> 00:41:01,020
0,480
committed,|

1217
00:41:19,410 --> 00:41:20,580
0,180 180,630 630,780 780,990 990,1170
for example, this action might

1218
00:41:20,580 --> 00:41:22,320
0,120 120,510 540,1050 1050,1470 1470,1740
have been prepared,| basically {}

1219
00:41:22,350 --> 00:41:23,730
0,120 120,390 450,810 840,1110 1110,1380
you know {} {timestamp -}

1220
00:41:23,730 --> 00:41:25,470
0,750 960,1170 1170,1320 1320,1440 1440,1740
14,| {} but it hasn't

1221
00:41:25,470 --> 00:41:27,000
0,270 270,900 900,1140 1140,1440 1440,1530
maybe committed write yet,| you

1222
00:41:27,000 --> 00:41:29,340
0,150 150,480 480,1410 1890,2040 2040,2340
know to the key value

1223
00:41:29,340 --> 00:41:30,660
0,570 750,990 990,1110 1110,1200 1200,1320
store| and so we got

1224
00:41:30,660 --> 00:41:31,530
0,60 60,210 210,570 570,750 750,870
to make sure that you

1225
00:41:31,530 --> 00:41:33,450
0,360 510,1020 1020,1410 1410,1830 1830,1920
know {} any transaction that

1226
00:41:33,450 --> 00:41:34,560
0,240 240,360 360,420 420,840 840,1110
was going to prepare it,|

1227
00:41:34,650 --> 00:41:37,140
0,1020 1020,1560 1560,1770 1770,2010 2010,2490
before our read {timestamp -}

1228
00:41:37,170 --> 00:41:38,730
0,210 210,540 540,960 960,1440 1440,1560
that actually commits before we

1229
00:41:38,730 --> 00:41:39,780
0,180 180,420 420,480 480,900 900,1050
actually return the value of

1230
00:41:39,780 --> 00:41:42,540
0,270 660,1110 1140,1740
the read.| Okay?|

1231
00:41:44,050 --> 00:41:45,200
0,150 150,300 300,420 420,870
Does this make sense?|

1232
00:41:46,510 --> 00:41:48,880
0,270 270,600 600,960 960,1680 1710,2370
{} Would this also be

1233
00:41:49,060 --> 00:41:50,710
0,180 180,600 600,750 750,1200 1200,1650
the case for different shards,|

1234
00:41:50,710 --> 00:41:51,940
0,60 60,180 180,360 360,810 810,1230
{} do we consider different

1235
00:41:51,940 --> 00:41:54,120
0,600 600,1890
shards separately.|

1236
00:41:55,770 --> 00:41:57,570
0,570 600,870 870,960 960,1410 1410,1800
{ -} The {read,just} hit

1237
00:41:57,570 --> 00:41:59,180
0,210 210,690 690,1320
a local shard,|

1238
00:42:01,740 --> 00:42:04,470
0,270 270,570 570,900 900,1440 1800,2730
right, the local replica, and,|

1239
00:42:05,090 --> 00:42:06,140
0,270 270,420 420,600 600,810 810,1050
so I'm not hundred percent

1240
00:42:06,140 --> 00:42:07,250
0,180 180,510 510,600 600,1020 1020,1110
sure what the question you

1241
00:42:07,250 --> 00:42:08,570
0,240 240,420 630,840 840,1080 1080,1320
ask me.| I think I

1242
00:42:08,570 --> 00:42:09,620
0,180 180,240 240,570 570,690 690,1050
think the question I'm asking

1243
00:42:09,620 --> 00:42:12,980
0,330 690,1140 1140,1890 1890,2940 3060,3360
is,| the correctness guarantees do

1244
00:42:12,980 --> 00:42:15,960
0,210 210,1020 1110,1890 1890,2790
they apply across shards.|

1245
00:42:16,830 --> 00:42:18,330
0,570 570,720 720,1050 1050,1200 1200,1500
Yes, you know they apply

1246
00:42:18,330 --> 00:42:19,860
0,240 240,450 450,540 540,1230 1260,1530
the level of transactions right,|

1247
00:42:19,860 --> 00:42:21,780
0,480 690,1320 1320,1500 1500,1860 1860,1920
so {} so if a

1248
00:42:21,780 --> 00:42:22,890
0,240 240,510 510,720 720,780 780,1110
{read-only -} read a local

1249
00:42:22,890 --> 00:42:24,150
0,630 690,840 840,1050 1050,1200 1200,1260
replica,| we still have to

1250
00:42:24,150 --> 00:42:25,440
0,150 150,420 420,600 600,720 720,1290
make sure that the transactions

1251
00:42:25,440 --> 00:42:27,600
0,510 540,1290 1290,1920
are extremely consistent,|

1252
00:42:27,810 --> 00:42:29,250
0,450 450,630 630,930 930,1110 1110,1440
and by following these rules

1253
00:42:29,250 --> 00:42:30,660
0,360 360,660 660,810 810,1110
we achieved that goal.|

1254
00:42:31,910 --> 00:42:33,770
0,690 720,930 930,1200 1200,1440 1440,1860
Okay, make sense, thank you.|

1255
00:42:37,150 --> 00:42:40,450
0,600 630,1260 1440,2040 2040,2790 3120,3300
Okay, I'm now what you

1256
00:42:40,450 --> 00:42:41,980
0,180 180,870 870,1080 1080,1200 1200,1530
know we're going to use

1257
00:42:41,980 --> 00:42:45,370
0,1920 1950,2340 2340,2670 2670,2790 2790,3390
a core part of the

1258
00:42:45,490 --> 00:42:46,540
0,330 330,510 510,780 780,990 990,1050
spin a paper which is

1259
00:42:46,540 --> 00:42:48,370
0,510 750,870 870,1380 1410,1770 1770,1830
really what we want to

1260
00:42:48,370 --> 00:42:49,510
0,240 240,480 480,780 780,930 930,1140
reason about time like time

1261
00:42:49,510 --> 00:42:50,260
0,600
stamps.

1262
00:42:50,700 --> 00:42:51,870
0,180 180,300 300,450 450,720 720,1170
A in this case then

1263
00:42:51,960 --> 00:42:53,100
0,150 150,240 240,450 450,1020 1020,1140
you know the clocks, you

1264
00:42:53,100 --> 00:42:57,280
0,870 1200,1890 2370,2730 2730,3180
know a different servers.

1265
00:42:57,780 --> 00:43:00,270
0,390 390,690 690,1500 1530,2100 2160,2490
A must be a clock

1266
00:43:00,270 --> 00:43:01,410
0,180 180,240 240,600 870,960 960,1140
must be good, it must

1267
00:43:01,410 --> 00:43:02,970
0,90 90,540 660,990 990,1410 1410,1560
be perfect people must have

1268
00:43:02,970 --> 00:43:04,650
0,270 270,750 750,1170 1170,1530 1530,1680
different participants must agree on

1269
00:43:04,650 --> 00:43:07,020
0,240 570,840 840,1080 1080,1680 1800,2370
the time stamp order and

1270
00:43:07,020 --> 00:43:08,340
0,360 360,810 810,1080 1080,1290 1290,1320
a it actually takes a

1271
00:43:08,340 --> 00:43:09,900
0,390 390,660 660,1110 1350,1440 1440,1560
particular time stamp, you know

1272
00:43:09,900 --> 00:43:10,980
0,180 180,390 390,720 720,930 930,1080
that time stamp must be

1273
00:43:10,980 --> 00:43:11,910
0,120 120,300 300,360 360,690 690,930
the sort of same time

1274
00:43:11,910 --> 00:43:13,200
0,270 270,750 750,840 840,930 930,1290
stamp everywhere in the system.

1275
00:43:14,060 --> 00:43:15,920
0,420 420,750 990,1470 1470,1710 1710,1860
Um, so, um, and so

1276
00:43:15,920 --> 00:43:17,690
0,150 150,690 1050,1320 1320,1710 1710,1770
the way I've described it

1277
00:43:17,690 --> 00:43:21,200
0,90 90,210 210,960 1020,2430 2490,3510
in his previous um slides,

1278
00:43:21,200 --> 00:43:22,790
0,90 90,660 660,1020 1020,1140 1140,1590
you know whatever from participant

1279
00:43:22,790 --> 00:43:24,830
0,390 390,780 780,1020 1020,1260 1260,2040
data pics, the the transaction

1280
00:43:24,920 --> 00:43:26,210
0,450 450,480 480,750 750,1050 1050,1290
assigns a time stamp to

1281
00:43:26,210 --> 00:43:27,980
0,210 210,960 1230,1410 1410,1710 1710,1770
like fifteen which made me

1282
00:43:27,980 --> 00:43:28,970
0,120 120,390 390,420 420,660 660,990
go back a little bit,

1283
00:43:29,210 --> 00:43:30,350
0,120 120,390 420,930 930,1020 1020,1140
you know year, you know

1284
00:43:30,350 --> 00:43:31,880
0,180 180,360 360,870 870,1320 1350,1530
we're just assigning a time

1285
00:43:31,880 --> 00:43:33,980
0,330 330,420 420,570 570,1320 1620,2100
stamp to these transactions and

1286
00:43:33,980 --> 00:43:34,910
0,150 150,390 390,510 510,570 570,930
it better be the case

1287
00:43:34,910 --> 00:43:35,900
0,240 240,480 480,630 630,780 780,990
that like me t. one

1288
00:43:35,900 --> 00:43:36,980
0,120 120,240 240,450 450,840 840,1080
and t. two fifty three

1289
00:43:36,980 --> 00:43:38,540
0,540 540,720 720,840 840,1080 1080,1560
agree on these time steps.

1290
00:43:39,650 --> 00:43:40,790
0,630 630,870 870,990 990,1050 1050,1140
Um, and that they are

1291
00:43:40,790 --> 00:43:43,520
0,630 1380,1680 1680,2070 2220,2610 2610,2730
comparable and so less will

1292
00:43:43,520 --> 00:43:46,310
0,540 570,1770 1770,2370 2370,2700 2700,2790
see a in a in

1293
00:43:46,310 --> 00:43:48,710
0,60 60,570 810,1410 1470,2160 2160,2400
the second a demo only

1294
00:43:48,710 --> 00:43:49,820
0,330 330,540 540,660 660,840 840,1110
matters really for read only

1295
00:43:49,820 --> 00:43:52,140
0,780
transactions.

1296
00:43:54,830 --> 00:43:56,240
0,810
Wow.

1297
00:44:05,250 --> 00:44:07,230
0,600 810,1020 1020,1290 1290,1650 1650,1980
Um, and we don't know

1298
00:44:07,230 --> 00:44:08,820
0,600 600,720 720,810 810,1320 1320,1590
consider the two cases like

1299
00:44:08,820 --> 00:44:10,500
0,540 540,1080 1110,1320 1320,1440 1440,1680
what happens here's a question

1300
00:44:10,500 --> 00:44:11,220
0,90 90,180 180,330 330,420 420,720
that we want to ask

1301
00:44:11,220 --> 00:44:12,390
0,270 420,600 600,900 900,1020 1020,1170
is what happens is like

1302
00:44:12,390 --> 00:44:14,130
0,270 270,780 780,840 840,1230 1230,1740
one replica or one server

1303
00:44:14,130 --> 00:44:15,570
0,210 210,600 600,690 690,990 990,1440
just has the wrong type.

1304
00:44:16,400 --> 00:44:17,930
0,300 300,450 450,540 540,840 840,1530
And so it doesn't agree

1305
00:44:17,930 --> 00:44:18,770
0,210 210,300 300,600 600,720 720,840
with the time that the

1306
00:44:18,770 --> 00:44:21,650
0,180 180,720 1350,1890 1890,2730 2730,2880
other surface, now what kind

1307
00:44:21,650 --> 00:44:23,420
0,60 60,360 360,1020 1020,1590 1590,1770
of problems could introduce so

1308
00:44:23,420 --> 00:44:24,290
0,180 180,450 450,600 600,810 810,870
let's first think about the

1309
00:44:24,290 --> 00:44:25,910
0,540 870,1020 1020,1080 1080,1320 1320,1620
case, but the time stand

1310
00:44:25,910 --> 00:44:27,140
0,180 180,330 330,1020
is too large.

1311
00:44:28,800 --> 00:44:29,920
0,90
Yes.

1312
00:44:32,740 --> 00:44:34,540
0,570 570,960 960,1050 1050,1740 1740,1800
Um, so, for example you

1313
00:44:34,540 --> 00:44:35,530
0,240 240,420 420,540 540,810 810,990
know, let's go back to

1314
00:44:35,530 --> 00:44:38,530
0,450 1170,1650 1650,1980 1980,2190 2190,3000
our mercy view this case

1315
00:44:38,860 --> 00:44:41,410
0,180 180,390 390,780 780,1410 2340,2550
so let's say the read

1316
00:44:41,410 --> 00:44:43,780
0,240 240,630 630,900 900,1500 1740,2370
only transaction starts reading and

1317
00:44:43,780 --> 00:44:45,880
0,420 420,1080 1080,1410 1410,1770 1770,2100
enrich actually, um, instead of

1318
00:44:45,880 --> 00:44:46,700
0,0
um.

1319
00:44:47,020 --> 00:44:49,330
0,630 960,1080 1080,1260 1260,1920 1920,2310
Um, you know fifteen maybe

1320
00:44:49,330 --> 00:44:51,160
0,360 360,450 450,840 840,1350 1350,1830
whatever the value returns actually

1321
00:44:51,160 --> 00:44:51,980
0,600
is.

1322
00:44:52,220 --> 00:44:53,700
0,360 360,1200
A 25.

1323
00:44:55,630 --> 00:44:57,250
0,480 480,990 990,1140 1140,1230 1230,1620
And what would I do.

1324
00:44:58,930 --> 00:44:59,740
0,300 300,570 570,690 690,780 780,810
Four let's make it a

1325
00:44:59,740 --> 00:45:01,420
0,210 210,780 780,870 870,1080 1080,1680
little simpler, you know eighteen.

1326
00:45:04,310 --> 00:45:05,700
0,150 150,330 330,480 480,1050
To get less confusion.

1327
00:45:06,210 --> 00:45:07,200
0,120 120,210 210,450 450,900 900,990
You know what, what is

1328
00:45:07,200 --> 00:45:08,340
0,150 150,510 510,630 630,900 900,1140
the outcome of actually having

1329
00:45:08,340 --> 00:45:09,600
0,60 60,270 270,600 600,840 1050,1260
a time stamp that is

1330
00:45:09,600 --> 00:45:10,980
0,450 450,750 750,1080 1080,1200 1200,1380
off but often in the

1331
00:45:10,980 --> 00:45:12,540
0,450 450,540 540,720 720,870 870,1560
direction of being too large.

1332
00:45:15,780 --> 00:45:17,280
0,180 180,450 450,660 660,840 840,1500
It's still less than 25

1333
00:45:17,280 --> 00:45:19,260
0,300 300,420 420,750 750,1200 1500,1980
dozen it still read further

1334
00:45:19,260 --> 00:45:20,790
0,360 390,900 930,1200 1200,1290 1290,1530
than twenty doesn't it still

1335
00:45:20,790 --> 00:45:22,980
0,270 270,510 510,1020 1380,1920 1920,2190
read from the first one,

1336
00:45:22,980 --> 00:45:23,970
0,150 150,240 240,420 420,810 810,990
but if it's later it'll

1337
00:45:23,970 --> 00:45:25,500
0,240 240,420 420,720 780,1260 1260,1530
read from the second one

1338
00:45:25,680 --> 00:45:26,910
0,390 390,780 780,900 900,1080 1080,1230
yeah which if either one

1339
00:45:26,910 --> 00:45:28,590
0,120 120,420 420,660 660,1410 1410,1680
is fine Craig the real

1340
00:45:28,590 --> 00:45:30,180
0,450 450,780 780,1110 1110,1230 1230,1590
key issue here is that

1341
00:45:30,210 --> 00:45:30,920
0,510
um.

1342
00:45:31,200 --> 00:45:32,790
0,150 150,300 300,720 720,1020 1020,1590
You know before reading remember

1343
00:45:32,970 --> 00:45:33,840
0,180 180,270 270,390 390,660 660,870
you have to wait until

1344
00:45:33,840 --> 00:45:34,960
0,120 120,240 240,360 360,810
you see you're right.

1345
00:45:35,250 --> 00:45:36,360
0,300 300,480 480,600 600,810 810,1110
Right, so if you are

1346
00:45:36,450 --> 00:45:37,260
0,150 150,300 300,570 570,660 660,810
so what happens if your

1347
00:45:37,260 --> 00:45:38,760
0,240 240,540 540,690 690,810 810,1500
time stamp is too large.

1348
00:45:40,220 --> 00:45:41,180
0,240 240,510 510,720 720,810 810,960
We're off from the two

1349
00:45:41,180 --> 00:45:42,200
0,300 300,720
large chunk.

1350
00:45:42,370 --> 00:45:44,830
0,210 210,390 390,690 690,1110 1110,2460
You have to wait for

1351
00:45:44,860 --> 00:45:47,880
0,2370 2370,2460
to win.

1352
00:45:48,740 --> 00:45:53,260
0,360 360,540 540,1200
Nothing goes wrong.

1353
00:45:54,920 --> 00:45:56,330
0,660 780,990 990,1170 1170,1260 1260,1410
Um, so now the other

1354
00:45:56,330 --> 00:45:58,880
0,570 840,1290 1290,1620 1620,2070 2070,2550
question, um is what if

1355
00:45:58,880 --> 00:46:00,080
0,120 120,390 390,720 720,990 990,1200
the time stamp is too

1356
00:46:00,080 --> 00:46:03,380
0,630
small.

1357
00:46:04,010 --> 00:46:05,630
0,330 330,420 420,1080 1080,1230 1230,1620
So, for example the read,

1358
00:46:05,750 --> 00:46:07,250
0,360 360,660 660,840 840,1050 1050,1500
um, when the t three

1359
00:46:07,250 --> 00:46:08,540
0,210 210,540 540,660 660,1110 1110,1290
the machine that executes the

1360
00:46:08,540 --> 00:46:09,440
0,300 300,360 360,510 510,810 810,900
free you know ask for

1361
00:46:09,440 --> 00:46:11,210
0,180 180,600 990,1410 1410,1710 1710,1770
that, I'm a instead of

1362
00:46:11,210 --> 00:46:13,340
0,390 390,990 1110,1530 1530,1680 1680,2130
time, ten actually gets back,

1363
00:46:13,340 --> 00:46:14,840
0,150 150,360 360,810 810,1350 1350,1500
you say night zen, this

1364
00:46:14,840 --> 00:46:16,760
0,120 120,150 150,1140 1320,1710 1710,1920
is a variation of the

1365
00:46:16,760 --> 00:46:18,590
0,750 750,810 810,1230 1230,1440 1440,1830
lecture a question so basically

1366
00:46:18,590 --> 00:46:20,510
0,240 240,480 480,1050 1470,1770 1770,1920
like t free rather than

1367
00:46:20,540 --> 00:46:21,620
0,540
nine.

1368
00:46:22,840 --> 00:46:23,920
0,450 450,690 690,840 840,930 930,1080
And maybe this is a

1369
00:46:23,920 --> 00:46:25,390
0,270 270,570 570,840 840,1170 1170,1470
good time for actually so

1370
00:46:25,390 --> 00:46:26,470
0,150 150,210 210,450 450,630 630,1080
take a break out room

1371
00:46:26,710 --> 00:46:28,300
0,810 810,960 960,1050 1050,1470 1470,1590
and you can think and

1372
00:46:28,300 --> 00:46:29,650
0,360 360,840 840,1110 1110,1200 1200,1350
argue what, what is the

1373
00:46:29,650 --> 00:46:31,390
0,600 780,1080 1080,1140 1140,1230 1230,1740
outcome, what is the potential

1374
00:46:31,390 --> 00:46:32,800
0,630 630,720 720,960 960,1110 1110,1410
outcomes you know or what

1375
00:46:32,800 --> 00:46:34,780
0,120 120,270 270,810 930,1470 1470,1980
could go wrong, if actually

1376
00:46:34,780 --> 00:46:36,670
0,540 570,840 840,1350 1350,1710 1710,1890
the time stamp that got

1377
00:46:36,670 --> 00:46:38,710
0,480 480,660 660,1170 1170,1620 1830,2040
assigned at t three is

1378
00:46:38,710 --> 00:46:40,520
0,690 780,1080 1080,1170 1170,1590
nine instead of ten.

1379
00:46:43,630 --> 00:46:44,380
0,300 300,510 510,570 570,660 660,750
So maybe we can do

1380
00:46:44,380 --> 00:46:45,640
0,60 60,420 420,690 720,1050 1050,1260
a breakout here lately wouldn't

1381
00:46:45,640 --> 00:46:46,640
0,120 120,690
be possible.

1382
00:46:49,270 --> 00:46:51,040
0,360 360,630 630,1050 1050,1350 1350,1770
But having ladies back soon.

1383
00:46:59,210 --> 00:47:00,620
0,390 390,570 570,630 630,960 960,1410
Hold on a second year.

1384
00:47:18,080 --> 00:47:20,510
0,690 1050,1890 1890,2100 2100,2280 2280,2430
Okay, anybody else getting good

1385
00:47:20,510 --> 00:47:23,640
0,510
noise.

1386
00:47:24,630 --> 00:47:26,500
0,1440
Guthrie.

1387
00:49:07,030 --> 00:49:08,800
0,240 240,1470
He asked.

1388
00:49:45,700 --> 00:49:46,880
0,720
Oops.

1389
00:51:23,010 --> 00:51:24,360
0,180 180,1080
He asked.

1390
00:52:45,780 --> 00:52:46,660
0,60
Yeah.

1391
00:53:42,920 --> 00:53:44,300
0,180 180,750 750,1020 1020,1110 1110,1380
Okay, everybody back and everybody

1392
00:53:44,300 --> 00:53:45,340
0,90 90,240 240,360 360,690
can hear me again.

1393
00:53:46,800 --> 00:53:47,760
0,900
Yep.

1394
00:53:51,630 --> 00:53:52,540
0,570
Robert.

1395
00:53:57,090 --> 00:53:59,040
0,780 780,1230 1230,1320 1320,1680
Assume we're all good.

1396
00:54:00,090 --> 00:54:01,680
0,300 300,540 540,660 660,1020 1170,1590
Yes yes, we're good, we're

1397
00:54:01,680 --> 00:54:02,420
0,90 90,420
all good.

1398
00:54:04,250 --> 00:54:06,560
0,510 600,1170 1560,1740 1740,1860 1860,2310
Okay, um, okay, so back,

1399
00:54:06,590 --> 00:54:07,640
0,90 90,210 210,360 360,660 660,1050
you know so this, um

1400
00:54:07,670 --> 00:54:10,220
0,450 450,1020 1020,1020 2040,2430 2430,2550
question here, um, um, you

1401
00:54:10,220 --> 00:54:12,500
0,360 360,1290 1290,1650 1650,1920 1920,2280
were investigating a we're relying

1402
00:54:12,500 --> 00:54:14,420
0,90 90,570 570,1440 1470,1860 1860,1920
on scheme where clocks are

1403
00:54:14,420 --> 00:54:16,400
0,240 240,540 540,600 600,960 960,1980
different machines are perfectly synchronized

1404
00:54:16,400 --> 00:54:19,610
0,600 1380,1890 2220,2640 2640,2970 2970,3210
a measured matters only for

1405
00:54:19,610 --> 00:54:20,960
0,150 150,360 360,930 930,1170 1170,1350
read only transactions because read

1406
00:54:20,960 --> 00:54:22,280
0,180 180,810 810,900 900,1020 1020,1320
write transactions, you know grab

1407
00:54:22,280 --> 00:54:23,720
0,630 690,840 840,1050 1050,1200 1200,1440
logs, they use two phase

1408
00:54:23,720 --> 00:54:24,830
0,360 360,570 570,750 750,810 810,1110
locking to get a total

1409
00:54:24,830 --> 00:54:25,460
0,450
order.

1410
00:54:25,870 --> 00:54:27,310
0,150 150,300 300,480 480,990 990,1440
So they were executing some

1411
00:54:27,670 --> 00:54:30,340
0,510 510,1080 1080,1950 1980,2280 2280,2670
a serialized abul actual persistent

1412
00:54:30,340 --> 00:54:31,990
0,450 750,1110 1110,1320 1320,1440 1440,1650
order, um where we see

1413
00:54:31,990 --> 00:54:34,540
0,210 210,690 690,1080 1080,1800 1800,2550
that for reordering transactions a

1414
00:54:34,570 --> 00:54:36,970
0,360 360,900 900,990 990,1590 2070,2400
time stamps are crucial at

1415
00:54:36,970 --> 00:54:38,170
0,240 240,450 480,690 690,810 810,1200
least we think it's crucial

1416
00:54:38,170 --> 00:54:39,400
0,300 300,420 420,600 600,750 750,1230
for if they're too large,

1417
00:54:39,400 --> 00:54:40,510
0,90 90,210 210,480 480,930 930,1110
you know not maybe just

1418
00:54:40,510 --> 00:54:42,970
0,330 330,720 720,1440 1620,2250 2400,2460
affect performance negatively, but the

1419
00:54:42,970 --> 00:54:43,900
0,270 270,330 330,510 510,810 810,930
question is what happens if

1420
00:54:43,900 --> 00:54:45,580
0,360 390,870 870,990 990,1110 1110,1680
the times is too small

1421
00:54:45,880 --> 00:54:48,670
0,210 210,600 1020,1650 1770,2370 2370,2790
and so the particular question

1422
00:54:48,670 --> 00:54:50,080
0,330 330,720 720,900 900,1080 1080,1410
we're asking is like what,

1423
00:54:50,080 --> 00:54:52,990
0,210 210,390 390,900 1080,2070 2070,2910
what would happen if a.

1424
00:54:53,610 --> 00:54:56,430
0,510 510,1290 1590,2550 2550,2700 2700,2820
In a scenario that we

1425
00:54:56,430 --> 00:54:58,140
0,240 240,660 660,690 690,1140 1530,1710
looked at a second, um

1426
00:54:58,140 --> 00:54:59,550
0,270 270,390 390,570 570,1050 1050,1410
where we have transaction to

1427
00:54:59,580 --> 00:55:01,500
0,210 210,780 930,1560 1560,1830 1830,1920
t one a actually I

1428
00:55:01,500 --> 00:55:02,550
0,240 240,390 390,870 870,930 930,1050
wrote this wrong, you know

1429
00:55:02,550 --> 00:55:04,050
0,240 240,600 600,750 750,960 960,1500
two two and t three

1430
00:55:04,350 --> 00:55:05,220
0,120 120,300 300,540 540,660 660,870
or t three is doing

1431
00:55:05,220 --> 00:55:07,710
0,90 90,630 900,1680 1680,2160 2160,2490
the reach and um, this

1432
00:55:07,710 --> 00:55:09,690
0,300 300,720 720,840 840,1260 1260,1980
read instead of actually happening,

1433
00:55:09,690 --> 00:55:12,840
0,540 540,1050 1050,1440 1770,2640 2670,3150
um, maybe at fifteen and

1434
00:55:12,840 --> 00:55:14,220
0,120 120,450 450,1170 1170,1260 1260,1380
it actually happens, you know

1435
00:55:14,220 --> 00:55:15,570
0,330 330,420 420,870 870,990 990,1350
across the clock to get

1436
00:55:15,660 --> 00:55:17,640
0,420 420,720 720,1230 1260,1620 1620,1980
a free wrong actually happens

1437
00:55:17,640 --> 00:55:18,380
0,150 150,570
at night.

1438
00:55:19,800 --> 00:55:21,570
0,750 840,960 960,1050 1050,1260 1260,1770
And you know how bad

1439
00:55:21,570 --> 00:55:22,520
0,120 120,270 270,600
would that be.

1440
00:55:27,830 --> 00:55:30,020
0,540 540,840 840,1350 1350,1800
Break our serialize ability.

1441
00:55:30,820 --> 00:55:31,840
0,720
Anybody.

1442
00:55:32,270 --> 00:55:34,040
0,450 480,690 690,840 840,1470
Okay, looks like hot.

1443
00:55:34,320 --> 00:55:35,730
0,330 360,900 900,990 990,1230 1230,1410
OK, sorry I didn't hear

1444
00:55:35,730 --> 00:55:36,930
0,90 90,330 330,450 450,780 780,1200
you because I actually had

1445
00:55:36,960 --> 00:55:39,000
0,330 330,750 750,810 810,1080 1080,2040
some problem I said deny

1446
00:55:39,000 --> 00:55:40,290
0,840 840,990 990,1200 1200,1290 1290,1290
I can hear you I

1447
00:55:40,290 --> 00:55:41,460
0,450 510,690 690,780 780,1050 1050,1170
think, can you repeat the

1448
00:55:41,460 --> 00:55:43,260
0,510 870,1230 1230,1320 1320,1500 1500,1800
answer, sorry I said it

1449
00:55:43,260 --> 00:55:45,180
0,150 150,390 390,930 930,1530 1740,1920
would break serialize ability, you

1450
00:55:45,180 --> 00:55:45,940
0,60 60,510
know why.

1451
00:55:46,440 --> 00:55:49,020
0,360 360,870 870,1350 1350,2160 2220,2580
Um, because then you're you're

1452
00:55:49,020 --> 00:55:51,360
0,270 270,420 420,1020 1380,2220 2220,2340
read would happen, would you

1453
00:55:51,360 --> 00:55:52,740
0,330 330,420 420,570 570,930 930,1380
assume to be happening after

1454
00:55:52,740 --> 00:55:54,270
0,180 180,570 570,990 1080,1380 1380,1530
your latest right would then

1455
00:55:54,270 --> 00:55:56,190
0,330 330,930 960,1170 1170,1440 1470,1920
happen before which you wouldn't

1456
00:55:56,190 --> 00:55:58,110
0,300 300,420 420,660 660,960 1230,1920
yield the other right yeah,

1457
00:55:58,110 --> 00:55:59,340
0,360 360,540 540,690 690,960 960,1230
so just make the story

1458
00:55:59,340 --> 00:56:01,740
0,480 480,870 870,1410 1590,2250 2250,2400
complete goatee free really is

1459
00:56:01,740 --> 00:56:04,530
0,600 600,960 960,1470 1470,2310 2340,2790
executing at time, fifteen right

1460
00:56:04,920 --> 00:56:07,050
0,330 330,570 570,750 750,1680 1710,2130
um, which is after t

1461
00:56:07,050 --> 00:56:08,500
0,360 360,510 510,810 810,1320
two t one committed.

1462
00:56:08,710 --> 00:56:10,540
0,360 360,570 570,810 810,1320 1320,1830
So, t free must see

1463
00:56:10,540 --> 00:56:12,340
0,510 510,810 810,1290 1440,1710 1710,1800
otti wants right, but if

1464
00:56:12,340 --> 00:56:14,140
0,90 90,450 450,570 570,1200 1230,1800
the clock is wrong and

1465
00:56:14,260 --> 00:56:15,820
0,480 480,840 840,1020 1020,1380 1380,1560
a times n nine got

1466
00:56:15,820 --> 00:56:17,770
0,630 630,780 780,1290 1560,1740 1740,1950
assigned to a to t

1467
00:56:17,770 --> 00:56:19,210
0,390 540,720 720,870 870,1260 1260,1440
three and t three will

1468
00:56:19,210 --> 00:56:20,890
0,420 420,930 960,1140 1140,1530 1530,1680
actually read the value of

1469
00:56:20,890 --> 00:56:24,070
0,390 390,1020 1050,1920 2160,2670 2700,3180
X, um, before a transaction

1470
00:56:24,070 --> 00:56:26,320
0,180 180,510 510,1260 1500,2040 2040,2250
t one executed and they'll

1471
00:56:26,320 --> 00:56:27,580
0,120 120,540 540,780 780,990 990,1260
be wrong, that will break

1472
00:56:27,580 --> 00:56:29,200
0,570 570,1470
external, um.

1473
00:56:29,450 --> 00:56:30,480
0,720
Consistency.

1474
00:56:32,630 --> 00:56:33,420
0,540
Alright.

1475
00:56:34,100 --> 00:56:35,400
0,330 330,570 570,630 630,960
Everybody clear on that.

1476
00:56:50,590 --> 00:56:52,930
0,330 330,900 1080,1710 1860,2190 2190,2340
Okay so clearly would like

1477
00:56:52,930 --> 00:56:55,840
0,60 60,330 330,810 1260,2130 2130,2910
to avoid this and um

1478
00:56:56,080 --> 00:56:57,550
0,750 750,900 900,960 960,1110 1110,1470
and sort of the central

1479
00:56:57,550 --> 00:57:01,030
0,540 540,1710 1740,2400 2400,2820 3030,3480
problems, a noise, this is

1480
00:57:01,030 --> 00:57:02,110
0,150 150,240 240,390 390,600 600,1080
how do we get clocks,

1481
00:57:02,140 --> 00:57:03,040
0,210 210,300 300,360 360,570 570,900
how do we keep clocks

1482
00:57:03,040 --> 00:57:05,020
0,90 90,630 1290,1500 1500,1740 1740,1980
in cars, oh wait I

1483
00:57:05,020 --> 00:57:06,100
0,240 240,390 390,540 540,690 690,1080
just have one more question

1484
00:57:06,100 --> 00:57:09,010
0,570 1080,1620 1620,1920 1920,2430 2430,2910
about so this scenario basically

1485
00:57:09,010 --> 00:57:12,370
0,210 210,780 780,1620 1680,2400 2670,3360
can happen because, um, it's

1486
00:57:12,370 --> 00:57:15,220
0,840 840,1080 1080,2070 2070,2370 2370,2850
always the coordinator for a

1487
00:57:15,460 --> 00:57:17,350
0,510 510,990 990,1260 1260,1800 1800,1890
rewrite transaction data science, the

1488
00:57:17,350 --> 00:57:19,690
0,390 390,870 900,1320 1800,2160 2160,2340
time step, so even if

1489
00:57:19,690 --> 00:57:20,800
0,210 210,420 420,600 600,960 960,1110
the read is local and

1490
00:57:20,800 --> 00:57:22,090
0,120 120,570 570,900 930,1110 1110,1290
it happens on so it's

1491
00:57:22,090 --> 00:57:23,500
0,480 480,660 660,780 780,1200 1200,1410
possible for the machine that

1492
00:57:23,500 --> 00:57:26,470
0,480 570,1050 1050,1650 1890,2250 2250,2970
was running behind to have.

1493
00:57:27,030 --> 00:57:28,320
0,210 210,810 810,1050 1050,1170 1170,1290
A version that's in the

1494
00:57:28,320 --> 00:57:30,180
0,570 570,780 780,960 960,1290 1290,1860
future of its local clock,

1495
00:57:30,570 --> 00:57:32,440
0,1230 1230,1260
yeah, um.

1496
00:57:32,980 --> 00:57:34,120
0,390 390,450 450,510 510,810 810,1140
Guy in the future yet.

1497
00:57:35,620 --> 00:57:36,640
0,270 270,390 390,540 540,720 720,1020
Okay, and that can happen

1498
00:57:36,640 --> 00:57:38,530
0,570 570,810 810,1140 1140,1290 1290,1890
because it's not at machine

1499
00:57:38,530 --> 00:57:40,120
0,180 180,840 840,930 930,1230 1230,1590
who decided the time step.

1500
00:57:40,870 --> 00:57:42,640
0,780 780,960 960,1080 1080,1560 1560,1770
No okay, so forget about

1501
00:57:42,640 --> 00:57:43,600
0,180 180,450 450,570 570,810 810,960
which machine it is like

1502
00:57:43,600 --> 00:57:45,700
0,210 210,720 810,1530 1530,1980 1980,2100
t three a is going

1503
00:57:45,700 --> 00:57:46,480
0,90 90,420 420,510 510,570 570,780
to decide on the time

1504
00:57:46,480 --> 00:57:48,460
0,210 210,360 360,960 990,1320 1710,1980
stamp for transaction right, um,

1505
00:57:48,460 --> 00:57:49,390
0,150 150,270 270,540 540,840 840,930
we go back here to

1506
00:57:49,390 --> 00:57:50,340
0,180 180,690
this picture.

1507
00:57:50,790 --> 00:57:51,810
0,240 240,540 540,630 630,840 840,1020
So here we got t

1508
00:57:51,810 --> 00:57:52,660
0,510
three.

1509
00:57:52,900 --> 00:57:56,170
0,690 690,900 900,1290 1290,1980 2460,3270
Um, so TV, start a

1510
00:57:56,170 --> 00:57:58,480
0,450 450,630 630,1050 1050,1680 1680,2310
and t fi starts a

1511
00:57:58,510 --> 00:58:01,480
0,630 1020,1620 1980,2550 2550,2880 2880,2970
principle, a absolute time in

1512
00:58:01,480 --> 00:58:03,520
0,210 210,540 540,870 870,1260 1860,2040
true time after ten years

1513
00:58:03,520 --> 00:58:05,350
0,240 240,870 870,1410 1410,1560 1560,1830
keefe restarts after t one

1514
00:58:05,350 --> 00:58:05,980
0,180 180,270 270,360 360,480 480,630
as we can see from

1515
00:58:05,980 --> 00:58:07,020
0,120 120,540
this picture.

1516
00:58:08,100 --> 00:58:10,140
0,390 630,930 930,1320 1320,1590 1590,2040
So this particular read acts

1517
00:58:10,140 --> 00:58:11,310
0,120 120,360 360,660 660,780 780,1170
you know and so we

1518
00:58:11,310 --> 00:58:12,300
0,210 210,270 270,510 510,750 750,990
sign the time step to

1519
00:58:12,300 --> 00:58:13,590
0,270 270,450 450,660 660,1200 1200,1290
a read only transaction, we

1520
00:58:13,590 --> 00:58:15,000
0,300 300,690 810,1110 1110,1200 1200,1410
start to resign the time

1521
00:58:15,000 --> 00:58:16,320
0,210 210,390 390,540 540,870 1140,1320
step for read only is

1522
00:58:16,320 --> 00:58:17,070
0,240 240,330 330,540 540,630 630,750
actually the point of the

1523
00:58:17,070 --> 00:58:18,420
0,300 300,390 390,1080
start of production.

1524
00:58:18,620 --> 00:58:19,340
0,240 240,360 360,540 540,600 600,720
So the read of the

1525
00:58:19,340 --> 00:58:20,810
0,420 420,540 540,870 870,930 930,1470
axes to startup the transaction

1526
00:58:20,810 --> 00:58:23,660
0,900 1320,1620 1620,1950 1950,2610 2640,2850
43 t three basically needs

1527
00:58:23,660 --> 00:58:24,590
0,90 90,270 270,360 360,630 630,930
to get the time stamp

1528
00:58:24,590 --> 00:58:25,460
0,120 120,210 210,510 510,630 630,870
so it asks no, please

1529
00:58:25,460 --> 00:58:26,660
0,180 180,390 390,570 570,840 840,1200
give me the current value

1530
00:58:26,660 --> 00:58:27,680
0,120 120,270 270,780
of its clock.

1531
00:58:28,110 --> 00:58:29,880
0,780 780,990 1020,1170 1170,1290 1290,1770
And, um, you know if

1532
00:58:29,880 --> 00:58:30,540
0,90 90,180 180,270 270,540 540,660
you know the clock is

1533
00:58:30,540 --> 00:58:32,520
0,720 720,930 930,1440 1440,1530 1530,1980
reliable and correct you know

1534
00:58:32,520 --> 00:58:34,260
0,270 270,750 750,930 930,1170 1170,1740
give back the time sometime

1535
00:58:34,260 --> 00:58:36,180
0,390 390,720 720,840 840,1230 1260,1920
after ten for sure because

1536
00:58:36,600 --> 00:58:38,460
0,330 330,870 870,1260 1260,1620
teeth restarted after ten.

1537
00:58:39,210 --> 00:58:40,290
0,390 390,690 690,780 780,900 900,1080
But let's you know we

1538
00:58:40,290 --> 00:58:42,750
0,600 630,1860 1860,1980 1980,2040 2040,2460
were hypothesizes that the clock

1539
00:58:42,750 --> 00:58:43,950
0,270 270,480 480,720 720,810 810,1200
of t three is not

1540
00:58:43,980 --> 00:58:45,330
0,120 120,300 300,630 660,1050 1050,1350
you know a clear person

1541
00:58:45,330 --> 00:58:47,430
0,810 1080,1560 1560,1650 1650,1980 1980,2100
synchronized and the clock should

1542
00:58:47,430 --> 00:58:48,580
0,420 420,900
return Nan.

1543
00:58:49,210 --> 00:58:51,220
0,120 120,240 240,930 930,1290 1290,2010
And so now a transaction

1544
00:58:51,640 --> 00:58:53,050
0,420 420,660 660,810 810,1230 1230,1410
a free will execute a

1545
00:58:53,050 --> 00:58:54,790
0,210 210,480 480,1020 1140,1590 1590,1740
time step nine and that

1546
00:58:54,790 --> 00:58:55,780
0,120 120,390 390,510 510,600 600,990
will cause you to read

1547
00:58:55,780 --> 00:58:57,340
0,60 60,540 540,720 720,870 870,1560
the value from b four

1548
00:58:57,400 --> 00:58:58,510
0,240 240,630 630,720 720,870 870,1110
t one and that was

1549
00:58:58,600 --> 00:59:00,240
0,180 180,630 660,1380
a break, um.

1550
00:59:00,430 --> 00:59:01,760
0,420 420,1020
External persistency.

1551
00:59:03,520 --> 00:59:05,540
0,450 450,720 720,1050 1050,1680
Okay, but um if.

1552
00:59:05,730 --> 00:59:07,320
0,510 510,1290
If the.

1553
00:59:08,340 --> 00:59:10,200
0,180 180,300 300,900 900,1320 1320,1860
If the replication which we

1554
00:59:10,230 --> 00:59:12,820
0,510 510,690 690,1260 1740,2220
execute the three had.

1555
00:59:13,320 --> 00:59:14,520
0,810
The.

1556
00:59:17,460 --> 00:59:20,130
0,210 210,540 540,1050 1050,1590 1620,2670
It may have the version.

1557
00:59:20,880 --> 00:59:23,490
0,660 840,1140 1140,1710 1710,2100 2100,2610
Ten of variable x. right,

1558
00:59:24,750 --> 00:59:29,550
0,330 330,3810 3810,3870 3900,4560 4560,4800
{it's -} a nine so

1559
00:59:29,550 --> 00:59:30,570
0,150 150,360 360,450 450,870 870,1020
we'll get the value for

1560
00:59:30,570 --> 00:59:32,250
0,360 360,810 810,930 930,1350 1350,1680
before camp, this version memory,

1561
00:59:32,250 --> 00:59:33,940
0,600 1080,1500
yeah yep.

1562
00:59:35,510 --> 00:59:36,440
0,240 240,420 420,600 600,780 780,930
Yeah, just making sure this

1563
00:59:36,440 --> 00:59:37,340
0,120 120,210 210,450 450,600 600,900
is a very good question,

1564
00:59:37,340 --> 00:59:38,600
0,300 300,450 450,720 720,1080 1080,1260
starting this very important point

1565
00:59:38,600 --> 00:59:40,190
0,270 270,510 660,1140 1140,1410 1410,1590
to get crystal clear what's

1566
00:59:40,190 --> 00:59:41,180
0,180 180,450 450,690
going on here.

1567
00:59:42,790 --> 00:59:44,590
0,270 270,690 1080,1350 1350,1590 1590,1800
Okay, so so I think

1568
00:59:44,590 --> 00:59:45,580
0,90 90,390 390,690 690,900 900,990
we're now hopefully on the

1569
00:59:45,580 --> 00:59:47,230
0,180 180,540 540,900 900,1410 1410,1650
same page, you know it's

1570
00:59:47,230 --> 00:59:49,090
0,510 510,930 930,1110 1110,1320 1320,1860
very important that these clocks

1571
00:59:49,090 --> 00:59:50,260
0,150 150,330 330,570 570,930 930,1170
are these different machines are

1572
00:59:50,260 --> 00:59:52,510
0,510 510,1260 1770,1950 1950,2010 2010,2250
perfectly synchronized and of course

1573
00:59:52,510 --> 00:59:54,820
0,360 360,780 780,1170 1170,1260 1260,2310
it's not possible to get

1574
00:59:54,820 --> 00:59:56,770
0,630 630,990 990,1290 1290,1860 1860,1950
perfect scene clocks, immunization and

1575
00:59:56,770 --> 00:59:58,120
0,150 150,210 210,510 510,600 600,1350
through a couple of difficulties.

1576
01:00:01,590 --> 01:00:02,820
0,300 300,660 660,720 720,900 900,1230
It's difficult to get clocks

1577
01:00:02,820 --> 01:00:05,490
0,780 840,1440 1440,1680 1680,2160 2160,2670
immunization because of clocks, naturally

1578
01:00:05,490 --> 01:00:07,340
0,570
drift.

1579
01:00:09,160 --> 01:00:10,750
0,690 690,900 900,1350 1350,1500 1500,1590
Um, and so you know

1580
01:00:10,750 --> 01:00:11,710
0,210 210,420 420,660 660,870 870,960
when you think it's you

1581
01:00:11,710 --> 01:00:13,420
0,150 150,480 480,690 690,1290 1290,1710
know whatever ten p.m and

1582
01:00:13,420 --> 01:00:15,010
0,210 210,360 360,1080 1080,1200 1200,1590
plus one microsecond you know

1583
01:00:15,310 --> 01:00:16,750
0,420 420,810 810,1050 1050,1260 1260,1440
my machine might think it's

1584
01:00:16,750 --> 01:00:18,580
0,150 150,300 300,1020 1050,1260 1260,1830
you know a ten p.m

1585
01:00:18,580 --> 01:00:20,080
0,540 540,690 690,1020 1020,1200 1200,1500
and two plus two micro

1586
01:00:20,080 --> 01:00:22,300
0,480 750,1290 1290,1530 1530,1770 1770,2220
seconds, um and just basically

1587
01:00:22,300 --> 01:00:23,110
0,270 270,330 330,480 480,630 630,810
because you know they're sort

1588
01:00:23,110 --> 01:00:24,880
0,120 810,990 990,1170 1170,1620 1620,1770
of in your machine or

1589
01:00:24,880 --> 01:00:26,560
0,150 150,270 270,690 690,870 870,1680
in the servers that oscillators

1590
01:00:26,560 --> 01:00:27,550
0,90 90,180 180,420 480,720 720,990
you know that keep track

1591
01:00:27,550 --> 01:00:29,410
0,90 90,720 870,1230 1230,1380 1380,1860
of time they are supposed

1592
01:00:29,410 --> 01:00:32,140
0,420 630,1410 1500,2580 2580,2670 2670,2730
to a run at a

1593
01:00:32,140 --> 01:00:33,790
0,360 360,900 900,1020 1020,1110 1110,1650
particular frequency, but the frequency

1594
01:00:33,790 --> 01:00:35,170
0,120 120,240 240,360 360,720 840,1380
you know it's not perfect,

1595
01:00:35,380 --> 01:00:36,640
0,540 540,630 630,720 720,990 990,1260
um, you know and better

1596
01:00:36,640 --> 01:00:38,500
0,480 480,600 600,1140 1140,1440 1440,1860
clocks, you know Adam clocks

1597
01:00:38,500 --> 01:00:40,660
0,90 90,480 720,1260 1260,1920 1920,2160
you have better oscillators that

1598
01:00:40,660 --> 01:00:43,360
0,150 150,480 480,1050 1080,1920 2130,2700
are much more precise a

1599
01:00:43,360 --> 01:00:43,900
0,150 150,240 240,390 390,450 450,540
and as sort of the

1600
01:00:43,900 --> 01:00:45,640
0,180 180,240 240,660 660,1020 1020,1740
kind of clocks that a

1601
01:00:46,390 --> 01:00:47,530
0,420 420,510 510,660 660,750 750,1140
spider is sort of lying

1602
01:00:47,530 --> 01:00:48,640
0,240 240,390 390,510 510,810 840,1110
on that, you know pretty

1603
01:00:48,640 --> 01:00:50,710
0,270 270,870 990,1290 1290,1710 1710,2070
high precision but there's still

1604
01:00:50,710 --> 01:00:52,180
0,150 150,300 300,690 750,1260 1260,1470
they need to synchronize once

1605
01:00:52,180 --> 01:00:53,290
0,60 60,90 90,360 360,480 480,1110
in a while with common

1606
01:00:53,290 --> 01:00:55,000
0,90 90,360 480,900 900,1410 1410,1710
you know global time and

1607
01:00:55,390 --> 01:00:56,020
0,540
um.

1608
01:00:56,340 --> 01:00:58,560
0,570 780,1140 1140,1740 1770,1950 1950,2220
So to avoid the problem

1609
01:00:58,560 --> 01:01:00,750
0,90 90,510 510,1170 1170,1860 1860,2190
of drift, a pretty precise

1610
01:01:00,750 --> 01:01:02,730
0,420 420,720 720,1020 1020,1410 1410,1980
clocks, they use atomic clocks.

1611
01:01:04,600 --> 01:01:06,370
0,270 270,360 360,960 1110,1530 1530,1770
Which are more besides than

1612
01:01:06,370 --> 01:01:07,210
0,240 240,330 330,660 660,720 720,840
like the clocks in your

1613
01:01:07,210 --> 01:01:09,370
0,570 990,1590 1590,1860 1860,2010 2010,2160
computer a and then they

1614
01:01:09,370 --> 01:01:14,020
0,570 570,720 720,1470 1470,1920 4380,4650
synchronize with global time to

1615
01:01:14,020 --> 01:01:16,390
0,150 150,690 720,990 990,1650 1680,2370
make sure like all a

1616
01:01:16,420 --> 01:01:18,700
0,390 390,510 510,1050 1050,1980 1980,2280
clocks or agree on the

1617
01:01:18,730 --> 01:01:19,690
0,300 300,600 600,690 690,840 840,960
global time and then they

1618
01:01:19,690 --> 01:01:20,740
0,180 180,240 240,450 450,750 750,1050
sort of keep ticking ticking

1619
01:01:20,740 --> 01:01:22,690
0,480 780,930 930,1260 1260,1440 1440,1950
ticking and then {re-synchronized -}

1620
01:01:22,690 --> 01:01:23,520
0,630
periodically.

1621
01:01:25,040 --> 01:01:27,500
0,240 240,600 600,1050 1050,1710 2280,2460
A signature clocks and um

1622
01:01:27,500 --> 01:01:28,940
0,240 240,510 510,780 780,1020 1020,1440
with global time and they

1623
01:01:28,940 --> 01:01:31,220
0,240 240,690 690,990 990,1500 1590,2280
use GPS global positioning system

1624
01:01:31,550 --> 01:01:34,400
0,150 150,360 360,1140 1170,1860 2040,2850
a that broadcast time, um,

1625
01:01:34,400 --> 01:01:36,410
0,480 480,690 690,930 930,1470 1470,2010
as a way to a

1626
01:01:36,410 --> 01:01:38,210
0,510 510,660 660,930 930,1350 1350,1800
synchronize, these different Adam clocks

1627
01:01:38,210 --> 01:01:39,860
0,300 300,750 870,1170 1170,1410 1410,1650
and then keep them running

1628
01:01:39,860 --> 01:01:40,520
0,90 90,450
in sync.

1629
01:01:41,210 --> 01:01:42,860
0,300 300,420 420,540 540,690 690,1650
And so it looks like

1630
01:01:42,890 --> 01:01:44,000
0,270 270,480 480,630 630,870 870,1110
paper doesn't really say too

1631
01:01:44,000 --> 01:01:45,980
0,330 330,660 660,900 900,1200 1200,1980
much about actually how the

1632
01:01:46,190 --> 01:01:48,140
0,210 210,510 510,870 870,1350 1590,1950
true time system works, but

1633
01:01:48,140 --> 01:01:49,310
0,90 90,270 270,450 450,780 780,1170
it looks like they have

1634
01:01:49,310 --> 01:01:50,960
0,450 450,690 690,990 990,1140 1140,1650
maybe a few or one

1635
01:01:50,990 --> 01:01:53,060
0,510 510,990 990,1290 1290,1560 1560,2070
atomic clock per data center

1636
01:01:53,570 --> 01:01:55,820
0,630 630,870 870,1620 1620,1710 1710,2250
servers and synchronize you without

1637
01:01:55,820 --> 01:01:59,330
0,240 240,810 810,1080 1080,2100 3060,3510
time server to regularly synchronize

1638
01:01:59,330 --> 01:02:01,370
0,120 120,450 450,840 840,1590 1620,2040
their local clocks with a

1639
01:02:01,400 --> 01:02:03,290
0,210 210,810 1320,1590 1590,1620 1620,1890
time master and a different

1640
01:02:03,290 --> 01:02:04,430
0,180 180,630 630,720 720,960 960,1140
time mastering the different data

1641
01:02:04,430 --> 01:02:09,080
0,390 390,2250 3270,3780 3780,4530 4530,4650
centers z, um through the

1642
01:02:09,080 --> 01:02:09,900
0,360 360,720
GPS system.

1643
01:02:11,260 --> 01:02:12,790
0,450 450,720 720,960 960,1290 1290,1530
Um, but and so as

1644
01:02:12,790 --> 01:02:14,530
0,90 90,720 720,810 810,1410 1440,1740
a result the clocks are

1645
01:02:14,530 --> 01:02:15,940
0,360 360,600 600,750 750,1050 1050,1410
actually on the different servers

1646
01:02:15,940 --> 01:02:18,340
0,180 180,480 480,1170 1320,2100 2100,2400
are pretty close, um in

1647
01:02:18,340 --> 01:02:19,210
0,300 300,540 540,690 690,780 780,870
terms of you know they

1648
01:02:19,210 --> 01:02:20,410
0,180 180,360 360,450 450,1110 1110,1200
talk about the excellent you

1649
01:02:20,410 --> 01:02:21,580
0,90 90,270 270,480 480,930 930,1170
know what the error rate

1650
01:02:21,580 --> 01:02:22,600
0,300 300,510 510,660 660,780 780,1020
is and so it seems

1651
01:02:22,600 --> 01:02:24,640
0,150 150,270 270,870 1110,1890 1890,2040
like the excellent afford their

1652
01:02:24,640 --> 01:02:25,450
0,360 360,420 420,540 540,690 690,810
clocks, you can look at

1653
01:02:25,450 --> 01:02:26,470
0,150 150,240 240,480 630,960 960,1020
one of the tables at

1654
01:02:26,470 --> 01:02:27,520
0,150 150,300 300,390 390,450 450,1050
the end of the paper

1655
01:02:27,580 --> 01:02:28,420
0,150 150,240 240,300 300,690 690,840
is in the order of

1656
01:02:28,420 --> 01:02:29,820
0,120 120,360 360,660 660,1260
a few micro seconds.

1657
01:02:30,060 --> 01:02:33,520
0,750 780,1020 1020,1260 1260,2190
To a few milliseconds.

1658
01:02:34,470 --> 01:02:35,000
0,120
Yes.

1659
01:02:35,440 --> 01:02:37,210
0,210 210,390 390,930 960,1110 1110,1770
And so when a machine

1660
01:02:37,210 --> 01:02:39,190
0,540 570,690 690,870 870,1710 1710,1980
beach, you know ask the

1661
01:02:39,190 --> 01:02:40,510
0,420 420,750 750,1020 1020,1200 1200,1320
operating system, please give me

1662
01:02:40,510 --> 01:02:41,890
0,180 180,420 420,720 720,1020 1020,1380
what the current time is,

1663
01:02:42,220 --> 01:02:43,540
0,300 300,420 420,690 690,1050 1050,1320
um, the current time that

1664
01:02:43,540 --> 01:02:45,520
0,270 270,840 1320,1710 1710,1770 1770,1980
gets Richard maybe a few

1665
01:02:45,520 --> 01:02:47,590
0,270 270,660 660,1140 1440,1920 1920,2070
micro seconds off from to

1666
01:02:47,590 --> 01:02:48,940
0,540 570,810 810,1080 1080,1140 1140,1350
time or even a few

1667
01:02:48,940 --> 01:02:50,680
0,810 810,1080 1080,1230 1230,1350 1350,1740
milliseconds off them two times.

1668
01:02:53,160 --> 01:02:54,120
0,660
Okay.

1669
01:02:55,110 --> 01:02:55,800
0,180 180,360 360,450 450,570 570,690
So there's a bit of

1670
01:02:55,800 --> 01:02:56,940
0,180 180,480 480,690 690,810 810,1140
a bow, yeah go ahead

1671
01:02:57,030 --> 01:02:59,640
0,810 1170,1470 1470,1830 1830,2400 2430,2610
before yeah so, um, so

1672
01:02:59,640 --> 01:03:01,380
0,150 150,240 240,1290 1290,1590 1590,1740
like the paper, I mean

1673
01:03:01,380 --> 01:03:02,130
0,120 120,210 210,510 510,630 630,750
as you mentioned, we did

1674
01:03:02,130 --> 01:03:03,720
0,210 210,390 390,600 600,1350 1350,1590
not really go into that

1675
01:03:03,720 --> 01:03:05,490
0,240 660,1080 1080,1230 1230,1320 1320,1770
but just like the process

1676
01:03:05,490 --> 01:03:07,050
0,180 180,780 780,870 870,1320 1320,1560
of synchronizing the clocks or

1677
01:03:07,050 --> 01:03:09,210
0,570 690,1290 1290,1590 1590,2040 2040,2160
even measuring how different they

1678
01:03:09,210 --> 01:03:10,560
0,210 210,600 750,840 840,1080 1080,1350
are here, I mean shouldn't

1679
01:03:10,560 --> 01:03:11,670
0,90 90,390 390,750 750,930 930,1110
we also account for the

1680
01:03:11,670 --> 01:03:13,620
0,480 480,780 780,870 870,1320 1320,1950
time of the message travel,

1681
01:03:13,650 --> 01:03:15,510
0,90 90,270 270,1110 1110,1560 1560,1860
I mean yeah yeah I

1682
01:03:15,510 --> 01:03:16,350
0,150 150,300 300,450 450,600 600,840
think that's what they mean

1683
01:03:16,350 --> 01:03:17,160
0,90 90,390 390,510 510,690 690,810
I'm sorry I didn't say

1684
01:03:17,160 --> 01:03:17,970
0,180 180,420 420,540 540,690 690,810
much about this but that's

1685
01:03:17,970 --> 01:03:18,960
0,180 180,300 300,570 570,690 690,990
what they mean so they

1686
01:03:18,990 --> 01:03:19,890
0,210 210,270 270,480 480,600 600,900
sort of keep a running

1687
01:03:19,890 --> 01:03:21,390
0,480 480,690 690,870 870,1050 1050,1500
estimate about what they think

1688
01:03:21,390 --> 01:03:23,070
0,90 90,300 300,840 1050,1380 1380,1680
you know the for example

1689
01:03:23,070 --> 01:03:24,000
0,90 90,510 510,600 600,690 690,930
to synchronize with the time

1690
01:03:24,000 --> 01:03:26,910
0,630 840,1470 1500,1920 1920,2550 2580,2910
master the usually the time

1691
01:03:26,910 --> 01:03:28,440
0,450 450,570 570,630 630,840 840,1530
library on the local machine

1692
01:03:28,440 --> 01:03:30,630
0,480 480,840 840,1290 1290,1680 1710,2190
keeps a track of the

1693
01:03:30,870 --> 01:03:31,890
0,300 300,360 360,540 540,600 600,1020
start to make an estimate

1694
01:03:31,890 --> 01:03:33,480
0,90 90,690 690,840 840,1170 1170,1590
of what is the average

1695
01:03:33,480 --> 01:03:36,120
0,330 330,600 870,1590 1590,2040 2040,2640
delay or normal delay for

1696
01:03:36,150 --> 01:03:37,290
0,330 330,390 390,750 750,810 810,1140
sending or receiving a message

1697
01:03:37,290 --> 01:03:38,970
0,90 90,180 180,390 390,810 1410,1680
to the time master and

1698
01:03:38,970 --> 01:03:41,010
0,360 360,570 570,990 990,1350 1350,2040
basically use adapt to correct

1699
01:03:41,010 --> 01:03:43,920
0,270 270,870 900,1650 1680,2190 2190,2910
for any a small mistakes,

1700
01:03:45,300 --> 01:03:47,220
0,660 690,930 930,1350 1350,1470 1470,1920
then they also the protocol

1701
01:03:47,220 --> 01:03:49,020
0,360 360,510 510,900 900,1110 1110,1800
clearly have support for outliers

1702
01:03:49,020 --> 01:03:50,490
0,210 210,480 480,810 810,1440 1440,1470
and so your outliers, I

1703
01:03:50,490 --> 01:03:51,570
0,240 240,480 480,720 720,990 990,1080
mean something bad happened in

1704
01:03:51,570 --> 01:03:53,250
0,60 60,420 420,510 510,1140 1260,1680
the network, and therefore a

1705
01:03:53,250 --> 01:03:54,570
0,210 210,420 420,720 720,900 900,1320
your time stand got believed

1706
01:03:54,570 --> 01:03:55,080
0,60 60,150 150,450
in a lot.

1707
01:03:55,110 --> 01:03:56,520
0,300 300,720 720,870 870,1080 1080,1410
So you should not include

1708
01:03:56,520 --> 01:03:58,140
0,510 630,1290 1290,1410 1410,1470 1470,1620
those, um, and I guess

1709
01:03:58,140 --> 01:03:59,190
0,150 150,210 210,480 480,840 840,1050
there's a third problem which

1710
01:03:59,190 --> 01:04:00,660
0,210 210,570 570,630 630,1140 1140,1470
is you know sometimes these

1711
01:04:00,660 --> 01:04:03,480
0,780 780,1440 1440,1830 1920,2010 2010,2820
simulators go cuckoo, you know

1712
01:04:03,480 --> 01:04:05,460
0,360 780,930 930,1110 1110,1440 1440,1980
just are not correct anymore

1713
01:04:05,610 --> 01:04:06,870
0,180 180,300 300,390 390,630 630,1260
and so they may return

1714
01:04:06,930 --> 01:04:09,660
0,420 420,1080 1080,1380 1380,2130 2610,2730
incorrect values and so you

1715
01:04:09,660 --> 01:04:10,770
0,150 150,480 480,660 660,990 990,1110
know again the burger they

1716
01:04:10,770 --> 01:04:11,640
0,210 210,450 450,600 600,690 690,870
don't talk about the great

1717
01:04:11,640 --> 01:04:12,870
0,180 180,240 240,660 660,930 1080,1230
amount of detail but it

1718
01:04:12,870 --> 01:04:14,730
0,240 240,480 480,900 900,1440 1440,1860
seems those gsa use similar

1719
01:04:14,730 --> 01:04:16,920
0,420 420,630 630,1500 1680,1980 1980,2190
techniques like ntp to deal

1720
01:04:16,920 --> 01:04:18,030
0,90 90,240 240,420 420,480 480,1110
with those kinds of problems.

1721
01:04:19,680 --> 01:04:21,140
0,240 240,360 360,570 570,870
I say thank you.

1722
01:04:23,600 --> 01:04:24,590
0,270 270,330 330,510 510,900 900,990
So if you're interested in

1723
01:04:24,590 --> 01:04:26,420
0,180 180,360 360,420 420,870 1080,1830
this kind of stuff, um

1724
01:04:26,420 --> 01:04:28,160
0,390 390,750 750,930 930,1560 1560,1740
there's vertical cut ntp that

1725
01:04:28,160 --> 01:04:29,600
0,450 450,660 660,930 930,1320 1320,1440
actually when your computer and

1726
01:04:29,600 --> 01:04:31,430
0,330 330,690 690,870 870,1380 1380,1830
double uses to actually synchronize

1727
01:04:31,430 --> 01:04:33,860
0,120 120,570 1470,1950 1950,2130 2130,2430
its clock with no global

1728
01:04:33,860 --> 01:04:36,080
0,510 810,1260 1260,1650 1650,2100 2100,2220
time, um and ntp has

1729
01:04:36,080 --> 01:04:37,640
0,150 150,300 300,480 480,570 570,1560
all these kind of mechanism

1730
01:04:37,670 --> 01:04:39,590
0,600 600,930 930,1110 1350,1530 1530,1920
built into it, but entropy

1731
01:04:39,590 --> 01:04:41,000
0,120 120,570 570,1050 1050,1260 1260,1410
is not it doesn't have

1732
01:04:41,000 --> 01:04:42,410
0,90 90,480 480,1170 1170,1320 1320,1410
the same position or the

1733
01:04:42,410 --> 01:04:45,770
0,480 1320,1680 1680,2250 2520,2910 2910,3360
same small margins, um that

1734
01:04:45,770 --> 01:04:47,320
0,600 600,780 780,1050 1050,1470
actually true, can ass.

1735
01:04:49,390 --> 01:04:50,170
0,210 210,330 330,390 390,690 690,780
And so I think it

1736
01:04:50,170 --> 01:04:50,800
0,90 90,300 300,390 390,510 510,630
could be you know you

1737
01:04:50,800 --> 01:04:51,880
0,120 120,240 240,630 630,780 780,1080
should be thinking that these

1738
01:04:51,880 --> 01:04:53,080
0,180 180,450 450,600 600,720 720,1200
error rates are in order

1739
01:04:53,080 --> 01:04:55,270
0,180 540,1230 1230,1380 1380,1500 1500,2190
of a you know milliseconds

1740
01:04:55,270 --> 01:04:56,650
0,90 90,270 270,870 870,1260 1260,1380
to ten milliseconds, basically it

1741
01:04:56,650 --> 01:04:57,730
0,180 180,240 240,420 420,900 900,1080
has to do mostly with

1742
01:04:57,730 --> 01:04:58,760
0,90 90,480 480,780
the roundtrip time.

1743
01:04:59,790 --> 01:05:00,960
0,780
Socks.

1744
01:05:03,060 --> 01:05:04,020
0,210 210,360 360,540 540,810 810,960
And you further questions about

1745
01:05:04,020 --> 01:05:04,600
0,300
this.

1746
01:05:07,600 --> 01:05:09,880
0,300 300,720 1050,1650 1770,2160 2160,2280
Okay, so a caution that

1747
01:05:09,880 --> 01:05:11,620
0,300 300,960 990,1260 1260,1440 1440,1740
perfectly synchronized you know there's

1748
01:05:11,620 --> 01:05:12,850
0,360 360,630 630,660 660,1110 1110,1230
basically there's a margin of

1749
01:05:12,850 --> 01:05:15,610
0,450 870,1350 1350,1590 1590,2130 2130,2760
error and what basically the

1750
01:05:15,640 --> 01:05:17,320
0,120 120,360 360,750 750,1140 1140,1680
two time dollars is actually

1751
01:05:17,320 --> 01:05:19,420
0,510 510,1080 1380,1650 1650,1800 1800,2100
a giving a two time

1752
01:05:19,420 --> 01:05:21,340
0,270 270,330 330,1260 1260,1830 1830,1920
gives you no answer, you

1753
01:05:21,340 --> 01:05:22,510
0,180 180,420 420,540 540,900 900,1170
know gives you certain best

1754
01:05:22,510 --> 01:05:23,530
0,510 510,720 720,780 780,960 960,1020
estimated guess of what the

1755
01:05:23,530 --> 01:05:25,390
0,420 420,870 870,1350 1350,1740 1740,1860
current um, absolute timer to

1756
01:05:25,390 --> 01:05:26,980
0,300 300,660 900,1080 1080,1500 1500,1590
time is a plus you

1757
01:05:26,980 --> 01:05:28,450
0,60 60,450 450,870 870,1200 1200,1470
know what the machine things

1758
01:05:28,450 --> 01:05:29,470
0,120 120,210 210,540 540,660 660,1020
is the margin of error.

1759
01:05:30,400 --> 01:05:34,420
0,360 360,840 1200,1890 2460,3240 3360,4020
And so, um, and um,

1760
01:05:34,420 --> 01:05:35,980
0,210 210,360 360,480 480,1200 1200,1560
and so the solution or

1761
01:05:36,280 --> 01:05:38,350
0,420 420,630 630,1200 1200,1530 1560,2070
a to solve to deal

1762
01:05:38,350 --> 01:05:40,840
0,330 330,600 600,990 990,1530 1980,2490
with this clock drift, um

1763
01:05:40,840 --> 01:05:43,930
0,870 870,1500 1620,2010 2010,2580 2790,3090
is to not use time

1764
01:05:43,930 --> 01:05:45,940
0,720 870,1020 1020,1200 1200,1440 1440,2010
stamps, they have true time

1765
01:05:45,940 --> 01:05:47,080
0,120 120,390 390,630 630,870 870,1140
or just just pure time

1766
01:05:47,080 --> 01:05:49,150
0,570 750,1230 1230,1470 1470,1860 1860,2070
stamps, um, but basically time

1767
01:05:49,150 --> 01:05:50,480
0,330 330,480 480,1170
stamps are involved.

1768
01:06:00,120 --> 01:06:03,150
0,210 210,420 420,990 1380,1980 2310,3030
And so every a value

1769
01:06:03,150 --> 01:06:05,940
0,510 510,1020 1020,1740 1770,2280 2280,2790
return from a now from

1770
01:06:05,940 --> 01:06:08,490
0,90 90,360 360,900 1140,1980 1980,2550
the current time basically has

1771
01:06:09,090 --> 01:06:10,500
0,330 330,1020
the earliest.

1772
01:06:11,080 --> 01:06:14,480
0,450 450,630 630,1470
And the latest.

1773
01:06:15,190 --> 01:06:16,630
0,240 240,390 390,450 450,1110 1110,1440
And so, for example I

1774
01:06:16,630 --> 01:06:17,560
0,210 210,450 450,570 570,630 630,930
we ask for the current

1775
01:06:17,560 --> 01:06:20,530
0,600 810,1740 1740,2190 2190,2400 2400,2970
time, um, and it is

1776
01:06:20,530 --> 01:06:22,180
0,180 180,510 510,780 990,1230 1230,1650
true time is ten am

1777
01:06:22,180 --> 01:06:24,070
0,120 120,300 300,840 960,1680 1680,1890
or two PM, um, it

1778
01:06:24,070 --> 01:06:26,080
0,240 240,510 510,1140 1140,1530 1530,2010
might return interval saying well

1779
01:06:26,080 --> 01:06:27,250
0,90 90,510 510,750 750,900 900,1170
the earliest it could be

1780
01:06:27,250 --> 01:06:29,170
0,420 420,570 570,870 870,1380 1560,1920
is you know a one

1781
01:06:29,170 --> 01:06:31,020
0,570 570,870 870,1140 1140,1650
PM one fifty nine.

1782
01:06:31,340 --> 01:06:33,380
0,510 510,570 570,690 690,1530 1530,2040
And you know 59 seconds

1783
01:06:33,380 --> 01:06:36,380
0,660 660,810 810,930 930,1590 1920,3000
and you know whatever a

1784
01:06:36,410 --> 01:06:38,570
0,480 480,750 750,1320 1620,1740 1740,2160
twenty micro seconds you know

1785
01:06:38,570 --> 01:06:40,190
0,210 210,930 930,1200 1200,1500 1500,1620
and latest might be you

1786
01:06:40,190 --> 01:06:42,560
0,270 390,1050 1050,1320 1320,1920 1920,2370
know a two p.m and

1787
01:06:42,560 --> 01:06:43,520
0,390 390,450 450,540 540,690 690,960
plus you know two micro

1788
01:06:43,520 --> 01:06:44,240
0,480
seconds.

1789
01:06:45,340 --> 01:06:46,660
0,210 210,360 360,690 690,870 870,1320
And some machines might be

1790
01:06:46,660 --> 01:06:47,560
0,270 270,540 540,690 690,750 750,900
a more than a couple

1791
01:06:47,560 --> 01:06:48,790
0,60 60,300 300,720 720,870 870,1230
of micro seconds, some machine

1792
01:06:48,790 --> 01:06:50,800
0,210 210,480 480,1230 1590,1920 1920,2010
might even milliseconds and I

1793
01:06:50,800 --> 01:06:51,880
0,270 270,480 480,960 960,1020 1020,1080
guess some things in the

1794
01:06:51,880 --> 01:06:53,590
0,510 510,630 630,930 930,1320 1320,1710
paper, the margin sometimes are

1795
01:06:53,590 --> 01:06:55,090
0,240 240,480 480,630 630,840 840,1500
in order of ten milliseconds

1796
01:06:55,090 --> 01:06:57,790
0,300 360,810 810,1440 2400,2640 2640,2700
or multiple milliseconds, but it

1797
01:06:57,790 --> 01:06:59,560
0,180 180,480 690,810 810,1440 1530,1770
gives him an interval and

1798
01:06:59,560 --> 01:07:00,940
0,330 330,960 960,1110 1110,1170 1170,1380
it's guaranteed that the true

1799
01:07:00,940 --> 01:07:02,830
0,450 480,750 750,1260 1260,1440 1440,1890
time is within that interval.

1800
01:07:04,110 --> 01:07:06,000
0,210 210,420 420,540 540,1170 1170,1890
It's a it's a interval

1801
01:07:06,030 --> 01:07:07,860
0,570 570,720 720,900 900,1500
epsilon a to epsilon.

1802
01:07:08,850 --> 01:07:11,240
0,1140 1170,1590 1590,1680 1680,2130
I need my bag.

1803
01:07:11,560 --> 01:07:12,520
0,90 90,330 330,540 540,690 690,960
The paper doesn't really talk

1804
01:07:12,520 --> 01:07:13,690
0,420 420,540 540,780 780,960 960,1170
about it, um, in that

1805
01:07:13,690 --> 01:07:15,340
0,510 630,990 990,1170 1170,1350 1350,1650
sense, um, it is just

1806
01:07:15,340 --> 01:07:16,630
0,300 300,780 780,1020 1020,1200 1200,1290
an estimate about what the

1807
01:07:16,630 --> 01:07:18,280
0,300 300,420 420,750 750,1170
margin of error is.

1808
01:07:22,170 --> 01:07:23,250
0,300 300,300 300,750 750,870 870,1080
And I think if you

1809
01:07:23,250 --> 01:07:24,420
0,270 270,360 360,510 510,1080 1080,1170
look at the details of

1810
01:07:24,420 --> 01:07:26,280
0,510 540,960 960,1260 1260,1440 1440,1860
their vertical often that margin

1811
01:07:26,280 --> 01:07:27,360
0,330 330,540 540,780 780,960 960,1080
area curve boils down to

1812
01:07:27,360 --> 01:07:28,360
0,180 180,600
two epsilon.

1813
01:07:32,570 --> 01:07:33,380
0,540
Okay.

1814
01:07:34,840 --> 01:07:36,040
0,240 240,390 390,840 840,990 990,1200
Now to deal so now

1815
01:07:36,040 --> 01:07:38,050
0,90 90,210 210,270 270,900 1200,2010
we need to adjust a

1816
01:07:38,050 --> 01:07:39,910
0,570 600,1260 1260,1530 1530,1740 1740,1860
our protocols right because our

1817
01:07:39,910 --> 01:07:41,740
0,570 570,720 720,870 870,1410 1410,1830
protocols have some rules that,

1818
01:07:42,190 --> 01:07:43,930
0,840 840,870 990,1350 1350,1410 1410,1740
um, um setting the start

1819
01:07:43,930 --> 01:07:46,120
0,540 570,930 930,1200 1200,1830 1860,2190
time for time stamp or

1820
01:07:46,120 --> 01:07:47,500
0,270 270,360 360,630 630,900 900,1380
sending the start time for

1821
01:07:47,500 --> 01:07:48,850
0,390 390,840 840,1050 1050,1140 1140,1350
a transaction using a time

1822
01:07:48,850 --> 01:07:51,820
0,450 840,1530 1530,2280 2280,2520 2520,2970
stamp and a in a

1823
01:07:51,820 --> 01:07:54,460
0,480 480,1050 1320,2100 2130,2310 2310,2640
rule for a you know

1824
01:07:54,580 --> 01:07:56,950
0,870 870,1650 1740,2040 2040,2250 2250,2370
reach my way to the

1825
01:07:56,950 --> 01:07:58,480
0,420 420,870 1050,1260 1260,1440 1440,1530
cigarettes right, and also you

1826
01:07:58,480 --> 01:07:59,650
0,150 150,540 540,720 720,870 930,1170
know basically there's a couple

1827
01:07:59,650 --> 01:08:00,280
0,60 60,330 330,420 420,570 570,630
of rules that need to

1828
01:08:00,280 --> 01:08:02,320
0,90 90,780 810,1080 1080,1410 1410,2040
be changed to deal with

1829
01:08:02,320 --> 01:08:04,960
0,900 1050,1680 1680,1830 1830,2250 2250,2640
a intervals as opposed to

1830
01:08:04,960 --> 01:08:06,820
0,600 600,1170 1200,1410 1410,1800
with a true type.

1831
01:08:08,030 --> 01:08:08,990
0,450 480,690 690,750 750,870 870,960
So, first of all the

1832
01:08:08,990 --> 01:08:10,540
0,300 300,810
stars rule.

1833
01:08:11,020 --> 01:08:13,200
0,270 270,750
It's different.

1834
01:08:14,480 --> 01:08:17,480
0,660 660,1200 1230,1590 1590,2310 2400,3000
Um, so start rule, um.

1835
01:08:18,180 --> 01:08:19,700
0,1200
MHM.

1836
01:08:19,940 --> 01:08:22,100
0,330 330,450 450,750 750,1230 1950,2160
Is the current time we

1837
01:08:22,100 --> 01:08:23,600
0,690 690,780 780,1110 1110,1350 1350,1500
asked the computer, please tell

1838
01:08:23,600 --> 01:08:24,530
0,120 120,240 240,480 480,750 750,930
me the current time is

1839
01:08:24,530 --> 01:08:26,270
0,150 150,270 270,600 600,1080 1350,1740
get some info back and

1840
01:08:26,270 --> 01:08:27,560
0,270 270,480 510,930 930,1170 1170,1290
then the start time that

1841
01:08:27,560 --> 01:08:29,660
0,150 150,600 720,1200 1200,1350 1350,2100
we pick is the latest.

1842
01:08:32,690 --> 01:08:34,190
0,480 480,600 600,780 780,1020 1020,1500
And so that just means

1843
01:08:34,190 --> 01:08:36,710
0,270 270,1710 1710,1950 1950,2370 2370,2520
great z time stamp their

1844
01:08:36,710 --> 01:08:38,690
0,270 270,570 570,900 900,1530 1560,1980
star rule, actually science is

1845
01:08:38,690 --> 01:08:41,030
0,960 990,1110 1110,1380 1380,2130 2160,2340
guaranteed to be after through

1846
01:08:41,030 --> 01:08:41,660
0,360
time.

1847
01:08:42,540 --> 01:08:43,440
0,330 330,450 450,630 630,810 810,900
So we know that two

1848
01:08:43,440 --> 01:08:44,700
0,330 330,390 390,480 480,990
times in the past.

1849
01:08:45,300 --> 01:08:46,170
0,240 240,450 450,540 540,720 720,870
And if we read all

1850
01:08:46,170 --> 01:08:47,520
0,120 120,810 960,1050 1050,1140 1140,1350
the transactions you know this

1851
01:08:47,520 --> 01:08:48,720
0,120 120,240 240,510 510,600 600,1200
is a sign to the

1852
01:08:48,720 --> 01:08:51,440
0,270 270,360 360,450 450,1200
start of the transaction.

1853
01:08:53,180 --> 01:08:55,760
0,330 330,900 900,1470 1470,1890 1890,2580
And for rewriting success before

1854
01:08:55,880 --> 01:08:56,870
0,240 240,600 600,810 810,930 930,990
it actually has at the

1855
01:08:56,870 --> 01:08:58,100
0,300 300,450 450,540 540,840 840,1230
point that the committee starts.

1856
01:09:00,250 --> 01:09:01,660
0,150 150,360 360,570 570,810 810,1410
So that part doesn't change

1857
01:09:01,720 --> 01:09:02,530
0,150 150,330 330,480 480,600 600,810
the only part that really

1858
01:09:02,530 --> 01:09:03,970
0,450 450,660 660,1020 1140,1320 1320,1440
changes is that you get

1859
01:09:03,970 --> 01:09:05,170
0,150 150,570 570,660 660,750 750,1200
the endpoint of the interval.

1860
01:09:06,050 --> 01:09:06,740
0,180 180,330 330,450 450,600 600,690
And we can get the

1861
01:09:06,740 --> 01:09:07,880
0,360 360,420 420,510 510,990 990,1140
endpoint of the interval so

1862
01:09:07,880 --> 01:09:08,960
0,150 150,300 300,570 570,720 720,1080
that at least two times

1863
01:09:08,960 --> 01:09:11,760
0,600
past.

1864
01:09:12,080 --> 01:09:13,040
0,210 210,660
As fast.

1865
01:09:13,480 --> 01:09:16,150
0,360 360,810 1080,2340 2340,2400 2400,2670
Okay, then there's a second

1866
01:09:16,150 --> 01:09:17,470
0,570 600,840 840,930 930,1110 1110,1320
rule that we didn't have

1867
01:09:17,470 --> 01:09:19,450
0,630 1230,1500 1500,1590 1590,1680 1680,1980
before which is to commit

1868
01:09:19,450 --> 01:09:20,660
0,240 240,690
wage rule.

1869
01:09:21,260 --> 01:09:23,270
0,660 870,1320 1320,1470 1470,1650 1650,2010
And um, we're gonna delay

1870
01:09:23,270 --> 01:09:25,940
0,120 120,750 750,1620 2040,2460 2460,2670
in transaction, so if that

1871
01:09:25,940 --> 01:09:26,840
0,120 120,360 360,510 510,630 630,900
is actually got some time

1872
01:09:26,840 --> 01:09:28,340
0,510 510,630 630,780 780,1050 1050,1500
stamped at the commit time,

1873
01:09:28,580 --> 01:09:30,350
0,690 690,900 900,1260 1260,1320 1320,1770
um, we started to commit

1874
01:09:30,350 --> 01:09:31,850
0,150 150,390 390,1140 1170,1440 1440,1500
and then we get to

1875
01:09:31,850 --> 01:09:32,750
0,150 150,330 330,450 450,510 510,900
the end of the committee.

1876
01:09:33,310 --> 01:09:34,510
0,480 480,630 630,750 750,810 810,1200
Then we're going to delay

1877
01:09:34,510 --> 01:09:35,540
0,180 180,660
that commit.

1878
01:09:36,260 --> 01:09:39,950
0,450 450,750 750,1080 1080,1800 3060,3690
A delay commit until the

1879
01:09:39,980 --> 01:09:41,720
0,390 390,840 840,990 990,1140 1140,1740
time stamp that was assigned

1880
01:09:41,720 --> 01:09:42,590
0,180 180,270 270,690 690,780 780,870
at the starting of the

1881
01:09:42,590 --> 01:09:43,320
0,420
committee.

1882
01:09:43,520 --> 01:09:45,240
0,780 810,1410
Um is.

1883
01:09:45,410 --> 01:09:46,620
0,900
AH.

1884
01:09:49,340 --> 01:09:51,110
0,180 180,360 360,1110 1110,1410 1410,1770
Um, it surpassed for me,

1885
01:09:51,110 --> 01:09:52,310
0,90 90,390 390,750 750,1050 1050,1200
my notes around here for

1886
01:09:52,310 --> 01:09:53,840
0,300 300,690
one second.

1887
01:10:11,180 --> 01:10:14,450
0,600 600,720 720,780 780,1470 1590,3270
We're going to delay until.

1888
01:10:14,880 --> 01:10:15,920
0,660
Good.

1889
01:10:16,230 --> 01:10:19,020
0,300 300,630 630,930 930,1890 1920,2790
Time stamp is before a

1890
01:10:19,290 --> 01:10:20,900
0,480 480,1290
now earlier.

1891
01:10:26,390 --> 01:10:27,410
0,330 330,510 510,600 600,780 780,1020
Um, so we know that

1892
01:10:27,410 --> 01:10:28,640
0,300 300,390 390,780 780,1080 1080,1230
actually is definitely before two

1893
01:10:28,640 --> 01:10:29,300
0,300
times.

1894
01:10:32,180 --> 01:10:34,670
0,600 810,1320 1320,1830 2130,2310 2310,2490
Okay, um, so so that's

1895
01:10:34,670 --> 01:10:36,140
0,150 150,240 240,390 390,1140 1140,1470
sort of the modifications to

1896
01:10:36,140 --> 01:10:37,460
0,90 90,690 690,930 930,1110 1110,1320
the protocol, and let's see

1897
01:10:37,460 --> 01:10:38,840
0,360 360,570 570,990 990,1200 1200,1380
how that works, um with

1898
01:10:38,840 --> 01:10:40,040
0,30 30,330 330,960 960,1080 1080,1200
a simple example, they get

1899
01:10:40,040 --> 01:10:41,360
0,60 60,300 300,780 810,1050 1050,1320
a little more a feel

1900
01:10:41,360 --> 01:10:42,120
0,270 270,510
for it.

1901
01:10:48,890 --> 01:10:49,790
0,150 150,330 330,690 690,780 780,900
So, for example I'm going

1902
01:10:49,790 --> 01:10:51,410
0,60 60,510 510,720 720,1320 1320,1620
to use a slightly simpler

1903
01:10:51,410 --> 01:10:52,190
0,90 90,180 180,480 480,690 690,780
than the previous one, I'm

1904
01:10:52,190 --> 01:10:53,030
0,150 150,300 300,660 660,780 780,840
just gonna focus on the

1905
01:10:53,030 --> 01:10:54,770
0,480 480,660 660,840 840,1170 1170,1740
transaction, but just writes next.

1906
01:10:55,750 --> 01:10:57,070
0,180 180,390 390,660 660,1170 1170,1320
And we still have free

1907
01:10:57,070 --> 01:10:58,260
0,930
transactions.

1908
01:10:58,730 --> 01:11:00,410
0,180 180,720 720,870 870,1110 1110,1680
So here's A T one.

1909
01:11:01,110 --> 01:11:03,260
0,540 540,720 720,1140 1140,1830
And he was right.

1910
01:11:03,460 --> 01:11:05,140
0,300 300,780 780,930 930,1050 1050,1680
Two acts and then commits

1911
01:11:05,560 --> 01:11:07,150
0,570 570,990 990,1080 1080,1230 1230,1590
and just you know, let's

1912
01:11:07,150 --> 01:11:07,720
0,90 90,180 180,270 270,390 390,570
you know we don't really

1913
01:11:07,720 --> 01:11:08,590
0,240 240,360 360,540 540,720 720,870
care too much about these

1914
01:11:08,590 --> 01:11:10,330
0,540 540,630 630,960 960,1350 1350,1740
transactions, so let's see the

1915
01:11:10,450 --> 01:11:11,820
0,510 510,900
committed one.

1916
01:11:12,360 --> 01:11:13,840
0,330 330,450 450,750 750,1140
Just two times one.

1917
01:11:14,950 --> 01:11:16,030
0,240 240,390 390,480 480,660 660,1080
So now we're gonna run

1918
01:11:16,060 --> 01:11:19,060
0,510 510,750 750,1290 1860,2700 2700,3000
transaction to two and it's

1919
01:11:19,060 --> 01:11:20,080
0,240 240,750
gonna right.

1920
01:11:21,020 --> 01:11:22,250
0,210 210,420 420,840 840,1020 1020,1230
Yeah, so detection to two

1921
01:11:22,250 --> 01:11:23,870
0,90 90,450 450,810 810,1410 1410,1620
of course runs after t

1922
01:11:23,870 --> 01:11:24,860
0,480
one.

1923
01:11:25,900 --> 01:11:27,790
0,750 750,930 930,1470 1470,1650 1650,1890
And it writes you say

1924
01:11:27,790 --> 01:11:29,020
0,930
x2.

1925
01:11:29,280 --> 01:11:30,840
0,150 150,450 450,660 660,960 960,1560
So here right sacks, one

1926
01:11:30,840 --> 01:11:32,910
0,330 330,570 570,720 720,1260 1500,2070
rights to two X, um,

1927
01:11:32,910 --> 01:11:34,140
0,150 150,480 480,570 570,1080 1080,1230
it starts to prepare which

1928
01:11:34,140 --> 01:11:34,920
0,180 180,270 270,600 600,720 720,780
was the beginning of the

1929
01:11:34,920 --> 01:11:35,640
0,480
commit.

1930
01:11:35,860 --> 01:11:37,450
0,240 240,750 930,1350 1350,1530 1530,1590
And so, um at the

1931
01:11:37,450 --> 01:11:38,650
0,240 240,300 300,390 390,870 870,1200
beginning of the committee to

1932
01:11:38,650 --> 01:11:40,820
0,390 390,990 990,1320 1320,1830
ask for a time.

1933
01:11:41,320 --> 01:11:43,240
0,930 1230,1620 1620,1710 1710,1800 1800,1920
Um, and so it's going

1934
01:11:43,240 --> 01:11:44,290
0,60 60,180 180,240 240,600 600,1050
to get an interval back.

1935
01:11:44,770 --> 01:11:46,600
0,810 1050,1230 1230,1350 1350,1440 1440,1830
And you know we know

1936
01:11:46,600 --> 01:11:49,000
0,510 540,1290 1500,1830 1830,2220 2220,2400
that a true time that's

1937
01:11:49,000 --> 01:11:49,690
0,120 120,180 180,330 330,600 600,690
going to get back as

1938
01:11:49,690 --> 01:11:52,420
0,630 960,1530 1530,1890 1890,2070 2070,2730
some goal line that interval,

1939
01:11:52,540 --> 01:11:53,740
0,510 510,660 660,960 960,1050 1050,1200
um, but somewhere in that

1940
01:11:53,740 --> 01:11:55,030
0,420 600,780 780,870 870,1200 1200,1290
interval, so the interval in

1941
01:11:55,030 --> 01:11:56,050
0,240 240,360 360,810 810,900 900,1020
fact you might you know

1942
01:11:56,050 --> 01:11:57,580
0,420 480,870 870,1380 1380,1500 1500,1530
start well before you are

1943
01:11:57,580 --> 01:11:59,530
0,0 0,210 210,720 1110,1680 1680,1950
a true time, let's say

1944
01:11:59,530 --> 01:12:00,490
0,90 90,180 180,390 390,630 630,960
you know native file starts

1945
01:12:00,490 --> 01:12:01,720
0,210 210,480 510,660 660,720 720,1230
even at you know one

1946
01:12:01,960 --> 01:12:03,850
0,240 240,870 870,1110 1110,1320 1440,1890
which overlaps with the transaction

1947
01:12:03,850 --> 01:12:05,650
0,180 180,600 870,1590 1590,1710 1710,1800
to one and you know

1948
01:12:05,650 --> 01:12:07,630
0,540 540,780 780,1080 1080,1710 1740,1980
maybe the latest value of

1949
01:12:07,630 --> 01:12:08,890
0,120 120,450 450,870 870,1140 1140,1260
two times H O B

1950
01:12:08,890 --> 01:12:10,660
0,420 420,780 960,1230 1230,1410 1410,1770
involves ten so that's what

1951
01:12:10,660 --> 01:12:12,700
0,270 270,480 480,960 1140,1710 1710,2040
it gets back and what

1952
01:12:12,700 --> 01:12:14,110
0,450 630,960 960,1080 1080,1260 1260,1410
we're going to pick us

1953
01:12:14,110 --> 01:12:15,370
0,90 90,390 390,840 960,1110 1110,1260
the time stamp is going

1954
01:12:15,370 --> 01:12:16,930
0,120 120,510 540,900 900,1260 1260,1560
to pick this value ten.

1955
01:12:19,930 --> 01:12:20,830
0,270 270,390 390,540 540,690 690,900
And we want to pick

1956
01:12:20,830 --> 01:12:22,630
0,120 120,720 720,1350 1350,1650 1650,1800
the latest value because we

1957
01:12:22,630 --> 01:12:23,920
0,150 150,210 210,330 330,810 810,1290
want to be absolutely sure

1958
01:12:23,920 --> 01:12:25,030
0,390 420,570 570,720 720,900 900,1110
that you know if there's

1959
01:12:25,030 --> 01:12:27,640
0,90 90,750 1110,1500 1500,1860 1860,2610
a transaction that started before

1960
01:12:27,670 --> 01:12:29,260
0,690 690,840 840,960 960,1350 1380,1590
a you know the true

1961
01:12:29,260 --> 01:12:30,910
0,480 630,960 960,1380 1380,1500 1500,1650
time, um that you know

1962
01:12:30,910 --> 01:12:31,780
0,210 210,390 390,420 420,720 720,870
we pick a time that

1963
01:12:31,780 --> 01:12:33,220
0,120 120,480 480,810 810,1080 1080,1440
is definitely after that Jack

1964
01:12:33,220 --> 01:12:34,330
0,390 390,480 480,630 630,930 930,1110
that's the true type, so

1965
01:12:34,330 --> 01:12:35,350
0,120 120,270 270,420 420,750 750,1020
we're gonna pick ten which

1966
01:12:35,350 --> 01:12:37,270
0,90 90,510 510,990 990,1440 1680,1920
is definitely beyond one and

1967
01:12:37,270 --> 01:12:38,440
0,210 210,450 450,630 630,750 750,1170
so we'll never get confused

1968
01:12:38,440 --> 01:12:40,220
0,240 240,510 540,1020 1020,1560
about this previous transactions.

1969
01:12:41,460 --> 01:12:42,900
0,390 390,450 450,630 630,1140
Then, at some point.

1970
01:12:43,270 --> 01:12:44,530
0,120 120,300 300,420 420,600 600,1260
You know, so this transaction

1971
01:12:44,530 --> 01:12:46,180
0,90 90,360 420,1170 1200,1440 1440,1650
you know, um takes time,

1972
01:12:46,180 --> 01:12:47,740
0,300 300,390 390,960 960,1110 1110,1560
stand to attend a ten

1973
01:12:47,740 --> 01:12:48,700
0,120 120,600 600,810 810,900 900,960
you know might be a

1974
01:12:48,700 --> 01:12:49,390
0,150 150,300 300,540 540,630 630,690
little bit further in the

1975
01:12:49,390 --> 01:12:50,740
0,330 330,480 480,660 660,990 1020,1350
future of true type right

1976
01:12:51,370 --> 01:12:54,250
0,420 420,930 960,1740 1770,2250 2250,2880
so a projection doesn't prepare

1977
01:12:54,250 --> 01:12:56,110
0,210 210,600 600,930 930,1410 1410,1860
all a whatever necessary work

1978
01:12:56,110 --> 01:12:56,830
0,90 90,240 240,390 390,510 510,720
you know the two phase

1979
01:12:56,830 --> 01:12:58,450
0,690 690,960 960,1230 1230,1380 1380,1620
commit actually hits the real

1980
01:12:58,450 --> 01:12:59,420
0,270 270,720
commit point.

1981
01:13:00,160 --> 01:13:02,170
0,570 690,960 960,1110 1110,1560 1680,2010
Um, and they are and

1982
01:13:02,170 --> 01:13:03,460
0,240 240,420 420,510 510,990
may have to wait.

1983
01:13:03,760 --> 01:13:04,750
0,360 360,570 570,780 780,840 840,990
Right, because this is a

1984
01:13:04,750 --> 01:13:06,070
0,330 330,870 870,1050 1050,1200 1200,1320
committee rule, um, we have

1985
01:13:06,070 --> 01:13:07,270
0,90 90,360 360,420 420,660 660,1200
to wait a little while,

1986
01:13:07,300 --> 01:13:09,490
0,420 420,750 750,1200 1200,1860 1890,2190
little women actually sure that

1987
01:13:09,490 --> 01:13:11,830
0,720 780,1230 1230,2130 2130,2280 2280,2340
ten a exactly in the

1988
01:13:11,830 --> 01:13:12,600
0,570
past.

1989
01:13:13,280 --> 01:13:15,290
0,240 240,720 870,1230 1230,1620 1620,2010
And so, um, this basically

1990
01:13:15,290 --> 01:13:17,330
0,210 210,450 450,900 1110,1500 1500,2040
took MIT I'm a what

1991
01:13:17,330 --> 01:13:19,580
0,180 180,930 1080,1920 1920,2070 2070,2250
you know, um just actually

1992
01:13:19,580 --> 01:13:20,450
0,300 300,420 420,600 600,750 750,870
coordinate will do is look

1993
01:13:20,450 --> 01:13:21,680
0,120 120,330 330,630 660,990 990,1230
at commit time, just keep

1994
01:13:21,680 --> 01:13:23,390
0,240 240,390 390,630 630,1170 1440,1710
reading his local clock and

1995
01:13:23,390 --> 01:13:24,380
0,150 150,360 360,630 630,750 750,990
we'll keep reading his local

1996
01:13:24,380 --> 01:13:25,310
0,360 360,630 630,690 690,870 870,930
clock until it gets an

1997
01:13:25,310 --> 01:13:27,260
0,390 390,810 1050,1380 1380,1470 1470,1950
interval back where the earliest

1998
01:13:27,260 --> 01:13:29,720
0,630 720,930 930,1740 1770,2280
time is past ten.

1999
01:13:30,870 --> 01:13:32,070
0,180 180,450 450,570 570,750 750,1200
So maybe at some point

2000
01:13:32,070 --> 01:13:33,690
0,90 90,450 450,870 870,1350 1350,1620
you know reading boom reading,

2001
01:13:33,690 --> 01:13:35,250
0,510 510,750 750,1020 1020,1290 1290,1560
read gets actual interval back

2002
01:13:35,250 --> 01:13:36,870
0,90 90,210 210,810 1020,1410 1410,1620
and then interval and the

2003
01:13:36,870 --> 01:13:38,040
0,330 330,630 630,720 720,960 960,1170
interval starts to say, at

2004
01:13:38,040 --> 01:13:39,630
0,390 390,510 510,990 1110,1260 1260,1590
nine or seven it keeps

2005
01:13:39,630 --> 01:13:41,490
0,480 660,1230 1230,1320 1320,1620 1620,1860
reading until it actually gets

2006
01:13:41,490 --> 01:13:43,170
0,30 30,390 390,600 600,1140 1170,1680
a value that's bigger than

2007
01:13:43,380 --> 01:13:45,540
0,420 420,1050 1200,1410 1410,2040 2040,2160
a ten and then we

2008
01:13:45,540 --> 01:13:48,330
0,240 240,330 330,1050 1170,1920 1950,2790
know for sure that a

2009
01:13:48,480 --> 01:13:50,700
0,420 420,720 720,1050 1050,1680 1890,2220
true time has passed, and

2010
01:13:50,700 --> 01:13:52,410
0,480 480,720 720,1050 1050,1380 1380,1710
so it save actually to

2011
01:13:52,410 --> 01:13:54,000
0,630 660,990 990,1440
a committed transaction.

2012
01:13:55,550 --> 01:13:57,080
0,210 210,630 660,930 930,1410 1410,1530
And so any transaction that

2013
01:13:57,080 --> 01:13:59,480
0,210 210,570 570,960 960,1770 1890,2400
now Rose after p3, um

2014
01:13:59,480 --> 01:14:02,030
0,330 330,870 1170,1470 1470,1860 1860,2550
will have must run after

2015
01:14:02,030 --> 01:14:03,500
0,360 360,540 540,840 840,1140
a two time ten.

2016
01:14:05,660 --> 01:14:07,250
0,210 210,390 390,930 1350,1470 1470,1590
So let's say you know

2017
01:14:07,250 --> 01:14:09,020
0,300 300,540 540,810 810,1020 1020,1770
ten cents actually free starch.

2018
01:14:09,730 --> 01:14:12,250
0,210 210,360 360,900 1290,2130 2130,2520
At some point and um,

2019
01:14:12,250 --> 01:14:13,810
0,300 300,510 510,720 720,1140 1140,1560
it's actually three starts after

2020
01:14:13,810 --> 01:14:15,520
0,420 420,750 780,1020 1020,1380 1410,1710
t two so we have

2021
01:14:15,520 --> 01:14:16,780
0,60 60,270 270,510 510,900 900,1260
to now make absolutely sure

2022
01:14:16,780 --> 01:14:18,100
0,420 420,570 570,1020 1020,1140 1140,1320
that we reach you know

2023
01:14:18,100 --> 01:14:19,720
0,690 690,870 870,1020 1020,1110 1110,1620
x2 is going to reach

2024
01:14:19,990 --> 01:14:22,240
0,450 480,690 690,870 870,1260 1590,2250
so it's gonna read acts.

2025
01:14:23,020 --> 01:14:26,240
0,750 1110,1770 2010,2910
Um, and um.

2026
01:14:26,750 --> 01:14:29,030
0,630 720,930 930,1110 1110,2070 2070,2280
Um, and so we will

2027
01:14:29,030 --> 01:14:30,470
0,210 210,390 390,570 570,870 870,1440
ask for the current time,

2028
01:14:30,710 --> 01:14:31,820
0,390 390,510 510,660 660,840 840,1110
um, it's gonna get maybe

2029
01:14:31,820 --> 01:14:35,300
0,90 90,420 420,1560 2250,2970 2970,3480
an interval baca involve a

2030
01:14:35,330 --> 01:14:38,330
0,630 630,1530 1530,1650 1650,1860 1860,3000
might overlap a little bit

2031
01:14:38,330 --> 01:14:41,150
0,180 180,720 1080,1860 2070,2400 2400,2820
to chew a um, but

2032
01:14:41,150 --> 01:14:42,860
0,210 210,300 300,510 510,930 930,1710
given the true time, um,

2033
01:14:42,890 --> 01:14:44,480
0,600 900,1080 1080,1230 1230,1500 1500,1590
maybe from this clock is

2034
01:14:44,480 --> 01:14:45,950
0,240 240,750 750,1050 1050,1170 1170,1470
pretty precise and true time

2035
01:14:45,950 --> 01:14:46,880
0,90 90,420 420,600 600,840 840,930
be involved, get back is

2036
01:14:46,880 --> 01:14:48,050
0,150 150,330 330,420 420,900 930,1170
from ten to twelve so

2037
01:14:48,050 --> 01:14:49,280
0,150 150,450 450,540 540,900 900,1230
true time is somewhere between

2038
01:14:49,280 --> 01:14:50,060
0,150 150,240 240,690
ten to twelve.

2039
01:14:50,980 --> 01:14:52,090
0,240 240,600 600,780 780,990 990,1110
Um, we know which are

2040
01:14:52,090 --> 01:14:53,350
0,360 360,540 540,600 600,720 720,1260
basically has to be past

2041
01:14:53,350 --> 01:14:54,460
0,60 60,180 180,540 540,990 990,1110
you know ten because you

2042
01:14:54,460 --> 01:14:55,900
0,180 180,390 390,660 660,870 870,1440
know we're going to {re-reach

2043
01:14:55,900 --> 01:14:58,900
0,450 450,630 630,1380 1800,2460 2460,3000
-} by definition paso after

2044
01:14:58,900 --> 01:14:59,780
0,180 180,720
t tube.

2045
01:15:00,170 --> 01:15:02,060
0,480 720,1260 1260,1440 1440,1740 1740,1890
Um, and um, that's gonna

2046
01:15:02,060 --> 01:15:03,680
0,210 210,510 510,720 720,1170 1170,1620
work out because basically T

2047
01:15:03,710 --> 01:15:05,420
0,840 900,1230 1230,1350 1350,1500 1500,1710
A TV is gonna pick

2048
01:15:05,420 --> 01:15:07,400
0,240 240,900 900,1170 1170,1500 1500,1980
us it's a time stamp

2049
01:15:07,610 --> 01:15:08,690
0,240 240,450 450,540 540,660 660,1080
the end of the interval

2050
01:15:08,720 --> 01:15:10,700
0,450 450,570 570,870 870,1230 1710,1980
by the latest rule, so

2051
01:15:10,700 --> 01:15:11,540
0,180 180,420 420,510 510,720 720,840
t three is actually going

2052
01:15:11,540 --> 01:15:13,040
0,60 60,480 600,720 720,990 990,1500
to run a time stamp,

2053
01:15:13,130 --> 01:15:14,450
0,120 120,210 210,390 390,690 690,1320
you know two times twelve

2054
01:15:14,630 --> 01:15:17,120
0,240 240,390 390,810 1020,1980 1980,2490
if you will a and

2055
01:15:17,120 --> 01:15:18,710
0,150 150,270 270,870 870,1260 1260,1590
that will guarantee correct that

2056
01:15:18,710 --> 01:15:19,580
0,120 120,660
you know.

2057
01:15:19,700 --> 01:15:21,230
0,390 390,900 900,1110 1110,1380 1380,1530
This interval, we know for

2058
01:15:21,230 --> 01:15:22,790
0,540 540,1020 1020,1140 1140,1290 1290,1560
sure pass, the two time

2059
01:15:22,790 --> 01:15:24,890
0,510 990,1230 1230,1500 1500,1890 1890,2100
ten and so when t

2060
01:15:24,890 --> 01:15:26,150
0,300 300,900 930,1080 1080,1140 1140,1260
three reach you know is

2061
01:15:26,150 --> 01:15:27,950
0,120 120,210 210,720 810,1200 1200,1800
going to read access to.

2062
01:15:30,140 --> 01:15:32,810
0,1020 1050,1140 1140,1290 1290,1950 1980,2670
Xu you know the value

2063
01:15:32,810 --> 01:15:34,520
0,240 240,690 690,1020 1020,1320 1320,1710
of dejection to bigger scale

2064
01:15:34,520 --> 01:15:37,100
0,360 660,1440 1590,1830 1830,2220 2220,2580
there um, it's reading well

2065
01:15:37,100 --> 01:15:38,840
0,570 600,930 930,1110 1110,1440
beyond a two time.

2066
01:15:39,260 --> 01:15:40,010
0,120 120,240 240,450 450,720 720,750
And this must cost a

2067
01:15:40,010 --> 01:15:41,120
0,210 210,360 360,450 450,570 570,1110
little bit of a delay,

2068
01:15:41,180 --> 01:15:42,470
0,420 420,780 780,930 930,990 990,1290
but hopefully if the clocks

2069
01:15:42,470 --> 01:15:44,300
0,60 60,300 300,1080 1170,1560 1560,1830
are pretty precise, um, as

2070
01:15:44,300 --> 01:15:45,110
0,300 300,510 510,570 570,720 720,810
we talked a little bit

2071
01:15:45,110 --> 01:15:46,220
0,390 390,540 540,780 780,900 900,1110
earlier that delay is actually

2072
01:15:46,220 --> 01:15:47,240
0,150 150,210 210,300 300,810
going to be small.

2073
01:15:51,290 --> 01:15:52,420
0,120 120,270 270,420 420,840
Does this make sense.

2074
01:15:57,390 --> 01:15:58,410
0,300 300,570 570,690 690,870 870,1020
I'm sorry I had a

2075
01:15:58,410 --> 01:16:01,710
0,630 750,1290 1290,1950 1980,2670 2700,3300
question, so if I'm t

2076
01:16:01,710 --> 01:16:03,300
0,570 600,870 870,1290 1290,1440 1440,1590
two is saying that it's

2077
01:16:03,300 --> 01:16:05,460
0,270 270,810 1140,1530 1530,1590 1590,2160
going to start a transaction

2078
01:16:05,460 --> 01:16:08,000
0,150 150,480 480,1110 1260,2280
at time, ten zen.

2079
01:16:08,490 --> 01:16:11,160
0,360 360,570 570,930 930,1650 2040,2670
When we read something do

2080
01:16:11,190 --> 01:16:12,360
0,330 330,420 420,510 510,660 660,1170
like in the same transaction

2081
01:16:12,360 --> 01:16:13,290
0,120 120,270 270,570 570,810 810,930
do we also need to

2082
01:16:13,290 --> 01:16:14,610
0,180 180,420 420,600 600,870 870,1320
make sure that ten is.

2083
01:16:15,300 --> 01:16:17,720
0,870 870,1200 1200,2130
Outside, like for.

2084
01:16:18,160 --> 01:16:20,680
0,690 720,1470 1500,2220
The now interval.

2085
01:16:21,040 --> 01:16:22,780
0,600 600,840 840,1170 1170,1320 1320,1740
Um the question is let's

2086
01:16:22,780 --> 01:16:23,650
0,180 180,360 360,510 510,690 690,870
say t two does more

2087
01:16:23,650 --> 01:16:25,450
0,120 120,690 690,1290 1290,1470 1470,1800
to writes and does research

2088
01:16:25,450 --> 01:16:27,730
0,510 810,990 990,1320 1320,1920 1950,2280
right, you know a teacher

2089
01:16:27,730 --> 01:16:29,020
0,210 210,600 600,720 720,930 930,1290
should observe its own right

2090
01:16:29,440 --> 01:16:30,310
0,120 120,360 360,450 450,750 750,870
is that the question you're

2091
01:16:30,310 --> 01:16:31,020
0,420
asking.

2092
01:16:32,030 --> 01:16:35,420
0,660 690,1440 1560,1980 2010,2430 2790,3390
I'm teaching like when when

2093
01:16:35,420 --> 01:16:36,830
0,420 420,750 750,840 840,1200 1200,1410
we search for example is

2094
01:16:37,070 --> 01:16:39,590
0,420 420,720 750,1260 1380,2130 2190,2520
going to read why your

2095
01:16:39,590 --> 01:16:41,810
0,420 420,600 600,840 840,1860 2040,2220
answer so much zing to

2096
01:16:41,810 --> 01:16:42,340
0,210
it.

2097
01:16:46,810 --> 01:16:49,030
0,480 480,930 960,1770 1800,2100 2100,2220
Yeah or yeah after that

2098
01:16:49,030 --> 01:16:51,340
0,1410 1410,1620 1620,1830 1830,2010 2010,2310
yeah you're way I really

2099
01:16:51,340 --> 01:16:53,080
0,360 390,780 780,870 870,1470 1470,1740
care before to prepare actually

2100
01:16:53,080 --> 01:16:53,940
0,180 180,570
reach y.

2101
01:16:54,820 --> 01:16:55,880
0,240 240,420 420,720
Okay, let me.

2102
01:16:59,580 --> 01:17:00,420
0,570
Yep.

2103
01:17:03,330 --> 01:17:05,360
0,750 960,1740
And then.

2104
01:17:06,420 --> 01:17:07,300
0,630
OH.

2105
01:17:09,530 --> 01:17:12,200
0,660 660,1230 1320,2100 2100,2250 2250,2670
Okay, this may be the

2106
01:17:12,200 --> 01:17:13,520
0,420 420,600 600,930 930,1170 1170,1320
reason read writings actually don't

2107
01:17:13,520 --> 01:17:15,890
0,240 240,480 480,630 630,1080 1380,2370
really matter that much, because

2108
01:17:15,890 --> 01:17:16,940
0,120 120,210 210,330 330,810 840,1050
if you go back at

2109
01:17:16,940 --> 01:17:18,160
0,90 90,360 360,930
the very beginning.

2110
01:17:18,630 --> 01:17:20,780
0,870 870,1140 1140,1290 1290,1860
A at this picture.

2111
01:17:21,110 --> 01:17:23,210
0,270 270,360 360,930 1200,1740 1740,2100
You know the um, if

2112
01:17:23,210 --> 01:17:24,560
0,0 0,240 240,420 420,960 960,1350
a read write transaction reach

2113
01:17:24,560 --> 01:17:26,870
0,360 390,1140 1170,1830 1830,2100 2100,2310
where, um the reach will

2114
01:17:26,870 --> 01:17:30,560
0,240 240,1260 1710,2520 2820,3240 3240,3690
go to a shark masters

2115
01:17:30,560 --> 01:17:31,820
0,150 150,420 420,1020 1020,1140 1140,1260
a sharp leaders that will

2116
01:17:31,820 --> 01:17:32,630
0,150 150,270 270,390 390,630 630,810
take if you take read

2117
01:17:32,630 --> 01:17:33,600
0,330 330,720
locks out.

2118
01:17:33,820 --> 01:17:36,730
0,840 840,1710 1710,2190 2190,2670 2670,2910
Um, and um the rich

2119
01:17:36,730 --> 01:17:38,830
0,360 390,1020 1020,1500 1500,1920 1920,2100
are basically declined executes all

2120
01:17:38,830 --> 01:17:40,220
0,90 90,570 570,1110
the operations locally.

2121
01:17:40,450 --> 01:17:41,950
0,480 540,840 840,1170 1170,1290 1290,1500
Right, and so it gets

2122
01:17:41,950 --> 01:17:44,140
0,240 240,990 1020,1860 1860,2010 2010,2190
read values and we'll read

2123
01:17:44,140 --> 01:17:46,480
0,60 60,330 330,870 1050,1530 1560,2340
the most reasons we value

2124
01:17:46,480 --> 01:17:47,350
0,150 150,240 240,480 480,810 810,870
that we got after it

2125
01:17:47,350 --> 01:17:48,980
0,300 450,570 570,720 720,1320
was you know the.

2126
01:17:49,270 --> 01:17:50,320
0,750
I'm.

2127
01:17:50,840 --> 01:17:53,210
0,270 270,570 570,1080 1410,1710 1710,2370
The lock variable, so basically

2128
01:17:53,210 --> 01:17:54,960
0,120 120,270 270,540 540,1410
in the right transactions.

2129
01:17:55,040 --> 01:17:56,600
0,360 360,840 840,1110 1110,1410 1410,1560
The blocks really do all

2130
01:17:56,600 --> 01:17:57,840
0,90 90,420 420,810
the global order.

2131
01:17:58,040 --> 01:17:59,150
0,270 270,330 330,480 480,720 720,1110
Here's the two phase locking

2132
01:17:59,150 --> 01:18:00,720
0,390 390,630 630,1080
ensures global order.

2133
01:18:02,280 --> 01:18:03,540
0,120 120,270 270,540 540,660 660,1260
And so really the interaction

2134
01:18:03,540 --> 01:18:05,250
0,240 240,360 360,840 840,1260 1380,1710
that is interesting is the

2135
01:18:05,250 --> 01:18:07,290
0,510 510,1110 1320,1500 1500,1680 1680,2040
interaction between you the reader

2136
01:18:07,290 --> 01:18:09,360
0,690 1110,1290 1290,1410 1410,1620 1620,2070
interaction, which is t three.

2137
01:18:11,340 --> 01:18:12,720
0,240 240,300 300,510 510,690 690,1380
And the read write transactions.

2138
01:18:14,170 --> 01:18:16,150
0,270 270,480 480,720 720,1050 1050,1980
One is t to actually

2139
01:18:16,270 --> 01:18:17,920
0,570 870,1380
commit and.

2140
01:18:18,170 --> 01:18:19,370
0,240 240,540 540,780 780,1140 1140,1200
We're reading it before it

2141
01:18:19,370 --> 01:18:20,240
0,600
commits.

2142
01:18:20,760 --> 01:18:22,530
0,390 390,660 660,810 810,1470 1500,1770
Yeah, so the protocol in

2143
01:18:22,530 --> 01:18:24,150
0,180 180,360 360,870 870,1320 1320,1620
read, write transaction is we're

2144
01:18:24,150 --> 01:18:25,920
0,510 570,900 900,1260 1260,1470 1470,1770
reading right early on refers

2145
01:18:25,920 --> 01:18:27,060
0,90 90,330 330,420 420,870
to all the work.

2146
01:18:27,400 --> 01:18:28,270
0,150 150,510 510,630 630,780 780,870
And then we go to

2147
01:18:28,270 --> 01:18:29,800
0,90 90,360 360,900 930,1110 1110,1530
the commit face, so here's

2148
01:18:29,800 --> 01:18:31,240
0,180 180,450 450,540 540,960 990,1440
like here's the commit point

2149
01:18:31,630 --> 01:18:33,100
0,420 420,690 690,990
reviews where there.

2150
01:18:33,250 --> 01:18:35,410
0,720 720,900 900,1140 1140,1470 1470,2160
Clients like please commit transaction

2151
01:18:35,890 --> 01:18:37,750
0,210 210,720 720,1170 1170,1770 1770,1860
and sensitive transaction coordinator and

2152
01:18:37,750 --> 01:18:39,220
0,90 90,150 150,570 570,1260 1260,1470
then the transaction coordinator runs

2153
01:18:39,220 --> 01:18:40,960
0,60 60,210 210,690 690,1200 1200,1740
the two phase commit protocol.

2154
01:18:42,250 --> 01:18:43,870
0,330 330,720 720,810 810,960 960,1620
Um, but you know the

2155
01:18:43,900 --> 01:18:45,310
0,330 330,840 840,1110 1110,1320 1320,1410
old sharks, you need to

2156
01:18:45,310 --> 01:18:47,590
0,240 240,840 900,1590 1590,1740 1740,2280
have locks, um the values

2157
01:18:47,590 --> 01:18:48,850
0,180 180,390 390,570 570,1110 1110,1260
that actually that transaction is

2158
01:18:48,850 --> 01:18:50,380
0,660 690,1170
actually using.

2159
01:19:02,340 --> 01:19:03,200
0,600
Okay.

2160
01:19:10,860 --> 01:19:11,820
0,660
Okay.

2161
01:19:12,280 --> 01:19:14,230
0,300 300,390 390,780 1380,1800 1800,1950
Alright, so let's try to

2162
01:19:14,230 --> 01:19:15,940
0,420 420,480 480,630 630,1020 1110,1710
summarize a little bit, um.

2163
01:19:23,560 --> 01:19:25,420
0,690 750,1290 1320,1560 1560,1770 1770,1860
So a read write in

2164
01:19:25,420 --> 01:19:26,580
0,990
sections.

2165
01:19:27,220 --> 01:19:28,780
0,240 240,390 390,1170
There are basically.

2166
01:19:30,200 --> 01:19:32,480
0,480 480,840 840,1110 1110,1890 1890,2280
Global reward a realizable external

2167
01:19:32,990 --> 01:19:36,140
0,690 690,1050 1080,1770 1770,2520 2670,3150
reliability plus external consistency due

2168
01:19:36,140 --> 01:19:37,280
0,240 240,360 360,720 720,870 870,1140
to the fact that they

2169
01:19:37,280 --> 01:19:39,260
0,360 360,540 540,690 690,1320 1440,1980
basically do two face commit

2170
01:19:39,290 --> 01:19:41,640
0,300 300,450 450,660 660,1050
much to face locking.

2171
01:19:42,760 --> 01:19:44,290
0,240 240,450 450,720 720,1350 1380,1530
They read only transactions are

2172
01:19:44,290 --> 01:19:45,670
0,60 60,330 330,480 480,690 690,1380
the ones that are special

2173
01:19:46,450 --> 01:19:48,910
0,690 690,960 960,1440 1440,1950 1950,2460
because they are only contact

2174
01:19:48,910 --> 01:19:50,440
0,60 60,360 360,990 1140,1470 1470,1530
a local replica and the

2175
01:19:50,440 --> 01:19:52,150
0,270 270,540 540,870 870,1560 1590,1710
reason they actually see you

2176
01:19:52,150 --> 01:19:53,620
0,120 120,210 210,510 510,1050 1050,1470
know the correct value is

2177
01:19:53,620 --> 01:19:55,400
0,270 270,360 360,810 810,1470
because of snapshot isolation.

2178
01:19:59,950 --> 01:20:03,640
0,660 1680,2490 2490,2820 2820,2940 2940,3690
Each data item is actually

2179
01:20:03,640 --> 01:20:05,680
0,120 120,570 750,1380 1380,1530 1530,2040
a version and a stamped

2180
01:20:05,680 --> 01:20:07,810
0,240 240,1260 1260,1470 1470,1800 1800,2130
with z time stamp which

2181
01:20:07,810 --> 01:20:09,850
0,300 300,450 450,1110 1530,1680 1680,2040
text was modified and so,

2182
01:20:09,850 --> 01:20:11,050
0,660 690,780 780,930 930,1050 1050,1200
um, you know you can

2183
01:20:11,050 --> 01:20:13,060
0,240 240,330 330,390 390,1020 1080,2010
read in the past, um

2184
01:20:13,060 --> 01:20:15,310
0,240 240,480 480,1110 1620,1770 1770,2250
using steps regulation and then

2185
01:20:15,430 --> 01:20:16,840
0,300 300,840 840,1020 1020,1290 1290,1410
to ensure that yeah so

2186
01:20:16,840 --> 01:20:18,610
0,210 210,750 750,1320 1320,1560 1560,1770
this snapshot isolation really gives

2187
01:20:18,610 --> 01:20:22,340
0,420 450,720 720,1380 1380,1980
us a accessorize ability.

2188
01:20:25,090 --> 01:20:27,310
0,330 330,450 450,780 1590,1860 1860,2220
But you know a spanner

2189
01:20:27,310 --> 01:20:28,690
0,180 180,450 450,570 570,810 810,1380
actually shoots for something stronger,

2190
01:20:28,720 --> 01:20:30,640
0,450 450,540 540,1020 1020,1320 1320,1920
namely it actually shoots for

2191
01:20:30,730 --> 01:20:32,590
0,270 270,720 720,1260 1260,1710 1710,1860
this external consistency property, which

2192
01:20:32,590 --> 01:20:34,270
0,120 120,390 390,1290 1290,1500 1500,1680
is like vulnerability, yeah so

2193
01:20:34,270 --> 01:20:35,890
0,300 300,840 840,1290 1290,1440 1440,1620
there's real-time component to it.

2194
01:20:38,990 --> 01:20:41,030
0,240 240,360 360,660 660,1380 1800,2040
And to actually ensure that

2195
01:20:41,030 --> 01:20:42,830
0,870 900,1140 1140,1290 1290,1500 1500,1800
um, we got actually external

2196
01:20:42,830 --> 01:20:44,960
0,810 1050,1260 1260,1530 1530,1950 1950,2130
consistency, um, we execute the

2197
01:20:44,960 --> 01:20:46,790
0,240 240,480 480,1200 1200,1590 1590,1830
read only operations in time

2198
01:20:46,790 --> 01:20:48,060
0,330 330,810
stamp order.

2199
01:20:52,890 --> 01:20:54,390
0,510 510,720 720,1260 1260,1380 1380,1500
And now, because you know

2200
01:20:54,390 --> 01:20:56,130
0,270 270,600 600,1140 1140,1230 1230,1740
time stamp order, it requires

2201
01:20:56,130 --> 01:20:58,740
0,570 570,1170 1200,1620 1620,2100 2100,2610
on a perfectly synchronized clocks,

2202
01:20:59,010 --> 01:21:01,860
0,510 510,1350 1350,2220 2250,2760 2760,2850
um z scanner relaxes the

2203
01:21:01,860 --> 01:21:03,750
0,210 210,270 270,510 510,870 1080,1890
rules a little bit by

2204
01:21:03,750 --> 01:21:08,100
0,360 360,1050 1470,2340 2370,3690 3690,4350
actually using by type intervals.

2205
01:21:11,640 --> 01:21:12,460
0,600
Eggs.

2206
01:21:14,520 --> 01:21:16,230
0,540 540,630 630,870 870,1230 1230,1710
And the whole goal correctly,

2207
01:21:16,230 --> 01:21:17,820
0,90 90,600 690,1170 1170,1470 1470,1590
the hole by using the

2208
01:21:17,820 --> 01:21:19,470
0,180 180,270 270,960 1080,1410 1410,1650
set of techniques, it turns

2209
01:21:19,470 --> 01:21:21,090
0,180 180,360 360,510 510,780 780,1620
out that read only transactions

2210
01:21:21,330 --> 01:21:23,280
0,330 330,600 600,1170
are very fast.

2211
01:21:24,840 --> 01:21:26,430
0,180 180,360 360,840 870,1500 1500,1590
So read write transactions are

2212
01:21:26,430 --> 01:21:27,570
0,510 510,570 570,660 660,930 930,1140
basically you know not actually

2213
01:21:27,570 --> 01:21:28,830
0,390 390,780 780,990 990,1110 1110,1260
particularly fast, if you look

2214
01:21:28,830 --> 01:21:30,810
0,120 120,840 870,1170 1170,1530 1530,1980
at the table six you

2215
01:21:30,810 --> 01:21:32,190
0,210 210,330 330,570 570,870 1020,1380
it's you know that middle

2216
01:21:32,190 --> 01:21:33,900
0,330 330,900 900,1080 1080,1260 1260,1710
seconds for read, write transaction

2217
01:21:33,900 --> 01:21:34,800
0,150 150,360 360,690 690,780 780,900
that means vision you can

2218
01:21:34,800 --> 01:21:35,880
0,180 180,300 300,540 540,990 990,1080
only do ten transactions per

2219
01:21:35,880 --> 01:21:37,680
0,300 360,750 930,1260 1260,1380 1380,1800
second right, this is really

2220
01:21:37,680 --> 01:21:39,810
0,240 240,660 960,1500 1500,1770 1770,2130
not much but the renewal

2221
01:21:39,810 --> 01:21:41,560
0,780 870,1050 1050,1620
introductions are fast.

2222
01:21:42,450 --> 01:21:43,290
0,240 240,420 420,510 510,600 600,840
Now, this is the case

2223
01:21:43,290 --> 01:21:44,850
0,210 210,450 450,510 510,990 990,1560
though like you know, um,

2224
01:21:45,090 --> 01:21:46,620
0,270 270,540 750,1080 1080,1320 1320,1530
you know the although the

2225
01:21:46,620 --> 01:21:48,330
0,300 300,630 630,870 870,1500 1500,1710
writing sections are maybe not

2226
01:21:48,330 --> 01:21:50,070
0,180 180,660 750,1080 1080,1350 1350,1740
that fast they they are

2227
01:21:50,070 --> 01:21:52,320
0,240 240,720 780,1230 1230,1680 1680,2250
very powerful, you're basically doing

2228
01:21:52,590 --> 01:21:55,830
0,810 900,1920 1920,2550 2550,2880 2880,3240
a transactional operations across multiple

2229
01:21:55,830 --> 01:21:56,850
0,390 390,570 570,660 660,900 900,1020
sharks that is sitting in

2230
01:21:56,850 --> 01:21:58,410
0,270 270,480 480,1230 1230,1320 1320,1560
different data centers in different

2231
01:21:58,410 --> 01:21:59,360
0,210 210,270 270,360 360,690
parts of the world.

2232
01:21:59,700 --> 01:22:00,750
0,240 240,390 390,540 540,780 780,1050
And that each day for

2233
01:22:00,750 --> 01:22:03,720
0,600 600,1110 1110,1740 2100,2580 2580,2970
programmers, incredibly convenient and powerful

2234
01:22:03,720 --> 01:22:05,310
0,540 750,1110 1110,1260 1260,1410 1410,1590
tool, um that you can

2235
01:22:05,310 --> 01:22:08,490
0,330 330,930 930,1560 1560,1980 2250,3180
acid semantics across shards in

2236
01:22:08,610 --> 01:22:11,370
0,630 660,1560 1560,2250 2250,2550 2550,2760
a replicated in all over

2237
01:22:11,370 --> 01:22:12,020
0,90 90,420
the world.

2238
01:22:15,900 --> 01:22:16,950
0,360 360,720 750,870 870,930 930,1050
So, um, this is all

2239
01:22:16,950 --> 01:22:18,120
0,60 60,300 300,360 360,600 600,1170
I wanted to say actually

2240
01:22:18,120 --> 01:22:20,070
0,330 330,750 750,1290 1320,1800 1800,1950
about scanner, I hope this

2241
01:22:20,070 --> 01:22:21,690
0,600 600,750 750,1290 1290,1500 1500,1620
actually was helpful and that

2242
01:22:21,690 --> 01:22:24,090
0,180 180,540 1020,1650 1770,2190 2190,2400
you're not a maybe less

2243
01:22:24,090 --> 01:22:26,400
0,420 420,540 540,900 900,1560 1560,2310
confused and more confused because

2244
01:22:26,400 --> 01:22:27,960
0,60 60,210 210,810 810,1020 1290,1560
of this lecture, but, um,

2245
01:22:27,960 --> 01:22:29,490
0,150 150,270 270,660 690,1200 1200,1530
if you have questions, feel

2246
01:22:29,490 --> 01:22:30,630
0,180 180,240 240,420 420,810 810,1140
free to hang around and

2247
01:22:30,630 --> 01:22:32,730
0,300 300,390 390,1110 1140,1530 1560,2100
I'll be happy to discuss

2248
01:22:33,240 --> 01:22:34,470
0,390 390,540 540,690 690,900 900,1230
this or any other aspect

2249
01:22:34,470 --> 01:22:35,080
0,60 60,480
of spinner.

2250
01:22:37,240 --> 01:22:39,130
0,480 480,630 630,840 840,1230 1230,1890
And good luck finishing freebie,

2251
01:22:39,160 --> 01:22:40,660
0,720 720,960 960,1260 1260,1380 1380,1500
and I hope you get

2252
01:22:40,660 --> 01:22:42,520
0,210 210,390 390,750 750,1260 1590,1860
time to enjoy the long

2253
01:22:42,520 --> 01:22:43,240
0,390
weekend.

2254
01:22:47,560 --> 01:22:49,220
0,150 150,660 660,1020
Aw, thank you.

2255
01:22:51,000 --> 01:22:52,110
0,210 210,420 420,750 780,1020 1020,1110
Um, so I have a

2256
01:22:52,110 --> 01:22:53,310
0,420 420,720 720,1020 1020,1110 1110,1200
question, maybe early in the

2257
01:22:53,310 --> 01:22:54,330
0,540 540,660 660,780 780,900 900,1020
slides, so when you have

2258
01:22:54,330 --> 01:22:57,570
0,60 60,780 810,1380 1680,2370 2640,3240
a diagram for A D

2259
01:22:57,570 --> 01:22:58,710
0,120 120,360 360,690 690,960 960,1140
two phase commit for they

2260
01:22:58,710 --> 01:23:01,860
0,210 210,630 750,1650 1890,2670 2700,3150
read write transaction, so before

2261
01:23:01,860 --> 01:23:04,740
0,540 630,1110 1110,1260 1260,1680 2610,2880
we communicate with the with

2262
01:23:04,740 --> 01:23:06,000
0,780
the.

2263
01:23:06,320 --> 01:23:07,820
0,240 240,390 390,960 1020,1200 1200,1500
With the PC, the PC

2264
01:23:07,820 --> 01:23:09,680
0,420 420,600 600,690 690,1350 1410,1860
stands for the coordinator, yeah

2265
01:23:09,890 --> 01:23:11,870
0,540 540,1020 1020,1350 1500,1800 1830,1980
yeah coordinator, yeah OK yeah,

2266
01:23:11,870 --> 01:23:13,070
0,270 270,540 540,690 690,1110 1110,1200
so before we communicate with

2267
01:23:13,070 --> 01:23:14,600
0,60 60,540 540,990 990,1380 1380,1530
the transaction coordinator when we

2268
01:23:14,600 --> 01:23:15,950
0,360 360,660 660,930 930,1140 1140,1350
relieve acts and read why

2269
01:23:15,950 --> 01:23:17,870
0,600 840,1080 1080,1470 1470,1770 1770,1920
initially, um, we don't do

2270
01:23:17,870 --> 01:23:19,940
0,450 450,660 660,1320 1320,1470 1470,2070
any, um, communication with dc

2271
01:23:21,440 --> 01:23:22,460
0,300 300,450 450,720 720,810 810,1020
so my question is what

2272
01:23:22,460 --> 01:23:23,780
0,90 90,180 180,570 570,930 990,1320
is the nature of these

2273
01:23:23,780 --> 01:23:25,160
0,480 480,630 630,870 870,1170 1170,1380
reeds do we treat them

2274
01:23:25,160 --> 01:23:26,570
0,300 300,540 540,1020 1050,1260 1260,1410
as read only so we

2275
01:23:26,570 --> 01:23:27,560
0,210 210,390 390,480 480,870 870,990
read from the replica that

2276
01:23:27,560 --> 01:23:28,400
0,90 90,450 450,510 510,660 660,840
is closest to us or

2277
01:23:28,400 --> 01:23:30,110
0,120 120,270 270,900 1260,1560 1560,1710
do we actually do like

2278
01:23:30,110 --> 01:23:31,550
0,60 60,840 840,1140 1140,1350 1350,1440
a majority a type of

2279
01:23:31,550 --> 01:23:33,770
0,660 1320,1740 1740,1800 1800,1980 1980,2220
communication, um, you know we

2280
01:23:33,770 --> 01:23:36,110
0,360 360,510 510,810 810,1560 2040,2340
we go actually to go

2281
01:23:36,110 --> 01:23:38,000
0,120 120,210 210,780 780,1350 1650,1890
to the participants leader goes

2282
01:23:38,000 --> 01:23:39,180
0,90 90,180 180,660 660,1110
to the taxes leader.

2283
01:23:40,610 --> 01:23:41,420
0,150 150,300 300,480 480,600 600,810
I see, so it goes

2284
01:23:41,420 --> 01:23:42,920
0,390 420,990 990,1170 1170,1320 1320,1500
the okay so it goes

2285
01:23:42,920 --> 01:23:44,100
0,150 150,240 240,480 480,870
like in lab three.

2286
01:23:45,160 --> 01:23:47,290
0,480 750,1080 1080,1320 1320,1860 1860,2130
Sure, so it's basically so

2287
01:23:47,290 --> 01:23:49,390
0,390 390,720 720,1050 1050,1560 1590,2100
the read acts here basically

2288
01:23:49,480 --> 01:23:50,650
0,450 450,630 630,870 870,1050 1050,1170
was the same thing as

2289
01:23:50,650 --> 01:23:51,400
0,90 90,330 330,510 510,660 660,750
in left three so it

2290
01:23:51,400 --> 01:23:52,330
0,180 180,390 390,480 480,810 810,930
goes through the leader and

2291
01:23:52,330 --> 01:23:53,890
0,90 90,420 690,1290 1290,1470 1470,1560
it gets replicated through the

2292
01:23:53,890 --> 01:23:55,630
0,510 540,930 930,1020 1020,1320 1320,1740
hole, no it actually doesn't,

2293
01:23:55,630 --> 01:23:56,830
0,270 270,900 900,1170 1170,1200 1200,1200
um, there's no um I

2294
01:23:57,400 --> 01:23:58,750
0,210 210,360 360,570 570,1050 1050,1350
believe there's no actually, um,

2295
01:23:58,750 --> 01:24:00,730
0,240 240,420 420,1200 1200,1560 1590,1980
we'd go inside a running

2296
01:24:00,730 --> 01:24:01,930
0,150 150,630 630,870 870,990 990,1200
through taxes but you know

2297
01:24:01,930 --> 01:24:03,010
0,150 150,300 300,480 480,540 540,1080
and go through the transaction

2298
01:24:03,010 --> 01:24:05,860
0,480 720,1140 1140,1530 1530,2160 2340,2850
leader, um alter the patches

2299
01:24:05,860 --> 01:24:07,630
0,420 420,840 840,930 930,1200 1200,1770
leader and the patches leader

2300
01:24:07,630 --> 01:24:08,470
0,270 270,480 480,690 690,780 780,840
of course knows what the

2301
01:24:08,470 --> 01:24:09,420
0,270 270,510 510,870
last right was.

2302
01:24:09,840 --> 01:24:11,070
0,240 240,420 420,570 570,1080 1110,1230
But what if the for

2303
01:24:11,070 --> 01:24:12,360
0,360 360,450 450,600 600,750 750,1290
example we have some failure

2304
01:24:12,360 --> 01:24:13,980
0,300 300,450 450,1140 1200,1500 1500,1620
and the leader thinks that

2305
01:24:13,980 --> 01:24:14,790
0,150 150,270 270,540 540,660 660,810
it's the leader but it's

2306
01:24:14,790 --> 01:24:15,900
0,60 60,240 240,780 780,900 900,1110
in some partition, and it

2307
01:24:15,900 --> 01:24:17,400
0,240 240,420 420,810 810,1260
actually has updated information.

2308
01:24:18,800 --> 01:24:20,480
0,540 600,930 930,990 990,1590 1590,1680
I don't know exactly you

2309
01:24:20,480 --> 01:24:21,320
0,150 150,300 300,510 510,720 720,840
know how they deal with

2310
01:24:21,320 --> 01:24:23,120
0,150 150,630 630,630 630,1200 1200,1800
this case I I think

2311
01:24:23,120 --> 01:24:24,680
0,180 180,600 600,810 810,930 930,1560
their leases make that impossible

2312
01:24:24,710 --> 01:24:27,710
0,510 810,1950 1980,2340 2340,2550 2550,3000
yeah yeah, so they have

2313
01:24:27,740 --> 01:24:30,770
0,570 1020,1680 2070,2280 2280,2550 2550,3030
a the so every leader

2314
01:24:30,770 --> 01:24:31,820
0,330 330,600 600,750 750,810 810,1050
is leader for a period

2315
01:24:31,820 --> 01:24:32,540
0,90 90,510
of time.

2316
01:24:33,460 --> 01:24:35,530
0,210 210,390 390,750 750,1680 1680,2070
And you become during that

2317
01:24:35,560 --> 01:24:36,970
0,630 630,690 690,960 960,1170 1170,1410
period of time, no other

2318
01:24:36,970 --> 01:24:38,140
0,240 240,420 420,540 540,870
leader can be leader.

2319
01:24:38,560 --> 01:24:40,450
0,420 450,570 570,840 1290,1590 1590,1890
Okay I see awesome, thank

2320
01:24:40,450 --> 01:24:41,480
0,270
you.

2321
01:24:42,360 --> 01:24:43,830
0,390 390,510 510,840 870,1230 1230,1470
Thank you ma remind you.

2322
01:24:44,860 --> 01:24:46,510
0,420 420,810 810,990 990,1080 1080,1650
Hey I had a question

2323
01:24:46,510 --> 01:24:48,280
0,270 270,630 660,1110 1110,1650 1650,1770
with the last diagram with

2324
01:24:48,280 --> 01:24:50,420
0,60 60,420 420,990
a time interval.

2325
01:24:51,160 --> 01:24:52,990
0,810 810,960 960,1110 1110,1470 1470,1830
Yeah I was wondering if

2326
01:24:52,990 --> 01:24:55,900
0,360 450,660 660,840 840,1410 1440,2910
like if the read 43

2327
01:24:56,050 --> 01:24:57,550
0,360 360,600 600,840 840,1080 1080,1500
or let's say the right

2328
01:24:57,580 --> 01:25:00,580
0,1140 1530,1920 1920,2460 2460,2640 2640,3000
92 time intervals from one

2329
01:25:00,580 --> 01:25:02,500
0,150 150,600 600,1170 1200,1620 1620,1920
to twelve also such that

2330
01:25:02,500 --> 01:25:05,320
0,150 150,480 480,930 930,1080 1080,2820
the right happens at {1242,and}

2331
01:25:05,320 --> 01:25:06,850
0,270 270,540 540,840 840,1140 1140,1530
t three reads also happens

2332
01:25:06,850 --> 01:25:07,930
0,150 150,450 450,600 600,1020 1020,1080
at twelve what happens in

2333
01:25:07,930 --> 01:25:08,920
0,180 180,780
that scenario.

2334
01:25:09,710 --> 01:25:12,380
0,660 660,1080 1080,1200 1200,1680 2490,2670
Um, OK, you gotta like

2335
01:25:12,380 --> 01:25:13,520
0,450 450,570 570,690 690,870 870,1140
what if you want more

2336
01:25:13,520 --> 01:25:16,280
0,1470 1470,1710 1710,2190 2190,2430 2430,2760
yeah, so forty to ninety

2337
01:25:16,280 --> 01:25:17,330
0,270 270,450 450,810 810,930 930,1050
to the right right now

2338
01:25:17,330 --> 01:25:18,290
0,210 210,360 360,570 570,690 690,960
it's from one to ten

2339
01:25:18,290 --> 01:25:21,470
0,360 720,1530 1770,2790 2790,3000 3000,3180
right {zen's -} at like

2340
01:25:21,470 --> 01:25:22,430
0,450 450,570 570,690 690,840 840,960
twelve so that it's like

2341
01:25:22,430 --> 01:25:24,230
0,120 120,450 450,810 810,1140 1170,1800
the same as the transition

2342
01:25:24,230 --> 01:25:26,860
0,450 720,1860 1860,2070 2070,2430
three twelve not to.

2343
01:25:27,160 --> 01:25:28,480
0,150 150,330 330,630 630,930 930,1320
I think twelve sorry I'm

2344
01:25:28,480 --> 01:25:31,600
0,720 720,1350 1380,1920
meaning both interested.

2345
01:25:31,800 --> 01:25:35,040
0,630 660,1080 1110,1710 1740,2520 2550,3240
Um, so if um, the

2346
01:25:35,070 --> 01:25:36,510
0,210 210,600 750,1110 1170,1440 1440,1440
um, so {it's -} A

2347
01:25:38,040 --> 01:25:39,780
0,390 390,720 870,1230 1230,1500 1500,1740
P correct section two would

2348
01:25:39,780 --> 01:25:42,120
0,240 240,750 750,1290 1320,1920 1950,2340
take twelve as a start

2349
01:25:42,120 --> 01:25:42,760
0,390
time.

2350
01:25:43,240 --> 01:25:46,900
0,270 270,1560 1680,1920 1920,3450 3450,3660
Of the of z right

2351
01:25:46,900 --> 01:25:49,270
0,630 1110,1440 1440,1620 1620,1830 1830,2370
transaction, um, it would weight

2352
01:25:49,270 --> 01:25:50,080
0,540
correct.

2353
01:25:50,280 --> 01:25:52,470
0,270 270,1080 1140,1560 1560,1830 1830,2190
A until twelve shows up

2354
01:25:52,500 --> 01:25:54,390
0,330 330,480 480,1200 1230,1800 1800,1890
in the interval before it

2355
01:25:54,390 --> 01:25:55,260
0,570
commits.

2356
01:25:55,740 --> 01:25:57,120
0,270 270,480 480,840 840,960 960,1380
So true, time is somewhere

2357
01:25:57,120 --> 01:25:58,650
0,330 330,540 540,630 630,1200 1260,1530
between one and twelve and

2358
01:25:58,650 --> 01:26:00,690
0,330 330,630 630,840 840,1260 1260,2040
wait until at least thirteen.

2359
01:26:01,350 --> 01:26:02,400
0,240 240,330 330,480 480,690 690,1050
Right, and so true time

2360
01:26:02,400 --> 01:26:04,230
0,150 150,450 450,1080 1140,1470 1470,1830
is now beyond a twelve

2361
01:26:04,230 --> 01:26:06,540
0,90 90,660 1020,1530 1770,2040 2040,2310
for sure, yeah and now

2362
01:26:06,540 --> 01:26:07,770
0,120 120,360 360,540 540,720 720,1230
we know that t fri

2363
01:26:07,980 --> 01:26:10,470
0,840 870,1500 1500,1710 1710,2040 2070,2490
starts after t two right.

2364
01:26:11,060 --> 01:26:12,770
0,450 450,810 900,1140 1140,1320 1320,1710
You know it could never

2365
01:26:12,770 --> 01:26:13,970
0,300 300,450 450,570 570,630 630,1200
got this in a fallback

2366
01:26:13,970 --> 01:26:15,500
0,390 390,480 480,660 660,1080 1080,1530
because the two times already

2367
01:26:15,530 --> 01:26:17,480
0,600 600,1080 1080,1260 1260,1680
definitely passed for team.

2368
01:26:18,020 --> 01:26:19,220
0,330 330,390 390,840 840,1050 1050,1200
Or you know you know

2369
01:26:19,220 --> 01:26:20,300
0,330 330,780
past twelve.

2370
01:26:21,420 --> 01:26:22,980
0,210 210,780 870,1200 1200,1410 1410,1560
So when this guy now

2371
01:26:22,980 --> 01:26:25,170
0,600 600,810 810,1410 1650,1860 1860,2190
reached its clock, we know

2372
01:26:25,170 --> 01:26:26,040
0,300 300,420 420,480 480,600 600,870
there's going to be some

2373
01:26:26,040 --> 01:26:27,780
0,750 1050,1230 1230,1380 1380,1650 1650,1740
interval, you know, maybe it

2374
01:26:27,780 --> 01:26:30,360
0,240 240,600 600,1140 1410,2190 2220,2580
still includes ten um, but

2375
01:26:30,360 --> 01:26:31,740
0,120 120,450 450,600 600,720 720,1380
you know and will include

2376
01:26:31,770 --> 01:26:32,820
0,240 240,810
a fourteen.

2377
01:26:33,330 --> 01:26:34,460
0,240 240,840
Four thirteen.

2378
01:26:35,540 --> 01:26:36,710
0,480 480,630 630,840 840,930 930,1170
And we'll pick the lazy

2379
01:26:36,710 --> 01:26:38,660
0,630 690,1110 1260,1440 1440,1680 1680,1950
value right, so let's say

2380
01:26:38,660 --> 01:26:39,940
0,210 210,930
pick fourteen.

2381
01:26:40,540 --> 01:26:41,680
0,360 360,630 630,780 780,930 930,1140
And so it will do

2382
01:26:41,680 --> 01:26:43,600
0,240 240,660 690,1230 1230,1380 1380,1920
time stamp actually at fourteen.

2383
01:26:46,230 --> 01:26:47,700
0,270 270,480 480,600 600,1080 1080,1470
I chose so basically like

2384
01:26:47,700 --> 01:26:49,650
0,300 300,960 990,1380 1380,1500 1500,1950
that scenario wouldn't have happened

2385
01:26:49,650 --> 01:26:51,750
0,570 660,960 960,1320 1320,1860 1860,2100
because the time interval thing

2386
01:26:51,750 --> 01:26:53,370
0,180 180,420 420,1080 1080,1230 1230,1620
would have guaranteed the earliest

2387
01:26:53,370 --> 01:26:54,930
0,90 90,600 780,1170 1170,1440 1440,1560
and latest yes, and that

2388
01:26:54,930 --> 01:26:55,620
0,150 150,240 240,450 450,570 570,690
is the case that the

2389
01:26:55,620 --> 01:26:57,180
0,210 210,630 630,1020 1020,1350 1350,1560
free definitely started after t

2390
01:26:57,180 --> 01:26:57,720
0,270
two.

2391
01:26:59,340 --> 01:27:00,990
0,390 390,1050 1050,1230 1230,1470 1470,1650
By definition, that's the way

2392
01:27:00,990 --> 01:27:01,980
0,120 120,270 270,360 360,450 450,990
we set up the example.

2393
01:27:02,980 --> 01:27:04,000
0,150 150,300 300,630 630,840 840,1020
And then also then like

2394
01:27:04,000 --> 01:27:06,040
0,390 720,1080 1170,1650 1650,1860 1860,2040
if if instead like the

2395
01:27:06,040 --> 01:27:07,810
0,480 750,930 930,1350 1350,1680 1680,1770
reed was happening around the

2396
01:27:07,810 --> 01:27:08,950
0,180 180,390 390,540 540,990 990,1140
same time as committed not

2397
01:27:08,950 --> 01:27:10,660
0,540 540,990 990,1410 1410,1650 1650,1710
necessarily strictly after, as in

2398
01:27:10,660 --> 01:27:12,760
0,210 210,540 540,810 990,1560 1950,2100
this case like what is

2399
01:27:12,760 --> 01:27:14,080
0,210 210,390 390,930 930,1080 1080,1320
there any guaranteed on that

2400
01:27:14,440 --> 01:27:16,810
0,240 240,390 390,450 450,540 540,2370
like does it have a

2401
01:27:17,080 --> 01:27:18,580
0,600 600,990 990,1140 1140,1260 1260,1500
great question, so we remember

2402
01:27:18,580 --> 01:27:19,510
0,120 120,180 180,600 600,690 690,930
what the definition of leader

2403
01:27:19,510 --> 01:27:21,460
0,600 600,870 870,1410 1470,1740 1740,1950
abilities right, if t two

2404
01:27:21,460 --> 01:27:22,870
0,120 120,300 300,540 540,900 900,1410
and t three basically run

2405
01:27:22,870 --> 01:27:25,570
0,330 330,1020 1020,1680 1680,2100 2100,2700
roughly concurrently run truly concurrent

2406
01:27:26,500 --> 01:27:27,910
0,600 630,780 780,960 960,1350 1350,1410
then it doesn't matter, you

2407
01:27:27,910 --> 01:27:28,900
0,60 60,420 420,540 540,750 750,990
know TV can go for

2408
01:27:28,900 --> 01:27:30,480
0,420 420,720 720,990 990,1500
two two or after.

2409
01:27:32,200 --> 01:27:33,340
0,750
Okay.

2410
01:27:33,850 --> 01:27:35,140
0,150 150,330 330,480 480,720 720,1290
But then what about serialize

2411
01:27:35,140 --> 01:27:37,630
0,480 480,990 1260,1530 1530,1800 1800,2490
ability aspects if they execute

2412
01:27:37,630 --> 01:27:38,680
0,390 390,600 600,690 690,900 900,1050
again like it might not

2413
01:27:38,680 --> 01:27:39,940
0,600 600,720 720,810 810,900 900,1260
necessarily be in the same

2414
01:27:39,940 --> 01:27:41,200
0,540
order.

2415
01:27:41,880 --> 01:27:43,800
0,480 630,990 990,1350 1350,1710 1710,1920
A the war executed some

2416
01:27:43,800 --> 01:27:45,270
0,270 270,660 660,990 990,1260 1260,1470
total order and you either

2417
01:27:45,270 --> 01:27:47,310
0,210 360,450 450,750 750,1770 1770,2040
go to four to or

2418
01:27:47,310 --> 01:27:49,980
0,360 360,870 870,1320 1320,1530 2010,2670
after teeth, a tooth but

2419
01:27:50,070 --> 01:27:51,270
0,270 270,510 510,630 630,1020 1020,1200
either order is fine, which

2420
01:27:51,270 --> 01:27:52,710
0,480 480,570 570,900 900,990 990,1440
both are allowed by serialize

2421
01:27:52,710 --> 01:27:54,930
0,390 390,510 510,1500 1620,2070 2070,2220
ability or reliability, because the

2422
01:27:54,930 --> 01:27:56,540
0,480 480,570 570,870 870,1350
execution is truly current.

2423
01:27:57,030 --> 01:28:00,960
0,1230 1230,1770 2220,3150 3150,3240 3240,3930
Uti fresh start b 42

2424
01:28:00,960 --> 01:28:01,780
0,510
committed.

2425
01:28:02,200 --> 01:28:03,700
0,630 660,780 780,1110 1110,1230 1230,1500
Gotcha, and then for the

2426
01:28:03,760 --> 01:28:04,840
0,240 240,390 390,690 690,930 930,1080
t three like the if

2427
01:28:04,840 --> 01:28:05,860
0,90 90,390 390,510 510,690 690,1020
the commit and read happens

2428
01:28:05,860 --> 01:28:07,000
0,90 90,180 180,360 360,750 810,1140
at the same time, the

2429
01:28:07,000 --> 01:28:07,990
0,270 270,480 480,660 660,870 870,990
tea what t three is

2430
01:28:07,990 --> 01:28:09,430
0,480 480,750 750,1020 1050,1320 1320,1440
actually gonna read just gonna

2431
01:28:09,430 --> 01:28:11,110
0,390 390,690 720,1050 1050,1170 1170,1680
depend on if the replica

2432
01:28:11,110 --> 01:28:12,520
0,270 270,570 570,750 750,1050 1050,1410
is reading from has that

2433
01:28:12,550 --> 01:28:14,680
0,420
committee.

2434
01:28:14,980 --> 01:28:16,030
0,90 90,540 540,630 630,720 720,1050
I thank you so much

2435
01:28:16,360 --> 01:28:18,080
0,600 720,1410
makeup questions.

2436
01:28:19,240 --> 01:28:21,040
0,390 390,570 570,750 750,1020 1020,1800
A I had a question

2437
01:28:21,070 --> 01:28:23,600
0,660 1290,2010
about like.

2438
01:28:23,990 --> 01:28:25,640
0,690 720,960 960,1050 1050,1260 1260,1650
If, if I saw this

2439
01:28:25,640 --> 01:28:28,010
0,180 180,330 330,960 1020,1680 1860,2370
in this picture and they

2440
01:28:28,040 --> 01:28:29,180
0,240 240,330 330,600 600,720 720,1140
when it tries to commit

2441
01:28:29,180 --> 01:28:30,200
0,300 300,420 420,600 600,900 900,1020
twelve is not there, it's

2442
01:28:30,200 --> 01:28:32,060
0,210 210,720 960,1500 1500,1650 1650,1860
just gonna retry and wait

2443
01:28:32,060 --> 01:28:35,030
0,870 990,2370 2370,2640 2640,2790 2790,2970
again okay, it's just good

2444
01:28:35,030 --> 01:28:37,280
0,270 270,330 330,810 840,1650 2100,2250
reading the clock until it

2445
01:28:37,280 --> 01:28:38,600
0,180 180,270 270,630 630,960 960,1320
gets an info back where

2446
01:28:38,600 --> 01:28:40,610
0,300 300,930 930,1080 1080,1740 1740,2010
the earliest it's past yeah

2447
01:28:40,610 --> 01:28:43,420
0,660 960,1770 2010,2250 2250,2670
its a time stamp.

2448
01:28:44,640 --> 01:28:47,220
0,690 720,1620 1710,1950 1950,2190 2190,2580
Okay, um I also have

2449
01:28:47,460 --> 01:28:48,750
0,360 360,540 540,990 990,1200 1200,1290
just a clerk just to

2450
01:28:48,750 --> 01:28:50,790
0,180 180,690 1080,1440 1440,1920 1920,2040
make sure the guarantee that

2451
01:28:50,790 --> 01:28:53,010
0,150 150,720 720,840 840,1230 1560,2220
it provides is that if.

2452
01:28:53,910 --> 01:28:56,070
0,270 270,810 810,1260 1410,1710 1710,2160
If designs in time, Sam

2453
01:28:56,070 --> 01:28:57,140
0,690
axe.

2454
01:28:57,740 --> 01:28:59,240
0,240 240,330 330,480 480,990 990,1500
And by the time where

2455
01:28:59,240 --> 01:29:02,150
0,240 240,330 330,690 750,1980 2190,2910
X is like before the

2456
01:29:02,180 --> 01:29:05,560
0,360 360,1140 2370,3210
now interval this.

2457
01:29:05,770 --> 01:29:07,600
0,540 540,960 960,1410 1410,1710 1710,1830
Machine orders box group will

2458
01:29:07,600 --> 01:29:08,300
0,420
have.

2459
01:29:08,550 --> 01:29:11,490
0,960 1350,2040 2040,2580 2580,2640 2640,2940
Seen everything worked I guess

2460
01:29:11,490 --> 01:29:13,290
0,300 300,420 420,630 630,1200 1350,1800
machine will have seen everything

2461
01:29:13,290 --> 01:29:14,600
0,150 150,360 360,990
that has happened.

2462
01:29:15,740 --> 01:29:18,420
0,900 1020,1320 1320,1830 1830,2340
At like before X.

2463
01:29:18,880 --> 01:29:19,860
0,90 90,270 270,690
Is that right.

2464
01:29:20,050 --> 01:29:21,040
0,510 510,630 630,780 780,960 960,990
Yeah I think more or

2465
01:29:21,040 --> 01:29:22,210
0,180 180,600 600,780 780,990 990,1170
less yes, I've not heard

2466
01:29:22,210 --> 01:29:23,620
0,120 120,390 390,990 990,1230 1230,1410
of since you're what you're

2467
01:29:23,620 --> 01:29:25,150
0,450 450,690 990,1110 1110,1320 1320,1530
asking, but you know we

2468
01:29:25,150 --> 01:29:26,410
0,450 450,570 570,630 630,960 960,1260
we get an interval back,

2469
01:29:26,410 --> 01:29:27,580
0,330 330,420 420,780 780,960 960,1170
what we know is that

2470
01:29:27,580 --> 01:29:28,750
0,120 120,330 330,750 750,870 870,1170
the true time is somewhere

2471
01:29:28,750 --> 01:29:29,740
0,90 90,240 240,750
in this interval.

2472
01:29:30,600 --> 01:29:31,960
0,120 120,360 360,570 570,1170
So here's true time.

2473
01:29:34,610 --> 01:29:35,570
0,210 210,360 360,570 570,690 690,960
And so when we start

2474
01:29:35,570 --> 01:29:38,660
0,90 90,900 1020,1920 1920,2160 2160,3090
to prepare a you know

2475
01:29:38,660 --> 01:29:40,070
0,120 120,450 450,630 630,870 870,1410
two times not past twelve.

2476
01:29:40,760 --> 01:29:42,380
0,750 780,930 930,1080 1080,1380 1380,1620
Um, but it's somewhere between

2477
01:29:42,380 --> 01:29:43,700
0,180 180,300 300,780 1020,1200 1200,1320
one and twelve and so

2478
01:29:43,700 --> 01:29:45,080
0,210 210,300 300,480 480,1020 1050,1380
when we do commit we

2479
01:29:45,080 --> 01:29:45,980
0,180 180,360 360,660 660,840 840,900
gotta make sure that the

2480
01:29:45,980 --> 01:29:47,960
0,270 270,540 540,960 960,1230 1230,1980
commit actually happens really after

2481
01:29:47,960 --> 01:29:48,820
0,180 180,570
through time.

2482
01:29:49,160 --> 01:29:50,150
0,330 330,450 450,570 570,720 720,990
And so we're gonna wait

2483
01:29:50,150 --> 01:29:51,650
0,60 60,270 270,690 690,780 780,1500
a little bit, you know,

2484
01:29:51,650 --> 01:29:52,790
0,330 360,510 510,780 780,900 900,1140
so we know we got

2485
01:29:52,790 --> 01:29:54,080
0,210 210,780 930,1110 1110,1170 1170,1290
big twelve and we're going

2486
01:29:54,080 --> 01:29:55,490
0,90 90,420 420,960 960,1230 1230,1410
to wait until actually our

2487
01:29:55,490 --> 01:29:58,100
0,540 720,1020 1020,1140 1140,1770 1920,2610
clock gives an interval where

2488
01:29:58,100 --> 01:29:59,570
0,210 210,540 540,720 720,1140 1140,1470
true time is definitely past

2489
01:29:59,570 --> 01:30:00,240
0,540
twelve.

2490
01:30:01,570 --> 01:30:02,540
0,540
AH.

2491
01:30:03,040 --> 01:30:03,880
0,270 270,510 510,570 570,720 720,840
I think I think what

2492
01:30:03,880 --> 01:30:05,530
0,30 30,210 210,630 630,1050 1050,1650
I was asking was Mark,

2493
01:30:05,620 --> 01:30:06,910
0,180 180,330 330,600 600,1110 1140,1290
if you pick twelve and

2494
01:30:06,910 --> 01:30:09,130
0,570 750,1020 1020,1590 1590,1800 1800,2220
then your interval is returned

2495
01:30:09,130 --> 01:30:11,020
0,90 90,390 540,1080 1080,1230 1230,1890
to be thirteen to twenty

2496
01:30:11,080 --> 01:30:12,370
0,270 270,600 720,840 840,990 990,1290
mm, hmm do you know

2497
01:30:12,370 --> 01:30:14,200
0,390 660,1140 1140,1590
that anything that.

2498
01:30:14,800 --> 01:30:16,690
0,420 420,690 720,1050 1050,1350 1350,1890
I'm like with time stamp

2499
01:30:17,050 --> 01:30:18,190
0,420 420,630 630,720 720,990 990,1140
less than or equal to

2500
01:30:18,190 --> 01:30:20,500
0,630 870,1230 1230,1320 1320,1860 1860,2310
twelve that the changes for

2501
01:30:20,530 --> 01:30:22,600
0,210 210,900 900,1320 1680,1950 1950,2070
those transactions that you're gonna

2502
01:30:22,600 --> 01:30:23,740
0,90 90,360 360,480 480,720 720,1140
be able to see them

2503
01:30:23,830 --> 01:30:24,700
0,600
theirs.

2504
01:30:25,250 --> 01:30:26,080
0,510
Okay.

2505
01:30:27,140 --> 01:30:28,360
0,240 240,330 330,480 480,990
Okay, that makes sense.

2506
01:30:29,070 --> 01:30:30,700
0,390 390,990
Thank you.

2507
01:30:32,710 --> 01:30:34,060
0,390 390,540 540,720 720,930 930,1350
So I don't totally understand

2508
01:30:34,060 --> 01:30:35,500
0,330 330,450 450,930 930,1080 1080,1440
what the point of commit

2509
01:30:35,500 --> 01:30:38,200
0,270 270,690 690,1200 1590,2130 2490,2700
wait actually is because it

2510
01:30:38,200 --> 01:30:39,940
0,360 360,810 840,1290 1320,1560 1560,1740
seems like a Mid weight

2511
01:30:39,940 --> 01:30:40,870
0,90 90,330 330,630 630,750 750,930
will happen after you've already

2512
01:30:40,870 --> 01:30:42,400
0,600 600,780 780,1080 1080,1410 1410,1530
selected the time stamp for

2513
01:30:42,400 --> 01:30:44,200
0,60 60,720 720,930 990,1350 1350,1800
the transaction that you're interested

2514
01:30:44,290 --> 01:30:45,970
0,390 720,900 900,960 960,1230 1230,1680
in and you simply delay

2515
01:30:45,970 --> 01:30:47,860
0,180 180,810 960,1590 1590,1830 1830,1890
the actual absolute time at

2516
01:30:47,860 --> 01:30:48,610
0,210 210,390 390,510 510,600 600,750
which the thing will let

2517
01:30:48,610 --> 01:30:49,570
0,60 60,180 180,600 600,870 870,960
you get committed just to

2518
01:30:49,570 --> 01:30:50,540
0,240 240,480 480,780
make sure that.

2519
01:30:50,760 --> 01:30:52,830
0,510 510,840 840,1170 1350,1980 1980,2070
No extra room nobody to

2520
01:30:52,830 --> 01:30:54,030
0,240 240,480 480,600 600,840 840,1200
commit time, you really start

2521
01:30:54,030 --> 01:30:55,440
0,390 390,480 480,1170
updating the database.

2522
01:30:56,500 --> 01:30:58,930
0,720 720,1380 1380,1680 1680,2040 2040,2430
Aha, and so at committee,

2523
01:30:58,930 --> 01:30:59,770
0,150 150,330 330,390 390,720 720,840
you have to commit you

2524
01:30:59,770 --> 01:31:01,690
0,600 780,1050 1050,1140 1140,1380 1380,1920
return like a tea free

2525
01:31:01,720 --> 01:31:02,980
0,330 330,720 720,870 870,930 930,1260
didn't run in the last

2526
01:31:02,980 --> 01:31:03,940
0,120 120,240 240,690
of the sea.

2527
01:31:04,680 --> 01:31:07,710
0,780 1260,1830 1830,2310 2310,2820 2820,3030
Right, because our definition like

2528
01:31:07,710 --> 01:31:09,090
0,180 180,360 360,720 720,1170 1170,1380
t fri started after t

2529
01:31:09,090 --> 01:31:09,980
0,150 150,600
two committed.

2530
01:31:10,250 --> 01:31:11,990
0,330 330,540 540,1050 1290,1560 1560,1740
Right, right right, but like

2531
01:31:11,990 --> 01:31:12,890
0,300 300,420 420,660 660,720 720,900
what would happen if you

2532
01:31:12,890 --> 01:31:14,000
0,360 360,570 570,930 930,990 990,1110
didn't like what do you

2533
01:31:14,000 --> 01:31:15,950
0,240 240,330 330,420 420,960 1260,1950
lose if you don't have

2534
01:31:16,250 --> 01:31:17,420
0,180 180,360 360,510 510,750 750,1170
it free would run concurrently

2535
01:31:17,420 --> 01:31:18,400
0,150 150,330 330,630
with t two.

2536
01:31:20,980 --> 01:31:23,710
0,630 660,1080 1080,1650 1950,2340 2340,2730
Okay, let's see I I'm

2537
01:31:23,710 --> 01:31:24,730
0,150 150,270 270,570 570,930 930,1020
not sure which scenario you

2538
01:31:24,730 --> 01:31:26,320
0,150 150,210 210,570 570,780 1080,1590
want to explore, but, um,

2539
01:31:26,320 --> 01:31:28,150
0,810 840,960 960,1170 1170,1380 1380,1830
if you know we allow

2540
01:31:28,150 --> 01:31:29,980
0,450 450,570 570,840 840,1260 1260,1830
TV to start before she.

2541
01:31:30,470 --> 01:31:31,700
0,690 720,870 870,990 990,1110 1110,1230
Then you know we have

2542
01:31:31,700 --> 01:31:32,960
0,90 90,450 450,660 660,1020 1020,1260
a completely different story correct

2543
01:31:32,960 --> 01:31:34,340
0,210 210,540 540,750 750,840 840,1380
because there's nothing to discuss

2544
01:31:34,370 --> 01:31:36,080
0,600 600,810 810,1050 1050,1290 1290,1710
because d free range cookers

2545
01:31:36,080 --> 01:31:37,700
0,510 510,630 630,990 990,1440 1440,1620
eighty-two and cookies observe to

2546
01:31:37,700 --> 01:31:39,410
0,210 210,330 330,690 690,930 930,1710
tea or not, then over

2547
01:31:39,800 --> 01:31:40,660
0,600
okay.

2548
01:31:42,020 --> 01:31:43,020
0,300 300,720
I see.

2549
01:31:43,620 --> 01:31:44,850
0,450 450,600 600,690 690,930 930,1230
And so the time stamp

2550
01:31:44,850 --> 01:31:46,320
0,150 150,690 690,930 930,1110 1110,1470
for c, we are waging

2551
01:31:46,320 --> 01:31:47,940
0,360 360,720 720,960 960,1410 1410,1620
those yeah we pass through

2552
01:31:47,940 --> 01:31:48,800
0,540
time.

2553
01:31:49,060 --> 01:31:51,160
0,840 840,1320 1320,1440 1440,1800 1800,2100
Um off you know, um,

2554
01:31:51,160 --> 01:31:53,110
0,420 420,1110 1110,1350 1350,1500 1500,1950
the signing of the prepared

2555
01:31:53,110 --> 01:31:54,100
0,210 210,330 330,420 420,570 570,990
number that we get back

2556
01:31:54,190 --> 01:31:55,510
0,270 270,390 390,690 690,930 930,1320
so we know that the

2557
01:31:55,750 --> 01:31:57,460
0,180 180,510 510,840 840,1080 1080,1710
true time really has passed,

2558
01:31:58,270 --> 01:32:01,540
0,510 510,870 870,960 960,3060 3060,3270
and this is z free

2559
01:32:01,540 --> 01:32:02,710
0,270 270,570 570,720 720,810 810,1170
could never pick a time

2560
01:32:02,710 --> 01:32:04,570
0,840 840,990 990,1290 1290,1440 1440,1860
a to time that actually

2561
01:32:04,570 --> 01:32:07,000
0,180 180,510 540,930 930,1260 1350,2430
would be would be before

2562
01:32:07,090 --> 01:32:08,860
0,210 210,690 690,1110 1110,1500 1500,1770
t two a committed on.

2563
01:32:11,610 --> 01:32:12,840
0,270 270,930
I see.

2564
01:32:14,360 --> 01:32:17,060
0,240 240,600 630,1170 1530,2160 2370,2700
I see, okay, um I

2565
01:32:17,060 --> 01:32:18,260
0,150 150,240 240,450 450,720 900,1200
guess it seemed like everything

2566
01:32:18,260 --> 01:32:19,940
0,120 120,360 360,930 930,1380 1530,1680
was already version that if

2567
01:32:19,940 --> 01:32:22,100
0,210 870,1500 1500,1620 1620,1830 1830,2160
you modify the date you

2568
01:32:22,100 --> 01:32:23,720
0,390 390,750 750,1080 1080,1320 1320,1620
physically modified this or like

2569
01:32:24,050 --> 01:32:25,010
0,150 150,270 270,450 450,780 780,960
that would be okay because

2570
01:32:25,010 --> 01:32:26,990
0,270 270,1170 1440,1590 1590,1800 1800,1980
everything has a time step

2571
01:32:26,990 --> 01:32:27,770
0,390 390,480 480,570 570,690 690,780
attached to it, so no

2572
01:32:27,770 --> 01:32:29,720
0,180 180,540 870,1170 1410,1770 1770,1950
one would know from far

2573
01:32:29,720 --> 01:32:30,650
0,210 210,300 300,420 420,570 570,930
away it seemed like no

2574
01:32:30,650 --> 01:32:32,720
0,150 150,240 240,660 660,1350 1680,2070
do the wrong thing like

2575
01:32:32,720 --> 01:32:34,100
0,630 690,1020 1020,1110 1110,1290 1290,1380
looking more at what they

2576
01:32:34,100 --> 01:32:37,040
0,240 240,690 690,1680 1680,2040 2040,2940
actually define as actual consistency

2577
01:32:37,250 --> 01:32:38,510
0,330 330,570 570,690 690,1020 1020,1260
I don't really understand how

2578
01:32:38,510 --> 01:32:39,980
0,270 300,750 780,1140 1140,1230 1230,1470
it is similar to linear

2579
01:32:39,980 --> 01:32:40,880
0,270 270,420 420,480 480,630 630,900
stability because it just says

2580
01:32:40,880 --> 01:32:41,380
0,270
that.

2581
01:32:41,550 --> 01:32:43,620
0,240 240,300 300,1170 1170,1620 1620,2070
If a transaction actually commits

2582
01:32:43,620 --> 01:32:45,480
0,270 270,480 480,600 600,1290 1470,1860
before another one starts then

2583
01:32:45,480 --> 01:32:46,590
0,210 210,540 540,780 780,990 990,1110
they'll have the first will

2584
01:32:46,590 --> 01:32:47,850
0,90 90,180 180,570 570,870 870,1260
have a smaller time stamp

2585
01:32:47,850 --> 01:32:49,200
0,90 90,360 360,780 930,1110 1110,1350
the latter one is also

2586
01:32:49,200 --> 01:32:50,700
0,150 150,510 540,1020 1020,1080 1080,1500
sort of implicit in that

2587
01:32:50,970 --> 01:32:52,950
0,390 390,1050 1050,1740 1740,1830 1830,1980
a transactions execute in the

2588
01:32:52,950 --> 01:32:54,270
0,360 360,450 450,570 570,840 840,1320
order of their time stamps

2589
01:32:54,270 --> 01:32:57,210
0,300 300,660 660,1320 1320,1500 1500,2940
for sure, yeah like z

2590
01:32:57,210 --> 01:32:58,590
0,450 450,570 570,720 720,870 870,1380
rotation was not so brilliant

2591
01:32:58,950 --> 01:33:01,920
0,990 1020,1200 1200,1590 1590,2220 2460,2970
but but yeah absolutely, um

2592
01:33:01,920 --> 01:33:03,780
0,360 360,780 780,1290 1290,1470 1470,1860
the real requirement is that

2593
01:33:03,990 --> 01:33:05,400
0,450 450,540 540,1260
if a transaction.

2594
01:33:05,810 --> 01:33:08,300
0,570 780,1500 1500,1980 1980,2190 2220,2490
A start after A T

2595
01:33:08,300 --> 01:33:10,280
0,240 240,720 720,1020 1020,1620 1620,1980
two starts after 31 minutes,

2596
01:33:10,820 --> 01:33:12,830
0,600 600,930 930,1620 1620,1890 1890,2010
you must observe all the

2597
01:33:12,830 --> 01:33:15,170
0,390 390,870 870,1050 1050,1500 1860,2340
rights from t one haha,

2598
01:33:15,200 --> 01:33:16,820
0,300 330,840 930,1380
right, right, right.

2599
01:33:19,250 --> 01:33:20,810
0,300 300,510 510,630 630,930 930,1560
I see I guess the

2600
01:33:20,840 --> 01:33:21,920
0,90 90,270 270,390 390,720 720,1080
I guess the time knowing

2601
01:33:21,920 --> 01:33:22,820
0,90 90,180 180,480 480,720 720,900
that the time stamp of

2602
01:33:22,820 --> 01:33:24,290
0,480 480,780 780,900 900,1050 1050,1470
teachers larger than t one

2603
01:33:24,500 --> 01:33:25,850
0,570 600,960 960,1110 1110,1200 1200,1350
will tell you that you're

2604
01:33:25,850 --> 01:33:26,930
0,150 150,210 210,300 300,660 660,1080
going to have observed everything

2605
01:33:27,290 --> 01:33:29,720
0,150 150,780 960,1410 1980,2250 2250,2430
she wants okay makes sense,

2606
01:33:29,720 --> 01:33:30,620
0,720
yeah.

2607
01:33:30,940 --> 01:33:32,780
0,240 240,690 1020,1260 1260,1560
OK thanks, you wanna.

2608
01:33:40,240 --> 01:33:41,560
0,240 240,390 390,1050
Any other questions.

2609
01:33:42,310 --> 01:33:43,880
0,300 300,600 600,900 900,1260
Don't show anybody there.

2610
01:33:46,820 --> 01:33:48,350
0,300 300,420 420,780 780,1110 1110,1530
How to question about a

2611
01:33:48,590 --> 01:33:50,140
0,660 660,1230
part a.

2612
01:33:50,390 --> 01:33:52,010
0,360 360,630 630,810 810,1110 1110,1620
Four point two point three

2613
01:33:52,430 --> 01:33:54,710
0,420 420,690 690,1140 1140,1500 1500,2280
seconds a schema change transactions,

2614
01:33:54,710 --> 01:33:56,720
0,1350 1350,1440 1440,1680 1680,1860 1860,2010
yeah you talk about it

2615
01:33:56,720 --> 01:33:58,970
0,360 1350,1500 1500,1620 1620,1860 1860,2250
all I was just curious

2616
01:33:58,970 --> 01:34:00,800
0,360 360,690 720,960 960,1500 1500,1830
about like because essentially there

2617
01:34:00,800 --> 01:34:02,120
0,150 150,390 390,600 600,840 840,1320
they talk about like predicting

2618
01:34:02,120 --> 01:34:03,140
0,120 120,450 450,540 540,630 630,1020
the time of the committee.

2619
01:34:04,050 --> 01:34:05,240
0,870
AH.

2620
01:34:05,490 --> 01:34:06,930
0,390 390,660 660,780 780,1230 1230,1440
Well, you may be let

2621
01:34:06,930 --> 01:34:08,130
0,240 240,570 570,870 870,1110 1110,1200
me see I'll tell you

2622
01:34:08,130 --> 01:34:09,150
0,270 270,510 510,630 630,780 780,1020
whatever way I think about

2623
01:34:09,150 --> 01:34:10,110
0,210 390,540 540,720 720,870 870,960
it and then you can

2624
01:34:10,110 --> 01:34:11,100
0,210 210,480 480,780 780,870 870,990
see me, you can tell

2625
01:34:11,100 --> 01:34:12,780
0,120 120,360 510,1260 1260,1590 1590,1680
me where where where the

2626
01:34:12,780 --> 01:34:15,240
0,390 390,720 990,1560 1650,2040 2040,2460
confusion is so a schema

2627
01:34:15,240 --> 01:34:16,650
0,300 300,510 510,630 630,930 930,1410
change curve that means basically

2628
01:34:16,650 --> 01:34:17,640
0,240 240,300 300,750 750,900 900,990
adding a column to a

2629
01:34:17,640 --> 01:34:19,290
0,690 900,1050 1050,1320 1320,1350 1350,1650
table or delete a column

2630
01:34:19,290 --> 01:34:20,490
0,120 120,180 180,720 720,960 960,1200
of a table or something

2631
01:34:20,490 --> 01:34:21,810
0,210 210,450 450,600 630,780 780,1320
along those lines so it

2632
01:34:21,840 --> 01:34:23,340
0,330 330,930 930,1110 1110,1200 1200,1500
really changes you know the

2633
01:34:23,370 --> 01:34:26,300
0,540 540,660 660,1050 1410,2790
layout of the database.

2634
01:34:26,750 --> 01:34:29,180
0,600 810,1380 1380,1650 1650,2010 2040,2430
And, um, and so schema

2635
01:34:29,180 --> 01:34:31,430
0,450 450,930 960,1290 1290,1890 1890,2250
changes are generally expensive and

2636
01:34:31,430 --> 01:34:32,870
0,150 150,480 480,690 690,930 930,1440
the way they make sure

2637
01:34:32,870 --> 01:34:33,950
0,150 150,300 300,690 690,810 810,1080
that their atomic they're running

2638
01:34:33,950 --> 01:34:35,000
0,150 150,510 510,570 570,630 630,1050
in far in the future.

2639
01:34:36,080 --> 01:34:37,490
0,720 720,960 960,1080 1080,1260 1260,1410
Um, so they run over

2640
01:34:37,490 --> 01:34:38,450
0,90 90,360 360,720 720,840 840,960
the time stamp, you know

2641
01:34:38,450 --> 01:34:39,800
0,360 360,720 720,780 780,1050 1050,1350
well beyond the current time.

2642
01:34:40,600 --> 01:34:42,010
0,450 450,630 630,780 780,1080 1080,1410
And so I guess that's

2643
01:34:42,010 --> 01:34:43,600
0,390 390,780 780,1020 1020,1200 1200,1590
actually usually do its stuff

2644
01:34:43,600 --> 01:34:45,340
0,300 300,660 660,1260 1260,1530 1530,1740
great because um every other

2645
01:34:45,340 --> 01:34:46,600
0,180 180,510 510,870 870,960 960,1260
is actually reading or writing,

2646
01:34:46,600 --> 01:34:48,460
0,240 240,360 360,660 660,1200 1350,1860
using this version memory and

2647
01:34:48,460 --> 01:34:49,690
0,90 90,240 240,450 450,930 930,1230
you know they're creating version

2648
01:34:49,690 --> 01:34:50,950
0,360 360,690 690,1080 1080,1170 1170,1260
members way farther in the

2649
01:34:50,950 --> 01:34:51,800
0,600
future.

2650
01:34:52,240 --> 01:34:53,170
0,150 150,270 270,360 360,600 600,930
And so it can't affect

2651
01:34:53,170 --> 01:34:54,580
0,240 240,360 360,450 450,960 990,1410
any of the current transaction

2652
01:34:54,580 --> 01:34:55,980
0,60 60,480
is running.

2653
01:34:56,250 --> 01:34:58,830
0,300 300,1020 1020,1320 1320,2220 2220,2580
Now communicate you know, um,

2654
01:34:58,860 --> 01:34:59,610
0,90 90,180 180,360 360,570 570,750
you know this takes so

2655
01:34:59,610 --> 01:35:02,370
0,540 660,1380 1770,1920 1920,2550 2550,2760
long a la la la

2656
01:35:02,370 --> 01:35:03,480
0,180 180,270 270,630 630,780 780,1110
by the time they actually

2657
01:35:03,480 --> 01:35:07,470
0,210 210,330 1080,1770 2010,3390 3570,3990
want to commit the schema

2658
01:35:07,470 --> 01:35:10,320
0,600 600,1110 1440,2100 2130,2700 2700,2850
migration part a there, there

2659
01:35:10,320 --> 01:35:11,700
0,120 120,330 330,900 900,1050 1050,1380
are actually transactions, they're starting

2660
01:35:11,700 --> 01:35:14,040
0,450 450,1320 1320,1650 1650,1830 1830,2340
to encourage on the time

2661
01:35:14,190 --> 01:35:17,280
0,780 1080,1620 1620,2130 2130,2550 2550,3090
that a migration transaction started.

2662
01:35:18,540 --> 01:35:19,410
0,90 90,450 450,570 570,630 630,870
So those you know, those

2663
01:35:19,410 --> 01:35:21,030
0,90 90,360 360,690 750,1290 1290,1620
are search actually times marches

2664
01:35:21,030 --> 01:35:22,290
0,390 390,450 450,690 690,930 930,1260
on you know we're doing

2665
01:35:22,290 --> 01:35:23,880
0,510 870,1020 1020,1140 1140,1230 1230,1590
transactions and then the rule

2666
01:35:23,880 --> 01:35:25,230
0,180 180,330 330,810 810,1170 1170,1350
is that basically any read,

2667
01:35:25,230 --> 01:35:26,940
0,210 210,720 720,840 840,1200 1200,1710
write transaction or any reader

2668
01:35:26,940 --> 01:35:28,920
0,210 210,390 390,990 1260,1830 1830,1980
or any transaction basically have

2669
01:35:28,920 --> 01:35:29,720
0,600
stop.

2670
01:35:31,620 --> 01:35:34,920
0,360 360,1080 1080,1560 1560,2370 2490,3300
A until basically the transfer

2671
01:35:34,920 --> 01:35:37,410
0,180 720,1440 1440,1920 1920,2070 2070,2490
or migration transaction was completed.

2672
01:35:39,220 --> 01:35:40,960
0,390 390,660 660,1110 1110,1620 1620,1740
Because the migration transaction is

2673
01:35:40,960 --> 01:35:43,420
0,270 270,900 1050,1110 1110,2070 2100,2460
time, stamping is a new

2674
01:35:43,420 --> 01:35:44,620
0,660 660,750 750,870 870,1050 1050,1200
values, you know with its

2675
01:35:44,620 --> 01:35:45,520
0,240 240,630
time step.

2676
01:35:46,820 --> 01:35:48,500
0,570 630,1020 1020,1290 1290,1590 1590,1680
So when when there's a

2677
01:35:48,500 --> 01:35:50,660
0,480 480,990 990,1170 1170,1350 1350,2160
request essentially for this migration,

2678
01:35:50,690 --> 01:35:51,560
0,540
um.

2679
01:35:52,020 --> 01:35:53,550
0,180 180,630 630,780 780,1140 1140,1530
It chooses a commit time

2680
01:35:53,550 --> 01:35:54,980
0,210 210,390 390,510 510,1140
far into the future.

2681
01:35:55,320 --> 01:35:58,080
0,900 1110,1290 1290,1740 1740,2370
And you know basically.

2682
01:35:58,360 --> 01:35:59,860
0,240 240,450 450,840 840,1290 1290,1500
You hope basically the that

2683
01:35:59,860 --> 01:36:01,420
0,450 450,750 750,1230 1230,1320 1320,1560
transaction also commits you know

2684
01:36:01,420 --> 01:36:04,810
0,360 360,930 960,1380 1380,1800 2730,3390
not yeah by then, so

2685
01:36:05,080 --> 01:36:06,840
0,420 420,720 720,930 930,1560
any reads that come.

2686
01:36:07,180 --> 01:36:08,530
0,180 180,240 240,750 780,990 990,1350
At a time up until

2687
01:36:08,530 --> 01:36:10,540
0,540 600,870 870,1350 1350,1650 1650,2010
then are served from the

2688
01:36:10,570 --> 01:36:12,640
0,630 660,1230 1230,1740 1740,1980 1980,2070
current local replicas from at

2689
01:36:12,640 --> 01:36:13,930
0,240 240,570 570,900 900,1080 1080,1290
all correct because they could

2690
01:36:13,930 --> 01:36:15,280
0,150 150,390 390,810 810,990 990,1350
have even seen him right.

2691
01:36:16,940 --> 01:36:20,210
0,570 930,1470 1530,2490 2850,3060 3060,3270
Okay, and if you Google

2692
01:36:20,210 --> 01:36:21,170
0,240 240,510 510,570 570,690 690,960
trick if you have version

2693
01:36:21,170 --> 01:36:22,280
0,390 390,510 510,630 630,750 750,1110
memory, you can you schedule

2694
01:36:22,280 --> 01:36:24,290
0,240 240,300 300,360 360,840 1740,2010
things in the future yeah

2695
01:36:24,290 --> 01:36:24,950
0,120 120,180 180,360 360,600 600,660
it's a cool trick I

2696
01:36:24,950 --> 01:36:25,910
0,90 90,270 270,570 570,810 810,960
was just wondering how they

2697
01:36:25,910 --> 01:36:28,580
0,540 540,1500 1530,2070 2070,2250 2250,2670
actually like figure out that.

2698
01:36:28,930 --> 01:36:31,330
0,420 420,510 510,600 600,1200 1230,2400
Point in the future a.

2699
01:36:32,790 --> 01:36:36,390
0,930 930,1050 1050,1320 1320,1800 2640,3600
Yeah it's probably some some

2700
01:36:36,390 --> 01:36:37,890
0,300 300,540 540,600 600,960 960,1500
heroes stick or something, okay.

2701
01:36:38,390 --> 01:36:40,310
0,300 300,660 660,1080 1080,1260 1260,1920
So, but essentially so if

2702
01:36:40,310 --> 01:36:41,960
0,540 750,1350
you don't.

2703
01:36:42,400 --> 01:36:44,440
0,630 630,720 720,1380 1380,1560 1560,2040
Choose a time, that's far

2704
01:36:44,440 --> 01:36:45,900
0,270 270,330 330,420 420,1140
enough in the future.

2705
01:36:46,360 --> 01:36:47,530
0,210 210,450 450,690 690,780 780,1170
Then you run the risk

2706
01:36:47,530 --> 01:36:50,200
0,540 660,1500 1590,1980 2010,2250 2460,2670
of exam okay, so then

2707
01:36:50,200 --> 01:36:53,470
0,90 90,360 360,720 720,1230 2070,3270
you have incorrect results to

2708
01:36:53,470 --> 01:36:55,090
0,390 390,690 690,840 840,1200 1200,1620
avoid risk of incorrect results,

2709
01:36:55,090 --> 01:36:56,340
0,270 270,570 570,1020
which actually walk.

2710
01:36:56,730 --> 01:36:58,760
0,690 840,1080 1080,1650
Yeah I see.

2711
01:36:59,870 --> 01:37:00,800
0,630
Okay.

2712
01:37:01,060 --> 01:37:03,490
0,570 570,930 930,1050 1050,1500 1860,2430
Awesome, thanks so much, you're

2713
01:37:03,640 --> 01:37:07,360
0,360
right.
