1
00:00:06,030 --> 00:00:07,940
0,540 540,720 720,1320
Okay, good afternoon,|
好的，下午好，|

2
00:00:08,470 --> 00:00:11,080
0,720 720,960 960,1500 1530,2070 2070,2610
{} sound check sound checking,|
声音检查声音检查，|

3
00:00:12,790 --> 00:00:14,260
0,360 360,480 480,630 630,900
people can hear me?|
人们能听到我说话吗？|

4
00:00:16,760 --> 00:00:20,150
0,1410 1470,1770 1770,2160 2700,3000 3000,3390
Yeah.| Thank you,| okay, good,
嗯。|谢谢,|好的，下午好，晚上好，早上好，晚上好，无论你在哪里，

5
00:00:20,150 --> 00:00:21,470
0,90 90,240 240,780 780,960 960,1320
so good afternoon, good evening,

6
00:00:21,470 --> 00:00:22,850
0,150 150,600 600,720 720,990 990,1380
good morning, good night, wherever

7
00:00:22,850 --> 00:00:24,560
0,90 90,390 720,1320 1320,1650 1650,1710
you are,| I'm going to
|今天我要更多地谈一谈木筏

8
00:00:24,560 --> 00:00:25,970
0,150 150,480 480,750 750,900 900,1410
talk today more about raft|
|

9
00:00:27,110 --> 00:00:29,000
0,420 420,660 660,990 990,1200 1200,1890
and we want to cover
我们想要涵盖以下不同的主题，

10
00:00:29,000 --> 00:00:31,580
0,330 330,690 690,1560 1860,2340 2340,2580
following different topics,| {} which
|这将与实验室相关。

11
00:00:31,580 --> 00:00:32,810
0,180 180,330 330,540 600,930 930,1230
are going to be relevant

12
00:00:32,810 --> 00:00:34,500
0,420 420,1290
to labs.|
|

13
00:00:34,790 --> 00:00:35,630
0,360 360,600 600,660 660,750 750,840
So, first of all, I
所以，首先，我想更多地谈谈对数散度，

14
00:00:35,630 --> 00:00:36,170
0,150 150,210 210,360 360,390 390,540
want to talk a little

15
00:00:36,170 --> 00:00:38,180
0,150 150,450 450,840 840,1110 1110,2010
bit more about log divergence,|
|

16
00:00:39,120 --> 00:00:40,260
0,480 540,720 720,900 900,960 960,1140
{} we sort of had
在上一堂课结束时，我们遇到了一个扣人心弦的问题，

17
00:00:40,260 --> 00:00:41,400
0,150 180,750 750,870 870,960 960,1140
a cliffhanger at the end

18
00:00:41,400 --> 00:00:42,660
0,120 120,420 420,900 930,1140 1140,1260
of last lecture,| where we
|我们进行了一次讨论，图6，

19
00:00:42,660 --> 00:00:43,560
0,210 210,300 300,360 360,780 780,900
got in a discussion that

20
00:00:43,560 --> 00:00:45,060
0,240 240,600 600,810 810,1020 1020,1500
figure six,| {I,want} to resume
|我想恢复那次讨论。

21
00:00:45,060 --> 00:00:46,680
0,390 390,1020
that discussion.|
|

22
00:00:46,710 --> 00:00:47,700
0,150 150,360 360,420 420,540 540,990
I want to talk about
我想谈谈原木追赶和发生了什么，

23
00:00:47,760 --> 00:00:49,650
0,390 390,690 690,1050 1560,1710 1710,1890
log catch up and what

24
00:00:49,650 --> 00:00:51,840
0,600 630,1080 1080,1590
happens,| if {}
|如果追随者如何追赶，

25
00:00:52,040 --> 00:00:54,350
0,240 240,450 450,1410 1440,1680 1680,2310
how do followers {} {catch,up},|
|

26
00:00:54,980 --> 00:00:56,480
0,870 930,1080 1080,1290 1290,1410 1410,1500
then a little bit of
然后有一点坚持不懈，就像状态必须是什么一样，

27
00:00:56,480 --> 00:00:57,890
0,120 120,690 690,840 840,1020 1020,1410
a persistence like what state

28
00:00:57,890 --> 00:01:00,800
0,330 330,750 1440,2280
must be {},|
|

29
00:01:01,240 --> 00:01:02,500
0,330 330,390 390,810 810,1020 1020,1260
what's {} raft state must
RAFT状态必须在存储中持久化

30
00:01:02,500 --> 00:01:04,150
0,90 90,570 570,690 690,1200 1200,1650
be persistent in storage| which
|这与2c和2d非常相关，

31
00:01:04,150 --> 00:01:05,680
0,90 90,720 720,1200 1200,1350 1350,1530
is really relevant for {2c

32
00:01:05,680 --> 00:01:07,720
0,210 210,330 330,450 450,870 1410,2040
-} and {2d -}, {}|
|

33
00:01:07,720 --> 00:01:10,240
0,570 570,1290 1290,1800 1830,2070 2070,2520
and also {} talk about
还谈到了快照中的[]。

34
00:01:10,270 --> 00:01:13,460
0,540 540,720 720,810 810,1530
[] out to snapshots.|
|

35
00:01:13,580 --> 00:01:14,640
0,570
Yeah,
是的，如果有任何问题，请随时提出来

36
00:01:14,940 --> 00:01:15,990
0,150 150,300 300,450 450,780 780,1050
if there's any questions, please

37
00:01:15,990 --> 00:01:18,210
0,240 240,330 330,870 1950,2100 2100,2220
{feel,free} to ask| and then
|最后，我想谈一谈线性化

38
00:01:18,210 --> 00:01:18,810
0,300 300,330 330,450 450,510 510,600
finally I want to talk

39
00:01:18,810 --> 00:01:19,890
0,180 180,420 420,570 570,960 960,1080
about {linearizability - -}| and
|以及论文中经常提到的正确标准

40
00:01:19,890 --> 00:01:23,040
0,1140 1140,1950 1950,2760 2760,2970 2970,3150
correct criterion that comes up

41
00:01:23,040 --> 00:01:24,870
0,450 450,780 780,1410 1410,1500 1500,1830
quite often in the paper|
|

42
00:01:24,870 --> 00:01:26,070
0,300 300,660 660,840 840,1020 1020,1200
used also in a bunch
在很多地方也用到，

43
00:01:26,070 --> 00:01:27,720
0,90 90,630 1230,1380 1380,1530 1530,1650
of places,| and this will
|这将让我们再谈一谈这台服务器如何使用RAFT。

44
00:01:27,720 --> 00:01:28,830
0,510 510,630 630,780 780,1080 1080,1110
allow us to talk a

45
00:01:28,830 --> 00:01:30,180
0,210 210,390 390,690 690,1170 1170,1350
little bit again about how

46
00:01:30,180 --> 00:01:31,170
0,180 180,300 300,630 630,720 720,990
does this {server -} use

47
00:01:31,170 --> 00:01:32,060
0,480
raft.|
|

48
00:01:32,490 --> 00:01:34,290
0,510 900,1260 1260,1530 1530,1710 1710,1800
{} So, those are the
所以，这些就是我们计划谈论的话题，

49
00:01:34,290 --> 00:01:35,430
0,360 360,540 540,720 720,900 900,1140
topics we plan to talk

50
00:01:35,430 --> 00:01:37,440
0,480 570,1020 1020,1230 1260,1500 1500,2010
about,| {} {you,have} any questions
|你现在有任何问题，请随时提问，

51
00:01:37,440 --> 00:01:38,430
0,210 210,390 390,630 630,840 840,990
right now, please feel free

52
00:01:38,430 --> 00:01:39,520
0,60 60,540
to ask,|
|

53
00:01:39,520 --> 00:01:40,510
0,240 240,390 390,450 450,720 720,990
{} and of course always
当然，在任何时候都要加入进来。

54
00:01:40,510 --> 00:01:41,770
0,240 240,510 510,720 720,870 870,1260
jump in at any point.|
|

55
00:01:47,470 --> 00:01:49,600
0,540 630,1050 1050,1680
Okay, so, {}
好的，那么，我们上周看过了，

56
00:01:49,720 --> 00:01:50,800
0,240 240,540 540,690 690,780 780,1080
so we saw it last

57
00:01:50,800 --> 00:01:51,850
0,210 210,480 480,720 720,930 930,1050
week,| we started talking about
|我们开始谈论木筏，

58
00:01:51,850 --> 00:01:53,020
0,480 480,570 570,870 870,1020 1020,1170
raft,| you know we saw
|你知道，我们看到领导者已经完成了将其日志复制到追随者上的工作

59
00:01:53,020 --> 00:01:53,920
0,180 180,270 270,540 540,690 690,900
that the leader has served

60
00:01:53,920 --> 00:01:55,420
0,210 210,630 630,810 810,1320 1320,1500
this job of replicating its

61
00:01:55,420 --> 00:01:59,080
0,510 750,1350 1350,2310 2730,3120 3120,3660
log onto the onto followers|
|

62
00:01:59,440 --> 00:02:01,510
0,840 840,1230 1230,1590 1620,1800 1800,2070
and {} but you know
但你知道，由于领导人选举的崩溃，

63
00:02:01,510 --> 00:02:02,860
0,240 240,420 420,510 510,1140 1140,1350
{} due to crashes in

64
00:02:02,860 --> 00:02:04,810
0,240 240,840 1020,1440 1440,1710 1710,1950
leader election,| {} the state
|系统的状态，你知道，日志实际上可以有很大的差异，

65
00:02:04,810 --> 00:02:05,620
0,90 90,150 150,630 630,720 720,810
of the system, you know

66
00:02:05,620 --> 00:02:06,790
0,120 120,360 360,480 480,690 690,1170
the logs can actually quite

67
00:02:06,790 --> 00:02:08,680
0,660 660,1140 1140,1560 1590,1860 1860,1890
can diverse quite quite a

68
00:02:08,680 --> 00:02:10,020
0,270
bit,|
|

69
00:02:11,280 --> 00:02:13,260
0,360 360,600 600,1230 1470,1920 1920,1980
in figure six is an
在图6中是一个图解，

70
00:02:13,260 --> 00:02:16,800
0,870 1500,1620 1620,1710 1710,2490 2520,3540
illustration,| you know why, how,
|你知道为什么，怎么，怎么会发生这种事，

71
00:02:16,890 --> 00:02:18,180
0,300 300,570 570,690 690,1200 1200,1290
how that could happen,| you
|你知道领导者可能会倒下，

72
00:02:18,180 --> 00:02:19,860
0,150 150,480 510,870 870,1170 1500,1680
know the leaders can go

73
00:02:19,860 --> 00:02:21,090
0,510 510,630 630,810 810,1080 1080,1230
down,| they may append some
|他们可以添加更多的条目

74
00:02:21,090 --> 00:02:22,500
0,270 270,720 720,930 930,1170 1170,1410
more entries| and so there's
|所以有一大堆不同的场景，

75
00:02:22,500 --> 00:02:23,280
0,60 60,240 240,420 420,510 510,780
a whole bunch of different

76
00:02:23,280 --> 00:02:26,640
0,810 1140,1920 1950,2490 2490,2760 3060,3360
scenarios,| {} yeah that our
|是的，我们的系统可以在

77
00:02:26,640 --> 00:02:27,720
0,270 270,420 420,570 570,780 780,1080
system can end up in|
|

78
00:02:27,720 --> 00:02:29,040
0,150 150,420 420,570 570,1230 1230,1320
and so the figure {}
因此，图6、6、7实际上显示了一大堆

79
00:02:29,040 --> 00:02:31,110
0,360 360,750 750,990 990,1380 1680,2070
six, six, seven actually {}

80
00:02:31,110 --> 00:02:32,160
0,300 300,360 360,540 540,600 600,1050
shows a bunch of those|
|

81
00:02:32,280 --> 00:02:34,540
0,810 1050,1740
and the,
而这个数字的主要原因是，

82
00:02:34,690 --> 00:02:36,430
0,150 150,210 210,450 450,960 960,1740
and the main reason, {}

83
00:02:36,640 --> 00:02:38,020
0,180 180,270 270,660 660,960 960,1380
for the figure is that,|
|

84
00:02:38,020 --> 00:02:40,150
0,660 690,960 960,1260 1260,1800 1800,2130
{} it actually sharpens up
它实际上强化了领导人选举规则，

85
00:02:40,360 --> 00:02:42,560
0,570 570,930 930,1290 1290,1650
the leader election rule,|
|

86
00:02:49,940 --> 00:02:51,110
0,330 330,660 660,720 720,990 990,1170
so once the leader goes
所以一旦领袖倒台

87
00:02:51,110 --> 00:02:52,340
0,600 600,900 900,1050 1050,1170 1170,1230
down| and we need to
|我们需要选举一位新领导人，

88
00:02:52,340 --> 00:02:54,110
0,270 270,300 300,540 540,1080 1350,1770
elect a new leader, {}|
|

89
00:02:54,110 --> 00:02:56,600
0,360 360,600 600,780 780,1530 1560,2490
there's actually some restrictions that
实际上，有一些限制是必须应用的

90
00:02:56,600 --> 00:02:58,700
0,210 210,300 300,930 1170,1590 1590,2100
must be applied| to actually
|以确保我们最终能够在正确的原木上收敛。

91
00:02:58,730 --> 00:03:00,680
0,540 720,1260 1260,1680 1680,1830 1830,1950
{} make sure that we

92
00:03:00,680 --> 00:03:02,180
0,120 120,450 450,1170 1170,1380 1380,1500
can get converged on the

93
00:03:02,180 --> 00:03:03,380
0,270 270,630 630,720 720,870 870,1200
right log in the end.|
|

94
00:03:04,040 --> 00:03:05,030
0,180 180,330 330,540 540,600 600,990
And so, first of all,|
所以，首先，|

95
00:03:05,060 --> 00:03:06,200
0,360 360,630 630,720 720,1020 1020,1140
one part of that is
这其中的一部分是，任何领导人都需要获得多数，

96
00:03:06,200 --> 00:03:07,660
0,150 150,360 360,900
that any leader

97
00:03:07,660 --> 00:03:09,280
0,240 240,510 510,960 960,1020 1020,1620
need to achieve a majority,|
|

98
00:03:10,620 --> 00:03:11,640
0,300 300,420 420,540 540,720 720,1020
and this is a part
这是这个想法的一部分

99
00:03:11,640 --> 00:03:12,810
0,180 180,240 240,750 750,900 900,1170
of the idea| to actually
|为了真正避免大脑分裂综合症或分裂脑综合征，

100
00:03:12,810 --> 00:03:15,270
0,570 600,1110 1110,1260 1260,1860 2160,2460
avoid {} just brain {}

101
00:03:15,270 --> 00:03:16,800
0,360 360,930 930,1050 1050,1290 1290,1530
split syndrome or split brain

102
00:03:16,800 --> 00:03:18,090
0,480 510,930 930,1080 1080,1170 1170,1290
syndrome,| {} sort of we
|在某种程度上我们可以确保

103
00:03:18,090 --> 00:03:19,230
0,150 150,510 510,660 660,930 930,1140
can actually make sure that|
|

104
00:03:19,230 --> 00:03:20,760
0,120 120,330 330,540 540,1140 1260,1530
you know in any two
你知道，在随后的任何两次选举中，

105
00:03:20,760 --> 00:03:22,800
0,630 630,1380 1620,1860 1860,1980 1980,2040
subsequent elections,| there's going to
|至少会有一个节点，

106
00:03:22,800 --> 00:03:24,090
0,90 90,210 210,420 420,750 750,1290
be at least one node,|
|

107
00:03:24,150 --> 00:03:26,250
0,210 210,390 390,1080 1080,1500 1500,2100
{} that participated in {}
参与了这两个多数派的人，

108
00:03:26,280 --> 00:03:29,250
0,630 780,2070 2070,2430 2430,2550 2820,2970
both majorities,| because you can
|因为你只能做两个多数必须重叠

109
00:03:29,250 --> 00:03:31,050
0,480 900,960 960,1230 1230,1590 1590,1800
only do two majority must

110
00:03:31,050 --> 00:03:32,940
0,630 660,930 930,1230 1230,1590 1590,1890
overlap| and that node must
|而那个节点实际上必须有你知道的运算，从最近的，从最近的术语。

111
00:03:32,940 --> 00:03:35,160
0,420 420,900 930,1020 1020,1560 1590,2220
actually have you know operations

112
00:03:35,160 --> 00:03:36,900
0,180 180,270 270,870 1140,1590 1590,1740
from a recent, {} from

113
00:03:36,900 --> 00:03:37,980
0,90 90,360 360,780
the recent term.|
|

114
00:03:38,520 --> 00:03:39,900
0,180 180,480 480,540 540,1050 1110,1380
The majority is important,| but
多数是重要的，|但事实证明，它实际上更像是穿梭的，

115
00:03:39,900 --> 00:03:41,340
0,210 210,510 510,750 750,1290 1290,1440
turns out it's actually a

116
00:03:41,340 --> 00:03:43,920
0,420 420,870 1260,2040 2160,2340 2340,2580
{little,bit} {more,shuttle},| {} you might
|你可能会认为，就像最长的原木应该足够了，

117
00:03:43,920 --> 00:03:45,690
0,840 840,1080 1080,1260 1260,1380 1380,1770
think that like the longest

118
00:03:45,690 --> 00:03:47,400
0,570 570,780 780,960 960,1050 1050,1710
log that should be sufficient,|
|

119
00:03:47,400 --> 00:03:49,230
0,390 390,480 480,840 840,1140 1140,1830
because the longest log has
因为最长的日志具有最多的信息，

120
00:03:49,230 --> 00:03:51,180
0,270 270,810 810,1290 1440,1800 1800,1950
most information,| so we're just
|所以我们被选为下一任领袖

121
00:03:51,180 --> 00:03:51,990
0,210 210,390 390,510 510,570 570,810
picked out as the next

122
00:03:51,990 --> 00:03:53,070
0,330 330,450 450,900 900,1020 1020,1080
leader| and then we're in
|然后我们就状态很好了

123
00:03:53,070 --> 00:03:54,810
0,150 150,570 810,1230 1350,1560 1560,1740
good shape| and that turns
|事实证明并非如此。

124
00:03:54,810 --> 00:03:55,350
0,120 120,180 180,270 270,480 480,540
out to be not the

125
00:03:55,350 --> 00:03:56,300
0,600
case.|
|

126
00:03:56,300 --> 00:03:59,120
0,900 900,1440 1440,2040 2160,2430 2430,2820
{} And {} and so,
因此，领导者的规则稍微微妙了一点，

127
00:03:59,330 --> 00:04:01,430
0,360 360,720 720,1740 1740,2040 2040,2100
{} and leader rules a

128
00:04:01,430 --> 00:04:02,510
0,210 210,360 360,540 540,990 990,1080
little bit more subtle,| you
|你知道，实际上大多数加上至少到目前为止，至少是最新的。

129
00:04:02,510 --> 00:04:05,990
0,150 150,900 900,1650 1860,3090 3090,3480
know actually majority {} plus

130
00:04:05,990 --> 00:04:07,130
0,210 210,450 450,630 630,750 750,1140
at least as of date,

131
00:04:07,130 --> 00:04:09,120
0,60 210,960
{at-least -}

132
00:04:09,720 --> 00:04:11,860
0,570 660,930 930,1080 1080,1530
but up to date.|
|

133
00:04:13,680 --> 00:04:14,740
0,360

134
00:04:15,430 --> 00:04:17,740
0,570 720,1380 1440,1680 1680,2190 2190,2310
So, {} so to {}
所以，要知道领导人选举有一个追随者，

135
00:04:17,740 --> 00:04:18,820
0,120 120,270 270,420 420,840 840,1080
you know the leader election

136
00:04:18,820 --> 00:04:22,600
0,90 90,570 780,2220 2550,3600 3600,3780
is running a follower,| so
|因此，这位候选人开始竞选领导人，

137
00:04:22,600 --> 00:04:23,800
0,210 210,720 720,810 810,1110 1110,1200
the candidate is starting to

138
00:04:23,800 --> 00:04:25,630
0,150 150,240 240,450 450,990 990,1830
run {} leader election approaches,|
|

139
00:04:25,630 --> 00:04:27,490
0,420 420,600 600,660 660,1200 1560,1860
{} bunch of followers| and
一群追随者|而追随者则投了赞成票，

140
00:04:27,490 --> 00:04:29,890
0,90 90,630 630,1110 1140,1770 2130,2400
the followers {} response {}

141
00:04:29,890 --> 00:04:32,110
0,240 240,300 300,780 780,1260 1560,2220
with a positive vote, {}|
|

142
00:04:32,110 --> 00:04:35,110
0,390 390,1590 1590,2280 2280,2700 2700,3000
if the candidate actually is
如果候选人真的至少像他们一样是最新的。

143
00:04:35,110 --> 00:04:36,010
0,180 180,420 420,600 600,690 690,900
at least up to date

144
00:04:36,010 --> 00:04:37,100
0,120 120,330 330,690
as they are.|
|

145
00:04:37,480 --> 00:04:38,470
0,240 240,390 390,570 570,840 840,990
And what that means is
这意味着，

146
00:04:38,470 --> 00:04:40,390
0,390 480,660 660,1050 1050,1350 1350,1920
that,| the last log entry
|最后一个日志条目实际上必须具有相同的术语

147
00:04:40,420 --> 00:04:42,850
0,600 630,1050 1050,1380 1380,1920 2130,2430
{} must actually have {}

148
00:04:42,850 --> 00:04:45,340
0,120 120,480 480,1050 1260,2040 2040,2490
the same term| or in
|或者，如果它们实际上有相同的术语，

149
00:04:45,340 --> 00:04:47,170
0,480 480,1200 1230,1380 1380,1680 1680,1830
{} if they actually have

150
00:04:47,170 --> 00:04:49,300
0,90 90,300 300,750 780,1620 1650,2130
the same term,| the longest
|时间最长的一种胜利。

151
00:04:49,300 --> 00:04:51,020
0,390 420,630 630,720 720,1290
one sort of wins.|
|

152
00:04:51,680 --> 00:04:53,720
0,600 930,1470
And so,
所以，领导人的选举规则，你知道，我们上周看到了这个问题

153
00:04:53,990 --> 00:04:54,650
0,180 180,330 330,420 420,600 600,660
so that the leader the

154
00:04:54,650 --> 00:04:55,940
0,330 330,870 870,990 990,1110 1110,1290
election rule you know we

155
00:04:55,940 --> 00:04:57,680
0,240 240,390 390,930 930,1410 1410,1740
look at this problem last

156
00:04:57,680 --> 00:04:58,910
0,390 420,930 930,1110 1110,1170 1170,1230
week| as part of the
|作为家庭作业的一部分

157
00:04:58,910 --> 00:05:00,830
0,510 510,720 720,930 930,1440 1440,1920
homework| and what happens if
|如果你知道这张纸条，你知道领导者最糟糕的是什么，实际上已经死了，会发生什么？

158
00:05:01,100 --> 00:05:02,540
0,90 90,420 480,810 810,1350 1350,1440
you know this note you

159
00:05:02,540 --> 00:05:03,800
0,210 210,450 450,810 840,1170 1170,1260
know what's worse about the

160
00:05:03,800 --> 00:05:06,080
0,510 510,780 780,870 870,1350 1680,2280
leader actually is dead, {}|
|

161
00:05:06,080 --> 00:05:07,580
0,210 210,810 990,1140 1140,1320 1320,1500
it's gone,| you know and
它不见了，|你知道，谁有可能成为领导者，

162
00:05:07,580 --> 00:05:09,260
0,180 180,330 330,690 690,1230
who could become leaders,|
|

163
00:05:09,590 --> 00:05:10,640
0,120 120,330 330,450 450,600 600,1050
{and -} you know quickly
你知道，很快就发现，

164
00:05:10,640 --> 00:05:12,230
0,540 540,930 960,1050 1050,1200 1200,1590
discovered that,| you know there
|你知道，有一群人无法成为领袖，

165
00:05:12,350 --> 00:05:13,100
0,270 270,330 330,510 510,570 570,750
there's a bunch of them

166
00:05:13,100 --> 00:05:14,720
0,150 150,480 480,810 810,1290 1380,1620
that cannot become leader, {}|
|

167
00:05:14,720 --> 00:05:16,010
0,120 120,300 300,540 540,1200 1200,1290
but then there's potentially a
但在很多情况下，一些人可能会成为领导者。

168
00:05:16,010 --> 00:05:17,930
0,360 360,1020 1020,1170 1170,1410 1410,1920
{number,of} scenarios in which some

169
00:05:17,960 --> 00:05:19,400
0,150 150,420 420,930
can become leaders.|
|

170
00:05:19,430 --> 00:05:20,870
0,540 540,690 690,780 780,1350 1350,1440
And so, in particular, you
因此，尤其是，你知道我们认为一个人可以成为领导者，

171
00:05:20,870 --> 00:05:22,130
0,90 90,360 360,900 900,1200 1200,1260
know we identify that a

172
00:05:22,130 --> 00:05:24,470
0,180 180,510 510,1020 1290,2070 2070,2340
can become leader,| {} c
|C可以成为领导者，D可以成为领导者。

173
00:05:24,470 --> 00:05:26,390
0,180 180,510 510,1080 1140,1560 1560,1920
can become leader, {and,d,can} became

174
00:05:26,390 --> 00:05:28,320
0,450
leader.|
|

175
00:05:28,700 --> 00:05:30,890
0,540 780,930 930,1200 1200,1710 1770,2190
{} And so then, {}
然后，这可能是整个讨论中最重要的部分，对吧，

176
00:05:30,890 --> 00:05:32,150
0,330 330,450 450,900 900,1170 1170,1260
and so there's probably the

177
00:05:32,150 --> 00:05:33,380
0,330 330,720 720,990 990,1080 1080,1230
most important part of this

178
00:05:33,380 --> 00:05:34,730
0,150 150,630 660,900 900,1200 1200,1350
whole discussion, right,| who can
|谁能成为领袖。

179
00:05:34,730 --> 00:05:37,010
0,420 420,780 810,1320 1320,1710 1710,2280
become leader.| [] there's question.|
|[]这是个问题。|

180
00:05:37,310 --> 00:05:39,380
0,990 990,1410 1440,1620 1620,1800 1800,2070
{} There, let me hold
好了，让我稍等一下。

181
00:05:39,380 --> 00:05:40,220
0,300
on.|
|

182
00:05:43,110 --> 00:05:44,160
0,510
Okay.|
好吧。|

183
00:05:44,160 --> 00:05:45,570
0,180 180,330 330,570 570,1200 1230,1410
So who becomes {} that's
所以成为谁是最重要的部分，

184
00:05:45,570 --> 00:05:46,440
0,90 90,300 300,600 600,750 750,870
the most important part,| so
|所以有一堆不同的场景，

185
00:05:46,440 --> 00:05:47,400
0,240 240,420 420,630 630,720 720,960
there's a bunch of different

186
00:05:47,400 --> 00:05:49,020
0,630 630,750 750,1230 1260,1470 1470,1620
scenarios,| in which a can
|在这里，一个人可以成为领导者，

187
00:05:49,020 --> 00:05:50,040
0,240 240,300 300,720 750,990 990,1020
become a leader,| there's a
|有一种情况是，c成为领导者，

188
00:05:50,040 --> 00:05:51,240
0,360 360,480 480,660 660,780 780,1200
scenario where c {} become

189
00:05:51,240 --> 00:05:52,170
0,60 60,360 360,480 480,570 570,930
a leader,| in the scenario
|在d成为领导者的情况下。

190
00:05:52,170 --> 00:05:53,430
0,150 150,330 330,570 570,900 900,1260
where d become a leader.|
|

191
00:05:54,580 --> 00:05:55,660
0,360 360,450 450,840 840,1050 1050,1080
Then the discussion focus a
然后讨论集中了一点，

192
00:05:55,660 --> 00:05:57,730
0,240 240,510 510,780 870,1500 1860,2070
little bit,| like well at
|比如，至少有一种特殊的情况，

193
00:05:57,730 --> 00:05:59,410
0,150 150,270 270,840 870,1320 1320,1680
least there's one particular scenario,|
|

194
00:05:59,410 --> 00:06:00,010
0,60 60,210 210,330 330,420 420,600
in which one of these
其中一人成为领导者，

195
00:06:00,010 --> 00:06:02,800
0,390 390,870 930,1620 1620,2250 2250,2790
becomes leader,| others multiple scenarios
|其他多种情况下接手领头羊，

196
00:06:02,800 --> 00:06:03,640
0,60 60,330 330,570 570,720 720,840
in which take over the

197
00:06:03,640 --> 00:06:05,380
0,300 300,720 720,1140 1140,1290 1290,1740
leader,| particularly focus this discussion
|特别关注这个讨论集中在一个，

198
00:06:05,380 --> 00:06:08,080
0,360 360,750 1140,1710 1710,1710
focused on {} a,|
|

199
00:06:09,060 --> 00:06:10,620
0,480 480,750 750,930 930,1260 1260,1560
{} because like one way
因为就像一个人可以成为领导者的一种方式

200
00:06:10,620 --> 00:06:11,460
0,120 120,300 300,480 480,780 780,840
that a can become a

201
00:06:11,460 --> 00:06:14,940
0,420 420,1140 1140,1950 2130,2850
leader| is when {}
|是当c和d下降的时候，对吧，

202
00:06:14,940 --> 00:06:16,400
0,240 240,900
c {and,d}

203
00:06:16,520 --> 00:06:17,740
0,180 180,720
are down,

204
00:06:21,540 --> 00:06:22,920
0,360 360,780 780,1050 1050,1290 1290,1380
right,| because {} c and
|因为c和d都下降了，

205
00:06:22,920 --> 00:06:24,510
0,180 180,270 270,870 1140,1590 1590,1590
d are down,| {} a
|A将与B进行对话，F将与4形成多数，

206
00:06:24,510 --> 00:06:26,280
0,360 360,660 660,1080 1110,1530 1530,1770
will talk to b e

207
00:06:26,280 --> 00:06:28,410
0,420 420,540 540,1080 1350,1740 1740,2130
{and -} f {} {form,a}

208
00:06:28,410 --> 00:06:30,930
0,720 810,1350 1350,1650 1650,1920 1920,2520
majority {} with {} 4,|
|

209
00:06:31,230 --> 00:06:33,390
0,390 390,690 690,1020 1020,1560 1590,2160
{} it has the most
它有最新的日志，

210
00:06:33,390 --> 00:06:34,650
0,120 120,210 210,450 450,960 1020,1260
up to date log,| you
|你注意到，即使f是一个更长的对数，

211
00:06:34,650 --> 00:06:36,450
0,420 420,720 720,840 840,1470 1500,1800
notice that you know even

212
00:06:36,450 --> 00:06:37,410
0,180 180,420 420,540 540,600 600,960
though f is a longer

213
00:06:37,410 --> 00:06:39,300
0,450 780,1020 1020,1290 1290,1410 1410,1890
log,| that actually is not
|这实际上不是最新的一款，

214
00:06:39,330 --> 00:06:40,260
0,330 330,480 480,720 720,840 840,930
{} the most up to

215
00:06:40,260 --> 00:06:42,150
0,210 210,630 840,1290 1290,1500 1500,1890
date one,| so a actual
|所以一个真正成功成为领导者的人，

216
00:06:42,150 --> 00:06:44,040
0,480 480,570 570,1230 1260,1470 1470,1890
succeed in becoming the leader,|
|

217
00:06:44,590 --> 00:06:45,730
0,240 240,480 480,720 720,990 990,1140
and then things proceed from
然后事情就从那里开始了。

218
00:06:45,730 --> 00:06:46,640
0,360
there.|
|

219
00:06:47,170 --> 00:06:47,890
0,270 270,420 420,540 540,660 660,720
{} But there was an
但有一个有趣的问题出现了

220
00:06:47,890 --> 00:06:49,450
0,270 270,720 720,1020 1020,1200 1200,1560
interesting question that came {up,is}|
|

221
00:06:49,450 --> 00:06:51,160
0,300 300,630 630,1320 1320,1410 1410,1710
are other scenarios in which
特别是在其他情况下，一个人可以成为领导者，

222
00:06:51,190 --> 00:06:52,960
0,360 360,510 510,900 900,1110 1110,1770
a can become {a,leader,in} particular,|
|

223
00:06:52,990 --> 00:06:54,520
0,360 360,510 510,570 570,1080 1080,1530
or is there scenario where
或者有没有这样一种情况，即使c和d都在上升，

224
00:06:54,580 --> 00:06:55,900
0,450 450,660 660,960 960,1110 1110,1320
even if c and d

225
00:06:55,900 --> 00:06:57,080
0,180 180,540
are up,|
|

226
00:06:59,270 --> 00:07:01,430
0,180 180,240 240,960 1110,1350 1350,2160
{or -} reachable or participate,|
或可联系到或参与，|

227
00:07:01,520 --> 00:07:03,260
0,60 90,360 360,690 690,1440 1440,1740
{ -} {is,it} possibility {a,becomes}
有没有可能成为领导者，

228
00:07:03,260 --> 00:07:04,280
0,60 60,450
a leader,|
|

229
00:07:05,140 --> 00:07:06,760
0,720 810,1080 1080,1290 1290,1470 1470,1620
{ -} so we see
所以我们看到c和d向上

230
00:07:06,760 --> 00:07:08,080
0,60 60,540 540,750 750,1110 1170,1320
{c,and,d,up -}| and so the
|所以问题是c和d总是投票给a，

231
00:07:08,080 --> 00:07:09,910
0,300 300,510 510,780 780,1350 1350,1830
question is does {c,and,d} always

232
00:07:09,910 --> 00:07:11,110
0,330 330,540 540,780 780,960 960,1200
vote for a,| if a
|如果a是候选人。

233
00:07:11,110 --> 00:07:12,440
0,120 120,180 180,810
is the candidate.|
|

234
00:07:12,810 --> 00:07:14,250
0,270 270,450 450,1050 1050,1290 1290,1440
{} And it turns out
事实证明，这实际上有点复杂，

235
00:07:14,250 --> 00:07:16,350
0,90 90,360 360,750 750,1470 1560,2100
is actually slightly complicated, {}|
|

236
00:07:16,350 --> 00:07:17,640
0,240 240,330 330,540 540,990 990,1290
it is not completely {straightforward
这不是完全直截了当的，

237
00:07:17,640 --> 00:07:19,590
0,300 300,450 870,1170 1170,1560 1590,1950
- -},| so if a
|因此，如果A开始这次选举，

238
00:07:19,590 --> 00:07:21,690
0,330 330,480 480,1080 1110,1950 1950,2100
starts this election,| presumably it
|据推测，它将在第7届任期内开始选举。

239
00:07:21,690 --> 00:07:23,190
0,120 120,420 420,480 480,930 930,1500
will start the election {in,term}

240
00:07:23,280 --> 00:07:24,500
0,630
7.|
|

241
00:07:27,310 --> 00:07:28,900
0,270 270,390 390,690 720,1290 1290,1590
And so if context c
所以，如果上下文c和d，你知道，

242
00:07:28,900 --> 00:07:30,640
0,120 120,630 690,1290 1290,1470 1470,1740
and d {} {you,know} c

243
00:07:30,640 --> 00:07:31,570
0,150 150,270 270,600 600,840 840,930
will be perfectly fine with

244
00:07:31,570 --> 00:07:34,900
0,270 270,780 1140,2040 2790,3330 3330,3330
that,| because {the -} a
|因为A至少是最新的，

245
00:07:34,900 --> 00:07:36,250
0,840 840,960 960,1170 1170,1260 1260,1350
is at least up to

246
00:07:36,250 --> 00:07:37,180
0,450
date,|
|

247
00:07:37,210 --> 00:07:40,220
0,780 810,1770 1800,2430

248
00:07:40,250 --> 00:07:42,110
0,540 690,870 870,990 990,1710 1710,1860
{} and so we'll be
因此，我们将能够达到多数，

249
00:07:42,110 --> 00:07:43,820
0,270 270,570 570,930 930,1260 1260,1710
able to achieve a majority,|
|

250
00:07:43,820 --> 00:07:45,020
0,330 420,570 570,780 780,1050 1050,1200
but you know it is
但你知道正确的d是有可能的，

251
00:07:45,020 --> 00:07:47,390
0,450 450,870 870,1410 1650,2100 2100,2370
possible correct d,| {} there's
|如果d确实有一条额外的规则，

252
00:07:47,390 --> 00:07:50,510
0,510 510,930 930,1260 1260,1650 1650,3120
one additional rule that if

253
00:07:51,170 --> 00:07:53,690
0,990 990,1290 1290,1650 1650,2130 2130,2520
d actually has,| if {}
|如果跟随者在更高的项中具有更高的项c，

254
00:07:53,900 --> 00:07:56,570
0,1380 1710,2130 2130,2310 2310,2370 2370,2670
follower follower has a higher

255
00:07:56,570 --> 00:07:57,710
0,360 360,510 510,780 780,840 840,1140
term as c in higher

256
00:07:57,710 --> 00:07:59,330
0,540 570,810 810,1200 1200,1500 1500,1620
term,| its current term is
|它现在的期限更高，

257
00:07:59,330 --> 00:08:00,440
0,690
higher,|
|

258
00:08:00,440 --> 00:08:02,420
0,600 600,930 930,1200 1200,1350 1350,1980
then the or the candidate
那么这个或者那个候选人，那么实际上它就可以停止选举，

259
00:08:02,540 --> 00:08:04,280
0,270 270,840 900,1110 1110,1230 1230,1740
then actually it can stop

260
00:08:04,280 --> 00:08:06,080
0,120 120,570 570,1080 1350,1680 1680,1800
the election,| because {} it
|因为它会回应说，嘿，我的任期比你高，

261
00:08:06,080 --> 00:08:07,730
0,180 180,780 810,1320 1320,1470 1470,1650
will respond saying like hey

262
00:08:07,730 --> 00:08:09,320
0,180 180,510 510,1110 1110,1350 1350,1590
my {term,is} higher than your

263
00:08:09,320 --> 00:08:10,910
0,390 390,540 540,1110 1170,1320 1320,1590
higher my term,| my current
|我现在的任期比你的任期要高

264
00:08:10,910 --> 00:08:12,350
0,210 210,450 450,600 600,900 900,1440
{term,is} higher than your term|
|

265
00:08:12,470 --> 00:08:13,340
0,120 120,210 210,630 630,720 720,870
and so therefore you have
因此，你必须成为一个追随者，

266
00:08:13,340 --> 00:08:14,360
0,60 60,300 300,390 390,840 870,1020
to become a follower,| so
|因此，a将从候选人改回追随者。

267
00:08:14,360 --> 00:08:16,610
0,270 270,420 420,960 1110,1710 1710,2250
a will then be changed

268
00:08:16,610 --> 00:08:18,260
0,390 390,690 690,1140 1140,1200 1200,1650
back from candidate to follower.|
|

269
00:08:18,760 --> 00:08:19,990
0,180 180,330 330,450 450,900 900,1230
And this can happen correctly,|
而这是可以正确发生的，|

270
00:08:19,990 --> 00:08:21,490
0,90 90,360 360,480 480,930 1200,1500
in case of d, this
在d的情况下，这个d实际上可能已经看到了项a

271
00:08:21,490 --> 00:08:23,140
0,390 390,630 630,870 870,990 990,1650
d might actually have seen

272
00:08:23,290 --> 00:08:24,580
0,330 330,690 690,990 1020,1170 1170,1290
{} term a| and we
|从这张照片我们不能很好地判断，

273
00:08:24,580 --> 00:08:25,720
0,240 240,420 420,810 810,990 990,1140
can't really tell from this

274
00:08:25,720 --> 00:08:27,010
0,330 330,540 540,810 810,960 960,1290
picture,| what actually the outcome
|结果到底会是什么，

275
00:08:27,010 --> 00:08:28,180
0,60 60,180 180,240 240,630 840,1170
is going to be,| let's
|让我们假设这个例子，

276
00:08:28,180 --> 00:08:30,640
0,420 420,600 600,1260 1470,2220 2220,2460
assume that example,| {} you
|你知道它已经运行了一次，并将期限增加到8，

277
00:08:30,640 --> 00:08:33,280
0,150 150,570 1410,1950 1950,2160 2160,2640
know the it has run

278
00:08:33,310 --> 00:08:37,060
0,870 900,1590 1770,2460 2460,3150 3150,3750
{} once {} and has

279
00:08:37,060 --> 00:08:39,190
0,600 600,930 930,1050 1050,1470 1560,2130
increases term to 8,| it
|它没有成为成功的领导者

280
00:08:39,190 --> 00:08:40,960
0,210 210,480 480,960 960,1500 1560,1770
didn't become succeeded leader| and
|然后它的当前任期将是8

281
00:08:40,960 --> 00:08:41,890
0,90 90,210 210,450 450,660 660,930
then its current term will

282
00:08:41,890 --> 00:08:42,670
0,300 300,420 420,540 540,660 660,780
8| and so it will
|因此，当有人要求投票时，它就会投票，

283
00:08:42,670 --> 00:08:45,160
0,600 600,870 870,1230 1260,2010 2010,2490
vote when a ask to

284
00:08:45,680 --> 00:08:47,090
0,210 210,330 330,810 960,1320 1320,1410
for its vote,| {you,know,d} will
|你知道我会拒绝的，

285
00:08:47,090 --> 00:08:48,350
0,210 210,690 690,780 780,990 990,1260
say no,| I won't vote
|我不会投你的票，

286
00:08:48,350 --> 00:08:49,970
0,120 120,480 660,1080 1080,1500 1500,1620
for you,| and furthermore by
|此外，按照目前的术语是一个，

287
00:08:49,970 --> 00:08:51,470
0,330 330,540 540,690 690,1170 1290,1500
current term is a,| so
|因此A将看到该消息，

288
00:08:51,470 --> 00:08:52,730
0,180 180,360 360,570 570,780 780,1260
a will see that message,|
|

289
00:08:52,730 --> 00:08:54,290
0,210 210,510 510,720 720,990 990,1560
it's higher than a 7|
比7分还高|

290
00:08:54,440 --> 00:08:55,820
0,150 150,360 360,540 540,840 840,1380
and so a will actually
因此，一个人实际上会下台

291
00:08:55,820 --> 00:08:57,620
0,510 540,870 870,1380 1380,1530 1530,1800
{} step down| and become
|成为一个追随者

292
00:08:57,620 --> 00:08:58,700
0,180 180,240 240,660 750,960 960,1080
just a follower| and then
|然后在后来的某个时候，

293
00:08:58,700 --> 00:09:00,170
0,360 360,720 720,1140 1140,1260 1260,1470
{at,some,point} later,| presumably you know
|想必你知道d会运行它的选举计时器会响

294
00:09:00,170 --> 00:09:02,030
0,270 270,480 480,870 1260,1650 1650,1860
d will run {} its

295
00:09:02,030 --> 00:09:03,380
0,330 330,720 720,840 840,1050 1050,1350
election timer will go off|
|

296
00:09:03,380 --> 00:09:04,460
0,120 120,390 390,540 540,750 750,1080
and actually it will run.|
实际上，它会运行。|

297
00:09:05,740 --> 00:09:07,420
0,150 150,510 750,1020 1020,1290 1290,1680
And so the short story
所以这个简短的故事，你知道，士气会，

298
00:09:07,420 --> 00:09:09,160
0,90 90,420 420,540 540,990 1110,1740
of this you know morale

299
00:09:09,160 --> 00:09:10,390
0,270 270,450 450,750 750,870 870,1230
is gonna,| really this picture
|事实上，这张照片是这样的，

300
00:09:10,390 --> 00:09:12,160
0,210 210,540 840,1080 1080,1350 1350,1770
is that,| {} it's absolutely
|这是绝对可能的，

301
00:09:12,160 --> 00:09:13,660
0,480 480,720 720,810 810,1350 1350,1500
possible,| that a {c,and,d} can
|A、C和D可以在不同类型的场景中成为领导者，

302
00:09:13,660 --> 00:09:14,950
0,240 240,600 600,840 840,1080 1080,1290
become leader in different types

303
00:09:14,950 --> 00:09:17,230
0,60 60,840 1110,1650 1650,2010 2010,2280
of scenarios,| {} and that's
|而这可能是摆脱这一局面的主要原因。

304
00:09:17,230 --> 00:09:18,370
0,300 300,390 390,750 750,1050 1050,1140
probably the main thing to

305
00:09:18,370 --> 00:09:19,600
0,210 210,360 360,450 450,870
get out of this.|
|

306
00:09:19,660 --> 00:09:23,950
0,480 600,1290 1440,2550 2910,3660 3720,4290
{} Professor.| Yeah.| So, {}
教授。|嗯。|所以，我我只想问问，

307
00:09:23,950 --> 00:09:24,970
0,210 210,660 660,810 810,960 960,1020
I I just want to

308
00:09:24,970 --> 00:09:26,320
0,300 300,450 450,720 720,1080 1170,1350
ask,| because I think I
|因为我想我我不确定我是否理解正确，

309
00:09:26,320 --> 00:09:27,130
0,330 330,510 510,660 660,720 720,810
I'm not sure if I

310
00:09:27,130 --> 00:09:28,870
0,330 330,840 840,1230 1350,1620 1620,1740
understood correctly,| but then you
|但随后你又说a可能会以7号条款当选，

311
00:09:28,870 --> 00:09:30,610
0,420 480,750 750,1170 1170,1260 1260,1740
said a might be elected

312
00:09:30,610 --> 00:09:32,230
0,90 90,360 360,870 1290,1500 1500,1620
in terms 7,| it is
|它并不是因为任何原因都不能以第7条当选，

313
00:09:32,230 --> 00:09:33,760
0,270 270,450 450,570 570,720 720,1530
not true that it cannot

314
00:09:34,150 --> 00:09:35,530
0,240 240,480 480,870 870,960 960,1380
for any reason be elected

315
00:09:35,530 --> 00:09:36,880
0,90 90,390 390,930
in terms 7,|
|

316
00:09:37,580 --> 00:09:40,010
0,1050 1200,1530 1530,2010 2040,2220 2220,2430
{} even if d was
即使D倒下了，对吧，

317
00:09:40,010 --> 00:09:42,770
0,420 450,810 810,1290 1740,2460 2490,2760
down, right,| because people like
|因为像D这样的人已经获得了多数，对吧，在7分钟内。

318
00:09:42,770 --> 00:09:45,220
0,270 300,810 1200,1950
{} like d,

319
00:09:45,220 --> 00:09:46,420
0,420 450,480 510,930 930,1110 1110,1200
like {} already got a

320
00:09:46,420 --> 00:09:48,980
0,540 540,1050 1080,1290 1290,1890
majority, right, in 7.|
|

321
00:09:50,260 --> 00:09:51,880
0,360 360,570 570,750 750,1500 1500,1620
d got a majority in
D在7中获得多数，因为它实际上能够完成一些事情，

322
00:09:51,880 --> 00:09:53,380
0,360 360,720 720,1080 1080,1350 1350,1500
7, because it actually was

323
00:09:53,380 --> 00:09:55,810
0,330 330,630 630,1740 1770,2220 2220,2430
able to {} get something

324
00:09:55,810 --> 00:09:57,460
0,270 270,510 510,1110 1110,1500 1500,1650
done,| so presumably right, you're
|所以想必是对的，你是对的，

325
00:09:57,460 --> 00:09:59,470
0,330 330,450 450,600 600,990 1620,2010
right,| you know the good
|你知道好的观察力，

326
00:09:59,470 --> 00:10:00,820
0,570 870,1020 1020,1080 1080,1260 1260,1350
observation,| so it has to
|所以它必须是这样的，

327
00:10:00,820 --> 00:10:02,080
0,90 90,150 150,510 510,870 870,1260
be the case that,| there's
|实际上已经有很多人进入了第七学期，

328
00:10:02,080 --> 00:10:02,860
0,30 30,330 330,390 390,630 630,780
a number of people that

329
00:10:02,860 --> 00:10:04,210
0,240 240,660 660,780 780,1020 1020,1350
actually already in term 7,|
|

330
00:10:05,800 --> 00:10:06,940
0,330 330,480 480,690 690,930 930,1140
{} and the picture is
而且这幅画并不完整，

331
00:10:06,940 --> 00:10:08,710
0,690 720,990 990,1170 1170,1440 1440,1770
incomplete,| we don't really know
|我们真的不知道当前的术语是什么，

332
00:10:08,710 --> 00:10:09,910
0,270 270,330 330,720 720,1050 1050,1200
what the current term is,|
|

333
00:10:09,910 --> 00:10:10,810
0,120 120,360 360,480 480,690 690,900
that people have seen so
到目前为止人们所看到的。

334
00:10:10,810 --> 00:10:11,720
0,390
far.|
|

335
00:10:11,720 --> 00:10:12,700
0,510
Yeah.|
嗯。|

336
00:10:12,850 --> 00:10:13,840
0,450
Right.|
正确的。|

337
00:10:14,340 --> 00:10:16,380
0,570 570,900 900,1080 1080,1560 1830,2040
Well, yeah, I mean the
嗯，是的，我的意思是唯一的事情是，我认为大多数服务器已经在第七任期投票给了某人，所以。

338
00:10:16,380 --> 00:10:17,580
0,210 210,360 360,540 540,810 990,1200
only thing is like, I

339
00:10:17,580 --> 00:10:19,410
0,330 360,750 810,1200 1200,1320 1320,1830
think like {} a majority

340
00:10:19,410 --> 00:10:21,180
0,90 90,180 180,600 600,1020 1020,1770
of the servers already voted

341
00:10:21,510 --> 00:10:22,770
0,240 240,600 600,690 690,900 900,1260
for someone in term 7,

342
00:10:22,770 --> 00:10:24,570
0,330 330,1230 1230,1440 1440,1650 1650,1800
so.| Absolutely, a will go
|当然，A将进入第8学期，

343
00:10:24,570 --> 00:10:25,860
0,120 120,390 390,810
to term 8,|
|

344
00:10:25,950 --> 00:10:27,720
0,840 840,1380 1380,1470 1470,1590 1590,1770
{} and you know we'll
你知道我们将竞选8个月，

345
00:10:27,720 --> 00:10:29,370
0,420 420,510 510,1020 1020,1230 1230,1650
run the election for 8,|
|

346
00:10:29,580 --> 00:10:30,240
0,210 210,330 330,480 480,570 570,660
but you know for the
但你知道，出于同样的原因，d可能已经在9了，对吗？

347
00:10:30,240 --> 00:10:31,500
0,240 240,600 600,780 780,960 960,1260
same reason, d might already

348
00:10:31,500 --> 00:10:32,910
0,120 120,270 270,720 840,1260 1260,1410
be in 9, right| and
|因此，这完全取决于当前的术语是什么，

349
00:10:32,910 --> 00:10:34,530
0,450 600,810 810,960 960,1440 1440,1620
so it all depends on

350
00:10:34,530 --> 00:10:36,720
0,210 210,660 900,1740 1740,2100 2100,2190
what the current term is,|
|

351
00:10:36,720 --> 00:10:38,190
0,150 150,420 420,750 750,960 960,1470
what these actually these participants
这些参与者的实际身份是什么。

352
00:10:38,190 --> 00:10:39,120
0,180 180,390
are in.|
|

353
00:10:40,910 --> 00:10:42,350
0,270 270,360 360,600 600,1080 1080,1440
But the main conclusion, correct
但主要结论，纠正主要顶层结论是，

354
00:10:42,350 --> 00:10:43,670
0,60 60,330 330,630 630,840 840,1320
the main top level conclusion

355
00:10:43,670 --> 00:10:44,900
0,120 120,420 660,900 900,1080 1080,1230
is that,| a can {become,leader
|当C和D离线时，A肯定可以成为领导者，

356
00:10:44,900 --> 00:10:46,820
0,450 450,750 990,1560 1560,1710 1710,1920
- -} certainly when c

357
00:10:46,820 --> 00:10:48,420
0,90 90,270 270,510 510,1050
and d are offline,|
|

358
00:10:48,420 --> 00:10:49,980
0,360 360,600 600,900 900,1170 1170,1560
{} c can become leader
C可以成为领导者，d可以成为领导者。

359
00:10:49,980 --> 00:10:51,180
0,300 300,510 510,840 840,930 930,1200
{and,d} can become a leader.|
|

360
00:10:54,100 --> 00:10:55,540
0,660
Thanks.|
谢谢。|

361
00:10:57,430 --> 00:11:00,080
0,1890
Okay,
好的，那么，让我们现在知道，木筏可以在某种程度上结束于各州，

362
00:11:00,230 --> 00:11:02,480
0,570 750,1200 1230,1830 1830,2100 2100,2250
{} then, let's so so

363
00:11:02,480 --> 00:11:03,890
0,120 120,240 240,600 600,900 900,1410
we now know that the

364
00:11:03,950 --> 00:11:06,710
0,1050 1500,1920 1920,2280 2280,2580 2580,2760
{} raft {can,sort,of} ended in

365
00:11:06,710 --> 00:11:09,080
0,420 420,1050 1290,1860 1860,2010 2010,2370
states,| where {} the logs
|在日志被分流的地方

366
00:11:09,080 --> 00:11:11,540
0,360 360,1110 1170,1890 1890,2130 2130,2460
are diverged| and so that
|因此，这需要修复

367
00:11:11,540 --> 00:11:12,830
0,180 180,270 270,420 420,1050 1080,1290
needs to be repaired| and
|这就像是RAFT协议的一个关键组件

368
00:11:12,830 --> 00:11:13,910
0,390 390,510 510,750 750,840 840,1080
it's like one a key

369
00:11:13,910 --> 00:11:15,770
0,570 570,750 750,990 990,1260 1260,1860
component of the raft protocol

370
00:11:15,860 --> 00:11:18,320
0,270 270,390 390,990 1020,1470 1500,2460
is| to do the {that,log}
|为了像他们所说的那样追赶，

371
00:11:18,320 --> 00:11:19,370
0,420 420,510 510,630 630,900 900,1050
{catch,up} as they call it,|
|

372
00:11:20,280 --> 00:11:22,020
0,630 930,1170 1170,1290 1290,1560 1560,1740
{} so I talked a
所以我稍微谈了一下。

373
00:11:22,020 --> 00:11:23,440
0,180 180,300 300,480 480,840
little bit about that.|
|

374
00:11:30,700 --> 00:11:31,810
0,120 120,210 210,270 270,870 870,1110
And this is basically what
这基本上就是你在实验室的b部分要处理的问题。

375
00:11:31,810 --> 00:11:33,430
0,240 240,780 780,1140 1140,1290 1290,1620
you're {sort,of} have to deal

376
00:11:33,430 --> 00:11:36,130
0,360 360,1110 1140,1620 1620,2070 2280,2700
with in part b of

377
00:11:36,130 --> 00:11:37,200
0,90 90,540
the lab.|
|

378
00:11:37,560 --> 00:11:39,810
0,780 1140,1650 1710,1860 1860,2010 2010,2250
{} So I may be
所以我可能会更容易用这张图来说明，

379
00:11:39,810 --> 00:11:43,860
0,300 300,390 390,840 840,2220 3780,4050
easier to illustrate {with,this,picture},| {so,let's},
|所以让我们，让它变得简单一点，

380
00:11:43,860 --> 00:11:45,180
0,180 180,900 900,1080 1080,1230 1230,1320
it's going to make it

381
00:11:45,180 --> 00:11:46,830
0,60 60,210 210,300 300,840 1140,1650
a little bit simple,| let's
|我们有3台服务器，

382
00:11:46,830 --> 00:11:48,400
0,210 210,420 420,1050
have 3 servers,|
|

383
00:11:49,790 --> 00:11:51,480
0,510 510,1080
here's S1,
这是S1，它有，你知道的。索引10中的第三项，

384
00:11:51,480 --> 00:11:53,190
0,330 330,600 600,1200 1200,1350 1350,1710
{} it has, you know.

385
00:11:54,200 --> 00:11:56,960
0,450 450,900 900,1710 1740,2250 2250,2760
term 3 in index 10,|
|

386
00:11:57,170 --> 00:11:59,360
0,300 330,630 630,1290 1770,2040 2040,2190
the index 11, has no
索引11在[]和11 12 13中没有条目，

387
00:11:59,360 --> 00:12:02,200
0,510 510,1020 1050,1320 1320,2010
entries in {} []

388
00:12:02,350 --> 00:12:05,080
0,150 150,300 300,1860 1860,2040 2040,2730
and 11 {12,13},| {here,we} have
|这里有s2，s2有条目，你知道是3 3 5，

389
00:12:05,170 --> 00:12:06,680
0,330 330,930
{S2 -},

390
00:12:09,270 --> 00:12:11,190
0,570 570,840 840,1110 1110,1770 1770,1920
{S2 -} has entries you

391
00:12:11,190 --> 00:12:14,200
0,210 210,720 720,1320 1740,2460
know 3 3 5,|
|

392
00:12:15,380 --> 00:12:16,610
0,210 210,450 450,600 600,750 750,1230
and so this is index
这是用来完成它的索引101112和1313，

393
00:12:16,610 --> 00:12:20,690
0,420 420,960 990,1710 1950,2340 2340,4080
10 11 12 and {13,13,used}

394
00:12:20,690 --> 00:12:22,080
0,90 90,210 210,330 330,870
to make it complete,|
|

395
00:12:22,280 --> 00:12:24,200
0,360 360,750 750,1080 1080,1320 1320,1920
and here is {S4 -},
这是S4，哦，对不起，S3，

396
00:12:24,900 --> 00:12:26,720
0,270 270,540 540,750 750,1260
{oh,sorry -} {S3 -},|
|

397
00:12:26,980 --> 00:12:28,360
0,390 390,570 570,810 810,1320 1320,1380
and let's do {where,in} the
让我们来看看场景3 3 4和10 11 12 13中的位置。

398
00:12:28,360 --> 00:12:31,400
0,780 810,1020 1020,1770 1830,2490
scenario 3 3 4,

399
00:12:31,400 --> 00:12:34,700
0,300 300,900 930,1800 1920,2550 2580,3300
and 10 11 12 13.|
|

400
00:12:36,080 --> 00:12:37,190
0,180 180,270 270,480 480,870 870,1110
And I'm not showing like
我不会像10之前的指数那样显示，

401
00:12:37,190 --> 00:12:40,490
0,300 300,810 810,1140 1140,1560 3000,3300
the indexes before 10,| {they're,not}
|它们并不是很相关。

402
00:12:40,520 --> 00:12:42,060
0,210 210,450 450,1020
be very relevant.|
|

403
00:12:42,280 --> 00:12:44,380
0,510 510,750 750,1110 1110,1410 1410,2100
Yeah, {you,know} {use,the} {timeline -},
是的，你知道使用时间线，这些不同的服务器。

404
00:12:44,950 --> 00:12:46,680
0,180 180,450 450,1170
these different servers.|
|

405
00:12:46,710 --> 00:12:48,300
0,480 480,660 660,810 810,1110 1110,1590
And just let's start out
让我们从假设开始，

406
00:12:48,300 --> 00:12:49,650
0,540 540,750 750,930 930,1140 1140,1350
assuming that,| the {S2 -}
|S2成为领导者，

407
00:12:49,650 --> 00:12:51,000
0,300 300,390 390,810
becomes the leader,|
|

408
00:12:51,460 --> 00:12:52,960
0,480 480,660 660,900 900,990 990,1500
because it has the highest,|
因为它有最高的，|

409
00:12:52,960 --> 00:12:54,080
0,0

410
00:12:54,300 --> 00:12:56,250
0,600 630,1110 1110,1260 1260,1560 1560,1950
{} it is mostly {to,date},|
它主要是到目前为止，|

411
00:12:56,280 --> 00:12:58,020
0,240 240,510 510,630 630,1080 1080,1740
it has the highest {term,number}
它在最后一个日志条目中具有最高的项号，

412
00:12:58,020 --> 00:12:59,220
0,210 210,300 300,660 660,900 900,1200
in the last log entry,|
|

413
00:12:59,220 --> 00:13:00,720
0,120 120,240 240,510 510,990
so it becomes leader.|
因此，它成为了领导者。|

414
00:13:00,750 --> 00:13:01,680
0,150 150,570 570,690 690,750 750,930
And now, when you need
现在，当您需要了解同步这些特定日志的协议时，

415
00:13:01,680 --> 00:13:04,080
0,270 1440,2040 2040,2160 2160,2340 2340,2400
to understand how about the

416
00:13:04,080 --> 00:13:05,730
0,450 450,540 540,660 660,1260 1260,1650
protocol is to synchronize these

417
00:13:05,730 --> 00:13:07,680
0,360 360,810 1200,1500 1500,1560 1560,1950
particular logs,| in the way
|在你知道这几乎发生的方式中，是一种副作用，你知道，要么追加条目，

418
00:13:07,680 --> 00:13:08,850
0,90 90,180 180,390 390,720 720,1170
you know this almost happens

419
00:13:08,850 --> 00:13:10,080
0,360 360,420 420,750 750,1140 1140,1230
{is,sort,of} a side effect of

420
00:13:10,200 --> 00:13:11,910
0,150 150,360 360,930 930,1170 1170,1710
you know either the append

421
00:13:11,910 --> 00:13:13,770
0,540 570,870 870,1140 1140,1650 1650,1860
entries,| because new log entries
|因为附加了新的日志条目或因为心跳，

422
00:13:13,770 --> 00:13:14,820
0,120 120,540 540,720 720,990 990,1050
are appended or because of

423
00:13:14,820 --> 00:13:16,500
0,600 600,840 840,1230 1230,1320 1320,1680
heartbeats,| which basically are append
|它们基本上是带有零个新条目的附加条目。

424
00:13:16,500 --> 00:13:19,200
0,540 570,840 840,1470 1500,2130 2130,2700
entries with zero new entries.|
|

425
00:13:19,600 --> 00:13:20,740
0,120 120,270 270,510 510,660 660,1140
So let's assume that the
所以让我们假设领导者真的发出了心跳，

426
00:13:20,770 --> 00:13:21,790
0,240 240,450 450,630 630,690 690,1020
leader actually sends {} heartbeat

427
00:13:21,790 --> 00:13:23,080
0,180 180,270 270,540 540,870 870,1290
out,| in fact {it,does,it} correct,|
|事实上，它是正确的，|

428
00:13:23,080 --> 00:13:24,760
0,450 450,870 870,1260 1260,1530 1530,1680
the election immediately sends out
选举立即发出了一个心跳，

429
00:13:24,760 --> 00:13:25,980
0,60 60,660
a heartbeat,|
|

430
00:13:25,980 --> 00:13:26,670
0,120 120,240 240,330 330,480 480,690
and so it will sends
所以它会发出心跳，

431
00:13:26,670 --> 00:13:28,180
0,240 240,300 300,540 540,960
out the {heartbeat -},|
|

432
00:13:28,240 --> 00:13:29,410
0,150 150,210 210,390 390,870 870,1170
and the {heartbeat -} basically
并且心跳基本上没有日志条目，

433
00:13:29,410 --> 00:13:31,480
0,150 150,480 480,900 900,1500
has no log entries,|
|

434
00:13:31,630 --> 00:13:33,730
0,570 570,780 780,870 870,1440 1440,2100
{} but it also indicates
但它也表明了另外两条信息，

435
00:13:33,730 --> 00:13:35,170
0,180 180,390 390,630 630,750 750,1440
two other pieces of information,|
|

436
00:13:35,260 --> 00:13:37,280
0,450 450,540 540,960 960,1500
namely the previous term,|
也就是前一期，|

437
00:13:37,820 --> 00:13:39,860
0,240 240,360 360,750 750,1290 1620,2040
so the previous term, which
所以前一项，在本例中是5对

438
00:13:39,860 --> 00:13:40,610
0,90 90,240 240,510 510,630 630,750
in this case it's going

439
00:13:40,610 --> 00:13:43,340
0,60 60,180 180,750 2220,2640 2640,2730
to be {5,right}| and the
|之前的指数是12。

440
00:13:43,340 --> 00:13:44,880
0,390 390,1050
previous index,

441
00:13:45,500 --> 00:13:47,240
0,330 330,510 510,630 630,1200
it's gonna be 12.|
|

442
00:13:47,960 --> 00:13:49,640
0,720 990,1080 1080,1290 1290,1410 1410,1680
So it sends it off
因此它将其发送到领先者S2发送到S3

443
00:13:49,640 --> 00:13:51,020
0,420 480,750 750,1080 1080,1230 1230,1380
to the {leader,S2 - -}

444
00:13:51,020 --> 00:13:52,100
0,330 330,510 510,660 660,990 990,1080
sends to {S3 -}| and
|而S3看到的是这个

445
00:13:52,100 --> 00:13:53,180
0,120 120,300 300,570 570,630 630,1080
{S3 -} looks at this|
|

446
00:13:53,540 --> 00:13:55,790
0,120 120,450 450,1620 1620,1980 1980,2250
and says well look my
他说，看看我以前的条款，

447
00:13:55,790 --> 00:13:59,450
0,330 330,600 600,1170 1170,2640 3030,3660
previous terms,| actually is not
|实际上不是5，而是4，

448
00:13:59,480 --> 00:14:01,700
0,540 540,720 720,1080 1080,1710
5, it's actually 4,|
|

449
00:14:01,850 --> 00:14:03,350
0,330 330,570 570,1110 1170,1380 1380,1500
{} and so, {} it
因此，它实际上会发回一条消息说不，

450
00:14:03,350 --> 00:14:04,460
0,210 210,420 420,720 720,750 750,1110
actually sends back a message

451
00:14:04,460 --> 00:14:06,100
0,570 570,1020
saying no,|
|

452
00:14:06,990 --> 00:14:08,610
0,630 630,780 780,1080 1080,1290 1290,1620
{} you know I'm I'm
你知道我原则上还活着，

453
00:14:08,610 --> 00:14:10,080
0,390 390,480 480,960 960,1320 1320,1470
alive in principle,| but you
|但你知道我我知道我不能做你的附属品

454
00:14:10,080 --> 00:14:11,310
0,150 150,420 420,840 870,1110 1110,1230
know I I know I

455
00:14:11,310 --> 00:14:13,140
0,510 510,600 600,1170
cannot do {your,append},|
|

456
00:14:13,280 --> 00:14:14,360
0,330 330,510 510,780 780,990 990,1080
{} so I'm not up
所以我不是最新的。

457
00:14:14,360 --> 00:14:15,340
0,60 60,420
to date.|
|

458
00:14:15,340 --> 00:14:18,370
0,660 900,1530 2010,2490 2490,2670 2670,3030
And {} now {S2 -}
现在S2有一些信息可以让它真正更新

459
00:14:18,370 --> 00:14:19,570
0,360 360,480 480,870 870,960 960,1200
have some information to actually

460
00:14:19,570 --> 00:14:20,440
0,210 210,300 300,420 420,510 510,870
bring it up to date|
|

461
00:14:20,590 --> 00:14:22,810
0,540 690,1110 1110,1500 1500,1620 1620,2220
and the way it works
它的工作方式是，

462
00:14:22,840 --> 00:14:23,710
0,210 210,360 360,480 480,570 570,870
is,| there's sort of two
|有两个变量很重要，

463
00:14:23,710 --> 00:14:25,390
0,570 570,690 690,780 780,870 870,1680
variables that are of importance,|
|

464
00:14:25,450 --> 00:14:29,080
0,780 990,1380 1380,1920 2070,2910 3000,3630
one for every {} node,
每个节点对应一个，s2保持一个变量NEXT INDEX，

465
00:14:29,080 --> 00:14:31,180
0,150 150,570 570,870 870,1410 1410,2100
{S2 -} for, {keeps,a} variable

466
00:14:31,210 --> 00:14:32,960
0,510 510,1140
next index,|
|

467
00:14:36,760 --> 00:14:38,350
0,390 390,510 510,810 810,1260 1260,1590
and {} next index when
和下一个索引，当它初始化它时，成为领先者，

468
00:14:38,350 --> 00:14:40,300
0,120 120,720 720,1110 1110,1440 1440,1950
it initialize it, becomes leader,|
|

469
00:14:40,450 --> 00:14:41,290
0,330 330,510 510,660 660,750 750,840
it is sort of an
这是一种乐观的变量，

470
00:14:41,290 --> 00:14:42,680
0,840
optimistic

471
00:14:42,710 --> 00:14:45,620
0,870 1320,1530 1530,1710 1710,2550 2670,2910
variable,| it just assumes that
|它只是假设日志实际上是最新的。

472
00:14:45,620 --> 00:14:46,670
0,90 90,360 360,600 600,870 870,1050
the logs are actually up

473
00:14:46,670 --> 00:14:47,720
0,90 90,510
to date.|
|

474
00:14:47,900 --> 00:14:50,390
0,150 150,660 660,1050 1050,1770 1800,2490
And so, {} when {}
因此，当S2成为领导者时，

475
00:14:50,540 --> 00:14:51,890
0,360 360,570 570,630 630,1110 1140,1350
S2 becomes a leader,| it
|它实际上只是将其设置为13，

476
00:14:51,890 --> 00:14:52,640
0,240 240,390 390,570 570,660 660,750
actually just sets it to

477
00:14:52,640 --> 00:14:53,800
0,600
13,|
|

478
00:14:53,800 --> 00:14:54,790
0,120 120,240 240,330 330,570 570,990
you know the same value
你知道，它本身的价值是一样的。

479
00:14:54,790 --> 00:14:56,110
0,180 180,660 660,900 900,1170 1170,1320
that actually it has for

480
00:14:56,110 --> 00:14:57,180
0,540
itself.|
|

481
00:14:57,870 --> 00:15:00,000
0,270 270,660 660,1140 1440,1890 1890,2130
That's perfectly fine,| {} because
那太好了，|因为这只是个猜测，

482
00:15:00,000 --> 00:15:00,960
0,120 120,270 270,330 330,810 840,960
it's just a guess,| if
|如果有人真的在S3可能在的地方

483
00:15:00,960 --> 00:15:02,970
0,360 360,780 780,1290 1320,1860 1860,2010
one actually the where {S3

484
00:15:02,970 --> 00:15:03,870
0,180 180,390 390,660 660,750 750,900
-} might be| and that
|我们可能落后了，

485
00:15:03,870 --> 00:15:05,010
0,120 120,300 300,390 390,930 930,1140
we might be behind,| and
|然后你知道，因为没有留言，

486
00:15:05,010 --> 00:15:06,210
0,360 360,450 450,600 600,1020 1020,1200
then you know because there's

487
00:15:06,210 --> 00:15:08,970
0,210 210,810 1080,1740 2040,2520 2520,2760
no message,| the leader actually
|领导者实际上明白了这一点。

488
00:15:08,970 --> 00:15:09,980
0,240 240,510
learns that.|
|

489
00:15:10,130 --> 00:15:10,910
0,150 150,330 330,390 390,690 690,780
And so, in fact you
所以，事实上，你知道当它收到的时候没有消息，

490
00:15:10,910 --> 00:15:12,410
0,90 90,390 390,570 570,900 900,1500
know {when,it} gets {there's,no} message,|
|

491
00:15:13,740 --> 00:15:16,350
0,240 240,510 660,1710 1710,2280 2370,2610
in the unoptimized version,| so
在未优化的版本中，|所以我首先要谈一谈未优化的版本，

492
00:15:16,350 --> 00:15:17,130
0,150 150,270 270,330 330,600 600,780
I'm going to first talk

493
00:15:17,130 --> 00:15:19,120
0,210 210,270 270,930 930,1380
about the unoptimized version,|
|

494
00:15:22,650 --> 00:15:24,330
0,300 300,540 540,780 780,1380 1380,1680
the leader just decrements {}
领先者只需将下一个索引递减一

495
00:15:24,330 --> 00:15:25,710
0,150 150,420 420,840 840,990 990,1380
the next index by one|
|

496
00:15:25,830 --> 00:15:27,480
0,210 210,480 480,630 630,1110 1110,1650
and so it decrements 13
所以它把13减到12，

497
00:15:27,480 --> 00:15:28,680
0,90 90,690
to 12,|
|

498
00:15:29,060 --> 00:15:30,110
0,150 150,480 480,570 570,900 900,1050
and then we got some
然后我们得到一些点将发送另一个附加条目，

499
00:15:30,110 --> 00:15:31,460
0,240 240,360 360,540 540,1050 1080,1350
point will send another append

500
00:15:31,460 --> 00:15:33,080
0,930
entries,|
|

501
00:15:33,170 --> 00:15:34,340
0,180 180,300 300,510 510,1020 1020,1170
and this time around you
而这一次，你知道它实际上会说，好的，我们将在这12个节目中做出下一个决定，

502
00:15:34,340 --> 00:15:35,690
0,210 210,330 330,510 510,1050 1050,1350
know it will actually say

503
00:15:35,690 --> 00:15:36,500
0,180 180,270 270,450 450,570 570,810
okay we'll make next {in,this}

504
00:15:36,500 --> 00:15:38,030
0,660 690,900 900,1050 1050,1080 1080,1530
12,| {you,know} got a send
|你知道吗，我收到了一封35分钟的邮件，

505
00:15:38,030 --> 00:15:39,590
0,90 90,270 270,660 660,900 900,1560
you know {log,in} 3 5,|
|

506
00:15:40,880 --> 00:15:42,200
0,540 540,660 660,780 780,900 900,1320
and you know the previous
你知道，上一学期是3，

507
00:15:42,200 --> 00:15:43,400
0,660
term,

508
00:15:43,740 --> 00:15:46,080
0,240 240,450 450,1110 1260,1740 1740,2340
it's gonna be {} 3,|
|

509
00:15:47,160 --> 00:15:49,440
0,450 450,630 630,990 990,1740
and the previous index
而之前的指数将是11。

510
00:15:49,500 --> 00:15:51,780
0,600 600,750 750,810 810,1380 1800,2280
is going to be 11.|
|

511
00:15:53,700 --> 00:15:56,140
0,300 300,540 540,1140 1170,1860
And so when {}
因此，当S3实际收到这条消息时，

512
00:15:56,520 --> 00:15:58,020
0,390 390,630 630,930 930,1050 1050,1500
S3 actually received this message,|
|

513
00:15:58,020 --> 00:15:59,040
0,120 120,300 300,630 630,720 720,1020
you know check the previous
你知道吗，查一下前一学期的第三节，

514
00:15:59,040 --> 00:16:00,480
0,330 330,750 750,840 840,1110 1110,1440
term 3,| the previous index
|之前的指数是11，

515
00:16:00,480 --> 00:16:01,650
0,90 90,600 600,720 720,900 900,1170
is 11,| that all works
|一切都解决了，

516
00:16:01,650 --> 00:16:03,090
0,390 720,870 870,1110 1110,1290 1290,1440
out,| it seems that it
|它似乎附加了5个字

517
00:16:03,090 --> 00:16:04,890
0,330 360,660 660,1230 1260,1500 1500,1800
has append 5| and so
|所以它会抹去4，然后在里面插入一个5

518
00:16:04,890 --> 00:16:07,680
0,150 150,480 480,1140 1410,2100 2490,2790
it will erase {the,4} and

519
00:16:07,680 --> 00:16:08,880
0,240 240,300 300,630 630,750 750,1200
stick a 5 in there|
|

520
00:16:09,300 --> 00:16:11,820
0,930 930,1560 1560,1860 1860,2310 2310,2520
and {} basically respond saying
基本上回答说，是的，很好。

521
00:16:11,820 --> 00:16:12,640
0,420
yep,

522
00:16:12,640 --> 00:16:13,640
0,450
good.|
|

523
00:16:16,300 --> 00:16:17,980
0,210 210,270 270,390 390,930 990,1680
So at this point, {}
因此，在这一点上，领导者知道日志实际上是最新的，

524
00:16:18,010 --> 00:16:20,280
0,480 990,1680
the {}

525
00:16:20,370 --> 00:16:22,380
0,540 540,990 990,1140 1140,1560 1560,2010
leader knows that actually the

526
00:16:22,410 --> 00:16:23,280
0,300 300,390 390,540 540,600 600,870
log is up to date,|
|

527
00:16:23,280 --> 00:16:24,750
0,240 240,360 360,540 540,1110 1110,1470
because you've got {} an
因为你收到了一条好消息，

528
00:16:24,750 --> 00:16:26,220
0,240 240,570 570,990
okay message back,|
|

529
00:16:27,340 --> 00:16:28,870
0,300 300,450 450,510 510,1020 1050,1530
then there's the second variable
第二个变量在这一切中扮演着重要的角色，

530
00:16:28,870 --> 00:16:30,130
0,180 180,420 420,510 510,900 900,1260
that plays an important role

531
00:16:30,130 --> 00:16:31,930
0,210 210,420 420,870 1110,1680 1680,1800
in all this,| which is
|这是匹配索引，也是RAFT维护的，

532
00:16:31,930 --> 00:16:33,340
0,270 270,930
match index,

533
00:16:34,950 --> 00:16:36,660
0,210 210,540 540,780 780,1200 1200,1710
which raft also maintains for,|
|

534
00:16:36,690 --> 00:16:38,940
0,720 870,1230 1230,1650 1650,1770 1770,2250
leader also maintains for every
领袖也为每一个追随者维护。

535
00:16:38,970 --> 00:16:40,320
0,780
follower.|
|

536
00:16:40,440 --> 00:16:41,460
0,150 150,300 300,420 420,600 600,1020
So there's an next index
所以你知道S3的下一个指数，

537
00:16:41,460 --> 00:16:42,540
0,120 120,240 240,660 660,780 780,1080
you know for {S3 -},|
|

538
00:16:42,540 --> 00:16:43,500
0,180 180,450 450,720 720,840 840,960
here's next index for {S1
这是S1的下一个索引，

539
00:16:43,500 --> 00:16:44,580
0,330 330,420 420,690 690,930 930,1080
-},| and {similar -} there's
|类似的，还有一个匹配索引，

540
00:16:44,580 --> 00:16:45,600
0,30 30,270 270,780 780,870 870,1020
a match index,| you know
|您知道，对于S1、S2、S3，也是如此。

541
00:16:45,600 --> 00:16:46,860
0,660 660,750 750,990 990,1110 1110,1260
for {S1 -} {S2 -}

542
00:16:46,860 --> 00:16:48,020
0,120 120,300 300,600
{S3 -} too.|
|

543
00:16:48,560 --> 00:16:49,250
0,150 150,270 270,480 480,570 570,690
And this one is sort
这是一种，如果你认为这是悲观的或下限的，

544
00:16:49,250 --> 00:16:50,060
0,60 60,180 180,360 360,570 570,810
of, if you think about

545
00:16:50,060 --> 00:16:51,640
0,120 120,270 270,1050
this as pessimistic

546
00:16:52,520 --> 00:16:54,480
0,330 330,630 630,1020
or lower bound,|
|

547
00:16:55,140 --> 00:16:56,370
0,180 180,360 360,450 450,810 810,1230
so when the leader actually
所以当你真正认识的领袖成为领袖时，

548
00:16:56,370 --> 00:16:58,470
0,90 90,330 330,1230 1260,1620 1620,2100
you know {} becomes leader,|
|

549
00:16:58,500 --> 00:16:59,580
0,180 180,390 390,630 630,780 780,1080
it actually sets the value
它实际上只将值设置为0，

550
00:16:59,580 --> 00:17:01,140
0,240 240,780
just 0,|
|

551
00:17:01,850 --> 00:17:03,560
0,690 690,780 780,1170 1170,1290 1290,1710
and to indicate that basically
并指出，就目前所知，S3实际上根本没有任何日志条目，

552
00:17:03,560 --> 00:17:06,350
0,270 270,480 480,1020 1230,2040 2100,2790
{as,far} as knows {} {S3

553
00:17:06,350 --> 00:17:08,060
0,210 210,450 450,690 690,1230 1230,1710
-} doesn't really have any

554
00:17:08,090 --> 00:17:09,700
0,300 300,600 600,690 690,1110
log entries at all,|
|

555
00:17:09,840 --> 00:17:11,070
0,570 570,750 750,870 870,960 960,1230
{} and so it hasn't
因此，它没有向应用程序传递任何日志条目，

556
00:17:11,070 --> 00:17:13,350
0,570 600,930 930,1200 1200,1620 1620,2280
delivered any log entries to

557
00:17:13,380 --> 00:17:15,840
0,630 630,1080 1080,1890 2190,2340 2340,2460
{} the application,| and so
|因此，对于S2，还必须非常小心它实际上可以传递给应用程序的内容，

558
00:17:15,840 --> 00:17:16,950
0,390 390,480 480,690 690,960 960,1110
for {S2 -} also has

559
00:17:16,950 --> 00:17:18,120
0,90 90,180 180,450 450,960 960,1170
to be very careful about

560
00:17:18,120 --> 00:17:18,960
0,210 210,510 510,630 630,750 750,840
what actually it can be

561
00:17:18,960 --> 00:17:20,700
0,420 420,480 480,570 570,1260 1380,1740
delivered to the application,| there
|如果他需要知道的话，

562
00:17:20,700 --> 00:17:22,050
0,420 450,630 630,1050 1050,1260 1260,1350
goes if he needs to

563
00:17:22,050 --> 00:17:22,740
0,240 240,390 390,450 450,630 630,690
know,| that at least a
|至少大多数追随者实际上拥有特定日志条目的副本，然后该条目才能交付。

564
00:17:22,740 --> 00:17:24,990
0,750 750,990 990,1560 1590,2010 2010,2250
majority of the followers actually

565
00:17:24,990 --> 00:17:25,890
0,330 330,390 390,750 750,840 840,900
has a copy of a

566
00:17:25,890 --> 00:17:27,150
0,300 300,600 600,900 900,1200 1200,1260
particular log entry, before it

567
00:17:27,150 --> 00:17:28,280
0,150 150,540
can deliver.|
|

568
00:17:29,460 --> 00:17:31,320
0,540 600,930 930,1080 1080,1290 1290,1860
{} So just start to
所以就开始悲观吧，

569
00:17:31,350 --> 00:17:34,290
0,540 570,1710 2010,2400 2400,2610 2610,2940
be pessimistic,| but then once
|但是，一旦它知道了，例如，一旦它知道了真的得到了追随者，你就知道了

570
00:17:34,290 --> 00:17:35,640
0,150 150,780 780,930 930,1050 1050,1350
it learns you know that

571
00:17:35,640 --> 00:17:37,950
0,90 90,600 600,1410 1920,2190 2190,2310
for example {} once it

572
00:17:37,950 --> 00:17:41,130
0,300 300,570 570,840 840,1170 2340,3180
learns actually got the follower

573
00:17:41,160 --> 00:17:42,960
0,150 150,360 360,1020 1020,1290 1290,1800
{} is okay| and we've
|我们已经收到了附加的消息，

574
00:17:42,960 --> 00:17:44,370
0,270 270,540 540,720 720,990 990,1410
gotten okay the append message,|
|

575
00:17:44,400 --> 00:17:45,690
0,210 210,330 330,630 630,1200 1200,1290
it can actually update you
它实际上可以更新你知道的悲观的人，

576
00:17:45,690 --> 00:17:48,180
0,120 120,600 690,1440 1440,2130 2160,2490
know the pessimistic,| {} lower
|下限或匹配指数从0到实际13，

577
00:17:48,180 --> 00:17:49,410
0,270 270,360 360,420 420,690 690,1230
bound or the match index

578
00:17:49,740 --> 00:17:52,350
0,150 150,810 990,1290 1290,1650 1650,2610
from 0 to actually 13,|
|

579
00:17:52,650 --> 00:17:53,880
0,300 300,540 540,630 630,780 780,1230
{} because it has learned
因为它了解到，追随者实际上是13岁之前的最新版本，

580
00:17:53,880 --> 00:17:56,320
0,570 570,1140 1290,1980
that {} the

581
00:17:56,410 --> 00:17:57,820
0,270 270,750 750,840 840,1230 1230,1410
{} follower is actually up

582
00:17:57,820 --> 00:18:00,190
0,90 90,540 570,1140 1170,2070 2070,2370
to date {} {till,13},| {and,that's}
|这是下一个预期的指数，你知道，13。

583
00:18:00,190 --> 00:18:01,780
0,120 120,420 420,750 750,1020 1020,1590
the next index that expect

584
00:18:01,810 --> 00:18:03,420
0,330 330,450 450,540 540,1050
is you know 13.|
|

585
00:18:03,770 --> 00:18:04,430
0,150 150,240 240,390 390,600 600,660
And at this point in
在这个时间点上，

586
00:18:04,430 --> 00:18:06,260
0,780 780,1170 1170,1290 1290,1500 1500,1830
time,| basically it has learned
|基本上它是从两个不同的，

587
00:18:06,260 --> 00:18:08,840
0,180 180,480 480,1080 1500,1860 1860,2580
from two different,| knows that,
|知道了这一点，该特定日志条目5现在实际上至少在两个节点中被复制。

588
00:18:08,840 --> 00:18:11,390
0,330 330,930 930,1560 1770,2160 2160,2550
that particular {} log entry

589
00:18:11,390 --> 00:18:12,830
0,390 390,510 510,720 720,900 900,1440
5 is actually now replicated

590
00:18:12,830 --> 00:18:14,440
0,120 120,360 360,600 600,1050
at least {in,two} nodes.|
|

591
00:18:16,780 --> 00:18:17,920
0,360 360,480 480,600 600,900 900,1140
And so you might think
所以你可能会觉得很好很好，

592
00:18:17,920 --> 00:18:18,970
0,300 300,600 630,780 780,930 930,1050
well good,| it has been
|它已在两个节点中复制，

593
00:18:18,970 --> 00:18:20,830
0,510 510,600 600,780 780,1410 1560,1860
replicated in two nodes,| we
|我们可以交付给应用程序，

594
00:18:20,830 --> 00:18:22,240
0,90 90,570 570,720 720,870 870,1410
can deliver to the application,|
|

595
00:18:22,240 --> 00:18:23,740
0,210 210,270 270,810 810,1260 1260,1500
because the majority clearly has
因为大多数人显然都有，

596
00:18:23,740 --> 00:18:25,780
0,270 630,1080 1080,1710 1710,1860 1860,2040
it,| {} and {} we're
|我们的状态也很好。

597
00:18:25,780 --> 00:18:26,940
0,60 60,240 240,720
in good shape.|
|

598
00:18:27,410 --> 00:18:29,630
0,450 570,1230 1260,1770 1770,2010 2010,2220
And unfortunately, {} that actually
不幸的是，事实并非如此，

599
00:18:29,630 --> 00:18:30,410
0,210 210,390 390,600 600,660 660,780
turned out not to be

600
00:18:30,410 --> 00:18:32,030
0,90 90,690 750,1020 1020,1170 1170,1620
the case,| {} it's close
|这几乎是真的，但不完全是真的，

601
00:18:32,030 --> 00:18:33,230
0,90 90,420 420,540 540,720 720,1200
to true, but not completely

602
00:18:33,230 --> 00:18:35,000
0,330 1050,1200 1200,1350 1350,1620 1620,1770
true,| and this actually has
|这实际上与图8有关，

603
00:18:35,000 --> 00:18:37,010
0,90 90,690 840,1380 1380,1800 1800,2010
to do {} with {}

604
00:18:37,010 --> 00:18:38,540
0,390 390,720 1200,1290 1290,1470 1470,1530
figure 8,| {so,I} want to
|所以我想稍微谈谈图8

605
00:18:38,540 --> 00:18:39,260
0,120 120,150 150,390 390,510 510,720
talk a little bit about

606
00:18:39,260 --> 00:18:40,460
0,300 300,570 570,810 810,930 930,1200
figure 8| and the real
|真正的原因是这里发生的事情让事情变得稍微复杂

607
00:18:40,460 --> 00:18:41,750
0,270 270,450 450,690 690,960 960,1290
reason what's going on here

608
00:18:41,750 --> 00:18:43,070
0,90 90,330 330,450 450,750 750,1320
to make this slightly complicated|
|

609
00:18:43,070 --> 00:18:44,300
0,120 120,540 540,780 780,930 930,1230
and you also should think
你也应该觉得有点可疑。

610
00:18:44,300 --> 00:18:45,640
0,90 90,300 300,420 420,900
a little bit fishy.|
|

611
00:18:45,670 --> 00:18:47,200
0,180 180,390 390,900 930,1140 1140,1530
So this {leader,S2 - -}
所以这个领先者S2只是从S3的对数中抹去了值

612
00:18:47,230 --> 00:18:49,420
0,360 390,1110 1110,1230 1230,1920 1920,2190
just erased the value out

613
00:18:49,420 --> 00:18:52,510
0,150 150,300 300,930 1260,2310 2550,3090
of the log of {S3

614
00:18:52,510 --> 00:18:54,100
0,390 390,870 960,1110 1110,1200 1200,1590
-}| and you know somebody
|你知道有人把它放进去了，

615
00:18:54,100 --> 00:18:55,200
0,120 120,270 270,540
put that in,|
|

616
00:18:55,200 --> 00:18:57,510
0,690 690,1050 1080,1470 1470,2040 2040,2310
and you know raising it,|
你知道，养大它，|

617
00:18:57,510 --> 00:18:58,860
0,90 90,480 540,960 960,1110 1110,1350
you know, yeah it seems
你知道，是的，你知道这看起来有点危险

618
00:18:58,860 --> 00:18:59,970
0,30 30,240 240,810 810,900 900,1110
a little bit you know

619
00:18:59,970 --> 00:19:02,910
0,750 750,1170 1260,1920 2190,2610 2610,2940
dangerous| and as in and
|就像在里面，所以结果是有一个角落的案例，

620
00:19:03,240 --> 00:19:04,380
0,240 240,630 630,840 840,990 990,1140
so it turns out there

621
00:19:04,380 --> 00:19:06,240
0,90 90,150 150,510 510,1020 1260,1860
is a corner case, {}|
|

622
00:19:06,240 --> 00:19:08,700
0,780 840,1530 2040,2280 2280,2400 2400,2460
where {} you have to
在那里你必须小心一点，

623
00:19:08,700 --> 00:19:09,840
0,90 90,180 180,390 390,900 900,1140
be a bit careful,| by
|当您声明邮件已实际提交时，即表示已交付邮件。

624
00:19:09,840 --> 00:19:11,730
0,600 600,810 810,1470 1500,1770 1770,1890
when you deliver when you

625
00:19:11,730 --> 00:19:13,590
0,690 690,810 810,1140 1140,1380 1380,1860
declare a message actually committed.|
|

626
00:19:14,740 --> 00:19:15,730
0,210 210,300 300,570 570,870 870,990
And it turns out that
事实证明，基本上是这样的，如果图8说明了这一点。

627
00:19:15,730 --> 00:19:20,020
0,630 990,1620 2040,3570 3570,3840 3840,4290
basically, {} yeah, if figure

628
00:19:20,020 --> 00:19:21,680
0,270 270,780 780,1110
8 illustrates that.|
|

629
00:19:22,210 --> 00:19:22,990
0,300 300,480 480,570 570,750 750,780
So let me talk a
因此，让我来简单介绍一下擦除日志条目的过程。

630
00:19:22,990 --> 00:19:25,000
0,210 210,330 330,540 540,960 990,2010
little bit about this erasing

631
00:19:26,550 --> 00:19:28,660
0,390 390,870
log entries.|
|

632
00:19:31,430 --> 00:19:32,360
0,210 210,330 330,510 510,810 810,930
And we will see is
我们将看到，消息实际何时可以传递到应用程序的规则是

633
00:19:32,360 --> 00:19:33,860
0,210 210,480 480,1050 1050,1290 1290,1500
that the rule for actually

634
00:19:33,860 --> 00:19:34,760
0,240 240,330 330,660 660,780 780,900
when the message can be

635
00:19:34,760 --> 00:19:37,550
0,570 840,1170 1170,1620 1620,2400 2400,2790
delivered to the application is|
|

636
00:19:37,940 --> 00:19:40,730
0,810 810,1170 1200,2100 2100,2310 2310,2790
{} is slightly more subtle
比仅仅计算复制次数要稍微微妙一些。

637
00:19:40,730 --> 00:19:43,430
0,300 300,630 630,1380 1590,2280 2280,2700
than just counting {} the

638
00:19:43,460 --> 00:19:44,540
0,600
replicates.|
|

639
00:19:44,890 --> 00:19:46,080
0,690

640
00:19:47,100 --> 00:19:48,570
0,330 330,600 600,780 780,1080 1080,1470
{Let's,see} actually gets figure 8
让我们看看，实际上是将图8加载到其中。

641
00:19:48,630 --> 00:19:50,380
0,810 810,1140
{load,it} in.|
|

642
00:19:50,800 --> 00:19:51,940
0,180 180,330 330,450 450,780 780,1140
Okay so here's figure 8
好的，这是图8，和通常的结构一样。

643
00:19:52,000 --> 00:19:55,000
0,810 1620,2040 2040,2220 2220,2370 2370,3000
{} and so as usual

644
00:19:55,000 --> 00:19:56,220
0,660
structure.|
|

645
00:19:58,810 --> 00:19:59,620
0,240 240,390 390,450 450,600 600,810
Okay, let me get back
好的，让我们回到聊天中的问题上来，

646
00:19:59,620 --> 00:20:03,100
0,120 120,300 300,660 660,2820 3000,3480
to the question {in,the} in

647
00:20:03,100 --> 00:20:04,450
0,360 420,750 750,930 930,990 990,1350
the chat in a second,|
|

648
00:20:04,960 --> 00:20:06,940
0,450 900,1230 1260,1620 1620,1710 1710,1980
{} so here's {} figure
所以这是图8

649
00:20:06,940 --> 00:20:08,470
0,420 420,720 720,840 840,1020 1020,1530
8| and so let's walk
|因此，让我们来看看这里的场景是什么，

650
00:20:08,470 --> 00:20:10,240
0,330 330,510 510,960 960,1470 1470,1770
through what the scenario here

651
00:20:10,240 --> 00:20:12,400
0,270 270,840 840,1230 1230,1710
is,| {correct,in} figure a
|图A中的更正您知道每个人都提交了什么日志条目1，

652
00:20:12,400 --> 00:20:13,930
0,480 480,600 600,750 750,1080 1080,1530
{} you know what {log,entry,one}

653
00:20:13,930 --> 00:20:16,030
0,210 210,420 420,930 1020,1410 1410,2100
has been committed by everybody,|
|

654
00:20:16,360 --> 00:20:19,240
0,840 840,1140 1140,1260 1260,1890 2640,2880
{} you know the {S1
你知道，在第二学期，第一或第二阶段的学生成为了第一名，

655
00:20:19,240 --> 00:20:21,310
0,510 600,1170 1170,1560 1560,1740 1740,2070
-} or {S2 -} became

656
00:20:21,310 --> 00:20:23,950
0,330 330,870 870,1440 1440,2190 2190,2640
leader in {} entry in

657
00:20:23,980 --> 00:20:26,230
0,270 270,750 1080,1470 1470,1620 1620,2250
term 2,| {} they committed
|他们提交或开始附加条目2，

658
00:20:26,320 --> 00:20:27,700
0,210 210,450 450,630 630,1020 1020,1380
{} or they started appending

659
00:20:27,700 --> 00:20:29,180
0,90 90,480 480,1020
an entry 2,|
|

660
00:20:29,180 --> 00:20:30,830
0,540 540,840 840,960 960,1290 1290,1650
{} hasn't been committed yet,|
还没有被承诺，|

661
00:20:30,860 --> 00:20:32,300
0,450 450,570 570,780 780,930 930,1440
because it's not a majority
因为它不是绝对的多数，

662
00:20:32,300 --> 00:20:34,070
0,120 120,600 960,1170 1170,1410 1410,1770
for sure,| {} then indeed
|那么实际上发生了什么，

663
00:20:34,070 --> 00:20:35,210
0,150 150,360 360,930 930,1020 1020,1140
what actually happens,| you know
|你知道S5不是断开的，有这个术语2的单词，

664
00:20:35,210 --> 00:20:37,250
0,150 150,420 420,870 870,1770 1770,2040
{S5 -} wasn't disconnected has

665
00:20:37,250 --> 00:20:38,540
0,330 330,420 420,570 570,870 870,1290
word of this term 2,|
|

666
00:20:38,900 --> 00:20:40,100
0,330 330,630 630,690 690,1050 1050,1200
{} became a leader in
在第三学期成为领导者，

667
00:20:40,100 --> 00:20:41,810
0,240 240,780 810,1230 1230,1320 1320,1710
term 3,| appended an entry
|在每个日志中附加一个条目，

668
00:20:41,810 --> 00:20:44,570
0,600 600,1110 1140,2100 2370,2550 2550,2760
to each log,| {} that
|这肯定不是承诺的，

669
00:20:44,570 --> 00:20:45,650
0,300 300,360 360,540 540,870 870,1080
certainly is not committed,| because
|因为没有多数，

670
00:20:45,650 --> 00:20:47,090
0,150 150,240 240,900 1080,1320 1320,1440
there's no majority,| then we
|然后我们以c结尾，

671
00:20:47,090 --> 00:20:48,740
0,120 120,240 240,600 630,960 990,1650
end up in {} c,|
|

672
00:20:48,770 --> 00:20:50,800
0,300 300,870 870,1110 1110,1590
{} maybe {} the
也许S5实际上又断线了，

673
00:20:50,830 --> 00:20:52,300
0,180 180,510 510,780 780,930 930,1470
{S5 -} actually got disconnected

674
00:20:52,300 --> 00:20:54,670
0,510 720,1080 1080,1260 1260,1770 1800,2370
again,| {} {S1 -} becomes
|S1在第四学期成为领头羊，

675
00:20:54,670 --> 00:20:56,830
0,60 60,600 660,1020 1020,1590 1590,2160
a leader {} {in,term} 4,|
|

676
00:20:56,980 --> 00:20:58,630
0,210 210,480 480,1320 1320,1440 1440,1650
it starts replicating you know
它开始将您知道的条目，该日志条目2复制到其他节点。

677
00:20:58,630 --> 00:21:00,970
0,630 630,1080 1080,1380 1380,1650 1650,2340
entry, this log entry 2

678
00:21:00,970 --> 00:21:02,220
0,120 120,330 330,810
to other nodes.|
|

679
00:21:02,620 --> 00:21:04,690
0,540 870,1380 1380,1710 1710,1980 1980,2070
And, {} in fact you
而且，事实上，你知道，交付它，

680
00:21:04,690 --> 00:21:06,190
0,150 150,630 630,810 810,900 900,1500
know deliver it,| you know
|你知道它会回来的，

681
00:21:06,190 --> 00:21:07,360
0,480 480,660 660,990 990,1050 1050,1170
it gets back,| you know
|你知道，就像上一张幻灯片中显示的那样，

682
00:21:07,360 --> 00:21:08,620
0,510 540,810 810,870 870,930 930,1260
like shown in the previous

683
00:21:08,620 --> 00:21:11,170
0,450 810,1650 1650,1860 1860,2190 2190,2550
slide,| {} in those actually
|在那些实际在S2上的和那些实际上使用S3的那些中。

684
00:21:11,170 --> 00:21:12,190
0,150 150,330 330,570 570,750 750,1020
on {S2 -} and those

685
00:21:12,190 --> 00:21:13,090
0,240 240,360 360,450 450,600 600,900
actually use {} {S3 -}.|
|

686
00:21:14,230 --> 00:21:16,960
0,660 840,1560 1950,2190 2190,2430 2430,2730
And {} it turns out
事实证明，你知道，实际上你可能会想，

687
00:21:16,960 --> 00:21:18,430
0,90 90,240 240,420 420,1080 1140,1470
you know that actually you

688
00:21:18,430 --> 00:21:19,840
0,210 210,510 510,720 720,1230 1230,1410
might think,| okay, well you
|好的，您知道，S1知道您知道，实际上33个节点实际上有此特定条目的副本

689
00:21:19,840 --> 00:21:21,610
0,300 300,510 510,960 960,1650 1650,1770
know {S1 -} knows you

690
00:21:21,610 --> 00:21:23,950
0,120 120,390 390,960 960,1680 1830,2340
know that actually {} 3

691
00:21:24,130 --> 00:21:25,450
0,330 330,720 720,990 990,1230 1230,1320
3 nodes actually have a

692
00:21:25,450 --> 00:21:27,730
0,630 900,1110 1110,1260 1260,1860 1860,2280
copy of this particular entry|
|

693
00:21:27,730 --> 00:21:28,450
0,120 120,330 330,390 390,630 630,720
and so I might be
所以我也许能把它送到

694
00:21:28,450 --> 00:21:29,380
0,180 180,270 270,630 630,840 840,930
able to deliver it| and
|事实证明这不是真的，

695
00:21:29,380 --> 00:21:30,280
0,60 60,300 300,390 390,630 630,900
it turns out that's not

696
00:21:30,280 --> 00:21:32,000
0,990
true,|
|

697
00:21:32,000 --> 00:21:36,460
0,300 300,2400 2400,2610 2610,3240
and there's more subtle
还有更微妙的推理需要发生才能真正承诺

698
00:21:36,490 --> 00:21:37,720
0,240 240,330 330,750 750,1050 1050,1230
{ -} reasoning that needs

699
00:21:37,720 --> 00:21:39,820
0,90 90,570 840,1110 1110,1680 1680,2100
to happen to actually {}

700
00:21:39,820 --> 00:21:41,440
0,480 480,630 630,1230 1260,1500 1500,1620
commit| and namely you can
|也就是说，你只能承诺。

701
00:21:41,440 --> 00:21:43,760
0,270 270,780 930,1470 1470,1710
only commit.| Oops, sorry,
|哦，对不起，你可以在领导承诺后再承诺，

702
00:21:46,750 --> 00:21:48,400
0,180 180,330 330,930
you can commit

703
00:21:50,230 --> 00:21:52,040
0,1140
after

704
00:21:52,180 --> 00:21:53,720
0,240 240,900
the leader

705
00:21:55,410 --> 00:21:56,900
0,300 300,900
has committed,|
|

706
00:22:00,240 --> 00:22:01,920
0,330 330,1020
one entry
一个条目在它自己的任期内。

707
00:22:02,920 --> 00:22:04,400
0,180 180,300 300,480 480,900
in its own term.|
|

708
00:22:09,990 --> 00:22:11,010
0,210 210,300 300,630 630,810 810,1020
And if we think about
如果我们考虑这个数字2，

709
00:22:11,010 --> 00:22:13,230
0,240 480,810 810,1320 1560,2070 2070,2220
this number 2,| {} it
|它实际上不是来自第四任期的领导人

710
00:22:13,230 --> 00:22:14,730
0,270 270,450 450,930 960,1410 1410,1500
actually isn't from leaders in

711
00:22:14,730 --> 00:22:16,950
0,240 240,780 1020,1620 1620,1860 1860,2220
term 4| and and so
|因此，提交规则不允许将2立即提交到服务器，

712
00:22:16,950 --> 00:22:19,230
0,480 570,1020 1140,1440 1440,1770 1770,2280
the the the commit rule

713
00:22:19,380 --> 00:22:21,300
0,330 330,660 660,1110 1110,1770 1770,1920
{} wouldn't allow actually {}

714
00:22:21,300 --> 00:22:23,490
0,390 390,630 630,1350 1560,1980 1980,2190
commit 2 immediately to the

715
00:22:23,490 --> 00:22:26,040
0,540 750,1440 1440,1650 1650,2400 2400,2550
servers,| because that actually is
|因为这实际上是来自前一个任期而不是来自当前任期的

716
00:22:26,040 --> 00:22:27,420
0,390 390,570 570,660 660,1050 1050,1380
one from a previous term

717
00:22:27,420 --> 00:22:28,170
0,90 90,270 270,390 390,450 450,750
and not from the current

718
00:22:28,170 --> 00:22:29,550
0,270 390,600 600,720 720,810 810,1380
term| and so for example
|例如，您的代码用于确定是否可以在所应用的通道上实际交付某些内容

719
00:22:29,580 --> 00:22:31,680
0,300 300,900 990,1230 1230,1770 1770,2100
your code to decide whether

720
00:22:31,680 --> 00:22:32,880
0,240 240,540 540,690 690,840 840,1200
actually something can be delivered

721
00:22:32,880 --> 00:22:34,260
0,120 120,210 210,570 570,1110 1110,1380
on the applied channel| needs
|需要考虑到这个帐户。

722
00:22:34,260 --> 00:22:35,430
0,90 90,270 270,330 330,630 630,1170
to take to this account.|
|

723
00:22:35,900 --> 00:22:36,770
0,210 210,300 300,630 630,720 720,870
And the reason you need
你需要考虑的原因如d和e所示，

724
00:22:36,770 --> 00:22:38,060
0,210 210,270 270,660 660,750 750,1290
take to account is illustrated

725
00:22:38,060 --> 00:22:39,340
0,150 150,690
by {d,and,e},|
|

726
00:22:39,510 --> 00:22:41,610
0,720 750,1380 1380,1530 1530,1620 1620,2100
{} basically what can happen
基本上可以发生的是，

727
00:22:41,610 --> 00:22:42,980
0,360 360,810
is that,|
|

728
00:22:42,980 --> 00:22:46,010
0,120 120,450 570,1440 1500,2280 2640,3030
you know for {} {S1
你知道，S1实际上可能会在不同的情况下结束，

729
00:22:46,010 --> 00:22:48,440
0,240 240,660 660,1020 1020,1620 1980,2430
-} actually might {} might

730
00:22:48,440 --> 00:22:49,880
0,630 630,780 780,900 900,960 960,1440
actually end up in a

731
00:22:49,880 --> 00:22:51,560
0,240 240,690 690,1170
different situation,| where
|其中d实际上变成了，

732
00:22:51,620 --> 00:22:55,010
0,660 990,1680 1680,1980 1980,2580 2610,3390
{} d actually becomes the,|
|

733
00:22:55,370 --> 00:22:56,440
0,510

734
00:22:56,440 --> 00:22:58,500
0,630 1050,1530
after, {}
之后，d实际上成为主导者，例如S1示例特别断开，

735
00:23:00,420 --> 00:23:02,850
0,270 270,540 540,870 870,1110 1770,2430
d actually becomes the leader,

736
00:23:02,910 --> 00:23:04,650
0,360 360,930 930,1050 1050,1350 1350,1740
for example {S1 -} example

737
00:23:04,650 --> 00:23:07,170
0,120 120,870 870,1530 1770,2310 2310,2520
is particularly disconnected,| and it
|它可能真的会开始连接，

738
00:23:07,170 --> 00:23:09,300
0,240 240,450 450,990 1020,1470 1470,2130
might actually start {} connecting,|
|

739
00:23:09,300 --> 00:23:10,890
0,450 450,660 660,900 900,960 960,1590
it can form a majority|
它可以形成多数|

740
00:23:11,040 --> 00:23:12,750
0,180 180,450 450,570 570,900 900,1710
and actually it starts copying
实际上，它开始将其特定的条目复制到实际上，

741
00:23:12,840 --> 00:23:15,330
0,300 300,1110 1260,1800 1800,2070 2070,2490
its particular, {} its entries

742
00:23:15,330 --> 00:23:17,260
0,150 150,660 690,1470
to actually {},|
|

743
00:23:17,350 --> 00:23:19,420
0,510 510,570 570,780 1170,1590 1590,2070
yeah, all right, it erases
是的，好的，它抹去了你知道的2

744
00:23:19,420 --> 00:23:20,620
0,120 120,240 240,360 360,960 1020,1200
you know the 2s| and
|并实际将条目中每个术语3的3复制到以前的2中

745
00:23:20,620 --> 00:23:22,600
0,210 210,600 600,840 840,1380 1410,1980
actually copies it's 3 in

746
00:23:22,660 --> 00:23:23,950
0,270 270,630 630,840 840,990 990,1290
the entry for each term

747
00:23:23,950 --> 00:23:26,500
0,480 540,1410 1560,1740 1740,2400 2400,2550
3 into {} whatever used

748
00:23:26,500 --> 00:23:27,370
0,90 90,210 210,510 570,750 750,870
to be 2| and this
|这就是我们在上一张幻灯片中谈到的擦除。

749
00:23:27,370 --> 00:23:29,110
0,240 240,870 870,1410 1410,1500 1500,1740
is erasing that we talked

750
00:23:29,110 --> 00:23:30,220
0,270 270,360 360,420 420,780 780,1110
about on the previous slide.|
|

751
00:23:31,700 --> 00:23:33,600
0,630 720,1350

752
00:23:33,660 --> 00:23:34,590
0,150 150,270 270,390 390,630 630,930
And so we'll see, actually
所以我们会看到，尽管它是在大多数节点上，对吧，

753
00:23:34,590 --> 00:23:36,450
0,270 300,600 600,1230 1260,1680 1680,1860
though even though it was

754
00:23:36,450 --> 00:23:37,500
0,120 120,180 180,840 840,960 960,1050
on the majority of the

755
00:23:37,500 --> 00:23:38,880
0,420 420,780 780,900 900,1020 1020,1380
nodes, right,| on the majority
|在大多数节点上，这一点被删除了。

756
00:23:38,880 --> 00:23:40,470
0,60 60,420 450,690 690,960 960,1590
of nodes, that got erased.|
|

757
00:23:41,370 --> 00:23:42,870
0,180 180,390 390,510 510,1290 1290,1500
And so the rule and
所以规则，也就是我在这里所说的规则，

758
00:23:42,870 --> 00:23:44,700
0,390 390,480 480,840 840,1440 1440,1830
therefore the rules {as,I} stated

759
00:23:44,700 --> 00:23:48,300
0,510 630,1980 2250,2580 2580,3450 3480,3600
here,| because now 1s you
|因为现在1s，你知道这是用e来说明的，

760
00:23:48,300 --> 00:23:49,410
0,120 120,270 270,360 360,840 840,1110
know this is illustrated by

761
00:23:49,410 --> 00:23:52,410
0,510 750,1380 1380,1980 1980,2670 2670,3000
e,| 1s actually {S3 -}
|1S实际上S3 S1在它自己的期限内提交了条目，

762
00:23:52,410 --> 00:23:53,850
0,180 180,540 540,960 960,1080 1080,1440
{S1 -} commits an entry

763
00:23:53,850 --> 00:23:55,540
0,120 120,300 300,630 630,1230
in its own term,|
|

764
00:23:55,830 --> 00:23:57,330
0,420 420,720 720,900 900,1080 1080,1500
{} and so it knows
所以它知道，在它自己的任期内，每一个不都有多数，

765
00:23:57,330 --> 00:23:58,620
0,210 210,690 720,1050 1050,1260 1260,1290
that every no there's a

766
00:23:58,620 --> 00:24:00,060
0,510 510,600 600,720 720,900 900,1440
majority in its own term,|
|

767
00:24:00,210 --> 00:24:01,380
0,360 360,450 450,630 630,990 990,1170
so at this point, it
因此，在这一点上，它实际上可以向应用程序提供4个

768
00:24:01,380 --> 00:24:03,060
0,120 120,390 390,900 900,1530 1560,1680
can actually deliver 4 {you,know}

769
00:24:03,060 --> 00:24:04,920
0,240 240,360 360,1110 1500,1710 1710,1860
to the application| and as
|结果就是，

770
00:24:04,920 --> 00:24:06,270
0,30 30,480 480,570 570,1110 1170,1350
a result of that,| {you,know}
|您知道，在前面的术语中提交的任何节点也可以交付给应用程序。

771
00:24:06,270 --> 00:24:07,590
0,360 360,720 720,840 840,930 930,1320
any nodes that were committed

772
00:24:07,590 --> 00:24:09,450
0,150 150,750 750,1260 1290,1500 1500,1860
in previous terms can also

773
00:24:09,450 --> 00:24:11,910
0,120 120,690 960,1350 1350,1800 1800,2460
be delivered to the application.|
|

774
00:24:13,040 --> 00:24:14,390
0,420 450,600 600,780 780,1050 1050,1350
So you see here that
所以您在这里可以看到，日志条目的擦除，

775
00:24:14,390 --> 00:24:15,710
0,150 150,510 510,630 630,870 870,1320
this erasing of log entries,|
|

776
00:24:15,740 --> 00:24:17,390
0,240 240,570 570,930 930,1560 1560,1650
that basic commits makes the
基本提交使提交规则稍微复杂一些。

777
00:24:17,390 --> 00:24:19,250
0,300 300,600 600,1170 1230,1710 1710,1860
commit rule quite slightly more

778
00:24:19,250 --> 00:24:20,400
0,660
complicated.|
|

779
00:24:20,460 --> 00:24:21,420
0,120 120,270 270,450 450,510 510,960
And that's just the design
这只是木筏设计者们所做的设计决定，

780
00:24:21,420 --> 00:24:23,040
0,570 570,780 780,1050 1050,1530 1530,1620
decisions that the designers of

781
00:24:23,040 --> 00:24:25,950
0,540 900,2250 2280,2730 2730,2850 2850,2910
raft {} made,| you know
|你知道他们可以用不同的方式来做，

782
00:24:25,950 --> 00:24:26,610
0,120 120,300 300,390 390,570 570,660
they could have done it

783
00:24:26,610 --> 00:24:28,260
0,600 840,1230 1230,1350 1350,1530 1530,1650
differently,| {} they could have
|他们本来可以算数的

784
00:24:28,260 --> 00:24:30,750
0,510 600,1260 1290,1560 1560,2250 2280,2490
counted| and made basically 2
|如果他们想的话，基本上让两个人活下来，

785
00:24:30,750 --> 00:24:32,100
0,570 570,690 690,780 780,1080 1080,1350
survive, if they wanted to,|
|

786
00:24:32,220 --> 00:24:33,210
0,180 180,300 300,720 720,810 810,990
but they decided to go
但他们决定采用这种特殊的方法，理由是，

787
00:24:33,210 --> 00:24:34,680
0,90 90,240 240,600 600,1110 1110,1470
for this particular approach on

788
00:24:34,680 --> 00:24:35,520
0,90 90,450 450,540 540,660 660,840
the grounds,| that they think
|他们认为这更简单。

789
00:24:35,520 --> 00:24:36,520
0,120 120,570
it's simpler.|
|

790
00:24:39,600 --> 00:24:41,040
0,210 210,360 360,540 540,810 810,1440
Okay, so this is suddenly
好的，这是突然出现的，

791
00:24:41,040 --> 00:24:43,050
0,240 240,720 750,1260 1290,1680 1680,2010
that will {} show up,|
|

792
00:24:43,080 --> 00:24:44,790
0,180 180,420 420,840 840,1350 1380,1710
you know in a test
你知道，在实验室的测试案例中，

793
00:24:44,790 --> 00:24:46,230
0,330 330,480 480,570 570,1050 1290,1440
cases for the labs,| so
|因此，您必须对您的提交规则稍微小心一些。

794
00:24:46,230 --> 00:24:48,450
0,150 150,300 300,630 990,1680 1680,2220
you have to {be,a,little,bit,of} careful

795
00:24:48,450 --> 00:24:49,920
0,300 300,420 420,720 720,990
with your commit rule.|
|

796
00:24:51,860 --> 00:24:52,610
0,150 150,240 240,330 330,660 660,750
And then you implement it
然后你就能正确地实现它。

797
00:24:52,610 --> 00:24:53,620
0,420
correctly.|
|

798
00:24:55,910 --> 00:24:57,640
0,570 600,1170
Okay, {}
好的，那么，到目前为止，你知道如果你回到这张特别的照片，

799
00:24:58,030 --> 00:24:59,200
0,630
so,

800
00:24:59,570 --> 00:25:01,160
0,300 300,780 810,900 900,1140 1140,1590
so far, you know if

801
00:25:01,160 --> 00:25:01,850
0,90 90,180 180,450 450,540 540,690
you go back to this

802
00:25:01,850 --> 00:25:04,100
0,330 330,750 750,1140 1500,1950 2010,2250
particular picture,| the {} an
|这个协议的优化版本有点令人沮丧，对吧，

803
00:25:04,100 --> 00:25:06,200
0,480 480,900 900,1050 1050,1320 1350,2100
optimized version of this protocol

804
00:25:07,880 --> 00:25:10,160
0,750 780,1620 1830,2100 2100,2190 2190,2280
is a little bit of

805
00:25:10,160 --> 00:25:12,410
0,90 90,570 600,960 960,1140 1140,2250
{} bummer, right,| like if
|比如，如果你稍微想一想，

806
00:25:12,440 --> 00:25:13,340
0,180 180,510 510,570 570,780 780,900
you think a little bit

807
00:25:13,340 --> 00:25:14,720
0,240 240,630 660,960 960,1140 1140,1380
about this,| let's look at
|让我们来看看S1到底发生了什么。

808
00:25:14,900 --> 00:25:17,750
0,300 300,450 450,900 900,1470 1740,2850
actually what happens with {S1

809
00:25:17,840 --> 00:25:19,200
0,570
-}.|
|

810
00:25:19,230 --> 00:25:21,690
0,570 690,1440 1890,2070 2070,2280 2280,2460
{} So let's see, let
让我们来看看，让我交换一下东西，

811
00:25:21,690 --> 00:25:23,610
0,240 270,840 840,1230 1230,1530 1530,1920
me switch things,| let's {see,S2
|让我们看看S2尝试使S1保持最新，

812
00:25:23,610 --> 00:25:24,750
0,240 240,480 480,690 690,1020 1020,1140
- -} tries bring {S1

813
00:25:24,750 --> 00:25:25,770
0,210 210,300 300,720 720,870 870,1020
-} up {to,date},| {} will
|也会做同样的事情，

814
00:25:25,770 --> 00:25:27,450
0,120 120,240 240,510 510,930 1440,1680
do the same thing,| {you,know}
|你知道发送附加条目，你知道没有条目，

815
00:25:27,450 --> 00:25:29,010
0,270 270,510 510,1290 1290,1380 1380,1560
send append entries, you know

816
00:25:29,010 --> 00:25:31,290
0,180 180,540 540,1290 1530,1890 1890,2280
with nil entries,| {} past
|上一学期上一学期为5，

817
00:25:31,290 --> 00:25:33,330
0,660 690,1290 1290,1620 1620,1710 1710,2040
term previous term to be

818
00:25:33,330 --> 00:25:34,380
0,630
5,|
|

819
00:25:36,400 --> 00:25:38,380
0,420 420,750 750,1440
and previous index
和之前的索引12，

820
00:25:38,500 --> 00:25:40,100
0,1110
12,|
|

821
00:25:40,160 --> 00:25:42,440
0,210 210,330 330,630 630,1320 1530,2280
it will say no, right,|
它会说不，对吧，|

822
00:25:43,340 --> 00:25:44,750
0,210 210,630 630,840 840,1200 1200,1410
{} actually the index {you,know}
实际上，你知道之前的指数实际上是带有3项的10，

823
00:25:44,750 --> 00:25:46,430
0,270 270,660 660,780 780,1320 1320,1680
previous index is actually a

824
00:25:46,430 --> 00:25:48,410
0,360 360,540 540,780 780,1260 1590,1980
10 with term 3, {}|
|

825
00:25:48,410 --> 00:25:50,420
0,180 180,360 360,810 900,1470
so it will, {}
是的，这个家伙会把它的下一个指数从13降到12，

826
00:25:50,450 --> 00:25:52,160
0,270 270,630 630,1080 1080,1560 1560,1710
this guy will decrease its

827
00:25:52,160 --> 00:25:54,980
0,270 270,720 720,1230 1230,1620 1980,2820
next index go from 13

828
00:25:55,010 --> 00:25:56,400
0,150 150,870
to 12,|
|

829
00:25:56,730 --> 00:25:57,900
0,300 300,450 450,570 570,870 870,1170
then we'll do the same
然后我们会再次做同样的事情，

830
00:25:57,900 --> 00:26:00,060
0,180 180,750 1230,1350 1350,1560 1560,2160
thing again,| you know sent
|你知道发送我猜它会发送5，日志条目5，

831
00:26:00,630 --> 00:26:01,740
0,540 540,540 540,840 840,930 930,1110
{} I guess it's gonna

832
00:26:01,740 --> 00:26:04,350
0,360 360,1140 1260,1860 1860,2130 2130,2610
send 5, {the,log} entry 5,|
|

833
00:26:04,350 --> 00:26:05,160
0,120 120,210 210,390 390,510 510,810
it will set the previous
它会将前一项设置为3，

834
00:26:05,160 --> 00:26:07,100
0,330 330,420 420,690 690,1410
term to be 3,|
|

835
00:26:07,220 --> 00:26:08,990
0,570 570,1140 1140,1260 1260,1440 1440,1770
and index {previous -} index
和索引前一索引11，

836
00:26:08,990 --> 00:26:10,560
0,180 180,900
{} 11,|
|

837
00:26:10,740 --> 00:26:11,250
0,180 180,300 300,360 360,480 480,510
it's going to get a
它会被拒绝的，

838
00:26:11,250 --> 00:26:12,800
0,270 270,870
no back,|
|

839
00:26:13,050 --> 00:26:13,980
0,150 150,300 300,510 510,600 600,930
you know, then the index
你知道，然后指数从12到11，

840
00:26:13,980 --> 00:26:15,180
0,240 240,600 600,750 750,1110 1110,1200
goes to from 12 to

841
00:26:15,180 --> 00:26:16,360
0,600
11,|
|

842
00:26:16,880 --> 00:26:18,590
0,570 570,1080 1080,1470 1470,1590 1590,1710
and now basically it's going
现在基本上它会奏效

843
00:26:18,590 --> 00:26:19,610
0,90 90,480 510,690 690,840 840,1020
to work| and so we'll
|因此，我们将看到基本上每个日志条目都是这样的，

844
00:26:19,610 --> 00:26:20,900
0,240 240,510 510,630 630,1050 1050,1290
see hear that basically for

845
00:26:20,900 --> 00:26:22,730
0,510 510,900 900,1470 1500,1710 1710,1830
every log entry,| we're going
|我们将对附加条目进行一次往返。

846
00:26:22,730 --> 00:26:23,660
0,60 60,240 240,300 300,570 570,930
to have a round trip

847
00:26:23,870 --> 00:26:25,280
0,120 120,300 300,390 390,630 630,1410
for sort of append entries.|
|

848
00:26:26,020 --> 00:26:27,610
0,480 600,1020 1020,1080 1080,1350 1350,1590
And {} it turns out
事实证明，这可能是昂贵的，就像，

849
00:26:27,610 --> 00:26:28,930
0,270 270,450 450,570 570,750 750,1320
that that can be expensive,

850
00:26:28,960 --> 00:26:30,730
0,240 240,630 630,1050 1380,1680 1680,1770
and like,| and and the
|而真正的问题是，你的追随者能远远落后吗？

851
00:26:30,730 --> 00:26:31,690
0,150 150,450 450,600 600,810 810,960
real question is like you

852
00:26:31,690 --> 00:26:33,400
0,330 330,690 690,840 840,1350 1350,1710
can {follower -} be far

853
00:26:33,400 --> 00:26:34,760
0,240 240,630
far behind.|
|

854
00:26:35,310 --> 00:26:36,600
0,600 600,720 720,960 960,1080 1080,1290
{} And let me ask
我想问一下，我们现在有一小会儿时间，

855
00:26:36,600 --> 00:26:37,560
0,210 210,360 360,780 780,930 930,960
that we're [] for a

856
00:26:37,560 --> 00:26:39,000
0,450 450,570 570,720 720,840 840,1440
second,| so you can reflect
|所以你可以反思和思考这个案例，

857
00:26:39,000 --> 00:26:40,770
0,660 660,870 870,1050 1050,1230 1230,1770
and think about that case,|
|

858
00:26:41,070 --> 00:26:41,940
0,150 150,270 270,660 660,780 780,870
is it possible that a
有没有可能一个追随者可能远远落后于某个给定的领导人。

859
00:26:41,940 --> 00:26:43,380
0,390 390,540 540,660 660,1200 1200,1440
follower can be far far

860
00:26:43,380 --> 00:26:45,690
0,570 1050,1380 1380,1710 1710,1950 1950,2310
behind for a given leader.|
|

861
00:26:49,110 --> 00:26:50,400
0,300 300,540 540,570 570,750 750,1290
{} If a new machine
如果一台新机器加入了集群？

862
00:26:50,400 --> 00:26:52,060
0,300 300,390 390,1110
joins the cluster?|
|

863
00:26:52,060 --> 00:26:54,520
0,1110 1140,1920 1920,2130 2130,2400 2400,2460
Yeah, new join cluster is
是的，新的加入集群就是一个很好的例子，还有其他的例子吗？

864
00:26:54,520 --> 00:26:55,420
0,60 60,180 180,570 570,720 720,900
a good example, any other

865
00:26:55,420 --> 00:26:56,440
0,510
cases?|
|

866
00:26:57,820 --> 00:26:59,080
0,120 120,510 510,1050 1050,1140 1140,1260
A machine crashed and is
一台机器崩溃了，几个月后才能重新上线。

867
00:26:59,080 --> 00:27:00,490
0,240 240,450 450,690 690,1140 1140,1410
only coming back online after

868
00:27:00,490 --> 00:27:03,310
0,330 330,1020 1140,1830 1830,2220 2220,2820
several terms.| Yeah, exactly, it
|是啊，没错，约会后又回来了，

869
00:27:03,310 --> 00:27:04,420
0,180 180,390 390,600 600,690 690,1110
comes back after a date,|
|

870
00:27:04,990 --> 00:27:06,460
0,180 180,360 360,720 720,1170 1170,1470
it might be far behind,|
它可能已经远远落后了，|

871
00:27:06,940 --> 00:27:08,290
0,210 210,570 570,720 720,1170 1170,1350
so that would mean like
这意味着，就像在协议和未优化版本中一样，您将从日志条目逐个返回。

872
00:27:08,290 --> 00:27:09,550
0,240 240,390 420,900 900,1080 1080,1260
in the protocol and {unoptimized

873
00:27:09,550 --> 00:27:10,720
0,450 450,750 750,900 900,1020 1020,1170
-} version that you're gonna

874
00:27:10,720 --> 00:27:11,800
0,150 150,420 420,630 630,750 750,1080
go back one by one

875
00:27:11,800 --> 00:27:13,140
0,150 150,240 240,570
from the {log,entries}.|
|

876
00:27:13,260 --> 00:27:13,860
0,180 180,330 330,360 360,510 510,600
So that's a little bit
所以这有点贵

877
00:27:13,860 --> 00:27:15,810
0,630 990,1470 1470,1590 1590,1680 1680,1950
expensive| and so the paper
|因此，这篇论文实际上讨论了一种优化，

878
00:27:15,810 --> 00:27:18,330
0,270 270,750 750,840 840,1800 2100,2520
actually discusses an optimization {},|
|

879
00:27:18,330 --> 00:27:19,590
0,210 210,330 330,630 630,750 750,1260
so to catch up quickly.|
因此，要快速赶上。|

880
00:27:30,740 --> 00:27:32,360
0,360 360,1020
And, {}
而且，这个想法基本上是

881
00:27:32,940 --> 00:27:34,860
0,240 240,1020 1020,1380 1380,1800 1800,1920
and the idea basically is|
|

882
00:27:34,860 --> 00:27:37,080
0,390 390,570 570,900 900,1710 1710,2220
instead of like {} backing
而不是像我之前说的那样后退，

883
00:27:37,080 --> 00:27:39,510
0,510 1710,1860 1860,1920 1920,2100 2100,2430
off as I said earlier,|
|

884
00:27:39,510 --> 00:27:40,950
0,180 180,600 600,930 930,1050 1050,1440
the next index is basically
下一个指数基本是乐观的，只是猜对了

885
00:27:40,950 --> 00:27:42,900
0,690 690,960 960,1350 1350,1650 1650,1950
optimistic, just guess right| and
|而且它不一定真的那么准确，

886
00:27:43,260 --> 00:27:44,340
0,270 270,510 510,780 780,990 990,1080
it doesn't really have to

887
00:27:44,340 --> 00:27:46,980
0,180 180,450 450,990 1320,2010 2010,2640
be that accurate,| {} and
|所以观察到的是

888
00:27:47,070 --> 00:27:48,180
0,300 300,420 420,510 510,1020 1020,1110
and so the observation is

889
00:27:48,180 --> 00:27:49,200
0,150 150,240 240,660 720,900 900,1020
that| you know we don't
|你知道我们真的不需要一个接一个地回去，

890
00:27:49,200 --> 00:27:50,010
0,120 120,240 240,330 330,450 450,810
really have to go one

891
00:27:50,010 --> 00:27:51,150
0,120 120,450 450,840 870,960 960,1140
by one back,| you know
|你知道，这是非常好的，例如，回到整个学期。

892
00:27:51,150 --> 00:27:52,230
0,120 120,480 480,720 720,780 780,1080
it's perfectly fine for example

893
00:27:52,230 --> 00:27:52,950
0,60 60,180 180,240 240,450 450,720
to go a whole term

894
00:27:52,950 --> 00:27:53,720
0,420
back.|
|

895
00:27:53,810 --> 00:27:55,130
0,390 390,840 840,1050 1050,1230 1230,1320
And in fact there's a
事实上，有一个合乎逻辑的

896
00:27:55,130 --> 00:27:56,870
0,570 570,840 840,1050 1050,1260 1260,1740
logical| maybe that's just a
|也许这只是一个节点，你知道，你知道，它是几个术语之前

897
00:27:56,900 --> 00:27:58,250
0,570 570,660 660,960 1050,1230 1230,1350
node you know you know

898
00:27:58,250 --> 00:27:59,450
0,420 480,660 660,840 840,900 900,1200
it's a couple of terms

899
00:27:59,450 --> 00:28:00,590
0,300 300,420 420,750 750,1050 1050,1140
back| and we back off
|我们放弃了几个条款

900
00:28:00,590 --> 00:28:01,340
0,60 60,240 240,300 300,630 630,750
a couple of terms| and
|然后我们从那里开始扫描。

901
00:28:01,340 --> 00:28:03,260
0,480 480,870 960,1410 1410,1560 1560,1920
then we'll scan from there.|
|

902
00:28:04,050 --> 00:28:05,280
0,300 300,570 570,720 720,1080 1080,1230
Alright, so to illustrate a
好的，为了说明它是如何工作的，

903
00:28:05,340 --> 00:28:06,570
0,360 360,510 510,660 660,780 780,1230
little bit how it works,|
|

904
00:28:06,930 --> 00:28:08,100
0,540 540,780 780,960 960,1110 1110,1170
{} let me use the
让我使用完整的例子，

905
00:28:08,100 --> 00:28:10,140
0,180 180,930 1230,1800 1800,1950 1950,2040
full example,| {} and I'm
|我只需要做两台服务器，

906
00:28:10,140 --> 00:28:11,730
0,120 120,300 300,540 810,990 990,1590
just gonna do two servers,|
|

907
00:28:11,880 --> 00:28:12,810
0,330 330,510 510,660 660,750 750,930
{} even though they might
即使他们可能是你知道的需要3个才能获得多数，

908
00:28:12,810 --> 00:28:13,950
0,270 270,360 360,600 600,840 840,1140
be you know need 3

909
00:28:13,950 --> 00:28:14,910
0,120 120,300 300,510 510,570 570,960
to {sort,of} have a majority,|
|

910
00:28:14,910 --> 00:28:16,230
0,270 510,840 840,1080 1080,1260 1260,1320
but let's assume there's a
但让我们假设还有第三个

911
00:28:16,230 --> 00:28:17,460
0,240 240,690 690,930 930,1020 1020,1230
third one| and it just
|它只是快乐地玩着。

912
00:28:17,460 --> 00:28:18,960
0,240 240,570 570,1020
plays happily along.|
|

913
00:28:19,260 --> 00:28:21,270
0,390 390,510 510,990 990,1500 1530,2010
{} So, here's S1, here's
所以，这是S1，这是S2，

914
00:28:21,270 --> 00:28:22,420
0,570
S2,|
|

915
00:28:23,320 --> 00:28:25,150
0,780 930,1170 1170,1590 1590,1680 1680,1830
and let's see you know
让我们看看我们这家伙有5 5 5，

916
00:28:25,150 --> 00:28:27,140
0,330 360,630 630,900 900,1350
we this guy has

917
00:28:27,910 --> 00:28:30,180
0,480 480,960 960,1740
5 5 5,|
|

918
00:28:30,400 --> 00:28:33,520
0,900 1770,2040 2040,2460

919
00:28:33,640 --> 00:28:35,890
0,450 480,750 750,1110 1230,1710 1710,2250
and this is 1 2
这是1 2 3 4 5索引，

920
00:28:35,890 --> 00:28:39,040
0,690 720,1110 1110,1770 1830,2580
3 4 5 indexes,|
|

921
00:28:39,070 --> 00:28:40,630
0,450 450,1140 1140,1260 1260,1350 1350,1560
{} and you know let's
你知道，比方说，

922
00:28:40,630 --> 00:28:41,740
0,540
say,|
|

923
00:28:42,090 --> 00:28:44,670
0,540 990,1260 1260,1470 1470,1860 1860,2580
{} {S2 -} has 4,
S2有4个，基本上都是6，

924
00:28:45,610 --> 00:28:47,830
0,600 600,810 810,1470 1650,1860 1860,2220
basically all 6s,| so basically
|所以你知道，基本上S1是相当落后的，

925
00:28:47,830 --> 00:28:48,820
0,120 120,330 330,540 540,660 660,990
{S1 -} is you know

926
00:28:49,030 --> 00:28:51,730
0,630 660,1410 1440,2190 2310,2640 2640,2700
quite behind,| because that's the
|因为这是他们真正排成一行的唯一地方，在第一个条目中，也就是第四个条目中。

927
00:28:51,730 --> 00:28:52,960
0,300 300,540 540,720 720,960 960,1230
only place where they actually

928
00:28:52,960 --> 00:28:53,830
0,240 240,450 450,630 630,780 780,870
line up is in the

929
00:28:53,830 --> 00:28:55,000
0,270 270,630
first entry,

930
00:28:55,030 --> 00:28:57,100
0,420 420,1200 1230,1440 1440,1980 1980,2070
{in,first} { -} which is

931
00:28:57,100 --> 00:28:58,300
0,630
{term,4}.|
|

932
00:28:58,390 --> 00:29:00,370
0,270 270,390 390,870 900,1500 1500,1980
So in the unoptimized scheme,|
因此，在未优化的方案中，|

933
00:29:00,370 --> 00:29:01,540
0,180 180,300 300,570 570,840 840,1170
we would back off one
我们会一个接一个地后退，直到我们最终到达那里。

934
00:29:01,540 --> 00:29:02,530
0,120 120,390 390,570 570,690 690,990
by one, one by one

935
00:29:02,530 --> 00:29:03,550
0,270 270,390 390,660 660,870 870,1020
until we finally got there.|
|

936
00:29:04,860 --> 00:29:07,410
0,390 1110,1290 1290,1740 1740,2280 2340,2550
And to optimize this, {}
为了优化这一点，本文描述了一种优化，

937
00:29:07,410 --> 00:29:09,660
0,450 480,840 840,1290 1290,1350 1350,2250
the paper describes an optimization,|
|

938
00:29:09,840 --> 00:29:11,970
0,600 660,1170 1170,1440 1440,2040 2040,2130
{} unfortunately the opposition is
不幸的是，对立面并没有如图2所描述的那样详细

939
00:29:11,970 --> 00:29:13,080
0,210 210,480 540,930 930,1020 1020,1110
not as described in the

940
00:29:13,080 --> 00:29:14,160
0,300 300,480 480,540 540,930 930,1080
same amount of detail as

941
00:29:14,160 --> 00:29:15,300
0,210 210,570 570,870 870,990 990,1140
{} figure 2| and so
|所以实际上你会在For 2c中通过c，

942
00:29:15,300 --> 00:29:17,400
0,60 60,420 420,780 780,1170 1170,2100
in fact you will {in,the}

943
00:29:17,490 --> 00:29:18,750
0,180 180,360 360,720 720,960 960,1260
for {2c -} actually pass

944
00:29:18,750 --> 00:29:19,830
0,150 150,420 420,570 570,750 750,1080
through c,| you do actually
|你确实必须要有，

945
00:29:19,830 --> 00:29:21,100
0,240 240,360 360,780
have to have,|
|

946
00:29:21,100 --> 00:29:23,110
0,570 570,750 750,1170 1170,1740 1740,2010
{} and this optimization, a
而这种优化，这种优化的一种实现形式，

947
00:29:23,110 --> 00:29:24,910
0,300 300,390 390,540 540,1200 1200,1800
form of this optimization implemented,|
|

948
00:29:25,090 --> 00:29:26,440
0,300 300,600 600,930 930,1200 1200,1350
your reasonable free actually how
你的合理自由其实是如何实现的，

949
00:29:26,440 --> 00:29:27,490
0,60 60,420 420,510 510,720 720,1050
to implement it,| because paper
|因为论文并不能非常准确地描述，

950
00:29:27,580 --> 00:29:29,050
0,240 240,660 660,870 870,1380 1380,1470
doesn't describe very precisely,| you
|你知道该怎么做，

951
00:29:29,050 --> 00:29:30,100
0,120 120,510 510,810 810,900 900,1050
know which how you should

952
00:29:30,100 --> 00:29:30,790
0,150 150,240 240,360 360,480 480,690
do it,| then you have
|然后你必须做一点工作，

953
00:29:30,790 --> 00:29:31,360
0,90 90,180 180,240 240,450 450,570
to do a little bit

954
00:29:31,360 --> 00:29:32,890
0,90 90,450 660,1110 1110,1200 1200,1530
of work,| but the basic
|但其基本思路如下。

955
00:29:32,890 --> 00:29:35,060
0,600 870,1050 1050,1140 1140,1770
idea is as follows.|
|

956
00:29:35,060 --> 00:29:36,410
0,180 180,660 720,1020 1020,1110 1110,1350
And just instead of just
就像我们在上一张幻灯片中所知道的那样，不只是投票或说不或是，

957
00:29:36,410 --> 00:29:37,970
0,570 570,750 750,930 930,1200 1200,1560
voting or just saying no

958
00:29:37,970 --> 00:29:39,290
0,120 120,600 600,780 780,960 960,1320
or yes, as we know

959
00:29:39,290 --> 00:29:41,180
0,180 180,330 330,630 630,1020 1170,1890
on the previous slide,| the
|拒绝，所以你说不，

960
00:29:41,510 --> 00:29:43,280
0,1200
rejection,

961
00:29:43,280 --> 00:29:45,120
0,270 270,420 420,600 600,1200
so you say no,|
|

962
00:29:45,150 --> 00:29:46,350
0,180 180,570 570,990 990,1020 1020,1200
the rejection includes a little
拒绝包括一点更多的信息

963
00:29:46,350 --> 00:29:47,760
0,120 120,210 210,420 420,960 1230,1410
bit of more information| and
|然后这些信息将帮助领导者基本上更快地后退，

964
00:29:47,760 --> 00:29:49,410
0,750 750,900 900,1410 1410,1530 1530,1650
then that information is going

965
00:29:49,410 --> 00:29:50,640
0,60 60,480 480,780 780,1110 1110,1230
to help the leader to

966
00:29:50,640 --> 00:29:52,460
0,390 390,660 660,870 870,1290
basically back off quicker,|
|

967
00:29:52,700 --> 00:29:54,980
0,420 420,660 660,930 930,1560
{} and so includes
因此包括他们所说的相互冲突的术语，

968
00:29:54,980 --> 00:29:56,540
0,240 240,450 450,600 600,1170 1200,1560
something what they call the

969
00:29:56,570 --> 00:29:58,260
0,480 480,990
conflicting term,|
|

970
00:29:58,940 --> 00:30:00,380
0,270 270,750 750,930 930,990 990,1440
in response {} the conflicting
作为对相互冲突的索引的响应。

971
00:30:00,380 --> 00:30:02,040
0,690
index.|
|

972
00:30:03,920 --> 00:30:06,830
0,480 480,1020 1650,2280 2310,2520 2520,2910
And the, {} the conflicting
而这个相互冲突的术语基本上就是，

973
00:30:06,830 --> 00:30:09,650
0,360 360,630 630,1080 1080,1650 1950,2820
term is basically the, {}|
|

974
00:30:09,800 --> 00:30:11,180
0,300 300,420 420,960 990,1230 1230,1380
you know if let me
你知道，如果让我说得更清楚一点，

975
00:30:11,180 --> 00:30:12,680
0,330 330,540 540,750 750,1080 1110,1500
actually make this a more

976
00:30:12,680 --> 00:30:14,060
0,360 360,570 570,930 930,1170 1200,1380
clear,| let's say here's {S1
|假设这是S1时间线，这是S2时间线，

977
00:30:14,060 --> 00:30:17,440
0,510 990,1860 1860,2100 2100,2820
-} timeline, here's S2,|
|

978
00:30:17,620 --> 00:30:19,180
0,540 540,1020 1020,1200 1200,1350 1350,1560
{} so {S2 -} sends
所以S2派你知道的7号推选领袖，对吗，

979
00:30:19,180 --> 00:30:20,770
0,330 330,570 600,1140 1140,1500 1500,1590
you know elected leader in

980
00:30:20,770 --> 00:30:22,090
0,510 540,810 810,1020 1020,1110 1110,1320
7, correct,| because it has
|因为它拥有最新的信息，

981
00:30:22,090 --> 00:30:23,410
0,300 300,630 630,780 780,870 870,1320
the most up to date,|
|

982
00:30:23,440 --> 00:30:25,180
0,270 270,780 1230,1410 1410,1680 1680,1740
a log it sends a
它向S1发送消息的日志你知道心跳，

983
00:30:25,180 --> 00:30:27,040
0,660 840,1080 1080,1200 1200,1620 1620,1860
message to {S1 -} {you,know}

984
00:30:27,040 --> 00:30:28,220
0,90 90,330 330,750
a {heartbeat -},|
|

985
00:30:28,220 --> 00:30:29,990
0,780 780,1050 1050,1260 1260,1290 1290,1770
and, {} in a heartbeat,|
而且，在一瞬间，|

986
00:30:29,990 --> 00:30:31,100
0,150 150,480 480,870 870,960 960,1110
it will say you know
它会说你知道上一学期是6

987
00:30:31,100 --> 00:30:32,880
0,120 120,570 570,1200
the previous term

988
00:30:33,110 --> 00:30:36,770
0,930 960,1890 1890,2490 2970,3330 3330,3660
{} was 6| and previous
|之前的指数是5，

989
00:30:36,770 --> 00:30:38,120
0,750
index

990
00:30:38,120 --> 00:30:41,320
0,930 990,1800 2040,2640
was {} 5,|
|

991
00:30:42,620 --> 00:30:43,610
0,300 300,480 480,660 660,780 780,990
and now, when this one
现在，当这个得到这个，你知道，看看这个日志，发现实际上前一项是5，

992
00:30:43,610 --> 00:30:45,050
0,210 210,750 780,1140 1140,1320 1320,1440
gets this {you,know} looks at

993
00:30:45,050 --> 00:30:46,490
0,270 270,780 780,1020 1020,1170 1170,1440
this {log,and} sees that actually

994
00:30:46,490 --> 00:30:47,960
0,90 90,480 480,810 810,960 960,1470
the previous term was 5,|
|

995
00:30:48,840 --> 00:30:50,640
0,180 180,600 810,1200 1200,1320 1320,1800
and so instead of actually
因此，它将包括在回应中，而不是实际上

996
00:30:50,640 --> 00:30:51,900
0,510 510,660 660,750 750,870 870,1260
and so it will include

997
00:30:51,900 --> 00:30:53,340
0,150 150,690 690,810 810,900 900,1440
in response| you know conflicting
|你知道，在该指数中出现了相互冲突的术语冲突，这是5个。

998
00:30:53,340 --> 00:30:56,340
0,480 570,2100 2190,2490 2490,2850 2850,3000
term term conflicts on in

999
00:30:56,340 --> 00:30:57,420
0,210 210,630 630,750 750,870 870,1080
that index and that was

1000
00:30:57,420 --> 00:30:58,440
0,540
5.|
|

1001
00:30:58,630 --> 00:30:59,380
0,150 150,270 270,390 390,480 480,750
We're going to the final
我们将进入最后的参赛作品

1002
00:30:59,380 --> 00:31:01,420
0,480 810,960 960,1470 1650,1920 1920,2040
entry| and then {} it
|然后它还包括这个日志中该术语的第一个索引是什么，

1003
00:31:01,420 --> 00:31:03,010
0,210 210,660 660,840 840,960 960,1590
also includes what the first

1004
00:31:03,040 --> 00:31:04,750
0,570 570,810 810,1110 1110,1530 1530,1710
index of that term is

1005
00:31:04,750 --> 00:31:05,770
0,120 120,300 300,660 690,930 930,1020
in this log,| so we
|所以我们把这个术语看作是5 5 5

1006
00:31:05,770 --> 00:31:07,330
0,180 180,300 300,600 600,1200 1230,1560
look at this {} term

1007
00:31:07,330 --> 00:31:08,590
0,240 240,570 570,1050 1050,1200 1200,1260
like {5,5,5 -}| and the
|和索引5一样，第一次出现它的日志是在索引2

1008
00:31:08,590 --> 00:31:09,880
0,270 270,660 660,900 900,960 960,1290
first time like the index

1009
00:31:09,880 --> 00:31:11,050
0,270 270,480 480,600 600,750 750,1170
5 showed up its log

1010
00:31:11,050 --> 00:31:12,220
0,120 120,240 240,690 690,960 1020,1170
is at index 2| and
|所以我们也会包括这一点，

1011
00:31:12,220 --> 00:31:13,690
0,180 180,540 570,900 900,1110 1110,1470
so we'll include that too,|
|

1012
00:31:14,020 --> 00:31:15,340
0,210 210,300 300,510 510,750 750,1320
and we'll send that back
我们会把你知道的送回给领导，

1013
00:31:15,670 --> 00:31:16,930
0,90 90,240 240,570 570,840 870,1260
you know to the leader,|
|

1014
00:31:16,930 --> 00:31:18,820
0,150 150,810 810,1140 1140,1260 1260,1890
so here's {S2,was -} leader,|
这位是S2是领袖，|

1015
00:31:19,160 --> 00:31:20,030
0,300 300,570 570,690 690,810 810,870
and so we're going to
所以我们要发回5个逗号2，

1016
00:31:20,030 --> 00:31:21,560
0,180 180,630 660,750 750,900 900,1530
send back you know 5

1017
00:31:22,830 --> 00:31:24,870
0,330 330,840 960,1500 1500,1590 1590,2040
comma 2,| that's the conflicting
|这就是相互矛盾的信息

1018
00:31:24,870 --> 00:31:28,260
0,780 1200,1830 1830,2640 2670,3180 3180,3390
information| and {} leader uses
|Leader使用这些信息基本上向后跳到更远，

1019
00:31:28,260 --> 00:31:30,720
0,210 210,930 1140,1410 1410,1890 1890,2460
that information to basically skip

1020
00:31:30,720 --> 00:31:32,370
0,360 360,900 900,1110 1110,1410 1410,1650
{backward,further -},| in fact it
|事实上，它是从，

1021
00:31:32,370 --> 00:31:34,530
0,330 330,930 930,1290 1290,1530 1530,2160
skips back from,| so initially
|所以最初的猜测是S1的下一个指数是6。

1022
00:31:34,530 --> 00:31:35,980
0,180 180,510 510,1050
it's guess was

1023
00:31:35,980 --> 00:31:37,840
0,390 390,1170
next index

1024
00:31:38,780 --> 00:31:41,510
0,630 660,870 870,1500 1560,2130 2130,2730
for {S1 -} {} was

1025
00:31:41,510 --> 00:31:42,680
0,630
6.|
|

1026
00:31:42,680 --> 00:31:44,210
0,330 330,540 540,630 630,780 780,1530
And based on this information|
并根据这些信息|

1027
00:31:44,210 --> 00:31:45,650
0,150 150,390 390,750 750,1110 1110,1440
and {it,actually} scales back to
实际上，它的规模缩小到2，

1028
00:31:45,650 --> 00:31:46,970
0,570 660,870 870,960 960,1200 1200,1320
2,| so it turns it
|所以它变成了2

1029
00:31:46,970 --> 00:31:48,350
0,210 210,720 1050,1200 1200,1320 1320,1380
into 2| and then the
|然后，下一个追加条目将包括从2开始的所有内容。

1030
00:31:48,350 --> 00:31:50,040
0,240 240,570 570,1230
next append entries

1031
00:31:50,160 --> 00:31:51,330
0,180 180,450 450,570 570,630 630,1170
{} is going to include

1032
00:31:51,330 --> 00:31:53,180
0,630 630,960 960,1260
everything from 2.|
|

1033
00:31:53,820 --> 00:31:55,170
0,420 420,570 570,780 780,930 930,1350
So its gonna to include
所以它将包括你知道的55 5 5，

1034
00:31:55,170 --> 00:31:57,200
0,210 210,540 540,840 840,1470
{you,know} 5 5 5,|
|

1035
00:31:58,140 --> 00:32:01,020
0,390 390,750 750,1650 1830,2160 2160,2880
and previous term is 4
前一项为4，前一指数为1，

1036
00:32:01,020 --> 00:32:03,340
0,210 210,540 540,1260 1260,1710
and previous {index,is} 1,|
|

1037
00:32:04,650 --> 00:32:05,970
0,150 150,450 450,600 600,960 960,1320
and now {S1 -} can
现在S1可以是一个[]，

1038
00:32:06,000 --> 00:32:07,770
0,270 270,750 750,960 960,1350 1350,1770
one [] [] [],| basically
|基本上，将新的日志条目复制到条目2、3、4或5上，实际上是最新的。

1039
00:32:07,770 --> 00:32:08,820
0,570 570,660 660,780 780,900 900,1050
copy you know the new

1040
00:32:08,820 --> 00:32:10,950
0,300 300,720 720,1590 1590,1800 1800,2130
log entries over the entries

1041
00:32:10,950 --> 00:32:11,940
0,120 120,300 300,510 510,570 570,990
2 3 4 or 5

1042
00:32:11,940 --> 00:32:13,020
0,330 330,570 570,660 660,750 750,1080
actually back up to date.|
|

1043
00:32:14,200 --> 00:32:15,970
0,270 270,420 420,1080 1080,1650 1650,1770
So this basically reduces the
所以这基本上减少了心跳的次数，

1044
00:32:15,970 --> 00:32:17,740
0,420 420,840 840,1530 1530,1650 1650,1770
number of heartbeats,| you know
|你知道，每个学期要追上一个追随者，而不是每个条目一个。

1045
00:32:17,740 --> 00:32:20,350
0,330 330,840 840,1230 1470,1860 1860,2610
to catch up {} follower

1046
00:32:20,380 --> 00:32:22,090
0,330 330,690 690,810 810,1350 1350,1710
by one per term instead

1047
00:32:22,090 --> 00:32:23,520
0,90 90,390 390,540 540,930
of one per entry.|
|

1048
00:32:30,850 --> 00:32:32,200
0,240 240,840
Any questions?|
有什么问题吗？|

1049
00:32:33,430 --> 00:32:34,390
0,180 180,270 270,390 390,600 600,960
How do we make sure
我们如何确保我们不会使带宽超载，

1050
00:32:34,390 --> 00:32:36,700
0,150 150,630 1020,1380 1560,1860 1860,2310
that we don't {you,know} overload

1051
00:32:36,700 --> 00:32:38,110
0,90 90,660 660,840 840,1290 1290,1410
the bandwidth,| because imagine if
|因为想象一下，如果您有Like，您正在尝试发回所有这些日志条目

1052
00:32:38,110 --> 00:32:39,940
0,150 150,390 390,750 750,1470 1680,1830
you have like, {} you're

1053
00:32:39,940 --> 00:32:41,440
0,180 180,270 270,570 570,1110 1140,1500
trying to send back all

1054
00:32:41,440 --> 00:32:42,490
0,90 90,270 270,570 570,930 930,1050
of these log entries| cause
|这导致了LIKE数据包过大的问题。

1055
00:32:42,490 --> 00:32:43,840
0,210 210,510 510,1020 1020,1110 1110,1350
that caused problems in terms

1056
00:32:43,840 --> 00:32:44,680
0,60 60,240 240,630 630,780 780,840
of like packets that are

1057
00:32:44,680 --> 00:32:46,060
0,150 150,810
too large.|
|

1058
00:32:46,060 --> 00:32:47,290
0,180 180,300 300,420 420,600 600,1230
Yeah, so a great question,|
是的，所以有一个很好的问题，|

1059
00:32:47,290 --> 00:32:49,030
0,480 540,1020 1020,1410 1410,1680 1680,1740
like {} and because it
喜欢，因为它表明了另一种方案，对吧，

1060
00:32:49,030 --> 00:32:50,920
0,180 180,270 270,780 1140,1320 1320,1890
sort of indicates an alternative

1061
00:32:50,920 --> 00:32:52,330
0,600 630,900 900,1080 1080,1230 1230,1410
scheme, right,| but you know
|但你知道回到这里，

1062
00:32:52,330 --> 00:32:54,400
0,390 420,780 780,1020 1020,1530 1560,2070
the go back here, {}|
|

1063
00:32:54,820 --> 00:32:56,230
0,180 180,600 600,960 960,1320 1320,1410
{} is that instead of
与其做出这种乐观的猜测，

1064
00:32:56,230 --> 00:32:57,940
0,270 270,570 570,690 690,1260 1260,1710
actually making this optimistic guess|
|

1065
00:32:57,940 --> 00:32:58,600
0,90 90,180 180,390 390,600 600,660
you know why make a
你知道为什么要猜测吗，

1066
00:32:58,600 --> 00:33:00,070
0,210 210,300 300,780 900,1260 1260,1470
guess at all,| just send
|你只要把你知道的领队能发的东西都寄出去，

1067
00:33:00,070 --> 00:33:01,570
0,510 750,960 960,1080 1080,1200 1200,1500
everything you know the leader

1068
00:33:01,570 --> 00:33:02,560
0,150 150,300 300,600 600,810 810,990
could have send like though

1069
00:33:02,560 --> 00:33:03,940
0,180 180,390 390,990 1110,1290 1290,1380
it's whole log,| it would
|那就太好了。

1070
00:33:03,940 --> 00:33:04,960
0,120 120,510 510,810 810,900 900,1020
be perfectly fine| and then
|然后基本上你知道任何追随者都可以找到他们需要的，对吧，

1071
00:33:04,960 --> 00:33:05,980
0,450 450,510 510,720 720,930 930,1020
basically you know any of

1072
00:33:05,980 --> 00:33:07,630
0,60 60,630 630,810 810,1260 1260,1650
the followers can fish out

1073
00:33:07,840 --> 00:33:09,130
0,120 120,330 330,480 480,840 870,1290
the ones they need, right,|
|

1074
00:33:10,850 --> 00:33:13,430
0,720 720,990 990,1890 1890,2070 2070,2580
{} and {that,would,be} an alternative
这将是另一种实现方式

1075
00:33:13,430 --> 00:33:15,440
0,750 750,1260 1290,1650 1650,1770 1770,2010
implementation| and presumably we don't
|想必我们不喜欢这种实现方式，

1076
00:33:15,440 --> 00:33:17,360
0,210 210,450 450,1230 1410,1860 1860,1920
like the implementation,| because the
|因为日志可能很大

1077
00:33:17,360 --> 00:33:19,520
0,240 240,450 450,540 540,1200 1410,2160
log might be large| and
|这将是一个问题。

1078
00:33:19,520 --> 00:33:21,410
0,660 660,1020 1020,1140 1140,1230 1230,1890
{} that would be problematic.|
|

1079
00:33:22,260 --> 00:33:23,550
0,330 330,510 510,570 570,960 990,1290
{} So I think you
所以我想你知道这里正在进行的基本猜测是

1080
00:33:23,550 --> 00:33:24,810
0,90 90,210 210,630 630,900 900,1260
know the basic guess here

1081
00:33:24,810 --> 00:33:26,190
0,240 240,450 450,750 750,1020 1020,1380
that's going on is| that
|在巨大的典型情况下，

1082
00:33:26,460 --> 00:33:30,540
0,930 1080,1500 1590,2610 2610,3210 3210,4080
{} in enormous typical situations,|
|

1083
00:33:30,570 --> 00:33:32,430
0,870 900,1320 1320,1680 1680,1740 1740,1860
the followers or you know
追随者或者你知道的，希望是合理的紧密联系在一起

1084
00:33:32,430 --> 00:33:34,410
0,540 540,900 900,1230 1230,1770 1770,1980
hopefully reasonable close together| and
|因此，取消几个条目实际上就足够了。

1085
00:33:34,410 --> 00:33:35,550
0,360 360,720 720,870 870,930 930,1140
so backing off a couple

1086
00:33:35,550 --> 00:33:37,480
0,450 450,540 540,780 780,1440
entries is actually sufficient.|
|

1087
00:33:37,630 --> 00:33:39,190
0,450 450,570 570,930 930,1200 1200,1560
And if not, then we
如果不是，那么我们可能会倒退一届，但不是所有的任期。

1088
00:33:39,190 --> 00:33:41,050
0,210 210,390 390,630 630,1200 1230,1860
might go back one term,

1089
00:33:41,380 --> 00:33:43,220
0,180 180,450 450,720 720,1350
but not all terms.|
|

1090
00:33:43,340 --> 00:33:44,510
0,240 240,390 390,660 660,900 900,1170
And so we'll send the
因此，我们将发送一个学期的日志条目

1091
00:33:44,510 --> 00:33:46,490
0,270 270,600 600,840 840,1380 1440,1980
log entries for one term|
|

1092
00:33:46,490 --> 00:33:47,270
0,90 90,360 360,570 570,720 720,780
and that might be a
这可能会很多，对吧，

1093
00:33:47,270 --> 00:33:48,560
0,390 420,750 780,1020 1020,1170 1170,1290
lot, right,| that might be
|这可能会很多。

1094
00:33:48,560 --> 00:33:49,130
0,60 60,270 270,360 360,450 450,570
a lot| and we'll see
|我们很快就会看到，比如我们如何绕过这一点，

1095
00:33:49,130 --> 00:33:49,970
0,60 60,90 90,480 480,660 660,840
in a second, like how

1096
00:33:49,970 --> 00:33:52,190
0,90 90,240 240,540 540,780 1500,2220
we get around that,| snapshot
|快照将帮助您了解减少我们必须发送的日志条目的数量。

1097
00:33:52,190 --> 00:33:53,600
0,150 150,270 270,540 720,1170 1170,1410
is going to help {you,know}

1098
00:33:53,600 --> 00:33:55,010
0,570 570,690 690,1050 1050,1140 1140,1410
reducing the number of log

1099
00:33:55,010 --> 00:33:55,880
0,300 300,480 480,630 630,780 780,870
entries, that we have to

1100
00:33:55,880 --> 00:33:56,740
0,420
send.|
|

1101
00:33:59,460 --> 00:34:00,330
0,210 210,300 300,300 300,750 750,870
There was a question do
有一个问题是，您是否需要在实验2c中实施这种版本的优化方案，

1102
00:34:00,330 --> 00:34:01,170
0,120 120,270 270,330 330,720 720,840
you need to implement this

1103
00:34:01,170 --> 00:34:02,670
0,150 150,240 240,1050 1050,1410 1410,1500
sort of {} version of

1104
00:34:02,670 --> 00:34:04,560
0,120 120,840 840,1080 1080,1500 1500,1890
these {optimization -} {scheme,in} lab

1105
00:34:04,560 --> 00:34:05,820
0,210 210,480 480,570 570,750 750,1260
{2c -},| and {the,answer,is} yes.|
|答案是肯定的。|

1106
00:34:06,860 --> 00:34:08,390
0,270 270,480 480,570 570,1230 1320,1530
At least I believe, {}
至少我相信，在没有实现一些优化的情况下，我无法通过测试。

1107
00:34:08,390 --> 00:34:09,290
0,240 240,450 450,570 570,810 810,900
I haven't been able to

1108
00:34:09,290 --> 00:34:10,850
0,240 240,330 330,570 570,1170 1170,1560
pass the test without implementing

1109
00:34:10,850 --> 00:34:12,340
0,240 240,900
some optimization.|
|

1110
00:34:13,970 --> 00:34:15,230
0,240 240,330 330,480 480,600 600,1260
So I have a question,|
所以我有一个问题，|

1111
00:34:15,260 --> 00:34:17,120
0,480 510,690 690,1080 1470,1650 1650,1860
{} so I in my
所以我在我的代码中，

1112
00:34:17,120 --> 00:34:18,980
0,360 360,630 630,870 870,930 930,1860
code,| I did the optimization
|我通过后退到提交来进行优化，

1113
00:34:18,980 --> 00:34:20,960
0,480 510,870 870,1170 1200,1530 1530,1980
by backing off to the

1114
00:34:20,960 --> 00:34:22,850
0,480 690,900 900,960 960,1260 1260,1890
commit,| so I made the
|所以我在回复中包含了上次提交的索引

1115
00:34:23,600 --> 00:34:25,130
0,270 270,480 480,840 840,1320 1320,1530
{} the reply include the

1116
00:34:25,130 --> 00:34:26,570
0,300 300,660 660,1140 1140,1290 1290,1440
last commit index| and then
|然后我从那里开始，

1117
00:34:26,570 --> 00:34:28,260
0,90 90,510 510,690 690,1080
I started from there,|
|

1118
00:34:28,920 --> 00:34:31,020
0,150 150,540 840,1080 1080,1500 1830,2100
is that much worse. {}|
是不是更糟。|

1119
00:34:31,020 --> 00:34:32,370
0,270 270,480 480,720 720,900 900,1350
You might run into trouble|
你可能会遇到麻烦|

1120
00:34:32,370 --> 00:34:35,160
0,360 360,510 510,1440 1620,2190 2220,2790
and so the the test
因此，测试记录了您发送的字节数，

1121
00:34:35,190 --> 00:34:36,450
0,300 300,720 720,870 870,1050 1050,1260
keep track of how many

1122
00:34:36,450 --> 00:34:37,880
0,300 300,450 450,960
bytes you sent,|
|

1123
00:34:37,880 --> 00:34:39,200
0,120 120,270 270,450 450,1050 1050,1320
and gives {you,a} budget| and
并给你一个预算|如果你想把预算翻得太多，

1124
00:34:39,200 --> 00:34:41,660
0,120 120,450 450,1440 1530,2160 2160,2460
if you're like go across

1125
00:34:41,660 --> 00:34:43,370
0,90 90,450 450,570 570,1380 1470,1710
the budget you know by

1126
00:34:43,370 --> 00:34:45,830
0,180 180,720 990,1740 1740,2160 2160,2460
too much,| then the testing
|然后测试就会说，

1127
00:34:45,830 --> 00:34:46,850
0,90 90,330 330,720 720,840 840,1020
will say,| well, you're just
|嗯，你只是发送了太多数据，

1128
00:34:46,850 --> 00:34:48,900
0,180 180,300 300,750 840,1530
sending too much data,|
|

1129
00:34:50,800 --> 00:34:52,150
0,480 480,780 780,1080 1080,1170 1170,1350
because your scheme it might
因为你的计划可能是这样的，

1130
00:34:52,150 --> 00:34:52,840
0,60 60,150 150,390 390,540 540,690
be the case,| that I
|我认为你会发送比实际需要更多的数据，

1131
00:34:52,840 --> 00:34:53,770
0,210 210,390 390,540 540,750 750,930
think you will send more

1132
00:34:53,770 --> 00:34:55,720
0,270 270,540 540,750 750,1410
data than really necessary,|
|

1133
00:34:55,750 --> 00:34:57,980
0,540 540,1050 1050,1380 1380,1650
whatever necessary means, but.|
任何必要的手段，但是。|

1134
00:35:00,990 --> 00:35:01,890
0,180 180,330 330,390 390,780 780,900
There is a question in
聊天中有一个问题。

1135
00:35:01,890 --> 00:35:04,650
0,570 900,1860 1860,1950 2460,2700 2700,2760
chat.| Yeah, and did I
|是啊，我是不是说画错东西了，

1136
00:35:04,650 --> 00:35:05,940
0,510 510,720 720,840 840,1050 1050,1290
said draw the wrong thing,|
|

1137
00:35:05,940 --> 00:35:07,440
0,540 540,810 810,1020 1020,1230 1230,1500
yeah 6 6 6 6
是的，对不起，谢谢你，

1138
00:35:07,440 --> 00:35:08,500
0,510
sorry,

1139
00:35:08,530 --> 00:35:09,700
0,300 300,630
thank you,|
|

1140
00:35:10,490 --> 00:35:13,310
0,720 720,1320 1350,1890 2520,2640 2640,2820
6 6 6, I don't
我不想让追随者凌驾于领袖的日志条目之上，

1141
00:35:13,310 --> 00:35:15,080
0,120 120,180 180,480 480,1050 1200,1770
want to {follower -} overriding

1142
00:35:15,080 --> 00:35:18,080
0,120 120,630
the leader's

1143
00:35:18,230 --> 00:35:19,970
0,300 300,690 990,1290 1290,1410 1410,1740
log entries,| sorry about that,
|抱歉，接得好。

1144
00:35:20,540 --> 00:35:21,780
0,300 300,690
good catch.|
|

1145
00:35:24,880 --> 00:35:26,160
0,180 180,750
Any questions?|
有什么问题吗？|

1146
00:35:32,510 --> 00:35:33,680
0,600
Okay.|
好吧。|

1147
00:35:33,770 --> 00:35:35,060
0,750

1148
00:35:40,300 --> 00:35:42,040
0,300 300,1050 1080,1260 1260,1440 1440,1740
Okay, so let me talk
好的，那么让我来谈一谈坚持，

1149
00:35:42,040 --> 00:35:43,120
0,30 30,180 180,360 360,630 630,1080
a little bit about the

1150
00:35:43,150 --> 00:35:46,450
0,750 2220,2400 2400,2670 2670,2940 2940,3300
persistence,| we have one question
|我们在聊天中有一个问题，首先。

1151
00:35:46,450 --> 00:35:48,700
0,90 90,210 210,630 630,1140 1560,2250
in the chat, first.| Okay.|
|好吧。|

1152
00:35:48,700 --> 00:35:50,100
0,90 90,840
They're wondering
他们想知道为什么拒绝必须将被拒绝的术语号和索引一起发回。

1153
00:35:50,130 --> 00:35:51,540
0,420 420,510 510,630 630,1200 1200,1410
why does the {rejection,has,to -}

1154
00:35:51,540 --> 00:35:53,220
0,390 390,660 660,750 750,1380 1380,1680
send back the rejected term

1155
00:35:53,220 --> 00:35:54,300
0,450 450,630 630,840 840,960 960,1080
number as well as the

1156
00:35:54,300 --> 00:35:55,560
0,780
index.|
|

1157
00:35:55,850 --> 00:35:57,620
0,1200

1158
00:35:58,640 --> 00:36:00,530
0,690 690,1140 1140,1290 1290,1650 1650,1890
{} Well, that depends very
嗯，这在很大程度上取决于你实际如何实现，

1159
00:36:00,530 --> 00:36:01,880
0,210 210,390 390,480 480,810 810,1350
much how you actually implement

1160
00:36:01,940 --> 00:36:03,380
0,660 660,900 900,1170 1170,1350 1350,1440
the,| how what kind of
|你对领导人保持什么样的状态

1161
00:36:03,380 --> 00:36:05,330
0,330 330,450 450,1140 1140,1560 1560,1950
state you maintain on the

1162
00:36:05,360 --> 00:36:06,650
0,450 450,720 720,900 900,1020 1020,1290
leader| and how the leader
|以及领导人是如何决定退缩的，

1163
00:36:06,650 --> 00:36:08,460
0,510 510,630 630,960 960,1350
decides to back off,|
|

1164
00:36:08,730 --> 00:36:10,180
0,900

1165
00:36:10,180 --> 00:36:11,170
0,120 120,330 330,570 570,660 660,990
do you need to know
你需要知道寄回一些条款吗，

1166
00:36:11,170 --> 00:36:13,000
0,360 360,630 630,1230 1260,1620 1620,1830
send some terms back,| because
|因为您需要一个[]响应延迟很长一段时间，

1167
00:36:13,000 --> 00:36:14,560
0,150 150,420 420,510 510,1080 1290,1560
you need a [] in

1168
00:36:14,560 --> 00:36:15,790
0,420 420,630 630,1080 1080,1170 1170,1230
response get delayed for a

1169
00:36:15,790 --> 00:36:17,440
0,210 210,450 450,510 510,960 1380,1650
long period of time, {}|
|

1170
00:36:17,440 --> 00:36:18,760
0,120 120,420 420,630 630,1200 1200,1320
you certainly should reject you
你当然应该拒绝你所知道的、完全不再相关的信息。

1171
00:36:18,760 --> 00:36:20,440
0,630 630,1140 1140,1260 1260,1560 1560,1680
know information from terms that

1172
00:36:20,440 --> 00:36:22,060
0,120 120,600 600,750 750,1140 1140,1620
are completely not relevant anymore.|
|

1173
00:36:22,860 --> 00:36:24,860
0,1410

1174
00:36:25,410 --> 00:36:26,550
0,270 270,450 450,630 630,690 690,1140
I know this is slightly
我知道这个回答有点含糊，

1175
00:36:26,550 --> 00:36:28,260
0,270 270,690 690,810 810,1440 1440,1710
vague answer,| but it's really
|但它实际上在很大程度上取决于您具体如何实现它。

1176
00:36:28,260 --> 00:36:29,460
0,210 210,420 420,780 780,840 840,1200
very much dependent on exactly

1177
00:36:29,460 --> 00:36:30,920
0,150 150,270 270,660 660,870
how you implement it.|
|

1178
00:36:37,480 --> 00:36:40,780
0,510 540,1380 1710,2460
Okay, {} persistence,|
好吧，坚持不懈，|

1179
00:36:45,970 --> 00:36:47,170
0,270 270,510 510,810 810,870 870,1200
we talked about the persistence
我们谈了一点坚持不懈的精神，

1180
00:36:47,170 --> 00:36:49,340
0,60 60,240 240,570 630,1620
a little bit, {}|
|

1181
00:36:49,370 --> 00:36:51,050
0,270 270,810 840,1230 1230,1470 1470,1680
{} in last raft of,
在最后一排，第一排课上，

1182
00:36:51,050 --> 00:36:52,430
0,60 60,300 300,570 570,900 900,1380
the first raft lecture,| where
|你知道我们注意到你知道

1183
00:36:52,430 --> 00:36:54,560
0,120 120,240 240,930 1110,1830 1830,2130
you know we noted that

1184
00:36:54,560 --> 00:36:56,150
0,60 60,240 240,780 810,1230 1230,1590
you know the| and follower
|而追随者每学期只能投票给一名候选人

1185
00:36:56,150 --> 00:36:57,890
0,150 150,840 960,1410 1410,1500 1500,1740
can only vote for one

1186
00:36:57,890 --> 00:37:00,020
0,630 900,990 990,1440 1440,1590 1590,2130
candidate per term| and therefore
|因此，它需要记住投票给了谁

1187
00:37:00,020 --> 00:37:01,370
0,120 120,270 270,360 360,1050 1140,1350
it needs to remember {}

1188
00:37:01,370 --> 00:37:03,410
0,540 930,1200 1200,1500 1500,1800 1800,2040
it's {} who'd voted for|
|

1189
00:37:03,410 --> 00:37:04,250
0,90 90,240 240,510 510,570 570,840
and what actually the current
而目前的术语实际上是什么，

1190
00:37:04,250 --> 00:37:05,220
0,270 270,600
term is,|
|

1191
00:37:05,590 --> 00:37:07,540
0,450 510,840 840,1320 1320,1530 1530,1950
{} but there's a larger
但关于坚持不懈还有一个更大的问题

1192
00:37:07,540 --> 00:37:12,520
0,720 840,2910 3030,3990 4200,4890 4890,4980
issue around persistence| and that
|其中一个问题提到了这一点，

1193
00:37:12,520 --> 00:37:13,240
0,180 180,300 300,420 420,630 630,720
came up in one of

1194
00:37:13,240 --> 00:37:14,710
0,480 510,1020 1020,1230 1230,1320 1320,1470
the questions,| one of you
|你们中的一个刚刚问到，

1195
00:37:14,710 --> 00:37:16,720
0,180 180,510 510,690 690,990 1350,2010
just asked,| which is, {}
|也就是说，你知道重启后会发生什么。

1196
00:37:16,720 --> 00:37:17,470
0,120 120,180 180,360 360,630 630,750
you know what happens on

1197
00:37:17,470 --> 00:37:18,520
0,540
reboot.|
|

1198
00:37:21,640 --> 00:37:23,200
0,240 240,360 360,480 480,570 570,1560
And there's sort of two
你可以想到两种可能的策略，

1199
00:37:23,230 --> 00:37:24,460
0,450 450,840 840,930 930,1020 1020,1230
possible strategy you can think

1200
00:37:24,460 --> 00:37:26,710
0,180 210,630 630,1050 1050,1860 1860,2250
of,| like one strategy is,|
|就像一种策略是，|

1201
00:37:30,470 --> 00:37:32,120
0,270 270,600 600,750 750,1110 1110,1650
what strategy {1 -} is,|
策略1是什么，|

1202
00:37:32,790 --> 00:37:34,380
0,270 270,360 360,900 900,1020 1020,1590
you know basically the node
你知道，基本上节点是新鲜连接在一起的，

1203
00:37:34,620 --> 00:37:36,930
0,780 780,1410 1440,1650 1650,1710 1710,2310
{} joins sort of freshly,|
|

1204
00:37:37,830 --> 00:37:39,580
0,450 450,1020
so joins
因此，当一个节点崩溃并重新启动时，基本上可以加入，

1205
00:37:39,900 --> 00:37:42,900
0,540 540,780 780,900 900,1620 1890,3000
basically when a node crashes

1206
00:37:43,200 --> 00:37:44,640
0,240 240,450 450,690 690,1110 1260,1440
and comes back up, {}|
|

1207
00:37:44,640 --> 00:37:46,080
0,180 180,330 330,540 540,1170 1170,1440
it just doesn't participate anymore,|
它只是不再参与了，|

1208
00:37:46,080 --> 00:37:47,430
0,90 90,240 240,420 420,1230 1260,1350
it has to rejoin you
它必须重新加入你知道的，

1209
00:37:47,430 --> 00:37:48,880
0,150 150,900
know the,|
|

1210
00:37:49,880 --> 00:37:52,220
0,540 540,630 630,1170 1200,1770
rejoin the raft cluster,|
重新加入RAFT集群，|

1211
00:37:52,410 --> 00:37:54,480
0,630 870,1230 1230,1620 1620,1710 1710,2070
and that means you know
这意味着你知道当你重新加入的时候，你应该重放日志，

1212
00:37:54,570 --> 00:37:56,220
0,600 600,1080 1080,1320 1320,1500 1500,1650
when rejoins you should you

1213
00:37:56,220 --> 00:37:58,220
0,270 270,630 630,1440
have to replay

1214
00:37:58,250 --> 00:37:59,930
0,420 420,570 570,990 1020,1320 1320,1680
{} the log,| where basically
|在那里基本上必须接收日志中的每个条目

1215
00:37:59,930 --> 00:38:01,430
0,240 240,330 330,840 840,1170 1170,1500
has to receive every entry

1216
00:38:01,430 --> 00:38:03,080
0,90 90,150 150,750 870,1110 1110,1650
in the log| and then
|然后重播。

1217
00:38:04,000 --> 00:38:05,460
0,120 120,570 570,900
{} replay that.|
|

1218
00:38:05,680 --> 00:38:06,490
0,150 150,210 210,510 510,600 600,810
And of course you know
当然，你也知道，如果一个节点出现故障，

1219
00:38:06,490 --> 00:38:09,310
0,210 210,750 1110,1290 1290,1920 1950,2820
like if a node has

1220
00:38:09,310 --> 00:38:11,200
0,450 450,840 840,990 990,1260 1470,1890
been down,| for a node
|因为一个节点崩溃一天或两天

1221
00:38:11,200 --> 00:38:12,550
0,660 660,930 930,1050 1050,1110 1110,1350
crashes down for a day

1222
00:38:12,550 --> 00:38:14,110
0,120 120,240 240,720 720,1200 1230,1560
or two days| or even
|或者即使它只是下降了一秒钟，

1223
00:38:14,110 --> 00:38:14,980
0,120 120,240 240,450 450,630 630,870
if it just goes down

1224
00:38:14,980 --> 00:38:16,300
0,150 150,210 210,750
for a second,|
|

1225
00:38:16,300 --> 00:38:17,410
0,210 210,570 570,660 660,780 780,1110
{} but you know the
但你知道这个系统已经启动一年了，

1226
00:38:17,410 --> 00:38:18,400
0,330 330,450 450,600 600,810 810,990
system has been up for

1227
00:38:18,400 --> 00:38:19,960
0,60 60,510 600,870 870,1110 1110,1560
a year,| that number means
|该数字意味着您必须重放大量日志条目，

1228
00:38:19,960 --> 00:38:20,980
0,120 120,270 270,450 450,870 870,1020
you have to replay a

1229
00:38:20,980 --> 00:38:22,540
0,240 240,330 330,600 600,1170 1380,1560
lot of log entries,| so
|所以有一点令人讨厌。

1230
00:38:22,540 --> 00:38:23,650
0,180 180,240 240,390 390,510 510,1110
there's a little bit annoying.|
|

1231
00:38:23,650 --> 00:38:25,540
0,360 360,630 630,900 900,1470 1470,1890
And so people prefer that
因此，人们更喜欢策略2，即，

1232
00:38:25,810 --> 00:38:28,380
0,570 570,1140 1230,1590 1590,2070
strategy 2 which is,|
|

1233
00:38:28,960 --> 00:38:29,680
0,90 90,180 180,360 360,450 450,720
you know you can back
你知道你可以后退，

1234
00:38:29,680 --> 00:38:30,800
0,540
up,|
|

1235
00:38:31,820 --> 00:38:33,620
0,540 540,720 720,900 900,1320 1320,1800
and you just basically participate
你基本上可以再次参与其中，

1236
00:38:33,620 --> 00:38:34,560
0,390
again,|
|

1237
00:38:35,070 --> 00:38:36,390
0,330 330,600 600,780 780,1080 1080,1320
{} so you catch up
所以你基本上是从你的持续状态开始追赶，

1238
00:38:36,390 --> 00:38:38,490
0,510 690,1500 1500,1560 1560,1890 1890,2100
from basically you start from

1239
00:38:38,490 --> 00:38:40,520
0,390 450,930 930,1350
your persistent state,|
|

1240
00:38:49,460 --> 00:38:51,500
0,570 900,1170 1170,1350 1350,1710 1710,2040
{ -} the idea being
我的想法是，你知道这只是一次快速重启

1241
00:38:51,500 --> 00:38:52,400
0,180 180,240 240,600 600,750 750,900
that you know it's just

1242
00:38:52,400 --> 00:38:53,960
0,60 60,330 330,900 930,1230 1230,1560
a quick reboot| you crash
|你崩溃了，你可以备份任何快速的网络故障，

1243
00:38:53,960 --> 00:38:55,310
0,90 90,210 210,420 420,510 510,1350
you can back up whatever

1244
00:38:55,340 --> 00:38:57,350
0,330 330,660 660,1260 1500,1800 1800,2010
quick network failure,| {} and
|因此，也许你知道剩下的可以继续前进一届，

1245
00:38:57,350 --> 00:38:58,400
0,120 120,570 570,720 720,870 870,1050
so maybe you know the

1246
00:38:58,400 --> 00:38:59,900
0,330 330,480 480,930 930,1200 1200,1500
rest can move one term

1247
00:38:59,900 --> 00:39:02,180
0,630 810,1350 1350,1770 1770,2010 2010,2280
along,| you basically have all
|你基本上拥有所有的州

1248
00:39:02,180 --> 00:39:03,980
0,90 90,660 810,1440 1440,1620 1620,1800
the state| and you should
|你应该被用来快速追赶。

1249
00:39:03,980 --> 00:39:05,570
0,60 60,270 270,360 360,720 720,1590
be used for quick {catch,up}.|
|

1250
00:39:06,070 --> 00:39:07,000
0,180 180,330 330,420 420,600 600,930
So then, the real question
所以，真正的问题是，

1251
00:39:07,000 --> 00:39:08,380
0,120 120,510 510,810 810,900 900,1380
is,| what needs to be
|需要处于什么状态需要在重新启动后保持什么状态。

1252
00:39:08,530 --> 00:39:09,460
0,150 150,360 360,630 630,840 840,930
at what state needs to

1253
00:39:09,460 --> 00:39:12,480
0,240 240,960 1110,1920 1920,2520
be persisted across reboots.|
|

1254
00:39:12,870 --> 00:39:14,340
0,510 540,840 840,1110 1110,1200 1200,1470
{} {You,know} where he talked
你知道他在哪里谈到了投票，

1255
00:39:14,340 --> 00:39:16,170
0,210 210,480 480,990 1350,1620 1620,1830
about voting for,| that needs
|这需要持之以恒，

1256
00:39:16,170 --> 00:39:17,800
0,60 60,360 360,1110
to be persistent,|
|

1257
00:39:19,510 --> 00:39:21,010
0,450 450,630 630,720 720,960 960,1500
because you are not allowed
因为你不能在同一任期内投票给另一位候选人，

1258
00:39:21,220 --> 00:39:23,440
0,120 120,450 450,750 750,1290 1680,2220
to vote for another {}

1259
00:39:23,440 --> 00:39:25,510
0,720 720,1110 1110,1170 1170,1560 1560,2070
candidate in the same term,|
|

1260
00:39:26,260 --> 00:39:28,450
0,540 720,1320 1320,1530 1530,1710 1710,2190
{} and but the raft
但木筏包含了更多的信息

1261
00:39:28,450 --> 00:39:29,380
0,300 300,360 360,570 570,720 720,930
contains a little bit more

1262
00:39:29,380 --> 00:39:31,960
0,690 810,960 960,1230 1230,2040 2340,2580
information| and also maintains the
|并且还将日志保持在磁盘上或处于持久状态，

1263
00:39:31,960 --> 00:39:34,090
0,660 720,1140 1140,1650 1800,2040 2040,2130
log on disk or in

1264
00:39:34,090 --> 00:39:35,560
0,450 450,930
persistent state,|
|

1265
00:39:35,560 --> 00:39:37,630
0,840 870,1110 1110,1230 1230,1470 1470,2070
and {} the current term.|
和当前的任期。|

1266
00:39:42,820 --> 00:39:43,690
0,360 360,480 480,570 570,750 750,870
And for each one we
对于每一次，我们都应该问自己这个问题，

1267
00:39:43,690 --> 00:39:45,460
0,360 360,660 660,1050 1050,1110 1110,1770
should ask ourselves the question,|
|

1268
00:39:45,670 --> 00:39:47,180
0,930

1269
00:39:47,210 --> 00:39:49,730
0,960 960,1560 1590,1800 1800,2160 2160,2520
why maintain a persistent state,|
为什么要保持一种持久的状态，|

1270
00:39:49,730 --> 00:39:51,770
0,270 270,660 660,990 990,1380 1530,2040
because it means that whenever
因为这意味着每当我们更新状态时，

1271
00:39:51,770 --> 00:39:53,960
0,180 180,660 660,870 870,1320 1320,2190
we update that state,| whenever
|每当我们将条目附加到日志时，

1272
00:39:53,960 --> 00:39:55,220
0,240 240,660 660,750 750,1110 1110,1260
we append an entry to

1273
00:39:55,220 --> 00:39:57,380
0,90 90,630 720,1350 1350,1710 1710,2160
the log,| whenever we increment
|每当我们递增术语时

1274
00:39:57,380 --> 00:39:59,990
0,60 60,690 900,1500 1500,2190 2190,2610
the term| or whenever we
|或者每当我们向前改变的时候，

1275
00:39:59,990 --> 00:40:01,280
0,240 240,690 690,810 810,1170 1170,1290
change forward,| we actually have
|我们实际上必须写入磁盘或稳定存储

1276
00:40:01,280 --> 00:40:02,870
0,90 90,300 300,360 360,870 1290,1590
to write to disk or

1277
00:40:02,870 --> 00:40:04,160
0,120 120,480 480,900 900,1020 1020,1290
to stable storage| and stable
|而且稳定的存储成本也很高

1278
00:40:04,160 --> 00:40:06,230
0,360 360,480 480,1260 1440,1590 1590,2070
storage is expensive| and so,
|因此，很可能在这个例子中，写入或稳定存储可能会成为瓶颈。

1279
00:40:06,410 --> 00:40:07,760
0,240 240,420 420,660 660,1170 1170,1350
{} it's very likely the

1280
00:40:07,760 --> 00:40:11,180
0,870 870,1500 1650,2250 2490,3150 3150,3420
example, the the writing or

1281
00:40:11,180 --> 00:40:12,260
0,150 150,420 420,780 780,900 900,1080
to stable storage could be

1282
00:40:12,260 --> 00:40:14,120
0,390 720,1080 1080,1290 1290,1380 1380,1860
the could become a bottleneck.|
|

1283
00:40:15,800 --> 00:40:16,730
0,330 330,510 510,630 630,810 810,930
So we're only talking about
所以我们说的只是投票给，

1284
00:40:16,730 --> 00:40:18,200
0,450 450,540 540,600 600,990 990,1470
votedFor,| so I'm going [],|
|所以我要去[]，|

1285
00:40:18,200 --> 00:40:19,370
0,240 270,750 750,930 930,1080 1080,1170
but let's talk about the
但让我们来谈谈原木，

1286
00:40:19,370 --> 00:40:20,810
0,450 450,900 900,1080 1080,1170 1170,1440
log,| why does the log
|为什么必须将日志写入永久存储，

1287
00:40:20,810 --> 00:40:21,620
0,150 150,240 240,420 420,660 660,810
have to be written to

1288
00:40:21,620 --> 00:40:23,180
0,420 420,1080
persistent storage,|
|

1289
00:40:24,580 --> 00:40:26,320
0,240 240,390 390,1200
can we reintegrate.|
我们能不能重新整合。|

1290
00:40:38,760 --> 00:40:39,480
0,240 240,360 360,450 450,690 690,720
Another way, you've got a
从另一方面来说，你有一个问题，

1291
00:40:39,480 --> 00:40:40,650
0,330 330,510 510,690 690,930 930,1170
question,| let's say we don't
|假设我们不尝试使用稳定的存储，

1292
00:40:40,650 --> 00:40:41,610
0,180 180,300 300,420 420,660 660,960
try to use stable storage,|
|

1293
00:40:41,610 --> 00:40:42,960
0,180 180,300 300,810
what would break.|
什么会打破。|

1294
00:40:55,300 --> 00:40:57,820
0,990 990,1140 1140,1350 1350,1530 1530,2520
Yeah, there's someone in the
是的，聊天室里有人可以回答这个问题，

1295
00:40:57,940 --> 00:40:58,960
0,60 60,300 300,570 570,690 690,1020
chat to answer this question,|
|

1296
00:40:58,960 --> 00:40:59,800
0,210 210,420 420,510 510,780 780,840
which you could lose the
这可能会在提交写入条目上失去大部分，对吧。

1297
00:40:59,800 --> 00:41:00,850
0,360 360,450 450,510 510,810 810,1050
majority on the commit write

1298
00:41:00,850 --> 00:41:02,300
0,480 510,900
entries, right.|
|

1299
00:41:02,420 --> 00:41:05,030
0,510 540,960 960,1020 1020,1740 1980,2610
So here's the scenario, {}|
所以这是一个场景，|

1300
00:41:05,060 --> 00:41:06,820
0,570 570,1170
we're, the
我们是，木筏复制，在大多数节点上的操作，

1301
00:41:06,820 --> 00:41:09,140
0,480 480,1050 1050,1740
raft replicated, the

1302
00:41:09,230 --> 00:41:11,600
0,960 960,1620 1650,1830 1830,2310 2310,2370
operation on a majority of

1303
00:41:11,600 --> 00:41:12,720
0,90 90,630
the nodes,|
|

1304
00:41:12,780 --> 00:41:14,520
0,420 420,690 690,1440 1440,1560 1560,1740
{} so somebody you know
所以有些人，你知道的大多数节点，它实际上是提交的

1305
00:41:14,550 --> 00:41:16,350
0,420 420,600 600,720 720,1140 1170,1800
majority nodes it's actually {}

1306
00:41:16,380 --> 00:41:19,020
0,600 630,810 810,1350 1350,1890 1920,2640
committed| to actually {} delivering
|到实际递送已经接受该日志条目的递送，

1307
00:41:19,770 --> 00:41:22,050
0,330 330,750 750,1050 1050,1530 1530,2280
have delivered having accepted that

1308
00:41:22,080 --> 00:41:23,540
0,420 420,840
log entry,|
|

1309
00:41:23,570 --> 00:41:25,820
0,300 300,660 660,1200 1230,1890 1920,2250
so the leader {} sees
所以领导者看到了承诺，

1310
00:41:25,820 --> 00:41:28,010
0,120 120,810 1020,1470 1470,1740 1740,2190
the commits,| it {} delivers
|当它们在所申请的通道上操作时将消息传递给服务器，

1311
00:41:28,010 --> 00:41:29,180
0,90 90,420 420,570 570,660 660,1170
the message when their operation

1312
00:41:29,180 --> 00:41:30,170
0,150 150,240 240,570 570,870 870,990
on the applied channel to

1313
00:41:30,170 --> 00:41:32,600
0,90 90,660 840,1560 1560,2340 2340,2430
the servers,| servers executes the
|服务器执行该操作

1314
00:41:32,600 --> 00:41:34,340
0,720 870,1110 1110,1320 1320,1410 1410,1740
operation| and lets the client
|并让客户端知道操作已成功。

1315
00:41:34,340 --> 00:41:36,020
0,330 330,450 450,870 870,1020 1020,1680
know the operation has succeeded.|
|

1316
00:41:37,550 --> 00:41:39,860
0,450 480,960 960,1170 1170,1620 1620,2310
So now {you,know} basically exposed
所以现在你知道，基本上暴露了一个事实，

1317
00:41:39,860 --> 00:41:40,700
0,60 60,390 390,510 510,570 570,840
the fact,| that the actually
|实际操作实际上是将大多数节点复制到客户端。

1318
00:41:40,700 --> 00:41:43,250
0,810 810,1110 1110,1620 1620,2040 2070,2550
operation was actually {} replicated

1319
00:41:43,250 --> 00:41:44,120
0,60 60,390 390,450 450,780 780,870
the majority of nodes to

1320
00:41:44,120 --> 00:41:45,240
0,90 90,600
the client.|
|

1321
00:41:45,390 --> 00:41:47,220
0,270 270,810 870,1140 1140,1320 1320,1830
And so if we're not,|
所以如果我们不是，|

1322
00:41:47,220 --> 00:41:48,780
0,240 240,360 360,1050 1050,1290 1290,1560
if the followers that actually
如果实际收到该条目的追随者，

1323
00:41:48,780 --> 00:41:50,310
0,570 570,780 780,1110 1110,1320 1320,1530
received that entry,| did not
|我没有把它放到磁盘上

1324
00:41:50,310 --> 00:41:51,270
0,120 120,240 240,540 540,750 750,960
put it on put on

1325
00:41:51,270 --> 00:41:53,880
0,540 780,1410 1410,1950 1950,2400 2400,2610
disk| {} and {} so
|因此，当重新启动时，他们仍然拥有它，

1326
00:41:53,880 --> 00:41:55,290
0,180 180,420 420,870 900,1290 1290,1410
that when the reboot they

1327
00:41:55,290 --> 00:41:56,760
0,270 270,570 570,780 1170,1380 1380,1470
still have it,| {} we
|我们可以碰上这个案子，

1328
00:41:56,760 --> 00:41:57,930
0,120 120,390 390,690 690,780 780,1170
could run into the case,|
|

1329
00:41:57,930 --> 00:41:59,400
0,180 180,930 930,1080 1080,1200 1200,1470
the exactly that's the answer
这就是聊天中的答案，

1330
00:41:59,400 --> 00:42:00,840
0,60 60,150 150,510 510,1080 1080,1440
in the chat,| that we
|我们在承诺进入时失去了大多数人

1331
00:42:00,840 --> 00:42:02,430
0,360 360,450 450,1050 1050,1260 1260,1590
lose the majority on committed

1332
00:42:02,430 --> 00:42:03,720
0,360 360,630 630,810 810,1110 1110,1290
entry| and that entry will
|并且该条目将不会在剩余的副本上传递到服务器

1333
00:42:03,720 --> 00:42:04,890
0,270 270,360 360,780 780,930 930,1170
not be delivered on the

1334
00:42:04,980 --> 00:42:07,620
0,720 720,1170 1170,1380 1650,1980 1980,2640
remaining {replicas -} {} to

1335
00:42:07,620 --> 00:42:08,940
0,210 210,780 780,1110 1110,1230 1230,1320
the servers| and so the
|所以客户会看到一些奇怪的东西，

1336
00:42:08,940 --> 00:42:10,350
0,450 450,540 540,720 720,990 990,1410
client will see something strange,|
|

1337
00:42:10,350 --> 00:42:11,460
0,420 480,660 660,900 900,1020 1020,1110
where it sees that an
在那里，它看到了一个实际上发生在稍晚一点的手术，

1338
00:42:11,460 --> 00:42:12,660
0,420 420,540 540,660 660,930 930,1200
operation that it did actually

1339
00:42:12,660 --> 00:42:14,310
0,360 720,810 810,1020 1020,1140 1140,1650
happen a little bit later,|
|

1340
00:42:14,400 --> 00:42:16,110
0,330 330,510 510,1020 1110,1200 1200,1710
actually goes into the operation
实际进入手术还没有发生。

1341
00:42:16,110 --> 00:42:17,180
0,330 330,720
hasn't happened.|
|

1342
00:42:17,700 --> 00:42:18,450
0,150 150,330 330,420 420,690 690,750
And so it actually is
因此，它实际上很重要，

1343
00:42:18,450 --> 00:42:19,740
0,450 450,600 600,750 750,1080 1080,1290
important,| that this actually isn't
|这实际上不是一个稳定的储藏室，

1344
00:42:19,740 --> 00:42:21,900
0,330 330,780 780,1080 1080,1410 1410,2160
stable storage,| we basically promised
|我们基本上是向领导承诺，

1345
00:42:21,900 --> 00:42:23,980
0,120 120,660 690,930 930,1410
the leader to commit,|
|

1346
00:42:28,490 --> 00:42:29,540
0,180 180,240 240,630 630,870 870,1050
and we cannot back out
我们不能背弃这一承诺。

1347
00:42:29,540 --> 00:42:30,820
0,90 90,240 240,780
of that promise.|
|

1348
00:42:33,420 --> 00:42:34,440
0,540
Okay?|
好吧?|

1349
00:42:34,930 --> 00:42:36,600
0,270 270,630 630,810 810,1170
Any questions about this?|
对此有什么问题吗？|

1350
00:42:43,660 --> 00:42:45,370
0,240 240,330 330,1020 1290,1620 1620,1710
Why do we need to
为什么我们需要记住磁盘上的当前术语，

1351
00:42:45,370 --> 00:42:46,900
0,270 270,330 330,600 600,990 1140,1530
remember the current term for

1352
00:42:46,900 --> 00:42:48,100
0,180 180,480 480,720 720,990 990,1200
on disk,| does it does
|它不需要稳定储存吗？

1353
00:42:48,100 --> 00:42:48,880
0,180 180,300 300,390 390,480 480,780
not need to be stored

1354
00:42:48,880 --> 00:42:49,900
0,480
stably?|
|

1355
00:42:53,020 --> 00:42:55,340
0,300 300,810 810,990 990,1770
{} Well, the term,
嗯，这个术语，你在每一届任期内投票给不同的人，

1356
00:42:55,370 --> 00:42:56,580
0,630
{}

1357
00:42:57,320 --> 00:42:58,310
0,240 240,480 480,600 600,660 660,990
you vote for a different

1358
00:42:58,310 --> 00:42:59,450
0,300 300,450 450,660 660,990 990,1140
person in every term,| so
|所以如果你不记下是哪个学期，

1359
00:42:59,450 --> 00:43:00,410
0,120 120,240 240,570 570,720 720,960
if you don't keep track

1360
00:43:00,410 --> 00:43:01,160
0,60 60,210 210,420 420,510 510,750
of what term it is,|
|

1361
00:43:01,160 --> 00:43:02,720
0,240 240,360 360,630 630,1140 1410,1560
then you don't really, you
那你真的，你真的不知道你投给了谁，对吧。

1362
00:43:02,720 --> 00:43:03,830
0,270 300,720 720,840 840,1020 1020,1110
don't actually know who you

1363
00:43:03,830 --> 00:43:05,660
0,360 360,600 600,930 960,1350 1380,1830
voted for, right.| Yeah, exactly,
|是的，没错，你知道你投的是，

1364
00:43:05,660 --> 00:43:06,860
0,120 120,690 690,780 780,1020 1020,1200
you know you voted for,|
|

1365
00:43:06,860 --> 00:43:08,330
0,180 180,390 390,810 810,1170 1170,1470
that's one problem also current
这是一个问题，目前的条款总是要上升的，

1366
00:43:08,330 --> 00:43:09,380
0,330 330,630 630,810 810,900 900,1050
terms always have to go

1367
00:43:09,380 --> 00:43:11,210
0,300 690,930 930,1320 1320,1470 1470,1830
up,| you cannot go down
|你不能在学期中倒下，

1368
00:43:11,210 --> 00:43:12,830
0,120 120,600 870,1380 1380,1500 1500,1620
in term,| because you're going
|因为您将使用它来检测过时的领导人和过时的候选人的RPC，

1369
00:43:12,830 --> 00:43:14,270
0,60 60,390 390,690 690,840 840,1440
to use that to detect

1370
00:43:14,270 --> 00:43:16,640
0,210 210,570 570,1050 1380,1860 1860,2370
{rpcs -} from stale leaders

1371
00:43:16,640 --> 00:43:18,740
0,180 180,1080 1080,1740
and stale candidates,|
|

1372
00:43:19,790 --> 00:43:20,540
0,180 180,300 300,510 510,660 660,750
but it always has to
但它总是要上涨的。

1373
00:43:20,540 --> 00:43:21,600
0,150 150,480
go up.|
|

1374
00:43:30,690 --> 00:43:31,840
0,630
Okay?|
好吧?|

1375
00:43:34,550 --> 00:43:36,600
0,240 240,570 570,810 810,1560
Any questions about persistence?|
对坚持不懈有什么问题吗？|

1376
00:43:45,360 --> 00:43:51,630
0,3570 4380,4740 4740,5190 5310,5910 5910,6270
Yeah, which is more about
是啊，更重要的是你摆放东西的方式，

1377
00:43:51,630 --> 00:43:52,470
0,90 90,240 240,360 360,600 600,840
the way you laid out

1378
00:43:52,470 --> 00:43:54,090
0,480 480,1020 1050,1230 1230,1410 1410,1620
stuff,| but you say there's
|但你说有两种策略，对吧，

1379
00:43:54,090 --> 00:43:56,670
0,180 180,780 780,1230 1470,1530 1800,2580
two strategies, right,| they need
|他们需要一个日志，并且从持久状态开始。

1380
00:43:56,670 --> 00:43:57,860
0,90 90,750
a log,

1381
00:43:57,990 --> 00:43:59,820
0,570 570,810 810,1290 1290,1590 1590,1830
and {} starting from a

1382
00:43:59,820 --> 00:44:04,080
0,660 660,1440 1890,2850 3360,3570 3570,4260
persistent state.| Yeah, and so
|是的，所以我的意思是你描述的从持续状态开始的方式，

1383
00:44:04,200 --> 00:44:05,850
0,150 150,540 1200,1350 1350,1530 1530,1650
I mean the way you

1384
00:44:05,850 --> 00:44:07,560
0,570 570,930 930,1080 1080,1200 1200,1710
describe starting from a persistent

1385
00:44:07,560 --> 00:44:08,740
0,690
state,|
|

1386
00:44:08,770 --> 00:44:10,040
0,750

1387
00:44:11,030 --> 00:44:12,700
0,150 150,480 510,1050
do you like,
你喜欢，你是不是在重播，

1388
00:44:13,440 --> 00:44:15,120
0,150 150,540 540,1230
do you are

1389
00:44:15,730 --> 00:44:17,920
0,960 990,1590
replay like,|
|

1390
00:44:18,600 --> 00:44:20,400
0,810 840,1050 1050,1350 1350,1500 1500,1800
like I guess it doesn't
就像我猜这张幻灯片上没有说的那样，

1391
00:44:20,400 --> 00:44:21,540
0,180 180,270 270,420 420,870 870,1140
say in this slide,| like
|比如，如果你有，那么假设你也有一个明显的快照。

1392
00:44:21,540 --> 00:44:23,130
0,270 270,480 480,810 990,1440 1440,1590
if you have does that

1393
00:44:23,130 --> 00:44:24,990
0,420 420,630 630,930 930,1170 1170,1860
assume you also have like

1394
00:44:25,020 --> 00:44:28,100
0,420 720,1740 1800,2070 2070,2550
a snapshot of {}

1395
00:44:28,100 --> 00:44:30,050
0,600 1080,1200 1200,1350 1350,1770 1770,1950
obviously.| I have not talked
|我还没有讨论过快照，

1396
00:44:30,050 --> 00:44:31,280
0,210 210,630 630,750 750,930 930,1230
about snapshots at all yet,|
|

1397
00:44:31,310 --> 00:44:32,180
0,210 210,360 360,570 570,780 780,870
which we'll talk about in
我们稍后会讨论这一点，

1398
00:44:32,180 --> 00:44:33,470
0,30 30,480 510,720 720,1230 1230,1290
a second,| it's actually the
|这实际上是下一个话题。

1399
00:44:33,470 --> 00:44:35,080
0,420 450,1080
next topic.|
|

1400
00:44:35,080 --> 00:44:36,700
0,270 270,750 750,960 960,1260 1260,1620
Okay, but.| The point is,
好吧，但是。|重点是，好的，节点崩溃后的两种策略，

1401
00:44:36,820 --> 00:44:38,680
0,360 390,510 510,720 720,1260 1260,1860
okay, the two strategys after

1402
00:44:38,680 --> 00:44:40,390
0,150 150,540 540,1140 1170,1500 1500,1710
a node crashes,| there's two
|有两种方法可以治疗那个结节，

1403
00:44:40,390 --> 00:44:41,830
0,360 360,570 570,900 900,1080 1080,1440
ways to treat that node,|
|

1404
00:44:41,920 --> 00:44:42,940
0,300 300,450 450,480 480,840 840,1020
one has a complete new
一个人有一个全新的节点，它在系统中从未存在过

1405
00:44:42,940 --> 00:44:44,380
0,480 510,690 690,930 930,1350 1350,1440
node, that never existed in

1406
00:44:44,380 --> 00:44:46,330
0,60 60,600 750,1320 1710,1860 1860,1950
the system ever| and so
|因此，当它出现时，您知道您已添加到集群中

1407
00:44:46,330 --> 00:44:48,040
0,120 120,180 180,390 390,720 720,1710
when it comes up {you,know}

1408
00:44:48,040 --> 00:44:49,450
0,420 420,780 780,870 870,930 930,1410
you added to the cluster|
|

1409
00:44:49,450 --> 00:44:50,290
0,330 330,480 480,600 600,720 720,840
as if it's a new
就像它是一个新节点一样，

1410
00:44:50,290 --> 00:44:51,520
0,300 300,450 450,780 780,870 870,1230
node,| so basically the cluster
|所以基本上星系团是从，

1411
00:44:51,520 --> 00:44:52,640
0,270 270,690
goes from,|
|

1412
00:44:52,830 --> 00:44:54,210
0,150 150,480 810,1170 1170,1320 1320,1380
you know, let's say you
你知道吗，假设你一开始有七个节点，

1413
00:44:54,210 --> 00:44:55,590
0,240 240,330 330,600 600,1110 1140,1380
started with seven nodes,| one
|一个人崩溃了，集群有六个节点，

1414
00:44:55,590 --> 00:44:56,790
0,180 180,690 690,780 780,1080 1080,1200
guy crashes, the cluster has

1415
00:44:56,790 --> 00:44:58,530
0,270 270,900 1050,1200 1200,1380 1380,1740
six nodes,| it just happily
|它只是快乐地继续进行，

1416
00:44:58,530 --> 00:44:59,730
0,570 570,660 660,780 780,1140 1140,1200
proceed,| you know, whatever the
|你知道，无论其他节点做他们的应用程序和所有类似的事情

1417
00:44:59,730 --> 00:45:01,380
0,180 180,480 480,570 570,750 750,1650
other nodes do their application

1418
00:45:01,380 --> 00:45:02,010
0,210 210,330 330,420 420,570 570,630
and all that kind of

1419
00:45:02,010 --> 00:45:04,260
0,420 570,780 780,1290 1410,1920 1920,2250
stuff| and then the second
|然后第二个节点实际上会重新启动。

1420
00:45:04,260 --> 00:45:05,850
0,330 330,840 840,1050 1050,1290 1290,1590
node actually comes back up.|
|

1421
00:45:06,360 --> 00:45:07,710
0,390 390,540 540,720 720,870 870,1350
And so there's two ways
所以你知道有两种方式可以加入，

1422
00:45:07,710 --> 00:45:09,570
0,180 180,630 660,1050 1050,1560 1560,1860
you know then join,| one
|一种方式是说，嗯，我只是忘记了我所做的一切，

1423
00:45:09,570 --> 00:45:10,380
0,180 180,270 270,360 360,540 540,810
way is to say like

1424
00:45:10,380 --> 00:45:11,610
0,360 390,540 540,690 690,960 960,1230
well I just forget everything

1425
00:45:11,610 --> 00:45:14,250
0,90 90,360 360,810 990,2400 2400,2640
I did ever,| I'll join
|我会再次加入集群

1426
00:45:14,250 --> 00:45:15,390
0,90 90,420 420,780 780,1050 1050,1140
the cluster again| and the
|其他六个节点将使我了解最新情况

1427
00:45:15,390 --> 00:45:16,350
0,180 180,420 420,630 630,750 750,960
other six nodes will bring

1428
00:45:16,350 --> 00:45:17,220
0,90 90,210 210,270 270,600 720,870
me up to date| and
|他们会把日志发给我，我会重做手术，

1429
00:45:17,220 --> 00:45:18,210
0,270 270,480 480,570 570,900 900,990
they'll send the log to

1430
00:45:18,210 --> 00:45:20,280
0,360 360,540 540,930 930,1350 1350,2070
me and I'll redo operations,|
|

1431
00:45:21,700 --> 00:45:23,170
0,510 510,720 720,810 810,900 900,1470
and that can be costly,
这可能代价高昂，即使使用快照也是如此。

1432
00:45:23,230 --> 00:45:24,840
0,300 300,420 420,1080
even with snapshots.|
|

1433
00:45:25,080 --> 00:45:26,730
0,480 630,780 780,1080 1080,1560 1560,1650
So the second strategy is
所以第二种策略是说，

1434
00:45:26,730 --> 00:45:28,020
0,120 120,330 330,690 1050,1200 1200,1290
to say,| well you know
|你知道，如果相同的节点7再次恢复，

1435
00:45:28,020 --> 00:45:29,340
0,330 330,450 450,780 780,1050 1050,1320
if the same node seven

1436
00:45:29,340 --> 00:45:30,720
0,180 180,420 420,570 570,990 1200,1380
comes back up again,| it
|它试图用它所拥有的持久状态重新融入它的状态，

1437
00:45:30,720 --> 00:45:32,610
0,240 240,330 330,1170 1200,1470 1470,1890
tries to reintegrate with its

1438
00:45:32,610 --> 00:45:34,230
0,510 510,720 720,1230 1230,1530 1530,1620
with its persistent state that

1439
00:45:34,230 --> 00:45:35,300
0,120 120,630
it has,|
|

1440
00:45:35,960 --> 00:45:37,790
0,480 690,1140 1140,1350 1350,1740 1740,1830
{} you know basically the
你知道，基本上希望你知道，例如，你下降了几纳秒、微秒或毫秒，

1441
00:45:37,790 --> 00:45:39,230
0,270 270,450 450,570 570,720 720,1440
hope that you know example

1442
00:45:39,230 --> 00:45:40,490
0,150 150,330 330,600 600,870 870,1260
you went down for a

1443
00:45:40,490 --> 00:45:42,080
0,240 240,870 870,930 930,1170 1170,1590
couple nanoseconds or {microseconds -}

1444
00:45:42,080 --> 00:45:43,730
0,30 30,630 870,1170 1170,1500 1500,1650
or milliseconds,| there's basically not
|基本上根本没有什么需要追赶的事情，

1445
00:45:43,730 --> 00:45:44,570
0,180 180,480 480,630 630,690 690,840
much catching up to do

1446
00:45:44,570 --> 00:45:45,770
0,90 90,300 300,630 630,1020 1020,1200
at all,| because it already
|因为它已经对该州产生了影响。

1447
00:45:45,770 --> 00:45:47,180
0,300 300,450 450,540 540,930
has on the state.|
|

1448
00:45:48,700 --> 00:45:50,760
0,570 720,990 990,1500
{} But it
但它会想，

1449
00:45:50,760 --> 00:45:52,160
0,210 210,780
would like,|
|

1450
00:45:52,160 --> 00:45:54,140
0,630 660,1110 1260,1740 1740,1860 1860,1980
{} the aside from the
除了原木，

1451
00:45:54,140 --> 00:45:55,520
0,390 390,600 600,900 900,1080 1080,1380
log,| there's also a state
|还有一个状态机，对吧，

1452
00:45:55,520 --> 00:45:56,600
0,390 390,600 600,720 720,900 900,1080
machine, right,| that you've been
|你也一直喜欢应用改变。

1453
00:45:56,600 --> 00:45:58,490
0,300 480,720 720,1080 1080,1560 1560,1890
like {apply -} changes too.|
|

1454
00:45:58,520 --> 00:46:00,590
0,510 510,1050 1050,1350 1350,1770 1770,2070
Yeah yeah, so yeah let's
是的，是的，所以让我们来谈谈这个，

1455
00:46:00,590 --> 00:46:01,640
0,240 240,450 450,690 690,870 870,1050
talk about that,| so there's
|所以什么都没有，这是下一个话题。

1456
00:46:01,640 --> 00:46:02,810
0,210 210,390 390,480 480,720 720,1170
nothing, that's the next topic.|
|

1457
00:46:05,610 --> 00:46:07,830
0,210 210,390 390,1110 1110,1530 1770,2220
I think, yeah,| so now
我想，是的，|那么现在来看看服务恢复方面的情况。

1458
00:46:07,830 --> 00:46:09,840
0,360 360,540 540,840 840,1440
what about service recovery.|
|

1459
00:46:16,120 --> 00:46:17,440
0,480 480,630 630,930 930,1050 1050,1320
Sorry, I actually have another
对不起，其实我还有另一个关于坚持的问题。

1460
00:46:17,440 --> 00:46:20,440
0,390 390,510 510,1410 1770,2190 2490,3000
question on persistence.| Yep. {}|
|是啊。|

1461
00:46:20,500 --> 00:46:22,630
0,780 870,1260 1260,1380 1380,1710 1710,2130
When does the server decide
服务器什么时候决定持久化？

1462
00:46:22,630 --> 00:46:23,900
0,90 90,780
to persist?|
|

1463
00:46:24,170 --> 00:46:26,630
0,510 510,900 900,1110 1110,1560 1800,2460
{} Good, great question, {}|
很好，问得好，|

1464
00:46:26,630 --> 00:46:27,470
0,120 120,180 180,300 300,390 390,840
you know what you think,|
你知道你在想什么，|

1465
00:46:28,790 --> 00:46:29,630
0,210 210,390 390,480 480,660 660,840
I'm sure you've thought about
我相信你已经想过这件事了。

1466
00:46:29,630 --> 00:46:30,560
0,270
this.|
|

1467
00:46:33,190 --> 00:46:35,260
0,120 120,600 630,720 720,1080 1080,2070
I mean, I think a
我的意思是，我认为一个简单的答案是每次这些变量中的一个发生变化，

1468
00:46:35,260 --> 00:46:37,000
0,360 360,690 690,990 1200,1440 1440,1740
simple answer would be every

1469
00:46:37,000 --> 00:46:38,980
0,420 420,660 660,780 780,1350 1380,1980
time one of these variables

1470
00:46:38,980 --> 00:46:41,500
0,600 600,810 810,1140 1470,2010 2010,2520
changes,| but that seems like
|但这似乎是一件代价非常高昂的事情。

1471
00:46:41,770 --> 00:46:43,330
0,180 180,450 450,1230 1230,1440 1440,1560
a very costly thing to

1472
00:46:43,330 --> 00:46:45,070
0,390 750,960 960,1320 1320,1590 1590,1740
do.| I I think that
|我我认为这是正确的答案，

1473
00:46:45,070 --> 00:46:46,380
0,150 150,210 210,480 480,840
is the correct answer,|
|

1474
00:46:46,770 --> 00:46:47,850
0,270 270,690 690,870 870,960 960,1080
{} whenever one of these
每当这些变量中的一个发生变化，

1475
00:46:47,850 --> 00:46:49,560
0,330 330,720 720,900 900,1410 1410,1710
variable changes,| you actually {}
|您实际上是刷新到磁盘或写入，

1476
00:46:49,560 --> 00:46:51,090
0,300 300,690 690,870 870,1230 1260,1530
flush to {} disk or

1477
00:46:51,090 --> 00:46:52,380
0,330 330,450 450,870 870,1020 1020,1290
write to,| in our case
|在我们的例子中，正确的是在实验室中，您向持久模块写入代码。

1478
00:46:52,380 --> 00:46:54,150
0,270 270,720 720,1200 1200,1500 1500,1770
correct in labs you write

1479
00:46:54,150 --> 00:46:56,780
0,480 540,690 690,1290 1470,2130
to the persistent module.|
|

1480
00:46:57,960 --> 00:46:59,490
0,270 270,720 990,1170 1170,1230 1230,1530
Okay, and.| So for example
好的，还有。|例如，当你认识的领导人接受一个条目时，

1481
00:46:59,490 --> 00:47:00,870
0,120 120,210 210,810 840,960 960,1380
when the leader you know

1482
00:47:00,870 --> 00:47:02,370
0,780 780,870 870,1290 1290,1380 1380,1500
accepts an entry,| you know
|你知道，通过START

1483
00:47:02,370 --> 00:47:04,470
0,210 210,750 1110,1530 1530,1890 1890,2100
through start| and appends to
|并将其附加到其本地ITS日志，

1484
00:47:04,470 --> 00:47:06,540
0,330 330,1050 1050,1350 1350,1860 1890,2070
its local its log,| it
|它实际上必须保留该条目。

1485
00:47:06,540 --> 00:47:08,310
0,210 210,390 390,480 480,780 780,1770
actually has to persist that

1486
00:47:08,310 --> 00:47:09,220
0,390
entry.|
|

1487
00:47:13,480 --> 00:47:14,680
0,360 360,510 510,780 780,1050 1050,1200
Right, and so does the
是的，持久化的工作也是逐步进行的，

1488
00:47:14,680 --> 00:47:17,800
0,1050 1080,1380 1380,2310 2340,2880 2880,3120
persisting work incrementally,| so it
|因此，就好像一旦您获得了新的日志条目，

1489
00:47:17,800 --> 00:47:18,580
0,300 300,540 540,630 630,720 720,780
like once you get a

1490
00:47:18,580 --> 00:47:20,860
0,180 180,450 450,1020 1260,1680 1680,2280
new log entry,| you append
|您附加或获取整个状态

1491
00:47:21,440 --> 00:47:22,850
0,210 210,540 810,990 990,1050 1050,1410
or to take the entire

1492
00:47:22,850 --> 00:47:23,930
0,240 240,450 450,690 690,870 870,1080
state| and like {rewrite,it -}
|并将其重写到文件中。

1493
00:47:23,930 --> 00:47:25,430
0,330 330,450 450,900 900,1200 1200,1500
into the file.| But, okay,
|但是，好吧，在现实生活中，你可以添加，对，

1494
00:47:25,430 --> 00:47:27,290
0,420 420,660 660,1020 1020,1260 1260,1860
in real life, you append,

1495
00:47:27,320 --> 00:47:28,280
0,270 270,450 450,570 570,720 720,960
right,| then you would not
|那么您就不会重写整个日志，

1496
00:47:28,280 --> 00:47:29,390
0,360 360,420 420,600 600,990 990,1110
rewrite the whole log,| you
|您只需在日志中附加一个条目

1497
00:47:29,390 --> 00:47:30,620
0,120 120,270 270,660 660,930 930,1230
would just append one entry

1498
00:47:30,620 --> 00:47:31,340
0,120 120,210 210,480 480,570 570,720
to the log| and that's
|这实际上是日志很酷的原因之一，

1499
00:47:31,340 --> 00:47:32,240
0,240 240,420 420,510 510,600 600,900
actually one of the reasons

1500
00:47:32,240 --> 00:47:34,430
0,120 120,480 480,1020 1260,1800 1800,2190
that {logs,are} cool,| {} because
|因为你知道你只需在末尾加上递增的，

1501
00:47:34,430 --> 00:47:35,420
0,120 120,210 210,360 360,480 480,990
you know you can just

1502
00:47:35,540 --> 00:47:37,220
0,330 330,420 420,540 540,930 1110,1680
append at the end and

1503
00:47:37,250 --> 00:47:38,480
0,780
incrementally,|
|

1504
00:47:38,480 --> 00:47:41,300
0,510 750,1050 1050,1230 1230,2730 2730,2820
{} in our lab,| the
在我们的实验室，|整件事都是假的，

1505
00:47:41,300 --> 00:47:42,980
0,180 180,390 390,510 510,960 990,1680
whole thing is fake,| the
|持久力实际上并不是真正的持久力

1506
00:47:43,010 --> 00:47:44,780
0,420 420,660 660,900 900,1170 1170,1770
persistent actually doesn't really persist,|
|

1507
00:47:45,080 --> 00:47:47,510
0,1080 1080,1530 1560,2160 2160,2310 2310,2430
{ -} you know it
你知道它能让物体在两次碰撞之间保持不变，

1508
00:47:47,510 --> 00:47:48,830
0,210 210,330 330,630 630,1110 1110,1320
keeps the object around in

1509
00:47:48,830 --> 00:47:51,680
0,930 1050,2010 2010,2280 2280,2670 2670,2850
between crashes,| because crashes are
|因为撞车事故也是假的，

1510
00:47:51,680 --> 00:47:52,760
0,330 330,510 510,600 600,960 960,1080
also sort of fake,| you
|您知道，测试器基本上会停止节点，重新启动它们

1511
00:47:52,760 --> 00:47:54,650
0,120 120,360 360,690 690,1320 1410,1890
know the tester basically stops

1512
00:47:54,650 --> 00:47:56,450
0,480 480,1080 1080,1410 1410,1530 1530,1800
nodes, restart them| and basically
|基本上给了他们一个新的州，

1513
00:47:56,450 --> 00:47:57,620
0,240 240,480 480,600 600,750 750,1170
gives them the new state,|
|

1514
00:47:59,840 --> 00:48:00,920
0,210 210,330 330,390 390,600 600,1080
but in the real system,
但在真正的系统中，您会附加，

1515
00:48:00,950 --> 00:48:02,780
0,450 450,660 660,780 780,1260
{} you would append,|
|

1516
00:48:02,970 --> 00:48:03,660
0,150 150,270 270,480 480,600 600,690
so the log would be
所以日志应该是一个文件，

1517
00:48:03,660 --> 00:48:04,950
0,120 120,780 810,990 990,1080 1080,1290
a file,| and you would
|然后您可以在文件中附加一个条目。

1518
00:48:04,950 --> 00:48:05,640
0,150 150,240 240,480 480,600 600,690
append an entry to the

1519
00:48:05,640 --> 00:48:06,580
0,390
file.|
|

1520
00:48:07,500 --> 00:48:08,740
0,210 210,510
Thank you.|
谢谢。|

1521
00:48:14,260 --> 00:48:15,460
0,210 210,660 690,900 900,1050 1050,1200
And yes, you know we
是的，你知道我们实际上你将不得不，

1522
00:48:15,460 --> 00:48:16,660
0,420 420,510 510,690 690,900 900,1200
actually you will have to,|
|

1523
00:48:16,660 --> 00:48:18,400
0,600 630,900 900,1350 1350,1650 1650,1740
a real system, if you
一个真正的系统，如果你附加日志条目，

1524
00:48:18,400 --> 00:48:19,660
0,240 240,330 330,600 600,990 990,1260
append the log entry,| your
|您的第一个附加日志条目，然后您响应，

1525
00:48:19,660 --> 00:48:20,980
0,270 270,510 510,750 750,1080 1080,1320
first append log entry, then

1526
00:48:20,980 --> 00:48:23,170
0,120 120,690 900,1050 1050,1710 1710,2190
you response,| so {in,the,append,entries -},|
|因此，在附加条目中，|

1527
00:48:23,350 --> 00:48:24,550
0,120 120,240 240,480 480,570 570,1200
if you update the log
如果您更新日志追加，

1528
00:48:24,760 --> 00:48:27,130
0,780 1080,1230 1230,1410 1410,2160 2160,2370
append,| so if {append,entries} on
|因此，如果在跟随者上附加条目，

1529
00:48:27,130 --> 00:48:27,980
0,360
the

1530
00:48:27,980 --> 00:48:29,750
0,810 840,1350 1350,1410 1410,1560 1560,1770
follower,| receives a new set
|接收一组新的日志条目，

1531
00:48:29,750 --> 00:48:31,130
0,90 90,360 360,840 840,1020 1020,1380
of log entries,| it appends
|它会将它们附加到其本地持久日志中

1532
00:48:31,130 --> 00:48:33,170
0,150 150,570 570,1020 1050,1680 1680,2040
them to its local persistent

1533
00:48:33,170 --> 00:48:34,490
0,510 570,780 780,1080 1080,1200 1200,1320
log| and then it can
|然后它会做出反应，

1534
00:48:34,490 --> 00:48:36,320
0,480 480,780 780,1290 1440,1710 1710,1830
respond,| because you would be
|因为你不会在附加之前做出回应，

1535
00:48:36,320 --> 00:48:38,540
0,450 450,600 600,1080 1080,1770 1770,2220
bad to respond before appending,|
|

1536
00:48:38,540 --> 00:48:40,970
0,390 540,1290 1320,1680 1680,2010 2010,2430
because then you might lose
因为那样你可能会失去你所知道的，

1537
00:48:40,970 --> 00:48:42,170
0,90 90,210 210,690 960,1110 1110,1200
you know the,| if you
|如果您在追加之前进行了响应，那么您可能正在运行的情况就是在实际追加之前，

1538
00:48:42,170 --> 00:48:43,550
0,420 420,660 660,1020 1020,1200 1200,1380
responded before appending, you might

1539
00:48:43,550 --> 00:48:44,960
0,60 60,360 360,420 420,930 930,1410
be running a situation where

1540
00:48:45,170 --> 00:48:46,610
0,360 390,810 810,1170 1170,1350 1350,1440
{} just before actually the

1541
00:48:46,610 --> 00:48:48,080
0,270 270,450 450,810 810,930 930,1470
actual append happens,| you crashes,|
|你坠毁了，|

1542
00:48:48,290 --> 00:48:49,520
0,180 180,420 420,720 720,990 990,1230
and so you actually did
所以你实际上没有持久化日志条目

1543
00:48:49,520 --> 00:48:51,710
0,360 360,750 750,990 990,1500 1680,2190
not persist log entries| and
|所以你会，你知道，你可能会失去承诺的条目。

1544
00:48:51,710 --> 00:48:52,820
0,210 210,330 330,540 540,720 720,1110
so you would you know,

1545
00:48:52,940 --> 00:48:54,830
0,330 330,1080 1080,1200 1200,1530 1530,1890
{} you could lose committed

1546
00:48:54,830 --> 00:48:55,640
0,510
entries.|
|

1547
00:49:00,250 --> 00:49:01,300
0,540
Okay?|
好吧?|

1548
00:49:02,620 --> 00:49:04,060
0,210 210,360 360,540 540,930 1020,1440
Okay, so how about service
好的，那么服务恢复怎么样，

1549
00:49:04,060 --> 00:49:05,920
0,630 1110,1230 1230,1320 1320,1650 1650,1860
recovery,| so the service keeps
|因此，该服务保持其自身的状态，

1550
00:49:05,920 --> 00:49:07,450
0,120 120,720 720,1380 1410,1530 1530,1530
its own state,| {} like
|例如，在实验3中，您正在实现一个键值存储

1551
00:49:08,170 --> 00:49:09,880
0,690 690,1020 1020,1200 1200,1620 1620,1710
{for,example} {in,lab,3}, you're implementing a

1552
00:49:09,880 --> 00:49:11,890
0,120 120,510 510,1050 1440,1890 1890,2010
{key-value -} store| and so
|因此，键值存储基本上维护了从键到值的散列映射

1553
00:49:11,890 --> 00:49:13,390
0,90 90,210 210,540 540,900 900,1500
the {key-value -} store maintains

1554
00:49:13,390 --> 00:49:15,460
0,240 270,990 990,1380 1380,1650 1650,2070
{} basically hash map from

1555
00:49:15,670 --> 00:49:17,800
0,210 210,780 780,1260 1260,1500 1500,2130
a key to a value|
|

1556
00:49:17,950 --> 00:49:19,630
0,270 270,630 630,1140 1170,1590 1590,1680
and you {} need to
你需要重演这种状态。

1557
00:49:19,630 --> 00:49:20,980
0,360 360,570 570,960
replay that state.|
|

1558
00:49:21,160 --> 00:49:22,840
0,240 240,660 870,1500 1500,1620 1620,1680
And again {} there are
再说一次，有两种可能的方法，

1559
00:49:22,840 --> 00:49:24,880
0,390 390,870 870,1380 1410,1800 1800,2040
two possible ways of going

1560
00:49:24,880 --> 00:49:27,340
0,300 300,600 990,1290 1290,1920 2010,2460
about it,| {} one strategy
|一种策略是重放日志以实际重建该状态。

1561
00:49:27,340 --> 00:49:29,320
0,300 300,420 420,1290 1290,1380 1380,1980
{one,is} to replay the log

1562
00:49:29,350 --> 00:49:30,970
0,150 150,420 420,1020 1020,1170 1170,1620
to actually reconstruct that state.|
|

1563
00:49:34,190 --> 00:49:37,550
0,600 630,1380 1380,1560 1560,2070 2070,3360
So basically if you're {}
因此，基本上，如果您与上一张幻灯片中的策略1有些类似，

1564
00:49:37,700 --> 00:49:38,540
0,270 270,330 330,660 660,750 750,840
sort of similar to the

1565
00:49:38,540 --> 00:49:39,830
0,450 450,750 750,870 870,960 960,1290
strategy one on the previous

1566
00:49:39,830 --> 00:49:41,420
0,390 660,810 810,1260 1260,1470 1470,1590
slide,| you just take the
|您只需使用重放日志中的所有条目来获取日志

1567
00:49:41,420 --> 00:49:43,670
0,540 570,1050 1050,1620 1620,2100 2100,2250
log use replay all the

1568
00:49:43,670 --> 00:49:44,960
0,330 330,450 450,510 510,960 960,1290
entries in the log| and
|基本上应该创造出完全相同的状态，

1569
00:49:45,020 --> 00:49:47,360
0,720 750,1410 1410,1680 1680,2220 2220,2340
should basically create exactly the

1570
00:49:47,360 --> 00:49:50,540
0,240 240,780 1140,1980 2310,2700 2700,3180
same state,| {} as if
|就像以前一样，

1571
00:49:50,750 --> 00:49:53,330
0,870 870,1080 1080,1650 1680,2460 2460,2580
{} as before,| because you
|因为你知道这种复制状态机方法的全部意义在于，

1572
00:49:53,330 --> 00:49:55,310
0,270 270,510 510,870 870,1350 1650,1980
know the whole point of

1573
00:49:55,340 --> 00:49:56,870
0,210 210,630 630,870 870,1110 1110,1530
this replicated state machine approach

1574
00:49:56,870 --> 00:49:59,660
0,210 210,570 960,1620 1620,2370 2580,2790
is that,| {} the all
|所有操作按总顺序执行，

1575
00:49:59,660 --> 00:50:00,830
0,90 90,540 540,660 660,1110 1110,1170
the operations are executed in

1576
00:50:00,830 --> 00:50:02,360
0,300 300,840 840,1290 1290,1410 1410,1530
total order,| operations have no
|手术没有副作用，

1577
00:50:02,360 --> 00:50:03,530
0,270 270,720 810,990 990,1080 1080,1170
side effect,| so if you
|所以如果你从同样的阶段开始一无所有，

1578
00:50:03,530 --> 00:50:04,610
0,300 300,360 360,420 420,690 690,1080
start in the same stage

1579
00:50:04,610 --> 00:50:06,740
0,180 180,660 900,1470 1470,1620 1620,2130
with nothing,| and you replay
|然后重播所有的操作，

1580
00:50:06,740 --> 00:50:07,790
0,150 150,240 240,780 780,900 900,1050
all the operations,| you should
|你应该以完全相同的状态结束，

1581
00:50:07,790 --> 00:50:08,960
0,150 150,300 300,870 870,960 960,1170
end up exactly the same

1582
00:50:08,960 --> 00:50:10,490
0,450 570,930 930,1140 1140,1350 1350,1530
state,| {} is any other
|是任何其他节点，

1583
00:50:10,490 --> 00:50:11,160
0,390
node,|
|

1584
00:50:12,480 --> 00:50:13,890
0,150 150,270 270,420 420,690 690,1410
and so that's one possible,|
所以这是一种可能，|

1585
00:50:14,100 --> 00:50:15,300
0,450 450,750 750,870 870,1080 1080,1200
{} and so that was
因此，这是重建国家的一种方式。

1586
00:50:15,300 --> 00:50:16,500
0,330 330,540 540,690 690,1140 1140,1200
one way to recreate the

1587
00:50:16,500 --> 00:50:17,540
0,480
state.|
|

1588
00:50:24,400 --> 00:50:25,540
0,210 210,270 270,480 480,990 990,1140
And you know obviously this
你知道这显然很贵，

1589
00:50:25,540 --> 00:50:27,400
0,120 120,720 780,990 990,1170 1170,1860
is expensive,| you know if
|你知道如果这项服务实际上已经运行了几年

1590
00:50:27,430 --> 00:50:28,390
0,90 90,420 420,660 660,780 780,960
the service actually has been

1591
00:50:28,390 --> 00:50:30,100
0,720 720,870 870,990 990,1200 1200,1710
running for a couple years|
|

1592
00:50:30,460 --> 00:50:31,720
0,240 240,510 510,930 930,1140 1140,1260
and then you have to
然后你必须重播日志，

1593
00:50:31,720 --> 00:50:33,250
0,480 480,780 780,1320 1320,1410 1410,1530
replay the logs,| you know
|你知道从时间之初开始

1594
00:50:33,250 --> 00:50:34,540
0,270 270,480 480,750 750,840 840,1290
from the beginning of time|
|

1595
00:50:34,540 --> 00:50:35,410
0,60 60,180 180,390 390,480 480,870
you know that is not
你知道，这并不是你知道的那么令人向往。

1596
00:50:35,410 --> 00:50:36,970
0,180 180,300 300,810 810,990 990,1560
you know so {} desirable.|
|

1597
00:50:37,570 --> 00:50:39,370
0,180 180,420 420,810 1080,1410 1410,1800
And so {you,know} people do
所以你知道人们并不是真的遵循策略一，

1598
00:50:39,400 --> 00:50:41,200
0,360 360,570 570,990 990,1080 1080,1800
don't really follow {} strategy

1599
00:50:41,200 --> 00:50:43,240
0,480 480,990 1110,1560 1560,1710 1710,2040
{} one,| gonna follow another
|将遵循另一种策略

1600
00:50:43,240 --> 00:50:44,980
0,600 600,870 870,1080 1080,1350 1350,1740
strategy| and we just basically
|我们基本上只是制作周期性的快照。

1601
00:50:44,980 --> 00:50:46,920
0,270 270,780 780,1470
making periodic snapshots.|
|

1602
00:50:47,350 --> 00:50:48,490
0,300 300,540 540,600 600,780 780,1140
And there are two reasons
这样做有两个原因，

1603
00:50:48,490 --> 00:50:50,770
0,120 120,300 300,750 1020,1800 1890,2280
for doing that,| one basically
|其中一个基本上将以过去的方式重建您知道的服务日期

1604
00:50:50,770 --> 00:50:51,940
0,120 120,870 870,930 930,1080 1080,1170
will reconstruct you know the

1605
00:50:51,940 --> 00:50:53,020
0,330 330,570 570,660 660,750 750,1080
service date in the past

1606
00:50:53,020 --> 00:50:54,400
0,510 630,780 780,840 840,1140 1140,1380
manner| and the second reason
|这样做的第二个原因是

1607
00:50:54,400 --> 00:50:55,720
0,90 90,210 210,570 570,780 780,1320
to do that is| to
|为了能够压缩日志，

1608
00:50:55,840 --> 00:50:57,910
0,660 660,930 930,1410 1410,1980 1980,2070
be able to compact the

1609
00:50:57,910 --> 00:50:59,740
0,510 540,720 720,810 810,1230 1230,1830
log,| you know even the
|你知道，甚至连木筏状态本身都可以从前面剪掉前缀，也可以剪掉。

1610
00:50:59,770 --> 00:51:02,440
0,390 390,660 660,1320 1530,2190 2190,2670
raft state itself can be

1611
00:51:03,610 --> 00:51:05,620
0,630 630,900 900,1350 1440,1650 1650,2010
{} cut off from the

1612
00:51:05,620 --> 00:51:06,670
0,240 240,450 450,540 540,900 900,1050
front of the prefix can

1613
00:51:06,670 --> 00:51:07,620
0,90 90,270 270,570
be cut off.|
|

1614
00:51:07,830 --> 00:51:09,060
0,240 240,300 300,540 540,1080 1080,1230
And the basic observation is
而基本的观察结果是，

1615
00:51:09,060 --> 00:51:11,670
0,420 720,1530 1530,1590 1950,2190 2190,2610
that,| {} if the application
|如果应用程序正在运行一段时间，

1616
00:51:11,670 --> 00:51:12,570
0,60 60,300 300,420 420,420 420,900
is running for a while,|
|

1617
00:51:12,570 --> 00:51:13,860
0,150 150,390 390,750 780,1200 1200,1290
then it has it the
然后它有第一个1000次操作或第一个100万次操作，

1618
00:51:13,860 --> 00:51:15,210
0,240 240,570 570,1170 1170,1290 1290,1350
first thousand operations or the

1619
00:51:15,210 --> 00:51:17,790
0,240 240,570 570,1380 1620,2280 2310,2580
first million operations,| {} then
|那么国家确实构建了那个点，

1620
00:51:17,790 --> 00:51:19,680
0,90 90,750 870,1200 1200,1650 1650,1890
the state does construct that

1621
00:51:19,680 --> 00:51:20,700
0,420
point,|
|

1622
00:51:21,420 --> 00:51:24,380
0,630 960,1470 1470,1680 1680,2400
the states will contain
这些州将包含您知道的从c到[i]的所有操作，

1623
00:51:26,100 --> 00:51:27,560
0,270 270,900
all ops

1624
00:51:28,180 --> 00:51:30,080
0,270 270,540 540,750 750,1260
{you,know} c through [i],|
|

1625
00:51:30,900 --> 00:51:32,280
0,240 240,240 240,810 810,870 870,1380
where i maybe a thousand
在那里我可能是一千或者一百万，不管你是什么，

1626
00:51:32,280 --> 00:51:33,780
0,30 30,420 420,810 810,1230 1260,1500
or a million whatever you

1627
00:51:33,780 --> 00:51:36,630
0,360 360,900 1290,1650 1980,2520 2640,2850
whatever you,| so, {} so
|所以，可以考虑的一种方式是

1628
00:51:36,630 --> 00:51:37,650
0,240 240,390 390,480 480,660 660,1020
one way to think about

1629
00:51:37,650 --> 00:51:40,230
0,420 420,840 1080,1710 1710,1920 1920,2580
is| that there's a duality
|状态复制和日志复制或重放之间存在二元性，

1630
00:51:40,230 --> 00:51:43,920
0,450 450,1020 1050,1860 1860,2670 2940,3690
between state replication and log

1631
00:51:43,920 --> 00:51:47,100
0,540 540,690 690,1320 1410,2100 2490,3180
replication or replay,| {} the
|你可以在一千次手术后拯救这个国家

1632
00:51:47,280 --> 00:51:48,390
0,240 240,360 360,690 690,780 780,1110
you could save the state

1633
00:51:48,390 --> 00:51:49,860
0,270 270,330 330,630 630,1320 1320,1470
after a thousand operations| and
|然后你就得到了完全相同的东西，实际上就是重新应用，重新做从0到快速的每一次操作。

1634
00:51:49,860 --> 00:51:50,820
0,210 210,300 300,420 420,870 870,960
then you've got exactly the

1635
00:51:50,820 --> 00:51:52,530
0,270 270,540 540,750 750,1410 1440,1710
same thing as actually {re-applying

1636
00:51:52,530 --> 00:51:55,530
0,540 540,1260 1260,1560 1560,2280 2700,3000
-} redoing every operation from

1637
00:51:55,530 --> 00:51:56,860
0,360 360,450 450,570 570,1050
0 to the fast.|
|

1638
00:51:57,640 --> 00:51:59,770
0,330 330,780 1050,1350 1350,1620 1620,2130
And so this means that,|
这就意味着，|

1639
00:51:59,770 --> 00:52:01,030
0,270 270,510 510,660 660,720 720,1260
once you have a snapshot,|
一旦你有了快照，|

1640
00:52:01,030 --> 00:52:02,740
0,150 150,450 450,930 930,1470 1470,1710
you stored snapshots tabling on
您将快照以持久状态存储在磁盘上，

1641
00:52:02,740 --> 00:52:05,410
0,510 900,1050 1050,1500 1500,2040 2370,2670
disk in persistent state,| you
|你可以砍掉，你可以伐木，你可以通过i砍掉你知道的原木。

1642
00:52:05,410 --> 00:52:07,080
0,330 330,630 630,1110
can cut off,

1643
00:52:07,630 --> 00:52:08,620
0,210 210,360 360,750 750,870 870,990
you can log, you can

1644
00:52:08,620 --> 00:52:10,140
0,240 240,300 300,870
cut the log

1645
00:52:12,300 --> 00:52:13,660
0,180 180,390 390,870
{you,know} through i.|
|

1646
00:52:16,790 --> 00:52:17,780
0,150 150,240 240,390 390,810 810,990
And so, this allows you
因此，这允许您控制日志的大小，

1647
00:52:17,780 --> 00:52:19,160
0,90 90,780 780,870 870,1260 1260,1380
to control the size of

1648
00:52:19,160 --> 00:52:22,790
0,120 120,540 600,1350 1350,1950 2250,3630
the log,| basically by {periodicly
|基本上是定期请求服务器实际拍摄快照

1649
00:52:22,790 --> 00:52:24,350
0,300 300,900 900,990 990,1440 1440,1560
-} asking the servers to

1650
00:52:24,350 --> 00:52:26,090
0,240 240,420 420,1110 1110,1230 1230,1740
actually take snapshots| and then
|然后服务人员告诉筏子图书馆，是的，我已经通过i拍摄了一张快照，

1651
00:52:26,120 --> 00:52:27,560
0,390 390,690 690,780 780,1050 1050,1440
service telling the raft library

1652
00:52:27,560 --> 00:52:28,910
0,300 300,480 480,750 750,810 810,1350
yes, I've taken a snapshot

1653
00:52:28,910 --> 00:52:30,380
0,210 210,720 750,1080 1080,1350 1350,1470
through i,| then raft can
|然后RAFT可以说好的，我只知道我们必须记住从I或直到I，

1654
00:52:30,380 --> 00:52:31,640
0,240 240,450 450,810 870,1080 1080,1260
say okay good, I just

1655
00:52:31,640 --> 00:52:32,630
0,90 90,180 180,300 300,390 390,990
know we have to remember

1656
00:52:32,630 --> 00:52:34,430
0,420 420,780 780,1110 1440,1650 1650,1800
anything from i or until

1657
00:52:34,430 --> 00:52:35,380
0,510
i,|
|

1658
00:52:35,580 --> 00:52:36,450
0,210 210,390 390,570 570,630 630,870
{} that means of course
当然，这意味着快照必须存储在稳定存储上。

1659
00:52:36,450 --> 00:52:37,440
0,90 90,180 180,720 720,900 900,990
that the snapshot has to

1660
00:52:37,440 --> 00:52:38,850
0,90 90,420 420,510 510,810 810,1410
be stored on stable storage.|
|

1661
00:52:45,050 --> 00:52:45,740
0,120 120,210 210,330 330,540 540,690
And this is also good
这对恢复也有好处，对吗？

1662
00:52:45,740 --> 00:52:47,030
0,120 120,630 630,990 990,1170 1170,1290
for recovery, correct| and so
|因此，这使得我们的复苏计划变得更加复杂

1663
00:52:47,030 --> 00:52:48,110
0,180 180,390 390,510 510,870 870,1080
it makes our recovery scheme

1664
00:52:48,110 --> 00:52:49,310
0,300 300,450 450,930 930,1050 1050,1200
slightly more complicated| than I
|比我在上一张幻灯片中描述的更多，

1665
00:52:49,310 --> 00:52:50,540
0,270 270,660 660,720 720,810 810,1230
just described in the previous

1666
00:52:50,540 --> 00:52:51,500
0,360 360,600 600,690 690,900 900,960
slide,| what it has to
|它必须发生的是，

1667
00:52:51,500 --> 00:52:53,780
0,360 360,600 600,990 1380,1770 1770,2280
happen is that| {} when
|当追随者在快速重启后重新启动时，

1668
00:52:53,810 --> 00:52:55,880
0,330 360,1170 1230,1500 1500,1740 1740,2070
a follower comes back up

1669
00:52:55,910 --> 00:52:58,580
0,420 420,540 540,930 1050,1740 2070,2670
after a quick reboot, {}|
|

1670
00:52:58,580 --> 00:53:00,440
0,390 420,930 930,1080 1080,1500 1500,1860
it loads its persistent state
它加载它的持久状态，包括我们在上一张幻灯片中谈到的持久状态，

1671
00:53:00,440 --> 00:53:01,340
0,120 120,210 210,360 360,810 810,900
you know that includes you

1672
00:53:01,340 --> 00:53:02,420
0,120 120,240 240,660 660,960 960,1080
know the persistent state that

1673
00:53:02,420 --> 00:53:03,290
0,90 90,420 420,690 690,780 780,870
we talked about on the

1674
00:53:03,290 --> 00:53:05,060
0,300 300,660 660,840 840,1050 1050,1770
previous slide,| {you,know} this information,|
|你知道这个信息，|

1675
00:53:05,600 --> 00:53:08,210
0,540 780,1050 1050,1530 1530,1950 1950,2610
{} but also its last
但它也是你所知道的最后一次快照安装，基本上是将该快照加载到内存中，该服务确实做到了。

1676
00:53:08,210 --> 00:53:10,760
0,120 120,630 630,1440 1830,2400 2400,2550
you know snapshot installs that

1677
00:53:10,760 --> 00:53:12,830
0,540 570,1140 1140,1440 1440,1590 1590,2070
last basically loads that snapshot

1678
00:53:12,830 --> 00:53:14,240
0,240 240,540 540,630 630,990 990,1410
into memory, the service does.|
|

1679
00:53:14,720 --> 00:53:16,550
0,150 150,930 930,1050 1050,1350 1350,1830
And then we can replay
然后我们可以重播任何日志条目

1680
00:53:16,550 --> 00:53:18,050
0,300 300,630 630,1020 1020,1110 1110,1500
any log entries| to basically
|基本上是为了让追随者了解最新情况。

1681
00:53:18,050 --> 00:53:19,100
0,270 270,360 360,870 870,960 960,1050
bring the follower up to

1682
00:53:19,100 --> 00:53:20,020
0,360
date.|
|

1683
00:53:20,630 --> 00:53:21,940
0,780
Okay?|
好吧?|

1684
00:53:29,350 --> 00:53:30,960
0,270 270,600 600,780 780,1110
Any questions about this?|
对此有什么问题吗？|

1685
00:53:31,560 --> 00:53:34,440
0,420 420,960 1440,1860 1860,2340 2340,2880
{} I have one question,|
我有一个问题，|

1686
00:53:34,440 --> 00:53:35,370
0,330 330,570 570,720 720,810 810,930
I'm not sure if I'm
我不确定我能不能说得很清楚，

1687
00:53:35,370 --> 00:53:36,780
0,240 270,690 690,870 870,1140 1140,1410
gonna be able phrase super

1688
00:53:36,780 --> 00:53:39,740
0,570 870,1710 1860,2070 2070,2460
clearly,| {} I guess,
|我想，就像我印象中的那样，

1689
00:53:40,060 --> 00:53:41,560
0,210 210,300 300,480 480,720 720,1500
like I was under impression,|
|

1690
00:53:41,560 --> 00:53:42,880
0,180 180,300 300,480 480,750 930,1320
so I guess like does
所以我想这是不是打破了一些抽象层，

1691
00:53:42,880 --> 00:53:44,860
0,270 270,660 840,1350 1350,1680 1680,1980
this not break some layer

1692
00:53:44,860 --> 00:53:47,590
0,60 60,1260 1740,1950 1950,2280 2280,2730
of abstraction,| that previously existed
|它以前存在于筏子上的应用程序和筏子本身之间，

1693
00:53:47,590 --> 00:53:49,840
0,660 690,1200 1230,1860 1860,1980 1980,2250
between the application on top

1694
00:53:49,840 --> 00:53:51,520
0,120 120,720 780,990 990,1290 1290,1680
of raft and raft itself,|
|

1695
00:53:51,520 --> 00:53:52,450
0,120 120,210 210,450 450,810 810,930
for it now needs to
因为它现在需要理解状态机是如何，

1696
00:53:52,450 --> 00:53:54,730
0,870 900,1080 1080,1170 1170,1530 1530,2280
understand how the state machine,|
|

1697
00:53:54,820 --> 00:53:56,050
0,240 240,390 390,480 480,780 780,1230
like how to apply commands
比如如何将命令应用到状态机

1698
00:53:56,050 --> 00:53:57,040
0,60 60,150 150,420 420,750 750,990
to the state machine| instead
|而不是像向某个外部状态机发出命令一样。

1699
00:53:57,040 --> 00:53:58,870
0,90 90,390 390,960 960,1290 1290,1830
of just like giving commands

1700
00:53:58,870 --> 00:54:01,390
0,300 300,570 570,1320 1500,1980 1980,2520
to some external state machine.|
|

1701
00:54:01,570 --> 00:54:09,190
0,1680 1710,2190 2190,2760 2790,6330 6570,7620
Yeah, great observation, clearly, {}
是的，很好的观察力，显然，我们必须发挥作用才能让木筏图书馆投入使用，

1702
00:54:10,140 --> 00:54:10,710
0,120 120,240 240,330 330,480 480,570
we have to play to

1703
00:54:10,710 --> 00:54:12,300
0,570 570,870 870,1170 1170,1530 1530,1590
get the raft library in

1704
00:54:12,300 --> 00:54:13,460
0,90 90,660
the service,|
|

1705
00:54:13,520 --> 00:54:15,110
0,720 750,990 990,1350 1350,1410 1410,1590
{} because first of all
因为首先，服务对它的谎言给出了关于它必须应用到什么程度的错误信息，

1706
00:54:15,110 --> 00:54:16,580
0,90 90,390 390,750 750,1200 1200,1470
the service lies about it

1707
00:54:16,580 --> 00:54:17,930
0,210 210,270 270,510 510,990 990,1350
gives the wrong information about

1708
00:54:17,930 --> 00:54:18,800
0,180 180,540 540,690 690,810 810,870
how far it has to

1709
00:54:18,800 --> 00:54:21,050
0,390 390,1140 1140,1470 1470,1830 1830,2250
apply,| then we getting inconsistent
|然后我们得到了不一致的结果，

1710
00:54:21,050 --> 00:54:22,190
0,330 330,480 480,720 720,870 870,1140
results,| but anyway so we
|但不管怎样，我们不会假设谎言，

1711
00:54:22,400 --> 00:54:24,020
0,330 330,690 690,1080 1080,1470 1470,1620
don't assume liers anyway,| but
|但很明显情况就是这样，

1712
00:54:24,020 --> 00:54:25,910
0,180 180,630 630,690 690,1290 1410,1890
it's clearly the case,| that
|我们必须合作的服务和木筏图书馆。

1713
00:54:25,910 --> 00:54:28,400
0,510 660,1230 1230,2010 2040,2280 2280,2490
the service and raft library

1714
00:54:28,400 --> 00:54:29,940
0,150 150,330 330,420 420,1140
we have to cooperate.|
|

1715
00:54:30,240 --> 00:54:31,800
0,750 750,1020 1020,1260 1260,1350 1350,1560
And, {} you can go
而且，您可以使用抽象违规，

1716
00:54:31,800 --> 00:54:34,230
0,450 540,840 840,1320 1320,2040 2280,2430
with an abstraction violation, {}|
|

1717
00:54:34,230 --> 00:54:36,540
0,1290 1320,1650 1650,1800 1800,2100 2100,2310
I think the reason they
我认为他们这样做的原因是为了限制我们必须维护的木筏图书馆的状态数量，

1718
00:54:36,540 --> 00:54:38,700
0,270 270,420 420,690 690,1200 1200,2160
do it is to {}

1719
00:54:38,730 --> 00:54:39,780
0,390 390,450 450,630 630,720 720,1050
limit the amount of state

1720
00:54:39,780 --> 00:54:40,530
0,90 90,150 150,390 390,630 630,750
of the raft library we

1721
00:54:40,530 --> 00:54:41,760
0,150 150,240 240,720
have to maintain,|
|

1722
00:54:41,790 --> 00:54:43,110
0,480 480,570 570,780 780,990 990,1320
otherwise, the raft library wouldn't
否则，木筏图书馆就不知道什么时候能砍木头了。

1723
00:54:43,110 --> 00:54:44,250
0,240 240,540 540,690 690,810 810,1140
know when it can cut

1724
00:54:44,250 --> 00:54:45,360
0,90 90,570
the log.|
|

1725
00:54:45,560 --> 00:54:46,910
0,300 300,480 480,750 750,1170 1170,1350
And so there's basically no
所以基本上没有办法绕过它，

1726
00:54:46,910 --> 00:54:48,200
0,210 210,570 570,720 720,960 960,1290
way around it,| that the
|服务器实际上会告诉它，

1727
00:54:48,200 --> 00:54:49,580
0,540 540,780 780,1110 1110,1200 1200,1380
servers actually tells it,| like
|就像，嗯，我通过我的

1728
00:54:49,580 --> 00:54:50,930
0,420 450,630 630,750 750,810 810,1350
well I got a snapchat

1729
00:54:50,930 --> 00:54:52,100
0,270 270,750 780,930 930,1050 1050,1170
through i| and so it's
|因此，您可以删除从0到i的日志条目。

1730
00:54:52,100 --> 00:54:54,260
0,240 240,330 330,600 600,1140 1410,2160
okay for you to remove

1731
00:54:54,260 --> 00:54:55,790
0,300 300,600 600,750 750,1110 1110,1530
log entry from 0 {to,i}.|
|

1732
00:54:57,840 --> 00:54:59,100
0,210 210,390 390,660 660,1080 1080,1260
And you'll see that| and
你会看到的|所以这将意味着一个很好的观点，这将在2d内出现，对吧，

1733
00:54:59,100 --> 00:55:00,960
0,330 1200,1440 1440,1560 1560,1740 1740,1860
so this will mean a

1734
00:55:00,960 --> 00:55:02,520
0,330 330,750 750,1290 1290,1440 1440,1560
good {point,this -} is going

1735
00:55:02,520 --> 00:55:03,450
0,60 60,180 180,330 330,600 600,930
to come up {in,2d -},

1736
00:55:03,480 --> 00:55:04,710
0,270 270,750 750,900 900,1110 1110,1230
right,| lab {2d -} is
|实验2d将完全围绕快照和日志同情展开

1737
00:55:04,710 --> 00:55:06,870
0,450 450,570 570,750 750,1230 1320,2160
gonna is all about snapshots

1738
00:55:06,870 --> 00:55:10,350
0,330 330,1890 2520,3210 3210,3360 3360,3480
and log compassion| as it's
|正如报纸上所说的那样。

1739
00:55:10,350 --> 00:55:11,940
0,240 240,450 450,630 630,1110
also called {in,the} paper.|
|

1740
00:55:11,940 --> 00:55:14,640
0,390 630,1410 1830,2250 2280,2640 2640,2700
{} There there has to
服务器和RAFT之间必须有一些API才能进行协作

1741
00:55:14,640 --> 00:55:16,620
0,90 90,390 390,1350 1380,1890 1890,1980
be some API between the

1742
00:55:16,620 --> 00:55:18,360
0,690 690,1110 1110,1530 1530,1650 1650,1740
servers and raft to be

1743
00:55:18,360 --> 00:55:20,400
0,180 180,240 240,840 870,1470 1530,2040
able to collaborate| and basically
|基本上在2a和2b中，API实际上甚至可以看到，

1744
00:55:20,400 --> 00:55:21,720
0,300 300,630 630,750 750,930 930,1320
{in,2a -} and {2b -}

1745
00:55:21,720 --> 00:55:23,520
0,450 480,1200 1200,1290 1290,1500 1500,1800
that API in fact even

1746
00:55:23,520 --> 00:55:24,420
0,120 120,360 360,570 570,810 810,900
to see,| that API is
|该API非常简单，

1747
00:55:24,420 --> 00:55:26,850
0,600 600,1050 1350,1890 1890,2070 2070,2430
extremely simple,| {} the only
|唯一存在的API是在Apply通道上传递日志消息，对吧，

1748
00:55:26,850 --> 00:55:28,470
0,420 420,540 540,1080 1080,1230 1230,1620
API that exists is this

1749
00:55:28,470 --> 00:55:29,880
0,570 570,870 870,1200 1200,1320 1320,1410
delivering log message on the

1750
00:55:29,880 --> 00:55:30,940
0,270 270,630
apply channel,

1751
00:55:31,250 --> 00:55:33,290
0,270 270,540 810,1230 1230,1680 1680,2040
right,| and almost nothing flows
|几乎没有任何东西从服务流向木筏，

1752
00:55:33,290 --> 00:55:34,520
0,450 450,630 630,690 690,1080 1080,1230
down from the service to

1753
00:55:34,520 --> 00:55:35,900
0,390 390,600 600,840 840,1230 1230,1380
raft,| like other than the
|喜欢服务以外的其他可以启动的服务

1754
00:55:35,900 --> 00:55:38,480
0,360 360,540 540,1200 1470,2250 2250,2580
service may start| {} and
|和RAFT试图使用我开始的地方在日志中添加一个条目。

1755
00:55:38,510 --> 00:55:40,940
0,600 630,1530 1620,2070 2070,2160 2160,2430
raft {} trying to append

1756
00:55:40,940 --> 00:55:41,750
0,60 60,360 360,450 450,540 540,810
an entry to the log

1757
00:55:41,750 --> 00:55:43,200
0,210 210,420 420,480 480,990
using where i start.|
|

1758
00:55:43,440 --> 00:55:44,790
0,240 240,510 510,660 660,1020 1020,1350
{} And you know and
你知道，所以在2D中，

1759
00:55:44,790 --> 00:55:46,830
0,90 90,330 330,870 1020,1740 1770,2040
so {in,2d -},| {} there
|在服务和RAFT库之间必须有更多的API，

1760
00:55:46,830 --> 00:55:47,460
0,180 180,270 270,390 390,450 450,630
has to be a little

1761
00:55:47,460 --> 00:55:49,200
0,180 180,420 420,540 540,1140 1140,1740
bit more of an API

1762
00:55:49,200 --> 00:55:52,410
0,420 420,930 930,1890 2310,2730 2730,3210
between service and raft library,|
|

1763
00:55:53,040 --> 00:55:54,510
0,270 270,420 420,660 660,1050 1290,1470
and it turns out, you
事实证明，你可以以任何可能的方式设计这个API，

1764
00:55:54,510 --> 00:55:55,890
0,210 210,690 690,870 870,1260 1260,1380
can design that API in

1765
00:55:55,890 --> 00:55:57,210
0,360 390,930 930,1140 1140,1290 1290,1320
any possible way,| there are
|有相当多的方法可以做到这一点，

1766
00:55:57,210 --> 00:55:57,960
0,180 180,240 240,420 420,480 480,750
quite a number of ways

1767
00:55:57,960 --> 00:55:59,010
0,90 90,330 330,540 570,720 720,1050
of doing it,| {} there's
|没有特别的一个

1768
00:55:59,010 --> 00:56:00,120
0,120 120,540 540,780 780,1020 1020,1110
no particular one| and the
|而且这篇论文并没有列出您应该使用什么API，

1769
00:56:00,120 --> 00:56:01,440
0,300 300,600 600,780 780,1080 1080,1320
paper doesn't lay out what

1770
00:56:01,440 --> 00:56:03,600
0,420 420,570 570,750 750,1260 1680,2160
API you should use, {}|
|

1771
00:56:03,600 --> 00:56:05,160
0,600 630,900 900,1110 1110,1290 1290,1560
the papers actually just nothing
实际上，报纸对此只字不提。

1772
00:56:05,160 --> 00:56:07,260
0,270 270,630 1080,1890 1890,1980 1980,2100
about this| and so it's
|所以这取决于你，有时取决于我们，

1773
00:56:07,260 --> 00:56:09,150
0,120 120,180 180,540 540,1350 1470,1890
up to you to sometimes

1774
00:56:09,150 --> 00:56:09,870
0,150 150,240 240,570 570,660 660,720
up to us,| you know
|你知道要弄清楚API

1775
00:56:09,870 --> 00:56:10,830
0,90 90,330 330,480 480,570 570,960
to figure out the {APIs

1776
00:56:10,830 --> 00:56:12,300
0,90 90,330 630,930 930,1050 1050,1470
-}| and to be able
|为了能够做2D，

1777
00:56:12,300 --> 00:56:14,220
0,270 270,540 540,780 780,1350 1440,1920
to do {2d -}, {}|
|

1778
00:56:14,220 --> 00:56:14,820
0,60 60,180 180,330 330,510 510,600
you know, we have to
您知道，我们必须在服务器和RAFT之间声明一个API。

1779
00:56:14,820 --> 00:56:16,650
0,600 600,690 690,1320 1320,1740 1740,1830
declare an API between the

1780
00:56:16,650 --> 00:56:18,500
0,570 570,930 930,1500
servers and raft.|
|

1781
00:56:18,650 --> 00:56:19,970
0,330 330,480 480,570 570,810 810,1320
And you know you'll see,|
你知道你会看到的，|

1782
00:56:19,970 --> 00:56:21,470
0,270 270,480 480,600 600,780 780,1500
{} what you do today,
你今天所做的，你知道API，

1783
00:56:21,470 --> 00:56:23,300
0,120 120,240 240,810 960,1650 1650,1830
you know that {} the

1784
00:56:23,300 --> 00:56:25,160
0,660 660,750 750,930 930,1110 1110,1860
API,| you have some funny
|你有点搞笑，你可能比你想象的要更不一样，

1785
00:56:25,160 --> 00:56:27,170
0,450 1500,1740 1740,1800 1800,1860 1860,2010
you might be a little

1786
00:56:27,170 --> 00:56:28,430
0,120 120,750 780,1050 1050,1170 1170,1260
bit more different than you

1787
00:56:28,430 --> 00:56:31,190
0,180 180,780 1530,2010 2010,2640 2670,2760
might expect,| {} and you
|你知道，我们必须在这些API中选择一个特定的API作为一个称为条件安装的操作，

1788
00:56:31,190 --> 00:56:31,760
0,120 120,240 240,330 330,390 390,570
know we had to pick

1789
00:56:31,760 --> 00:56:34,250
0,180 180,570 570,1560 1560,1950 1950,2490
one particular API in {

1790
00:56:34,640 --> 00:56:37,460
0,450 450,1410 1410,1620 1620,2280 2310,2820
-} in that {APIs -}

1791
00:56:37,460 --> 00:56:38,630
0,60 60,180 180,600 600,960 990,1170
as an operation called {}

1792
00:56:38,630 --> 00:56:41,600
0,600 600,1320 1560,2130 2160,2820 2850,2970
conditional install,| that {} you
|具有您知道的允许您更改RAFT状态的语义

1793
00:56:41,600 --> 00:56:43,700
0,120 120,1080 1110,1710 1710,1950 1950,2100
know has semantics that you

1794
00:56:43,700 --> 00:56:45,890
0,150 150,630 630,870 870,1380 1500,2190
know allows you to change

1795
00:56:45,890 --> 00:56:47,360
0,210 210,540 540,1080 1080,1380 1380,1470
the raft state| and the
|并且服务器在单个操作中以原子方式进行状态。

1796
00:56:47,360 --> 00:56:48,770
0,300 300,690 690,1110 1110,1290 1290,1410
server state {atomically -} in

1797
00:56:48,770 --> 00:56:50,280
0,270 270,660 660,1200
one single operation.|
|

1798
00:56:51,060 --> 00:56:53,310
0,540 540,1140 1170,1560 1560,2100 2100,2250
{} And {} and that
从某种程度上说，你知道这个行动是存在的，

1799
00:56:53,310 --> 00:56:54,810
0,600 600,720 720,870 870,1110 1110,1500
partly you know that operation

1800
00:56:54,810 --> 00:56:57,900
0,570 810,1710 1710,2160 2160,2730 2760,3090
exists,| {} yeah you try
|是的，你试图限制抽象(电池)。

1801
00:56:57,900 --> 00:56:59,980
0,120 120,480 480,1230
to limit the

1802
00:56:59,980 --> 00:57:01,580
0,450 450,1080
abstraction [batteries].|
|

1803
00:57:03,300 --> 00:57:04,340
0,510
Okay?|
好吧?|

1804
00:57:04,460 --> 00:57:05,150
0,150 150,270 270,480 480,630 630,690
And it turns out you
事实证明，你可以用不同的方式做到这一点，

1805
00:57:05,150 --> 00:57:05,780
0,90 90,210 210,300 300,360 360,630
can do it in different

1806
00:57:05,780 --> 00:57:06,860
0,270 270,360 360,540 540,780 780,1080
ways,| you don't really need,|
|你并不真的需要，|

1807
00:57:06,890 --> 00:57:08,270
0,660 660,780 780,960 960,1080 1080,1380
{} you could have written
你可以用不同的方式写它，

1808
00:57:08,270 --> 00:57:09,140
0,120 120,210 210,450 450,720 720,870
it in different ways,| but
|但你知道，我们的表演实际上是一种更简单的方式。

1809
00:57:09,140 --> 00:57:10,880
0,120 120,300 300,810 1170,1350 1350,1740
you know we are performing

1810
00:57:10,880 --> 00:57:11,570
0,120 120,390 390,510 510,600 600,690
is actually one of the

1811
00:57:11,570 --> 00:57:12,440
0,150 150,420 420,600 600,660 660,870
more simple ways of doing

1812
00:57:12,440 --> 00:57:13,140
0,240
it.|
|

1813
00:57:13,550 --> 00:57:14,540
0,360 360,450 450,570 570,810 810,990
But it will become more
但它将在2d后变得更加清晰。

1814
00:57:14,540 --> 00:57:15,470
0,270 270,390 390,540 540,840 840,930
clear in {2d -}| and
|你会发现服务器和RAFT之间确实存在某种互动，

1815
00:57:15,470 --> 00:57:16,550
0,210 210,450 450,780 780,930 930,1080
you'll see indeed that there's

1816
00:57:16,550 --> 00:57:18,170
0,120 120,240 240,600 630,1260 1260,1620
sort of an interaction between

1817
00:57:18,170 --> 00:57:20,810
0,330 360,1080 1080,1530 1530,2070 2070,2640
the servers and raft, {}|
|

1818
00:57:20,810 --> 00:57:21,590
0,270 270,330 330,510 510,660 660,780
in a way that they
在某种程度上，他们必须和睦相处。

1819
00:57:21,590 --> 00:57:22,900
0,120 120,210 210,390 390,810
have to play along.|
|

1820
00:57:28,700 --> 00:57:29,630
0,120 120,270 270,390 390,690 690,930
How could you repeat when
当RAFT在快照过程中与服务器通信时，您如何重复，

1821
00:57:29,630 --> 00:57:31,040
0,300 300,810 810,930 930,990 990,1410
raft communicates with the servers

1822
00:57:31,040 --> 00:57:32,810
0,90 90,180 180,630 630,1200 1440,1770
in the snapshot process,| so
|因此，快照由服务器驱动。

1823
00:57:32,810 --> 00:57:35,450
0,120 120,930 930,1200 1200,1950 1980,2640
the snapshots are driven by

1824
00:57:35,450 --> 00:57:36,840
0,270 270,930
the servers.|
|

1825
00:57:37,020 --> 00:57:38,190
0,240 240,360 360,750 750,930 930,1170
So the server just says
所以服务生只是说隔一段时间去漂流，

1826
00:57:38,190 --> 00:57:39,120
0,210 210,270 270,330 330,780 780,930
once in a while to

1827
00:57:39,120 --> 00:57:41,370
0,540 930,1380 1380,1590 1590,1620 1620,2250
raft,| I've made a snapshot,|
|我拍了一张快照，|

1828
00:57:41,370 --> 00:57:43,530
0,270 270,390 390,1110 1470,1830 1830,2160
here's my snapshot,| {} and
这是我的快照，|这是一个快照，包括通过i进行的所有操作，

1829
00:57:43,530 --> 00:57:44,610
0,150 150,240 240,270 270,750 750,1080
this is a snapshot includes

1830
00:57:44,610 --> 00:57:46,050
0,210 210,300 300,810 810,1020 1020,1440
all the operations through i,|
|

1831
00:57:46,800 --> 00:57:48,210
0,210 210,390 390,840 840,1020 1020,1410
and then raft {you,know} writes
然后RAFT向I写入快照并截断日志

1832
00:57:48,210 --> 00:57:51,600
0,180 180,1020 1020,2250 2280,2790 2790,3390
the snapshots and truncates log

1833
00:57:51,630 --> 00:57:53,010
0,120 120,270 270,480 480,1020 1170,1380
you know to i| and
|并将所有这些信息写入磁盘。

1834
00:57:53,010 --> 00:57:54,390
0,210 210,330 330,480 480,990 990,1380
writes all that information to

1835
00:57:54,390 --> 00:57:55,940
0,450 510,1110
the disk.|
|

1836
00:57:57,500 --> 00:57:58,850
0,240 240,360 360,480 480,900 900,1350
{} And that's basically all
这基本上就是所有发生的事情，可以说是定期的操作，快照会发生。

1837
00:57:58,850 --> 00:57:59,750
0,150 150,510 510,690 690,780 780,900
what happens sort of, {}

1838
00:57:59,750 --> 00:58:01,790
0,210 210,270 270,660 660,1170 1290,2040
sort of regular operation periodically

1839
00:58:01,790 --> 00:58:03,940
0,480 480,720 720,1170 1170,1620
snapshots happen snapshot happens.|
|

1840
00:58:04,130 --> 00:58:06,020
0,330 330,510 510,1140 1140,1350 1350,1890
Then there's the other case,|
然后是另一种情况，|

1841
00:58:06,020 --> 00:58:07,100
0,450 450,570 570,660 660,960 960,1080
you have to consider is
你必须考虑的是什么时候重启发生。

1842
00:58:07,100 --> 00:58:09,140
0,150 150,630 660,1110 1110,1440 1440,2040
like when {} reboot happens.|
|

1843
00:58:09,650 --> 00:58:10,790
0,360 360,480 480,690 690,750 750,1140
And so when a follower
因此，当追随者重新启动时，

1844
00:58:10,790 --> 00:58:14,450
0,570 570,870 870,1650 1680,2760 3150,3660
reboots,| it actually reboots from
|它实际上是从其持久状态重新启动

1845
00:58:14,450 --> 00:58:16,190
0,300 300,750 750,1230 1230,1530 1530,1740
its persistent state| and so
|因此，包括它的快照，

1846
00:58:16,190 --> 00:58:17,900
0,450 450,570 570,1170
including its snapshot,|
|

1847
00:58:18,080 --> 00:58:20,090
0,420 420,600 600,840 840,930 930,2010
and so when the follower
因此，当跟随者重新启动时，

1848
00:58:20,090 --> 00:58:21,530
0,390 390,570 570,930 930,1350 1350,1440
reboots,| {you,know} basically loads, you
|您知道，基本上加载，您知道快照来自永久磁盘

1849
00:58:21,530 --> 00:58:23,750
0,120 120,930 1290,1650 1650,1890 1890,2220
know snapshot {} from {}

1850
00:58:23,750 --> 00:58:25,130
0,270 270,450 450,870 870,1200 1200,1380
from a persistent disk| and
|并实际重新构建应用程序状态，即键-值存储

1851
00:58:25,130 --> 00:58:27,260
0,330 330,1050 1050,1350 1350,1860 1860,2130
actually reconstructs the application state,

1852
00:58:27,260 --> 00:58:28,730
0,90 90,240 240,600 600,1020 1230,1470
the {key-value -} store| and
|你们将在实验3中完成这项工作，

1853
00:58:28,730 --> 00:58:29,600
0,270 270,390 390,570 570,630 630,870
you'll do this in lab

1854
00:58:29,600 --> 00:58:30,440
0,360 360,510 510,570 570,720 720,840
3,| this is not going
|这不是实验2的问题。

1855
00:58:30,440 --> 00:58:31,010
0,60 60,180 180,240 240,510 510,570
to be an issue of

1856
00:58:31,010 --> 00:58:32,020
0,420
{lab,2}.|
|

1857
00:58:32,140 --> 00:58:33,010
0,150 150,390 390,570 570,660 660,870
The only thing that there's
实验室2唯一会有问题的是，

1858
00:58:33,010 --> 00:58:33,610
0,120 120,180 180,270 270,330 330,600
going to be an issue

1859
00:58:33,610 --> 00:58:35,320
0,180 180,360 360,540 540,870 1140,1710
lab 2 is that, {}|
|

1860
00:58:35,350 --> 00:58:38,950
0,1020 1170,1320 1320,2070 2250,2760 2760,3600
because the followers, because the,
因为追随者，因为，因为木头被砍掉了，对，

1861
00:58:39,310 --> 00:58:40,720
0,660
{}

1862
00:58:42,290 --> 00:58:43,880
0,390 390,690 720,1230 1230,1440 1440,1590
because the log has been

1863
00:58:43,880 --> 00:58:45,320
0,390 480,780 780,990 990,1080 1080,1440
cut, right,| like you know
|就像你知道的，不是把从0到I的所有条目都放在日志中，

1864
00:58:45,380 --> 00:58:46,640
0,450 450,570 570,780 780,1080 1080,1260
instead of like having all

1865
00:58:46,640 --> 00:58:47,780
0,120 120,480 480,630 630,990 990,1140
the entries from 0 to

1866
00:58:47,780 --> 00:58:49,260
0,270 270,390 390,480 480,930
i in the log,|
|

1867
00:58:49,260 --> 00:58:51,090
0,510 510,780 780,1140 1140,1350 1350,1830
{} plus more, so i
加上更多，所以你知道，原木是从i切到n的，对吧，

1868
00:58:51,090 --> 00:58:52,680
0,150 150,390 390,930
you know n

1869
00:58:52,680 --> 00:58:53,880
0,360 360,690 690,960 960,1080 1080,1200
{} the log is being

1870
00:58:53,880 --> 00:58:54,960
0,360 360,480 480,630 630,870 870,1080
cut you know from i

1871
00:58:54,960 --> 00:58:56,660
0,330 330,600 690,1170
to n, right,|
|

1872
00:58:57,760 --> 00:58:59,620
0,750 780,1200 1200,1470 1470,1650 1650,1860
and {} those are part
这些都是原木比较的一部分，

1873
00:58:59,620 --> 00:59:00,520
0,60 60,210 210,480 480,540 540,900
of the log {compation -},|
|

1874
00:59:01,030 --> 00:59:02,860
0,420 420,660 660,870 870,1320 1320,1830
but that also means that
但这也意味着，如果追随者远远落后，

1875
00:59:02,890 --> 00:59:04,030
0,360 360,510 510,600 600,990 990,1140
{} if a follower is

1876
00:59:04,030 --> 00:59:05,530
0,360 360,840 870,1080 1080,1140 1140,1500
far behind,| like for example
|例如，新节点加入系统

1877
00:59:05,530 --> 00:59:07,180
0,330 330,660 660,1020 1020,1110 1110,1650
new node joins the system|
|

1878
00:59:07,360 --> 00:59:09,520
0,180 180,480 480,750 750,1410 1620,2160
and doesn't actually have {}
并且实际上没有日志的开头，也没有快照，

1879
00:59:09,520 --> 00:59:11,200
0,630 660,1170 1170,1290 1290,1380 1380,1680
the beginning of the log

1880
00:59:11,200 --> 00:59:13,200
0,870 870,1560
{nor,the} snapshots,|
|

1881
00:59:13,350 --> 00:59:16,110
0,360 360,990 1050,1710 1740,2490 2520,2760
{} then the raft has
然后，木筏必须将快照传递给该跟随者。

1882
00:59:16,110 --> 00:59:17,820
0,60 60,600 600,660 660,1440 1560,1710
to communicate the snapshot to

1883
00:59:17,820 --> 00:59:19,100
0,180 180,780
that follower.|
|

1884
00:59:19,460 --> 00:59:20,210
0,180 180,270 270,330 330,630 630,750
So in the case that
因此，在追随者是

1885
00:59:20,210 --> 00:59:21,230
0,90 90,480 480,780 780,900 900,1020
the follower is| you know
|你知道，在我之前，因为我们重新加入了实验室，重新加入了木筏星团，

1886
00:59:21,230 --> 00:59:23,480
0,630 630,1050 1380,1650 1650,1800 1800,2250
before i because we rejoined

1887
00:59:23,480 --> 00:59:27,080
0,510 660,870 870,1380 1380,2610 2640,3600
lab and rejoins the raft

1888
00:59:27,080 --> 00:59:29,200
0,450 570,990 990,1560
cluster,| {} the
|领导者实际上必须将您知道的快照设置给跟随者

1889
00:59:29,610 --> 00:59:30,780
0,510 510,720 720,870 870,960 960,1170
leader actually has to set

1890
00:59:30,780 --> 00:59:32,580
0,60 60,810 840,930 930,1050 1050,1800
the snapshot you know to

1891
00:59:32,610 --> 00:59:33,840
0,390 390,600 600,1050 1050,1170 1170,1230
{} the follower| and the
|而追随者基本上是从那里开始的。

1892
00:59:33,840 --> 00:59:35,310
0,360 360,660 660,960 960,1080 1080,1470
follower basically start from there.|
|

1893
00:59:36,280 --> 00:59:37,120
0,150 150,330 330,450 450,720 720,840
And that will show up
这一点将在2d内显现出来

1894
00:59:37,120 --> 00:59:38,080
0,90 90,270 270,660 660,840 840,960
in {2d -}| and so
|因此还有一个额外的RPC，称为快照RPC或安装快照RPC

1895
00:59:38,080 --> 00:59:40,510
0,240 240,330 330,1140 1380,1740 1740,2430
there's an additional {rpc -}

1896
00:59:40,540 --> 00:59:42,130
0,270 270,330 330,870 870,1020 1020,1590
called the snapshot {rpc -}

1897
00:59:42,490 --> 00:59:44,170
0,300 300,480 480,900 900,1650 1650,1680
{} or install snapshot {}

1898
00:59:44,170 --> 00:59:45,970
0,900 900,1110 1110,1320 1320,1740 1740,1800
rpc| and that's described in
|这一点在论文中得到了描述，

1899
00:59:45,970 --> 00:59:47,290
0,60 60,720 750,1080 1080,1200 1200,1320
the paper,| and then you
|然后你将不得不在2维时间内实施。

1900
00:59:47,290 --> 00:59:48,370
0,120 120,330 330,420 420,840 840,1080
will have to implement {in,2d

1901
00:59:48,370 --> 00:59:51,190
0,420 1440,1980 2310,2490 2490,2700 2700,2820
-}.| {In,fact}, which brings me
|事实上，这给我带来了一个好的观点，

1902
00:59:51,190 --> 00:59:52,140
0,480
to

1903
00:59:52,370 --> 00:59:53,980
0,420 420,570 570,1050
a good point,|
|

1904
00:59:54,040 --> 00:59:55,360
0,420 420,540 540,630 630,990 990,1320
actually, let me go to
实际上，让我去[消费者]，

1905
00:59:56,840 --> 00:59:58,010
0,390 390,750 750,990 990,1080 1080,1170
[consumer],| basically brings me to
|基本上把我带到了家庭作业的问题上，

1906
00:59:58,010 --> 01:00:00,080
0,90 90,390 390,1050 1200,1620 1620,2070
the homework question,| which is
|这是等效图2的安装快照RPC，

1907
01:00:00,620 --> 01:00:01,700
0,540
{}

1908
01:00:02,830 --> 01:00:04,480
0,390 390,1050
here's the

1909
01:00:04,780 --> 01:00:07,270
0,630 690,1230 1230,1530 1530,2070 2070,2490
{} install {snapshot,rpc -} for

1910
01:00:07,270 --> 01:00:10,240
0,660 660,1260 1260,1260 1950,2460 2640,2970
equivalent figure {} 2, {}|
|

1911
01:00:10,240 --> 01:00:12,040
0,120 120,330 330,600 600,1170 1350,1800
would then just {} snapshot
然后只需为RPC创建快照

1912
01:00:12,040 --> 01:00:13,780
0,450 450,930 930,1110 1110,1500 1500,1740
rpc| and you actually have
|实际上，您必须在2维时间内实现该功能

1913
01:00:13,780 --> 01:00:15,060
0,120 120,510 510,780
to implement that

1914
01:00:15,460 --> 01:00:18,550
0,510 750,1020 1020,1740 2100,2310 2310,3090
{} in 2d| and one
|在今天的家庭作业中出现的一个问题是，

1915
01:00:18,550 --> 01:00:19,930
0,630 660,900 900,1110 1110,1230 1230,1380
issue that came up in

1916
01:00:19,930 --> 01:00:21,550
0,810 840,1110 1110,1230 1230,1320 1320,1620
the which was the homework

1917
01:00:21,550 --> 01:00:24,010
0,330 330,450 450,990 1230,2070 2220,2460
question for today is,| is
|在木筏上是不可能的，避免它的是不可能的，

1918
01:00:24,010 --> 01:00:26,530
0,270 270,1080 1350,1710 1710,2160 2160,2520
every possible {} in raft,

1919
01:00:26,530 --> 01:00:28,900
0,1290 1290,1680 1680,1890 1890,2160 2160,2370
what avoids it it's not

1920
01:00:28,900 --> 01:00:31,060
0,600 750,1410 1410,1560 1560,1830 1830,2160
possible,| that the state machine
|状态机回滚。

1921
01:00:31,060 --> 01:00:32,260
0,270 270,750
rolls back.|
|

1922
01:00:32,290 --> 01:00:34,090
0,150 150,360 360,1140 1140,1350 1350,1800
Yeah, so {for,example},| {} leader
是的，举个例子，|领袖，因为也许你知道，也许一张旧的快照出现在你知道的追随者那里，

1923
01:00:34,090 --> 01:00:35,650
0,420 420,900 900,1020 1020,1290 1290,1560
since maybe you know {}

1924
01:00:35,650 --> 01:00:37,210
0,330 330,450 450,780 780,1320 1320,1560
maybe an old snapshot shows

1925
01:00:37,210 --> 01:00:38,080
0,270 300,450 450,660 660,810 810,870
up you know at a

1926
01:00:38,080 --> 01:00:40,450
0,540 930,1170 1170,1410 1410,1530 1530,2370
follower,| {} is it possible
|你有没有可能知道这是否可能，

1927
01:00:41,110 --> 01:00:43,240
0,600 630,750 750,1080 1770,2040 2040,2130
that you know if it's

1928
01:00:43,240 --> 01:00:45,700
0,570 570,840 840,2070 2070,2310 2310,2460
possible,| if that follower would
|如果追随者愿意安装快照

1929
01:00:45,700 --> 01:00:46,930
0,360 360,450 450,990 990,1080 1080,1230
install the snapshot| and then
|然后隐式地基本上回滚状态机，

1930
01:00:46,930 --> 01:00:49,000
0,630 630,1200 1230,1740 1740,2010 2010,2070
implicitly basically roll back the

1931
01:00:49,000 --> 01:00:50,500
0,240 240,690 750,1200 1200,1290 1290,1500
state machine,| maybe it already
|也许它已经看到了更多的信息，

1932
01:00:50,500 --> 01:00:52,180
0,120 120,360 360,630 630,1290
has seen more information,|
|

1933
01:00:52,390 --> 01:00:53,350
0,390 390,450 450,540 540,810 810,960
{} you know clear that
你很清楚，这似乎是不对的

1934
01:00:53,350 --> 01:00:54,940
0,240 240,540 630,1260 1260,1500 1500,1590
seems not right| and so
|所以问题是你知道木筏是如何绕过它的

1935
01:00:54,940 --> 01:00:57,100
0,330 330,660 660,1050 1350,1500 1500,2160
the question is you {know,how}

1936
01:00:57,100 --> 01:00:59,230
0,180 180,660 660,990 990,1290 1620,2130
does raft around it| and
|所以也许这是一个很棒的地方，实际上可以快速突破一下，

1937
01:00:59,590 --> 01:01:00,700
0,450 450,630 630,870 870,1020 1020,1110
{} so maybe this is

1938
01:01:00,700 --> 01:01:01,630
0,60 60,270 270,480 480,750 750,930
a great place actually do

1939
01:01:01,630 --> 01:01:03,940
0,0 780,1170 1170,1380 1380,1830 1830,2310
a quick break out,| and
|你可以对作业问题进行几分钟、五分钟的辩论

1940
01:01:03,940 --> 01:01:07,000
0,120 120,240 240,720 720,2790 2790,3060
you can debate that homework

1941
01:01:07,000 --> 01:01:08,170
0,270 270,390 390,450 450,630 630,1170
question for a couple minutes,

1942
01:01:08,410 --> 01:01:10,300
0,450 450,960 1170,1380 1380,1770 1770,1890
five minutes| and then we'll
|然后我们会回来的

1943
01:01:10,300 --> 01:01:12,520
0,150 150,630 810,1440 1440,1890 1890,2220
come back| and we'll talk
|我们将更多地讨论有关快照的内容。

1944
01:01:12,520 --> 01:01:13,870
0,510 510,870 870,1080 1080,1200 1200,1350
about a little bit more

1945
01:01:13,870 --> 01:01:15,000
0,180 180,750
about snapshots.|
|

1946
01:01:16,790 --> 01:01:18,560
0,390 390,630 630,990 990,1230 1230,1770
Lily, will be {} like?|
莉莉，会是什么样的？|

1947
01:01:19,470 --> 01:01:21,360
0,330 330,660 660,1350 1350,1710 1710,1890
No lily, how about I
不，莉莉，不如我试试，你可以的。

1948
01:01:21,360 --> 01:01:25,080
0,480 570,1980 1980,2730 3000,3390 3390,3720
try, you can.| Hold on,
|等一下，我可能得让你来主持

1949
01:01:25,080 --> 01:01:25,890
0,180 180,420 420,540 540,600 600,810
I'll probably have to make

1950
01:01:25,890 --> 01:01:27,120
0,690
you

1951
01:01:27,610 --> 01:01:28,920
0,750
{

1952
01:01:31,420 --> 01:01:33,160
0,480 480,1200 1230,1440 1440,1620 1620,1740
-} host| and then you
|然后你就可以做到了，

1953
01:01:33,160 --> 01:01:34,160
0,90 90,210 210,450
can do it,|
|

1954
01:01:35,320 --> 01:01:36,670
0,270 270,360 360,480 480,720 720,1350
okay, you should be {host,now}.|
好了，你现在应该是主持人了。|

1955
01:01:37,060 --> 01:01:38,740
0,1260
Awesome.|
太棒了。|

1956
01:02:06,930 --> 01:02:09,300
0,480 480,780 780,1380 1470,1710 1740,2370
Alright, {it,should} be.| Okay, thank
好吧，应该是这样的。|好的，谢谢，[]谢谢你这么做。

1957
01:02:09,300 --> 01:02:10,560
0,330 330,450 450,810 810,960 960,1260
you, [] {thank,you} to {do,it}.|
|

1958
01:08:06,790 --> 01:08:07,750
0,330 330,540 540,630 630,840 840,960
And I'll go ahead and
我会让你再做一次主持人。

1959
01:08:07,750 --> 01:08:09,430
0,240 240,1050 1110,1320 1320,1440 1440,1680
make you make you host

1960
01:08:09,430 --> 01:08:10,840
0,360 390,660 660,750 750,1020 1140,1410
again.| That'd be great, thank
|太好了，谢谢你。

1961
01:08:10,840 --> 01:08:11,660
0,270
you.|
|

1962
01:08:35,730 --> 01:08:37,320
0,420 420,870 870,1140 1140,1260 1260,1590
{Let,me,see}, I share my screen.|
让我想想，我分享我的屏幕。|

1963
01:08:37,320 --> 01:08:38,520
0,720

1964
01:08:41,350 --> 01:08:44,420
0,900 930,2430 2430,2550

1965
01:08:50,630 --> 01:08:52,180
0,300

1966
01:08:54,160 --> 01:08:57,000
0,1110 1110,1440 1440,1650 1650,2070
Okay, everybody back online,|
好了，所有人都回到网络上，|

1967
01:08:59,980 --> 01:09:00,880
0,210 210,330 330,390 390,810 840,900
we're good to go,| {can
我们可以走了，|有没有人能回应就太好了。

1968
01:09:00,880 --> 01:09:02,710
0,510 750,1140 1140,1380 1380,1710 1710,1830
-} somebody can respond would

1969
01:09:02,710 --> 01:09:08,200
0,60 60,390 2370,4500 4920,5160 5160,5490
be great.| {Okay,I,can,hear}.| Okay, great,
|好的，我听到了。|好的，很好，我听说了你知道有时候人们，

1970
01:09:08,260 --> 01:09:09,280
0,330 330,510 510,720 720,870 870,1020
I hear it you know

1971
01:09:09,280 --> 01:09:11,350
0,510 510,1050 1290,1770 1770,2010 2010,2070
sometimes {} people,| because of
|因为这里有休息室

1972
01:09:11,350 --> 01:09:12,580
0,90 90,450 450,720 720,930 930,1230
the breakout rooms here| just
|不幸的是，只是学习很快就中断了，

1973
01:09:12,580 --> 01:09:15,910
0,330 330,810 810,1020 1020,1470 2700,3330
learning dropped out soon, unfortunately,|
|

1974
01:09:18,330 --> 01:09:20,720
0,570 600,1140 1170,1980
past {} rooms
过去的房间散开了，

1975
01:09:20,720 --> 01:09:22,040
0,270 270,420 420,570 570,960 960,1320
break up,| but hopefully {}
|但希望的是，我不知道该怎么做，

1976
01:09:23,080 --> 01:09:24,100
0,390 390,480 480,600 600,930 930,1020
and I {don't,know} exactly what

1977
01:09:24,100 --> 01:09:26,020
0,60 60,180 180,360 360,600 1350,1920
to do about that,| I
|我想容错的工作是有点不幸的，

1978
01:09:26,320 --> 01:09:28,180
0,720 720,1050 1050,1260 1260,1650 1650,1860
{guess,work} of fault tolerance is

1979
01:09:28,180 --> 01:09:29,350
0,60 60,240 240,360 360,870 870,1170
a little bit unfortunate,| that
|人们可以直接把它扔掉。

1980
01:09:29,380 --> 01:09:31,040
0,420 420,540 540,690 690,1140
people could just drop.|
|

1981
01:09:32,590 --> 01:09:35,890
0,450 450,810 840,1530 1980,2730 2730,3300
Okay, so {} any I
好的，所以我认为这一次的家庭作业问题是合理而直接的，

1982
01:09:35,920 --> 01:09:37,240
0,630 630,720 720,960 960,1230 1230,1320
think the homework question this

1983
01:09:37,240 --> 01:09:38,890
0,210 210,480 480,810 990,1500 1500,1650
time around was reasonable sort

1984
01:09:38,890 --> 01:09:40,090
0,60 60,630 630,690 690,1110 1110,1200
of straightforward,| you know it
|你知道，你必须知道你不能安装旧的快照，

1985
01:09:40,090 --> 01:09:40,840
0,210 210,270 270,360 360,450 450,750
has to be the case

1986
01:09:40,840 --> 01:09:42,370
0,330 330,450 450,690 690,930 930,1530
that you know you cannot

1987
01:09:42,730 --> 01:09:44,620
0,480 480,990 990,1080 1080,1230 1230,1890
{} install an old snapshot,|
|

1988
01:09:44,650 --> 01:09:46,960
0,600 600,720 720,870 870,1560 1590,2310
because you know a service
因为您知道有一项服务可能有更新的快照，

1989
01:09:46,960 --> 01:09:47,950
0,240 240,510 510,750 750,930 930,990
that might have had a

1990
01:09:47,950 --> 01:09:49,270
0,240 240,510 510,990 990,1170 1170,1320
more recent snapshot,| might have
|可能已经回复了客户，

1991
01:09:49,270 --> 01:09:50,590
0,450 450,510 510,600 600,1050 1050,1320
responded to the client,| saying,
|说，是的，行动成功了，

1992
01:09:50,590 --> 01:09:52,580
0,360 360,450 450,900 900,1500
yeah the operation succeeded,|
|

1993
01:09:52,640 --> 01:09:53,630
0,420 420,600 600,780 780,870 870,990
{} and then if you
然后，如果您要恢复旧的快照，

1994
01:09:53,630 --> 01:09:55,310
0,180 180,720 720,900 900,1110 1110,1680
would restore an old snapshot,|
|

1995
01:09:55,310 --> 01:09:56,990
0,510 540,900 900,1080 1080,1410 1410,1680
then {} you basically back
然后你基本上就会回到州政府

1996
01:09:56,990 --> 01:09:57,680
0,120 120,180 180,240 240,600 600,690
out to the state| and
|客户机会看到肯定有旧版本的服务器，

1997
01:09:57,680 --> 01:09:58,820
0,60 60,480 480,660 660,810 810,1140
the {client,would} see there's certainly

1998
01:09:58,820 --> 01:09:59,870
0,90 90,330 330,690 690,810 810,1050
an old version of the

1999
01:09:59,870 --> 01:10:01,190
0,300 300,420 420,600 600,930 930,1320
server,| so that's certainly not
|所以这肯定不是合法的，

2000
01:10:01,220 --> 01:10:03,470
0,150 180,840 1590,2010 2010,2130 2130,2250
a legit,| {} and so
|所以有一点，

2001
01:10:03,470 --> 01:10:04,790
0,150 150,180 180,330 330,1020 1080,1320
there's a little bit,| you
|您绝对应该拒绝所有快照，

2002
01:10:04,790 --> 01:10:06,260
0,90 90,390 390,750 750,870 870,1470
should definitely reject all snapshots,|
|

2003
01:10:06,260 --> 01:10:06,770
0,150 150,210 210,300 300,420 420,510
but you have to be
但你必须稍微小心一点，

2004
01:10:06,770 --> 01:10:08,540
0,60 60,210 210,330 330,930 1230,1770
a little bit careful, {}|
|

2005
01:10:08,540 --> 01:10:10,670
0,990 990,1110 1110,1380 1380,1740 1770,2130
if you know the follower
如果你知道关注者的日志超出了快照的范围，

2006
01:10:10,670 --> 01:10:11,660
0,180 180,240 240,630 630,780 780,990
has a log that goes

2007
01:10:11,660 --> 01:10:13,490
0,540 540,630 630,1290 1290,1620 1620,1830
beyond the snapshot,| you have
|你必须将剩余的部分保留在日志中，

2008
01:10:13,490 --> 01:10:16,430
0,360 390,930 960,1530 1920,2730 2730,2940
to keep that remained {}

2009
01:10:16,430 --> 01:10:17,720
0,240 240,330 330,420 420,960
part of the log,|
|

2010
01:10:17,720 --> 01:10:18,890
0,180 180,480 480,840 840,990 990,1170
{} because basically you have
因为基本上你已经向一位领导人承诺了，

2011
01:10:18,890 --> 01:10:20,510
0,330 330,450 450,510 510,1050 1260,1620
promised to a leader, {}|
|

2012
01:10:20,510 --> 01:10:21,860
0,330 330,540 540,660 660,1140 1140,1350
that you have accepted a
您已经接受了一条消息

2013
01:10:21,860 --> 01:10:23,060
0,360 360,450 450,570 570,720 720,1200
message| and so you can't
|因此，您不能删除快照未涵盖的日志的其余部分。

2014
01:10:23,060 --> 01:10:25,400
0,660 660,750 750,1320 1530,1980 2010,2340
delete you know the rest

2015
01:10:25,400 --> 01:10:26,660
0,90 90,180 180,570 570,1140 1140,1260
of the log, that was

2016
01:10:26,660 --> 01:10:28,820
0,240 240,690 720,1200 1200,1620
not covered by the

2017
01:10:28,910 --> 01:10:30,560
0,510 510,1080
{} snapshot.|
|

2018
01:10:30,710 --> 01:10:31,760
0,510
Okay?|
好吧?|

2019
01:10:35,210 --> 01:10:36,440
0,240 240,360 360,990 990,1110 1110,1230
Okay, so then let me
好吧，那就让我回来吧。

2020
01:10:36,440 --> 01:10:38,780
0,810 1050,1770
return {}.|
|

2021
01:10:41,220 --> 01:10:42,960
0,420 420,570 570,630 630,1080 1080,1740
We had a question, actually.|
实际上，我们有个问题。|

2022
01:10:42,990 --> 01:10:44,860
0,690 720,930 930,1290
okay, go ahead.|
好的，去吧。|

2023
01:10:44,890 --> 01:10:46,870
0,780 810,1320 1320,1680 1680,1800 1800,1980
So it says, it says
所以它说，它在报纸上说对了，

2024
01:10:46,870 --> 01:10:48,160
0,90 90,210 210,600 600,990 1020,1290
in the paper right,| if
|如果跟随者接收到快照，

2025
01:10:48,160 --> 01:10:50,290
0,780 780,930 930,1260 1260,1320 1320,2130
the follower receives a snapshot,|
|

2026
01:10:50,470 --> 01:10:51,790
0,360 360,450 450,960 960,1110 1110,1320
that's a prefix of its
这是它的日志的前缀，

2027
01:10:51,790 --> 01:10:53,620
0,570
log,|
|

2028
01:10:53,620 --> 01:10:57,490
0,570 1020,2310 2430,3210 3210,3570 3570,3870
{} the log entries covered
由快照覆盖的日志条目被删除，

2029
01:10:57,490 --> 01:10:58,900
0,120 120,210 210,840 840,900 900,1410
by the snapshot are deleted,|
|

2030
01:10:58,900 --> 01:10:59,950
0,150 150,240 240,480 480,540 540,1050
but the rest are kept.|
但其余的都保留了下来。|

2031
01:11:00,010 --> 01:11:03,250
0,870 1140,1290 1290,1530 1530,2190 2340,3240
Yep.| In that case, {}
是啊。|在这种情况下，状态机不会被覆盖，对，在这种情况下。

2032
01:11:04,480 --> 01:11:07,420
0,300 300,420 420,2520 2520,2820 2820,2940
it is {the,state,machine} wouldn't be

2033
01:11:07,420 --> 01:11:09,250
0,660 660,1050 1050,1140 1140,1320 1320,1830
overwritten, right, in this case.|
|

2034
01:11:09,920 --> 01:11:11,360
0,360 360,510 510,810 810,1140 1140,1440
Okay, so the interesting question
好的，那么有趣的问题是，

2035
01:11:11,360 --> 01:11:12,380
0,120 120,270 270,510 510,690 690,1020
is,| like how does a
|例如，快照如何与状态机通信

2036
01:11:12,380 --> 01:11:14,810
0,810 840,1290 1290,1500 1500,2100 2100,2430
{} snapshot get communicated to

2037
01:11:14,810 --> 01:11:18,500
0,1020 2160,2430 2430,2820 2820,3420 3450,3690
the state machine| and as
|正如你将在实验3中看到的

2038
01:11:18,500 --> 01:11:19,640
0,180 180,420 420,510 510,780 780,1140
you'll see in lab 3|
|

2039
01:11:19,640 --> 01:11:20,240
0,90 90,150 150,360 360,510 510,600
and it goes over the
然后它通过所申请的通道，

2040
01:11:20,240 --> 01:11:21,480
0,360 360,750
applied channel,|
|

2041
01:11:22,080 --> 01:11:24,720
0,390 390,660 660,1320 1950,2340 2340,2640
and so the state machine
因此，状态机将在应用的通道上获取快照

2042
01:11:24,720 --> 01:11:25,800
0,120 120,300 300,330 330,900 900,1080
will get a snapshot over

2043
01:11:25,800 --> 01:11:28,020
0,90 90,450 450,840 1290,1770 1770,2220
the applied channel| and then
|然后就由它来做正确的事情了。

2044
01:11:28,020 --> 01:11:29,190
0,330 330,480 480,630 630,1050 1050,1170
it's up to it to

2045
01:11:29,190 --> 01:11:30,440
0,120 120,270 270,450 450,660
do the right thing.|
|

2046
01:11:32,030 --> 01:11:33,060
0,540
Okay.|
好吧。|

2047
01:11:33,060 --> 01:11:34,000
0,360
Okay?|
好吧?|

2048
01:11:34,350 --> 01:11:35,620
0,660
Oops.|
哎呀。|

2049
01:11:36,370 --> 01:11:37,780
0,450 450,780 870,1140 1140,1320 1320,1410
Okay good.| So just a
好的很好。|所以我想跟你说一下，抱歉，

2050
01:11:37,780 --> 01:11:39,970
0,450 450,540 540,750 750,1230 1290,2190
follow-up on that, sorry, {}|
|

2051
01:11:40,270 --> 01:11:41,560
0,360 360,840 840,1020 1020,1080 1080,1290
though I was a little
虽然我有一点，

2052
01:11:41,560 --> 01:11:42,640
0,180 180,360 360,630 630,840 840,1080
bit,| so that makes sense
|所以这对我来说是有意义的，

2053
01:11:42,640 --> 01:11:43,540
0,90 90,360 420,570 570,810 810,900
to me,| the part that
|让我感到困惑的是，

2054
01:11:43,540 --> 01:11:44,650
0,60 60,210 210,630 630,780 780,1110
I was confused by is,|
|

2055
01:11:44,650 --> 01:11:46,820
0,390 390,840 990,1200 1200,1650
in the, in the
在图13中，就像描述安装快照RPC的框一样，

2056
01:11:46,990 --> 01:11:48,490
0,300 300,840 840,990 990,1140 1140,1500
figure 13 like the box

2057
01:11:48,490 --> 01:11:50,230
0,150 150,690 690,1050 1050,1590 1590,1740
that describes install snapshot {rpc

2058
01:11:50,230 --> 01:11:52,580
0,510 1170,1740
-} {},|
|

2059
01:11:53,000 --> 01:11:55,130
0,300 330,1050 1080,1350 1350,1860 1890,2130
on 6, it's says if
如果现有日志条目与术语快照Last Include条目具有相同的索引，

2060
01:11:55,130 --> 01:11:56,450
0,480 480,750 750,1020 1020,1200 1200,1320
existing log entry has the

2061
01:11:56,450 --> 01:11:57,800
0,390 390,840 840,960 960,1050 1050,1350
same index as the term

2062
01:11:57,800 --> 01:12:00,040
0,690 690,960 960,1230 1230,1680
snapshot last include entry,|
|

2063
01:12:01,000 --> 01:12:02,280
0,720

2064
01:12:04,890 --> 01:12:06,140
0,270 270,330 330,630
well, hold on,
等等，我可能是看错了。

2065
01:12:06,610 --> 01:12:07,750
0,210 210,450 450,570 570,810 810,1140
I may have just misread

2066
01:12:07,750 --> 01:12:09,040
0,150 300,690 690,930 930,1020 1020,1290
it.| Okay, why do you
|好吧，为什么你一直在想这件事，

2067
01:12:09,070 --> 01:12:10,120
0,210 210,450 450,630 630,840 840,1050
keep thinking about it,| look
|看看如果。

2068
01:12:10,120 --> 01:12:12,040
0,330 330,690 690,810 810,1350 1350,1920
if.| I have a question,
|我有个问题，我要问你。

2069
01:12:12,160 --> 01:12:13,660
0,420 420,720 990,1200 1200,1380 1380,1500
I'll ask you.| {I'll,take} it
|如果你想的话，我会把它离线，我们会在课后马上做。

2070
01:12:13,660 --> 01:12:14,650
0,420 420,630 630,780 780,900 900,990
offline and we'll do it

2071
01:12:14,650 --> 01:12:15,400
0,180 180,360 360,600 600,660 660,750
right after lecture, if you

2072
01:12:15,400 --> 01:12:16,240
0,150 150,270
want to.|
|

2073
01:12:16,900 --> 01:12:17,710
0,480 510,570 570,690 690,750 750,810
Okay, I want to go
好的，我真的想回去几分钟，

2074
01:12:17,710 --> 01:12:18,910
0,240 240,540 540,900 900,990 990,1200
back actually for a couple

2075
01:12:18,910 --> 01:12:19,750
0,450 450,540 540,630 630,750 750,840
minutes,| you know that we
|你知道，我们还在讨论如何实际使用浮筏，

2076
01:12:19,750 --> 01:12:21,220
0,150 150,600 600,870 870,1170 1170,1470
have remaining and talk about

2077
01:12:21,220 --> 01:12:23,080
0,360 360,660 660,1200 1560,1770 1770,1860
actually using raft,| which is
|这是我们在这里基本上已经在讨论的关于服务器的问题

2078
01:12:23,080 --> 01:12:24,070
0,210 210,270 270,360 360,870 870,990
sort of a discussion that

2079
01:12:24,070 --> 01:12:25,690
0,120 120,600 600,960 960,1260 1260,1620
we're already basically having here

2080
01:12:27,500 --> 01:12:29,180
0,330 330,690 690,750 750,1320 1440,1680
{} for {} servers| and
|因此，我再次将重点放在复制的键值服务上，

2081
01:12:29,180 --> 01:12:30,020
0,120 120,510 510,660 660,780 780,840
so again I'm going to

2082
01:12:30,020 --> 01:12:31,190
0,330 330,480 480,570 570,1020 1020,1170
focus on the replicated {key-value

2083
01:12:31,190 --> 01:12:32,240
0,300 300,660 660,870 870,990 990,1050
-} service,| that's going to
|这将是实验3的主题。

2084
01:12:32,240 --> 01:12:33,170
0,150 150,240 240,570 570,690 690,930
be the topic of lab

2085
01:12:33,170 --> 01:12:33,980
0,270
3.|
|

2086
01:12:34,130 --> 01:12:35,750
0,150 150,570 720,960 960,1350 1380,1620
And so just to go
因此，让我们回到几乎就像第一块板上的一个

2087
01:12:35,750 --> 01:12:37,250
0,330 330,870 870,1230 1230,1350 1350,1500
back to almost like one

2088
01:12:37,250 --> 01:12:38,720
0,90 90,180 180,750 840,1320 1320,1470
of the first board| that
|是我在木筏讲座开始时画的，

2089
01:12:38,720 --> 01:12:40,160
0,330 330,810 810,990 990,1200 1200,1440
I drew at the beginning

2090
01:12:40,160 --> 01:12:41,660
0,60 60,150 150,420 420,810 1230,1500
of the raft lectures, {}|
|

2091
01:12:41,660 --> 01:12:43,550
0,360 360,630 630,1080 1110,1740 1740,1890
here's like our boxes, you
这就像我们的盒子，你知道的，与三个复制品相对应，

2092
01:12:43,550 --> 01:12:45,590
0,90 90,270 270,780 780,1290 1560,2040
know that correspond to the

2093
01:12:45,830 --> 01:12:47,240
0,270 270,930
three replicas,|
|

2094
01:12:48,680 --> 01:12:50,900
0,570 750,1200 1200,1410 1410,1860 1860,2220
{} and each replica correct
你所知道的每个复制品都有一种分裂的两部分，

2095
01:12:50,900 --> 01:12:51,830
0,90 90,240 240,660 660,720 720,930
you know has a sort

2096
01:12:51,830 --> 01:12:52,980
0,60 60,570
of split

2097
01:12:53,520 --> 01:12:54,780
0,360 360,810 810,1050 1050,1170 1170,1260
two pieces,| one is the
|一个是服务部分，

2098
01:12:54,780 --> 01:12:56,200
0,420 420,870
service part,|
|

2099
01:12:56,540 --> 01:12:57,940
0,840

2100
01:13:01,180 --> 01:13:02,050
0,210 210,390 390,510 510,600 600,870
and one is the raft
一个是木筏图书馆，对吧，

2101
01:13:02,050 --> 01:13:03,140
0,510
library,

2102
01:13:04,070 --> 01:13:04,970
0,210 210,330 330,420 420,720 720,900
right,| then we know that
|那么我们知道他们基本上是通过应用通道来沟通这两个

2103
01:13:04,970 --> 01:13:06,890
0,360 360,630 630,1260 1260,1470 1470,1920
basically they communicate these two

2104
01:13:06,890 --> 01:13:08,990
0,450 450,540 540,900 900,1320 1770,2100
through the apply channel| unless
|除非信息从RAFT流向服务服务器的方式。

2105
01:13:08,990 --> 01:13:10,700
0,120 120,270 270,540 900,1440 1440,1710
the way that information flows

2106
01:13:10,700 --> 01:13:12,360
0,120 120,390 390,480 480,1080
from raft to service

2107
01:13:12,360 --> 01:13:13,460
0,570
servers.|
|

2108
01:13:16,000 --> 01:13:17,800
0,120 120,270 270,900 900,1050 1050,1800
And so clients {you,know} interact
因此，您知道的客户端与服务器进行交互，而不是直接使用RAFT，

2109
01:13:19,530 --> 01:13:20,820
0,210 210,480 480,570 570,1200 1200,1290
{you,know} with the servers, you

2110
01:13:20,820 --> 01:13:22,740
0,270 270,630 630,720 720,1320 1620,1920
not directly the raft,| so
|所以我们这里有个客户，

2111
01:13:22,740 --> 01:13:24,030
0,120 120,270 270,330 330,690 690,1290
we have a client here,|
|

2112
01:13:24,580 --> 01:13:25,630
0,90 90,180 180,390 390,960 960,1050
you know that sends you
您知道，这会向您发送服务的PUT操作或GET操作之类的操作，

2113
01:13:25,630 --> 01:13:26,980
0,60 60,570 570,720 720,960 960,1350
an operation like {a,put} operate

2114
01:13:26,980 --> 01:13:27,880
0,120 120,330 330,750 750,840 840,900
or get operation for the

2115
01:13:27,880 --> 01:13:30,220
0,690 840,990 990,1350 1350,2040 2040,2340
service,| the service receives this
|该服务接收此操作

2116
01:13:30,220 --> 01:13:32,080
0,750 900,1080 1080,1200 1200,1590 1590,1860
operation| and it basically calls
|它基本上调用了Start，你知道，对于那个操作，

2117
01:13:32,080 --> 01:13:33,180
0,600
start

2118
01:13:35,520 --> 01:13:36,870
0,180 180,300 300,450 450,1140 1140,1350
{you,know} for that operation,| quick
|QUICK RAFT能和你知道的其他RAFT图书馆聊天吗，

2119
01:13:36,870 --> 01:13:38,850
0,570 570,780 780,1500 1500,1860 1860,1980
raft does it {chit,chat} you

2120
01:13:38,850 --> 01:13:39,750
0,120 120,510 540,660 660,780 780,900
know with you know the

2121
01:13:39,750 --> 01:13:40,920
0,600
other

2122
01:13:40,920 --> 01:13:43,530
0,420 420,1140 1680,1800 1800,2100 2130,2610
raft libraries,| you know messages
|您知道，在操作提交后的某个时刻，消息可能会回流

2123
01:13:43,530 --> 01:13:44,640
0,150 150,390 390,810 810,1020 1020,1110
can flow back in at

2124
01:13:44,640 --> 01:13:45,570
0,150 150,360 360,420 420,840 840,930
some point the operation is

2125
01:13:45,570 --> 01:13:46,890
0,420 420,510 510,690 690,810 810,1320
committed| and then it actually
|实际上，你知道，拉夫会说，

2126
01:13:46,890 --> 01:13:48,360
0,270 270,660 660,1050 1050,1230 1230,1470
is {you,know} raft will say,|
|

2127
01:13:48,360 --> 01:13:50,220
0,330 330,420 420,870 870,1140 1440,1860
okay this operation is ready
好了，这次行动已经准备好了，

2128
01:13:50,220 --> 01:13:51,570
0,90 90,180 180,630 840,1200 1200,1350
to be committed,| {sends,it} on
|在应用的通道上发送它

2129
01:13:51,570 --> 01:13:53,220
0,90 90,450 450,990 1110,1290 1290,1650
the applied channel| and service
|然后服务基本上执行该操作并将响应发回，

2130
01:13:53,220 --> 01:13:55,020
0,180 180,510 510,930 930,1020 1020,1800
then basically execute the operation

2131
01:13:55,350 --> 01:13:56,880
0,360 360,600 600,660 660,1080 1080,1530
and send the response back,|
|

2132
01:13:56,880 --> 01:13:58,590
0,480 480,570 570,1050 1050,1140 1140,1710
after it executed the operation,
执行完操作后，向客户端返回响应，

2133
01:13:58,590 --> 01:13:59,940
0,360 360,570 570,660 660,1080 1080,1350
response back to {the,client},| saying
|好的，你知道的价值或者你知道的20号键是这样的，对，

2134
01:13:59,940 --> 01:14:01,950
0,630 690,990 990,1620 1620,1920 1920,2010
well the value or the

2135
01:14:01,950 --> 01:14:03,480
0,390 390,480 480,630 630,900 900,1530
get you know key 20

2136
01:14:03,480 --> 01:14:04,620
0,90 90,210 210,360 360,810
you know is this,

2137
01:14:05,220 --> 01:14:05,940
0,240 240,360 360,510 510,630 630,720
right,| so this is a
|所以这是一个GET操作或PUT操作，

2138
01:14:05,940 --> 01:14:08,760
0,210 210,900 1410,2340
get operation {or,put},|
|

2139
01:14:09,500 --> 01:14:10,550
0,300 300,450 450,540 540,960 960,1050
and this is basically the
这基本上就是GET的价值，或者你知道OK会成功。

2140
01:14:10,550 --> 01:14:12,560
0,540 540,1230 1260,1740 1770,1860 1860,2010
value {for,the,get} or you know

2141
01:14:12,560 --> 01:14:14,660
0,450 450,630 960,1530
okay would succeeded.|
|

2142
01:14:14,660 --> 01:14:15,600
0,390
Okay?|
好吧?|

2143
01:14:15,750 --> 01:14:16,860
0,330 330,450 450,600 600,1020 1020,1110
And we also discovered in
我们还在上一节课中发现，

2144
01:14:16,860 --> 01:14:19,590
0,60 60,360 360,960 1440,2190 2400,2730
the last lecture,| {} it
|可能是这样的，

2145
01:14:19,590 --> 01:14:20,700
0,210 210,300 300,360 360,690 690,1110
might be the case,| that
|客户端向服务发送RPC并且该RPC消失，

2146
01:14:20,700 --> 01:14:22,890
0,570 600,1080 1170,1440 1440,1560 1560,2190
the client sends an rpc

2147
01:14:22,890 --> 01:14:25,260
0,540 540,690 690,1170 1170,1980 1980,2370
to {} {the,service} {} {and,the,rpc}

2148
01:14:25,260 --> 01:14:26,880
0,660 780,930 930,1020 1020,1290 1290,1620
disappears,| so the client must
|所以客户必须，必须重新发送，

2149
01:14:26,880 --> 01:14:28,420
0,240 240,450 450,1050
yeah must resend,|
|

2150
01:14:28,420 --> 01:14:29,470
0,450 450,660 660,780 780,870 870,1050
{} and by the time
到了转寄的时候，

2151
01:14:29,470 --> 01:14:30,640
0,60 60,480 480,900 900,990 990,1170
the resends actually,| you know
|你知道，领导者可能不再是领导者了。

2152
01:14:30,640 --> 01:14:31,540
0,210 210,450 450,600 600,780 780,900
the leader might not be

2153
01:14:31,540 --> 01:14:32,900
0,120 120,390 390,810
the leader anymore.|
|

2154
01:14:33,080 --> 01:14:34,160
0,360 360,540 540,600 600,750 750,1080
And so in that case,|
所以在这种情况下，|

2155
01:14:34,160 --> 01:14:34,940
0,120 120,360 360,480 480,660 660,780
it has to sort of
它必须将自己重新定向到另一位领导人，

2156
01:14:34,940 --> 01:14:36,560
0,510 510,900 900,960 960,1260 1260,1620
redirect itself to another leader,|
|

2157
01:14:37,070 --> 01:14:37,940
0,210 210,510 510,660 660,780 780,870
so basically when there is
所以基本上，当有一点代码时

2158
01:14:37,940 --> 01:14:38,930
0,60 60,240 240,360 360,450 450,990
a little bit of code|
|

2159
01:14:38,930 --> 01:14:39,500
0,120 120,150 150,270 270,390 390,570
with a way to think
有一种思考这件事的方法。

2160
01:14:39,500 --> 01:14:40,620
0,240 240,630
about this.|
|

2161
01:14:40,620 --> 01:14:41,280
0,270 270,330 330,480 480,600 600,660
There's a little bit of
在客户端有一些代码，

2162
01:14:41,280 --> 01:14:42,570
0,300 300,390 390,450 450,870 870,1290
code at the client side,|
|

2163
01:14:42,690 --> 01:14:44,790
0,240 240,330 330,1260 1260,1890 1890,2100
sort of understands replicated state
对复制的状态机有一点了解，

2164
01:14:44,790 --> 01:14:46,410
0,270 270,330 330,540 540,870 1260,1620
machines a little bit, {}|
|

2165
01:14:46,410 --> 01:14:48,060
0,360 360,540 540,930 930,1050 1050,1650
and it maintains some information,|
它维护着一些信息，|

2166
01:14:48,060 --> 01:14:49,170
0,180 180,600 600,780 780,990 990,1110
it maintains like who's the
它维持着就像谁是领导者

2167
01:14:49,170 --> 01:14:50,970
0,510 810,1350 1350,1500 1500,1710 1710,1800
leader| and who are the
|还有谁是其他的追随者，

2168
01:14:50,970 --> 01:14:52,540
0,330 330,1050
other followers,|
|

2169
01:14:52,540 --> 01:14:53,650
0,240 240,360 360,570 570,690 690,1110
and so that can switch
因此，如果有必要，这可以在它们之间切换。

2170
01:14:53,650 --> 01:14:56,020
0,570 570,960 1110,1380 1380,1770 1770,2370
between them, {} if necessary.|
|

2171
01:14:57,690 --> 01:14:59,220
0,210 210,630 630,1140 1170,1440 1440,1530
We also, {} last time
我们也，上一次我们谈到了它的可能性，

2172
01:14:59,220 --> 01:14:59,880
0,90 90,300 300,330 330,510 510,660
we talked a little bit

2173
01:14:59,880 --> 01:15:01,410
0,270 270,510 510,1110 1110,1350 1350,1530
about its possible,| that you
|你知道手术是可以复制的，对吧，

2174
01:15:01,410 --> 01:15:02,970
0,270 270,720 720,840 840,960 960,1560
know operation can be duplicated,

2175
01:15:03,000 --> 01:15:04,740
0,270 270,750 1050,1170 1170,1260 1260,1740
right,| because you know the,
|因为你知道，客户端可能会向服务发送一个操作PUT操作，

2176
01:15:05,420 --> 01:15:07,160
0,930 960,1410 1410,1470 1470,1680 1680,1740
the client may send an

2177
01:15:07,160 --> 01:15:08,360
0,450 450,690 690,1050 1050,1140 1140,1200
operation put operation to the

2178
01:15:08,360 --> 01:15:12,050
0,690 990,2220 2220,2910 2940,3330 3360,3690
service,| {} in the you
|在你知道客户得不到回应的情况下，

2179
01:15:12,050 --> 01:15:13,430
0,120 120,750 780,1080 1080,1260 1260,1380
know the client doesn't get

2180
01:15:13,430 --> 01:15:15,380
0,60 60,780 1020,1620 1620,1680 1680,1950
a response,| but the servers
|但服务器实际上收到了，

2181
01:15:15,380 --> 01:15:16,580
0,180 180,720 720,870 870,960 960,1200
actually received,| so it went
|所以它经历了，你知道的，经历了整个手术程序，

2182
01:15:16,580 --> 01:15:17,720
0,420 420,480 480,660 660,870 870,1140
through, you know went through

2183
01:15:17,720 --> 01:15:20,750
0,600 600,900 900,1650 1650,2340 2580,3030
the whole operation sequence, {}|
|

2184
01:15:20,750 --> 01:15:24,050
0,90 90,270 900,1560 1560,2250 2280,3300
you know starting the raft
你知道启动木筏附着物可以经历木筏运动

2185
01:15:24,050 --> 01:15:25,310
0,30 30,480 480,660 660,1020 1020,1260
{appends -} can go through

2186
01:15:25,310 --> 01:15:26,780
0,510 540,870 870,1290 1290,1380 1380,1470
the raft motion| and then
|然后基本上将其发送到申请通道。

2187
01:15:26,780 --> 01:15:27,710
0,300 300,570 570,660 660,780 780,930
basically sending it out to

2188
01:15:27,710 --> 01:15:28,860
0,240 240,600
apply channel.|
|

2189
01:15:28,890 --> 01:15:30,270
0,120 120,360 360,780 780,1080 1080,1380
And so basically {the,client} actually
因此，基本上客户端实际上可能会发送第二个消息，

2190
01:15:30,270 --> 01:15:31,620
0,420 420,600 600,660 660,930 930,1350
might send a second one,|
|

2191
01:15:33,240 --> 01:15:35,520
0,630 630,780 780,990 990,1620 1710,2280
and you know the basically
你知道重复的基本原理，

2192
01:15:35,520 --> 01:15:37,380
0,120 120,270 270,1020 1020,1620 1650,1860
for the repetition,| {} you
|你知道，这可能会通过你知道的木筏图书馆，

2193
01:15:37,380 --> 01:15:38,370
0,60 60,390 390,570 570,810 810,990
know that might actually go

2194
01:15:38,370 --> 01:15:40,320
0,570 600,690 690,810 810,1200 1500,1950
through you know the raft

2195
01:15:40,320 --> 01:15:41,280
0,270 270,540 540,750 750,900 900,960
library too,| comes out in
|在应用通道中出现

2196
01:15:41,280 --> 01:15:42,420
0,90 90,360 360,750 750,870 870,1140
the apply channel| and so
|所以你知道必须做一些重复检测和检测

2197
01:15:42,420 --> 01:15:43,500
0,390 390,540 540,630 630,810 810,1080
{you,know} have to do some

2198
01:15:43,500 --> 01:15:45,150
0,360 360,750 750,870 870,1350 1350,1650
duplicate detection and detection| and
|有多种方式可以做到这一点，

2199
01:15:45,150 --> 01:15:46,140
0,450 450,630 630,690 690,930 930,990
multiple ways of doing it,|
|

2200
01:15:46,140 --> 01:15:46,860
0,120 120,300 300,480 480,600 600,720
but either way you have
但无论哪种方式，你都必须重复检测。

2201
01:15:46,860 --> 01:15:48,340
0,60 60,540 540,990
to duplicate detection.|
|

2202
01:15:48,520 --> 01:15:50,590
0,210 210,300 300,600 600,1110 1380,2070
So, in addition to a
所以，除了一种类似于领导者的维护状态

2203
01:15:50,620 --> 01:15:52,300
0,210 210,270 270,840 840,1290 1290,1680
sort of maintain state about

2204
01:15:52,300 --> 01:15:54,370
0,210 210,600 630,1350 1380,1920 1920,2070
like what the leader| and
|而追随者们也确实有了一个想法，

2205
01:15:54,370 --> 01:15:56,350
0,60 60,420 420,810 960,1530 1710,1980
the followers are {} {put,and}

2206
01:15:56,350 --> 01:15:57,370
0,180 180,420 420,750 750,930 930,1020
get also actually have an

2207
01:15:57,370 --> 01:15:58,340
0,480
idea,|
|

2208
01:15:58,340 --> 01:15:59,780
0,360 360,450 450,720 720,1260 1260,1440
{you,know} an id associated with
您知道与之相关联的ID

2209
01:15:59,780 --> 01:16:00,980
0,210 210,570 660,750 750,1080 1080,1200
it| and we're going to
|我们将保留最后一个ID，

2210
01:16:00,980 --> 01:16:02,240
0,480 480,660 660,750 750,840 840,1260
maintain what is the last

2211
01:16:02,270 --> 01:16:03,590
0,570 570,780 780,930 930,1230 1230,1320
id,| that it actually is
|它实际上是在试图通过

2212
01:16:03,590 --> 01:16:05,150
0,270 270,330 330,480 480,990 1140,1560
trying to get through| and
|这实际上是用来重复检测的。

2213
01:16:05,150 --> 01:16:06,170
0,180 180,270 270,690 690,810 810,1020
that is used to actually

2214
01:16:06,170 --> 01:16:07,660
0,510 510,990
duplicate detection.|
|

2215
01:16:08,560 --> 01:16:09,280
0,120 120,270 270,480 480,660 660,720
And this little piece of
这一小段代码通常被称为职员，

2216
01:16:09,280 --> 01:16:10,510
0,390 390,480 480,690 690,1140 1140,1230
code is often called a

2217
01:16:10,510 --> 01:16:11,660
0,600
clerk,|
|

2218
01:16:11,880 --> 01:16:13,230
0,120 120,300 300,540 750,1230 1230,1350
you know the clerk that
你知道与服务互动的职员吗？

2219
01:16:13,230 --> 01:16:14,880
0,660 720,990 990,1080 1080,1530 1530,1650
interacts with the service| and
|它会做一些工作来与您实际完成写作的服务进行协作

2220
01:16:14,880 --> 01:16:15,480
0,90 90,240 240,300 300,510 510,600
it does a little bit

2221
01:16:15,480 --> 01:16:16,950
0,90 90,630 630,750 750,1350 1350,1470
of work to collaborate with

2222
01:16:16,950 --> 01:16:17,760
0,60 60,390 390,480 480,690 690,810
the service you actually get

2223
01:16:17,760 --> 01:16:18,960
0,60 60,450 450,750 750,1020 1020,1200
the writing done| and so
|因此我们有多个客户，

2224
01:16:18,960 --> 01:16:20,720
0,90 90,210 210,570 570,1260
we have multiple clients,|
|

2225
01:16:20,870 --> 01:16:23,780
0,300 300,870 870,1680 2220,2820 2820,2910
all half a clerk of
如果你愿意的话，都是图书馆的半个书记员，这是打包的，

2226
01:16:23,780 --> 01:16:27,320
0,630 660,1320 1350,2160 2160,2730 2760,3540
library {if,you,will}, {which,is} Go package,|
|

2227
01:16:27,560 --> 01:16:29,390
0,540 540,630 630,780 780,1350 1350,1830
and you know {the,clients} basically
你知道，客户基本上是通过这个界面进行交流，让你了解

2228
01:16:29,390 --> 01:16:31,140
0,390 390,690 690,1230
talk {puts,and} gets

2229
01:16:31,170 --> 01:16:33,120
0,90 90,210 210,810 1050,1380 1380,1950
you know over that interface|
|

2230
01:16:33,120 --> 01:16:34,200
0,180 180,510 510,600 600,660 660,1080
and inside of the clerk
在店员内部实际上维护着这些ID

2231
01:16:34,200 --> 01:16:36,360
0,240 240,720 720,930 930,1650 1950,2160
actually maintains these ids| or
|或者为杰出的人保持一个想法

2232
01:16:36,360 --> 01:16:37,620
0,390 390,630 630,1020 1020,1110 1110,1260
maintains one idea for the

2233
01:16:37,620 --> 01:16:39,030
0,750 750,870 870,990 990,1230 1230,1410
outstanding| you know put get
|你知道，把GET操作和一些信息

2234
01:16:39,030 --> 01:16:40,470
0,690 690,930 930,1200 1200,1290 1290,1440
operation as well as some

2235
01:16:40,470 --> 01:16:41,940
0,480 480,720 720,1140 1140,1380 1380,1470
information| about who's part of
|关于谁是集群的一部分。

2236
01:16:41,940 --> 01:16:43,060
0,210 210,570
the cluster.|
|

2237
01:16:43,060 --> 01:16:44,080
0,480
Okay?|
好吧?|

2238
01:16:44,560 --> 01:16:45,900
0,150 150,330 330,450 450,780
Does that make sense?|
这说得通吗？|

2239
01:16:46,090 --> 01:16:46,780
0,240 240,360 360,510 510,570 570,690
So that's sort of the
这是一种基本的结构，对吧，

2240
01:16:46,780 --> 01:16:48,220
0,270 270,690 690,930 930,1230 1230,1440
basic structure, correct,| like how
|就像RAFT如何融入一幅更大的图景。

2241
01:16:48,220 --> 01:16:49,780
0,420 420,630 630,870 870,930 930,1560
raft fits into a larger

2242
01:16:49,810 --> 01:16:50,880
0,450
picture.|
|

2243
01:16:51,520 --> 01:16:53,080
0,150 150,690 720,1200 1200,1350 1350,1560
The one question that comes
一个总是被提出来的问题是

2244
01:16:53,080 --> 01:16:55,390
0,390 390,750 840,1290 1290,1740 1740,2310
always up {} is| what
|你知道什么是你知道的服务器和职员共同做出的保证

2245
01:16:55,390 --> 01:16:55,990
0,120 120,210 210,420 420,510 510,600
you know what is the

2246
01:16:55,990 --> 01:16:57,820
0,960 990,1080 1080,1260 1260,1680 1680,1830
guarantees you know that the

2247
01:16:57,820 --> 01:16:59,410
0,660 660,840 840,930 930,1290 1290,1590
servers and the clerk together

2248
01:16:59,410 --> 01:17:01,930
0,540 840,1290 1290,1680 1680,2250 2250,2520
make| {} to {the,clients} about
|向客户介绍这些PUT和GET操作。

2249
01:17:01,930 --> 01:17:03,220
0,120 120,270 270,360 360,540 540,1290
these put and get operations.|
|

2250
01:17:05,040 --> 01:17:06,450
0,210 210,390 390,720 720,1080 1080,1410
So this really means what
因此，这实际上意味着什么是正确的标准。

2251
01:17:06,450 --> 01:17:08,440
0,90 90,180 180,750 750,1350
is the correctness criteria.|
|

2252
01:17:11,940 --> 01:17:14,550
0,450 450,1770 1770,2100 2100,2310 2310,2610
And the way, we always
到目前为止，我们一直在描述的方式是，

2253
01:17:14,550 --> 01:17:15,720
0,120 120,570 570,780 780,1020 1020,1170
have described so far,| we've
|我们对此一直很理性[草率]，

2254
01:17:15,720 --> 01:17:17,010
0,180 180,450 450,930 930,1200 1200,1290
been reasonable [sloppy] about it,|
|

2255
01:17:17,190 --> 01:17:18,690
0,540 540,780 780,900 900,1260 1260,1500
{} I've been sloppy about
我在这件事上一直马虎，

2256
01:17:18,690 --> 01:17:20,280
0,150 510,810 810,1020 1020,1320 1320,1590
it,| {} and maybe I've
|也许我已经说过，我们应该像一台机器一样运作。

2257
01:17:20,280 --> 01:17:21,330
0,240 240,390 390,540 540,870 870,1050
said is like well should

2258
01:17:21,330 --> 01:17:22,420
0,660
behave

2259
01:17:22,480 --> 01:17:24,360
0,480 480,510 510,780 780,1290
like a single machine.|
|

2260
01:17:32,820 --> 01:17:33,690
0,120 120,270 270,480 480,630 630,870
But even that there's a
但即使是这样，也有一点不准确的定义，

2261
01:17:33,690 --> 01:17:34,800
0,210 210,330 330,420 420,510 510,1110
little bit of an imprecise

2262
01:17:34,800 --> 01:17:36,300
0,570 570,810 810,1020 1020,1380 1380,1500
definition,| because what happens if
|因为如果两个客户端基本上同时执行PUT或GET操作会发生什么

2263
01:17:36,300 --> 01:17:37,380
0,180 180,630 630,900 900,990 990,1080
two clients basically at the

2264
01:17:37,380 --> 01:17:39,150
0,420 420,1080 1080,1230 1230,1680 1680,1770
same time {you,know} execute a

2265
01:17:39,150 --> 01:17:40,290
0,210 210,300 300,360 360,570 570,1140
put or a get operation|
|

2266
01:17:40,290 --> 01:17:41,610
0,420 480,750 750,930 930,1230 1230,1320
and what {} actually is
这些行动的正确结果到底是什么，

2267
01:17:41,610 --> 01:17:43,290
0,60 60,450 450,960 1320,1500 1500,1680
the correct outcome of these

2268
01:17:43,290 --> 01:17:44,490
0,450 450,570 570,810 810,1050 1050,1200
operations,| so we really need
|所以我们真的需要更精确地排序，

2269
01:17:44,490 --> 01:17:45,090
0,60 60,240 240,300 300,450 450,600
to sort a little bit

2270
01:17:45,090 --> 01:17:46,200
0,180 180,630 630,870 900,990 990,1110
more {preciser -},| you know
|你知道吗，我觉得就像是一台机器，

2271
01:17:46,200 --> 01:17:47,700
0,120 120,300 300,660 990,1320 1320,1500
I think like maybe like

2272
01:17:47,700 --> 01:17:48,780
0,30 30,240 240,690 690,870 870,1080
a single machine,| the right
|这是正确的直觉，但我们需要更精确的定义。

2273
01:17:48,780 --> 01:17:49,770
0,540 540,720 720,780 780,960 960,990
intuition, but we need a

2274
01:17:49,770 --> 01:17:52,050
0,180 180,330 330,810 810,1620 1650,2280
little bit {preciser -} definition.|
|

2275
01:17:52,500 --> 01:17:54,330
0,210 210,720 720,1560 1560,1650 1650,1830
And this definition you saw
你在论文中看到的这个定义，

2276
01:17:54,330 --> 01:17:55,830
0,120 120,1050 1080,1350 1350,1410 1410,1500
the term used in the

2277
01:17:55,830 --> 01:17:58,260
0,540 630,990 990,1500 1500,2130 2130,2430
paper,| this definition is called
|该定义被称为线性化，

2278
01:17:58,260 --> 01:18:00,080
0,840
linearizability,|
|

2279
01:18:04,410 --> 01:18:07,290
0,480 480,870 870,1230 1230,1890 1950,2880
{linearizability -} basically spec specification
线性化基本上指定了PUT和GET操作可以返回的值的规范，

2280
01:18:07,290 --> 01:18:09,870
0,90 90,810 810,1920 2010,2250 2250,2580
of what values {} put

2281
01:18:09,870 --> 01:18:11,340
0,180 180,420 420,840 840,990 990,1470
and get operations can return,|
|

2282
01:18:11,870 --> 01:18:15,050
0,510 510,660 660,1050 1080,2640 2640,3180
particularly those in put operations
特别是那些在PUT操作中，GET实际上可以返回的操作。

2283
01:18:15,050 --> 01:18:16,160
0,210 210,420 420,660 660,780 780,1110
really what get can actually

2284
01:18:16,160 --> 01:18:17,160
0,390
return.|
|

2285
01:18:17,250 --> 01:18:19,110
0,360 360,600 600,1200 1200,1620 1620,1860
And {it,basically} successfully,| what are
它基本上是成功的，|什么是允许退还的东西，

2286
01:18:19,110 --> 01:18:20,730
0,600 660,1050 1050,1140 1140,1260 1260,1620
allowed things to be returned,|
|

2287
01:18:20,730 --> 01:18:21,360
0,180 180,240 240,480 480,570 570,630
what are things that are
有哪些东西是不允许退货的，

2288
01:18:21,360 --> 01:18:22,680
0,300 300,720 720,840 840,960 960,1320
not allowed to be returned,|
|

2289
01:18:22,710 --> 01:18:24,030
0,630 630,810 810,1050 1050,1230 1230,1320
independent by actually how you
独立于你实际实现它的方式，

2290
01:18:24,030 --> 01:18:25,410
0,360 360,540 810,1050 1050,1230 1230,1380
implement it,| it's just like
|这就像是纯粹的规范。

2291
01:18:25,410 --> 01:18:27,060
0,420 420,1140
purely specification.|
|

2292
01:18:27,660 --> 01:18:28,980
0,420 420,630 630,960 960,1110 1110,1320
And it basically has three
它基本上由线性化的三个组成部分组成，

2293
01:18:28,980 --> 01:18:31,120
0,480 480,690 690,1110 1110,1560
components to {linearizability -},|
|

2294
01:18:31,530 --> 01:18:33,600
0,510 870,1350 1350,1620 1620,1860 1860,2070
{} {linearizability -} says, if
线性化是指，如果你看了一些操作序列

2295
01:18:33,600 --> 01:18:34,380
0,120 120,360 360,540 540,630 630,780
you have look at some

2296
01:18:34,380 --> 01:18:36,120
0,360 360,450 450,1290 1320,1560 1560,1740
sequence of operations| and some
|其中一些人目前正在被处决，

2297
01:18:36,120 --> 01:18:38,040
0,90 90,240 240,720 720,1470 1770,1920
of them executed currently,| it
|必须是这样的，

2298
01:18:38,040 --> 01:18:38,820
0,240 240,300 300,390 390,480 480,780
has to be the case,|
|

2299
01:18:38,820 --> 01:18:39,930
0,120 120,300 300,330 330,600 600,1110
that there's a total order,|
这是一个总的顺序，|

2300
01:18:40,080 --> 01:18:41,220
0,210 210,330 330,450 450,900 900,1140
so you can arrange all
所以你可以按一定的顺序安排所有的手术，

2301
01:18:41,220 --> 01:18:42,510
0,120 120,690 690,780 780,1020 1020,1290
the operation in some total

2302
01:18:42,510 --> 01:18:43,520
0,480
order,|
|

2303
01:18:52,350 --> 01:18:54,220
0,480 480,1320
{put,or,set} operations.|
PUT或SET操作。|

2304
01:18:55,730 --> 01:18:56,920
0,630
Two,
第二，它必须实时匹配。

2305
01:18:56,920 --> 01:18:58,140
0,690
{}

2306
01:18:58,220 --> 01:18:59,240
0,270 270,450 450,540 540,810 810,1020
it has to match {real-time

2307
01:18:59,240 --> 01:19:00,300
0,480
-}.|
|

2308
01:19:06,260 --> 01:19:07,580
0,180 180,630 630,690 690,1080 1080,1320
With that, I mean that
我的意思是，如果一个手术在第二个手术开始之前完成，

2309
01:19:07,580 --> 01:19:10,100
0,270 270,330 330,1020 1020,1800 2070,2520
if an operation completed before

2310
01:19:10,100 --> 01:19:12,220
0,60 60,390 390,870 870,1590
the second operation started,|
|

2311
01:19:12,520 --> 01:19:14,050
0,720 750,1050 1050,1140 1140,1380 1380,1530
{} even if those {}
即使这些操作是不同的机器，

2312
01:19:14,050 --> 01:19:15,550
0,510 510,570 570,840 840,1350 1350,1500
operations are different machines,| it
|必须是这样的，在这个总的顺序中，

2313
01:19:15,550 --> 01:19:16,390
0,210 210,270 270,390 390,480 480,840
has to be the case

2314
01:19:16,390 --> 01:19:17,740
0,180 180,300 300,480 480,780 780,1350
that in this total order,|
|

2315
01:19:17,950 --> 01:19:19,840
0,660 660,900 900,1410 1410,1710 1710,1890
the first operation shows up
第一个操作出现在第二个操作之前。

2316
01:19:19,840 --> 01:19:21,700
0,330 330,390 390,690 690,1320
before the second operation.|
|

2317
01:19:24,280 --> 01:19:24,910
0,150 150,240 240,390 390,450 450,630
And that sort of makes
这在某种程度上说得通，对吧，

2318
01:19:24,910 --> 01:19:25,840
0,240 240,510 510,660 660,810 810,930
sense, right,| like if it
|例如，如果它的行为像一台机器一样，

2319
01:19:25,840 --> 01:19:26,950
0,300 300,420 420,480 480,720 720,1110
behaves like a single machine,|
|

2320
01:19:26,950 --> 01:19:27,880
0,90 90,150 150,390 390,480 480,930
and you start an operation
然后你开始一个接一个的手术，

2321
01:19:27,880 --> 01:19:30,220
0,480 480,810 810,1110 1110,1710 1980,2340
{} after another operation,| then
|则单机将始终返回第一个操作的结果，因此

2322
01:19:30,220 --> 01:19:31,540
0,90 90,330 330,630 630,960 960,1320
the single machine would always

2323
01:19:31,540 --> 01:19:32,860
0,270 270,360 360,810 810,960 960,1320
return the results of the

2324
01:19:32,980 --> 01:19:35,350
0,360 360,990 990,1320 1650,1950 1950,2370
first operation so| and finally
|最后是读取操作，

2325
01:19:35,350 --> 01:19:37,390
0,120 120,330 330,1020 1740,1890 1890,2040
a read operation,| so this
|这就像在Out情况下，键值服务器只有一个读取操作，

2326
01:19:37,390 --> 01:19:38,560
0,90 90,300 300,480 480,930 930,1170
is like in {out,case}, {key-value

2327
01:19:38,560 --> 01:19:39,790
0,300 300,660 660,870 870,960 960,1230
-} server only has one

2328
01:19:39,790 --> 01:19:41,140
0,210 210,660 660,810 810,960 960,1350
read operation,| then we get,|
|然后我们就会得到|

2329
01:19:41,560 --> 01:19:43,060
0,150 150,270 270,720 720,1050 1050,1500
{} but the read operation
但读操作应始终返回最后一次写入的结果。

2330
01:19:43,060 --> 01:19:44,860
0,180 180,510 510,1110
should always return

2331
01:19:45,930 --> 01:19:47,340
0,210 210,900
the results

2332
01:19:49,110 --> 01:19:51,020
0,210 210,300 300,630 630,1080
of the last write.|
|

2333
01:19:56,040 --> 01:19:57,360
0,420 420,660 660,750 750,870 870,1320
{} So in our case,
所以在我们的例子中，你知道我们有操作和PUT操作，

2334
01:19:57,360 --> 01:19:58,560
0,90 90,240 240,570 570,990 990,1200
you know we do get

2335
01:19:58,560 --> 01:20:01,410
0,720 720,1350 1620,2130 2130,2640 2670,2850
operation and {} the put

2336
01:20:01,410 --> 01:20:04,170
0,780 1020,1710 1740,2130 2130,2370 2370,2760
operation,| {} happened well before
|早在它之前就发生了

2337
01:20:04,170 --> 01:20:06,210
0,360 360,1080 1080,1470 1470,1650 1650,2040
it| and completed well before
|而在此之前很好的完成GET操作应该观察最后一个，应该观察最后一个PUT。

2338
01:20:06,210 --> 01:20:07,920
0,420 600,840 840,1050 1050,1440 1440,1710
then that get operation should

2339
01:20:07,920 --> 01:20:10,710
0,570 570,660 660,1260 1410,2280 2490,2790
observe the last, {} should

2340
01:20:10,710 --> 01:20:12,940
0,330 330,420 420,750 750,1830
observe the last put.|
|

2341
01:20:12,940 --> 01:20:14,020
0,540
Okay?|
好吧?|

2342
01:20:14,020 --> 01:20:15,010
0,120 120,240 240,420 420,510 510,990
So this sort of, {}
所以这种，这是三个条件，

2343
01:20:15,010 --> 01:20:17,560
0,720 1050,1290 1290,1440 1440,1710 1710,2550
{} these are three conditions,|
|

2344
01:20:17,560 --> 01:20:18,370
0,150 150,330 330,540 540,750 750,810
you know that whether to
你知道，是否要确定系统是否真的线性化。

2345
01:20:18,370 --> 01:20:20,410
0,810 840,1020 1020,1410 1410,1710 1710,2040
determine {} whether system actually

2346
01:20:20,410 --> 01:20:21,900
0,450 450,930
{linearizability -}.|
|

2347
01:20:21,990 --> 01:20:23,130
0,480 480,750 750,840 840,960 960,1140
And you can think about
你也可以考虑线性化，就像一台机器一样工作。

2348
01:20:23,130 --> 01:20:24,720
0,120 120,720 720,900 900,1380 1380,1590
the linearizability as well, just

2349
01:20:24,720 --> 01:20:25,860
0,300 300,450 450,510 510,840 840,1140
behave like a single machine.|
|

2350
01:20:26,530 --> 01:20:27,730
0,300 300,420 420,840 900,1140 1140,1200
So let me make a
所以让我说得更具体一点，

2351
01:20:27,730 --> 01:20:28,750
0,150 150,240 240,390 390,780 780,1020
little bit more concrete,| because
|因为有一点抽象。

2352
01:20:28,750 --> 01:20:29,830
0,120 120,210 210,360 360,480 480,1080
there's a little bit abstract.|
|

2353
01:20:30,610 --> 01:20:33,190
0,630 780,1020 1020,1620 1650,2040 2040,2580
And the way basically people
基本上，人们对线性化的思考方式

2354
01:20:33,460 --> 01:20:36,160
0,570 570,870 870,1800 1800,2160 2340,2700
think about linearizability| or argue
|或者争辩说，系统具有线性化能力，即查看特定的历史或执行

2355
01:20:36,160 --> 01:20:37,420
0,150 150,210 210,480 480,630 630,1260
that the system has linearizability

2356
01:20:37,420 --> 01:20:39,310
0,210 210,630 630,840 840,1290 1290,1890
is looking at particular histories

2357
01:20:39,310 --> 01:20:42,000
0,240 240,1050 1320,1470 1470,2220
or executions| and then
|然后看看你是否能利用历史，

2358
01:20:44,850 --> 01:20:45,600
0,270 270,390 390,480 480,570 570,750
see if you can use

2359
01:20:45,600 --> 01:20:47,010
0,630 630,750 750,840 840,1080 1110,1410
histories,| if you can turn
|如果你能把它变成总的秩序，

2360
01:20:47,010 --> 01:20:48,150
0,180 180,390 390,450 450,720 720,1140
that into {} total order,|
|

2361
01:20:48,180 --> 01:20:49,560
0,270 270,450 450,570 570,1080 1080,1380
even though the operations actually
即使这些操作实际上可能实际上是并发执行的。

2362
01:20:49,560 --> 01:20:52,110
0,210 210,330 330,840 1110,1950 1950,2550
might have actually executed concurrently.|
|

2363
01:20:52,790 --> 01:20:53,780
0,240 240,630 630,720 720,900 900,990
So let me give you
让我给你们举一个例子，一个微不足道的例子，

2364
01:20:53,780 --> 01:20:55,970
0,180 180,870 1020,1050 1050,1560 1560,2190
one example, a trivial example,|
|

2365
01:20:56,690 --> 01:20:58,040
0,150 150,360 360,570 570,750 750,1350
so let's say we have
假设我们有三个客户端C1C2 C3

2366
01:20:58,070 --> 01:21:00,110
0,210 210,660 660,840 840,1350 1350,2040
three clients {C1 -} C2

2367
01:21:00,110 --> 01:21:01,790
0,810 1140,1350 1350,1470 1470,1620 1620,1680
C3| and they do a
|他们做了一系列的卖点和交易，

2368
01:21:01,790 --> 01:21:03,200
0,210 210,300 300,480 480,990
bunch of puts {and,gets},|
|

2369
01:21:03,390 --> 01:21:05,010
0,300 300,870 960,1080 1080,1260 1260,1620
{} so you know typically
所以你知道通常你知道的方式，

2370
01:21:05,010 --> 01:21:06,030
0,90 90,450 450,570 570,720 720,1020
the way you know,| basically
|基本上，它必须是行动开始的某个起点，

2371
01:21:06,030 --> 01:21:06,960
0,450 450,600 600,660 660,750 750,930
it has to be some

2372
01:21:06,960 --> 01:21:08,580
0,570 570,900 900,1110 1110,1200 1200,1620
start point where the operation

2373
01:21:08,580 --> 01:21:09,660
0,570
started,|
|

2374
01:21:09,900 --> 01:21:10,920
0,270 270,450 450,510 510,720 720,1020
and there's {} {some,endpoint -}
在操作结束的地方有一些终点。

2375
01:21:10,920 --> 01:21:12,840
0,210 210,360 360,840 840,1440
where the operation ends.|
|

2376
01:21:12,960 --> 01:21:14,130
0,270 270,360 360,660 660,840 840,1170
So, for example when actually
因此，例如，当客户端实际从服务器获得回报时，

2377
01:21:14,130 --> 01:21:16,050
0,480 720,1080 1080,1290 1290,1590 1590,1920
the client actually gets the

2378
01:21:16,050 --> 01:21:18,560
0,630 630,1140 1140,1440 1440,2010
return from the servers,|
|

2379
01:21:18,840 --> 01:21:19,860
0,360 360,480 480,630 630,780 780,1020
and so let's say this
所以让我们假设这个写操作，你知道的，赋值给变量x，

2380
01:21:19,860 --> 01:21:21,330
0,360 360,1110 1110,1170 1170,1290 1290,1470
write operation you know to

2381
01:21:21,330 --> 01:21:23,070
0,510 510,660 660,780 780,1200 1200,1740
value to the variable x,|
|

2382
01:21:23,560 --> 01:21:24,430
0,180 180,300 300,480 480,720 720,870
and we write one to
我们给它写了一封信。

2383
01:21:24,430 --> 01:21:25,220
0,240
it.|
|

2384
01:21:25,830 --> 01:21:27,090
0,300 300,420 420,660 660,900 900,1260
So the client one started
因此，客户端1在对变量x的写入操作中的某个点启动了写入1

2385
01:21:27,090 --> 01:21:28,050
0,60 60,240 240,450 450,870 870,960
at some point in the

2386
01:21:28,050 --> 01:21:29,100
0,240 240,600 600,690 690,750 750,1050
write operation to the variable

2387
01:21:29,100 --> 01:21:30,810
0,240 240,360 360,540 540,960 1290,1710
x the write 1| and
|并在这里的某一时刻结束。

2388
01:21:30,810 --> 01:21:32,580
0,420 420,630 630,750 750,1110 1320,1770
ends at some point here.|
|

2389
01:21:33,330 --> 01:21:35,420
0,540 540,720 720,990 990,1410
Maybe the second one
也许是第二个，然后写信给它，

2390
01:21:38,400 --> 01:21:39,720
0,480 480,690 690,960 960,1140 1140,1320
{} and write to {}

2391
01:21:39,720 --> 01:21:40,600
0,360
it,|
|

2392
01:21:40,600 --> 01:21:41,620
0,120 120,270 270,600 600,720 720,1020
and then maybe we have
然后可能我们有所有的行动，线性化是当操作同时发生时，

2393
01:21:41,650 --> 01:21:42,910
0,210 210,330 330,960 960,1080 1080,1260
all the action and with

2394
01:21:42,910 --> 01:21:44,260
0,240 240,390 390,960 960,1110 1110,1350
{linearizability - -} is when

2395
01:21:44,260 --> 01:21:45,940
0,420 420,720 720,1230 1230,1560 1560,1680
operation happens concurrently,| so all
|所以所有的操作都是在另一个操作实际完成之前开始的，

2396
01:21:45,940 --> 01:21:48,430
0,510 510,1140 1290,1980 1980,2220 2220,2490
operations starts before another one

2397
01:21:48,430 --> 01:21:49,930
0,270 270,690 690,840 840,900 900,1500
actually finishes,| so for example
|因此，例如，我们可能具有以下操作：客户端2执行读取操作，

2398
01:21:49,960 --> 01:21:51,370
0,270 270,540 540,840 840,900 900,1410
we might have the following

2399
01:21:51,370 --> 01:21:52,930
0,720 720,1020 1020,1140 1140,1350 1350,1560
operation client 2 {does,a} read

2400
01:21:52,930 --> 01:21:54,070
0,510 510,660 660,780 780,990 990,1140
operation,| in our case would
|在我们的情况下将是一件容易的事，

2401
01:21:54,070 --> 01:21:55,600
0,240 240,480 480,840
be a get,|
|

2402
01:21:55,600 --> 01:21:57,790
0,120 120,240 240,810 1320,1770 1770,2190
and there's {a,read} of x|
还有一个关于x的读数|

2403
01:21:57,790 --> 01:21:58,870
0,120 120,210 210,540 540,990 990,1080
and the value returned by
并且此操作返回的值为2。

2404
01:21:58,870 --> 01:22:00,540
0,150 150,600 600,750 750,1110
this operation is 2.|
|

2405
01:22:00,940 --> 01:22:01,960
0,150 150,630 690,870 870,960 960,1020
And then we have a
然后我们遇到了类似的情况

2406
01:22:01,960 --> 01:22:03,850
0,630 930,1140 1140,1200 1200,1710 1710,1890
similar sort of situation| where
|当CLIENG 3实际开始读操作时，

2407
01:22:03,850 --> 01:22:04,990
0,270 270,510 510,600 600,810 810,1140
clieng 3 it actually starts

2408
01:22:04,990 --> 01:22:06,640
0,60 60,630 630,690 690,870 870,1650
an operation a read operation,|
|

2409
01:22:07,290 --> 01:22:09,090
0,690 690,900 900,1170 1170,1590 1590,1800
and {} reads x and
并读取x，然后返回1。

2410
01:22:09,090 --> 01:22:10,560
0,120 120,510 510,870
it returns 1.|
|

2411
01:22:11,370 --> 01:22:12,720
0,510 510,900 900,960 960,1170 1170,1350
{} Let me make this
让我把它弄得更干净一点，

2412
01:22:12,720 --> 01:22:14,520
0,240 240,450 480,720 720,1260
{a,little} bit more clean,|
|

2413
01:22:15,660 --> 01:22:17,920
0,150 150,300 300,990 1080,1680
the read operation {}
在您知道写2操作开始或结束之前，读操作实际上返回，

2414
01:22:17,920 --> 01:22:19,330
0,180 180,540 540,1170 1170,1260 1260,1410
actually returns before you know

2415
01:22:19,330 --> 01:22:21,160
0,270 270,600 600,780 780,1260 1260,1830
the write 2 operation starts

2416
01:22:21,220 --> 01:22:23,410
0,300 300,690 960,1440 1440,1740 1740,2190
or ends,| {} and same
|从[]一开始也是如此

2417
01:22:23,410 --> 01:22:24,340
0,120 120,420 420,690 690,810 810,930
from [] one| and then
|然后总是出现的问题是这种线性化，

2418
01:22:24,340 --> 01:22:25,450
0,60 60,390 390,660 660,900 900,1110
the question that always comes

2419
01:22:25,450 --> 01:22:27,910
0,330 570,750 750,930 930,1710 1770,2460
up is this {linearizability -},|
|

2420
01:22:27,910 --> 01:22:29,960
0,150 150,810 900,1500
this linearizability execution.|
这种线性化执行。|

2421
01:22:30,800 --> 01:22:32,480
0,450 600,780 780,870 870,990 990,1680
{} And if {linearizability -},
如果是线性化，那么基本上这意味着这种情况也可以发生在一台机器上。

2422
01:22:32,480 --> 01:22:33,680
0,120 120,480 480,570 570,840 840,1200
then basically it means like

2423
01:22:33,710 --> 01:22:34,850
0,270 270,450 450,840 840,1080 1080,1140
this could happen on a

2424
01:22:34,850 --> 01:22:36,300
0,270 270,600 600,870
single machine, too.|
|

2425
01:22:37,000 --> 01:22:38,170
0,420 420,660 660,780 780,1080 1080,1170
So could this happen on
那么，这种情况会发生在一台机器上吗？

2426
01:22:38,170 --> 01:22:39,540
0,60 60,300 300,750
a single machine.|
|

2427
01:22:39,940 --> 01:22:41,110
0,210 210,330 330,540 540,720 720,1170
We can just like abstract
我们可以像抽象的那样思考它，而不是真正地拥有，

2428
01:22:41,110 --> 01:22:42,100
0,90 90,300 300,540 540,660 660,990
and think about it without

2429
01:22:42,100 --> 01:22:43,480
0,300 300,570 570,810
actually having, {}|
|

2430
01:22:45,220 --> 01:22:46,600
0,150 150,330 330,750 750,1140 1140,1380
is this legit outcome from
这个合法的结果，基本上我们需要看的是R2的结果，对于c2和c3，

2431
01:22:46,600 --> 01:22:47,380
0,180 180,360 360,570 570,720 720,780
basically {} we need to

2432
01:22:47,380 --> 01:22:48,400
0,180 180,330 330,480 480,660 660,1020
look at is the outcomes

2433
01:22:48,400 --> 01:22:49,600
0,150 150,450 450,750 750,1080 1080,1200
of {r2 -} and for

2434
01:22:49,600 --> 01:22:51,460
0,390 390,540 540,690 690,1380 1620,1860
c2 and {} c3,| {you,know}
|你知道这是合法的处决吗。

2435
01:22:51,460 --> 01:22:53,710
0,150 150,360 360,1050 1050,1560 1590,2250
is this a legit execution.|
|

2436
01:22:54,520 --> 01:22:56,800
0,750 750,1080 1080,1980 1980,2010 2010,2280
I'm not sure, I don't
我不确定，我真的不知道花很长时间对Right意味着什么。

2437
01:22:56,800 --> 01:22:57,580
0,210 210,330 330,420 420,540 540,780
really know what it means

2438
01:22:57,580 --> 01:22:59,140
0,270 270,690 690,960
for right to

2439
01:22:59,140 --> 01:23:01,420
0,600 720,1470 1470,1560 1560,1800 1800,2280
take like a long time.|
|

2440
01:23:03,030 --> 01:23:04,710
0,360 360,540 540,1230 1230,1440 1440,1680
Well. Take a long time
井。这件事要花很长时间。

2441
01:23:04,710 --> 01:23:06,040
0,90 90,240 240,690
for that matter.|
|

2442
01:23:06,070 --> 01:23:06,910
0,270 270,390 390,570 570,750 750,840
If you think about the
如果你从客户的角度来考虑，

2443
01:23:06,910 --> 01:23:09,820
0,0 1920,2100 2100,2160 2160,2430 2430,2910
{} from the client perspective,|
|

2444
01:23:09,820 --> 01:23:11,800
0,210 210,300 300,750 750,1380 1380,1980
{} it sends a request
它向该服务发送请求，

2445
01:23:11,800 --> 01:23:12,910
0,120 120,180 180,690 690,900 900,1110
to the service,| so that's
|这就是写作的开始，

2446
01:23:12,910 --> 01:23:13,960
0,90 90,450 450,540 540,630 630,1050
the starting of the write,|
|

2447
01:23:14,550 --> 01:23:16,170
0,840 840,1020 1020,1170 1170,1230 1230,1620
and I've got a return
我从服务中得到了某个时候的返回值

2448
01:23:16,170 --> 01:23:18,030
0,690 690,1350 1350,1530 1530,1770 1770,1860
value at some point from

2449
01:23:18,030 --> 01:23:18,840
0,60 60,420 420,510 510,690 690,810
the service| and that's the
|这就是写作的结尾。

2450
01:23:18,840 --> 01:23:20,180
0,210 210,300 300,420 420,810
end of the write.|
|

2451
01:23:20,960 --> 01:23:21,860
0,180 180,300 300,420 420,750 750,900
And so in between all
所以在这中间发生了各种各样的事情，对吧，

2452
01:23:21,860 --> 01:23:22,910
0,150 150,210 210,420 420,780 780,1050
kinds of stuff happens, right,|
|

2453
01:23:22,910 --> 01:23:24,290
0,210 210,630 630,750 750,840 840,1380
it actually to the servers,|
它实际上传到了服务器上，|

2454
01:23:24,290 --> 01:23:25,940
0,60 60,630 630,930 930,1140 1140,1650
the servers put into raft,|
服务器被放在木筏上，|

2455
01:23:25,940 --> 01:23:27,290
0,360 360,750 750,930 930,1050 1050,1350
raft {} went to apply
筏子去申请频道什么的，

2456
01:23:27,290 --> 01:23:28,670
0,480 480,630 630,780 780,1080 1110,1380
channel blah blah blah,| lots
|发生了很多事情，

2457
01:23:28,670 --> 01:23:29,780
0,60 60,300 300,600 630,930 930,1110
of stuff happened,| we really
|我们真正关心的是实现在某个时刻做了什么响应。

2458
01:23:29,780 --> 01:23:30,650
0,240 240,390 390,690 690,780 780,870
care about exactly what the

2459
01:23:30,650 --> 01:23:32,090
0,480 480,810 810,930 930,1080 1080,1440
implementation does at some point

2460
01:23:32,090 --> 01:23:33,140
0,30 30,630
a response.|
|

2461
01:23:34,120 --> 01:23:34,870
0,270 270,390 390,510 510,600 600,750
And so you can think
所以你可以想一想，

2462
01:23:34,870 --> 01:23:35,770
0,240 240,420 420,480 480,630 630,900
about this,| you know there's
|你知道，基本上有三个并发客户端，

2463
01:23:35,770 --> 01:23:37,540
0,420 510,900 900,1110 1110,1680 1680,1770
basically {three,concurrent -} clients,| you
|你知道他们发布了并发操作

2464
01:23:37,540 --> 01:23:39,160
0,180 180,570 570,1050 1080,1290 1290,1620
know they issued {} concurrent

2465
01:23:39,160 --> 01:23:40,570
0,690 690,810 810,930 930,1050 1050,1410
operations| and we are wondering
|我们想知道这是否真的是合法的结果。

2466
01:23:40,570 --> 01:23:41,590
0,120 120,300 300,390 390,720 720,1020
if this is actually legit

2467
01:23:41,590 --> 01:23:42,440
0,390
outcome.|
|

2468
01:23:44,900 --> 01:23:46,100
0,360 390,510 510,750 750,990 990,1200
{} I don't think this
我认为这不可能发生在一台机器上，

2469
01:23:46,100 --> 01:23:47,900
0,300 300,990 990,1200 1200,1350 1350,1800
could happen on a single

2470
01:23:47,900 --> 01:23:51,500
0,540 540,1290 1860,2130 2130,2790 2970,3600
machine,| because the write for
|因为它对2的写入在重新启动后完成。

2471
01:23:51,710 --> 01:23:54,200
0,360 360,720 720,1170 1170,2010
for 2 it finishes,

2472
01:23:54,500 --> 01:23:57,520
0,780 780,1260 1260,2490
after the restart.|
|

2473
01:23:57,750 --> 01:23:59,490
0,480 510,900 900,1200 1200,1560 1560,1740
Oh, sorry, yeah yeah that's
哦，对不起，是的，是的，没错，

2474
01:23:59,490 --> 01:24:01,260
0,360 450,840 840,1320 1350,1560 1560,1770
right,| {} but it seems
|但似乎写操作应该在读操作之前进行。

2475
01:24:01,260 --> 01:24:02,550
0,150 150,300 300,630 630,780 780,1290
like the write should happen

2476
01:24:02,550 --> 01:24:04,320
0,630 630,780 780,1230
before the read.|
|

2477
01:24:04,350 --> 01:24:07,480
0,600 1350,1500 1500,1680 1680,2610
And in this situation,|
在这种情况下，|

2478
01:24:07,480 --> 01:24:08,360
0,270

2479
01:24:09,130 --> 01:24:10,360
0,180 180,390 390,690 690,1050 1050,1230
it couldn't happen if the
如果在之后开始写入，则不会发生这种情况，

2480
01:24:10,360 --> 01:24:12,580
0,480 480,990 990,1650
write started after,|
|

2481
01:24:12,580 --> 01:24:14,920
0,90 90,1020 1020,1260 1260,1800 1830,2340
if the write finished after
如果写入在写入重启之后完成，

2482
01:24:14,920 --> 01:24:17,320
0,90 90,570 600,1140 1140,1620 2010,2400
the write restart,| yeah.| Yeah,
|嗯。|是的，所以人们会认为一种方式是，

2483
01:24:17,320 --> 01:24:19,300
0,180 180,390 390,750 750,1560 1560,1980
so one would think one

2484
01:24:19,300 --> 01:24:20,650
0,90 90,300 300,480 480,990 990,1350
way to think about is

2485
01:24:20,650 --> 01:24:22,240
0,300 510,750 750,870 870,1470 1500,1590
that,| we can move you
|我们可以移动，你知道，我们必须构建一个整体秩序

2486
01:24:22,240 --> 01:24:23,680
0,600 720,960 960,1080 1080,1140 1140,1440
know we have to construct

2487
01:24:23,680 --> 01:24:25,210
0,60 60,300 300,690 1020,1230 1230,1530
a total order| and we
|我们可以构建一个总的秩序，其中所有的操作都排成一排，

2488
01:24:25,210 --> 01:24:26,230
0,90 90,420 420,480 480,750 750,1020
can construct a total order

2489
01:24:26,230 --> 01:24:28,000
0,210 210,360 360,990 990,1530 1530,1770
where all the operations line

2490
01:24:28,000 --> 01:24:29,380
0,240 480,990 990,1080 1080,1200 1200,1380
up,| then you know it's
|那么你就知道这是一段有效的线性化历史。

2491
01:24:29,380 --> 01:24:31,260
0,30 30,330 330,960 960,1440
a valid linearizable history.|
|

2492
01:24:31,290 --> 01:24:33,090
0,240 240,660 780,930 930,1440 1440,1800
And so, so let's construct
所以，让我们来构建一个总的秩序

2493
01:24:33,090 --> 01:24:34,470
0,30 30,300 300,780 900,1050 1050,1380
a total order| and then
|然后回到你刚才问的这个问题，

2494
01:24:34,470 --> 01:24:35,340
0,150 150,390 390,450 450,570 570,870
go back to this question

2495
01:24:35,340 --> 01:24:37,410
0,210 210,420 420,810 1500,1950 1980,2070
you just asked,| so a
|所以总的顺序，这是我要的总顺序，

2496
01:24:37,410 --> 01:24:38,550
0,270 270,630 630,870 870,900 900,1140
total order, here's a total

2497
01:24:38,550 --> 01:24:40,470
0,270 270,450 450,840 870,1590 1590,1920
order that I {} gonna,|
|

2498
01:24:41,240 --> 01:24:41,840
0,210 210,300 300,420 420,480 480,600
so I'm going to do
因此，我将首先执行写入操作，

2499
01:24:41,840 --> 01:24:43,880
0,420 420,540 540,780 780,1470 1680,2040
first the write operation,| then
|然后读取x1，然后写入x2，

2500
01:24:43,880 --> 01:24:46,250
0,300 300,480 480,960 1560,2190 2190,2370
read {x1 -}, then the

2501
01:24:46,250 --> 01:24:48,060
0,360 360,1080
write x2,|
|

2502
01:24:48,060 --> 01:24:49,520
0,300 300,930
and then
然后RX读数为x2，对。

2503
01:24:49,700 --> 01:24:52,160
0,360 360,900 930,1440 1440,1980 2040,2460
{rx -} read x2, right.|
|

2504
01:24:52,720 --> 01:24:53,740
0,120 120,180 180,450 450,900 900,1020
It's a total order,| all
这是一个完整的订单，|所有的手术现在都是按顺序进行的。

2505
01:24:53,740 --> 01:24:55,270
0,90 90,540 540,660 660,840 840,1530
the operations are now happening

2506
01:24:55,270 --> 01:24:56,600
0,750
sequentially.|
|

2507
01:24:56,660 --> 01:24:57,860
0,480 480,600 600,720 720,810 810,1200
And you know we need
你知道我们需要检查整个订单是否正确，

2508
01:24:57,860 --> 01:24:59,870
0,60 60,360 360,660 660,1500 1680,2010
to check whether a total

2509
01:24:59,870 --> 01:25:01,760
0,210 210,330 330,750 1110,1800 1800,1890
order is correct,| corresponding to
|对应于线性化定义，

2510
01:25:01,760 --> 01:25:03,800
0,90 90,450 450,810 810,1530 1740,2040
the {linearizability -} definitions,| well,
|好吧，它必须是这样的，开始的行动，

2511
01:25:03,800 --> 01:25:04,280
0,90 90,240 240,330 330,420 420,480
it has to be the

2512
01:25:04,280 --> 01:25:06,080
0,300 300,480 480,1050 1050,1230 1230,1800
case that operations that start,|
|

2513
01:25:06,700 --> 01:25:09,250
0,450 660,930 930,1290 1290,1860 1950,2550
{} {if,an} operation starts after
如果一个操作在某个其他操作之后开始，

2514
01:25:09,250 --> 01:25:10,480
0,180 180,390 390,810 810,1080 1080,1230
some other operation,| ends it
|在总的顺序中它需要结束，

2515
01:25:10,480 --> 01:25:11,560
0,240 240,300 300,510 510,990 990,1080
needs to be after in

2516
01:25:11,560 --> 01:25:12,670
0,60 60,330 330,720 720,930 930,1110
the total order,| and so
|所以我们来看看这个。

2517
01:25:12,670 --> 01:25:14,280
0,360 360,630 630,720 720,1170
we look at this.|
|

2518
01:25:14,370 --> 01:25:15,240
0,210 210,360 360,420 420,480 480,870
Let's look at the issue,
让我们来看看这个问题，

2519
01:25:15,240 --> 01:25:16,740
0,420 420,900
this one,|
|

2520
01:25:16,740 --> 01:25:18,630
0,180 180,660 660,1320 1350,1710 1710,1890
must start after {wx1 -
必须在wx1之后开始

2521
01:25:18,630 --> 01:25:20,340
0,420 420,720 720,900 900,1230 1350,1710
-}| and that is true
|这是正确的，这完全是一种秩序，

2522
01:25:20,340 --> 01:25:22,160
0,390 390,540 540,840 840,1290
correct, this totally order,|
|

2523
01:25:23,210 --> 01:25:25,020
0,420 420,690 690,1260
{} {Rx1 -}
RX1必须在WX1之后开始，

2524
01:25:25,020 --> 01:25:28,140
0,900 900,1080 1080,1530 1530,2190
must you start after

2525
01:25:28,270 --> 01:25:30,460
0,900 900,1200 1200,1290 1290,1470 1470,2190
Wx1,| because it actually returns
|因为它实际上返回了你知道的值，对吧，

2526
01:25:30,460 --> 01:25:31,690
0,150 150,270 270,360 360,960 990,1230
you know the value, right,|
|

2527
01:25:31,690 --> 01:25:32,980
0,150 150,390 390,660 660,930 930,1290
then {exactly -} in total
那么完全按照总的顺序，这也是这样的，

2528
01:25:32,980 --> 01:25:33,820
0,180 180,420 420,510 510,750 750,840
order, that is also the

2529
01:25:33,820 --> 01:25:34,760
0,480
case,|
|

2530
01:25:35,360 --> 01:25:37,190
0,210 210,960 990,1140 1140,1470 1470,1830
{Rx2 -} {you,know} must start
Rx2你知道必须启动Wx2，

2531
01:25:37,220 --> 01:25:39,140
0,600 600,990 990,1230 1230,1440 1440,1920
{Wx2 -},| because it observes
|因为它观察到此写入的结果

2532
01:25:39,140 --> 01:25:40,360
0,90 90,720
the result

2533
01:25:40,800 --> 01:25:42,330
0,270 270,480 480,960 990,1380 1380,1530
of this write| and you
|你知道这也是很好的，对吧，

2534
01:25:42,330 --> 01:25:43,470
0,90 90,270 270,570 570,810 810,1140
know that's perfectly fine too,

2535
01:25:43,500 --> 01:25:44,480
0,420
right,|
|

2536
01:25:44,750 --> 01:25:45,890
0,240 240,330 330,420 420,810 810,1140
{} we can basically, one
我们基本上可以，一种方式来考虑它是

2537
01:25:45,890 --> 01:25:46,670
0,120 120,210 210,390 390,660 660,780
way to think about it

2538
01:25:46,670 --> 01:25:48,080
0,180 180,450 450,570 570,990 1170,1410
is that| you know even
|你知道，即使他们以这种方式处决，

2539
01:25:48,080 --> 01:25:49,190
0,120 120,240 240,660 660,780 780,1110
though they executed this way,|
|

2540
01:25:49,190 --> 01:25:50,600
0,180 180,270 270,450 450,1020 1020,1410
we've got to rearrange things
我们必须重新安排东西，以符合总的顺序。

2541
01:25:50,600 --> 01:25:51,680
0,210 210,450 450,630 630,690 690,1080
{} to sort of fit

2542
01:25:52,010 --> 01:25:53,940
0,510 510,960 960,1410
{} the {total,order}.|
|

2543
01:25:54,140 --> 01:25:55,580
0,360 360,840 900,1230 1230,1350 1350,1440
And so, {} if we
所以，如果我们想一想，

2544
01:25:55,580 --> 01:25:57,200
0,120 120,360 360,810 930,1410 1410,1620
think about this,| then this
|那么这是一个完全合法的处决，

2545
01:25:57,200 --> 01:25:58,850
0,150 150,210 210,510 510,1050 1380,1650
is a totally legit and

2546
01:25:58,850 --> 01:26:00,080
0,690
execution,|
|

2547
01:26:00,140 --> 01:26:02,120
0,750 840,1170 1170,1620 1620,1800 1800,1980
where {you,know,the} operation for much
在那里你知道大部分订单的操作

2548
01:26:02,120 --> 01:26:03,290
0,120 120,180 180,720 810,1020 1020,1170
of the order| and so
|这就像是一台机器可以做的那样，

2549
01:26:03,290 --> 01:26:04,430
0,180 180,270 270,480 480,1050 1050,1140
this is like what a

2550
01:26:04,430 --> 01:26:05,540
0,330 330,600 600,720 720,930 930,1110
single machine would do,| so
|因此单个机器可以被执行写RX1读x1，

2551
01:26:05,540 --> 01:26:06,320
0,0 0,300 300,630 630,720 720,780
a single machine could be

2552
01:26:06,320 --> 01:26:08,270
0,540 540,720 720,930 930,1530 1650,1950
executed write {Rx1 -} read

2553
01:26:08,270 --> 01:26:09,590
0,150 150,540 570,780 780,990 990,1320
x 1,| write {x2 -},
|写x2，读x2和实数都很好。

2554
01:26:09,590 --> 01:26:11,390
0,180 180,570 870,1170 1170,1470 1470,1800
read x2 and real perfectly

2555
01:26:11,390 --> 01:26:12,200
0,270
fine.|
|

2556
01:26:14,390 --> 01:26:15,480
0,600
Okay?|
好吧?|

2557
01:26:15,710 --> 01:26:16,880
0,150 150,300 300,660 690,1020 1020,1170
So let me make it
因此，让我让我们思考一下不可线性化的历史是有帮助的。

2558
01:26:16,880 --> 01:26:17,960
0,420 420,720 720,870 870,1050 1050,1080
helpful to think about {}

2559
01:26:17,960 --> 01:26:19,850
0,300 300,450 450,540 540,1050 1080,1890
history that is not linearizable.|
|

2560
01:26:20,720 --> 01:26:21,560
0,210 210,360 360,570 570,750 750,840
So let me look at
让我看看第二个。

2561
01:26:21,560 --> 01:26:22,940
0,60 60,390 390,780
the second one.|
|

2562
01:26:29,360 --> 01:26:31,280
0,510 510,1260 1260,1590 1590,1800 1800,1920
{} And I'm gonna come
不管怎样，我都会在第一天回来的，

2563
01:26:31,280 --> 01:26:32,030
0,240 240,330 330,480 480,630 630,750
back on this on the

2564
01:26:32,060 --> 01:26:33,620
0,240 240,360 360,690 690,1230 1260,1560
first day anyway,| so don't
|所以，如果这一切都说得通，别担心，

2565
01:26:33,620 --> 01:26:35,030
0,270 270,390 390,630 630,1050 1080,1410
worry if this a lot

2566
01:26:35,030 --> 01:26:36,530
0,180 180,390 390,690 930,1290 1290,1500
makes sense yet,| but here's
|但这是另一个，

2567
01:26:36,530 --> 01:26:38,300
0,210 210,630 990,1440 1440,1530 1530,1770
another one,| {} I got
|我拿到了C1，

2568
01:26:38,330 --> 01:26:39,780
0,840
C1,|
|

2569
01:26:40,060 --> 01:26:42,760
0,570 600,900 900,1380 1440,2250 2310,2700
{} same thing write {x1
同样的事情写成x1，

2570
01:26:42,760 --> 01:26:43,840
0,480
-},|
|

2571
01:26:43,840 --> 01:26:45,280
0,390 390,480 480,630 630,690 690,1440
{} I got a c
我得了个c，然后在这里写x2

2572
01:26:45,310 --> 01:26:47,200
0,480 480,810 810,1350
and here write

2573
01:26:48,010 --> 01:26:49,580
0,450 450,660 660,1020
{x2 -}| and
|然后会有一个读数，实际上是x1，

2574
01:26:49,610 --> 01:26:51,560
0,870 1140,1470 1470,1650 1650,1800 1800,1950
and there's gonna be a

2575
01:26:51,560 --> 01:26:52,620
0,450
read

2576
01:26:52,650 --> 01:26:55,500
0,720 870,1500 1620,2190
{that,actually} goes in

2577
01:26:55,820 --> 01:26:57,340
0,420 420,930
{x1 -},|
|

2578
01:26:57,730 --> 01:26:59,980
0,750 870,1080 1080,1230 1230,1560 1560,2250
and I'm sorry read x2,|
我很抱歉读了x2，|

2579
01:27:00,950 --> 01:27:02,600
0,270 270,450 450,570 570,990 1170,1650
and then I got {C2
然后我得到了C2 C3

2580
01:27:02,600 --> 01:27:04,640
0,510 510,870 870,1500
-} {C3 -}|
|

2581
01:27:04,670 --> 01:27:06,720
0,420 420,510 510,780 780,1470
and the {C3 -}
且C3在另一次读取之后开始并返回1。

2582
01:27:07,110 --> 01:27:09,720
0,600 630,1320 1380,1950 1950,2190 2190,2610
start after the other read

2583
01:27:11,260 --> 01:27:12,920
0,330 330,690 690,1080
and returns 1.|
|

2584
01:27:14,610 --> 01:27:16,410
0,570 870,990 990,1260 1260,1530 1530,1800
And the client here is
而这里的客户是，

2585
01:27:16,410 --> 01:27:18,930
0,450 900,1290 1290,1800 1830,2400 2400,2520
that,| it's not possible to
|你不可能构建一个与线性化相匹配的总阶数，

2586
01:27:18,930 --> 01:27:20,430
0,330 330,390 390,690 690,1320 1350,1500
construct a total order you

2587
01:27:20,430 --> 01:27:23,420
0,510 660,1350 1380,1860 1860,2490
know matches {linearizability -},|
|

2588
01:27:23,480 --> 01:27:26,120
0,840 1140,1740 1740,1920 1920,2250 2250,2640
and, {} in one way
并且，在一种方式中，这一点的一个指示是该读取返回x1，

2589
01:27:26,120 --> 01:27:27,590
0,330 330,810 810,900 900,1230 1230,1470
one indication of this is

2590
01:27:27,590 --> 01:27:29,930
0,210 210,420 420,900 930,1620 1620,2340
that this read returned x1,|
|

2591
01:27:30,050 --> 01:27:32,360
0,600 600,1230 1470,1800 1800,2130 2130,2310
started after the read that
在返回2的读取之后开始，

2592
01:27:32,360 --> 01:27:33,640
0,360 360,750
returned 2,|
|

2593
01:27:33,790 --> 01:27:34,960
0,630 630,840 840,960 960,1080 1080,1170
and I will make this
稍后我会把它说得更精确一点，

2594
01:27:34,960 --> 01:27:35,650
0,30 30,180 180,270 270,420 420,690
a little bit more precise

2595
01:27:35,650 --> 01:27:37,240
0,240 240,420 420,570 570,870 930,1590
later,| but in a real
|但在一个真正的单机系统中，

2596
01:27:37,300 --> 01:27:39,130
0,150 150,330 330,630 630,1200 1230,1830
you know single machine system,|
|

2597
01:27:39,160 --> 01:27:40,210
0,120 120,240 240,390 390,690 690,1050
that could have never happened
这不可能发生在正确的时候，

2598
01:27:40,420 --> 01:27:42,160
0,330 330,810 1110,1380 1380,1530 1530,1740
right,| because {} that would
|因为这意味着该值在RX2和RX1之间改变

2599
01:27:42,160 --> 01:27:43,510
0,120 120,570 570,750 750,840 840,1350
have meant that the value

2600
01:27:43,510 --> 01:27:45,370
0,570 570,900 900,1230 1380,1710 1710,1860
changed between {Rx2 -} and

2601
01:27:45,370 --> 01:27:47,500
0,210 210,780 1080,1320 1320,1980 1980,2130
{Rx1 -}| and and you
|而且你知道，通过我们在董事会上的这几个操作，

2602
01:27:47,500 --> 01:27:49,000
0,390 420,1080
know {with,these}

2603
01:27:49,000 --> 01:27:50,200
0,210 210,660 660,750 750,900 900,1200
few operations that we have

2604
01:27:50,200 --> 01:27:51,310
0,90 90,150 150,630 720,870 870,1110
on the board,| that has
|情况必须是这样的，

2605
01:27:51,310 --> 01:27:52,270
0,60 60,180 180,270 270,630 630,960
to be the case that,|
|

2606
01:27:53,090 --> 01:27:54,260
0,630
this
这个RX1在那次写入之后发生了什么，

2607
01:27:54,260 --> 01:27:55,700
0,240 240,510 510,870 870,1170 1170,1440
Rx1 what happened after that

2608
01:27:55,700 --> 01:27:56,740
0,450
write,|
|

2609
01:27:57,260 --> 01:27:59,660
0,660 660,1290 1290,1770 1770,2220 2220,2400
{} and this write must
而这一次写入肯定是在那次写入之后发生的，

2610
01:27:59,660 --> 01:28:01,820
0,120 120,690 1020,1380 1380,1680 1680,2160
have happened after that write,|
|

2611
01:28:02,090 --> 01:28:03,830
0,420 420,600 600,660 660,1110 1110,1740
because they're in total, there,
因为他们在一起，在那里，我们必须尊重你知道的C1单曲的顺序。

2612
01:28:03,860 --> 01:28:04,880
0,90 90,210 210,300 300,960 960,1020
we have to respect you

2613
01:28:04,880 --> 01:28:06,050
0,150 150,360 360,840 840,990 990,1170
know the ordering of the

2614
01:28:06,050 --> 01:28:08,020
0,630 630,840 840,1440
single of C1.|
|

2615
01:28:08,360 --> 01:28:09,470
0,240 240,390 390,570 570,780 780,1110
And so there's no way
所以基本上不可能把RX1放在总的顺序中

2616
01:28:09,470 --> 01:28:10,730
0,120 120,450 450,1050 1080,1170 1170,1260
to basically slot you know

2617
01:28:10,730 --> 01:28:12,470
0,630 630,1110 1110,1350 1350,1440 1440,1740
{Rx1 -} in the total

2618
01:28:12,470 --> 01:28:14,810
0,480 540,1170 1380,2040 2040,2130 2130,2340
order| {you,know} according to this
|你知道吗，根据这张照片，

2619
01:28:14,810 --> 01:28:16,820
0,600 780,1080 1080,1320 1320,1500 1500,2010
picture,| {} it should go
|它应该追随Rx1，

2620
01:28:16,850 --> 01:28:19,360
0,810 1170,1350 1350,2010
after {Rx1 -},|
|

2621
01:28:19,420 --> 01:28:21,850
0,720 1170,2040 2040,2220 2220,2370 2370,2430
{} and {} but that
但这不可能是真的，

2622
01:28:21,850 --> 01:28:23,230
0,210 210,420 420,630 630,750 750,1380
can really not be true,|
|

2623
01:28:23,560 --> 01:28:25,180
0,600 600,720 720,1110 1110,1350 1350,1620
because if it got Rx
因为如果它在RX1之后得到Rx

2624
01:28:25,300 --> 01:28:26,710
0,360 360,510 510,960 960,1080 1080,1410
after {Rx1 -}| that names
|也是以Wx2命名的，

2625
01:28:26,710 --> 01:28:28,060
0,300 300,720 720,810 810,1140 1140,1350
also after {} {Wx2 -

2626
01:28:28,060 --> 01:28:29,290
0,420 450,600 600,780 780,1080 1080,1230
-},| so that must have
|所以它一定是写2，而不是1。

2627
01:28:29,290 --> 01:28:32,080
0,360 480,1170 1170,1980 2370,2700 2700,2790
write { -} 2 and

2628
01:28:32,080 --> 01:28:33,100
0,180 180,510
not 1.|
|

2629
01:28:33,740 --> 01:28:34,850
0,180 180,360 360,480 480,990 990,1110
So this is not a
所以这不是可线性化的，也不是执行中的可线性化的历史。

2630
01:28:34,850 --> 01:28:36,110
0,270 270,450 450,840 870,1200 1200,1260
{linearizability - -}, not a

2631
01:28:36,110 --> 01:28:37,780
0,300 300,540 540,870
{linearizable - -}

2632
01:28:37,870 --> 01:28:40,240
0,750 870,1710
{history,in} execution.|
|

2633
01:28:45,820 --> 01:28:46,930
0,300 300,450 450,510 510,840 840,1110
Another way of saying that
另一种说法是，

2634
01:28:46,930 --> 01:28:48,520
0,210 210,480 660,900 900,960 960,1590
is that,| this is what,
|这就是，什么是RXN在这里回归，真正回归陈旧的价值，对，

2635
01:28:48,520 --> 01:28:49,690
0,180 180,270 270,540 540,720 720,1170
what is Rxn in returning

2636
01:28:49,690 --> 01:28:51,940
0,390 420,840 840,1350 1350,1740 1740,2250
here, really returning stale value,

2637
01:28:53,100 --> 01:28:54,150
0,330 330,420 420,540 540,660 660,1050
right,| and that is not
|这是不允许的，

2638
01:28:54,150 --> 01:28:55,220
0,540
allowed,|
|

2639
01:28:56,010 --> 01:28:57,380
0,240 240,570

2640
01:28:57,940 --> 01:28:59,050
0,180 180,240 240,540 540,960 960,1110
if the machine behaves like
如果机器的行为就像一台机器

2641
01:28:59,050 --> 01:29:00,130
0,60 60,300 300,570 570,690 690,1080
a single machine| or replicated
|或者，复制的服务器的行为就像一台机器。

2642
01:29:00,130 --> 01:29:01,210
0,300 300,600 600,750 750,810 810,1080
server behaves like a single

2643
01:29:01,210 --> 01:29:02,160
0,390
machine.|
|

2644
01:29:02,520 --> 01:29:03,300
0,300 300,420 420,510 510,660 660,780
And so I'm gonna go
所以我要回去，你知道的，

2645
01:29:03,300 --> 01:29:04,530
0,390 390,480 480,570 570,840 840,1230
back you know this,| to
|在下周的讲座上，

2646
01:29:04,530 --> 01:29:06,420
0,780 780,870 870,1200 1200,1680 1680,1890
on the lecture when next

2647
01:29:06,420 --> 01:29:07,230
0,240 240,390 390,450 450,630 630,810
week,| when we talk about
|当我们谈到动物园饲养员时，

2648
01:29:07,230 --> 01:29:09,000
0,150 150,660 930,1500 1500,1680 1680,1770
{zookeeper -},| because this is
|因为这将是非常重要的，

2649
01:29:09,000 --> 01:29:10,260
0,120 120,180 180,390 390,630 630,1260
going to be very important,|
|

2650
01:29:10,260 --> 01:29:11,730
0,90 90,510 510,570 570,960 960,1470
this notion of {linearizability -},|
这种线性化的概念，|

2651
01:29:11,730 --> 01:29:12,810
0,180 180,240 240,510 510,690 690,1080
sort of thing that shows
这类事情可能会出现在报纸上，

2652
01:29:12,810 --> 01:29:14,400
0,390 390,870 870,960 960,1050 1050,1590
up probably in the paper,|
|

2653
01:29:14,550 --> 01:29:15,630
0,270 270,420 420,720 720,780 780,1080
and this notion of stale
这种陈旧的价值观可能也会显现出来。

2654
01:29:15,630 --> 01:29:17,640
0,540 540,720 720,1020 1020,1200 1200,2010
values also shows up probably.|
|

2655
01:29:19,800 --> 01:29:20,670
0,210 210,390 390,570 570,810 810,870
And since I'm running out
既然我的时间不多了

2656
01:29:20,670 --> 01:29:21,600
0,60 60,270 270,360 360,480 480,930
of time| and you're gonna
|你要我下周再继续。

2657
01:29:21,600 --> 01:29:23,370
0,360 360,720 720,1020 1020,1470 1470,1770
I'll resume that next week.|
|

2658
01:29:24,540 --> 01:29:25,760
0,690
Okay?|
好吧?|

2659
01:29:26,170 --> 01:29:28,780
0,870 870,1110 1230,1770 1770,2220

2660
01:29:29,260 --> 01:29:31,000
0,630 660,870 870,1260 1260,1440 1440,1740
Any further questions| and people
任何进一步的问题|人们需要离开，请随意离开，

2661
01:29:31,000 --> 01:29:32,290
0,150 150,210 210,450 450,870 900,1290
need to leave, please feel

2662
01:29:32,290 --> 01:29:33,970
0,180 180,270 270,630 750,1500 1500,1680
free to leave,| {} in
|事实上，我希望你做到了，

2663
01:29:33,970 --> 01:29:34,900
0,240 240,300 300,540 540,630 630,930
fact I hope you did,|
|

2664
01:29:35,320 --> 01:29:37,630
0,510 750,1200 1200,1260 1260,1500 1500,2310
I want to make responsible
我想追究你错过其他课的责任。

2665
01:29:37,630 --> 01:29:39,100
0,180 180,300 300,570 570,870 870,1470
that you miss other classes.|
|

2666
01:29:40,230 --> 01:29:41,960
0,210 210,510 510,1230
Is this a
这是不是一个考虑因素，比如什么类型的一致性被认为是强一致性。

2667
01:29:41,960 --> 01:29:43,620
0,600 600,1080
consider, like

2668
01:29:43,620 --> 01:29:44,940
0,120 120,240 240,300 300,1050 1050,1320
what type of consistency is

2669
01:29:44,940 --> 01:29:46,200
0,480 480,570 570,690 690,870 900,1260
considered to be {} strong

2670
01:29:46,200 --> 01:29:50,250
0,1230 1440,3540 3540,3870 3870,3930 3930,4050
consistency.| This considered to be
|这被认为是基本上很强的一致性，

2671
01:29:50,250 --> 01:29:52,240
0,60 60,450 450,750 750,1380
{} basically strong consistency,|
|

2672
01:29:52,360 --> 01:29:53,890
0,300 300,480 480,1020 1020,1110 1110,1530
{} and what it really
它实际上是对什么是强一致性的准确定义，

2673
01:29:53,890 --> 01:29:55,000
0,270 270,450 450,510 510,600 600,1110
is sort of a precise

2674
01:29:55,000 --> 01:29:56,830
0,570 570,750 750,930 930,1200 1200,1830
definition of what strong consistency

2675
01:29:56,830 --> 01:29:57,780
0,450
is,|
|

2676
01:29:58,360 --> 01:29:59,920
0,300 300,510 510,780 780,990 990,1560
{} so like our intuition
因此，就像我们关于什么是强一致性的直觉，即表现得像一台机器一样，

2677
01:29:59,920 --> 01:30:01,480
0,210 210,360 360,600 600,1230 1230,1560
about what strong consistency {is,namely}

2678
01:30:01,480 --> 01:30:03,040
0,480 480,660 660,720 720,990 990,1560
behaving like a single machine,|
|

2679
01:30:03,040 --> 01:30:04,330
0,180 180,270 270,690 690,1170 1170,1290
that the precise definition that
人们在技术文献中使用的准确定义是线性化。

2680
01:30:04,330 --> 01:30:05,740
0,330 330,660 660,750 750,1020 1050,1410
people use in the technical

2681
01:30:05,740 --> 01:30:07,840
0,600 630,780 780,1050 1050,1560
literature is {linearizability -}.|
|

2682
01:30:12,420 --> 01:30:14,460
0,330 330,660 660,870 870,1110 1110,2040
{} How did they decide
他们是如何决定拥有这处房产的，

2683
01:30:14,490 --> 01:30:17,220
0,600 900,1620 1650,1980 1980,2520 2520,2730
to have that property,| like
|比如他们为什么决定拥有这处房产。

2684
01:30:17,220 --> 01:30:18,540
0,450 450,630 630,780 780,1230 1230,1320
why did they decide to

2685
01:30:18,540 --> 01:30:20,370
0,210 210,420 420,1050 1290,1590 1590,1830
have that property.| {} There's
|有几件事，

2686
01:30:20,370 --> 01:30:22,140
0,90 90,450 450,900 900,1380 1380,1770
a couple things,| one reason,
|一个原因，就是这个原因，

2687
01:30:22,140 --> 01:30:24,750
0,780 1050,1800 1800,2100 2220,2430 2430,2610
the reason,| okay, so it
|好的，所以这是有道理的，

2688
01:30:24,750 --> 01:30:25,710
0,240 240,390 390,480 480,840 840,960
makes sort of sense,| you
|你知道，如果你从这个角度来看，

2689
01:30:25,710 --> 01:30:26,760
0,120 120,360 360,510 510,810 810,1050
know if you think from

2690
01:30:26,760 --> 01:30:28,220
0,240 240,510 510,570 570,1020
this point of view,|
|

2691
01:30:28,730 --> 01:30:29,780
0,210 210,300 300,480 480,540 540,1050
like you want to behave,
就像您想要的行为一样，您希望使复制的系统的行为类似于单台计算机或复制的计算机

2692
01:30:29,780 --> 01:30:30,620
0,120 120,270 270,330 330,510 510,840
you want to make a

2693
01:30:30,680 --> 01:30:31,940
0,540 540,810 810,1050 1050,1200 1200,1260
replicated system behave like a

2694
01:30:31,940 --> 01:30:33,520
0,360 360,960
single machine

2695
01:30:33,700 --> 01:30:35,290
0,240 240,480 480,1020 1020,1290 1320,1590
or {} replicated {} machine|
|

2696
01:30:35,290 --> 01:30:36,040
0,120 120,210 210,360 360,420 420,750
and you want to only
并且您希望只允许实际对应于单台计算机可以完成的执行的结果，

2697
01:30:36,040 --> 01:30:37,960
0,420 420,870 870,1050 1050,1350 1350,1920
allow outcomes that actually correspond

2698
01:30:37,960 --> 01:30:39,100
0,120 120,690 690,810 810,870 870,1140
to executions that the single

2699
01:30:39,100 --> 01:30:40,450
0,330 330,450 450,540 540,870 1110,1350
machine could have done,| the
|下一个线性化是非常直观的定义。

2700
01:30:40,450 --> 01:30:41,800
0,270 270,540 540,1050 1050,1080 1080,1350
next {linearizability -} are very

2701
01:30:41,800 --> 01:30:44,780
0,660 1050,1980 1980,2160 2160,2460
intuitive definition for that.|
|

2702
01:30:45,020 --> 01:30:46,520
0,300 300,720 720,1050 1050,1230 1230,1500
The database world has also
数据库世界也有一些其他术语，如可串行化，

2703
01:30:46,520 --> 01:30:48,830
0,180 180,720 750,1770 1770,1920 1920,2310
some other terminology like {serializability

2704
01:30:48,830 --> 01:30:49,850
0,450 450,600 600,750 750,960 960,1020
-},| this is also a
|这也是一个将在后面的学期中出现的术语

2705
01:30:49,850 --> 01:30:51,110
0,210 210,360 360,510 510,1140 1140,1260
term that will show up

2706
01:30:51,110 --> 01:30:53,330
0,90 90,690 720,990 990,1440 1800,2220
in the term later| and
|基本上，线性化和串行化之间的唯一区别

2707
01:30:53,510 --> 01:30:54,980
0,540 540,600 600,870 870,1200 1200,1470
basically the only difference between

2708
01:30:54,980 --> 01:30:56,180
0,180 180,300 300,510 510,1020 1020,1200
sort of {linearizability -} and

2709
01:30:56,180 --> 01:30:57,860
0,510 510,690 690,1260 1260,1380 1380,1680
{} {serializability -}| is that
|可串行化不需要与实时匹配。

2710
01:30:58,040 --> 01:30:59,870
0,300 300,420 420,900 900,1200 1200,1830
{serializability - -} doesn't require

2711
01:30:59,870 --> 01:31:01,480
0,180 180,630 630,1140
that matches real-time.|
|

2712
01:31:02,980 --> 01:31:04,540
0,510 510,690 690,930 930,1260 1260,1560
And so people have different
因此，人们对强一致性有不同的定义，

2713
01:31:04,540 --> 01:31:06,310
0,510 510,780 780,930 930,1200 1200,1770
definitions of {} strong consistency,|
|

2714
01:31:06,310 --> 01:31:07,750
0,120 120,270 270,690 870,1380 1380,1440
if you will and the
如果你愿意，我们最有可能看到的就是线性化，

2715
01:31:07,750 --> 01:31:09,070
0,210 210,360 360,510 510,900 900,1320
one that we'll see most

2716
01:31:09,070 --> 01:31:10,720
0,570 570,720 720,1110 1110,1470 1470,1650
probably is {linearizability -},| which
|哪一种最接近于机器的行为，复制或行为像一台机器。

2717
01:31:10,720 --> 01:31:12,220
0,510 510,990 990,1170 1170,1410 1410,1500
corresponds closest to like the

2718
01:31:12,220 --> 01:31:14,080
0,300 300,930 930,1170 1170,1650 1650,1860
machine behaves that replicates or

2719
01:31:14,080 --> 01:31:15,160
0,240 240,390 390,420 420,690 690,1080
behaves like a single machine.|
|

2720
01:31:20,750 --> 01:31:22,980
0,300 300,840 1020,1290 1290,1680
Thank you.| You're welcome.|
谢谢。|不用谢。|

2721
01:31:24,760 --> 01:31:25,900
0,90 90,180 180,240 240,570 570,1140
I have a question about
我有一个关于网络分区期间会发生什么的问题，

2722
01:31:25,930 --> 01:31:27,100
0,570
{}

2723
01:31:27,530 --> 01:31:30,170
0,360 360,1380 1530,2010 2010,2220 2220,2640
what happens during a network

2724
01:31:30,170 --> 01:31:32,720
0,690 1710,2010 2010,2100 2100,2340 2340,2550
partition,| so I know like
|所以我知道，如果一个领导者完全被分割了，

2725
01:31:32,720 --> 01:31:34,130
0,120 120,480 480,600 600,1050 1050,1410
so if a leader gets

2726
01:31:34,130 --> 01:31:35,780
0,570 570,990 990,1110 1110,1290 1290,1650
partitioned completely on their own,|
|

2727
01:31:36,020 --> 01:31:37,940
0,390 390,780 780,1020 1020,1320 1320,1920
they'll eventually climb out,| but
它们最终会爬出来，|但如果他们有一些追随者的话，

2728
01:31:37,940 --> 01:31:38,960
0,120 120,270 270,690 690,930 930,1020
if they have sort of

2729
01:31:38,960 --> 01:31:39,820
0,390
like

2730
01:31:40,280 --> 01:31:42,350
0,150 150,390 390,1230 1410,1680 1680,2070
a few followers with them,|
|

2731
01:31:42,380 --> 01:31:44,480
0,540 570,960 960,1080 1080,1530
they'll stay the leader,|
他们将继续保持领导地位，|

2732
01:31:44,480 --> 01:31:45,260
0,360 360,450 450,600 600,660 660,780
and they won't be able
他们将不能做出任何承诺，

2733
01:31:45,260 --> 01:31:46,130
0,60 60,240 240,570 570,720 720,870
to commit anything,| because they'll
|因为他们将是少数

2734
01:31:46,130 --> 01:31:47,660
0,90 90,180 180,240 240,900 1320,1530
be in a minority| and
|他们将成为一位新的领袖

2735
01:31:47,660 --> 01:31:48,410
0,150 150,270 270,300 300,540 540,750
they'll be a new leader|
|

2736
01:31:48,410 --> 01:31:50,690
0,90 90,210 210,480 570,990 1200,2280
and they'll be,| so will
他们将会是，|那么，那个领导人会不会意识到，也许这是一个陈腐的领导人

2737
01:31:50,690 --> 01:31:52,360
0,210 210,540 540,1140
that leader ever

2738
01:31:52,420 --> 01:31:54,370
0,360 360,600 630,1350 1350,1500 1500,1950
sort of recognize that maybe

2739
01:31:54,370 --> 01:31:55,960
0,240 240,300 300,630 630,1050 1260,1590
it's a stale leader| or
|或者我们只是假设最终如果分区消失，

2740
01:31:55,960 --> 01:31:57,100
0,120 120,240 240,480 480,840 840,1140
do we just assume that

2741
01:31:57,310 --> 01:31:59,110
0,810 810,960 960,1110 1110,1590 1590,1800
eventually if the partition goes

2742
01:31:59,110 --> 01:32:00,160
0,510
away,|
|

2743
01:32:00,160 --> 01:32:01,420
0,690

2744
01:32:01,820 --> 01:32:03,200
0,540 540,870 870,990 990,1170 1170,1380
it'll figure out,| because I'm
它会想通的，|因为我担心如果有客户在和陈腐的领导谈话，

2745
01:32:03,200 --> 01:32:04,250
0,270 270,390 390,570 570,660 660,1050
worried if there's a client

2746
01:32:04,250 --> 01:32:05,210
0,180 180,480 480,570 570,660 660,960
that's talking to the stale

2747
01:32:05,210 --> 01:32:06,200
0,390
leader,|
|

2748
01:32:06,320 --> 01:32:07,550
0,270 270,360 360,510 510,900 900,1230
what does that client do.|
那个客户是做什么的。|

2749
01:32:09,450 --> 01:32:12,450
0,1410 1440,1980 1980,2130 2130,2580 2760,3000
The no,| okay so this
不，|好了，这张照片是一个很好的问题，

2750
01:32:12,450 --> 01:32:13,230
0,60 60,120 120,300 300,630 630,780
is a great question with

2751
01:32:13,230 --> 01:32:14,400
0,180 180,570 570,810 810,1110 1110,1170
this picture here,| hopefully it
|希望这能有所帮助，

2752
01:32:14,400 --> 01:32:15,440
0,90 90,540
will help,|
|

2753
01:32:15,560 --> 01:32:17,690
0,570 1170,1350 1350,1440 1440,1740 1740,2130
{} so the client talks
所以客户会跟这个人说话，对吗，

2754
01:32:17,690 --> 01:32:18,710
0,150 150,450 450,510 510,720 720,1020
to talk to this guy,

2755
01:32:18,710 --> 01:32:19,970
0,300 300,450 450,690 690,780 780,1260
correct,| like who's the leader,|
|比如谁是领袖，|

2756
01:32:20,640 --> 01:32:21,540
0,210 210,330 330,390 390,840 870,900
you see the picture,| I
你看这张图，|我再检查一遍，你就知道了。

2757
01:32:21,540 --> 01:32:22,740
0,270 270,480 480,900 930,1080 1080,1200
just double check, you can

2758
01:32:22,740 --> 01:32:24,270
0,270 270,390 390,510 510,750 1290,1530
see.| I can see it.|
|我看得出来。|

2759
01:32:24,360 --> 01:32:25,290
0,210 210,390 390,690 690,780 780,930
So let's say you know
假设你知道第一个盒子是领头羊，

2760
01:32:25,290 --> 01:32:26,190
0,150 150,360 360,690 690,780 780,900
this first box is the

2761
01:32:26,190 --> 01:32:27,600
0,480 600,960 960,1170 1170,1230 1230,1410
leader,| client talks to that
|客户跟那个领导谈过了，

2762
01:32:27,600 --> 01:32:29,610
0,510 720,990 990,1260 1260,1620 1620,2010
leader,| the leader can't commit
|领导人不能做任何行动，对吧，

2763
01:32:29,610 --> 01:32:31,340
0,180 180,840 840,1230
any operations, right,|
|

2764
01:32:31,690 --> 01:32:33,160
0,630 630,810 810,1080 1080,1200 1200,1470
{} and so it will
因此，它将提交应用通道上的所有内容

2765
01:32:33,160 --> 01:32:34,330
0,450 450,720 720,810 810,870 870,1170
commit anything on the apply

2766
01:32:34,330 --> 01:32:35,260
0,480 480,600 600,720 720,780 780,930
channel| and so it will
|所以它永远不会对客户做出回应，对吧，

2767
01:32:35,260 --> 01:32:36,610
0,240 240,720 720,810 810,870 870,1350
never respond to the client,

2768
01:32:36,820 --> 01:32:38,770
0,390 720,930 930,1260 1260,1470 1470,1950
right,| because there's no operation
|因为实际上没有操作，所以它的操作没有被执行，

2769
01:32:38,770 --> 01:32:40,150
0,300 300,630 630,1080 1080,1170 1170,1380
actually its operations are not

2770
01:32:40,150 --> 01:32:41,460
0,210 210,810
being executed,|
|

2771
01:32:41,660 --> 01:32:42,680
0,180 180,270 270,600 600,840 840,1020
so the client will just
所以客户端只会重试，永远保持重试，

2772
01:32:42,680 --> 01:32:44,780
0,570 600,870 870,1170 1170,1620 1620,2100
retry, just keep retrying forever,|
|

2773
01:32:46,230 --> 01:32:48,210
0,180 180,930 1110,1290 1290,1470 1680,1980
{} until you know until
直到你知道客户可能真的尝试了另一个，你知道，其他追随者之一，正确，

2774
01:32:48,210 --> 01:32:50,460
0,570 570,1200 1200,1470 1470,1770 1770,2250
{the,client} actually maybe tries another,

2775
01:32:50,460 --> 01:32:53,380
0,0 1740,1920 1920,2370
{} you know,

2776
01:32:53,380 --> 01:32:54,370
0,150 150,210 210,300 300,480 480,990
one of the other followers,

2777
01:32:54,370 --> 01:32:55,810
0,330 330,450 450,1200 1200,1320 1320,1440
correct,| that maintains you know
|这样你就知道小组里还有谁了，

2778
01:32:55,810 --> 01:32:56,980
0,270 270,510 510,630 630,1020 1020,1170
who else is actually in

2779
01:32:56,980 --> 01:32:58,880
0,570 810,1560
the group,|
|

2780
01:32:58,880 --> 01:33:02,690
0,1590 1620,2040 2040,2130 2130,2760 2760,3810
or until the network {}
或者在网络痊愈之前，

2781
01:33:02,720 --> 01:33:03,800
0,600
heals,|
|

2782
01:33:04,660 --> 01:33:06,250
0,450 450,720 720,990 990,1260 1260,1590
and the leader actually commit
而领导者实际上承诺了一项行动。

2783
01:33:06,250 --> 01:33:07,960
0,60 60,540 720,1260 1290,1590 1590,1710
an operation.| Gotcha, wait, so
|明白了，等等，所以领导不马上回复那些，

2784
01:33:07,960 --> 01:33:09,880
0,510 510,750 750,870 870,1320 1350,1920
doesn't doesn't the leader immediately

2785
01:33:09,880 --> 01:33:11,200
0,450 450,660 660,870 870,1080 1080,1320
reply those,| saying I got
|说我收到了你的请求，还是要等到承诺。

2786
01:33:11,200 --> 01:33:12,460
0,150 150,840
your request

2787
01:33:12,680 --> 01:33:14,240
0,270 270,420 420,600 870,1320 1320,1560
or does it wait {until,committed}.|
|

2788
01:33:14,870 --> 01:33:16,610
0,600 600,870 870,990 990,1200 1200,1740
{No,in,lab} 3, it doesn't know
不，在实验3中，它不知道与客户端提交，直到谁实际处理了请求，

2789
01:33:16,610 --> 01:33:18,560
0,600 600,900 900,1170 1170,1530 1530,1950
commit with a client {until,who}

2790
01:33:18,560 --> 01:33:20,030
0,270 270,450 450,840 840,900 900,1470
actually has processed the request,|
|

2791
01:33:20,640 --> 01:33:21,990
0,210 210,390 390,720 720,930 930,1350
and which means that the
这意味着这一行动实际上是通过木筏进行的

2792
01:33:22,020 --> 01:33:23,460
0,480 480,690 690,810 810,1140 1140,1440
operation actually has run through

2793
01:33:23,460 --> 01:33:24,510
0,390 390,510 510,720 720,900 900,1050
raft| and come out of
|走出所申请的通道

2794
01:33:24,510 --> 01:33:25,590
0,90 90,450 450,750 750,870 870,1080
the applied channel| and ask
|并要求由服务器执行。

2795
01:33:25,590 --> 01:33:26,940
0,150 150,600 600,720 720,810 810,1350
{} executed by the servers.|
|

2796
01:33:27,630 --> 01:33:28,860
0,660
Okay.|
好吧。|

2797
01:33:33,330 --> 01:33:34,500
0,90 90,240 240,420 420,1020 1020,1170
{Does,that} makes sense.| Yeah, so
这说得通吗。|是的，这样客户端就可以实现超时，

2798
01:33:34,500 --> 01:33:35,850
0,180 180,630 630,750 750,960 960,1350
the client could just implement

2799
01:33:35,850 --> 01:33:37,020
0,120 120,600 600,840 840,990 990,1170
a timeout,| where like if
|在这种情况下，如果他们在一段时间内没有收到提交，

2800
01:33:37,020 --> 01:33:38,340
0,690 690,900 900,1050 1050,1110 1110,1320
a certain amount of time

2801
01:33:38,340 --> 01:33:39,540
0,90 90,180 180,450 510,1110 1110,1200
and they haven't received the

2802
01:33:39,540 --> 01:33:41,160
0,390 480,1110 1110,1320 1320,1530 1530,1620
commit,| assume that maybe I
|假设也许我应该尝试不同的节点，

2803
01:33:41,160 --> 01:33:42,420
0,150 150,420 420,480 480,870 870,1260
should try a different node,|
|

2804
01:33:42,600 --> 01:33:43,620
0,180 180,540 540,720 720,810 810,1020
and then if it gets
然后如果它得到了新的领导人或新领导人的追随者，

2805
01:33:43,620 --> 01:33:45,060
0,180 210,450 450,810 810,1290 1320,1440
the new leader or {}

2806
01:33:45,060 --> 01:33:46,020
0,300 300,360 360,450 450,570 570,960
follower of the new leader,|
|

2807
01:33:46,200 --> 01:33:48,570
0,570 810,1200 1200,1500 1500,1860 1890,2370
it'll be back to normal.|
一切都会恢复正常。|

2808
01:33:48,570 --> 01:33:50,610
0,90 90,660 660,1200 1200,1800 1830,2040
For example, this clerk that's
例如，这个职员就是这个职员的工作人员，

2809
01:33:50,610 --> 01:33:52,260
0,390 390,510 510,690 690,1140 1140,1650
exactly what this clerk does,|
|

2810
01:33:52,780 --> 01:33:53,890
0,180 180,390 390,480 480,720 720,1110
you know the place along
你知道什么地方和服务器能真正做到你刚才所说的。

2811
01:33:53,890 --> 01:33:55,030
0,150 150,240 240,570 570,690 690,1140
with the servers to actually

2812
01:33:55,030 --> 01:33:56,230
0,390 390,600 600,750 750,990 990,1200
{} do what you just

2813
01:33:56,230 --> 01:33:58,160
0,240 720,1350
said.| {Got,it},
|知道了，好的，谢谢。

2814
01:33:59,500 --> 01:34:01,040
0,450 450,720 720,960
okay, thank you.|
|

2815
01:34:01,070 --> 01:34:02,160
0,180 180,300 300,510
You're {welcome -}.|
不用谢。|

2816
01:34:02,410 --> 01:34:03,370
0,360 360,480 480,540 540,780 780,960
Sorry, can you repeat again,
对不起，你能再重复一遍吗，店员是怎么做的。

2817
01:34:03,370 --> 01:34:04,980
0,150 150,240 240,540 540,1110
what the clerk does.|
|

2818
01:34:05,640 --> 01:34:06,750
0,150 150,510 510,630 630,870 870,1110
The clerk is a little
这位店员有点呆板，

2819
01:34:06,750 --> 01:34:08,370
0,210 210,330 330,810 810,1320 1320,1620
bit of a stub,| where
|就像一个小图书馆，

2820
01:34:08,370 --> 01:34:10,260
0,150 150,810 840,1260 1260,1680 1680,1890
like a little library,| that
|客户端链接到的，

2821
01:34:10,260 --> 01:34:11,820
0,420 420,690 690,870 1140,1230 1230,1560
{the,client} links with,| and {the,client}
|客户机调用PUT和GET

2822
01:34:11,820 --> 01:34:13,560
0,210 210,420 420,540 540,1020 1350,1740
calls puts and gets| and
|而职员实际上是它与之对话的接口

2823
01:34:13,560 --> 01:34:15,270
0,90 90,480 480,1020 1020,1440 1440,1710
the clerk actually is the

2824
01:34:15,270 --> 01:34:16,410
0,360 360,480 480,600 600,870 870,1140
interface that it talks to|
|

2825
01:34:16,410 --> 01:34:17,310
0,120 120,210 210,510 510,690 690,900
and the clerk can keep
办事员可以保留一些信息，

2826
01:34:17,310 --> 01:34:18,600
0,150 150,780
some information,|
|

2827
01:34:18,630 --> 01:34:20,580
0,450 450,780 780,1050 1050,1170 1170,1950
like who's part of the
就像谁是木筏集群的一部分

2828
01:34:21,480 --> 01:34:23,130
0,360 360,930 1080,1260 1260,1410 1410,1650
raft cluster| and so we're
|所以我们只是领导者和追随者，

2829
01:34:23,130 --> 01:34:24,360
0,420 420,780 780,870 870,1140 1140,1230
only who's the leader and

2830
01:34:24,360 --> 01:34:25,260
0,120 120,240 240,330 330,810 810,900
who are the followers,| at
|至少它认为是领导者和追随者，

2831
01:34:25,260 --> 01:34:26,310
0,180 180,330 330,510 510,840 870,1050
least what it thinks is

2832
01:34:26,310 --> 01:34:27,360
0,120 120,360 360,450 450,510 510,1050
the leader and the followers,|
|

2833
01:34:28,210 --> 01:34:29,800
0,750 750,960 960,1200 1200,1320 1320,1590
and {} when it sends
当它向服务发送RPC时，您知道该服务对领导者不敏感，

2834
01:34:29,800 --> 01:34:31,660
0,420 420,570 570,1620 1620,1710 1710,1860
in {} rpc you know

2835
01:34:31,660 --> 01:34:32,590
0,150 150,210 210,600 600,720 720,930
to the service is not

2836
01:34:32,590 --> 01:34:33,550
0,300 300,450 450,570 570,810 810,960
sensitive to the leader,| what
|它认为的是现任领导人，

2837
01:34:33,550 --> 01:34:34,390
0,180 180,420 420,510 510,600 600,840
it thinks is the current

2838
01:34:34,390 --> 01:34:35,240
0,330
leader,|
|

2839
01:34:35,580 --> 01:34:37,470
0,450 450,540 540,1080 1170,1230 1230,1890
and the servers in the,
不管现在的领导者怎么想，

2840
01:34:37,500 --> 01:34:38,790
0,450 450,720 720,780 780,1020 1020,1290
whatever thinks the current leader,|
|

2841
01:34:38,790 --> 01:34:39,900
0,90 90,330 330,510 510,690 690,1110
the leader might actually respond
领导人实际上可能会回答说，

2842
01:34:39,900 --> 01:34:40,710
0,180 180,330 330,510 510,630 630,810
saying,| like hey I'm not
|就像，嘿，我不是领导，应该派到其他地方去，

2843
01:34:40,710 --> 01:34:41,850
0,120 120,480 480,630 630,870 870,1140
the leader, should send somewhere

2844
01:34:41,850 --> 01:34:42,760
0,450
else,|
|

2845
01:34:42,910 --> 01:34:43,750
0,180 180,360 360,450 450,600 600,840
and then it will try
然后，它会尝试其他选项之一，并更新其信息。

2846
01:34:43,750 --> 01:34:45,340
0,210 210,300 300,390 390,780 900,1590
one of the {others,and} updates

2847
01:34:45,340 --> 01:34:46,640
0,720
{its,information}.|
|

2848
01:34:46,640 --> 01:34:48,470
0,270 270,480 480,930 930,1230 1230,1830
{} And also we'll tag
我们还将标记每个PUT和GET操作，

2849
01:34:48,470 --> 01:34:51,230
0,690 1080,1590 1590,1800 1800,2490 2610,2760
every {put,and} get operation, {}|
|

2850
01:34:51,230 --> 01:34:52,850
0,210 210,810 810,1320 1320,1470 1470,1620
that {it,receives,from,the} client| and that
它从客户端接收的|并以唯一ID发送到服务器，

2851
01:34:52,850 --> 01:34:53,810
0,240 240,300 300,390 390,720 720,960
sends to the server with

2852
01:34:53,810 --> 01:34:55,640
0,60 60,390 390,900 1320,1650 1650,1830
a unique id,| {} so
|以便该服务可以执行重复检测。x

2853
01:34:55,640 --> 01:34:57,920
0,420 420,1050 1170,1620 1620,1740 1740,2280
that the service can {do,duplicate}

2854
01:34:57,920 --> 01:34:58,940
0,510
detection.x|
|

2855
01:34:59,460 --> 01:35:00,240
0,120 120,240 240,420 420,630 630,780
And this all comes up
这些都是在实验室3中出现的，

2856
01:35:00,240 --> 01:35:01,950
0,150 150,420 420,660 660,1050 1080,1710
in lab 3,| so {you,know}
|所以你知道你会在那里看到，

2857
01:35:02,550 --> 01:35:04,260
0,510 510,690 690,1140
you'll see there,|
|

2858
01:35:04,690 --> 01:35:05,920
0,180 180,570 570,750 750,990 990,1230
in {lab,2}, there's no real
在实验室2，没有真正的办事员，

2859
01:35:05,920 --> 01:35:07,040
0,600
clerk,|
|

2860
01:35:07,070 --> 01:35:08,480
0,270 270,360 360,780 780,1230 1230,1410
because the tester basically sort
因为测试仪基本上位于RAFT界面的正上方

2861
01:35:08,480 --> 01:35:09,230
0,90 90,330 330,420 420,630 630,750
of sits on top of

2862
01:35:09,230 --> 01:35:10,340
0,270 270,630 630,750 750,810 810,1110
the directly of the raft

2863
01:35:10,340 --> 01:35:12,080
0,480 480,600 600,840 840,1140 1140,1740
interface| and doesn't really interact
|并不是真正通过店员互动，

2864
01:35:12,380 --> 01:35:13,340
0,330 330,390 390,750 750,870 870,960
through the clerk,| but in
|但在实验室3会通过办事员进行互动。

2865
01:35:13,340 --> 01:35:14,750
0,510 510,870 870,1230 1230,1350 1350,1410
{lab,3} will interact through the

2866
01:35:14,750 --> 01:35:15,720
0,450
clerk.|
|

2867
01:35:16,320 --> 01:35:17,610
0,240 240,390 390,480 480,630 630,1290
So how do the clients
那么客户端如何生成唯一ID，

2868
01:35:17,610 --> 01:35:19,980
0,720 720,1020 1020,1860
generate unique ids,|
|

2869
01:35:20,100 --> 01:35:21,930
0,750 780,1020 1020,1170 1170,1350 1350,1830
{I,think,they} conflict with each other.|
我认为他们彼此冲突。|

2870
01:35:22,050 --> 01:35:24,660
0,1140 1140,1350 1350,1590 1590,1950
Random, big random numbers.|
随机的，很大的随机数字。|

2871
01:35:25,660 --> 01:35:26,920
0,300 300,450 450,570 570,960 960,1260
Alright, so we're just guessing
好的，所以我们只是猜测和希望，

2872
01:35:26,920 --> 01:35:28,600
0,120 120,600 630,960 960,1170 1170,1680
and hoping,| rather than actually
|而不是真正地保证某种类似的增量。

2873
01:35:28,600 --> 01:35:29,890
0,630 630,810 810,1020 1020,1080 1080,1290
guaranteeing some sort of like

2874
01:35:29,890 --> 01:35:32,200
0,1200 1410,1770 1770,2010 2010,2130 2130,2310
incremental.| One way to make
|有一种方法可以让它更有保障，

2875
01:35:32,200 --> 01:35:33,550
0,60 60,300 300,930 930,1020 1020,1350
it more guaranteed,| for example,
|例如，获取您的IP地址并附加一个随机数。

2876
01:35:33,550 --> 01:35:35,560
0,210 210,330 330,660 660,1260 1620,2010
take your IP address {}

2877
01:35:35,560 --> 01:35:37,030
0,270 270,630 630,810 810,1050 1050,1470
and append a random number.|
|

2878
01:35:37,850 --> 01:35:38,780
0,390

2879
01:35:41,070 --> 01:35:42,690
0,180 180,690 690,1080 1080,1200 1200,1620
A question about the homework
一个关于家庭作业的问题。

2880
01:35:42,690 --> 01:35:44,910
0,750 870,1290 1560,1800 1800,1920 1920,2220
question.| Yeah.| So I thought
|嗯。|所以我想它可以在时间倒流，

2881
01:35:44,910 --> 01:35:46,140
0,150 150,300 300,570 570,750 750,1230
that it could go backwards

2882
01:35:46,140 --> 01:35:47,130
0,120 120,390 390,600 600,720 720,990
in time,| like I read
|就像我读报纸一样

2883
01:35:47,130 --> 01:35:48,840
0,120 120,570 570,690 690,840 840,1710
the paper| and it says
|它在第12页上写着，

2884
01:35:48,840 --> 01:35:51,420
0,360 360,900 900,1380 1380,1920 2250,2580
on page 12 [] {},|
|

2885
01:35:51,420 --> 01:35:52,890
0,150 150,420 420,750 1050,1260 1260,1470
it said that if there's
它说如果有冲突，对，

2886
01:35:52,890 --> 01:35:54,630
0,90 90,930 960,1410 1410,1650 1650,1740
a conflict, right,| then the
|则关注者只需丢弃其整个日志

2887
01:35:54,630 --> 01:35:56,460
0,420 420,630 630,1170 1170,1350 1350,1830
follower just discards its entire

2888
01:35:56,460 --> 01:35:57,930
0,420 420,540 540,690 690,990 990,1470
log| and it's also preceded
|它的前面也有快照，

2889
01:35:57,930 --> 01:35:59,400
0,150 150,270 270,990
by the snapshot,|
|

2890
01:36:00,110 --> 01:36:03,080
0,240 240,270 270,960 1110,2100 2220,2970
so I wonder why.| Again,
所以我想知道为什么。|再一次，让我，让我猜猜，

2891
01:36:03,080 --> 01:36:06,290
0,180 180,630 1860,2700 2700,2790 2790,3210
let me, let me guess,|
|

2892
01:36:06,290 --> 01:36:07,520
0,60 60,510 510,720 720,1020 1020,1230
I I don't really know
我我不太清楚这到底是什么，

2893
01:36:07,520 --> 01:36:08,690
0,570 570,720 720,930 930,1080 1080,1170
exactly this is,| what you're
|你指的是，

2894
01:36:08,690 --> 01:36:09,530
0,300 300,480 480,600 600,750 750,840
referring to,| I have to
|我得再查一遍。

2895
01:36:09,530 --> 01:36:11,000
0,150 150,210 210,300 300,630 930,1470
look it up again.| Oh,
|哦，在第12页，

2896
01:36:11,000 --> 01:36:12,470
0,300 300,630 630,930 930,1320 1320,1470
it's on page 12,| it's
|在第12页的末尾，这里的第二栏，

2897
01:36:12,470 --> 01:36:13,850
0,150 150,420 420,990 990,1260 1260,1380
at the it's towards the

2898
01:36:13,850 --> 01:36:14,870
0,180 180,300 300,600 600,930 930,1020
end of page 12 the

2899
01:36:14,870 --> 01:36:16,370
0,420 420,900 900,1170 1170,1350 1350,1500
second column here,| so the
|所以倒数第二段。

2900
01:36:16,370 --> 01:36:18,410
0,330 330,390 390,750 750,1380 1860,2040
second to last paragraph.| So
|因此，日志可以返回，但不能返回状态机。

2901
01:36:18,410 --> 01:36:19,790
0,360 360,630 630,900 900,1050 1050,1380
the log can go back,

2902
01:36:19,790 --> 01:36:20,750
0,180 180,330 330,540 540,630 630,960
right, but not the state

2903
01:36:20,750 --> 01:36:22,430
0,540 750,1050 1050,1290 1290,1410 1410,1680
machine.| Not, oh, the log
|不，哦，日志不能，日志可以倒回去，但状态机不能，

2904
01:36:22,430 --> 01:36:23,750
0,570 570,690 690,900 900,1170 1170,1320
can't, the log can go

2905
01:36:23,750 --> 01:36:24,740
0,270 270,360 360,570 570,660 660,990
back, but not the state

2906
01:36:24,740 --> 01:36:26,210
0,600 720,990 990,1110 1110,1200 1200,1470
machine,| what was the state
|状态机是什么，就像你提交的条目一样，对吧.

2907
01:36:26,210 --> 01:36:27,650
0,330 330,540 540,750 750,990 1170,1440
machine, like what you the

2908
01:36:27,650 --> 01:36:29,260
0,480 480,900 900,1260
committed entries, right.|
|

2909
01:36:30,320 --> 01:36:32,120
0,390 390,810 810,1230 1230,1530 1530,1800
Yeah, the yes, the log
是的，是的，日志不能倒回去，

2910
01:36:32,120 --> 01:36:32,990
0,180 180,300 300,570 570,780 780,870
can't go back,| because of
|由于未提交的条目，我们可以回溯，

2911
01:36:32,990 --> 01:36:35,330
0,900 1230,1590 1590,1920 1920,2280 2280,2340
the {uncommitted -} entries we

2912
01:36:35,330 --> 01:36:36,380
0,150 150,390 390,810 810,960 960,1050
can go back,| this is
|这就像我们之前谈到的整个擦除问题。

2913
01:36:36,380 --> 01:36:37,280
0,180 180,300 300,570 570,840 840,900
like this whole {erase -}

2914
01:36:37,280 --> 01:36:38,150
0,270 270,360 360,450 450,660 660,870
stuff that we talked about

2915
01:36:38,150 --> 01:36:39,140
0,480
earlier.|
|

2916
01:36:40,560 --> 01:36:42,360
0,660 690,870 870,1230 1230,1380 1380,1800
Okay, so actually the log
好的，所以实际上日志可以返回，而不是状态机，

2917
01:36:42,360 --> 01:36:44,520
0,480 480,690 690,1110 1560,2070 2070,2160
can go back, not the

2918
01:36:44,520 --> 01:36:46,260
0,330 330,660 660,930 930,1140 1140,1740
state machine,| which is basically
|这基本上就是你已经做出的承诺。

2919
01:36:46,260 --> 01:36:48,660
0,330 330,750 870,1320 1320,1890 2130,2400
what you committed already.| Yeah
|是啊，木头永远不会消失，

2920
01:36:48,660 --> 01:36:49,830
0,120 120,390 390,750 750,900 900,1170
and the log can never

2921
01:36:49,830 --> 01:36:51,390
0,450 450,630 630,900 900,1020 1020,1560
go,| will never go back,
|永远不会回头，永远不会拯救承诺的行动，对吗，

2922
01:36:51,420 --> 01:36:53,430
0,510 510,900 900,960 960,1470 1470,2010
never bailout of committed operations,

2923
01:36:53,430 --> 01:36:55,080
0,270 270,390 390,510 510,1050 1050,1650
correct,| it can only bailout
|它只能救助抹去的未提交操作。

2924
01:36:55,080 --> 01:36:57,480
0,540 540,1020 1020,1680 1710,2070 2070,2400
erased uncommitted operations.| Yes, that's
|是的，没错，好的。

2925
01:36:57,480 --> 01:37:00,390
0,300 1410,2010 2100,2250 2250,2430 2430,2910
right, okay.| So that's what
|这就是你要问的问题。

2926
01:37:00,420 --> 01:37:01,440
0,270 270,510
{you,ask} question.|
|

2927
01:37:01,620 --> 01:37:02,400
0,150 150,210 210,360 360,450 450,780
Can I ask a question
我可以问一个关于第三张幻灯片的问题吗？

2928
01:37:02,400 --> 01:37:04,860
0,270 270,720 750,1200 1200,1800 1980,2460
about the third slide.| Yeah.|
|嗯。|

2929
01:37:04,860 --> 01:37:05,790
0,90 90,270 270,480 480,780 780,930
The one right before this
就在这个之前的那个，

2930
01:37:05,790 --> 01:37:07,260
0,300 330,870
one, {}|
|

2931
01:37:08,050 --> 01:37:09,490
0,480 540,900 900,990 990,1440 1440,1440
so could you just {}
所以你能帮我快速介绍一下吗，

2932
01:37:10,870 --> 01:37:12,100
0,360 360,480 480,690 690,870 870,1230
walk me through real quick,|
|

2933
01:37:12,100 --> 01:37:14,110
0,630 630,990 990,1440 1440,1560 1560,2010
what match index is doing
匹配索引在写入时所做的操作，

2934
01:37:14,110 --> 01:37:15,310
0,210 210,360 360,720 750,960 960,1200
on the write,| like when
|就像S2与S3通信时一样。

2935
01:37:15,310 --> 01:37:16,600
0,210 210,390 390,540 540,1110 1110,1290
{S2 -} is communicating with

2936
01:37:16,600 --> 01:37:17,820
0,270 270,720
{S3 -}.|
|

2937
01:37:17,960 --> 01:37:19,340
0,360 390,570 570,660 660,1110 1110,1380
Okay.| So it starts out
好吧。|所以它从0开始。

2938
01:37:19,340 --> 01:37:22,760
0,480 510,960 960,1650 1890,2430 2760,3420
as {} 0.| Yep, so
|是的，所以S2正在和谁通信。

2939
01:37:22,760 --> 01:37:23,930
0,210 210,450 450,540 540,1080 1080,1170
{S2 -} is communicating with

2940
01:37:23,930 --> 01:37:24,800
0,360
who.|
|

2941
01:37:24,970 --> 01:37:26,890
0,360 360,750 960,1170 1170,1380 1380,1920
{S3 -}.| Yeah, so basically
S3.|是的，所以基本上没问题，

2942
01:37:26,890 --> 01:37:28,930
0,150 150,330 330,1050 1500,1770 1770,2040
okay,| so here {} match
|所以这里的匹配索引是0对，

2943
01:37:28,930 --> 01:37:30,310
0,390 390,510 510,990 990,1230 1230,1380
index is 0 right,| like
|就像这样，当你写下来的时候是0。

2944
01:37:30,310 --> 01:37:31,540
0,300 300,660 720,960 960,1080 1080,1230
so and when you write

2945
01:37:31,540 --> 01:37:33,120
0,90 90,360 360,450 450,930
it down is 0.|
|

2946
01:37:33,350 --> 01:37:35,510
0,630 1110,1440 1440,1860 1890,2010 2010,2160
Yeah.| Okay, then you get
嗯。|好的，然后你就会知道了，

2947
01:37:35,510 --> 01:37:36,530
0,60 60,240 240,510 510,660 660,1020
to know back,| so match
|所以匹配索引保持为0，对吧。

2948
01:37:36,530 --> 01:37:38,260
0,300 300,390 390,840 840,1170
index stays 0, right.|
|

2949
01:37:38,940 --> 01:37:40,020
0,570
Okay.|
好吧。|

2950
01:37:40,280 --> 01:37:41,570
0,390 420,690 690,990 990,1140 1140,1290
{} Nothing there, but now
什么都没有，但现在它的背部还可以，

2951
01:37:41,570 --> 01:37:42,590
0,270 270,360 360,630 630,900 900,1020
it's an okay back,| so
|那么这意味着什么呢，

2952
01:37:42,590 --> 01:37:44,080
0,150 150,270 270,420 420,930
what does that imply,|
|

2953
01:37:45,800 --> 01:37:48,080
0,270 270,1020 1110,1560 1560,2130 2130,2280
that implies {that,you,know} what did
这意味着您知道它为索引13发送了正确发送心跳的内容，

2954
01:37:48,080 --> 01:37:49,310
0,120 120,300 300,450 450,870 900,1230
it send that send {}

2955
01:37:49,310 --> 01:37:51,920
0,480 480,930 930,1530 1710,2250 2250,2610
heartbeat correct with for index

2956
01:37:51,920 --> 01:37:53,200
0,780
13,|
|

2957
01:37:53,290 --> 01:37:57,400
0,660 660,1590 1620,2400 2400,3510 3900,4110
{} and {} including {}
包括和S3的反应都很好

2958
01:37:57,400 --> 01:37:59,480
0,540 690,960 960,1470
and {} the

2959
01:37:59,600 --> 01:38:02,390
0,630 930,1260 1260,1740 1740,2220 2220,2790
{} {S3 -} responded okay|
|

2960
01:38:02,780 --> 01:38:03,710
0,150 150,270 270,390 390,750 750,930
and so it means that
所以这意味着S3基本上是最新的，直到13，正确，

2961
01:38:03,710 --> 01:38:05,090
0,420 420,570 570,1020 1020,1200 1200,1380
basically {S3 -} is up

2962
01:38:05,090 --> 01:38:06,950
0,90 90,360 360,810 840,1320 1320,1860
to date through until 13,

2963
01:38:07,040 --> 01:38:08,510
0,300 300,570 570,930 930,1320 1320,1470
correct,| {that,is} next index that
|这是它实际拥有的下一个指数，预计为14。

2964
01:38:08,510 --> 01:38:10,190
0,120 120,480 480,960 960,1170 1170,1680
it actually has and expects

2965
01:38:10,190 --> 01:38:11,160
0,480
14.|
|

2966
01:38:11,500 --> 01:38:13,420
0,150 150,630 750,1350 1440,1680 1680,1920
And so the {S2 -}
因此，S2现在知道它的日志匹配到该消息之后的13天。

2967
01:38:13,420 --> 01:38:15,220
0,390 390,600 600,870 870,1080 1080,1800
knows now that it's log

2968
01:38:15,310 --> 01:38:17,860
0,570 630,990 990,1620 1770,2130 2130,2550
matches until 13 after this

2969
01:38:17,920 --> 01:38:19,000
0,600
message.|
|

2970
01:38:19,880 --> 01:38:21,020
0,120 120,270 270,540 540,1080 1080,1140
Is it until 13 or
是到13点还是到12点。

2971
01:38:21,020 --> 01:38:23,900
0,300 300,900 1350,1650 1650,2370 2400,2880
until 12.| It matches till
|比赛持续到13点，

2972
01:38:23,900 --> 01:38:25,460
0,510 510,690 690,840 840,1290 1290,1560
13,| so the next thing
|因此，下一个要发送的内容将是索引13。

2973
01:38:25,460 --> 01:38:26,480
0,180 180,330 330,450 450,840 840,1020
that will be sent will

2974
01:38:26,480 --> 01:38:28,560
0,90 90,480 480,1050 1050,1560
be going index 13.|
|

2975
01:38:28,940 --> 01:38:29,960
0,510
So,
所以，下一个指数和匹配指数将是13。

2976
01:38:30,020 --> 01:38:31,340
0,210 210,270 270,540 540,960 960,1320
so the next index and

2977
01:38:31,340 --> 01:38:32,300
0,300 300,690 690,780 780,900 900,960
match index are going to

2978
01:38:32,300 --> 01:38:33,770
0,150 150,810 900,1140 1140,1260 1260,1470
be 13.| Yeah, the next
|是的，下一个索引还没有使用，对吧，

2979
01:38:33,770 --> 01:38:34,820
0,330 330,420 420,600 600,840 840,1050
index is not used yet,

2980
01:38:34,820 --> 01:38:36,320
0,300 300,540 540,960
right,| means empty.|
|意思是空的。|

2981
01:38:37,290 --> 01:38:38,560
0,690
Okay.|
好吧。|

2982
01:38:38,560 --> 01:38:39,910
0,120 120,300 300,750 750,1200 1200,1350
Yeah, so basically the the
是的，所以基本上就是你知道的方式

2983
01:38:39,910 --> 01:38:41,380
0,300 300,420 420,540 540,930 1110,1470
way you know| they they
|无论哪种方式，你都可以做正确的事，

2984
01:38:41,740 --> 01:38:43,030
0,180 180,270 270,630 750,1020 1020,1290
you can do either way

2985
01:38:43,030 --> 01:38:43,870
0,300 300,390 390,510 510,690 690,840
correct,| you can either save
|你要么保存最后一个，要么你知道第一个，

2986
01:38:43,870 --> 01:38:45,070
0,90 90,390 390,630 630,1080 1110,1200
the last one or you

2987
01:38:45,070 --> 01:38:46,450
0,150 150,660 660,840 840,1020 1020,1380
know first that's gonna be,|
|

2988
01:38:46,630 --> 01:38:48,400
0,210 210,930 930,1170 1170,1650 1710,1770
for the first next to
在你知道的第一个人旁边，

2989
01:38:48,400 --> 01:38:50,170
0,300 300,630 630,1290 1290,1500 1500,1770
{you,know} one,| in this case
|在这种情况下，他们使用第一个下一个。

2990
01:38:50,170 --> 01:38:51,040
0,180 180,360 360,540 540,660 660,870
they go by the first

2991
01:38:51,040 --> 01:38:51,940
0,180 180,390
next one.|
|

2992
01:38:53,410 --> 01:38:54,460
0,210 210,270 270,420 420,780 780,1050
So in this case, both
所以在这种情况下，下一次他们都是13。

2993
01:38:54,460 --> 01:38:56,530
0,120 120,360 360,780 780,1440 1440,2070
of them are 13 for

2994
01:38:56,740 --> 01:38:58,630
0,120 120,360 360,660 870,1650 1650,1890
the next one.| Yeah, so
|是的，所以基本上你可以考虑这个问题，

2995
01:38:58,630 --> 01:38:59,860
0,600 600,750 750,840 840,1020 1020,1230
basically you can think about

2996
01:38:59,860 --> 01:39:01,780
0,240 240,630 630,1110 1110,1740 1740,1920
this,| this stage before, like
|之前的这个阶段，就像所有绿色的东西都发生过一样，

2997
01:39:01,780 --> 01:39:02,560
0,90 90,180 180,420 420,690 690,780
all the green stuff has

2998
01:39:02,560 --> 01:39:07,460
0,540 930,1500 2280,3210 3570,4350
happened,| the match index
|3的匹配指数是13，

2999
01:39:09,660 --> 01:39:12,920
0,840 1950,2730
for 3

3000
01:39:13,360 --> 01:39:15,300
0,210 210,600 630,1380
{} is 13,|
|

3001
01:39:15,300 --> 01:39:16,830
0,330 330,420 420,690 690,1200 1200,1530
and the match index for
而本身的比赛指数2也是13。

3002
01:39:16,830 --> 01:39:18,640
0,720
itself

3003
01:39:20,770 --> 01:39:22,760
0,360 360,510 510,750 750,1260
2 is also 13.|
|

3004
01:39:24,280 --> 01:39:25,600
0,510 510,810
Got it,
知道了，太棒了，谢谢你。

3005
01:39:27,090 --> 01:39:29,490
0,600 870,1290 1290,1770 1860,2040 2040,2400
awesome, thank you.| You're welcome.|
|不用谢。|

3006
01:39:31,840 --> 01:39:33,940
0,840 870,1200 1200,1650 1650,2010 2010,2100
Actually, can I ask a
实际上，我能问你一个后续问题吗，

3007
01:39:33,940 --> 01:39:35,620
0,210 210,330 330,480 480,840 1020,1680
{follow-up -} from that,| so
|因此，当它发现匹配的东西时，

3008
01:39:36,220 --> 01:39:39,610
0,780 810,1290 1590,2100 2100,2520 2520,3390
when it sees something matches,|
|

3009
01:39:39,820 --> 01:39:42,130
0,300 300,720 870,1470 1470,1620 1620,2310
for example here on position
例如在这里的位置11上，

3010
01:39:42,400 --> 01:39:44,320
0,390 390,1110 1260,1470 1470,1650 1650,1920
{} 11,| it saw that
|它看到了匹配，

3011
01:39:44,320 --> 01:39:46,440
0,840 900,1770
matches,| then
|那么可以保证之前的一切也是匹配的。

3012
01:39:47,570 --> 01:39:49,250
0,720 720,840 840,900 900,1410 1410,1680
it is {} guarantee that

3013
01:39:49,250 --> 01:39:51,290
0,390 390,810 810,1050 1050,1560 1560,2040
everything before that matches too.|
|

3014
01:39:51,680 --> 01:39:53,270
0,420 420,720 720,1020 1020,1500 1500,1590
Yes, right, because, hold on
是的，对，因为，等一下，让我再确认一下，你是在说这条信息。

3015
01:39:53,270 --> 01:39:54,380
0,210 210,360 360,840 840,990 990,1110
let me double check you're

3016
01:39:54,380 --> 01:39:55,800
0,210 210,330 330,480 480,960
talking about this message.|
|

3017
01:39:56,920 --> 01:39:58,240
0,540 540,750 750,960 960,1200 1200,1320
Yeah, about like when it
是啊，就像你查一下它说好的时候一样。

3018
01:39:58,240 --> 01:39:59,920
0,330 330,840 840,1050 1050,1170 1170,1680
says okay if you check.|
|

3019
01:40:00,160 --> 01:40:03,430
0,540 690,1650 1860,2550 2550,2850 2850,3270
{} Yeah, yeah, because that
是的，是的，因为这就是上一个术语或前一个索引或正确传达给关注者的全部原因，

3020
01:40:03,430 --> 01:40:04,330
0,150 150,360 360,540 540,780 780,900
is the whole reason that

3021
01:40:04,330 --> 01:40:05,620
0,150 150,510 510,840 840,960 960,1290
the previous term or previous

3022
01:40:05,620 --> 01:40:07,180
0,330 330,390 390,1080 1080,1380 1380,1560
index or communicated correct to

3023
01:40:07,180 --> 01:40:09,400
0,480 510,1110 1470,1830 1830,2040 2040,2220
the follower,| {} to make
|为了再次检查它是否只能对OK做出响应，

3024
01:40:09,400 --> 01:40:10,450
0,270 270,540 540,780 780,930 930,1050
double check that it can

3025
01:40:10,450 --> 01:40:12,280
0,240 240,630 630,780 780,1410 1590,1830
only respond to okay,| if
|如果确实是在前一索引11实际上变为空闲的情况，

3026
01:40:12,280 --> 01:40:13,480
0,330 330,510 510,600 600,930 930,1200
indeed is the case that

3027
01:40:13,480 --> 01:40:15,490
0,1050 1050,1260 1260,1350 1350,1620 1620,2010
{} in the previous index

3028
01:40:15,490 --> 01:40:17,320
0,510 510,810 810,1080 1080,1410
11 actually turn free,|
|

3029
01:40:18,200 --> 01:40:19,220
0,270 270,330 330,630 630,840 840,1020
and if that's true,| that
如果这是真的，|这意味着基本上之前的一切都必须匹配

3030
01:40:19,220 --> 01:40:20,630
0,300 300,420 420,810 810,1140 1140,1410
means that basically everything before

3031
01:40:20,630 --> 01:40:21,950
0,180 180,360 360,810 930,1170 1170,1320
that must match| and this
|这是这样的，

3032
01:40:21,950 --> 01:40:23,930
0,150 150,300 300,450 450,840 840,1980
is like this,| whatever their
|无论他们的声明是什么，无论他们叫什么，

3033
01:40:24,590 --> 01:40:26,540
0,630 630,840 840,1320 1320,1410 1410,1950
whatever their statement they call,|
|

3034
01:40:28,100 --> 01:40:30,200
0,330 330,930 930,1470 1470,1950 1950,2100
this invariant initially maintained that,|
这个不变式最初保持不变，|

3035
01:40:30,200 --> 01:40:31,460
0,180 180,540 540,780 780,1140 1140,1260
like if something matches at
就像如果某样东西在一个索引上匹配，

3036
01:40:31,460 --> 01:40:33,080
0,210 210,450 450,870 870,1350 1350,1620
like one index,| then everything
|然后那场比赛之前的一切也是如此。

3037
01:40:33,080 --> 01:40:36,260
0,300 300,630 630,1230 1230,1470
before that match too.|
|

3038
01:40:36,320 --> 01:40:37,340
0,300 300,480 480,750 750,870 870,1020
Oh, okay, okay, this is
哦，好的，好的，这对我来说是[]。

3039
01:40:37,340 --> 01:40:39,180
0,210 210,930 930,990
[] to me.|
|

3040
01:40:40,530 --> 01:40:42,180
0,540 540,720 720,780 780,990 990,1650
Oh, and I had another
哦，我还有一个跟这个问题有关的跟进问题，

3041
01:40:42,180 --> 01:40:44,310
0,540 540,1230 1320,1680 1680,2010 2010,2130
follow-up question was related to

3042
01:40:44,310 --> 01:40:46,620
0,60 60,420 420,930 1080,1710 2130,2310
the question,| { -} on
|关于我写的演讲问题，

3043
01:40:46,620 --> 01:40:47,730
0,60 60,390 390,870 870,990 990,1110
the lecture question that I

3044
01:40:47,730 --> 01:40:49,920
0,450 720,1260 1290,1680 1680,1920 1920,2190
wrote,| I asked about the
|我询问了有关快照的写入时拷贝的问题，

3045
01:40:49,920 --> 01:40:52,530
0,420 420,600 600,1170 1350,2220 2220,2610
{copy-on-write - -} for {snapshots

3046
01:40:52,530 --> 01:40:54,720
0,630 720,1290 1590,1920 1920,2160 2160,2190
-},| {} I think I
|我想我并不是真的明白被抄袭的是什么，

3047
01:40:54,720 --> 01:40:55,860
0,150 150,360 360,810 810,1020 1020,1140
don't really understand what is

3048
01:40:55,860 --> 01:40:58,050
0,450 540,1140 1140,1350 1350,1590 1830,2190
being copied,| is it, is
|是，是页表还是什么。

3049
01:40:58,050 --> 01:40:59,880
0,150 150,270 270,570 570,1290 1380,1830
it the page tables or

3050
01:40:59,880 --> 01:41:01,590
0,120 120,270 270,600 600,1290 1410,1710
is it something.| I think
|我想我已经回复了你的电子邮件。

3051
01:41:01,590 --> 01:41:05,310
0,30 30,540 570,2310 2520,3600 3600,3720
I responded {to,your,email}.| Yeah, {I,got}
|是的，我收到了电子邮件，但是。

3052
01:41:05,310 --> 01:41:06,600
0,480 480,900
email, but.|
|

3053
01:41:06,750 --> 01:41:10,920
0,1200 1230,2130 2160,3630 3750,4080 4080,4170
Okay, okay, okay, hold on
好吧，好吧，好吧，等一下，

3054
01:41:10,920 --> 01:41:12,300
0,30 30,450 930,1110 1110,1170 1170,1380
a second,| {[] - -
|[]，这个，

3055
01:41:12,300 --> 01:41:15,520
0,120 120,810 840,1410 1920,2670
- -}, {} the,|
|

3056
01:41:15,670 --> 01:41:17,100
0,330 330,960
so okay,
所以好的，场景是快照可能会很昂贵，

3057
01:41:17,320 --> 01:41:19,120
0,180 180,720 720,1260
the scenario is

3058
01:41:19,180 --> 01:41:21,820
0,870 1260,1890 1890,2010 2010,2100 2100,2640
{} snapshot can be expensive,|
|

3059
01:41:21,850 --> 01:41:23,860
0,840 840,1290 1290,1440 1440,1500 1500,2010
because snapchat might be large
因为Snapchat可能有很大的GB，

3060
01:41:24,280 --> 01:41:26,470
0,810 810,900 900,1260 1530,1980 1980,2190
gigabytes,| you know {} {key-value
|你知道键值页表，对不起，[]它是一个千兆字节的键值存储，

3061
01:41:26,470 --> 01:41:28,600
0,570 570,900 900,1380 1380,1980 2070,2130
-} {} page table, {}

3062
01:41:28,600 --> 01:41:30,940
0,480 1290,1530 1530,1680 1680,1950 1950,2340
sorry, [] it was a

3063
01:41:30,940 --> 01:41:32,740
0,600 600,780 780,930 930,1260 1260,1800
gigabyte {} {key-value -} store,|
|

3064
01:41:33,290 --> 01:41:34,310
0,450 450,540 540,690 690,870 870,1020
then you know you need
然后你知道你需要把那GB写入磁盘，对吧，

3065
01:41:34,310 --> 01:41:36,440
0,90 90,360 360,690 720,1410 1590,2130
to write that gigabyte {to,disk},

3066
01:41:36,470 --> 01:41:37,440
0,390
right,|
|

3067
01:41:37,710 --> 01:41:38,940
0,240 240,630 630,780 780,1020 1020,1230
and while you're writing into
当你在磁盘中写入数据时，

3068
01:41:38,940 --> 01:41:40,140
0,390 600,780 780,930 930,1020 1020,1200
disk,| {} if you don't
|如果你不做点聪明的事，

3069
01:41:40,140 --> 01:41:42,060
0,90 90,390 390,990 1170,1410 1410,1920
do anything clever,| you cannot
|您不能处理任何其他PUT和GET操作，

3070
01:41:42,060 --> 01:41:43,320
0,390 390,630 630,840 840,1050 1050,1260
process any other put {and,get}

3071
01:41:43,320 --> 01:41:45,450
0,720 1050,1380 1380,1560 1560,1830 1830,2130
operations,| that come in through
|通过渠道进入，

3072
01:41:45,450 --> 01:41:48,480
0,720 1140,2070 2100,2820 2820,2940 2940,3030
the {} channels,| let me
|让我弹出这张照片。

3073
01:41:48,480 --> 01:41:51,420
0,600 660,1020 1020,1260 1260,1260 2460,2940
actually popup this {} picture.|
|

3074
01:41:52,010 --> 01:41:53,870
0,360 360,720 900,1260 1260,1560 1560,1860
Great, so basically servers decides
很好，所以基本上服务器决定在某个时间点将检查点设置为GB，

3075
01:41:53,870 --> 01:41:54,470
0,60 60,180 180,390 390,450 450,600
at some point to take

3076
01:41:54,470 --> 01:41:55,940
0,90 90,600 600,960 960,1410 1410,1470
a checkpoint to gigabyte,| you
|你必须将一千兆字节写入磁盘，

3077
01:41:55,940 --> 01:41:56,750
0,120 120,210 210,360 360,390 390,810
have to write a gigabyte

3078
01:41:56,750 --> 01:41:58,480
0,510 510,690 690,1170
{to,disk},| that's expensive.|
|太贵了。|

3079
01:41:58,510 --> 01:42:00,670
0,570 930,1140 1140,1680 1680,1770 1770,2160
So the plan you know
所以你知道的计划，我认为报纸暗示的计划，

3080
01:42:00,670 --> 01:42:01,540
0,150 150,330 330,450 450,720 720,870
I think the plan that

3081
01:42:01,540 --> 01:42:03,340
0,240 240,570 570,900 900,1230
the papers hinting at,|
|

3082
01:42:03,340 --> 01:42:05,050
0,630 630,930 930,1260 1260,1350 1350,1710
is that what the service
这就是这项服务的作用吗，

3083
01:42:05,050 --> 01:42:06,140
0,570
does,|
|

3084
01:42:06,320 --> 01:42:07,940
0,540 540,690 690,780 780,1050 1050,1620
it you know calls fork,|
如果你知道Calls Fork，|

3085
01:42:10,880 --> 01:42:11,930
0,210 210,390 390,810 810,990 990,1050
so when it wants to
所以当它想要创建一个检查点时，它调用fork，

3086
01:42:11,930 --> 01:42:13,490
0,150 150,390 390,1110 1230,1350 1350,1560
make a checkpoint, it calls

3087
01:42:13,490 --> 01:42:14,580
0,570
fork,|
|

3088
01:42:15,080 --> 01:42:16,520
0,420 420,660 660,840 840,900 900,1440
and fork case a copy
然后用叉子把这个过程的副本拿出来，对吧，

3089
01:42:16,520 --> 01:42:17,810
0,90 90,240 240,690 690,1050 1050,1290
of that process, right,| now
|现在我们已经运行了操作系统，

3090
01:42:17,810 --> 01:42:18,590
0,120 120,330 330,420 420,540 540,780
we have the {operating -}

3091
01:42:18,590 --> 01:42:20,760
0,540 900,1620
system running,|
|

3092
01:42:21,070 --> 01:42:22,330
0,390 390,540 540,750 750,900 900,1260
and we have now basically
我们现在基本上有两个过程，

3093
01:42:22,330 --> 01:42:25,300
0,480 480,1440 1770,2190 2190,2490 2490,2970
two processes,| {} that correspond
|其对应于该应用服务器RAFT、服务RAFT

3094
01:42:25,300 --> 01:42:28,690
0,1200 1230,1380 1380,1950 2280,2850 2850,3390
to this application servers raft,

3095
01:42:28,690 --> 01:42:30,540
0,420 420,990
service raft,|
|

3096
01:42:30,930 --> 01:42:32,250
0,390 390,600 600,690 690,810 810,1320
and this is the copy,
这是复制品，这个孩子，

3097
01:42:32,400 --> 01:42:34,140
0,60 150,450 450,1020
{} the child,|
|

3098
01:42:34,520 --> 01:42:36,050
0,120 120,480 480,750 750,1200 1200,1530
the operating system uses {copy-on-write
操作系统使用写入时复制，

3099
01:42:36,050 --> 01:42:37,300
0,120 120,540
- -},|
|

3100
01:42:38,040 --> 01:42:38,760
0,210 210,420 420,510 510,690 690,720
so when it made a
因此，当它复制第二个过程时，

3101
01:42:38,760 --> 01:42:40,230
0,420 420,510 510,660 660,900 900,1470
copy of that second process,|
|

3102
01:42:40,680 --> 01:42:41,940
0,570 570,750 750,900 900,1200 1200,1260
{} and just copy the
只复制页表，不复制物理内存，

3103
01:42:41,940 --> 01:42:43,230
0,240 240,600 600,930 930,990 990,1290
page table, didn't {} copy

3104
01:42:43,230 --> 01:42:44,460
0,300 300,660
physical memory,|
|

3105
01:42:45,220 --> 01:42:47,140
0,120 120,510 510,900 900,1080 1080,1920
so basically these two processes
因此，这两个进程基本上共享相同的物理内存，

3106
01:42:47,170 --> 01:42:48,730
0,510 510,570 570,840 840,1170 1170,1560
share the same physical memory,|
|

3107
01:42:52,420 --> 01:42:53,860
0,180 180,720 720,810 810,960 960,1440
which holds you know the
其中包含您知道的我们的键值存储，对。

3108
01:42:53,890 --> 01:42:55,820
0,240 240,600 600,960 990,1380
{our,key-value -} store, right.|
|

3109
01:42:56,540 --> 01:42:58,340
0,210 210,660 720,1260 1260,1470 1470,1800
And so now the idea
所以现在的想法是，

3110
01:42:58,340 --> 01:42:59,540
0,90 90,420 420,570 570,1050 1050,1200
is that,| the child when
|当孩子开始奔跑时，

3111
01:42:59,540 --> 01:43:00,770
0,60 60,300 300,720 810,930 930,1230
it starts running,| it starts
|它开始创建检查点或快照，

3112
01:43:00,770 --> 01:43:02,500
0,300 300,630 630,1200
making a checkpoint

3113
01:43:02,990 --> 01:43:04,430
0,150 150,780 990,1140 1140,1290 1290,1440
or snapshot,| I can just
|我可以写下你知道的键值的那种，

3114
01:43:04,430 --> 01:43:05,480
0,300 300,720 750,870 870,990 990,1050
write out you know the

3115
01:43:05,480 --> 01:43:07,360
0,180 180,540 540,840 840,1290
{key-value -} sort of,|
|

3116
01:43:07,880 --> 01:43:09,470
0,270 270,450 450,750 750,1170 1170,1590
the {key-value -} store to
存储到磁盘的键值。

3117
01:43:09,470 --> 01:43:10,580
0,600
disk.|
|

3118
01:43:11,430 --> 01:43:13,260
0,480 480,690 690,1470 1560,1680 1680,1830
And in parallel, you know
同时，你知道父母可以开始处理你知道的新的GET和PUT操作，

3119
01:43:13,260 --> 01:43:15,090
0,330 360,930 1110,1320 1320,1470 1470,1830
the parent can you start

3120
01:43:15,090 --> 01:43:17,040
0,600 600,1410
processing new

3121
01:43:17,290 --> 01:43:18,880
0,150 150,360 360,660 660,870 870,1590
you know {get,and} put operations,|
|

3122
01:43:21,860 --> 01:43:22,880
0,360 360,510 510,570 570,810 810,1020
because if it does put
因为如果它真的让手术，

3123
01:43:22,880 --> 01:43:24,160
0,750
operation,|
|

3124
01:43:24,220 --> 01:43:25,180
0,210 210,300 300,510 510,570 570,960
and it wants to modify,|
它想要修改，|

3125
01:43:25,180 --> 01:43:27,250
0,600 600,870 870,1320 1320,1500 1500,2070
it will write {you,know} to
它将写入与键值存储相对应的页面，

3126
01:43:27,250 --> 01:43:29,500
0,840 870,1440 1440,1590 1590,2100 2100,2250
{} pages that correspond to

3127
01:43:29,500 --> 01:43:30,720
0,570
the

3128
01:43:30,720 --> 01:43:31,950
0,90 90,390 390,900 930,1080 1080,1230
{key-value -} store,| that will
|这会导致页面错误，对，

3129
01:43:31,950 --> 01:43:32,970
0,300 300,390 390,450 450,690 690,1020
result in a page fault,

3130
01:43:33,000 --> 01:43:33,990
0,270 270,390 390,510 510,600 600,990
right,| and so the OS
|因此，操作系统将出现页面错误

3131
01:43:33,990 --> 01:43:34,950
0,120 120,240 240,300 300,540 540,960
will get a page fault|
|

3132
01:43:34,950 --> 01:43:35,850
0,180 180,300 300,450 450,780 780,900
and so the OS will
因此，操作系统将在此时复制该页面

3133
01:43:35,850 --> 01:43:38,100
0,330 330,480 480,1080 1530,2070 2070,2250
copy that page {} at

3134
01:43:38,100 --> 01:43:39,930
0,180 180,720 960,1380 1380,1740 1740,1830
that point| and then you
|然后，您知道第一个配对过程可以更新，

3135
01:43:39,930 --> 01:43:41,790
0,150 150,450 450,780 810,1260 1260,1860
know the first pair {process,can}

3136
01:43:41,790 --> 01:43:44,040
0,540 1170,1440 1440,1530 1530,1710 1710,2250
updated,| this is all transparent
|这对孩子来说都是透明的，

3137
01:43:44,040 --> 01:43:45,330
0,90 90,180 180,750 780,1170 1170,1290
to the child,| which the
|该子进程拥有整个地址空间的一致快照

3138
01:43:45,330 --> 01:43:47,430
0,600 600,930 930,990 990,1410 1410,2100
child had a consistent snapshot

3139
01:43:47,640 --> 01:43:48,660
0,150 150,210 210,420 420,720 720,1020
of the whole address space|
|

3140
01:43:48,660 --> 01:43:49,200
0,60 60,150 150,360 360,420 420,540
at the point of the
在岔路口。

3141
01:43:49,200 --> 01:43:50,000
0,420
fork.|
|

3142
01:43:50,790 --> 01:43:52,470
0,180 180,360 360,900 900,1320 1320,1680
So, this allows basically the
因此，这基本上允许父进程和子进程同时运行

3143
01:43:52,500 --> 01:43:54,060
0,300 300,420 420,690 690,900 900,1560
parent and child run concurrently|
|

3144
01:43:54,060 --> 01:43:56,310
0,270 270,420 420,510 510,1530 1530,2250
still make a consistent snapshot|
仍可创建一致的快照|

3145
01:43:56,580 --> 01:43:58,500
0,480 480,780 810,1320 1320,1590 1590,1920
and the parents actually make
而父母实际上让流程变成了新的PUT和GET操作。

3146
01:43:58,530 --> 01:44:00,620
0,450 450,840 840,990 990,1620
process {new,put,and} get operations.|
|

3147
01:44:02,340 --> 01:44:03,870
0,180 180,330 330,480 480,900 1140,1530
Is that more clear, okay?|
这样说清楚了吗，好吗？|

3148
01:44:03,870 --> 01:44:05,040
0,120 120,540 540,780 780,900 900,1170
Oh, yeah, okay I see,|
哦，好的，我明白了，|

3149
01:44:05,040 --> 01:44:07,080
0,360 480,960 1020,1530 1530,1650 1650,2040
so the {copy-on-write - -}
因此，写入时复制保存键值存储的存储器，

3150
01:44:07,140 --> 01:44:09,240
0,210 210,660 660,840 840,1590 1620,2100
the memory that holds the

3151
01:44:09,270 --> 01:44:12,870
0,180 180,870 900,1620 2460,3150 3240,3600
{key-value -} store,| okay, okay,
|好吧，好吧，好吧，我明白了，

3152
01:44:12,870 --> 01:44:13,860
0,270 270,420 420,570 570,840 840,990
okay I see,| yeah, this
|是的，这已经很清楚了，

3153
01:44:13,860 --> 01:44:15,090
0,240 240,420 420,660 660,1050 1050,1230
makes it very clear,| thank
|非常感谢。

3154
01:44:15,090 --> 01:44:17,240
0,90 90,240 240,780 1080,1710
you so much.| {You're,welcome}.|
|不用谢。|

3155
01:44:20,920 --> 01:44:22,320
0,210 210,360 360,870
Any more questions?|
还有什么问题吗？|

3156
01:44:23,750 --> 01:44:26,240
0,660 660,1230 1230,1350 1350,2100 2130,2490
Yeah, I have a,| I
是的，我有一个，|我想这是一种奇怪的场景，

3157
01:44:26,240 --> 01:44:27,170
0,180 180,330 330,480 480,690 690,930
guess this is sort of

3158
01:44:27,440 --> 01:44:29,300
0,210 210,960 960,1560 1560,1680 1680,1860
a weird scenario,| I'm not
|我不确定这是否真的能，

3159
01:44:29,300 --> 01:44:30,230
0,150 150,240 240,420 420,570 570,930
sure if this could actually,|
|

3160
01:44:31,390 --> 01:44:33,550
0,480 660,960 960,1290 1350,1560 1560,2160
but what if,| so imagine
但如果，|所以想象一下，我们总是在同一个学期，

3161
01:44:33,580 --> 01:44:34,510
0,240 240,480 480,780 780,870 870,930
that we're always in the

3162
01:44:34,510 --> 01:44:35,720
0,270 270,630
same term,|
|

3163
01:44:35,720 --> 01:44:38,090
0,180 180,750 1710,2070 2070,2280 2280,2370
and then you get to
然后你会发现一些节点已经断开了连接，

3164
01:44:38,090 --> 01:44:40,550
0,120 120,510 540,1230 1560,2130 2160,2460
a point where {} some

3165
01:44:40,550 --> 01:44:41,660
0,210 210,300 300,870 870,990 990,1110
nodes have disconnected,| but they're
|但它们仍然是同一个术语，

3166
01:44:41,660 --> 01:44:43,010
0,210 210,300 300,600 600,1110 1200,1350
still the same term,| the
|这位领导人仍在同一任期内

3167
01:44:43,010 --> 01:44:43,610
0,210 210,270 270,450 450,510 510,600
leader is still in the

3168
01:44:43,610 --> 01:44:45,710
0,300 300,750 900,1080 1080,1650 1650,2100
same term| and then at
|然后在某个时间点上，他们会创建快照

3169
01:44:45,710 --> 01:44:47,390
0,150 150,390 390,570 570,1140 1140,1680
some point they will, {}

3170
01:44:48,610 --> 01:44:49,870
0,270 270,420 420,540 540,600 600,1260
they will do a snapshot|
|

3171
01:44:50,230 --> 01:44:51,340
0,180 180,480 480,690 690,780 780,1110
and then all the logs
然后所有日志都将被压缩，

3172
01:44:51,340 --> 01:44:53,060
0,240 240,450 450,1200
will be compressed,|
|

3173
01:44:53,120 --> 01:44:54,230
0,180 180,360 360,540 540,810 810,1110
and then they keep going
然后他们继续前进

3174
01:44:54,230 --> 01:44:56,300
0,390 390,480 480,1080 1140,1380 1380,2070
forward| and now the logs
|现在，日志再次被填充

3175
01:44:56,330 --> 01:44:57,500
0,180 180,330 330,750 750,1020 1020,1170
are being populated again| and
|然后，假设添加了15个日志，

3176
01:44:57,500 --> 01:45:00,060
0,390 570,1170 1170,1410 1410,1980
then, let's just say

3177
01:45:00,060 --> 01:45:01,980
0,690 690,1170 1170,1320 1320,1470 1470,1920
15 logs have been added,|
|

3178
01:45:02,280 --> 01:45:04,200
0,150 150,270 270,630 630,1170 1200,1920
and then after 10, they
然后在10分钟后，他们压缩它们

3179
01:45:04,560 --> 01:45:06,420
0,840 840,1200 1470,1620 1620,1740 1740,1860
compress them| and then they
|然后他们又回到了索引5

3180
01:45:06,420 --> 01:45:08,340
0,300 300,450 450,1080 1290,1680 1680,1920
are at index index 5

3181
01:45:08,340 --> 01:45:09,630
0,330 330,450 450,600 600,720 720,1290
again| and then the other
|然后其他节点重新加入

3182
01:45:09,660 --> 01:45:11,190
0,300 300,540 540,780 780,1170 1350,1530
nodes joined back in| and
|同时，它们也处于同一期限的指数5。

3183
01:45:11,190 --> 01:45:12,240
0,150 150,450 450,540 540,870 870,1050
they're also at index 5

3184
01:45:12,240 --> 01:45:13,600
0,90 90,180 180,450 450,930
of the same term.|
|

3185
01:45:13,630 --> 01:45:14,780
0,570

3186
01:45:14,870 --> 01:45:16,520
0,180 180,600 780,930 930,1410 1410,1650
Is that a problem,| like
这是个问题吗，|比如，如何，如何，

3187
01:45:16,520 --> 01:45:18,980
0,210 210,450 450,990 1980,2190 2190,2460
how, how does,| it's almost
|这几乎就像是他们处于某种快照时代。

3188
01:45:18,980 --> 01:45:20,570
0,120 120,240 240,390 390,840 840,1590
like they're on a snapshot

3189
01:45:21,170 --> 01:45:23,200
0,630 630,840 840,1050 1050,1500
epoch of some sort.|
|

3190
01:45:23,350 --> 01:45:25,330
0,330 330,600 600,1050 1050,1560 1560,1980
Okay, so old snapshots correspond
好的，所以旧的快照对应一个索引，对，所以。

3191
01:45:25,330 --> 01:45:26,770
0,90 90,180 180,750 780,1020 1020,1440
to an index, right, so.|
|

3192
01:45:26,860 --> 01:45:28,990
0,390 600,900 900,1110 1110,1320 1320,2130
Yeah.| So okay, let's {}
嗯。|所以好的，让我们画一下你的剧本，

3193
01:45:28,990 --> 01:45:30,340
0,240 240,450 450,600 600,1020 1050,1350
draw out like maybe draw

3194
01:45:30,340 --> 01:45:31,420
0,210 210,630 630,780 780,900 900,1080
your scenario,| so we got
|所以我们有一个服务器会有一些日志，

3195
01:45:31,420 --> 01:45:33,430
0,210 570,1170 1170,1350 1350,1530 1530,2010
a server gonna have some

3196
01:45:33,580 --> 01:45:34,700
0,600
log,|
|

3197
01:45:35,780 --> 01:45:37,040
0,540 540,600 600,720 720,1170 1170,1260
and you know maybe I
你知道吗，也许我觉得你知道你说的是10

3198
01:45:37,040 --> 01:45:37,820
0,210 210,300 300,420 420,540 540,780
think you know you talk

3199
01:45:37,820 --> 01:45:39,350
0,180 180,660 960,1320 1320,1410 1410,1530
about 10| and it took
|它在10点的时候拍了一张快照。

3200
01:45:39,350 --> 01:45:40,960
0,60 60,570 570,690 690,1020
a snapshot at 10.|
|

3201
01:45:41,380 --> 01:45:42,700
0,780
Yeah.|
嗯。|

3202
01:45:43,080 --> 01:45:43,980
0,150 150,300 300,510 510,600 600,900
Yeah, so let's say, let's
是的，所以我们说，让我们说，基本上，

3203
01:45:43,980 --> 01:45:45,810
0,180 180,450 450,840 840,1110 1710,1830
say that basically,| yeah so
|是的，所以基本上前9个操作可能包括10个在快照中。

3204
01:45:45,810 --> 01:45:47,280
0,300 300,360 360,630 630,900 900,1470
basically the first 9 operations

3205
01:45:47,280 --> 01:45:49,200
0,270 270,870 900,1350 1350,1650 1650,1920
are maybe including 10 are

3206
01:45:49,200 --> 01:45:50,440
0,90 90,150 150,660
in the snapshot.|
|

3207
01:45:51,160 --> 01:45:52,180
0,480

3208
01:45:52,490 --> 01:45:53,420
0,240 240,420 420,660 660,810 810,930
{} And then okay, so
然后好的，有另一个节点是相同的项，

3209
01:45:53,420 --> 01:45:56,780
0,180 180,450 450,1170 1920,2490 2490,3360
there's another node {} is

3210
01:45:57,730 --> 01:45:59,160
0,300 300,420 420,870
same {term -},|
|

3211
01:45:59,220 --> 01:46:00,300
0,210 210,450 450,630 630,930 930,1080
so all these entries have
所以所有这些条目都有相同的术语，对吧，

3212
01:46:00,300 --> 01:46:01,890
0,60 60,300 300,690 690,1020 1020,1590
the same term, right,| whatever,
|不管怎样，你知道1111111111。

3213
01:46:02,930 --> 01:46:04,100
0,150 150,240 240,570 570,870 870,1170
you know 1 1 1

3214
01:46:04,100 --> 01:46:05,990
0,360 360,840 960,1320 1320,1620 1620,1890
1 1 1 1 1

3215
01:46:05,990 --> 01:46:07,720
0,360 390,1350
1.| Yep.|
|是啊。|

3216
01:46:07,840 --> 01:46:09,940
0,660 690,1410
And, {}
所以，这个节点实际上，

3217
01:46:09,940 --> 01:46:11,350
0,150 150,420 420,720 720,1020 1020,1410
so this node actually,| but
|但这个节点只通过10，然后这个人通过15，

3218
01:46:11,350 --> 01:46:12,250
0,180 180,420 420,540 540,750 750,900
this node has only through

3219
01:46:12,250 --> 01:46:13,540
0,360 360,660 660,780 780,1140 1140,1290
10, then this guy through

3220
01:46:13,540 --> 01:46:14,680
0,540
15,|
|

3221
01:46:14,770 --> 01:46:16,180
0,360 360,720
let's see,|
让我们看看,|

3222
01:46:16,380 --> 01:46:17,040
0,120 120,270 270,420 420,570 570,660
I think that's what you're
我想这就是你想说的，

3223
01:46:17,040 --> 01:46:18,600
0,300 300,660 660,840 840,1380 1380,1560
saying,| { -} here's {}
|这里是1，这里是1。

3224
01:46:18,600 --> 01:46:20,540
0,300 300,420 420,690 690,1050
1, {} here's 1.|
|

3225
01:46:24,430 --> 01:46:26,590
0,330 330,480 480,750 750,1170 1590,2160
Well, I think my {}
嗯，我想我的想法是，

3226
01:46:26,980 --> 01:46:28,810
0,240 240,600 600,960 1020,1500 1500,1830
my thought is,| well here's
|这里有一个我可以回答的问题，

3227
01:46:28,810 --> 01:46:29,470
0,210 210,270 270,510 510,570 570,660
here's a question I can

3228
01:46:29,470 --> 01:46:30,580
0,330 480,720 720,840 840,1050 1050,1110
answer,| when you take a
|当你拍摄快照时，你是重置你的索引还是继续计数？你继续数吧。

3229
01:46:30,580 --> 01:46:31,870
0,510 510,600 600,750 750,1170 1170,1290
snapshot do you reset your

3230
01:46:31,870 --> 01:46:32,980
0,480 480,630 630,720 720,810 810,1110
index or do you {keep,counting}?

3231
01:46:32,980 --> 01:46:35,280
0,660
{You,keep,counting}.|
|

3232
01:46:35,280 --> 01:46:36,900
0,450 450,1050
Oh, okay,|
哦，好吧，|

3233
01:46:37,050 --> 01:46:38,010
0,150 150,330 330,750 750,840 840,960
I was imagining it was
我想象它就像一个数组，

3234
01:46:38,010 --> 01:46:40,020
0,150 150,210 210,690 1020,1740 1800,2010
like an array,| and you
|你看到你的指数倒退了，

3235
01:46:40,020 --> 01:46:41,670
0,150 150,330 330,690 690,900 900,1650
saw your index goes backwards,|
|

3236
01:46:42,180 --> 01:46:43,380
0,210 210,420 420,600 750,1080 1080,1200
so that it would be
这样，您就有可能在同一期限内使用相同的索引拥有两个不同的条目。

3237
01:46:43,380 --> 01:46:44,970
0,660 660,810 810,900 900,990 990,1590
possible for you to have

3238
01:46:45,000 --> 01:46:46,110
0,270 270,660 660,960 960,1050 1050,1110
two different entries in the

3239
01:46:46,110 --> 01:46:48,090
0,330 330,900 1320,1590 1590,1680 1680,1980
same term with the same

3240
01:46:48,090 --> 01:46:51,060
0,600 600,1560 1770,2490 2490,2580 2580,2970
index.| Yeah, {that's,not,allowed}.| {} Right
|是啊，这是不允许的。|好的，好的，我明白了。

3241
01:46:51,060 --> 01:46:52,920
0,420 420,810 1050,1320 1320,1500 1500,1860
yeah, okay, I I see.|
|

3242
01:46:53,540 --> 01:46:56,300
0,780 1140,1830 1830,2130 2160,2550 2550,2760
So, okay, okay, that makes
所以，好的，好的，这是有道理的。

3243
01:46:56,300 --> 01:46:58,040
0,510 510,750 750,840 840,1380 1380,1740
sense.| When you remember reset
|当你记得重置索引的时候。

3244
01:46:58,040 --> 01:46:59,630
0,120 120,750 780,1050 1050,1200 1200,1590
the index.| When you cut
|当你像这样切割原木的这一部分时，

3245
01:46:59,690 --> 01:47:00,680
0,390 390,540 540,810 810,900 900,990
like this part of the

3246
01:47:00,680 --> 01:47:02,510
0,510 900,1200 1200,1260 1260,1590 1590,1830
log,| in the index stays
|在指数中保持在10。

3247
01:47:02,510 --> 01:47:03,540
0,90 90,510
at 10.|
|

3248
01:47:03,700 --> 01:47:05,170
0,360 360,540 540,780 780,960 1260,1470
Got it, got it.| And
明白了，明白了。|所以事实上，当你在2维空间里做这件事时，

3249
01:47:05,170 --> 01:47:06,310
0,210 210,300 300,750 750,1020 1020,1140
so in fact when you

3250
01:47:06,310 --> 01:47:07,120
0,120 120,300 300,390 390,540 540,810
do this in {2d -},|
|

3251
01:47:07,120 --> 01:47:08,080
0,150 150,240 240,390 390,540 540,960
this is gonna be slightly
这可能有点烦人，

3252
01:47:08,080 --> 01:47:10,150
0,540 1020,1380 1380,1470 1470,1890 1890,2070
annoying,| because you presumably take
|因为您可能利用了日志的起始值为0

3253
01:47:10,150 --> 01:47:13,360
0,420 420,510 510,990 990,2460 2520,3210
advantage in fact {the,start,of,log,is} 0|
|

3254
01:47:13,690 --> 01:47:14,830
0,480 480,750 750,840 840,990 990,1140
and what you're now going
你现在要得到的是

3255
01:47:14,830 --> 01:47:15,430
0,60 60,270 270,390 390,510 510,600
to get is that| the
|层0的开始可以是10，

3256
01:47:15,430 --> 01:47:16,900
0,210 210,300 300,390 390,1290 1290,1470
start of the {layer,of,0} might

3257
01:47:16,900 --> 01:47:18,080
0,60 60,720
be 10,|
|

3258
01:47:18,430 --> 01:47:21,520
0,420 1410,1770 1770,1920 1920,2940 2940,3090
{} people have to.| {You,have}
人们不得不这么做。|你有某种偏移量。

3259
01:47:21,520 --> 01:47:22,690
0,60 60,510 510,630 630,810 810,1170
an offset of some sort.|
|

3260
01:47:22,780 --> 01:47:24,760
0,1140 1140,1590 1590,1710 1710,1800 1800,1980
Yeah, you have to add
是的，你必须在所有地方加上那个偏移量。

3261
01:47:24,760 --> 01:47:26,400
0,150 150,570 570,1110
that offset everywhere.|
|

3262
01:47:26,550 --> 01:47:27,780
0,630 630,720 720,930 930,1050 1050,1230
Yeah, and then and then
是的，然后是最后一件事，非常快，

3263
01:47:27,780 --> 01:47:29,250
0,330 330,510 510,750 750,1230 1230,1470
last thing really quickly,| I
|我认为我之前感到困惑的原因是在实验2的代码中。

3264
01:47:29,250 --> 01:47:29,850
0,180 180,240 240,450 450,480 480,600
think the reason I was

3265
01:47:29,850 --> 01:47:32,070
0,540 540,1140 1230,1560 1560,1830 1830,2220
confused earlier was in the

3266
01:47:32,100 --> 01:47:35,190
0,210 210,480 930,1800 1800,2490 2520,3090
in the code for lab

3267
01:47:35,190 --> 01:47:37,050
0,600 750,1050 1050,1320 1320,1380 1380,1860
2.| Yeah.| There's a comment
|嗯。|有一条评论说，

3268
01:47:37,050 --> 01:47:38,160
0,180 180,540 540,720 720,1050 1050,1110
that says,| we're supposed to
|我们应该立即从Start返回。

3269
01:47:38,160 --> 01:47:39,840
0,450 450,1200
return immediately

3270
01:47:40,690 --> 01:47:42,610
0,330 330,810 1140,1410 1410,1590 1590,1920
from start.| Yeah yeah, well
|是的是的，好吧，你，哦是的。

3271
01:47:42,610 --> 01:47:44,700
0,270 270,270 930,1560
you, oh yes.|
|

3272
01:47:45,240 --> 01:47:47,040
0,30 60,1170 1260,1500 1500,1680 1680,1800
I mean, okay, so let
我的意思是，好的，让我回到这张照片上。

3273
01:47:47,040 --> 01:47:47,880
0,240 240,390 390,570 570,660 660,840
me go back to this

3274
01:47:47,880 --> 01:47:49,160
0,330 330,720
picture here.|
|

3275
01:47:49,310 --> 01:47:51,110
0,330 330,750 750,1320 1320,1530 1530,1800
Yeah, hopefully, it's getting really
是啊，希望它会变得很拥挤，

3276
01:47:51,110 --> 01:47:54,890
0,600 2400,2730 2730,2850 2850,3600 3600,3780
crowded,| {} so we get
|所以我们的操作是正确的

3277
01:47:54,890 --> 01:47:55,820
0,60 60,510 510,720 720,810 810,930
an operation correct| and we
|然后我们进行启动操作，我们称之为启动。

3278
01:47:55,820 --> 01:47:57,500
0,570 630,780 780,1110 1110,1590 1590,1680
do the start operation, we

3279
01:47:57,500 --> 01:47:58,700
0,210 210,750
call start.|
|

3280
01:47:59,480 --> 01:48:01,580
0,270 270,720 720,1260 1260,1560 1560,2100
Oh, return immediately doesn't necessarily
哦，立即返回并不一定意味着回复，是不是。

3281
01:48:01,580 --> 01:48:05,270
0,210 210,930 1170,1350 1350,3150 3150,3690
mean reply, {is,that}.| Yeah, exactly,|
|是的，就是这样，|

3282
01:48:05,270 --> 01:48:06,470
0,120 120,330 330,600 600,930 930,1200
it just means reply back
它只是意味着回复返回到服务器，

3283
01:48:06,470 --> 01:48:07,880
0,90 90,630 630,690 690,780 780,1410
to return to the servers,|
|

3284
01:48:07,910 --> 01:48:09,560
0,180 180,330 330,420 420,900
{not -} to {the,client}.|
而不是对客户。|

3285
01:48:10,450 --> 01:48:12,400
0,240 240,750 930,1110 1110,1560 1560,1950
I see, I see, okay,
我明白了，我明白了，好的，Totcha

3286
01:48:13,780 --> 01:48:15,670
0,870 900,1080 1080,1230 1230,1410 1410,1890
totcha,| yeah, I guess operating
|是的，我想在回报总是必然是回报的假设下运作，

3287
01:48:15,670 --> 01:48:16,900
0,180 180,240 240,750 750,1050 1080,1230
under the assumption that {}

3288
01:48:16,900 --> 01:48:19,630
0,690 810,1650 1680,1950 1950,2610 2610,2730
return always is necessarily {}

3289
01:48:19,630 --> 01:48:21,070
0,450 480,570 570,750 750,1080 1200,1440
reply,| but that's not that's
|但事实并非如此，并不总是这样。

3290
01:48:21,070 --> 01:48:22,030
0,240 240,450 450,510 510,780 780,960
not always the case.| No,
|不，不是这样的，

3291
01:48:22,030 --> 01:48:22,840
0,240 240,420 420,480 480,810 810,810
that's not the case,| I
|我认为这一点在第三圈会比第二圈变得更清楚，

3292
01:48:22,840 --> 01:48:23,770
0,240 240,330 330,510 510,750 750,930
think this will become more

3293
01:48:23,770 --> 01:48:25,390
0,390 390,600 600,960 960,1260 1260,1620
clear in lap 3 than

3294
01:48:25,390 --> 01:48:26,470
0,210 210,300 300,510 510,780 780,1080
they you know lab 2,|
|

3295
01:48:26,800 --> 01:48:29,560
0,270 270,450 450,720 720,1110 1140,2760
lab 2 living wired, no
2号实验室有有线电视，没有申请。

3296
01:48:29,560 --> 01:48:30,840
0,570
application.|
|

3297
01:48:31,100 --> 01:48:32,500
0,1230
Yeah,
好的，好的，谢谢，

3298
01:48:32,870 --> 01:48:34,670
0,420 420,570 570,810 810,1140 1320,1800
okay, well, thank you, {}|
|

3299
01:48:34,700 --> 01:48:35,990
0,180 180,300 300,480 480,900 1110,1290
this was really helpful. {}|
这真的很有帮助。|

3300
01:48:35,990 --> 01:48:37,940
0,120 120,540 810,1320 1320,1710 1710,1950
{You,re -} welcome.| Appreciate it.|
不客气。|非常感激。|

3301
01:48:40,120 --> 01:48:42,370
0,540 900,1020 1020,1140 1140,1440 1920,2250
{Have,a,rest -}.| You too.| Bye.|
好好休息吧。|你也是。|再见。|

3302
01:48:42,550 --> 01:48:43,420
0,180 180,300 300,360 360,450 450,870
Good luck for the lab.
祝实验室好运。

