1
00:00:00,920 --> 00:00:02,780
0,210 210,480 480,990 990,1680 1710,1860
You probably noticed,| I put
你们可能注意到了，|我在共享屏幕上放的网页部分，

2
00:00:02,780 --> 00:00:04,760
0,150 150,690 720,1170 1170,1440 1440,1980
up the here on the,

3
00:00:05,030 --> 00:00:06,770
0,330 330,720 1050,1380 1380,1470 1470,1740
on the {} my shared

4
00:00:06,770 --> 00:00:07,790
0,600 600,690 690,870 870,930 930,1020
screen, the part of the

5
00:00:07,790 --> 00:00:09,560
0,150 150,630 1410,1650 1650,1710 1710,1770
web page,| most of the
|大部分课程是跟据课程表的，

6
00:00:09,560 --> 00:00:10,490
0,300 300,390 390,690 690,840 840,930
class is driven from the

7
00:00:10,490 --> 00:00:12,050
0,600 720,1170 1170,1350 1350,1380 1380,1560
schedule,| I'll talk a little
|我稍后再说这件事，

8
00:00:12,050 --> 00:00:13,580
0,180 180,510 510,780 780,1050 1050,1530
bit later about it, {}|
|

9
00:00:13,580 --> 00:00:14,780
0,240 240,390 390,540 540,990 990,1200
but, you know hopefully you
但是，希望你能找到链接，然后找到课程表。

10
00:00:14,780 --> 00:00:16,160
0,270 270,600 630,1140 1140,1290 1290,1380
find the url and you

11
00:00:16,160 --> 00:00:17,740
0,300 300,600 630,1140
found the schedule.|
|

12
00:00:18,080 --> 00:00:20,420
0,510 1230,1650 1710,2130 2130,2250 2250,2340
And I'll return to that
稍后，我会更详细地谈到这个。

13
00:00:20,420 --> 00:00:21,800
0,60 60,240 240,360 360,810
a little bit later

14
00:00:21,800 --> 00:00:23,200
0,120 120,300 300,840
in more detail.|
|

15
00:00:24,370 --> 00:00:26,290
0,660 1110,1350 1350,1560 1560,1650 1650,1920
Okay, so what's the plan
好的，那么今天的计划是什么。

16
00:00:26,290 --> 00:00:27,760
0,90 90,630
for today.|
|

17
00:00:30,280 --> 00:00:31,270
0,480 480,630 630,750 750,780 780,990
I'm gonna talk a little
我会讨论一下，什么是分布式系统。

18
00:00:31,270 --> 00:00:32,320
0,210 210,510 510,720 720,930 930,1050
bit about {}, what is

19
00:00:32,320 --> 00:00:33,980
0,90 90,150 150,480 480,1020
it the distributed system.|
|

20
00:00:34,300 --> 00:00:36,100
0,270 270,540 540,660 660,990
So what is it,|
它是什么，|

21
00:00:36,610 --> 00:00:37,690
0,450 450,750 750,870 870,900 900,1080
and maybe get a little
或许还有一些背景信息，

22
00:00:37,690 --> 00:00:39,400
0,120 120,270 270,480 480,930 930,1710
bit of info historical context,|
|

23
00:00:39,430 --> 00:00:41,710
0,90 90,210 210,870 1350,1860 1860,2280
you know how {} distributed
分布式系统在过去几十年里是如何发展的。

24
00:00:41,710 --> 00:00:43,570
0,300 300,450 450,1080 1080,1410 1410,1860
systems have developed over the

25
00:00:44,150 --> 00:00:45,440
0,120 120,360 360,570 570,630 630,1290
the last couple of decades,|
|

26
00:00:46,780 --> 00:00:49,570
0,660 840,1590 1590,1590 2490,2730 2730,2790
{} then {} hit a
然后是一些你想知道的课程结构，

27
00:00:49,570 --> 00:00:50,560
0,180 180,330 330,540 540,750 750,990
little bit on the course

28
00:00:50,560 --> 00:00:52,420
0,720 720,960 960,1080 1080,1230 1230,1860
structure, what you should expect,|
|

29
00:00:57,450 --> 00:00:59,580
0,660 660,1050 1080,1470 1470,2010 2010,2130
then {} talk what are
然后讨论我们在整个学期中会反复出现的主题。

30
00:00:59,580 --> 00:01:00,900
0,60 60,450 450,960 960,1230 1230,1320
the main topics or the

31
00:01:00,900 --> 00:01:02,430
0,330 330,870 870,1320 1320,1410 1410,1530
main recurring topics that we'll

32
00:01:02,430 --> 00:01:04,180
0,240 240,600 600,690 690,1200
see throughout the term.|
|

33
00:01:04,300 --> 00:01:05,460
0,60

34
00:01:05,580 --> 00:01:06,990
0,330 330,720 720,900 900,1110 1110,1410
And then we'll see actually
我们看这些主题中的第一个，

35
00:01:06,990 --> 00:01:08,280
0,60 60,300 300,930 930,1050 1050,1290
the first illustration of those

36
00:01:08,280 --> 00:01:09,720
0,390 390,750 750,990 990,1230 1230,1440
main topics| by the case
|也就是今天的案例研究， mapreduce 论文，

37
00:01:09,720 --> 00:01:12,390
0,450 780,1530 1770,2250 2250,2550 2550,2670
study that was assigned for

38
00:01:12,390 --> 00:01:14,040
0,300 300,390 390,870 870,1050 1050,1650
today, the paper {mapreduce -},|
|

39
00:01:14,800 --> 00:01:15,820
0,240 240,360 360,600 600,690 690,1020
which is also the topic
这也是第一个实验的主题，

40
00:01:15,820 --> 00:01:17,410
0,90 90,180 180,450 450,930 960,1590
of the first lab| and
|你可以从 Piazza 上看到，

41
00:01:17,680 --> 00:01:19,570
0,270 270,810 840,1110 1110,1290 1290,1890
{} you watch the Piazza,|
|

42
00:01:19,570 --> 00:01:21,910
0,90 90,240 240,390 390,720 1260,2340
you know we just posted
我们在 Piazza 上发布了一个实验，一个链接，

43
00:01:21,910 --> 00:01:23,860
0,270 270,570 570,1260 1590,1830 1830,1950
that a lab on {piazza

44
00:01:23,860 --> 00:01:25,450
0,300 420,1140 1140,1230 1230,1440 1440,1590
-}, {the,url - -},| so
|你可以去做，直到下周五。

45
00:01:25,450 --> 00:01:27,220
0,210 210,750 750,1110 1110,1200 1410,1770
you can go {} and

46
00:01:27,220 --> 00:01:29,420
0,270 270,840 870,1290 1290,1710
due next next Friday.|
|

47
00:01:30,580 --> 00:01:31,660
0,450 450,600 600,750 750,990 990,1080
Alright, so let's start with
好的，让我们从基础开始，

48
00:01:31,660 --> 00:01:33,280
0,60 60,720 750,1410 1410,1590 1590,1620
the basics,| {} talk a
|讨论一下什么是分布式系统。

49
00:01:33,280 --> 00:01:34,540
0,180 180,300 300,750 780,1140 1140,1260
little bit about what is

50
00:01:34,540 --> 00:01:36,020
0,360 360,930
distributed system.|
|

51
00:01:42,580 --> 00:01:43,780
0,480

52
00:01:45,390 --> 00:01:46,440
0,270 270,450 450,540 540,930 960,1050
And sort of {} you
可能从一些图片开始会比较容易，

53
00:01:46,440 --> 00:01:47,670
0,150 150,600 600,900 900,990 990,1230
know maybe easier to start

54
00:01:47,670 --> 00:01:49,170
0,120 120,150 150,330 330,960 990,1500
with a little picture, {}|
|

55
00:01:49,590 --> 00:01:51,500
0,240 240,750 750,1380
the Internet cloud,|
这个是互联网，|

56
00:01:54,100 --> 00:01:55,520
0,120 120,330 330,690
{you,know} we have
连接很多客户端，也许还有服务器，

57
00:01:55,610 --> 00:01:57,350
0,360 360,750 750,810 810,990 990,1740
[] connected to, with clients,

58
00:01:57,410 --> 00:01:59,570
0,270 270,510 510,1350 1740,2070 2070,2160
and maybe servers,| maybe you
|可能是完整数据中心的服务器，

59
00:01:59,570 --> 00:02:00,830
0,180 180,510 510,660 660,900 900,1260
have servers that actually are

60
00:02:00,830 --> 00:02:02,620
0,360 360,630 630,1290
complete data centers,|
|

61
00:02:09,790 --> 00:02:12,140
0,960
clients,|
客户端，|

62
00:02:12,470 --> 00:02:13,850
0,330 330,390 390,630 630,840 840,1380
and the data centers themselves,
以及数据中心本身内部是分布式系统，

63
00:02:13,850 --> 00:02:15,590
0,90 90,210 210,780 780,1290 1290,1740
you know maybe internally distributed

64
00:02:15,590 --> 00:02:17,270
0,540 540,810 810,900 900,1530 1530,1680
systems,| that are connected by
|通过内部网络连接，

65
00:02:17,270 --> 00:02:19,310
0,390 390,1080 1500,1680 1680,1800 1800,2040
internal networks,| {} the data
|数据中心本身可能通过内部连接，

66
00:02:19,310 --> 00:02:21,920
0,300 300,750 750,960 960,1410 1620,2610
centers themselves might be internal

67
00:02:21,950 --> 00:02:23,300
0,630 630,720 720,960 960,1260 1260,1350
connections,| you know outside of
|在互联网之外，

68
00:02:23,300 --> 00:02:25,580
0,90 90,600 1020,1500 1890,2250 2250,2280
the Internet,| that servers, a
|很多计算机通过网络连接，

69
00:02:25,580 --> 00:02:27,830
0,300 300,990 1020,1500 1530,1920 1920,2250
large collection of computers connected

70
00:02:27,830 --> 00:02:29,600
0,90 90,690 690,1110 1470,1680 1680,1770
by networks,| {and,you,know} sort of
|从非正式的角度来说，我认为它是，

71
00:02:29,600 --> 00:02:30,680
0,660 660,750 750,840 840,930 930,1080
informally you know the way

72
00:02:30,680 --> 00:02:31,550
0,120 120,300 300,600 600,720 720,870
I think about it,| what
|分布式系统是，

73
00:02:31,550 --> 00:02:33,020
0,60 60,600 600,960 960,1200 1200,1470
a distributed system is| as
|多个计算机通过网络连接，

74
00:02:33,020 --> 00:02:34,280
0,120 120,810
a multiple

75
00:02:34,660 --> 00:02:36,490
0,210 210,420 420,510 510,960 1140,1830
{you,know} more than one computer

76
00:02:37,150 --> 00:02:39,250
0,1200 1500,1680 1680,1770 1770,1920 1920,2100
networked,| you know, so they
|所以它们只能通过发送或接收数据包进行交互，

77
00:02:39,250 --> 00:02:41,350
0,120 120,570 570,960 960,1590 1710,2100
can interact only through sending

78
00:02:41,350 --> 00:02:43,120
0,60 60,480 480,1140
or receiving packets,|
|

79
00:02:43,270 --> 00:02:44,170
0,180 180,330 330,630 630,690 690,900
{} as opposed to say
而不是多处理器，

80
00:02:44,170 --> 00:02:45,580
0,60 60,870 870,1170 1170,1290 1290,1410
a multi-processor,| where you can
|那里可以通过共享内存来做交互，

81
00:02:45,580 --> 00:02:47,230
0,360 360,480 480,690 690,1260 1470,1650
interact from share memory,| and
|它们合作来提供一些服务。

82
00:02:47,230 --> 00:02:49,210
0,120 120,990 1350,1470 1470,1830 1830,1980
they're cooperating to deliver some

83
00:02:49,210 --> 00:02:50,380
0,570
service.|
|

84
00:02:53,060 --> 00:02:56,120
0,540 1530,1890 1890,2310 2310,2430 2430,3060
{} Those are the four
这是四个关键词，

85
00:02:56,270 --> 00:02:58,790
0,480 480,990 1320,1470 1470,2280 2340,2520
key words,| that define for
|定义了分布式系统。

86
00:02:58,790 --> 00:03:00,500
0,210 210,540 540,1200
me distributed systems.|
|

87
00:03:00,650 --> 00:03:02,570
0,600 690,1470 1470,1620 1620,1770 1770,1920
{} Often, you know you
通常，你可能没有意识到分布式系统的交互性，

88
00:03:02,570 --> 00:03:03,740
0,150 150,300 300,600 600,990 990,1170
might not be aware the

89
00:03:03,740 --> 00:03:05,240
0,810 810,900 900,960 960,1410 1410,1500
interactivity of the {distributed,system},| you
|你可能在使用一些客户端，

90
00:03:05,240 --> 00:03:06,560
0,120 120,210 210,420 420,750 990,1320
know you might be using

91
00:03:06,560 --> 00:03:07,730
0,150 150,600 600,690 690,1110 1110,1170
some clients,| for example the
|比如， Zoom 客户端，

92
00:03:07,730 --> 00:03:09,590
0,210 210,780 1140,1650 1650,1770 1770,1860
Zoom client,| but at the
|但是在 Zoom 客户端的背后，

93
00:03:09,590 --> 00:03:11,030
0,300 300,540 660,720 720,1200 1200,1440
back end of the Zoom

94
00:03:11,030 --> 00:03:11,960
0,360 360,420 420,630 630,900 900,930
client,| you know there are
|有巨大的数据中心或多个数据中心，

95
00:03:11,960 --> 00:03:13,550
0,300 300,570 570,1110 1110,1230 1230,1590
huge data centers or multiple

96
00:03:13,550 --> 00:03:15,320
0,270 270,570 570,1020 1020,1500 1500,1770
data centers| supporting actually this
|来支持这个分布式应用。

97
00:03:15,320 --> 00:03:17,220
0,360 360,810 810,1410
particular distributed application.|
|

98
00:03:17,590 --> 00:03:18,820
0,540 540,690 690,780 780,960 960,1230
{} And in some ways,|
从某些方面来说，|

99
00:03:18,820 --> 00:03:20,500
0,120 120,510 630,870 870,1110 1110,1680
you know we wouldn't be
我们不会有这些使用 Zoom 的课程，

100
00:03:20,530 --> 00:03:22,330
0,390 390,840 840,1050 1050,1620 1620,1800
having these Zoom lectures,| if
|如果有更多，

101
00:03:22,330 --> 00:03:23,350
0,120 120,210 210,390 390,510 510,1020
there were more in the,|
|

102
00:03:23,350 --> 00:03:24,910
0,120 120,270 270,690 690,1170 1170,1560
you know there weren't distributed
如果没有分布式系统，

103
00:03:24,910 --> 00:03:27,100
0,600 780,1200 1530,1830 1830,2040 2040,2190
systems| and, {} so they
|所以，它们通常作为基础设施的主干，来支持应用程序。

104
00:03:27,100 --> 00:03:29,350
0,480 480,1050 1050,1260 1260,1890 1890,2250
often perform the backbone of

105
00:03:29,380 --> 00:03:31,960
0,180 180,1140 1140,1470 1470,1800 1800,2580
the infrastructure that supports applications.|
|

106
00:03:34,040 --> 00:03:35,220
0,630
Okay?|
好的?|

107
00:03:37,750 --> 00:03:40,030
0,240 240,870 900,1080 1080,1590 1590,2280
So why are distributed systems
那么为什么分布式系统很有趣，

108
00:03:40,240 --> 00:03:42,250
0,750 750,1320 1320,1830 1860,1920 1920,2010
{} interesting| or you know
|或者分布式系统的主要作用是什么。

109
00:03:42,250 --> 00:03:43,960
0,210 210,1020 1020,1110 1110,1260 1260,1710
what, what are the main

110
00:03:43,960 --> 00:03:45,850
0,180 180,270 270,540 540,1140 1320,1890
sort of use cases for

111
00:03:45,880 --> 00:03:47,340
0,390 390,1020
distributed systems.|
|

112
00:03:50,500 --> 00:03:52,810
0,570 570,840 840,1080 1080,1560 1560,2310
And those are broadly speaking,|
一般来说，|

113
00:03:52,840 --> 00:03:54,700
0,570 570,690 690,720 720,1230 1230,1860
{} there are basically four
有四个主要原因。

114
00:03:54,700 --> 00:03:56,160
0,330 330,930
main reasons.|
|

115
00:03:56,160 --> 00:03:57,660
0,480 480,930 930,1140 1140,1260 1260,1500
{} One is to use
一个是用来连接物理上分离的机器，

116
00:03:57,660 --> 00:03:58,900
0,510
connect

117
00:03:59,250 --> 00:04:01,600
0,570 570,1140 1140,1740
physically separated machines,|
|

118
00:04:10,310 --> 00:04:11,300
0,60

119
00:04:12,440 --> 00:04:13,820
0,210 210,330 330,420 420,660 660,1380
you know you might have,|
你可能有，|

120
00:04:15,320 --> 00:04:16,910
0,210 210,540 540,1170 1200,1500 1500,1590
{} we're involved all of
关系到我们所有人，

121
00:04:16,910 --> 00:04:17,930
0,150 150,450 450,720 720,840 840,1020
us or any of us,|
|

122
00:04:17,930 --> 00:04:19,160
0,150 150,750 810,1080 1080,1170 1170,1230
as we saw in the
正如我们在简介中看到的，

123
00:04:19,160 --> 00:04:21,350
0,510 510,1050 1050,1170 1170,1440 1440,2190
introduction,| or in different locations|
|或者在不同的地方看到的，|

124
00:04:21,380 --> 00:04:22,790
0,570 570,810 810,1080 1080,1230 1230,1410
and we get you know
我们通过笔记本电脑或手机或 iPad

125
00:04:22,790 --> 00:04:25,940
0,450 690,1500 1500,2460 2490,2700 2700,3150
we're connecting {} with our

126
00:04:25,970 --> 00:04:28,460
0,840 870,1230 1230,1650 1680,2100 2100,2490
laptop or our phone or

127
00:04:28,460 --> 00:04:30,020
0,360 360,900 900,990 990,1140 1140,1560
our iPad,| you know to
|连接到一些服务器，

128
00:04:30,020 --> 00:04:31,460
0,270 270,780 780,930 930,1170 1170,1440
some server,| that actually sits
|它们可能位于世界上完全不同的地方。

129
00:04:31,460 --> 00:04:32,810
0,150 150,210 210,570 570,1080 1080,1350
in a completely different part

130
00:04:32,810 --> 00:04:33,800
0,90 90,180 180,570
of the world.|
|

131
00:04:34,270 --> 00:04:36,490
0,420 810,1110 1110,1710 1710,1800 1800,2220
{} That's probably the []
这可能是你关心分布式系统的基本原因，

132
00:04:36,490 --> 00:04:38,260
0,690 690,990 990,1320 1320,1380 1380,1770
basic reason why you care

133
00:04:38,260 --> 00:04:41,470
0,420 1290,2070 2370,2790 2790,3000 3000,3210
about {} {distributed,systems},| because {you,know}
|因为你有两台在物理空间上分隔的机器，

134
00:04:41,470 --> 00:04:42,130
0,210 210,390 390,450 450,540 540,660
just want to have two

135
00:04:42,130 --> 00:04:43,510
0,390 390,540 540,870 870,1290 1290,1380
machines that physically separated in

136
00:04:43,510 --> 00:04:44,440
0,450 450,630 630,690 690,870 870,930
space| and you want to
|你想连接它们，

137
00:04:44,440 --> 00:04:45,420
0,240 240,300 300,420
connect to them,|
|

138
00:04:45,740 --> 00:04:46,970
0,210 210,420 420,570 570,900 900,1230
and once you can connect
一旦你把它们连接起来，

139
00:04:46,970 --> 00:04:48,260
0,300 300,570 570,750 750,840 840,1290
them,| that has an additional
|还有一个额外的好处，

140
00:04:48,260 --> 00:04:49,400
0,450 450,570 570,720 720,990 990,1140
benefit,| that it actually may
|它可以允许用户之间的共享。

141
00:04:49,400 --> 00:04:52,200
0,420 420,900 900,1500 1590,2130
allow sharing between users.|
|

142
00:04:54,020 --> 00:04:55,160
0,390 420,570 570,720 720,810 810,1140
So if you and I
所以如果你和我可以连接到同一台计算机，

143
00:04:55,160 --> 00:04:56,030
0,180 180,390 390,660 660,750 750,870
can actually connect to the

144
00:04:56,030 --> 00:04:57,440
0,210 210,720 750,990 990,1290 1290,1410
same computer,| then actually we
|那么我们就可以共享数据了，

145
00:04:57,440 --> 00:04:59,210
0,90 90,360 360,660 660,1020 1230,1770
can start sharing data,| and
|这使得各种合作成为可能，

146
00:04:59,210 --> 00:05:00,170
0,120 120,240 240,420 420,810 810,960
you know that enables all

147
00:05:00,170 --> 00:05:03,710
0,300 300,540 540,690 690,1380 1650,3540
kinds of {you,know} collaborative possibilities|
|

148
00:05:03,710 --> 00:05:04,760
0,390 390,480 480,570 570,810 810,1050
and you know what it
无论是文件共享，

149
00:05:04,760 --> 00:05:06,110
0,180 180,360 360,660 660,1230 1230,1350
is, like file sharing,| you
|还是共享屏幕，

150
00:05:06,110 --> 00:05:07,610
0,90 90,390 390,570 570,990 1050,1500
know whether it is sharing

151
00:05:07,610 --> 00:05:08,720
0,120 120,720 720,810 810,900 900,1110
of screens,| you know whether
|还是共享计算基础设施，

152
00:05:08,720 --> 00:05:11,600
0,90 90,630 1020,2220 2220,2550 2550,2880
it's sharing {} of computing

153
00:05:11,600 --> 00:05:13,040
0,690 690,870 870,1110 1110,1260 1260,1440
infrastructure| and {} it's all
|这些都是可以的，

154
00:05:13,040 --> 00:05:14,480
0,450 450,750 750,840 840,990 990,1440
enabled,| because we can connect
|因为我们可以连接到物理上分隔的机器。

155
00:05:14,480 --> 00:05:16,040
0,90 90,300 300,630 630,1050 1050,1560
{you,know} to physically separate machines.|
|

156
00:05:17,140 --> 00:05:18,760
0,180 180,240 240,690 690,1290 1290,1620
There are probably a very
这可能是一个非常重要的原因，

157
00:05:18,760 --> 00:05:20,440
0,330 330,720 840,1290 1320,1440 1440,1680
important reason,| but a couple
|但还有其他几个非常重要的原因。

158
00:05:20,440 --> 00:05:22,300
0,210 210,660 660,1170 1170,1440 1440,1860
other really important reasons.| One
|一个是，通过并行来提高性能，

159
00:05:22,300 --> 00:05:23,530
0,210 210,570 570,810 810,1050 1050,1230
is, to another one is

160
00:05:23,530 --> 00:05:25,440
0,150 150,720 720,1380
to increase capacity,

161
00:05:29,250 --> 00:05:31,120
0,300 300,420 420,570 570,1290
you know through parallelism,|
|

162
00:05:33,670 --> 00:05:34,630
0,330 330,450 450,540 540,630 630,960
and you know the paper
我们今天布置的论文，

163
00:05:34,630 --> 00:05:35,890
0,210 210,480 480,810 810,930 930,1260
that we assigned for today,|
|

164
00:05:35,890 --> 00:05:36,640
0,180 180,300 300,360 360,660 660,750
what is the topic of
第一个实验的主题是什么，

165
00:05:36,640 --> 00:05:38,050
0,120 120,540 540,1050 1050,1170 1170,1410
the first lab,| the {mapreduce
|mapreduce 论文，

166
00:05:38,050 --> 00:05:39,430
0,240 240,720 810,990 990,1140 1140,1380
-} paper,| there was a
|是这方面一个很好的示例，

167
00:05:39,430 --> 00:05:41,590
0,240 240,630 630,690 690,1050 1260,2160
good example of that,| but
|但另一个示例是，

168
00:05:41,590 --> 00:05:43,420
0,90 90,390 390,810 810,1230 1260,1830
the other example is| {for,example}
|例如有很多 Zoom 的会话同时发生，

169
00:05:43,420 --> 00:05:44,440
0,150 150,180 180,510 510,750 750,1020
there are many many Zoom

170
00:05:44,440 --> 00:05:45,370
0,300 300,540 540,780 780,870 870,930
sessions going on at the

171
00:05:45,370 --> 00:05:47,440
0,240 240,600 720,1590 1590,1800 1800,2070
same time,| {you,know,zoom.com - -}
|zoom.com 必须全部支持，

172
00:05:47,440 --> 00:05:48,520
0,150 150,270 270,600 600,690 690,1080
has some support at all,|
|

173
00:05:48,670 --> 00:05:49,510
0,210 210,300 300,630 630,690 690,840
and it requires a lot
它需要大量的计算机来提高性能，

174
00:05:49,510 --> 00:05:51,310
0,60 60,480 480,570 570,1410 1410,1800
of computers to basically increase

175
00:05:51,310 --> 00:05:52,810
0,60 60,720 720,930 930,1020 1020,1500
the capacities| and to support
|来支持所有这些并行的 Zoom 会话。

176
00:05:52,810 --> 00:05:55,450
0,150 150,540 540,960 960,1710 1860,2640
all those in parallel Zoom

177
00:05:55,450 --> 00:05:56,340
0,540
sessions.|
|

178
00:05:57,200 --> 00:05:58,820
0,450 450,810 810,1080 1080,1380 1380,1620
Another important reason is to
另一个重要原因是容忍错误，

179
00:05:58,820 --> 00:06:00,380
0,450 450,960
tolerate faults,|
|

180
00:06:06,020 --> 00:06:07,430
0,150 150,210 210,930 930,1320 1320,1410
so, for example, {} you
因为计算机可能在物理上是分开的，

181
00:06:07,430 --> 00:06:08,960
0,90 90,720 780,1140 1140,1350 1350,1530
know because computers might be

182
00:06:08,960 --> 00:06:11,150
0,690 690,870 870,1560 1620,1860 1860,2190
physically {} separated,| {you,know} one
|有一部分可能会宕机，

183
00:06:11,150 --> 00:06:12,320
0,240 240,360 360,510 510,960 960,1170
part can go down,| and
|希望不会影响到另一部分服务，

184
00:06:12,320 --> 00:06:13,670
0,420 420,630 630,900 900,1170 1170,1350
hopefully won't affect another part,

185
00:06:13,670 --> 00:06:15,080
0,90 90,360 360,1170 1170,1350 1350,1410
of the another part of

186
00:06:15,080 --> 00:06:16,370
0,60 60,510 630,900 900,1080 1080,1290
the service,| so that the
|以便始终能够提供服务，

187
00:06:16,370 --> 00:06:17,720
0,270 270,420 420,750 750,870 870,1350
service can always be delivered,|
|

188
00:06:17,930 --> 00:06:18,590
0,120 120,240 240,330 330,480 480,660
so you can get high
可以获得高可用性，

189
00:06:18,590 --> 00:06:19,820
0,780
availability,|
|

190
00:06:20,100 --> 00:06:21,180
0,570 570,690 690,930 930,1020 1020,1080
we'll see that as a
我们将把它作为这门课的一个重要主题。

191
00:06:21,180 --> 00:06:23,310
0,600 600,1230 1230,1380 1380,1530 1530,2130
major theme for this class.|
|

192
00:06:23,940 --> 00:06:25,080
0,420 420,510 510,600 600,900 900,1140
And then the final one
然后最后一个是，

193
00:06:25,080 --> 00:06:27,240
0,240 240,360 360,690 720,1080 1530,2160
is going to be, {}|
|

194
00:06:27,240 --> 00:06:28,260
0,120 120,360 360,660 660,840 840,1020
you know also sort of
在某种程度上，也是利用了物理上的隔离，

195
00:06:28,440 --> 00:06:29,850
0,270 270,630 630,750 750,1110 1110,1410
takes advantage of a physical

196
00:06:29,850 --> 00:06:31,830
0,810 1020,1380 1380,1620 1620,1800 1800,1980
separation,| {} which is going
|就是会获得安全性，

197
00:06:31,830 --> 00:06:33,420
0,120 120,240 240,450 450,1050
to {achieve -} security,|
|

198
00:06:36,880 --> 00:06:40,340
0,960 960,1080 1080,1320 1320,2790
{for,example} if you have,
例如，如果你有一个非常敏感的服务，

199
00:06:41,130 --> 00:06:42,570
0,240 240,360 360,450 450,810 810,1440
you have a very sensitive

200
00:06:42,600 --> 00:06:44,850
0,300 300,870 1230,1320 1320,1680 1890,2250
{} service,| {the -} service
|这个服务用来管理你的客户的密码，

201
00:06:44,850 --> 00:06:46,200
0,60 60,390 390,480 480,990 990,1350
to manage {} passwords for

202
00:06:46,200 --> 00:06:47,940
0,510 570,1230 1230,1320 1320,1590 1590,1740
your customers,| you know for
|用来登录到你的服务，

203
00:06:47,940 --> 00:06:50,490
0,630 990,1290 1290,1410 1410,1980 2070,2550
logging to your service, {}|
|

204
00:06:50,490 --> 00:06:51,990
0,270 270,390 390,600 600,1170 1170,1500
you would like to {}
你肯定想保护那台机器，

205
00:06:52,020 --> 00:06:54,810
0,540 570,1230 1290,2160 2160,2310 2310,2790
really {} guard that one

206
00:06:54,840 --> 00:06:56,460
0,630 630,810 810,1080 1080,1440 1440,1620
machine,| then not shared with
|不与其他任何人分享，

207
00:06:56,460 --> 00:06:57,810
0,330 330,690 690,900 900,1110 1110,1350
anybody else,| or not share
|或者不与任何其他程序共享，在它上面运行任何应用程序，

208
00:06:57,810 --> 00:06:59,010
0,150 150,330 330,810 810,990 990,1200
any other application, run any

209
00:06:59,010 --> 00:07:00,480
0,570 570,750 750,870 1080,1290 1290,1470
applications on it,| so you
|所以你对这台机器要有很少的接口，

210
00:07:00,480 --> 00:07:02,400
0,180 180,660 660,960 960,1590 1800,1920
have very narrow interface to

211
00:07:02,400 --> 00:07:04,320
0,180 180,630 1080,1260 1260,1380 1380,1920
that machine| and it allows
|它让你得到更好的安全性，

212
00:07:04,320 --> 00:07:05,430
0,60 60,510 510,690 690,930 930,1110
you hopefully you get better

213
00:07:05,430 --> 00:07:06,570
0,480 480,720 720,810 810,960 960,1140
security,| because you just have
|因为你只需要保护一个小的接口，

214
00:07:06,570 --> 00:07:08,400
0,90 90,480 480,780 780,1200 1200,1830
to protect one small interface,|
|

215
00:07:08,520 --> 00:07:10,770
0,300 300,690 780,1590 1710,2010 2010,2250
and so by putting things
所以，通过把东西放在不同的计算机上，进行隔离，

216
00:07:10,770 --> 00:07:13,170
0,90 90,570 600,1470 1470,2040 2040,2400
on separate computers, isolate them,|
|

217
00:07:13,500 --> 00:07:14,640
0,450 450,570 570,780 780,930 930,1140
{} you know you might
你可能会得到，

218
00:07:14,640 --> 00:07:15,630
0,240 240,390 390,630 630,870 870,990
actually be able to,| it's
|这是获得安全性的重要一步。

219
00:07:15,630 --> 00:07:16,500
0,60 60,210 210,480 480,780 780,870
a good stepping stone to

220
00:07:16,500 --> 00:07:17,720
0,150 150,660
get security.|
|

221
00:07:18,170 --> 00:07:21,410
0,540 540,1170 1230,1590 1590,2160 2550,3240
These are major reasons, {}
这些是我认为的四个主要原因，

222
00:07:21,830 --> 00:07:23,990
0,930 930,1290 1290,1830 1830,1950 1950,2160
main four reasons,| I think
|为什么分布式系统如此流行。

223
00:07:23,990 --> 00:07:26,510
0,630 660,1110 1110,1410 1410,2070 2340,2520
why one wants to, why

224
00:07:26,510 --> 00:07:29,060
0,330 330,660 660,750 750,1200 2010,2550
distributed systems are popular.| I'm
|我要稍微讨论一下，

225
00:07:29,420 --> 00:07:30,380
0,270 270,420 420,480 480,780 780,960
gonna talk a little bit

226
00:07:30,380 --> 00:07:31,430
0,390 390,780 780,810 810,960 960,1050
about,| giving a little bit
|给出一些分布式系统的历史背景，

227
00:07:31,430 --> 00:07:33,080
0,60 60,570 570,1290 1320,1500 1500,1650
of historical context you know

228
00:07:33,080 --> 00:07:35,570
0,390 390,810 840,1260 1260,1980 2280,2490
for {} distributed systems,| and
|[]从哪里来，

229
00:07:35,570 --> 00:07:37,010
0,300 300,390 390,690 690,900 900,1440
where the [] came from,|
|

230
00:07:37,010 --> 00:07:40,760
0,600 930,1620 1620,1980 1980,2670 3420,3750
and what happened over the,
以及近几十年来发生了什么。

231
00:07:40,760 --> 00:07:42,900
0,240 240,300 300,720 720,1170
over the decades actually.|
|

232
00:07:45,380 --> 00:07:46,340
0,60

233
00:07:50,750 --> 00:07:51,920
0,600 630,750 750,840 840,1020 1020,1170
And you know sort of
基本上分布式系统是，

234
00:07:51,920 --> 00:07:53,360
0,570 570,750 750,900 900,1200 1200,1440
basically sort of the distributed

235
00:07:53,360 --> 00:07:54,380
0,300 300,450 450,750 750,930 930,1020
systems,| as we sort of
|就像我们现在看到的或者我们认识到的方式，

236
00:07:54,380 --> 00:07:56,060
0,480 480,900 900,960 960,1230 1230,1680
now look at them or

237
00:07:56,060 --> 00:07:57,020
0,90 90,240 240,390 390,840 840,960
the way we recognize,| they
|它们可能是随着局域网出现开始的，

238
00:07:57,020 --> 00:07:58,520
0,300 300,660 660,1080 1080,1230 1230,1500
probably started around the same

239
00:07:58,520 --> 00:08:00,230
0,270 270,570 570,840 840,1110 1110,1710
time that local area networks

240
00:08:00,320 --> 00:08:02,040
0,600
happened,|
|

241
00:08:05,180 --> 00:08:07,010
0,270 270,870 870,960 960,1380 1410,1830
from year you know {I,think}
在 80 年代初。

242
00:08:07,010 --> 00:08:08,480
0,360 360,990
early 80s.|
|

243
00:08:11,560 --> 00:08:12,730
0,450 450,630 630,750 750,840 840,1170
{} And so for example
比如，在麻省理工学院有一个校园网络，

244
00:08:12,730 --> 00:08:13,480
0,90 90,210 210,360 360,420 420,750
you would have a campus

245
00:08:13,480 --> 00:08:16,450
0,420 420,660 660,1500 1500,2430 2430,2970
network at MIT,| {} and
|连接到工作站，比如 Athena 集群，

246
00:08:16,570 --> 00:08:18,400
0,660 660,750 750,1050 1050,1140 1140,1830
connecting for example the workstations,

247
00:08:18,400 --> 00:08:20,260
0,180 180,600 600,1380 1380,1740 1740,1860
like Athena clusters,| to the
|连接到 Athena 服务器，比如 AFS ，

248
00:08:20,260 --> 00:08:21,580
0,300 300,840 840,1020 1020,1170 1170,1320
Athena servers, like {AFS -

249
00:08:21,580 --> 00:08:23,380
0,420 810,1260 1260,1530 1530,1650 1650,1800
-}, {} and so that
|那是一种典型的分布式系统，

250
00:08:23,380 --> 00:08:24,730
0,90 90,240 240,300 300,870 870,1350
was sort of a typical

251
00:08:24,730 --> 00:08:25,930
0,360 360,660 660,750 750,930 930,1200
distributed system at that point,|
|

252
00:08:25,930 --> 00:08:27,490
0,240 240,570 570,780 780,1380 1380,1560
{AFS -} also dates from
AFS 也可以追溯到那段时间，

253
00:08:27,490 --> 00:08:30,370
0,300 330,780 780,870 870,1290 2190,2880
that period of time,| of
|当然，互联网也在那里，

254
00:08:30,490 --> 00:08:31,570
0,420 420,660 660,780 780,960 960,1080
course, you know Internet was

255
00:08:31,570 --> 00:08:32,950
0,180 180,720 750,1170 1170,1290 1290,1380
there too,| {} but there
|但当时没有大规模的互联网应用，

256
00:08:32,950 --> 00:08:33,940
0,180 180,450 450,720 720,900 900,990
was really not sort of

257
00:08:33,940 --> 00:08:35,980
0,870 870,1200 1200,1770 1770,1860 1860,2040
large-scale Internet applications,| the way
|像我们现在使用它们的方式，

258
00:08:35,980 --> 00:08:37,750
0,420 420,540 540,960 1080,1470 1470,1770
we you know are using

259
00:08:37,750 --> 00:08:38,800
0,120 120,360 360,480 480,600 600,1050
them now,| and so the
|互联网规模的分布式系统主要是 DNS ，即域名服务系统，

260
00:08:38,800 --> 00:08:40,720
0,390 390,570 570,720 1170,1560 1560,1920
main sort of Internet scale

261
00:08:40,720 --> 00:08:42,970
0,450 450,840 840,1410 1410,1620 1620,2250
type distributed systems was DNS,
|

262
00:08:42,970 --> 00:08:44,590
0,150 150,510 510,750 750,1140 1140,1620
the domain name system,| we
|我们仍然在使用，

263
00:08:44,590 --> 00:08:46,570
0,240 240,660 900,1110 1110,1470 1470,1980
still use| and basically email.|
|然后还有电子邮件。|

264
00:08:48,740 --> 00:08:50,180
0,240 240,360 360,570 570,960 1020,1440
And so when I early
所以在早期，当我学习分布式系统时，

265
00:08:50,180 --> 00:08:50,960
0,120 120,180 180,420 420,630 630,780
in the early days, when

266
00:08:50,960 --> 00:08:52,550
0,690 690,1200 1200,1290 1290,1590 1590,1590
{I,learn,distributed} systems,| and those are
|这些都是主要的例子，

267
00:08:52,550 --> 00:08:54,980
0,630 630,720 720,960 960,1650 1680,2430
basically the main examples, {}|
|

268
00:08:55,370 --> 00:08:56,750
0,570 600,900 900,1020 1020,1290 1290,1380
{} that we had to
是我们必须讨论的。

269
00:08:56,750 --> 00:08:58,700
0,690 720,1170 1170,1410 1410,1500 1500,1950
discuss.| Now things have changed
|现在情况发生了很大的变化，

270
00:08:58,700 --> 00:09:00,380
0,300 300,930 1050,1320 1320,1410 1410,1680
quite dramatically,| since the {1980s
|从 20 世纪 80 年代以来，

271
00:09:00,380 --> 00:09:01,580
0,390 390,630 630,690 690,1110 1110,1200
-},| and the importance of
|分布式系统的重要性大大增加了，

272
00:09:01,580 --> 00:09:04,160
0,360 360,720 720,1080 1350,1950 1950,2580
distributed systems has tremendously increased,|
|

273
00:09:04,310 --> 00:09:06,170
0,660 660,840 840,1650 1650,1740 1740,1860
{} and one you know
有一点很重要，

274
00:09:06,170 --> 00:09:08,900
0,600 600,1110 1290,2280 2280,2550 2550,2730
significant point,| {} it was
|它就是数据中心，

275
00:09:08,900 --> 00:09:10,220
0,240 240,720 720,870 870,1020 1020,1320
data centers,| {you,know} the rise
|数据中心的兴起，是与大型网站相伴而生的。

276
00:09:10,220 --> 00:09:11,480
0,90 90,300 300,930
of data centers,

277
00:09:11,570 --> 00:09:14,030
0,390 390,570 570,720 720,1500 1650,2460
right, that went along with

278
00:09:14,210 --> 00:09:16,300
0,450 450,570 570,810 810,1560
basically the big websites.|
|

279
00:09:19,380 --> 00:09:21,090
0,240 240,870 870,990 990,1470 1470,1710
And here we're talking sort
我们这里谈论的大概是 20 世纪 90 年代或 90 年代初的情况。

280
00:09:21,090 --> 00:09:23,490
0,120 120,720 1170,1770 1770,2280 2280,2400
of the roughly speaking in

281
00:09:23,490 --> 00:09:25,020
0,120 120,420 420,1050 1050,1290 1290,1530
the {1990s -} or early

282
00:09:25,020 --> 00:09:26,480
0,270 270,840
{1990s -}.|
|

283
00:09:26,480 --> 00:09:27,650
0,150 150,240 240,390 390,690 690,1170
And so what happened basically
所以发生的事情是，

284
00:09:27,650 --> 00:09:29,180
0,180 180,570 570,1170 1290,1440 1440,1530
is that,| {} you know
|在 80 年代末的某个时候，

285
00:09:29,180 --> 00:09:30,800
0,420 420,600 600,840 870,1140 1140,1620
somewhere in the late 80s,|
|

286
00:09:30,800 --> 00:09:32,990
0,120 120,390 390,720 720,1140 1440,2190
you know 80s, the government
80 年代，政府或国会允许互联网上的商业行为，

287
00:09:32,990 --> 00:09:35,270
0,180 180,690 690,810 810,1470 1500,2280
or congress {} allowed {}

288
00:09:35,600 --> 00:09:37,880
0,630 630,1200 1230,1680 1680,1770 1770,2280
commercial traffic on the Internet,|
|

289
00:09:38,150 --> 00:09:39,740
0,480 480,690 690,1050 1050,1410 1410,1590
and {} basically resulted in
然后导致了繁荣，

290
00:09:39,740 --> 00:09:42,230
0,540 780,1560 1560,1980 1980,2220 2220,2490
boom,| {} where {you,know} start
|开始有大型网站，

291
00:09:42,230 --> 00:09:43,400
0,210 210,420 420,900 900,1050 1050,1170
getting big websites,| that were
|为大量用户提供支持。

292
00:09:43,400 --> 00:09:44,960
0,420 420,840 840,1230 1230,1470 1470,1560
supporting large large number of

293
00:09:44,960 --> 00:09:45,940
0,570
users.|
|

294
00:09:45,940 --> 00:09:47,560
0,750 750,870 870,930 930,1020 1020,1620
And you know the applications
那些时候的应用程序，

295
00:09:47,560 --> 00:09:48,520
0,90 90,300 300,690 690,870 870,960
from those times,| like for
|比如，网络搜索，

296
00:09:48,520 --> 00:09:51,120
0,660 660,1260 1470,1620 1620,2160
example {} you know

297
00:09:51,350 --> 00:09:52,700
0,210 210,690 690,840 840,1050 1080,1350
web search,| you know being
|能够搜索所有不同的网页，

298
00:09:52,700 --> 00:09:53,660
0,330 330,450 450,750 750,870 870,960
able to search all the

299
00:09:53,660 --> 00:09:55,130
0,660 660,810 810,1140 1140,1290 1290,1470
different web pages,| that actually
|在万维网上的网页，

300
00:09:55,130 --> 00:09:56,390
0,210 210,360 360,780 930,1170 1170,1260
were on the on the

301
00:09:56,390 --> 00:09:58,430
0,150 150,360 360,780 1110,1800 1800,2040
world wide web,| {} {you,know}
|还有购物和。

302
00:09:58,430 --> 00:10:00,560
0,630 750,990 990,990
shopping and. {}|
|

303
00:10:00,820 --> 00:10:03,070
0,390 540,690 690,1260 1290,2190 2190,2250
And so these applications you
这些应用程序产生了两种情况，

304
00:10:03,070 --> 00:10:04,690
0,150 150,420 420,900 900,1380 1380,1620
know gave rise to two

305
00:10:04,690 --> 00:10:06,070
0,150 150,240 240,510 510,1050 1080,1380
sort of things,| one huge
|一个是巨大的数据集，

306
00:10:06,070 --> 00:10:07,270
0,690 690,810 810,930 930,1080 1080,1200
datasets,| you know sort of
|使用索引来支持网络搜索，

307
00:10:07,270 --> 00:10:09,100
0,720 720,1020 1020,1350 1350,1500 1500,1830
indexing to support web search,|
|

308
00:10:09,100 --> 00:10:10,060
0,180 180,270 270,660 660,870 870,960
have the index all the
将互联网上的所有网页写入索引，

309
00:10:10,060 --> 00:10:11,260
0,180 180,540 540,660 660,750 750,1200
web pages on the Internet,|
|

310
00:10:11,650 --> 00:10:12,850
0,270 270,360 360,510 510,870 870,1200
{} so that mean like
这意味着收集爬取所有的网页，

311
00:10:12,850 --> 00:10:14,890
0,420 420,900 900,1080 1080,1740 1740,2040
gather crawl all {web,pages},| then
|然后计算倒排索引，

312
00:10:14,890 --> 00:10:16,840
0,450 450,810 810,1260 1260,1440 1440,1950
compute reverse index,| and then
|然后你可以把它用在搜索引擎上，

313
00:10:16,840 --> 00:10:17,560
0,120 120,210 210,390 390,570 570,720
you could use that for

314
00:10:17,560 --> 00:10:19,390
0,120 120,390 390,660 1350,1650 1680,1830
your search engine| and that
|这是海量的数据，

315
00:10:19,390 --> 00:10:20,380
0,120 120,270 270,330 330,810 810,990
was sort a tremendous amount

316
00:10:20,380 --> 00:10:21,400
0,60 60,390 420,540 540,840 840,1020
of data,| that didn't fit
|不能放在一台计算机上，

317
00:10:21,400 --> 00:10:22,600
0,60 60,300 300,750 810,1140 1140,1200
on one computer,| and the
|以及执行第一次索引的计算量，

318
00:10:22,600 --> 00:10:23,710
0,210 210,270 270,720 720,840 840,1110
amount of computation to actually

319
00:10:23,710 --> 00:10:24,880
0,120 120,330 330,540 540,1050 1050,1170
do the first indexing,| you
|对于同一台计算机也太多了，

320
00:10:24,880 --> 00:10:26,620
0,90 90,450 450,690 690,1110 1380,1740
know there's also too much

321
00:10:26,620 --> 00:10:27,730
0,150 150,210 210,420 420,870 900,1110
for the same computer,| as
|所以，数据中心应运而生，

322
00:10:27,730 --> 00:10:29,470
0,90 90,600 600,690 690,1170 1260,1740
a result, you know data

323
00:10:29,470 --> 00:10:30,850
0,300 300,480 480,1050 1050,1200 1200,1380
centers came about,| you know
|公司开始，

324
00:10:30,850 --> 00:10:32,560
0,360 360,810 1020,1410 1410,1620 1620,1710
companies started,| putting lots and
|将大量的计算机放到数据中心，

325
00:10:32,560 --> 00:10:33,490
0,150 150,210 210,600 600,690 690,930
lots of computers in data

326
00:10:33,490 --> 00:10:34,180
0,300 300,420 420,540 540,600 600,690
centers,| so that it can
|让它可以支持这种类型的应用程序，

327
00:10:34,180 --> 00:10:35,860
0,420 420,600 600,810 810,900 900,1680
support those kinds of applications,|
|

328
00:10:37,020 --> 00:10:38,010
0,180 180,330 330,660 660,930 930,990
so that's one lot of
这是第一个，大量数据。

329
00:10:38,010 --> 00:10:39,330
0,450 660,840 840,900 900,1140 1140,1320
data.| And the second one
|第二个是，大量用户，

330
00:10:39,330 --> 00:10:40,290
0,90 90,240 240,300 300,870 870,960
is just a lot of

331
00:10:40,290 --> 00:10:42,900
0,480 1320,1860 1860,2310 2310,2550 2550,2610
users,| not uncommon for, you
|大型网站拥有数亿用户，这并不少见，

332
00:10:42,900 --> 00:10:44,190
0,90 90,300 300,720 720,1140 1140,1290
know big upside websites have

333
00:10:44,190 --> 00:10:45,540
0,330 330,420 420,720 720,810 810,1350
hundreds of millions of users,|
|

334
00:10:45,540 --> 00:10:46,740
0,210 210,510 510,960 960,1020 1020,1200
and this requires a lot
这需要大量的机器来支持所有这些用户。

335
00:10:46,740 --> 00:10:48,120
0,60 60,450 450,540 540,1050 1050,1380
of machines to actually support

336
00:10:48,120 --> 00:10:49,240
0,90 90,270 270,690
all those users.|
|

337
00:10:50,060 --> 00:10:51,770
0,150 150,270 270,390 390,930 1020,1710
And so we see {}
所以，我们看到在一段时间内有大量的创新，

338
00:10:51,770 --> 00:10:54,260
0,540 540,780 780,870 870,1470 1500,2490
tremendous amount of innovation in

339
00:10:54,290 --> 00:10:55,490
0,120 120,540 540,630 630,960 960,1200
the period of time,| we're
|我们还在继续，

340
00:10:56,330 --> 00:10:58,220
0,330 330,840 1200,1650 1650,1770 1770,1890
still continuing,| {} and some
|我们读到的一些论文，比如 mapreduce 论文，

341
00:10:58,220 --> 00:10:59,030
0,60 60,120 120,390 390,570 570,810
of the papers that we

342
00:10:59,030 --> 00:11:00,710
0,450 690,1200 1200,1260 1260,1440 1440,1680
read, like the {mapreduce -}

343
00:11:00,710 --> 00:11:02,330
0,330 330,540 540,720 720,780 780,1620
paper| actually sort of started
|就是从那段时间开始的。

344
00:11:02,330 --> 00:11:03,920
0,360 360,750 750,1020 1020,1110 1110,1590
from that period of time.|
|

345
00:11:04,620 --> 00:11:05,780
0,510

346
00:11:05,930 --> 00:11:07,100
0,210 210,570 570,720 720,900 900,1170
That whole thing sort of
整个事情加速发展，

347
00:11:07,130 --> 00:11:09,470
0,240 240,330 330,1020 1020,1560 1560,2340
sort of accelerated development accelerated|
|

348
00:11:09,470 --> 00:11:11,450
0,600 630,1140 1140,1590 1590,1680 1680,1980
with {} emergence of cloud
随着云计算的出现，

349
00:11:11,450 --> 00:11:12,520
0,450
computing,|
|

350
00:11:18,400 --> 00:11:21,040
0,450 450,1290 1320,1830 1830,2160 2160,2640
{and,that} early whatever mid late
早在 2000 年的中后期，

351
00:11:21,310 --> 00:11:24,160
0,870 1320,1950 1950,2070 2070,2580 2580,2850
2000s,| and so here where
|所以，我们在这里看到的用户或客户，

352
00:11:24,160 --> 00:11:25,690
0,90 90,300 300,360 360,810 810,1530
we see a move were

353
00:11:25,720 --> 00:11:28,660
0,720 780,1140 1140,1890 2070,2580 2580,2940
users or customers,| {} basically
|将他们的计算和数据转移到数据中心，

354
00:11:28,660 --> 00:11:31,000
0,390 390,540 540,1110 1110,1410 1410,2340
move their computation and data

355
00:11:31,030 --> 00:11:32,530
0,450 450,720 720,1110 1110,1230 1230,1500
to data centers,| you know
|还有其他人，

356
00:11:32,530 --> 00:11:33,700
0,240 240,450 450,690 690,990 990,1170
and by other people,| like
|比如你所知道的亚马逊、谷歌、微软这样的公司，

357
00:11:33,700 --> 00:11:37,390
0,990 1020,2460 2580,3390 3390,3450 3450,3690
Amazon Google Microsoft you know

358
00:11:37,390 --> 00:11:40,030
0,120 120,330 330,540 1050,1800 1980,2640
you name it,| and {}
|所以人们很多日常的计算，

359
00:11:40,180 --> 00:11:41,620
0,480 660,1020 1020,1290 1290,1380 1380,1440
so a lot of the

360
00:11:41,620 --> 00:11:43,510
0,630 630,960 960,1470 1470,1530 1530,1890
computation daily computation of people|
|

361
00:11:43,510 --> 00:11:44,830
0,150 150,330 330,660 660,780 780,1320
just used run on their
过去运行在他们桌面或笔记本上的，

362
00:11:44,860 --> 00:11:46,810
0,780 780,1020 1020,1560 1560,1620 1620,1950
desktop or on the laptop,|
|

363
00:11:46,810 --> 00:11:48,040
0,210 210,630 630,1050 1050,1140 1140,1230
just moves inside of the
转到了云计算上，

364
00:11:48,040 --> 00:11:50,170
0,270 270,660 660,960 1020,1680 1680,2130
cloud computing,| and application change,|
|应用程序变更，|

365
00:11:50,170 --> 00:11:52,000
0,270 270,720 960,1440 1440,1530 1530,1830
{} all instead of like
不是在本地计算机上运行应用程序，

366
00:11:52,000 --> 00:11:53,470
0,450 450,810 810,1290 1290,1380 1380,1470
running an application on your

367
00:11:53,470 --> 00:11:54,670
0,240 240,600 600,720 720,900 900,1200
local computer,| you run actually
|而是在云上运行应用程序。

368
00:11:54,670 --> 00:11:55,810
0,120 120,690 690,990 990,1050 1050,1140
the application inside of the

369
00:11:55,810 --> 00:11:56,540
0,330
cloud.|
|

370
00:11:56,880 --> 00:11:57,780
0,180 180,300 300,690 690,780 780,900
And that means you know
这意味着这些数据中心可能需要进一步增长，

371
00:11:57,780 --> 00:11:58,920
0,180 180,330 330,600 600,930 930,1140
that these data centers can

372
00:11:58,920 --> 00:12:00,390
0,120 120,210 210,480 480,1020 1080,1470
have to grow further| and
|并支持新的应用程序，

373
00:12:00,390 --> 00:12:03,240
0,690 690,1680 1680,1920 1920,2010 2010,2850
support new set of applications,|
|

374
00:12:04,390 --> 00:12:05,560
0,300 300,480 480,900 930,1050 1050,1170
not only that, you know
不仅如此，客户将它们的计算转为云计算，

375
00:12:05,560 --> 00:12:07,990
0,390 630,1140 1140,1290 1290,1650 1680,2430
the customers that were outsourcing

376
00:12:07,990 --> 00:12:09,940
0,180 180,840 840,1080 1080,1650 1650,1950
their computing {} to {}

377
00:12:09,940 --> 00:12:11,160
0,240 240,690
cloud computing,|
|

378
00:12:11,160 --> 00:12:11,910
0,30 30,270 270,480 480,570 570,750
{} also started to run
也开始运行自己的大型网站，

379
00:12:11,910 --> 00:12:14,850
0,300 300,690 690,1440 1770,2760 2760,2940
large websites themselves,| and do
|并且自己进行大量的计算，

380
00:12:14,850 --> 00:12:17,790
0,1440 1440,2160 2160,2520 2520,2610 2610,2940
gigantic computations on {themselves -},|
|

381
00:12:17,790 --> 00:12:19,260
0,60 60,630 630,960 960,1350 1350,1470
you know machine learning a
机器学习有很大的数据集，或任何其他类型的计算，

382
00:12:19,260 --> 00:12:22,230
0,240 240,930 1050,2520 2520,2790 2790,2970
large datasets or any other

383
00:12:22,230 --> 00:12:23,550
0,210 210,300 300,510 510,600 600,1320
kind of type of computation,|
|

384
00:12:23,880 --> 00:12:25,380
0,390 390,870 930,1170 1170,1380 1380,1500
and so you see is
所以你可以看到，

385
00:12:25,380 --> 00:12:27,270
0,300 300,450 450,660 660,1260 1560,1890
that,| you know the users
|用户自己想要建立大规模的分布式系统，

386
00:12:27,270 --> 00:12:29,250
0,450 450,690 690,840 840,1320 1320,1980
themselves wanted to build large-scale

387
00:12:29,250 --> 00:12:30,990
0,420 420,870 870,1110 1110,1320 1320,1740
distributed systems,| and that means
|这意味着云提供商，

388
00:12:30,990 --> 00:12:32,370
0,90 90,390 390,900 900,1050 1050,1380
the cloud providers,| they're starting
|开始建设大量的基础设施，

389
00:12:32,370 --> 00:12:33,480
0,540 570,840 840,900 900,1020 1020,1110
{} building a lot of

390
00:12:33,480 --> 00:12:36,120
0,870 870,1050 1050,1830 1920,2370 2370,2640
infrastructure,| to allow other people
|允许其他人向上扩展他们的分布式系统到大量机器上，

391
00:12:36,120 --> 00:12:37,080
0,90 90,540 540,750 750,840 840,960
to scale up you know

392
00:12:37,080 --> 00:12:39,300
0,930 930,1230 1230,1710 1710,2160 2160,2220
their distributed systems to a

393
00:12:39,300 --> 00:12:40,920
0,360 360,630 630,720 720,1260 1260,1620
large number of machines,| and
|实现高并行，高性能，

394
00:12:40,920 --> 00:12:44,820
0,690 1020,1770 1770,2640 2670,3210 3210,3900
achieve high parallelism, high performance|
|

395
00:12:44,820 --> 00:12:45,990
0,300 300,540 540,750 750,840 840,1170
and store lots of data.|
并存储大量数据。|

396
00:12:46,810 --> 00:12:49,090
0,540 1260,1410 1410,1860 1860,2190 2190,2280
{} And so as a
所以，现在的状态是，

397
00:12:49,090 --> 00:12:50,230
0,510 510,570 570,780 780,900 900,1140
result, you know the current

398
00:12:50,230 --> 00:12:51,730
0,270 270,420 420,960 960,1380 1380,1500
state is basically that's,| you
|这是一个非常活跃的研究领域，

399
00:12:51,730 --> 00:12:53,290
0,240 330,630 630,690 690,990 990,1560
know it's a very active

400
00:12:54,220 --> 00:12:56,230
0,450 450,570 570,1410 1470,1770 1770,2010
area of research,| as well
|在发展中也是如此。

401
00:12:56,230 --> 00:12:58,020
0,240 240,420 420,1080
as in development.|
|

402
00:13:00,550 --> 00:13:02,170
0,210 210,480 480,690 690,930 930,1620
In fact, {you,know} so hard,
实际上，这很困难，也很活跃，

403
00:13:02,170 --> 00:13:03,460
0,270 270,900 900,1050 1050,1170 1170,1290
so active,| that is {}
|跟上发展是很困难的，

404
00:13:03,460 --> 00:13:04,720
0,600 600,690 690,810 810,1050 1050,1260
difficult you know to sort

405
00:13:04,720 --> 00:13:06,480
0,150 150,540 540,1170
of keep, {}

406
00:13:06,720 --> 00:13:07,860
0,240 240,390 390,450 450,810 870,1140
keep up to date,| there's
|有很多发展，

407
00:13:07,860 --> 00:13:10,140
0,180 180,750 750,870 870,1650 1650,2280
a lot of developments,| and
|即使在这门课中，

408
00:13:10,140 --> 00:13:11,130
0,90 90,450 480,750 750,840 840,990
you know even in this

409
00:13:11,130 --> 00:13:12,630
0,420 420,930 930,1050 1050,1110 1110,1500
class,| we're going to spend
|我们将花费整个学期来学习分布式系统，

410
00:13:12,750 --> 00:13:13,950
0,30 60,480 480,810 810,960 960,1200
a full semester in distributed

411
00:13:13,950 --> 00:13:15,420
0,510 510,750 750,870 870,990 990,1470
systems,| we're going to only
|我们只能看到，

412
00:13:16,050 --> 00:13:16,890
0,180 180,420 420,570 570,780 780,840
be able to sort of

413
00:13:16,890 --> 00:13:18,510
0,240 240,420 420,510 510,900 900,1620
look at| you know a
|所有东西中的一小部分，

414
00:13:18,540 --> 00:13:21,690
0,780 780,870 870,1500 1620,2550 2610,3150
number of small {} fraction

415
00:13:21,690 --> 00:13:22,920
0,300 300,570 570,930 960,1140 1140,1230
of {all,the} stuff,| all the
|所有人们已经在实践中建立的分布式系统。

416
00:13:22,920 --> 00:13:24,150
0,210 210,330 330,660 660,960 960,1230
kind of distributed systems actually

417
00:13:24,150 --> 00:13:24,930
0,90 90,360 360,420 420,690 690,780
that people are building in

418
00:13:24,930 --> 00:13:25,980
0,420 420,630
practice now.|
|

419
00:13:27,490 --> 00:13:29,170
0,420 420,660 660,840 840,1200 1290,1680
One thing that is cool
有一件事对我们来说很酷，

420
00:13:29,170 --> 00:13:30,580
0,180 180,570 630,1110 1110,1260 1260,1410
for us,| {} you know
|对于分布式系统的老师或学生，

421
00:13:30,580 --> 00:13:31,690
0,420 420,480 480,630 630,780 780,1110
as you know the teachers

422
00:13:31,690 --> 00:13:32,500
0,60 60,450 450,600 600,720 720,810
or students who for the

423
00:13:32,500 --> 00:13:34,330
0,300 300,690 690,840 840,1200 1410,1830
distributed systems is that, {}|
|

424
00:13:34,330 --> 00:13:35,200
0,210 210,450 450,570 570,750 750,870
the people that build these
早期构建这些数据中心的人员，

425
00:13:35,200 --> 00:13:37,120
0,270 270,660 750,1080 1080,1410 1410,1920
data center {} early on,|
|

426
00:13:37,300 --> 00:13:38,770
0,630 660,990 990,1170 1170,1290 1290,1470
{} even though they were
尽管他们是为自己的内部基础设施建立分布式系统，

427
00:13:38,770 --> 00:13:39,940
0,270 270,540 540,840 840,990 990,1170
building {distributed,system -} for their

428
00:13:39,940 --> 00:13:41,680
0,240 240,600 600,1230 1260,1410 1410,1740
own internal infrastructure,| they publish
|他们发表了关于这方面的论文，

429
00:13:41,680 --> 00:13:43,930
0,300 300,540 540,810 960,1680 1770,2250
papers about it,| and {}
|我们可以读这些论文，

430
00:13:43,930 --> 00:13:45,040
0,120 120,270 270,420 420,630 630,1110
we can read those papers,|
|

431
00:13:45,040 --> 00:13:46,840
0,270 270,510 510,570 570,1380 1380,1800
and so in fact during
所以在这学期里，

432
00:13:46,840 --> 00:13:47,710
0,60 60,480 480,660 660,810 810,870
the semester,| we'll read a
|我们会读很多这样的论文，

433
00:13:47,710 --> 00:13:49,120
0,390 390,480 480,810 840,1290 1290,1410
number of those papers,| that
|是由面临大规模分布式系统的挑战的人们发表的，

434
00:13:49,120 --> 00:13:51,340
0,150 150,510 510,690 690,1290 1500,2220
were built by people, that

435
00:13:51,340 --> 00:13:53,380
0,240 240,600 630,1380 1380,1740 1740,2040
really have large-scale distributed system

436
00:13:53,410 --> 00:13:55,480
0,750 870,1200 1200,1650 1650,1980 1980,2070
challenges,| {} and we can
|我们可以看到他们是如何解决的，并从中学习。

437
00:13:55,480 --> 00:13:56,620
0,240 240,420 420,540 540,690 690,1140
see how they were solved

438
00:13:56,620 --> 00:13:57,760
0,210 210,450 450,570 570,840
and learn from them.|
|

439
00:13:58,160 --> 00:14:00,440
0,420 480,780 780,1680 1680,2160 2160,2280
{} This accelerated {even,more} with
随着云计算的出现，这一速度进一步加快，

440
00:14:00,440 --> 00:14:02,030
0,330 330,660 660,1110 1320,1440 1440,1590
cloud computing,| where you know
|在数据中心的早期，

441
00:14:02,030 --> 00:14:03,290
0,420 660,780 780,1020 1020,1200 1200,1260
in the early days of

442
00:14:03,290 --> 00:14:04,700
0,240 240,750 810,1200 1200,1260 1260,1410
data centers,| many of these
|这些服务中有许多是内部的，

443
00:14:04,700 --> 00:14:06,500
0,330 330,510 510,1080 1110,1590 1590,1800
services were internal,| {for -}
|比如微软、谷歌、亚马逊或雅虎，它们自己，

444
00:14:06,500 --> 00:14:08,510
0,120 120,240 240,750 1680,1830 1830,2010
you know the you know

445
00:14:08,510 --> 00:14:10,250
0,600 600,930 930,1170 1170,1680 1680,1740
Microsoft Google or Amazon or

446
00:14:10,250 --> 00:14:12,650
0,600 600,900 900,1230 1230,2010 2160,2400
Yahoo {} for themselves,| with
|随着云计算的兴起，

447
00:14:12,650 --> 00:14:13,970
0,60 60,240 240,300 300,600 600,1320
the rise of cloud computing,|
|

448
00:14:14,000 --> 00:14:15,920
0,390 390,840 840,1110 1110,1470 1470,1920
these services became public services
这些服务变成了其他人使用的公共服务，

449
00:14:15,920 --> 00:14:16,850
0,180 180,300 300,630 630,720 720,930
that were used by other

450
00:14:16,850 --> 00:14:19,070
0,390 480,930 1200,1650 1680,2070 2070,2220
people,| and so suddenly there's
|所以突然之间，有了更多的系统基础设施，

451
00:14:19,070 --> 00:14:20,480
0,210 210,750 750,930 930,990 990,1410
even more sort of system

452
00:14:20,480 --> 00:14:22,460
0,810 960,1380 1380,1650 1650,1740 1740,1980
infrastructure,| {} that is well
|有很好的文档和可用性，

453
00:14:22,460 --> 00:14:25,790
0,840 840,1560 1560,2190 2430,3000 3000,3330
documented and usable,| {} and
|所以我们也会研究其中的一些案例。

454
00:14:25,790 --> 00:14:27,140
0,210 210,360 360,510 510,1200 1200,1350
so we can even we

455
00:14:27,140 --> 00:14:27,980
0,120 120,390 390,570 570,660 660,840
will study some of those

456
00:14:27,980 --> 00:14:28,960
0,330 330,660
cases too.|
|

457
00:14:29,320 --> 00:14:31,090
0,480 750,1200 1230,1350 1350,1500 1500,1770
{} So if you look
所以如果你回顾这 40 年，

458
00:14:31,090 --> 00:14:32,560
0,300 300,450 450,840 840,1380 1380,1470
over these four decades,| you
|这是巨大的涨幅，

459
00:14:32,560 --> 00:14:34,960
0,300 330,1410 1410,1980 1980,2100 2100,2400
know tremendous rise,| you know
|分布式计算的重要性，

460
00:14:34,960 --> 00:14:36,400
0,570 570,630 630,990 990,1050 1050,1440
of the importance of distributed

461
00:14:36,400 --> 00:14:37,570
0,420 480,750 750,750 750,1020 1020,1170
computing,| as I said very
|就像我之前说的，

462
00:14:37,570 --> 00:14:38,890
0,330 330,630 750,1020 1020,1170 1170,1320
{earlier -},| {} I did
|我在 20 世纪 80 年代完成了分布式系统方面的博士论文，

463
00:14:38,890 --> 00:14:41,320
0,630 660,1200 1200,1530 1530,1980 1980,2430
my doctoral thesis {in,distributed} systems

464
00:14:41,320 --> 00:14:42,340
0,270 270,570 570,660 660,720 720,1020
actually somewhere in the {1980s

465
00:14:42,340 --> 00:14:43,510
0,480 600,780 780,840 840,990 990,1170
-},| and it was like,
|这是一个重要的领域，

466
00:14:43,510 --> 00:14:44,680
0,330 420,600 600,690 690,750 750,1170
{} it was an important

467
00:14:44,680 --> 00:14:47,410
0,450 540,930 930,1350 2160,2550 2550,2730
field,| {but,not}, it didn't blow
|在重要性上，它并没有让我大吃一惊，

468
00:14:47,410 --> 00:14:48,160
0,90 90,360 360,420 420,660 660,750
me away in terms of

469
00:14:48,160 --> 00:14:51,400
0,660 660,1140 1380,2250 2250,2460 2460,3240
significance| and {} and practicality
|在实用上，更多局限于这样的局域集群。

470
00:14:51,400 --> 00:14:52,300
0,120 120,270 270,420 420,540 540,900
you know sort of limited

471
00:14:52,300 --> 00:14:53,170
0,90 90,360 360,450 450,600 600,870
to more of these [local

472
00:14:53,170 --> 00:14:54,420
0,300 300,540 540,960
area {clusters -}].|
|

473
00:14:54,480 --> 00:14:56,250
0,900 900,990 990,1140 1140,1410 1410,1770
Now you know just like
现在你知道，它在研究领域和发展领域一样蓬勃发展。

474
00:14:56,370 --> 00:15:00,180
0,720 720,1500 1500,2370 2550,3390 3390,3810
completely booming {} research field

475
00:15:00,180 --> 00:15:01,720
0,240 240,660 660,990
and development field.|
|

476
00:15:04,000 --> 00:15:04,930
0,210 210,540 540,600 600,810 810,930
Any questions a little bit
关于分布式系统的历史背景，有什么问题吗？

477
00:15:04,930 --> 00:15:06,820
0,300 300,360 360,810 810,1440 1470,1890
about the historical context for

478
00:15:06,820 --> 00:15:08,480
0,420 420,1110
distributed systems?|
|

479
00:15:11,860 --> 00:15:13,140
0,300

480
00:15:15,660 --> 00:15:16,590
0,390 390,570 570,690 690,870 870,930
Okay, let me talk a
好的，让我来谈谈这些挑战，

481
00:15:16,590 --> 00:15:18,570
0,180 180,330 330,600 600,1170 1200,1980
little bit about the challenges,|
|

482
00:15:19,180 --> 00:15:21,040
0,930 960,1320 1320,1410 1410,1710 1710,1860
and many of them you're
你会在实验里看到它们。

483
00:15:21,040 --> 00:15:23,740
0,600 990,1440 1470,1920 1920,2220 2220,2700
gonna {} face head on

484
00:15:23,740 --> 00:15:25,500
0,630 630,720 720,1290
in the labs.|
|

485
00:15:26,340 --> 00:15:27,400
0,510
So,
那么，为什么这么难，

486
00:15:27,450 --> 00:15:29,310
0,330 330,540 540,630 630,960 1020,1860
so why is it hard,|
|

487
00:15:31,290 --> 00:15:34,020
0,330 1080,1920 1920,1980 1980,2280 2310,2730
and worth you know basically
值得花费一个学期来学习。

488
00:15:34,020 --> 00:15:36,270
0,390 390,450 450,1080 1110,1890 1890,2250
spending a semester learning about

489
00:15:36,270 --> 00:15:38,910
0,120 120,210 210,660 660,1230 1860,2640
you know distributed systems. {}|
|

490
00:15:39,150 --> 00:15:40,680
0,570 570,720 720,780 780,1170 1170,1530
There's sort of two things
有两件事导致分布式系统很难，

491
00:15:40,680 --> 00:15:41,790
0,120 120,810 810,900 900,1020 1020,1110
that drive you know the

492
00:15:41,790 --> 00:15:43,650
0,660 660,810 810,1200 1200,1530 1530,1860
complexity and why distributed systems

493
00:15:43,650 --> 00:15:45,270
0,90 90,480 480,1020 1020,1500 1500,1620
are hard,| one is there
|一是有很多并发的部分。

494
00:15:45,270 --> 00:15:46,900
0,30 30,660
are many

495
00:15:46,900 --> 00:15:48,940
0,420 420,900 900,1470
{} concurrent part.|
|

496
00:15:54,180 --> 00:15:55,800
0,180 180,390 390,1110 1110,1320 1320,1620
These data warehouses,| {you,know} today
那些数据仓库，|今天的计算机会并行运行数十万台计算机，

497
00:15:55,800 --> 00:15:56,850
0,90 90,450 450,540 540,780 780,1050
the computer is gonna run

498
00:15:56,850 --> 00:15:57,960
0,90 90,240 240,480 480,810 810,1110
{you,know -} ten thousand, hundred

499
00:15:57,960 --> 00:16:00,600
0,390 660,1110 1110,1440 1470,2130 2130,2640
thousand computers in parallel,| sometimes
|有时候都在同样的工作上，

500
00:16:00,600 --> 00:16:01,320
0,210 210,330 330,420 420,510 510,720
know all on the same

501
00:16:01,320 --> 00:16:03,000
0,390 570,750 750,1200 1200,1380 1380,1680
job,| we've seen that mapreduce
|我们今天看了 mapreduce 论文，

502
00:16:03,000 --> 00:16:04,080
0,210 210,510 510,720 720,930 930,1080
paper today,| which is like
|是从 90 年代初开始的，

503
00:16:04,080 --> 00:16:05,400
0,150 150,240 240,420 420,930 1170,1320
from the early 90s,| you
|2000 台机器处理同一个问题，

504
00:16:05,400 --> 00:16:07,050
0,120 120,1080 1080,1200 1200,1530 1530,1650
know {2000,machines} {trying -} to

505
00:16:07,050 --> 00:16:08,730
0,240 240,360 360,600 600,1260 1260,1680
work on one single problem,|
|

506
00:16:09,330 --> 00:16:10,950
0,690 750,1110 1110,1410 1410,1470 1470,1620
{} so there's a lot
所以有很多并发，

507
00:16:10,950 --> 00:16:12,040
0,120 120,570
of concurrent,|
|

508
00:16:12,040 --> 00:16:12,580
0,90 90,240 240,360 360,480 480,540
you know a lot of
很多并发软件，

509
00:16:12,580 --> 00:16:13,540
0,300 300,690 690,780 780,900 900,960
concurrent software,| a lot of
|很多事情同时发生，

510
00:16:13,540 --> 00:16:15,100
0,180 180,540 540,1050 1050,1170 1170,1560
things happening concurrently,| it's very
|很难推论出，

511
00:16:15,100 --> 00:16:16,300
0,330 330,420 420,720 720,900 900,1200
hard to reason that through,|
|

512
00:16:16,300 --> 00:16:18,850
0,540 540,1110 1110,1350 1350,1950 2190,2550
like what {} and {}
理解为什么事情是正确的。

513
00:16:18,850 --> 00:16:20,740
0,660 660,1140 1140,1650 1650,1770 1770,1890
and understand why you know

514
00:16:20,740 --> 00:16:21,940
0,180 180,240 240,720
things are correct.|
|

515
00:16:22,380 --> 00:16:24,570
0,270 270,390 390,510 510,1410 1470,2190
And this is compounded by
更难的是，

516
00:16:24,600 --> 00:16:25,680
0,90 90,420 420,750 750,960 960,1080
the fact,| that {distributed -}
|分布式系统必须处理部分故障，

517
00:16:25,680 --> 00:16:28,360
0,780 960,1470 1470,2070
systems must deal

518
00:16:29,140 --> 00:16:30,880
0,240 240,600 600,1200
with partial failure,|
|

519
00:16:38,860 --> 00:16:40,360
0,570 570,1050 1080,1170 1170,1260 1260,1500
so, {} you know one
这些机器中的一台可能真的会宕机，

520
00:16:40,360 --> 00:16:41,500
0,90 90,360 360,750 750,960 960,1140
of these machines actually might

521
00:16:41,500 --> 00:16:42,970
0,120 120,630 720,1200 1230,1350 1350,1470
go down,| {} but that
|但这并不意味着整个[比赛]停止，

522
00:16:42,970 --> 00:16:43,720
0,210 210,420 420,510 510,570 570,750
doesn't mean that the whole

523
00:16:43,720 --> 00:16:45,160
0,510 510,930 930,1080 1080,1380 1380,1440
[competition] stops,| in fact you
|其他的机器可能会继续运行，

524
00:16:45,160 --> 00:16:45,970
0,390 390,450 450,660 660,750 750,810
know the rest of the

525
00:16:45,970 --> 00:16:47,890
0,300 300,780 780,1230 1230,1380 1380,1920
machines probably, hopefully can continue

526
00:16:47,890 --> 00:16:49,120
0,270 270,390 390,690 690,780 780,1230
running,| and maybe you know
|可能接管发生故障的机器的一些负载。

527
00:16:49,150 --> 00:16:50,050
0,240 240,570 570,750 750,840 840,900
take over some of the

528
00:16:50,050 --> 00:16:51,310
0,720 720,810 810,870 870,1140 1140,1260
responsibility of the machine that

529
00:16:51,310 --> 00:16:52,200
0,450
failed.|
|

530
00:16:52,600 --> 00:16:54,250
0,480 510,660 660,900 900,1560 1560,1650
{} But this drives you
这两件事一起导致了复杂性，

531
00:16:54,250 --> 00:16:55,780
0,180 180,510 510,690 690,930 930,1530
know these two things together,

532
00:16:55,810 --> 00:16:58,180
0,780 780,1170 1170,1830
basically drive complexity,|
|

533
00:16:58,210 --> 00:16:59,470
0,240 240,540 540,900 900,990 990,1260
it becomes harder and harder
这让理解系统是否正常工作变得越来越困难，

534
00:16:59,470 --> 00:17:01,360
0,120 120,660 690,1080 1080,1680 1680,1890
to reason about why you

535
00:17:01,360 --> 00:17:02,260
0,90 90,180 180,510 510,810 810,900
know the system actually is

536
00:17:02,260 --> 00:17:03,260
0,420
working,|
|

537
00:17:03,570 --> 00:17:05,040
0,420 420,540 540,900 900,1140 1140,1470
{} and particularly partial failure
尤其是部分故障让事情变得非常复杂，

538
00:17:05,040 --> 00:17:07,140
0,210 210,450 450,720 720,1410 1620,2100
makes things very complicated,| because
|因为系统的一个部分可能认为系统的另一个部分出现故障，

539
00:17:07,140 --> 00:17:08,190
0,210 210,600 600,810 810,960 960,1050
one system, one part of

540
00:17:08,190 --> 00:17:09,180
0,60 60,360 360,540 540,840 840,990
the system might think that

541
00:17:09,180 --> 00:17:10,140
0,270 270,450 450,510 510,600 600,960
another part of the system

542
00:17:10,140 --> 00:17:11,730
0,120 120,630 720,1320 1320,1410 1410,1590
is down,| but it's not
|但事实并非如此，

543
00:17:11,730 --> 00:17:12,690
0,180 180,240 240,660 660,840 840,960
really the case,| {you,know} the
|有一种可能发生的事情是，

544
00:17:12,690 --> 00:17:13,560
0,240 240,360 360,480 480,630 630,870
only thing that might actually

545
00:17:13,560 --> 00:17:14,370
0,300 300,420 420,570 570,750 750,810
happen is that,| there's a
|有一个网络分区，

546
00:17:14,370 --> 00:17:16,770
0,330 330,780 1110,1920 1920,2100 2100,2400
network partition,| and so both
|所以分布式系统的两边继续计算，

547
00:17:16,770 --> 00:17:18,090
0,300 300,360 360,480 480,840 840,1320
sides of the distributed system

548
00:17:18,090 --> 00:17:20,310
0,90 90,840 1080,1500 1500,1590 1590,2220
{you,know} basically keep on computing,|
|

549
00:17:20,520 --> 00:17:22,050
0,360 360,540 540,810 810,1290 1290,1530
{} and maybe interact with
可能与客户端交互，

550
00:17:22,050 --> 00:17:24,480
0,210 210,840 840,1770 1830,2160 2160,2430
{you,know} clients,| {} maybe even
|甚至可能与同一组客户端交互，

551
00:17:24,480 --> 00:17:25,320
0,300 300,390 390,450 450,690 690,840
interact with the same set

552
00:17:25,320 --> 00:17:26,250
0,60 60,390 390,600 600,660 660,930
of clients,| because the clients
|因为客户端可以访问两个部分，

553
00:17:26,250 --> 00:17:27,540
0,90 90,330 330,540 540,900 900,1290
can talk to both parts,|
|

554
00:17:27,540 --> 00:17:28,410
0,420 420,510 510,660 660,810 810,870
{but,you,know} the two in a
但是两部分之间不能互相访问，

555
00:17:28,410 --> 00:17:29,550
0,390 390,720 720,900 900,990 990,1140
half cannot talk to each

556
00:17:29,550 --> 00:17:31,590
0,300 900,1080 1080,1170 1170,1710 1710,2040
other,| and so this, this
|这就是所谓的脑裂，

557
00:17:31,590 --> 00:17:32,730
0,120 120,360 390,750 750,990 990,1140
is a problem known as

558
00:17:32,730 --> 00:17:34,980
0,120 120,510 510,870 870,1470 1560,2250
the {split-brain -} syndrome,| and
|这让设计分布式系统协议变得很复杂，

559
00:17:35,040 --> 00:17:37,440
0,720 720,1110 1110,1200 1200,1440 1650,2400
that makes you know designing

560
00:17:37,440 --> 00:17:38,970
0,150 150,510 510,990 990,1110 1110,1530
{distributed -} systems and protocols

561
00:17:38,970 --> 00:17:40,560
0,90 90,150 150,870 870,990 990,1590
{distributed -} systems are complicated,|
|

562
00:17:40,560 --> 00:17:41,460
0,150 150,270 270,600
as we'll see.|
正如我们将看到的。|

563
00:17:42,160 --> 00:17:43,210
0,390 420,570 570,840 840,990 990,1050
So it's really sort of
所以这是某种深层次的智力问题，

564
00:17:43,210 --> 00:17:46,000
0,840 840,1260 1260,1590 1590,1830 2310,2790
deep intellectual problems here,| then
|然后我发现各种挑战的方面，

565
00:17:46,000 --> 00:17:46,720
0,120 120,210 210,360 360,540 540,720
{} I {find -} sort

566
00:17:46,720 --> 00:17:48,280
0,90 90,360 360,840 840,1290 1290,1560
of really aspect in terms

567
00:17:48,280 --> 00:17:50,170
0,90 90,780 810,960 960,1170 1170,1890
of challenges,| it's actually tricky
|要实现性能优势是很困难的，

568
00:17:50,760 --> 00:17:54,750
0,780 840,1980 2790,2910 2910,3360 3360,3990
to realize the performance benefits,|
|

569
00:17:54,750 --> 00:17:56,370
0,300 300,390 390,870 870,960 960,1620
that in principle are possible
理论上在分布式系统中可能实现的。

570
00:17:58,780 --> 00:18:01,000
0,450 450,840 840,1410
with distributed systems.|
|

571
00:18:05,560 --> 00:18:07,090
0,330 330,660 660,1050 1050,1140 1140,1530
So far,| we've been talking
到目前为止，|我们一直在谈论你想要增加容量，

572
00:18:07,090 --> 00:18:08,020
0,420 420,510 510,630 630,690 690,930
like you want to increase

573
00:18:08,020 --> 00:18:08,980
0,60 60,660 660,750 750,810 810,960
the capacity| or you want
|或者你想要并行运行，

574
00:18:08,980 --> 00:18:10,120
0,60 60,180 180,570 570,690 690,1140
to run things in parallel,|
|

575
00:18:10,120 --> 00:18:11,500
0,90 90,300 300,480 480,1020 1050,1380
you buy more machines| or
你购买更多的机器，|或者购买另一个数据中心，

576
00:18:11,500 --> 00:18:12,760
0,210 210,420 420,660 660,870 870,1260
{you,know} buy another data center,|
|

577
00:18:12,970 --> 00:18:15,400
0,810 810,1230 1230,1350 1350,1710 1710,2430
{} and you know of
当然，只有任务完全并行，

578
00:18:15,400 --> 00:18:16,720
0,240 240,690 690,870 870,930 930,1320
course only when the task

579
00:18:16,720 --> 00:18:18,940
0,90 90,540 540,1080 1080,1710 1800,2220
is complete {[],in} parallel, {}|
|

580
00:18:18,940 --> 00:18:20,620
0,150 150,360 360,720 750,1260 1260,1680
does that work,| and often
这种方式可行吗，|通常在实践中，事实并非如此，

581
00:18:20,620 --> 00:18:21,850
0,300 300,750 750,900 900,1050 1050,1230
in practice, {} this is

582
00:18:21,850 --> 00:18:22,600
0,180 180,240 240,510 510,630 630,750
not the case,| and so
|所以实现这样的高吞吐量，

583
00:18:22,600 --> 00:18:23,950
0,300 300,870 870,1050 1050,1200 1200,1350
actually achieving that sort of

584
00:18:24,370 --> 00:18:27,220
0,330 330,780 1080,1680 1710,2460 2460,2850
{} high throughput,| and throughput
|吞吐量随机器数量的增加而增加，

585
00:18:27,220 --> 00:18:28,180
0,480 480,600 600,690 690,900 900,960
scaling with the number of

586
00:18:28,180 --> 00:18:29,770
0,600 660,1140 1140,1230 1230,1290 1290,1590
machines,| turns out to be
|这并不是直截了当的。

587
00:18:29,770 --> 00:18:31,570
0,330 360,750 750,1440 1440,1560 1560,1800
{} not straightforward at all.|
|

588
00:18:34,840 --> 00:18:36,070
0,240 240,330 330,600 600,750 750,1230
Sort of brings me to
让我转到下一个话题，

589
00:18:36,070 --> 00:18:38,110
0,360 360,870 870,1140 1140,1470 1470,2040
here {} next topic,| why
|为什么你要选择 6.824 。

590
00:18:38,110 --> 00:18:39,670
0,270 270,750 1050,1350 1350,1470 1470,1560
you takes {6.824 - -

591
00:18:39,670 --> 00:18:41,590
0,540 570,810 810,1170 1410,1680 1680,1920
-} { - - -}|
|

592
00:18:49,340 --> 00:18:51,230
0,750 1110,1530 1530,1650 1650,1710 1710,1890
You know, so I think
我认为有四个原因，

593
00:18:51,230 --> 00:18:53,390
0,240 240,570 570,1170 1230,1950 1950,2160
for four reasons,| one it's
|一是很有趣，

594
00:18:53,390 --> 00:18:54,700
0,600
interesting,|
|

595
00:18:58,410 --> 00:19:00,300
0,300 300,540 540,840 840,1290 1320,1890
{} it's like hard technical
它是困难的技术问题，

596
00:19:00,300 --> 00:19:01,950
0,630 630,870 870,990 990,1260 1260,1650
problems,| and with very powerful
|有非常强大的解决方案，

597
00:19:01,950 --> 00:19:03,140
0,660
solutions,|
|

598
00:19:03,760 --> 00:19:05,560
0,210 210,540 540,1320
so hard problems,
问题很困难，但是解决方案很强大，

599
00:19:09,600 --> 00:19:11,480
0,240 240,600 600,1200
but powerful solutions,|
|

600
00:19:11,660 --> 00:19:13,370
0,240 240,630 630,810 810,1140 1140,1710
we'll see {you,know} those solutions
我们会在整个学期看到这些解决方案。

601
00:19:13,370 --> 00:19:17,040
0,150 150,270 270,540 540,990
you know {for,the} term.|
|

602
00:19:20,220 --> 00:19:21,660
0,330 330,570 570,810 810,1170 1170,1440
Second reason is {you,know} used
第二个原因是，在现实世界中使用，

603
00:19:21,660 --> 00:19:23,600
0,60 60,120 120,330 330,810
in the real world,|
|

604
00:19:28,450 --> 00:19:29,470
0,210 210,390 390,510 510,840 840,1020
and there's a normal amount
人们很希望，

605
00:19:29,470 --> 00:19:30,670
0,60 60,780 780,870 870,1080 1080,1200
of appetite for people,| that
|理解并能构建分布式系统。

606
00:19:30,670 --> 00:19:32,230
0,510 510,1080 1080,1230 1230,1320 1320,1560
actually understand and can build

607
00:19:32,230 --> 00:19:33,840
0,390 390,990
distributed systems.|
|

608
00:19:33,840 --> 00:19:34,350
0,120 120,270 270,390 390,480 480,510
{} If you were a
如果你是研究生或者考虑研究的本科生，

609
00:19:34,350 --> 00:19:36,000
0,270 270,630 630,870 870,1380 1380,1650
grad student or undergrad thinking

610
00:19:36,000 --> 00:19:37,380
0,210 210,780 810,1080 1080,1140 1140,1380
about research,| it's a great
|这是个很棒的领域，

611
00:19:37,380 --> 00:19:38,520
0,390 420,690 690,810 810,870 870,1140
area,| because it's a very
|因为这是一个非常活跃的研究领域，

612
00:19:38,520 --> 00:19:41,500
0,330 330,600 600,660 660,1230
active area of research,|
|

613
00:19:43,520 --> 00:19:44,450
0,90 90,210 210,450 450,690 690,930
there are still many open
还有许多悬而未决的问题，

614
00:19:44,450 --> 00:19:47,450
0,810 1950,2400 2610,2730 2730,2880 2880,3000
problems,| and as we go
|我们会在这学期遇到它们，

615
00:19:47,450 --> 00:19:49,730
0,150 150,210 210,720 720,1620 2070,2280
through the semester, {} will

616
00:19:49,730 --> 00:19:51,500
0,360 360,630 840,1320 1320,1470 1470,1770
encounter them,| so it's a
|所以这是一个很好的研究领域。

617
00:19:51,500 --> 00:19:53,390
0,360 360,720 720,1110 1110,1530 1680,1890
good area for research.| And
|最后，如果你喜欢构建东西，

618
00:19:53,390 --> 00:19:54,590
0,420 420,630 630,750 750,900 900,1200
finally, if you like building

619
00:19:54,590 --> 00:19:55,820
0,480 540,930 930,1050 1050,1170 1170,1230
things,| {} it's sort of
|这是一种独特的编程风格，

620
00:19:55,820 --> 00:19:57,710
0,90 90,390 390,870 870,1170 1200,1890
a unique style of programming,|
|

621
00:19:57,710 --> 00:19:59,900
0,450 450,900 990,1560 1560,1950 1950,2190
and so, {} in the
所以，在 6.824 的情况下，

622
00:19:59,930 --> 00:20:00,770
0,270 270,330 330,420 420,540 540,840
case of {6.824 - -},|
|

623
00:20:00,770 --> 00:20:01,610
0,90 90,210 210,390 390,690 690,840
you're gonna get hands on
你会获得实际经验，

624
00:20:01,610 --> 00:20:04,250
0,390 390,510 510,900 1110,1860 1860,2640
experience with that,| by building
|通过构建实验室中的分布式系统，

625
00:20:04,660 --> 00:20:06,460
0,720 870,1050 1050,1140 1140,1620 1620,1800
{} you know distributed app

626
00:20:06,460 --> 00:20:07,690
0,270 270,660 660,1050 1050,1140 1140,1230
and distributed systems in the

627
00:20:07,690 --> 00:20:10,000
0,540 540,1050 1050,1410 1410,1800 1800,2310
labs,| and you'll discover it
|你会发现它是，

628
00:20:10,000 --> 00:20:12,220
0,120 120,420 720,1440 1860,2100 2100,2220
will be,| {} one it's
|一是很难把它们弄对，

629
00:20:12,220 --> 00:20:14,350
0,420 480,1380 1410,1650 1650,1770 1770,2130
hard to get them right,|
|

630
00:20:14,620 --> 00:20:16,330
0,570 570,690 690,780 780,930 1170,1710
and you know it builds
它建立了另一种编程技巧类型，

631
00:20:16,330 --> 00:20:17,740
0,180 180,510 510,1110 1110,1350 1350,1410
up another skill, type of

632
00:20:17,740 --> 00:20:18,820
0,270 270,360 360,870 870,1020 1020,1080
skill of programming,| that you
|那些在过去可能做不到的事情。

633
00:20:18,820 --> 00:20:19,720
0,210 210,480 480,570 570,810 810,900
might not have done in

634
00:20:19,720 --> 00:20:20,720
0,90 90,630
the past.|
|

635
00:20:23,580 --> 00:20:24,210
0,180 180,300 300,510 510,570 570,630
Let me pause for a
让我在这里暂停一下，看看有没有什么问题，

636
00:20:24,210 --> 00:20:24,900
0,270 270,390 390,510 510,600 600,690
second here and see if

637
00:20:24,900 --> 00:20:26,400
0,120 120,150 150,300 300,960
there are any questions,|
|

638
00:20:27,020 --> 00:20:28,580
0,570 570,870 870,1080 1080,1440 1440,1560
{} also feel free to
也可以在聊天中发言，

639
00:20:28,580 --> 00:20:29,990
0,270 270,330 330,450 450,990 1230,1410
post in the chat,| I'll
|我会看聊天，

640
00:20:29,990 --> 00:20:31,010
0,150 150,240 240,660 660,930 930,1020
try to monitor chat,| if
|如果有什么问题，

641
00:20:31,010 --> 00:20:32,390
0,120 120,150 150,540 540,930 930,1380
there are questions there,| or
|或者有人举手，

642
00:20:32,390 --> 00:20:33,650
0,120 120,390 390,540 540,1110 1110,1260
you raise your hands,| if
|如果你有任何问题，

643
00:20:33,650 --> 00:20:35,360
0,60 60,210 210,360 360,1140
you have any questions,|
|

644
00:20:35,390 --> 00:20:36,830
0,480 480,1020 1050,1200 1200,1380 1380,1440
{} and I'm sure the
我相信助教们也会注意聊天中的举手，

645
00:20:36,830 --> 00:20:38,210
0,330 330,450 450,720 720,1080 1110,1380
TAs will also be paying

646
00:20:38,210 --> 00:20:39,830
0,420 420,660 660,1020 1020,1290 1290,1620
attention to the raising hands

647
00:20:39,830 --> 00:20:41,360
0,240 240,720 750,1050 1050,1410 1410,1530
at the chat,| so in
|如果我错过了什么，

648
00:20:41,360 --> 00:20:42,440
0,270 270,330 330,540 540,990 990,1080
case I miss something,| you
|他们会提醒我。

649
00:20:42,440 --> 00:20:44,600
0,480 780,1050 1050,1380 1380,1590
know they'll remind me.|
|

650
00:20:45,500 --> 00:20:47,270
0,180 180,510 510,630 630,1410 1500,1770
Any questions so far, everything
到目前为止，任何问题清楚吗？

651
00:20:47,270 --> 00:20:48,700
0,90 90,390 390,870
is crystal clear?|
|

652
00:20:48,790 --> 00:20:50,100
0,630

653
00:20:51,360 --> 00:20:52,920
0,60

654
00:20:55,390 --> 00:20:57,490
0,360 360,1020 1080,1230 1230,1800 1800,2100
Oh, interpret the silence is
我理解安静就是清楚了。

655
00:20:57,490 --> 00:21:00,860
0,330 330,420 420,810 810,1320
things are crystal clear.|
|

656
00:21:01,190 --> 00:21:02,000
0,150 150,300 300,630 630,780 780,810
So let me talk a
所以让我简单谈谈课程结构，

657
00:21:02,000 --> 00:21:02,780
0,180 180,300 300,480 480,540 540,780
little bit about the course

658
00:21:02,780 --> 00:21:03,980
0,630
structure,|
|

659
00:21:04,920 --> 00:21:06,270
0,420 420,600 600,1020 1020,1080 1080,1350
after this sort of quick
在对分布式系统进行了这种快速介绍之后。

660
00:21:06,270 --> 00:21:09,180
0,780 810,1140 1140,1620 1620,2280
introduction to distributed systems.|
|

661
00:21:12,660 --> 00:21:14,020
0,630

662
00:21:14,460 --> 00:21:15,540
0,240 240,330 330,510 510,900 900,1080
So the course structure is
所以课程结构是这样的，

663
00:21:15,540 --> 00:21:17,190
0,210 210,570 750,1020 1020,1140 1140,1650
as follows,| we have lectures
|我们有像今天这样的讲座，

664
00:21:18,340 --> 00:21:20,530
0,300 300,360 360,540 540,1050 1290,2190
like the one today,| basically
|基本上集中在大创意上。

665
00:21:20,530 --> 00:21:22,340
0,360 360,480 480,660 660,1290
focuses on big ideas.|
|

666
00:21:24,660 --> 00:21:25,890
0,300 300,540 540,840 840,900 900,1230
{} The lectures are typically
讲座通常是由一份我们都签署的文件推动的。

667
00:21:25,890 --> 00:21:27,450
0,270 270,750 750,870 870,1380 1380,1560
driven by a paper that

668
00:21:27,450 --> 00:21:29,100
0,150 150,270 270,870
we all sign.|
|

669
00:21:29,360 --> 00:21:31,310
0,330 330,480 480,810 810,1170 1170,1950
And these papers are {}
这些论文通常是案例研究，

670
00:21:31,670 --> 00:21:33,290
0,540 540,660 660,960 960,1320 1410,1620
often a case study,| a
|这是我们在课上讲到的一个特别重要的想法。

671
00:21:33,290 --> 00:21:34,520
0,480 480,660 660,960 960,1110 1110,1230
particular big idea that we're

672
00:21:34,520 --> 00:21:37,160
0,690 690,1230 1260,1710
covering in lecture.|
|

673
00:21:39,130 --> 00:21:41,230
0,630 630,870 870,1470 1500,1740 1740,2100
{} Can we, {} the
我们可以吗，论文都发表或张贴在日程表页面上了吗？

674
00:21:41,260 --> 00:21:42,820
0,360 360,480 480,600 600,1140 1140,1560
papers are all published or

675
00:21:42,820 --> 00:21:44,890
0,390 390,660 660,1230 1260,1680 1680,2070
posted on the schedule page|
|

676
00:21:44,890 --> 00:21:47,710
0,1050 1560,1740 1740,2010 2010,2490 2490,2820
and for most papers, we
对于大多数试卷，我们要求你回答一个问题，同时也要问一个问题

677
00:21:47,710 --> 00:21:48,940
0,330 330,510 510,810 810,1170 1170,1230
ask you to answer a

678
00:21:48,940 --> 00:21:50,410
0,570 720,900 900,1110 1110,1200 1200,1470
question as well as ask

679
00:21:50,410 --> 00:21:52,480
0,60 60,540 660,1110 1440,1830 1830,2070
a question| and we'll try
|我们会试着在讲座中涵盖这些问题或答案

680
00:21:52,480 --> 00:21:54,070
0,510 510,810 810,990 990,1410 1410,1590
to cover those questions or

681
00:21:54,070 --> 00:21:56,350
0,360 360,1260 1260,1470 1500,1980 2070,2280
answer during a lecture| and
|所以重要的是，你们知道我们这么做的部分原因是，

682
00:21:56,350 --> 00:21:57,820
0,330 420,570 570,1140 1140,1260 1260,1470
so it's important you know

683
00:21:57,940 --> 00:21:58,600
0,210 210,270 270,330 330,570 570,660
part of the reason we

684
00:21:58,600 --> 00:21:59,410
0,120 120,360 360,480 480,690 690,810
do that is,| because we'd
|因为我们想让你在讲座前看一下报纸，

685
00:21:59,410 --> 00:22:00,400
0,180 180,360 360,720 720,930 930,990
like you to read the

686
00:22:00,400 --> 00:22:02,080
0,420 420,570 570,930 930,1560 1590,1680
paper in advance of the

687
00:22:02,080 --> 00:22:03,490
0,540 780,1080 1080,1200 1200,1290 1290,1410
lecture,| so that we can
|这样我们就可以更深入地了解这些文件。

688
00:22:03,490 --> 00:22:04,570
0,240 240,270 270,450 450,600 600,1080
go a little bit deeper

689
00:22:05,290 --> 00:22:06,780
0,450 450,960
{into,these} papers.|
|

690
00:22:06,900 --> 00:22:08,700
0,300 300,720 720,1350 1380,1410 1410,1800
{} So, {} I strongly
所以，我强烈建议你在上课前阅读它们。

691
00:22:08,700 --> 00:22:10,680
0,300 300,450 450,720 720,1710 1770,1980
encourage you to {} read

692
00:22:10,680 --> 00:22:12,260
0,300 300,600 600,1110
them before class.|
|

693
00:22:13,580 --> 00:22:15,800
0,540 900,1380 1380,1620 1620,1860 1860,2220
{} Yeah, so another component
是的，所以课程的另一个组成部分，实验室，

694
00:22:15,800 --> 00:22:17,720
0,90 90,180 180,900 930,1230 1230,1920
of the classes, the labs,|
|

695
00:22:18,470 --> 00:22:20,990
0,210 210,630 630,1110 1140,1830 1980,2520
the programming labs, {} there
编程实验室，一共有四个，

696
00:22:20,990 --> 00:22:22,780
0,540 570,840 840,900 900,1290
are four of them,|
|

697
00:22:23,260 --> 00:22:24,730
0,420 420,570 570,900 900,1020 1020,1470
{} they're split in parts,|
它们被分成了几部分，|

698
00:22:24,730 --> 00:22:26,620
0,570 570,750 750,1260 1260,1470 1470,1890
but four {} four major
而是四个、四个主要的。

699
00:22:26,620 --> 00:22:27,610
0,300 300,570 570,690 690,780 780,990
ones.| One is the {mapreduce
|一个是MapReduce实验室，

700
00:22:27,610 --> 00:22:29,380
0,330 330,900 1200,1380 1380,1560 1560,1770
-} lab,| that we just
|我们今天刚寄出，下周五就该交了，

701
00:22:29,380 --> 00:22:30,850
0,330 330,870 870,1110 1110,1290 1290,1470
posted today and it's due

702
00:22:30,850 --> 00:22:32,280
0,240 240,870
next Friday,|
|

703
00:22:32,280 --> 00:22:34,080
0,600 690,1080 1080,1200 1200,1470 1470,1800
{} where you build basically
在这里，您基本上可以构建自己的MapReduce MapReduce库，

704
00:22:34,080 --> 00:22:35,310
0,180 180,330 330,540 540,870 900,1230
your own {mapreduce -} {mapreduce

705
00:22:35,310 --> 00:22:36,720
0,270 270,840
-} library,|
|

706
00:22:36,950 --> 00:22:38,840
0,540 540,1080 1320,1740 1740,1830 1830,1890
{} as similar to the
与论文中实际描述的相似。

707
00:22:38,840 --> 00:22:39,860
0,240 240,360 360,570 570,960 960,1020
one that actually described in

708
00:22:39,860 --> 00:22:42,320
0,60 60,600 1080,1680 1710,2040 2040,2460
the paper.| {} Second lab
|第二个实验是侧重于复制的实验

709
00:22:42,320 --> 00:22:44,960
0,780 810,1500 1530,2100 2100,2520 2520,2640
is a lab focuses on

710
00:22:44,960 --> 00:22:47,540
0,840 870,1650 1920,2190 2190,2490 2490,2580
replication| in the presence of
|在存在故障和分区网络的情况下，

711
00:22:47,540 --> 00:22:50,210
0,720 720,1500 1530,1770 1770,2100 2100,2670
failures and {} partitioned networks,|
|

712
00:22:50,510 --> 00:22:53,330
0,480 480,780 780,840 840,1530 1560,2820
we're going to implement replication,|
我们将实施复制，|

713
00:22:54,100 --> 00:22:56,200
0,420 420,510 510,1350 1380,1740 1740,2100
using a protocol that's called
使用一种叫做筏板的协议。

714
00:22:56,230 --> 00:22:57,600
0,780
raft.|
|

715
00:23:02,040 --> 00:23:03,420
0,150 150,270 270,390 390,900 900,1380
And this is a {lab,that}
这是一个由多个部件组成的实验室，

716
00:23:03,420 --> 00:23:04,770
0,270 270,360 360,750 750,1200 1200,1350
consists of multiple components,| but
|但到了最后，

717
00:23:04,770 --> 00:23:05,460
0,90 90,180 180,300 300,420 420,690
at the end of it,|
|

718
00:23:05,460 --> 00:23:06,210
0,90 90,240 240,390 390,660 660,750
you know you have the
你知道你有一个图书馆可以用来

719
00:23:06,210 --> 00:23:07,770
0,600 600,900 900,1020 1020,1200 1200,1560
library that you can use

720
00:23:07,770 --> 00:23:09,180
0,180 180,570 570,960 960,1080 1080,1410
to| what's called you know
|这就是你所知道的，因为你过去常常构建复制的状态机，

721
00:23:09,300 --> 00:23:11,040
0,180 180,450 630,1320 1320,1410 1410,1740
as you used to build

722
00:23:11,040 --> 00:23:13,740
0,420 420,630 630,1110 1110,1650 2130,2700
replicated state machines,| namely {}
|即复制状态机或多台机器，

723
00:23:14,380 --> 00:23:17,470
0,870 870,1620 1980,2310 2310,2910 2910,3090
replicating {} state machine or

724
00:23:17,470 --> 00:23:18,820
0,450 450,870 870,1020 1020,1200 1200,1350
multiple machines,| so that if
|所以如果其中一个倒下了，

725
00:23:18,820 --> 00:23:19,870
0,300 300,390 390,600 600,810 810,1050
one of them goes down,|
|

726
00:23:19,870 --> 00:23:20,740
0,150 150,210 210,360 360,660 660,870
one of those machines goes
其中一台机器坏了，

727
00:23:20,740 --> 00:23:23,020
0,330 330,960 990,1260 1590,2040 2040,2280
down,| then the service actually
|那么服务实际上会继续运行。

728
00:23:23,020 --> 00:23:24,120
0,240 240,540
keeps running.|
|

729
00:23:24,440 --> 00:23:25,580
0,450 480,630 630,780 780,1020 1020,1140
And you're gonna use that
您将使用该库实际构建复制服务

730
00:23:25,580 --> 00:23:26,840
0,360 360,480 480,720 720,1110 1140,1260
library to actually build a

731
00:23:26,840 --> 00:23:28,730
0,480 480,750 990,1170 1170,1710 1710,1890
{replicated -} {} service| and
|事实上，您将能够复制关键价值服务。

732
00:23:28,730 --> 00:23:29,270
0,60 60,270 270,360 360,480 480,540
in fact you're going to

733
00:23:29,270 --> 00:23:30,290
0,90 90,210 210,360 360,780 780,1020
be able to {replicated -}

734
00:23:31,740 --> 00:23:33,440
0,150 150,570 570,750 750,1110
key values {service -}.|
|

735
00:23:38,480 --> 00:23:39,560
0,420

736
00:23:40,430 --> 00:23:42,230
0,210 210,420 420,990 990,1380 1530,1800
{} In lab three and
在实验3和实验3中，基本上将使用多台机器，

737
00:23:42,230 --> 00:23:42,800
0,150 150,330 330,390 390,510 510,570
lab three is going to

738
00:23:42,800 --> 00:23:45,290
0,300 300,510 510,840 840,1500 1680,2490
basically use multiple machines, {}|
|

739
00:23:45,290 --> 00:23:46,490
0,90 90,180 180,510 510,1020 1020,1200
you know fault tolerance for
您知道应用程序构建一个服务的容错能力。

740
00:23:46,490 --> 00:23:48,230
0,630 630,750 750,930 930,1140 1140,1740
applications to build one service.|
|

741
00:23:48,740 --> 00:23:50,090
0,300 300,840 840,930 930,1200 1200,1350
{} Unfortunately you know as
不幸的是，你也知道，这并没有看到更多

742
00:23:50,090 --> 00:23:51,170
0,330 330,450 450,780 780,990 990,1080
well, that doesn't see a

743
00:23:51,170 --> 00:23:52,490
0,150 150,510 510,720 720,1110 1110,1320
lot more| is that just
|仅仅复制并不能给您带来更高的性能，

744
00:23:52,490 --> 00:23:54,050
0,510 510,1080 1080,1230 1230,1320 1320,1560
replication doesn't give you more

745
00:23:54,050 --> 00:23:56,080
0,630 630,720 720,990 990,1560
performance,| you know because
|你知道，因为这些机器实际上必须执行特定的命令，

746
00:23:56,080 --> 00:23:57,400
0,420 420,570 570,810 810,1110 1110,1320
{ -} these machines actually

747
00:23:57,400 --> 00:23:58,870
0,180 180,240 240,630 630,750 750,1470
have to perform a particular

748
00:23:58,870 --> 00:24:01,570
0,540 930,1380 1380,1590 1590,2070 2160,2700
order,| {} and so, {}
|因此，为了真正获得性能，我们在第四实验室，

749
00:24:01,570 --> 00:24:03,460
0,270 270,540 540,750 750,1260 1260,1890
to actually get performance were

750
00:24:03,460 --> 00:24:05,950
0,180 180,390 390,900 1020,1380 1380,2490
in lab four,| you can
|您可以构建分片键值服务。

751
00:24:05,980 --> 00:24:07,240
0,120 120,240 240,330 330,1020 1050,1260
{build -} the shard key

752
00:24:07,240 --> 00:24:10,180
0,300 300,810
value services.|
|

753
00:24:13,380 --> 00:24:14,760
0,150 150,270 270,630 630,1080 1080,1380
And that basically consists of
这基本上由实验三的多个实例组成，用于并发运行

754
00:24:14,970 --> 00:24:17,400
0,540 540,1290 1320,1650 1650,1950 1950,2430
many instances of lab three

755
00:24:17,640 --> 00:24:20,370
0,450 450,930 960,1680 1740,2280 2280,2730
for running concurrently| {} and
|基本上负责一部分Key Value服务的分片

756
00:24:20,370 --> 00:24:21,720
0,360 360,750 750,1080 1080,1260 1260,1350
basically taking care of a

757
00:24:21,720 --> 00:24:23,220
0,510 540,810 810,870 870,1380 1380,1500
part of {} shard of

758
00:24:23,220 --> 00:24:24,870
0,90 90,270 270,690 690,1230 1470,1650
the key value service| and
|这样你就会得到并行性

759
00:24:24,870 --> 00:24:26,070
0,120 120,240 240,390 390,600 600,1200
so that you get parallelism|
|

760
00:24:26,130 --> 00:24:27,120
0,210 210,360 360,540 540,660 660,990
and so you can actually
因此，您实际上可以使用它来实际提高吞吐量。

761
00:24:27,120 --> 00:24:29,370
0,330 330,630 630,990 990,1380 1410,2250
use this to actually drive

762
00:24:29,610 --> 00:24:31,340
0,480
throughput.|
|

763
00:24:31,460 --> 00:24:33,050
0,420 420,720 720,1320 1320,1470 1470,1590
{} And furthermore, we're going
此外，我们将实际移动您知道的键或键值对

764
00:24:33,050 --> 00:24:34,460
0,60 60,240 240,840 930,1050 1050,1410
to actually move {you,know} keys

765
00:24:34,460 --> 00:24:35,750
0,120 120,300 300,630 630,1200 1200,1290
or key value pairs| from
|从一台机器到另一台机器，以响应负载变化。

766
00:24:35,750 --> 00:24:37,220
0,360 360,690 690,810 810,1050 1050,1470
one machine to another machine

767
00:24:37,220 --> 00:24:38,510
0,210 210,690 690,810 810,1110 1110,1290
in response to what load

768
00:24:38,510 --> 00:24:39,580
0,570
changes.|
|

769
00:24:39,800 --> 00:24:41,240
0,660

770
00:24:41,240 --> 00:24:42,440
0,120 120,210 210,540 540,780 780,1200
So the labs {basically -}
所以实验室基本上是二、三和四号实验室

771
00:24:42,470 --> 00:24:44,150
0,600 600,900 900,1080 1080,1200 1200,1680
labs two three and four|
|

772
00:24:44,150 --> 00:24:45,200
0,240 240,600 600,690 690,960 960,1050
{} built on top of
堆积在一起，

773
00:24:45,200 --> 00:24:46,850
0,120 120,510 750,1350 1350,1530 1530,1650
each other,| {} so you
|所以你在二号实验室有个窃听器，

774
00:24:46,850 --> 00:24:47,510
0,120 120,210 210,420 420,480 480,660
have a bug in lab

775
00:24:47,510 --> 00:24:48,710
0,390 390,570 570,780 780,1080 1080,1200
two,| that might affect you
|这可能会影响你在第四实验室的表现。

776
00:24:48,710 --> 00:24:50,320
0,300 300,390 390,630 630,1020
actually in lab four.|
|

777
00:24:50,380 --> 00:24:52,930
0,600 630,870 870,1500 1530,2100 2100,2550
{} We provide test cases
我们为他们所有人提供测试用例，

778
00:24:52,930 --> 00:24:53,890
0,300 300,420 420,510 510,780 780,960
for all of them,| so
|所以所有的测试案例都是公开的。

779
00:24:53,890 --> 00:24:54,760
0,150 150,240 240,450 450,720 720,870
all the test cases are

780
00:24:54,760 --> 00:24:55,820
0,540
public.|
|

781
00:25:03,040 --> 00:25:04,060
0,390 390,600 600,810 810,960 960,1020
And we regrade you in
我们在那些测试案例中给你降级，

782
00:25:04,060 --> 00:25:05,350
0,180 180,390 390,900 930,1110 1110,1290
those test cases,| so you
|所以你提交了你的解决方案，

783
00:25:05,350 --> 00:25:06,640
0,270 270,420 420,990 990,1110 1110,1290
submit your solution,| we run
|我们在我们的电脑上做同样的测试，

784
00:25:06,640 --> 00:25:07,420
0,90 90,300 300,540 540,630 630,780
the same test on our

785
00:25:07,420 --> 00:25:10,240
0,570 810,1440 1440,1770 1770,2280 2280,2820
computers,| double-check {you,know} you're passing
|再检查一遍，你知道你通过了考试

786
00:25:10,240 --> 00:25:12,460
0,270 330,870 1260,1830 1830,1950 1950,2220
the test| and if you
|如果你通过了所有的测试，你会得到满分。

787
00:25:12,460 --> 00:25:13,300
0,270 270,360 360,450 450,720 720,840
pass all the tests, you

788
00:25:13,300 --> 00:25:14,500
0,120 120,300 300,720
get full score.|
|

789
00:25:14,700 --> 00:25:16,920
0,630 630,690 1140,1740 1740,2130 2130,2220
{} It turns out you
原来你知道这些测试用例很棘手

790
00:25:16,920 --> 00:25:18,180
0,120 120,420 420,870 870,1020 1020,1260
know these are these test

791
00:25:18,180 --> 00:25:21,240
0,390 390,570 570,1110 1260,1980 2190,3060
cases are tricky| and {}
|我们会尝试在撞击上搜索你系统中的所有角落

792
00:25:21,600 --> 00:25:23,220
0,300 300,510 510,1110 1140,1470 1470,1620
we'll try to tackle all

793
00:25:23,220 --> 00:25:25,230
0,240 240,390 510,1200 1230,1470 1470,2010
kinds of corners in your

794
00:25:26,070 --> 00:25:28,230
0,900 1320,1680 1680,1860 1860,1950 1950,2160
systems| and so it turns
|因此，事实证明，它们实际上是合理的，很难通过

795
00:25:28,230 --> 00:25:29,400
0,90 90,210 210,330 330,600 600,1170
out they are actually reasonable

796
00:25:29,400 --> 00:25:31,260
0,570 570,660 660,1200 1200,1410 1410,1860
hard to pass| and so,
|因此，它们很难调试，

797
00:25:31,470 --> 00:25:32,910
0,630 630,930 930,1080 1080,1350 1350,1440
{} and they're tricky to

798
00:25:32,910 --> 00:25:34,800
0,510 540,780 780,1380 1380,1620 1620,1890
debug,| {} you might actually
|你实际上可能会在特定的角落里发生错误，

799
00:25:34,800 --> 00:25:36,240
0,300 300,390 390,780 780,1020 1020,1440
happen in particular corner {case,an}

800
00:25:36,240 --> 00:25:37,380
0,510 600,810 810,900 900,1020 1020,1140
error,| and it may be
|可能很难追踪到这是什么时候发生的，

801
00:25:37,380 --> 00:25:38,880
0,330 330,690 690,750 750,1050 1050,1500
very difficult to track down

802
00:25:38,880 --> 00:25:40,440
0,630 630,810 810,900 900,1230 1230,1560
when does that happen,| why
|为什么会发生这种事，

803
00:25:40,440 --> 00:25:41,670
0,180 180,300 300,750 870,1050 1050,1230
does it happen,| so you
|所以你知道怎么修好它，

804
00:25:41,670 --> 00:25:42,540
0,120 120,240 240,360 360,600 600,870
know how to fix it,|
|

805
00:25:42,960 --> 00:25:44,040
0,240 240,510 510,660 660,990 990,1080
and so my advice to
所以我给你们的建议是尽早开始实验室，

806
00:25:44,040 --> 00:25:44,940
0,210 210,300 300,510 540,810 810,900
you is to start the

807
00:25:44,940 --> 00:25:47,370
0,270 270,750 990,1800 1800,2160 2160,2430
labs early,| {} it's often
|通常情况下，你知道你才刚开始一两个晚上，

808
00:25:47,370 --> 00:25:48,330
0,60 60,420 420,660 660,780 780,960
the case that you know

809
00:25:48,330 --> 00:25:49,320
0,120 120,270 270,480 480,840 840,990
you just start {the,night} or

810
00:25:49,320 --> 00:25:51,420
0,120 120,360 360,960 1170,1770 1830,2100
two nights,| before {} you're
|在你通过所有测试都有困难之前，

811
00:25:51,420 --> 00:25:53,130
0,180 180,240 240,360 360,1260 1380,1710
going to have difficulty passing

812
00:25:53,130 --> 00:25:54,660
0,90 90,180 180,570 720,1230 1230,1530
all the tests,| because you're
|因为你会卡住的，你知道，试着调试一个特定的方面

813
00:25:54,660 --> 00:25:55,890
0,150 150,270 270,780 810,900 900,1230
gonna get stuck you know

814
00:25:55,920 --> 00:25:57,360
0,300 300,480 480,840 840,1080 1080,1440
trying to debug one particular

815
00:25:57,360 --> 00:25:58,590
0,390 390,540 540,1020 1020,1170 1170,1230
aspect| and run out of
|基本上没有时间让其他测试用例正常工作了。

816
00:25:58,590 --> 00:26:00,360
0,300 300,420 420,930 1260,1680 1680,1770
time to basically get the

817
00:26:00,360 --> 00:26:01,380
0,150 150,360 360,600 600,720 720,1020
other test cases to work.|
|

818
00:26:02,720 --> 00:26:03,940
0,660

819
00:26:04,230 --> 00:26:05,380
0,570
The.|
这个。|

820
00:26:06,600 --> 00:26:08,760
0,270 270,330 330,810 810,1530
There's an optional project,|
有一个可选的项目，|

821
00:26:10,840 --> 00:26:12,070
0,330 330,690 690,750 750,960 960,1230
so instead of doing lab
所以不是做第四个实验，

822
00:26:12,070 --> 00:26:13,140
0,510
four,|
|

823
00:26:13,480 --> 00:26:14,740
0,270 270,390 390,570 570,630 630,1260
you can do a project
你可以做一个项目，这个项目的想法是

824
00:26:14,800 --> 00:26:15,940
0,480 480,690 690,780 780,1080 1080,1140
{} and the idea of

825
00:26:15,940 --> 00:26:16,960
0,90 90,480 480,690 690,900 900,1020
the project is| that you
|你可以和两个自由的学生一起工作或合作

826
00:26:16,960 --> 00:26:18,400
0,360 360,630 630,930 930,1020 1020,1440
can work together or collaborate

827
00:26:18,400 --> 00:26:20,110
0,180 180,570 780,1170 1170,1500 1500,1710
with a group of two

828
00:26:20,110 --> 00:26:22,450
0,180 180,810 990,1560 1560,2040 2040,2340
free students| and do a
|然后自己做一个项目

829
00:26:22,450 --> 00:26:23,620
0,360 360,450 450,630 630,840 900,1170
project on your own| and
|而这些项目都是以前的类似类型的系统

830
00:26:23,620 --> 00:26:25,660
0,150 150,540 540,960 1200,1560 1560,2040
the projects are a former

831
00:26:25,660 --> 00:26:27,280
0,720 720,960 960,1320 1320,1470 1470,1620
similar type systems| that we
|我们在报纸上读到的，

832
00:26:27,280 --> 00:26:28,600
0,240 240,510 510,600 600,660 660,1320
read about in the papers,|
|

833
00:26:28,690 --> 00:26:30,130
0,330 330,450 450,840 840,1290 1290,1440
{} you propose one that
你提出了一个你想要建造的建筑，

834
00:26:30,130 --> 00:26:31,060
0,120 120,240 240,420 420,480 480,930
you would like to build,|
|

835
00:26:31,330 --> 00:26:32,740
0,570 570,1020 1020,1170 1170,1290 1290,1410
{} will give you some
会给你一些反馈

836
00:26:32,740 --> 00:26:35,680
0,630 660,2250 2250,2490 2490,2760 2760,2940
feedback| and we'll tell you
|我们会告诉你，也许你应该只做第四个实验，

837
00:26:35,680 --> 00:26:36,640
0,240 240,540 540,660 660,810 810,960
well maybe you should just

838
00:26:36,640 --> 00:26:38,770
0,480 480,750 750,1080 1500,2040 2040,2130
do lab four,| but if
|但如果你对做项目很感兴趣，

839
00:26:38,770 --> 00:26:39,700
0,120 120,210 210,540 540,720 720,930
you are excited about doing

840
00:26:39,700 --> 00:26:41,140
0,600 600,750 750,1050 1050,1260 1260,1440
project,| we certainly like to
|我们当然喜欢刺激这一点

841
00:26:41,140 --> 00:26:43,030
0,450 450,840 840,1290 1320,1620 1620,1890
stimulate that| and {} you
|你现在应该开始思考

842
00:26:43,030 --> 00:26:44,710
0,180 180,390 390,660 660,1170 1470,1680
should start thinking now| and
|然后希望我们能讨论一下

843
00:26:44,710 --> 00:26:45,610
0,300 300,630 630,720 720,810 810,900
then hopefully we can have

844
00:26:45,610 --> 00:26:47,440
0,120 120,780 780,1440 1470,1770 1770,1830
some discussion| and settle on
|然后定下来做些很酷的事。

845
00:26:47,440 --> 00:26:48,880
0,330 330,750 750,900 900,1230 1260,1440
something that will be cool

846
00:26:48,880 --> 00:26:49,560
0,60 60,360
to do.|
|

847
00:26:50,760 --> 00:26:54,090
0,1080 1080,1680 1710,2340 2550,3060 3060,3330
Okay, finally,| the one other
好的，最后，|这门课程的另一个组成部分实际上是两次考试。

848
00:26:54,090 --> 00:26:55,410
0,420 420,510 510,810 810,1230 1230,1320
component of the course is

849
00:26:55,410 --> 00:26:57,300
0,360 360,570 570,1410
actually two exams.|
|

850
00:26:58,280 --> 00:27:01,100
0,420 420,900 900,1230 1230,2040 2220,2820
{} One roughly halfway the
一次大约在学期的一半，

851
00:27:01,190 --> 00:27:02,660
0,600 600,720 720,990 990,1230 1230,1470
semester,| on one in the
|在决赛周的一场比赛中，

852
00:27:02,690 --> 00:27:04,670
0,360 360,660 930,1380 1380,1680 1680,1980
finals week,| and we expect
|我们希望你的课程你必须完成所有的实验

853
00:27:04,670 --> 00:27:05,570
0,90 90,420 420,480 480,570 570,900
your course you have to

854
00:27:05,600 --> 00:27:07,370
0,150 150,270 270,360 360,870 1200,1770
do all the labs| and
|并提交一份读写作业的论文问题

855
00:27:07,520 --> 00:27:08,690
0,330 330,390 390,600 600,810 810,1170
submit a read write homework

856
00:27:08,690 --> 00:27:10,340
0,420 420,510 510,600 600,1110 1110,1650
questions for the papers| and
|还有两次考试，

857
00:27:10,340 --> 00:27:12,740
0,360 360,510 510,1110 1620,2310 2310,2400
due two exams,| {} if
|如果你看一下6.828，6.824，

858
00:27:12,740 --> 00:27:14,030
0,120 120,270 270,390 390,1020 1050,1290
you look at the web

859
00:27:14,030 --> 00:27:15,140
0,330 330,660 660,900 900,1020 1020,1110
pages for {6.828 - -

860
00:27:15,140 --> 00:27:16,250
0,300 300,510 510,600 600,690 690,1110
-}, {6.824 - - -},|
|

861
00:27:16,430 --> 00:27:17,900
0,360 360,510 510,660 660,1380 1380,1470
{} you'll see exactly the
您将准确地看到不同组件在评分方面的平衡，

862
00:27:17,900 --> 00:27:19,550
0,510 510,720 720,960 960,1020 1020,1650
balance in terms of grading

863
00:27:19,550 --> 00:27:21,860
0,930 960,1230 1230,1500 1500,1770 1770,2310
{} for the different components,|
|

864
00:27:21,860 --> 00:27:22,610
0,90 90,180 180,300 300,570 570,750
you know the labs count
你知道实验室是最重要的，

865
00:27:22,610 --> 00:27:24,590
0,120 120,660 1050,1650 1650,1860 1860,1980
for most,| {} the two
|我想这两次考试是百分之二十或百分之三十，然后再参加一些课堂活动。

866
00:27:24,590 --> 00:27:25,670
0,330 330,390 390,570 570,780 780,1080
exams I think are twenty

867
00:27:25,670 --> 00:27:27,560
0,30 30,900 900,1320 1320,1680 1680,1890
or {30%,and -} then some

868
00:27:27,560 --> 00:27:28,800
0,270 270,930
class participation.|
|

869
00:27:29,420 --> 00:27:30,710
0,270 270,450 450,540 540,960 960,1290
{} But the details are
但是细节在网页上，

870
00:27:30,710 --> 00:27:33,260
0,150 150,330 360,540 540,1020 2160,2550
on the web page,| to
|帮你度过这学期

871
00:27:33,260 --> 00:27:34,850
0,210 210,300 300,480 480,720 720,1590
get you through the semester|
|

872
00:27:34,850 --> 00:27:36,950
0,930 930,1140 1140,1230 1230,1740 1740,2100
and help you along we
帮助你们，我们有优秀的课程工作人员，

873
00:27:36,950 --> 00:27:39,620
0,720 750,1410 1590,1860 1860,2430 2550,2670
have excellent course staff, {}|
|

874
00:27:39,620 --> 00:27:42,410
0,300 300,630 660,1470 1530,2700 2700,2790
we have {4,TAs -},| we're
我们有4名助教，|我们现在是办公时间

875
00:27:42,410 --> 00:27:44,510
0,240 240,510 510,1020 1380,2010 2010,2100
running office hours| and to
|为了帮助你基本上到达实验室，

876
00:27:44,510 --> 00:27:45,860
0,240 240,360 360,900 930,1230 1230,1350
help you basically get to

877
00:27:45,860 --> 00:27:48,020
0,600 1230,1800 1800,1890 1890,2040 2040,2160
{the,labs},| let me do a
|让我快速转一圈，

878
00:27:48,020 --> 00:27:49,550
0,300 300,720 750,1020 1020,1230 1230,1530
quick round,| maybe the TAs
|或许助教们可以自我介绍一下。

879
00:27:49,550 --> 00:27:51,260
0,180 180,690 690,1410
can introduce themselves.|
|

880
00:27:51,380 --> 00:27:52,340
0,360 360,570 570,690 690,780 780,960
So, do you at least
那么你至少知道他们是谁。

881
00:27:52,340 --> 00:27:53,330
0,120 120,270 270,390 390,840 960,990
know who they are. {}|
|

882
00:27:53,360 --> 00:27:54,800
0,750 750,1080 1080,1140 1140,1320 1320,1440
{} Lily, you wanna go
莉莉，你想先说吗？

883
00:27:54,800 --> 00:27:55,720
0,360
first.|
|

884
00:27:56,830 --> 00:27:58,660
0,390 390,750 780,1170 1170,1350 1350,1830
{} Sure, so I'm really,
当然，所以我真的，我是PDOS的三年级研究生

885
00:27:58,660 --> 00:28:00,190
0,240 240,510 510,840 840,1290 1290,1530
I am a third year

886
00:28:00,190 --> 00:28:01,690
0,240 240,570 570,720 720,1170 1170,1500
grad student in PDOS| and
|弗兰兹实际上是我的顾问

887
00:28:01,690 --> 00:28:02,980
0,240 240,360 360,600 600,720 720,1290
Franz is actually my advisor,|
|

888
00:28:02,980 --> 00:28:05,260
0,480 780,1260 1260,1620 1620,1890 1890,2280
so I know just how
所以我知道他教得有多好，

889
00:28:05,260 --> 00:28:06,370
0,210 210,360 360,510 510,630 630,1110
good he is in teaching,|
|

890
00:28:06,370 --> 00:28:06,910
0,120 120,270 270,360 360,450 450,540
so you're in for a
所以你要享受一顿大餐了，

891
00:28:06,910 --> 00:28:09,490
0,360 750,1920 1920,2040 2040,2310 2310,2580
treat,| yeah I'm looking forward
|是的，这学期我很期待和你一起工作，

892
00:28:09,490 --> 00:28:10,300
0,120 120,390 390,540 540,660 660,810
to working with you this

893
00:28:10,300 --> 00:28:11,340
0,540
semester,|
|

894
00:28:11,420 --> 00:28:12,740
0,360 360,630 630,720 720,960 960,1320
I'll pass it off to
我会把它转给大卫的。

895
00:28:12,740 --> 00:28:14,160
0,750
David.|
|

896
00:28:15,460 --> 00:28:17,200
0,660 660,810 810,1170 1170,1440 1440,1740
Everyone, I'm David, I'm a
各位，我是大卫，我是第二学期的学生，

897
00:28:17,200 --> 00:28:18,490
0,360 360,750 750,930 930,1230 1230,1290
second semester,| I mentioned I
|我说过我去年春天考了6.824，

898
00:28:18,490 --> 00:28:20,140
0,360 390,720 720,840 840,1230 1230,1650
took {6.824 - -} last

899
00:28:20,140 --> 00:28:21,070
0,390 390,540 540,600 600,750 750,930
spring,| when it was like
|当一半是面对面，一半是远程的时候，

900
00:28:21,070 --> 00:28:22,060
0,270 270,390 390,690 690,810 810,990
half in person and half

901
00:28:22,060 --> 00:28:23,590
0,420 690,1020 1020,1140 1140,1440 1440,1530
remote,| {} so hopefully we
|希望这学期我们能两全其美，

902
00:28:23,590 --> 00:28:24,580
0,390 390,570 570,660 660,900 900,990
can get the best of

903
00:28:24,580 --> 00:28:25,870
0,240 240,510 510,630 630,720 720,1290
both worlds for this semester,|
|

904
00:28:25,900 --> 00:28:26,960
0,120 120,510
I'm excited,|
我很兴奋，|

905
00:28:27,760 --> 00:28:28,660
0,330 330,480 480,570 570,660 660,900
yeah, but how is it.|
是啊，但这是怎么回事。|

906
00:28:29,580 --> 00:28:31,740
0,480 480,1020 1020,1500 1500,1710 1710,2160
Hi, I'm Jose, I'm a
嗨，我是何塞，我是四年级研究生

907
00:28:31,950 --> 00:28:33,750
0,270 270,480 480,810 810,1440 1440,1800
fourth year graduate student| working
|致力于解决机器学习问题，

908
00:28:33,750 --> 00:28:35,730
0,450 480,870 870,990 990,1830 1860,1980
on machine learning problems,| I
|我读研究生的第一年上了这门课

909
00:28:35,730 --> 00:28:37,560
0,420 450,840 840,1230 1230,1500 1500,1830
took this class my first

910
00:28:37,560 --> 00:28:38,640
0,300 300,420 420,480 480,720 720,1080
year as a grad student|
|

911
00:28:38,640 --> 00:28:39,930
0,150 150,390 420,720 720,930 930,1290
and I really really enjoy
我真的真的很享受，

912
00:28:39,930 --> 00:28:41,940
0,240 600,960 960,1380 1380,1620 1620,2010
it,| so yeah looking forward
|所以，是的，我很期待。

913
00:28:41,940 --> 00:28:43,980
0,450
to.|
|

914
00:28:44,920 --> 00:28:46,450
0,180 180,450 450,960 960,1290 1290,1530
Yeah, I'm Cell, I used
是的，我是细胞，我用了发音

915
00:28:46,450 --> 00:28:48,070
0,30 30,180 180,960 1020,1530 1530,1620
{the -} pronounce,| I'm a
|我是PDOS的一年级硕士学生，

916
00:28:48,070 --> 00:28:49,480
0,300 300,450 450,870 870,1260 1260,1410
first year master's student in

917
00:28:49,480 --> 00:28:50,530
0,180 180,630 630,840 840,990 990,1050
{PDOS -},| like some of
|就像其他一些人一样，

918
00:28:50,530 --> 00:28:52,810
0,90 90,630 660,1680 1710,1950 1950,2280
the others,| and I took
|几年前我上过这门课，

919
00:28:52,810 --> 00:28:54,100
0,120 120,480 480,630 630,870 870,1290
this class few years back,|
|

920
00:28:54,130 --> 00:28:55,150
0,270 270,300 300,510 510,720 720,1020
had a great time taking
吃得很开心，

921
00:28:55,150 --> 00:28:56,530
0,150 150,390 390,780 780,1320 1320,1380
it,| so I'm excited to
|所以我很高兴能帮助大家学习它。

922
00:28:56,530 --> 00:28:58,300
0,420 450,780 780,990 990,1230
help everyone learn it.|
|

923
00:29:01,480 --> 00:29:03,160
0,360 360,540 540,870 1290,1530 1530,1680
Okay, thank you,| {} so
好的谢谢,|所以在聊天中有一个问题，

924
00:29:03,160 --> 00:29:04,060
0,150 150,210 210,480 480,600 600,900
there's a question in the

925
00:29:04,060 --> 00:29:05,530
0,480 600,750 750,990 990,1140 1140,1470
chat,| {} how is the
|系统是怎么回事，

926
00:29:05,530 --> 00:29:07,300
0,390 390,1050 1050,1200 1200,1500 1500,1770
system,| how does the system
|实验室的系统是如何运行的，

927
00:29:07,300 --> 00:29:09,520
0,90 90,150 150,360 360,780 990,2220
with the lab run, {}|
|

928
00:29:09,520 --> 00:29:11,470
0,180 180,330 330,660 660,1380 1380,1950
is the machine systems simulated,|
机器系统是模拟的吗，|

929
00:29:11,500 --> 00:29:13,450
0,180 180,630 630,810 810,1560 1560,1950
{} yes we're basically {}
是的，我们基本上是通过运行许多不同的进程来模拟许多机器，

930
00:29:13,450 --> 00:29:15,400
0,810 810,1140 1140,1350 1350,1740 1740,1950
simulating many many machines by

931
00:29:15,400 --> 00:29:17,080
0,240 240,450 450,720 720,990 990,1680
running many many different processes,|
|

932
00:29:17,170 --> 00:29:18,160
0,270 270,360 360,540 540,630 630,990
{} in fact the labs
事实上，这些实验室都有自己的RPC库，

933
00:29:18,160 --> 00:29:20,770
0,510 780,1170 1170,1440 1440,1950 1950,2610
have their own RPC library,|
|

934
00:29:21,010 --> 00:29:22,690
0,420 420,750 750,900 900,1500 1560,1680
{} that, like pretend you
就像假装你知道你在不同的物理机器上运行一样，

935
00:29:22,690 --> 00:29:24,640
0,120 120,450 450,750 750,1230 1260,1950
know you're running on separated

936
00:29:24,640 --> 00:29:26,500
0,480 480,1140 1140,1410 1410,1620 1620,1860
physical machines,| {} but in
|但实际上，您在同一台机器上运行许多许多进程。

937
00:29:26,500 --> 00:29:27,700
0,330 330,420 420,750 750,960 960,1200
fact you're running many many

938
00:29:27,700 --> 00:29:28,930
0,540 540,630 630,690 690,870 870,1230
processes on the same machine.|
|

939
00:29:33,740 --> 00:29:35,540
0,510 510,690 690,1080 1080,1290 1290,1800
Okay, any questions so far,|
好的，到目前为止有什么问题吗，|

940
00:29:35,630 --> 00:29:37,790
0,510 510,900 1350,1830 1830,2040 2040,2160
before I continue into the
在我继续讨论一些实际的技术内容之前。

941
00:29:37,790 --> 00:29:39,110
0,360 360,480 480,750 750,870 870,1320
direction of actually some technical

942
00:29:39,110 --> 00:29:40,160
0,540
content.|
|

943
00:29:41,820 --> 00:29:44,430
0,420 420,810 810,1260 1740,2070 2070,2610
{} Is the, the result
是四号实验室的结果，

944
00:29:44,430 --> 00:29:46,080
0,210 210,570 570,1200 1290,1530 1530,1650
of lab four,| is it
|它与现有的任何程序相似吗？

945
00:29:46,080 --> 00:29:50,340
0,450 450,780 780,1380 1380,2370 3420,4260
similar to any existing programs

946
00:29:50,340 --> 00:29:51,760
0,150 150,990
that exist.|
|

947
00:29:51,880 --> 00:29:53,020
0,600 600,660 660,870 870,1080 1080,1140
Yeah, in fact you know
是的，事实上，你知道将要建造的东西与一些流行的关键价值服务有很多相似之处，

948
00:29:53,020 --> 00:29:54,280
0,180 180,390 390,510 510,930 930,1260
what would be building has

949
00:29:54,280 --> 00:29:55,570
0,60 60,210 210,300 300,1020 1020,1290
a lot of similarity to

950
00:29:55,570 --> 00:29:56,710
0,180 180,240 240,630 630,810 810,1140
sort of popular key value

951
00:29:56,710 --> 00:29:58,600
0,750 750,870 870,1080 1080,1260 1260,1890
services,| you know think []
|你知道，想想[]，或者你知道其他一些人，

952
00:29:58,660 --> 00:29:59,920
0,690 720,810 810,990 990,1140 1140,1260
or you know some of

953
00:29:59,920 --> 00:30:01,660
0,90 90,270 270,720 750,1230 1530,1740
the other ones,| {} you
|你知道，正如我们发现的那样，会有不同之处，

954
00:30:01,660 --> 00:30:02,650
0,150 150,300 300,420 420,540 540,990
know there will be differences

955
00:30:02,650 --> 00:30:04,360
0,150 150,630 810,1380 1380,1590 1590,1710
as we discovered,| when we
|当我们度过这学期的时候，

956
00:30:04,360 --> 00:30:06,400
0,180 180,330 330,450 450,1320 1560,2040
go through this semester,| but
|但关键的价值服务是相当知名的

957
00:30:06,400 --> 00:30:07,330
0,90 90,240 240,510 510,840 840,930
the key value services are

958
00:30:07,330 --> 00:30:10,750
0,360 360,1260 1260,1860 2220,2910 2910,3420
pretty well-known| and common a
|和数据中心内部的公共服务，

959
00:30:10,780 --> 00:30:12,550
0,450 450,870 870,960 960,1530 1560,1770
service inside of {} data

960
00:30:12,550 --> 00:30:14,860
0,630 630,930 1350,1980 1980,2100 2100,2310
center,| in run by many
|在由许多公司和几家非常受欢迎的公司经营的情况下，

961
00:30:14,860 --> 00:30:16,060
0,480 480,570 570,660 660,930 930,1200
companies and a couple very

962
00:30:16,060 --> 00:30:17,290
0,360 360,660 660,810 810,1110 1110,1230
popular ones,| that use with
|这对很多人来说都是有用的

963
00:30:17,290 --> 00:30:18,970
0,180 180,240 240,660 1050,1350 1350,1680
lots of people| and they
|他们基本上都在与完全相同的问题作斗争

964
00:30:18,970 --> 00:30:19,960
0,120 120,420 420,510 510,930 930,990
basically struggle with exactly the

965
00:30:19,960 --> 00:30:20,920
0,240 240,540 540,690 690,840 840,960
same issues| as you are
|因为你将在实验室里苦苦挣扎。

966
00:30:20,920 --> 00:30:21,730
0,120 120,180 180,240 240,600 600,810
going to be struggling within

967
00:30:21,730 --> 00:30:22,660
0,60 60,630
the labs.|
|

968
00:30:22,720 --> 00:30:23,830
0,480 480,660 660,780 780,870 870,1110
{} We're going to build
我们将构建一个实际上具有相当强语义的应用程序，

969
00:30:23,830 --> 00:30:25,060
0,240 240,600 600,750 750,1020 1020,1230
{} one that actually has

970
00:30:25,060 --> 00:30:27,520
0,240 240,570 570,1290 1620,2100 2100,2460
pretty strong semantics,| something a
|一些比某些人的执行实践更强的语义

971
00:30:27,520 --> 00:30:28,570
0,210 210,300 300,600 600,960 960,1050
little bit stronger semantics than

972
00:30:28,570 --> 00:30:30,370
0,150 150,420 420,840 840,1410 1410,1800
some people execution practice| and
|我们会讨论为什么，为什么这也会发生，

973
00:30:30,370 --> 00:30:31,870
0,270 270,630 630,1080 1110,1350 1350,1500
we'll discuss why, why that

974
00:30:31,870 --> 00:30:32,890
0,300 300,480 480,690 690,900 900,1020
happens too,| but yeah it's
|但是，是的，这与人们在实践中所做的非常接近。

975
00:30:32,890 --> 00:30:34,090
0,210 210,450 450,600 600,990 990,1200
very close to what people

976
00:30:34,090 --> 00:30:35,280
0,90 90,210 210,750
do in practice.|
|

977
00:30:35,630 --> 00:30:36,890
0,510 510,600 600,960 960,1170 1170,1260
Raft is widely used in
例如，筏子在实践中得到了广泛的应用。

978
00:30:36,890 --> 00:30:38,420
0,390 390,450 450,960
practice, for example.|
|

979
00:30:42,320 --> 00:30:43,940
0,360 360,540 540,1050
Any other questions?|
还有其他问题吗？|

980
00:30:49,340 --> 00:30:50,660
0,390 390,570 570,660 660,1140 1140,1320
Yeah, it's a question about
是的，又是关于实验室的问题，

981
00:30:50,660 --> 00:30:52,550
0,120 120,480 480,1080 1110,1410 1410,1890
the labs again,| if we
|如果二号实验室有窃听器，

982
00:30:52,850 --> 00:30:55,040
0,330 330,450 450,930 960,1650
have a bug on

983
00:30:55,100 --> 00:30:57,380
0,510 510,780 780,1170 1170,1470 1740,2280
{} lab two,| that maybe
|可能根本不会被测试人员发现，

984
00:30:57,410 --> 00:30:58,400
0,240 240,420 420,570 570,870 870,990
doesn't even get caught by

985
00:30:58,400 --> 00:31:01,340
0,90 90,690 690,1320 1710,2430 2490,2940
the testers somehow,| would do
|对于以下实验，我们会得到类似的答案吗

986
00:31:01,340 --> 00:31:05,090
0,180 180,720 1260,2010 2310,3090 3240,3750
we get a like answer

987
00:31:05,090 --> 00:31:06,080
0,120 120,240 240,600 600,900 900,990
to the following labs| or
|或者我们只是继续使用我们的代码。

988
00:31:06,080 --> 00:31:06,950
0,90 90,180 180,390 390,750 750,870
do we just continue to

989
00:31:06,950 --> 00:31:08,080
0,180 180,300 300,660
use our code.|
|

990
00:31:08,080 --> 00:31:10,150
0,1200 1200,1560 1560,1680 1680,1740 1740,2070
Yeah, you're going to continue
是的，你将继续使用你的代码。

991
00:31:10,150 --> 00:31:11,400
0,240 240,360 360,660
using your code.|
|

992
00:31:11,750 --> 00:31:13,010
0,360 360,570 570,990 990,1170 1170,1260
And {} we did our
我们尽了最大努力让实验室检测得尽可能好，

993
00:31:13,010 --> 00:31:14,480
0,600 600,720 720,990 990,1080 1080,1470
best to make the lab

994
00:31:14,480 --> 00:31:15,830
0,90 90,330 330,480 480,1080 1110,1350
to test {} as good

995
00:31:15,830 --> 00:31:17,240
0,90 90,600 600,1050 1050,1260 1260,1410
as possible,| and {} but
|但我相信有些情况下我们很难完成这项工作。

996
00:31:17,240 --> 00:31:17,990
0,120 120,330 330,420 420,450 450,750
I'm sure there are cases

997
00:31:17,990 --> 00:31:20,030
0,180 180,660 1110,1500 1500,1680 1680,2040
that we hard to complete

998
00:31:20,030 --> 00:31:21,700
0,120 120,600 630,1140
the job {}.|
|

999
00:31:21,700 --> 00:31:24,100
0,540 540,1560 1860,1980 1980,2100 2100,2400
{} And you know every
你知道，每次我们发现我们遗漏的东西

1000
00:31:24,100 --> 00:31:25,210
0,180 180,330 330,690 690,930 930,1110
time we discover something we

1001
00:31:25,210 --> 00:31:26,590
0,300 300,510 510,780 780,1110 1110,1380
missed| and we basically improve
|我们基本上改进了测试，

1002
00:31:26,590 --> 00:31:28,840
0,60 60,570 960,1140 1140,1410 1410,2250
the test,| so you're building,
|所以你正在建造，一旦你通过了测试，

1003
00:31:28,840 --> 00:31:30,100
0,390 390,480 480,720 720,780 780,1260
once you pass the test,|
|

1004
00:31:30,400 --> 00:31:31,720
0,360 360,810 810,930 930,1050 1050,1320
we're optimistic that you actually
我们乐观地认为您实际上已经实现了

1005
00:31:31,720 --> 00:31:32,920
0,150 150,210 210,750 750,900 900,1200
have an implementation| that actually
|实际上可以支持其他用例，

1006
00:31:32,920 --> 00:31:34,240
0,120 120,480 480,600 600,1080 1080,1320
can support the other use

1007
00:31:34,240 --> 00:31:35,410
0,330 330,480 480,600 600,1080 1080,1170
cases,| that we're doing the
|我们要学本学期的睡觉。

1008
00:31:35,410 --> 00:31:36,620
0,150 150,210 210,270 270,750
rest of the semester.|
|

1009
00:31:38,940 --> 00:31:40,200
0,390 390,570 570,900 900,990 990,1260
It's not uncommon for people
人们重写一次或两次植入的情况并不少见，

1010
00:31:40,200 --> 00:31:42,300
0,150 150,870 960,1380 1380,1500 1500,2100
to rewrite rewrite their implantation

1011
00:31:42,300 --> 00:31:43,660
0,180 180,240 240,810
once or twice,|
|

1012
00:31:43,660 --> 00:31:44,440
0,180 180,330 330,420 420,540 540,780
{} as you will see
正如您将在实验2和实验3中看到的，

1013
00:31:44,440 --> 00:31:45,940
0,120 120,750 750,1170 1170,1290 1290,1500
in lab two and lab

1014
00:31:45,940 --> 00:31:47,290
0,330 330,450 450,570 570,810 810,1350
three,| you know the structure,|
|你知道这个结构，|

1015
00:31:47,290 --> 00:31:48,760
0,240 240,360 360,540 960,1260 1260,1470
you have to spend quite
您必须花相当多的时间来考虑应用程序或库的结构

1016
00:31:48,760 --> 00:31:49,870
0,30 30,150 150,240 240,510 510,1110
a bit of a time

1017
00:31:49,870 --> 00:31:50,980
0,240 240,390 390,480 480,960 960,1110
thinking about the structure of

1018
00:31:50,980 --> 00:31:52,600
0,180 180,720 720,810 810,1050 1050,1620
your application or your library|
|

1019
00:31:53,050 --> 00:31:54,640
0,540 540,660 660,1050 1080,1320 1320,1590
and you know as you've
你知道，正如你所了解的那样，你可能想要回去重新做一次。

1020
00:31:54,640 --> 00:31:56,350
0,840 1080,1320 1320,1410 1410,1560 1560,1710
learned that you may want

1021
00:31:56,350 --> 00:31:57,070
0,60 60,150 150,390 390,480 480,720
to go back and redo

1022
00:31:57,070 --> 00:31:57,760
0,270
it.|
|

1023
00:31:58,020 --> 00:31:59,520
0,540 570,750 750,1020 1020,1140 1140,1500
{} To help you along
帮你一点忙，

1024
00:31:59,520 --> 00:32:00,750
0,60 60,270 270,690 690,900 900,1230
a little bit,| {} this
|今年我们正在做一些与过去几年不同的事情，

1025
00:32:00,750 --> 00:32:01,740
0,240 240,330 330,480 480,720 720,990
year we're doing something different

1026
00:32:01,740 --> 00:32:02,370
0,90 90,270 270,450 450,540 540,630
than we've done in the

1027
00:32:02,370 --> 00:32:03,870
0,330 330,720 900,1170 1170,1350 1350,1500
past years,| I'm going to
|我将举办几场问答讲座，

1028
00:32:03,870 --> 00:32:04,650
0,180 180,240 240,510 510,570 570,780
run a couple of {Q&A

1029
00:32:04,650 --> 00:32:06,360
0,90 90,210 210,750 750,1350 1470,1710
- -} lectures,| where I'll
|在我将分享的地方，我们将与您分享我们的解决方案，

1030
00:32:06,360 --> 00:32:08,610
0,540 540,930 930,1230 1230,1500 1500,2250
share, we'll share our solutions

1031
00:32:08,940 --> 00:32:10,350
0,240 240,420 420,600 600,930 930,1410
with you,| or we'll walk
|否则我们将演练我们的解决方案

1032
00:32:10,350 --> 00:32:11,850
0,210 210,420 420,990 990,1170 1170,1500
through our solutions| and hopefully
|希望这能告诉你一些关于，

1033
00:32:11,850 --> 00:32:14,280
0,150 150,450 1620,2310 2310,2370 2370,2430
that will tell you a

1034
00:32:14,280 --> 00:32:15,360
0,210 210,360 360,750 780,870 870,1080
little bit about,| you know
|你知道你可以从中吸取教训

1035
00:32:15,360 --> 00:32:16,230
0,180 180,300 300,510 510,630 630,870
you can learn from that|
|

1036
00:32:16,230 --> 00:32:17,370
0,90 90,390 390,540 540,720 720,1140
and see how that contrasts
看看这与你自己的解决方案有什么不同，

1037
00:32:17,370 --> 00:32:18,480
0,120 120,330 330,420 420,990 990,1110
with your own solution,| and
|或许还能为未来的实验室学到一些想法。

1038
00:32:18,480 --> 00:32:20,310
0,540 600,1050 1050,1200 1200,1350 1350,1830
maybe pick up some ideas

1039
00:32:20,490 --> 00:32:21,740
0,210 210,540 540,930
for future labs.|
|

1040
00:32:27,160 --> 00:32:28,620
0,210 210,330 330,900
Any other questions?|
还有其他问题吗？|

1041
00:32:34,740 --> 00:32:35,940
0,660
Okay?|
好吧?|

1042
00:32:36,300 --> 00:32:37,710
0,300 300,690 690,990 990,1260 1260,1410
Again, interrupt me at any
再说一遍，随时打断我，

1043
00:32:37,710 --> 00:32:39,360
0,300 360,900 900,1320 1320,1500 1500,1650
time,| {} I'd like to
|我想让它更具互动性，

1044
00:32:39,360 --> 00:32:41,850
0,240 240,480 480,1170 1170,1800 2130,2490
make this more interactive,| we'll
|我们可能会上几堂课，

1045
00:32:41,850 --> 00:32:42,900
0,210 210,450 450,510 510,690 690,1050
take probably a couple lectures,|
|

1046
00:32:42,900 --> 00:32:44,100
0,120 120,420 420,780 780,930 930,1200
but hopefully we'll get there.|
但希望我们能到达那里。|

1047
00:32:46,180 --> 00:32:48,180
0,570 810,1380
Okay {}.|
好吧。|

1048
00:32:48,870 --> 00:32:50,250
0,630 660,900 900,930 930,1110 1110,1380
{I,want} talk a little bit,|
我想聊聊，|

1049
00:32:50,820 --> 00:32:51,600
0,120 120,270 270,450 450,540 540,780
you know sort of set
你知道，有点像是为今天的案例研究做准备，

1050
00:32:51,600 --> 00:32:52,980
0,420 420,630 630,930 930,1170 1170,1380
ourselves up for the case

1051
00:32:52,980 --> 00:32:54,810
0,330 330,480 480,990 1200,1680 1680,1830
study for today,| {} but
|但在此之前，

1052
00:32:54,810 --> 00:32:55,560
0,240 240,420 420,570 570,600 600,750
before doing that,| I want
|我想对这门课谈一点看法，

1053
00:32:55,560 --> 00:32:56,940
0,720 750,1020 1020,1080 1080,1260 1260,1380
to talk a little bit

1054
00:32:56,940 --> 00:32:58,410
0,240 240,600 600,900 900,960 960,1470
about a bit of perspective

1055
00:32:58,410 --> 00:32:59,430
0,60 60,120 120,540 540,660 660,1020
for the class,| our focus
|我们在这堂课的重点将放在基础设施上。

1056
00:32:59,430 --> 00:33:00,090
0,90 90,180 180,480 480,540 540,660
in the class is going

1057
00:33:00,090 --> 00:33:01,440
0,60 60,180 180,270 270,900 1020,1350
to be on infrastructure| and
|你可以从实验室或多或少看出这一点，

1058
00:33:01,470 --> 00:33:02,190
0,300 300,390 390,510 510,570 570,720
you can more or less

1059
00:33:02,190 --> 00:33:02,970
0,120 120,300 300,480 480,690 690,780
can tell that from the

1060
00:33:02,970 --> 00:33:04,290
0,360 360,600 600,720 720,930 930,1320
lab,| that you know were
|我们刚讨论过的时候你知道的。

1061
00:33:04,470 --> 00:33:06,100
0,240 240,540 540,1050
we just discussed.|
|

1062
00:33:07,190 --> 00:33:08,510
0,270 270,690 810,1140 1140,1260 1260,1320
And so there's going to
所以会有人在这些分布式系统上编写应用程序

1063
00:33:08,510 --> 00:33:10,160
0,90 90,450 450,570 570,810 810,1650
be somebody who's writing applications

1064
00:33:10,280 --> 00:33:11,930
0,570 570,780 780,930 930,1260 1260,1650
{} on these distribute systems|
|

1065
00:33:11,930 --> 00:33:13,490
0,210 210,600 600,1020 1020,1260 1260,1560
and we're not really concerned
我们一点也不太关心应用程序，

1066
00:33:13,490 --> 00:33:14,480
0,90 90,300 300,420 420,540 540,990
too much with the application

1067
00:33:14,480 --> 00:33:16,130
0,150 150,450 780,1470 1470,1590 1590,1650
at all,| we're going to
|我们将主要关注支持这些应用程序的基础架构

1068
00:33:16,130 --> 00:33:17,450
0,90 90,600 600,960 960,1170 1170,1320
be mostly concerned with the

1069
00:33:17,450 --> 00:33:19,700
0,720 720,900 900,1290 1290,1410 1410,2250
infrastructure that supports these applications|
|

1070
00:33:20,060 --> 00:33:21,560
0,240 240,300 300,900 900,1200 1200,1500
and the infrastructure falls out
基础设施分为三个不同的类别

1071
00:33:21,560 --> 00:33:22,880
0,180 180,420 420,690 690,1290 1290,1320
in three different categories| or
|或者非常宽泛地说，

1072
00:33:22,880 --> 00:33:25,300
0,330 330,690 690,1170 1200,1980
very broad speaking,| storage
|存储基础架构，如Key Value服务器、文件系统

1073
00:33:26,080 --> 00:33:28,900
0,780 1020,1530 1530,1650 1650,2010 2010,2820
infrastructure like key value servers,

1074
00:33:28,960 --> 00:33:30,400
0,480 480,1110 1110,1260 1260,1380 1380,1440
file systems,| that kind of
|这类计算，您知道实际编排或构建分布式应用程序的框架，

1075
00:33:30,400 --> 00:33:32,480
0,360 420,1440
thing computation,

1076
00:33:36,580 --> 00:33:39,070
0,180 180,960 960,1170 1170,1530 1530,2490
{you,know} frameworks to actually orchestrate

1077
00:33:39,070 --> 00:33:41,200
0,360 360,810 810,960 960,1380 1380,2130
or build a distributed application,|
|

1078
00:33:41,380 --> 00:33:43,300
0,480 480,930 930,1500 1500,1830 1830,1920
{} an example against the
与经典示例相反的一个示例是MapReduce，

1079
00:33:43,300 --> 00:33:44,830
0,360 360,750 750,870 870,1080 1080,1530
classic example is {mapreduce -},|
|

1080
00:33:44,830 --> 00:33:45,940
0,540 540,720 720,960 960,1080 1080,1110
we'll talk about in a
我们稍后再谈。

1081
00:33:45,940 --> 00:33:47,710
0,450 840,1110 1110,1350 1350,1680 1680,1770
second.| And then that's the
|然后是第三类交流，

1082
00:33:47,710 --> 00:33:49,940
0,480 480,960 960,1740
third categories communication,|
|

1083
00:33:53,570 --> 00:33:55,190
0,300 300,480 480,840 840,1140 1140,1620
and will spend less time
并且将在通信上花费更少的时间，

1084
00:33:55,190 --> 00:33:57,170
0,240 240,1050 1050,1500 1500,1770 1770,1980
on communication,| it's almost more
|它几乎更多的是关于6.829个网络系统的话题，

1085
00:33:57,170 --> 00:33:58,910
0,480 810,1080 1080,1230 1230,1320 1320,1740
topic {6.829 - - -}

1086
00:33:58,940 --> 00:34:00,950
0,360 360,930 1290,1770 1770,1950 1950,2010
network systems,| {} but it
|但它会出现的，

1087
00:34:00,950 --> 00:34:02,090
0,180 180,420 420,690 720,840 840,1140
will show up,| you know
|你知道，从某种意义上说，你知道会有一些合同

1088
00:34:02,090 --> 00:34:02,840
0,180 180,240 240,540 540,600 600,750
in the sense you know

1089
00:34:02,840 --> 00:34:04,280
0,180 180,360 360,480 480,690 690,1440
there's gonna be some contract|
|

1090
00:34:04,280 --> 00:34:06,200
0,660 750,990 990,1260 1260,1770 1770,1920
between the network system and
在网络系统和分布式系统之间。

1091
00:34:06,200 --> 00:34:08,270
0,60 60,480 480,990 1320,1860 1860,2070
the distributed system.| {} And
|这将是一个严肃的话题，

1092
00:34:08,270 --> 00:34:10,280
0,120 120,660 660,1140 1230,1860 1860,2010
that will {} be a

1093
00:34:10,280 --> 00:34:12,080
0,240 240,600 600,840 840,1380 1530,1800
serious topic,| for example {}
|例如，第一天，我们将讨论远程过程调用RPC，

1094
00:34:12,080 --> 00:34:12,920
0,300 300,420 420,540 540,690 690,840
first day, we're gonna be

1095
00:34:12,920 --> 00:34:15,230
0,300 300,1230 1230,1500 1500,1830 1830,2310
talking about remote procedure call

1096
00:34:15,830 --> 00:34:17,160
0,210 210,960
{RPC -},|
|

1097
00:34:17,160 --> 00:34:18,660
0,450 450,660 660,930 930,1140 1140,1500
{} and that's like the
这就像是所有实验室都建在上面的挡路大楼

1098
00:34:18,690 --> 00:34:20,100
0,540 540,900 900,960 960,1200 1200,1410
building block on which all

1099
00:34:20,100 --> 00:34:22,140
0,570 570,870 870,1350 1380,1770 1770,2040
labs are built| and that's
|这是一种沟通模式

1100
00:34:22,260 --> 00:34:24,600
0,300 300,1200 1290,2010 2010,2250 2250,2340
a communication model| and the
|问题是，

1101
00:34:24,600 --> 00:34:26,340
0,360 360,690 690,1080 1290,1590 1590,1740
questions there are,| what kind
|RPC系统实际上提供了什么样的语义，

1102
00:34:26,340 --> 00:34:27,660
0,60 60,540 540,720 720,1110 1110,1320
of semantics does actually the

1103
00:34:27,660 --> 00:34:30,240
0,570 570,930 930,1470 1800,2250 2250,2580
RPC system provide,| utmost once
|最高一次恰好一次至少一次

1104
00:34:30,240 --> 00:34:32,010
0,510 510,840 840,960 960,1260 1260,1770
exactly once at least once|
|

1105
00:34:32,340 --> 00:34:33,420
0,420 420,540 540,720 720,900 900,1080
and we'll talk about that
我们将在周四的课程中讨论这一点，

1106
00:34:33,420 --> 00:34:36,090
0,690 720,1140 1140,1650 1860,2370 2370,2670
in Thursday's lecture,| {} but
|但这就是我们是通信和分布式系统的地方，

1107
00:34:36,090 --> 00:34:37,980
0,240 240,480 480,870 930,1170 1170,1890
that's where were are communication

1108
00:34:37,980 --> 00:34:40,110
0,210 210,930 930,1050 1050,1410 1410,2130
and {distributed,systems},| you know intersect.|
|你知道的互联系统。|

1109
00:34:40,980 --> 00:34:42,090
0,450 660,840 840,900 900,1050 1050,1110
{} If you look at
如果你看这三个基本上是存储，

1110
00:34:42,090 --> 00:34:43,500
0,150 150,450 450,510 510,930 930,1410
these three are basically storage,|
|

1111
00:34:43,500 --> 00:34:45,720
0,150 150,270 270,570 570,1500 1530,2220
you can store data durably,|
您可以持久地存储数据，|

1112
00:34:46,080 --> 00:34:48,810
0,480 480,1530 1530,1800 1800,2070 2070,2730
{you,know} computation to run computations
你知道计算是用来运行计算和通信来让这些不同的部分相互通信的

1113
00:34:48,810 --> 00:34:50,010
0,120 120,660 660,750 750,990 990,1200
and communication to actually have

1114
00:34:50,010 --> 00:34:51,210
0,120 120,360 360,630 630,1080 1080,1200
these different pieces communicate with

1115
00:34:51,210 --> 00:34:52,560
0,120 120,420 870,1080 1080,1170 1170,1350
each other| and so those
|所以这是三件基本的事情，

1116
00:34:52,560 --> 00:34:54,180
0,120 120,210 210,570 570,1350 1350,1620
are the three basic things

1117
00:34:54,180 --> 00:34:56,070
0,150 150,600 1020,1380 1380,1740 1740,1890
that sort of,| which we
|我们可以看到这些系统

1118
00:34:56,070 --> 00:34:56,670
0,30 30,270 270,360 360,510 510,600
are able to see the

1119
00:34:56,670 --> 00:34:58,410
0,630 780,1020 1020,1230 1230,1410 1410,1740
systems| and what we're looking
|我们正在寻找的是某种抽象

1120
00:34:58,410 --> 00:34:59,850
0,390 390,510 510,660 660,750 750,1440
for are sort of abstractions|
|

1121
00:34:59,850 --> 00:35:01,260
0,150 150,270 270,720 780,1290 1290,1410
that have been proven to
已被证明对构建分布式系统非常有帮助。

1122
00:35:01,260 --> 00:35:03,090
0,150 150,450 450,1170 1290,1500 1500,1830
be very helpful in building

1123
00:35:03,090 --> 00:35:04,480
0,90 90,420 420,990
{distributed -} systems.|
|

1124
00:35:06,040 --> 00:35:07,300
0,150 150,240 240,720 720,960 960,1260
There are abstractions like a
有一些抽象，比如远程过程调用或MapReduce库

1125
00:35:07,300 --> 00:35:08,740
0,210 210,240 240,540 540,870 870,1440
like a remote procedure call

1126
00:35:08,830 --> 00:35:10,630
0,360 360,540 540,780 780,1110 1110,1800
or like {mapreduce -} library|
|

1127
00:35:10,690 --> 00:35:12,610
0,660 660,870 870,1200 1200,1590 1590,1920
or in a storage system
或者存储在存储系统中，如密钥值服务。

1128
00:35:12,610 --> 00:35:13,960
0,180 180,240 240,390 390,720 720,1350
like a key value service.|
|

1129
00:35:14,850 --> 00:35:16,710
0,180 180,750 870,1050 1050,1470 1470,1860
And often you know often
通常你知道我们的目标通常是

1130
00:35:16,710 --> 00:35:18,060
0,120 120,690 690,900 900,1230 1230,1350
our goal will be| to
|为了使抽象分布式抽象看起来非常像某种普通的标准顺序抽象，

1131
00:35:18,060 --> 00:35:20,730
0,180 180,390 390,1290 1470,2100 2100,2670
make the abstractions distributed abstractions

1132
00:35:20,730 --> 00:35:21,840
0,180 180,420 420,690 690,1020 1020,1110
look very much like you

1133
00:35:21,840 --> 00:35:23,340
0,240 240,420 420,510 510,1080 1080,1500
know sort of normal standard

1134
00:35:23,340 --> 00:35:25,590
0,540 540,1140 1140,1890 1890,2070 2070,2250
sequential abstractions,| {} you've made
|你所熟悉的，

1135
00:35:25,590 --> 00:35:26,730
0,360 360,540 540,660 660,750 750,1140
familiar with,| so for example
|例如，我们构建了一个存储系统，

1136
00:35:26,730 --> 00:35:27,870
0,120 120,300 300,330 330,660 660,1140
we build a storage system,|
|

1137
00:35:28,290 --> 00:35:30,030
0,270 270,450 450,900 900,1350 1350,1740
we want our basically distributed
我们希望我们的基本分布式存储系统或多或少像单机顺序存储服务器一样运行，

1138
00:35:30,030 --> 00:35:31,140
0,330 330,630 630,840 840,870 870,1110
storage system more or less

1139
00:35:31,140 --> 00:35:34,230
0,810 960,1710 1710,1950 1950,2340 2340,3090
behave like a single machine

1140
00:35:34,230 --> 00:35:36,810
0,1080 1320,1680 1680,2040 2040,2400 2400,2580
sequential {} storage server,| like
|就像笔记本电脑上的常规文件系统一样，

1141
00:35:36,810 --> 00:35:37,920
0,120 120,420 420,690 690,990 990,1110
your regular file system on

1142
00:35:37,920 --> 00:35:39,990
0,120 120,690 1200,1830 1830,1920 1920,2070
your laptop,| except you know
|除了你知道，我们希望存储系统有更强的容错性，

1143
00:35:39,990 --> 00:35:40,860
0,240 240,360 360,540 540,660 660,870
that you know, we hope

1144
00:35:40,860 --> 00:35:41,670
0,120 120,180 180,420 420,690 690,810
that the storage system is

1145
00:35:41,670 --> 00:35:43,770
0,510 540,720 720,960 960,1590 1620,2100
more {} fault tolerance,| because
|因为它们使用复制，

1146
00:35:43,770 --> 00:35:45,390
0,150 150,450 450,1290 1320,1500 1500,1620
they use replication,| may be
|可能会有更高的性能，

1147
00:35:45,390 --> 00:35:46,830
0,240 240,360 360,510 510,1170 1170,1440
much more high performance,| because
|因为它有很多很多的机器，

1148
00:35:46,830 --> 00:35:48,060
0,120 120,270 270,510 510,690 690,1230
it has many many machines,|
|

1149
00:35:48,300 --> 00:35:49,560
0,270 270,330 330,1080 1080,1170 1170,1260
like the behavior of the
就像我们要找的系统的行为是相似的，

1150
00:35:49,560 --> 00:35:50,820
0,330 330,450 450,540 540,780 780,1260
system that we're looking for

1151
00:35:50,880 --> 00:35:52,440
0,390 390,930 930,1020 1020,1470 1470,1560
is similar,| the abstraction that
|我们正在寻找的抽象类似于单个抽象。

1152
00:35:52,440 --> 00:35:53,670
0,60 60,360 360,660 660,810 810,1230
we're looking for is similar

1153
00:35:53,670 --> 00:35:55,680
0,270 270,690 690,990 990,1200
to a single one.|
|

1154
00:35:55,800 --> 00:35:57,060
0,270 270,390 390,480 480,1020 1020,1260
Turns out in practice actually
原来在实践中其实是很难做到的，

1155
00:35:57,060 --> 00:35:58,260
0,90 90,360 360,630 630,690 690,1200
is very hard to achieve,|
|

1156
00:35:58,710 --> 00:36:00,030
0,600 600,660 660,870 870,1110 1110,1320
and you will see that|
你会看到|

1157
00:36:00,030 --> 00:36:00,930
0,210 210,390 390,600 600,780 780,900
it looks like it but
看起来像，但不完全是

1158
00:36:00,930 --> 00:36:02,730
0,90 90,300 300,810 840,1440 1440,1800
it's not exactly| and this
|这是一个会多次出现的话题。

1159
00:36:02,730 --> 00:36:03,990
0,120 120,180 180,510 510,690 690,1260
is a topic that will

1160
00:36:04,260 --> 00:36:06,660
0,900 900,1050 1050,1410 1410,1980
show up multiple times.|
|

1161
00:36:06,900 --> 00:36:07,830
0,300 300,600 600,690 690,780 780,930
In fact, you know that
事实上，你们知道，这让我有点像这门课上反复出现的主要主题，

1162
00:36:07,830 --> 00:36:08,700
0,330 330,480 480,600 600,780 780,870
brings me to sort of

1163
00:36:08,700 --> 00:36:10,400
0,240 240,360 360,1140
like the main

1164
00:36:10,430 --> 00:36:12,830
0,330 360,1200 1200,1920 1980,2220 2220,2400
{} recurring themes {} in

1165
00:36:12,830 --> 00:36:14,460
0,330 510,1140
this class,|
|

1166
00:36:14,770 --> 00:36:16,210
0,270 270,660 660,930 930,1320 1320,1440
that we're {going,to,see} over and
我们会一遍又一遍地看到。

1167
00:36:16,210 --> 00:36:17,260
0,660
over.|
|

1168
00:36:23,230 --> 00:36:24,610
0,270 270,360 360,510 510,870 870,1380
And the main topics are
主要的主题是容错。

1169
00:36:25,220 --> 00:36:26,640
0,180 180,840
fault tolerance.|
|

1170
00:36:28,620 --> 00:36:30,760
0,240 240,990
Not surprising.|
这并不令人惊讶。|

1171
00:36:31,150 --> 00:36:31,900
0,180 180,270 270,450 450,600 600,750
And that has sort of
这有两个方面，

1172
00:36:31,900 --> 00:36:34,750
0,510 510,1260 1410,2250 2250,2460 2460,2850
two aspects,| {} it's actually
|它实际上是定义一下容错是什么意思，

1173
00:36:34,750 --> 00:36:35,590
0,120 120,420 420,510 510,720 720,840
to define a little bit

1174
00:36:35,590 --> 00:36:37,120
0,210 210,390 390,750 750,1020 1020,1530
what fault tolerance means,| one
|一个是可用性，

1175
00:36:37,300 --> 00:36:40,780
0,600 630,1530 2280,2790 2790,3180 3180,3480
is availability,| so we're looking
|所以我们在研究技术，

1176
00:36:40,780 --> 00:36:42,280
0,330 330,1020
at techniques,|
|

1177
00:36:44,600 --> 00:36:45,380
0,180 180,330 330,420 420,660 660,780
we're gonna be looking at
我们将研究使系统高度可用的技术

1178
00:36:45,380 --> 00:36:49,100
0,450 450,1020 1260,1890 2790,3330 3360,3720
techniques to {} make a

1179
00:36:49,100 --> 00:36:50,750
0,360 360,600 600,1140 1170,1470 1470,1650
systems highly available| and so
|所以我们的意思是，

1180
00:36:50,750 --> 00:36:51,800
0,390 390,480 480,690 690,780 780,1050
{} and what we mean

1181
00:36:51,800 --> 00:36:53,570
0,300 300,480 480,690 690,1410 1530,1770
that is that,| they, they
|他们，他们在失败的情况下继续提供他们的服务

1182
00:36:53,570 --> 00:36:55,310
0,360 360,510 510,1080 1080,1260 1260,1740
continue to deliver their service

1183
00:36:55,310 --> 00:36:57,980
0,690 690,1140 1140,1380 1380,1980 2370,2670
despite there being failures| and
|因此，这通常被表示为数字9，

1184
00:36:57,980 --> 00:36:59,150
0,150 150,330 330,390 390,690 690,1170
so this is often expressed

1185
00:36:59,150 --> 00:37:00,260
0,240 240,450 450,690 690,750 750,1110
as a number of nine,|
|

1186
00:37:00,830 --> 00:37:02,690
0,120 120,420 420,810 810,1080 1080,1860
{0.999 - - -} reliability,|
0.999的可靠性，|

1187
00:37:02,990 --> 00:37:04,850
0,750 750,1110 1110,1260 1260,1710 1710,1860
{} and so that's gonna
所以这将是容错的一个方面，

1188
00:37:04,850 --> 00:37:06,740
0,450 810,1200 1200,1650 1650,1710 1710,1890
be one aspect of fault

1189
00:37:06,740 --> 00:37:08,060
0,330 330,420 420,810 810,1260 1260,1320
tolerance,| the second aspect of
|光子的第二个方面，我们非常关心这些，我们将称之为可恢复性，

1190
00:37:08,060 --> 00:37:08,990
0,480 480,600 600,690 690,870 870,930
photons that we care a

1191
00:37:08,990 --> 00:37:10,430
0,180 180,480 480,750 750,990 1110,1440
lot about these we're going

1192
00:37:10,430 --> 00:37:12,140
0,60 60,270 270,600 600,1170
to call {recoverability -},|
|

1193
00:37:17,880 --> 00:37:20,010
0,450 450,660 660,720 720,1410 1560,2130
{} when the machine crashes
当机器崩溃或故障时，

1194
00:37:20,010 --> 00:37:22,050
0,90 90,750 960,1500 1500,1740 1740,2040
or fails,| {} we like
|我们喜欢在它重新启动后把它带回系统，

1195
00:37:22,050 --> 00:37:23,730
0,480 480,870 900,1140 1140,1260 1260,1680
to {} bring it back

1196
00:37:23,730 --> 00:37:25,110
0,300 300,390 390,780 780,1020 1020,1380
into the system once it

1197
00:37:25,110 --> 00:37:26,100
0,480 480,600 600,720 720,840 840,990
reboots,| you know so that
|你知道，这样我们才能保持可用性，

1198
00:37:26,100 --> 00:37:26,730
0,90 90,210 210,420 420,540 540,630
we can keep up the

1199
00:37:26,730 --> 00:37:28,440
0,660 690,960 960,1110 1110,1440 1440,1710
availability,| because we didn't like
|因为我们不喜欢修理系统，

1200
00:37:28,440 --> 00:37:30,120
0,420 420,510 510,1020 1110,1350 1350,1680
repair the system,| then basically
|然后基本上所有的机器都会一个接一个地死掉，直到我们有零台机器为止

1201
00:37:30,120 --> 00:37:31,080
0,120 120,210 210,570 570,720 720,960
all the machines would die

1202
00:37:31,080 --> 00:37:32,670
0,420 420,570 570,1110 1200,1500 1500,1590
one by one until we

1203
00:37:32,670 --> 00:37:33,810
0,90 90,450 450,870 870,960 960,1140
have zero machines| and then
|然后我们就没有服务了，

1204
00:37:33,810 --> 00:37:34,800
0,90 90,180 180,300 300,630 630,990
we have no service anymore,|
|

1205
00:37:34,800 --> 00:37:36,000
0,120 120,240 240,750 750,930 930,1200
so it's important that we
所以重要的是我们要修复分布式系统，

1206
00:37:36,030 --> 00:37:38,190
0,810 810,930 930,1320 1320,1800 1950,2160
repair the distributed system,| the
|我们修复分布式系统的方式基本上是在机器重新启动时，

1207
00:37:38,190 --> 00:37:38,970
0,180 180,330 330,630 630,690 690,780
way we repaired to the

1208
00:37:38,970 --> 00:37:40,260
0,270 270,600 600,690 690,1140 1140,1290
distributed system is basically when

1209
00:37:40,260 --> 00:37:41,520
0,60 60,420 420,600 600,870 870,1260
the machine comes back up,|
|

1210
00:37:41,670 --> 00:37:43,560
0,270 270,450 450,870 1320,1800 1800,1890
now we're gonna needs to
现在我们需要恢复它的状态

1211
00:37:43,560 --> 00:37:44,880
0,360 360,480 480,1020 1020,1140 1140,1320
recover its state| and then
|然后我们将开始重新参与分布式系统

1212
00:37:44,880 --> 00:37:45,960
0,60 60,180 180,270 270,480 480,1080
we're going to start participating

1213
00:37:45,960 --> 00:37:47,400
0,330 330,600 600,810 810,1050 1050,1440
back into the distributed systems|
|

1214
00:37:47,400 --> 00:37:48,750
0,90 90,180 180,420 420,720 1050,1350
and it turns out {}
事实证明，这实际上很难，

1215
00:37:48,750 --> 00:37:51,030
0,330 330,720 720,1170 1230,1890 1980,2280
there's actually hard,| {} that's
|这是个困难的方面。

1216
00:37:51,030 --> 00:37:52,120
0,60 60,270 270,870
a hard aspect.|
|

1217
00:37:52,600 --> 00:37:54,760
0,420 930,1140 1140,1350 1350,2010 2010,2160
And a key technique for
可用性的一项关键技术将是复制。

1218
00:37:54,760 --> 00:37:55,780
0,630 630,720 720,840 840,900 900,1020
availability is going to be

1219
00:37:55,780 --> 00:37:57,460
0,60 60,840
{} replication.|
|

1220
00:37:59,800 --> 00:38:01,360
0,240 240,360 360,960 960,1080 1080,1560
And the key {} technique
我们要用来实现可恢复性的关键技术

1221
00:38:01,360 --> 00:38:02,530
0,750 750,900 900,990 990,1110 1110,1170
yeah that we're going to

1222
00:38:02,530 --> 00:38:05,290
0,210 210,750 750,1530 1560,1920 1920,2760
use for {} {recoverabilities -}|
|

1223
00:38:05,290 --> 00:38:06,640
0,180 180,450 450,570 600,1230 1230,1350
or something like logging or
或者像记录或交易这样的东西，

1224
00:38:06,640 --> 00:38:07,960
0,870
transactions,|
|

1225
00:38:08,670 --> 00:38:11,340
0,1020 1020,1350 1350,1500 1500,1920 1920,2670
writing things to durable storage.|
将东西写入耐久存储器。|

1226
00:38:13,150 --> 00:38:14,500
0,180 180,480 480,660 660,1140 1200,1350
So that neither one the
这样两个人都不会断电，

1227
00:38:14,500 --> 00:38:15,430
0,300 300,480 480,780 780,870 870,930
power goes out,| but the
|但是机器之后会重新启动，

1228
00:38:15,430 --> 00:38:16,900
0,240 240,420 420,660 660,780 780,1470
machine comes back up afterwards,|
|

1229
00:38:16,900 --> 00:38:20,320
0,90 90,810 840,1860 2190,2340 2370,3420
you were have the data
您的数据还在磁盘上。

1230
00:38:20,320 --> 00:38:21,760
0,60 60,240 240,600 630,930 930,1440
is still there on disk.|
|

1231
00:38:26,700 --> 00:38:28,170
0,150 150,420 420,840 900,1110 1110,1470
So that's the fault tolerance
这就是容错方面。

1232
00:38:28,170 --> 00:38:29,140
0,420
side.|
|

1233
00:38:29,400 --> 00:38:31,620
0,750 900,1080 1080,1440 1440,1950 2010,2220
{} The second part {}
第二部分是所谓的一致性。

1234
00:38:31,620 --> 00:38:32,850
0,480 480,690 690,780 780,840 840,1230
is something of {} called

1235
00:38:32,850 --> 00:38:34,200
0,750
consistency.|
|

1236
00:38:38,840 --> 00:38:41,600
0,630 660,960 960,1050 1050,1950 1950,2760
{} This is basically the
这基本上就是合同，

1237
00:38:41,690 --> 00:38:43,220
0,960 960,1050 1050,1170 1170,1410 1410,1530
contract,| you know that the
|您知道服务器将为操作提供

1238
00:38:43,220 --> 00:38:44,930
0,660 840,1410 1410,1530 1530,1650 1650,1710
servers {} is going to

1239
00:38:44,930 --> 00:38:47,300
0,600 600,810 810,1560 1680,1980 1980,2370
provide for operations| with respective
|在具有各自的并发性和故障的情况下，

1240
00:38:47,300 --> 00:38:50,330
0,690 690,960 960,1830 2370,2760 2760,3030
concurrency and failure,| {} so
|所以松散地说，你知道我们。

1241
00:38:50,330 --> 00:38:52,070
0,660 660,1170 1170,1290 1290,1410 1410,1740
loosely speaking, you know what

1242
00:38:52,070 --> 00:38:53,860
0,1260
we.|
|

1243
00:38:54,140 --> 00:38:55,490
0,300 300,390 390,540 540,750 750,1350
When we think about consistency,|
当我们考虑一致性时，|

1244
00:38:55,490 --> 00:38:57,890
0,510 510,780 780,1350 1350,1650 1650,2400
basically the ideal is the
基本上，理想的行为与任何一台机器都无法提供的行为相同，

1245
00:38:58,280 --> 00:39:00,620
0,480 480,1080 1080,1770 1800,2280 2280,2340
same behavior as not a

1246
00:39:00,620 --> 00:39:02,870
0,300 300,1020 1230,1530 1530,2040 2070,2250
single machine would deliver, {}|
|

1247
00:39:02,870 --> 00:39:04,160
0,210 210,510 510,690 690,750 750,1290
so we have a replicated
因此，我们拥有一个复制的容错高性能文件系统，

1248
00:39:04,160 --> 00:39:05,690
0,210 210,660 660,870 870,1290 1290,1530
fault tolerant high performance file

1249
00:39:05,690 --> 00:39:07,580
0,480 480,810 810,1050 1050,1590 1680,1890
system,| considering many machines would
|考虑到许多机器希望行为几乎与时序机器相同，

1250
00:39:07,580 --> 00:39:08,360
0,150 150,210 210,570 570,660 660,780
like the behavior to be

1251
00:39:08,360 --> 00:39:09,680
0,210 210,420 420,930 930,1050 1050,1320
{} almost identical to the

1252
00:39:09,680 --> 00:39:12,290
0,510 510,870 1470,2130 2280,2490 2490,2610
sequential machine,| and so the
|所以这里的关键问题是

1253
00:39:12,290 --> 00:39:13,520
0,180 180,510 510,720 720,1080 1080,1230
key question which here is|
|

1254
00:39:13,520 --> 00:39:15,440
0,240 240,390 390,480 480,1050 1230,1920
sort of the form, {}
某种形式，让我们假设我们有一个键值服务器确实获得了操作，

1255
00:39:15,470 --> 00:39:16,160
0,240 240,390 390,540 540,630 630,690
let's say we have a

1256
00:39:16,160 --> 00:39:18,500
0,150 150,450 450,1110 1230,1830 1830,2340
key value server does get

1257
00:39:19,000 --> 00:39:20,580
0,960
operation,|
|

1258
00:39:21,480 --> 00:39:23,000
0,960
return
返回最后一个PUT的值。

1259
00:39:24,170 --> 00:39:26,090
0,210 210,1020 1200,1470 1470,1560 1560,1920
the value of the last

1260
00:39:26,090 --> 00:39:27,040
0,390
put.|
|

1261
00:39:34,380 --> 00:39:34,920
0,150 150,210 210,300 300,480 480,540
And if you run a
如果你运行一台机器，

1262
00:39:34,920 --> 00:39:36,720
0,270 270,870 1020,1590 1590,1680 1680,1800
single machine,| and you have
|你对并发操作一无所知，

1263
00:39:36,720 --> 00:39:38,340
0,300 300,570 570,930 930,1440 1440,1620
{nothing,you,know} {concurrent -} operation,| so
|所以你要一个接一个地执行每一项行动，

1264
00:39:38,340 --> 00:39:39,540
0,90 90,300 300,540 540,990 990,1200
you run every operation one

1265
00:39:39,540 --> 00:39:40,740
0,120 120,450 450,540 540,690 690,1200
by one,| we'll let you
|我们会让你把球放好，

1266
00:39:40,770 --> 00:39:42,540
0,840 840,990 990,1320 1320,1500 1500,1770
{put,put,put},| then again, then again,
|再来，再来，

1267
00:39:42,540 --> 00:39:44,130
0,180 180,540 930,1140 1140,1230 1230,1590
then again,| then of course
|当然，就像你知道的，这个问题很难回答，

1268
00:39:44,130 --> 00:39:45,090
0,420 450,540 540,660 660,840 840,960
like you know this is

1269
00:39:45,090 --> 00:39:46,050
0,150 150,450 450,510 510,840 840,960
this question is trivial to

1270
00:39:46,050 --> 00:39:47,460
0,420 420,630 630,750 750,1260 1260,1410
answer,| you would assume that
|您会假设GET将返回最后一次PUT存储的值。

1271
00:39:47,460 --> 00:39:48,630
0,60 60,300 300,540 540,900 900,1170
the get will return the

1272
00:39:48,630 --> 00:39:49,680
0,360 360,600 600,690 690,810 810,1050
value stored by the last

1273
00:39:49,680 --> 00:39:50,520
0,360
put.|
|

1274
00:39:50,780 --> 00:39:52,550
0,360 360,600 600,750 750,960 960,1770
But once we have concurrency
但是一旦我们有了并发和失败

1275
00:39:52,550 --> 00:39:53,990
0,420 420,600 600,1200 1200,1350 1350,1440
and with failures| and we
|我们有很多机器，

1276
00:39:53,990 --> 00:39:55,580
0,90 90,330 330,1020 1230,1530 1530,1590
have many machines,| this is
|这其实不是很明显，

1277
00:39:55,580 --> 00:39:57,530
0,270 270,600 600,780 780,1320 1350,1950
actually not so obvious, {}|
|

1278
00:39:57,530 --> 00:39:58,190
0,90 90,180 180,330 330,420 420,660
you know what the right
你知道什么是正确的什么是正确的方式，

1279
00:39:58,190 --> 00:39:59,450
0,210 210,300 300,540 540,750 750,1260
what the right way, {}|
|

1280
00:39:59,900 --> 00:40:02,240
0,570 1020,1320 1320,1500 1500,1980 1980,2340
what a good contract is|
多好的合同啊|

1281
00:40:02,240 --> 00:40:03,830
0,300 300,420 420,690 690,1320 1320,1590
and we'll see actually many
我们实际上会看到很多不同的合同，

1282
00:40:03,830 --> 00:40:05,810
0,330 330,990 1020,1560 1560,1740 1740,1980
different contracts,| {} we see
|我们看到，一旦有了很强的一致性，

1283
00:40:05,810 --> 00:40:07,340
0,240 240,330 330,570 570,900 900,1530
once that have strong consistency,|
|

1284
00:40:07,340 --> 00:40:08,720
0,120 120,330 330,720 720,1080 1080,1380
you know almost behave like
你知道吗，行为几乎就像一台顺序机

1285
00:40:08,720 --> 00:40:11,060
0,390 390,840 840,1290 1410,2070 2070,2340
a sequential machine| or once
|或者一旦有非常宽松的担保，

1286
00:40:11,060 --> 00:40:12,380
0,90 90,270 270,300 300,570 570,1320
that have a very loose

1287
00:40:12,410 --> 00:40:17,660
0,1530 1860,2490 2700,3390 3390,4320 4530,5250
guarantees,| { -} and provide
|并提供了截然不同的基因，

1288
00:40:17,660 --> 00:40:19,820
0,180 180,450 450,900 900,1710 1740,2160
very different genetics,| for example
|例如，它们提供最终的一致性，

1289
00:40:19,820 --> 00:40:21,320
0,60 60,330 330,750 750,1350 1380,1500
they provide eventual consistency,| you
|您知道，最终您将看到GET将返回PUT的结果，但不会立即返回。

1290
00:40:21,320 --> 00:40:22,940
0,120 120,870 870,960 960,1110 1110,1620
know eventually you will see

1291
00:40:23,270 --> 00:40:25,730
0,870 900,1260 1260,1410 1410,2130 2190,2460
{} {a,get} will return the

1292
00:40:25,730 --> 00:40:27,080
0,390 390,570 570,660 660,1020 1050,1350
result of a put {}

1293
00:40:27,080 --> 00:40:28,300
0,180 180,420 420,900
but not immediately.|
|

1294
00:40:28,800 --> 00:40:30,690
0,360 360,630 630,720 720,1320 1560,1890
{} And the reason, {}
原因是，有一种不同类型的一致性，

1295
00:40:30,690 --> 00:40:31,950
0,180 180,330 330,540 540,870 870,1260
there's sort of different types

1296
00:40:31,950 --> 00:40:34,020
0,120 120,960 990,1320 1320,1740 1740,2070
of consistency,| that's directly related
|这与性能直接相关。

1297
00:40:34,020 --> 00:40:35,400
0,60 60,840
to performance.|
|

1298
00:40:37,670 --> 00:40:39,050
0,120 120,180 180,810 1080,1290 1290,1380
You know often one of
你知道这个系统的目标之一通常是

1299
00:40:39,050 --> 00:40:40,370
0,90 90,450 450,570 570,960 960,1320
the goals of the system

1300
00:40:40,370 --> 00:40:41,660
0,120 120,240 240,570 570,720 720,1290
is| to deliver high performance
|为了提供高性能，您知道使用多台机器的扩展示例，

1301
00:40:41,660 --> 00:40:42,860
0,120 120,180 180,660 660,1020 1020,1200
you know scale example with

1302
00:40:42,860 --> 00:40:44,840
0,60 60,270 270,330 330,990 1380,1980
a number of machines, {}|
|

1303
00:40:44,990 --> 00:40:46,520
0,660 660,750 750,840 840,960 960,1530
and you know to achieve
你知道要实现一场表演，

1304
00:40:46,520 --> 00:40:48,560
0,480 480,1230 1320,1620 1620,1860 1860,2040
a performance,| {} that's sort
|这几乎与你知道的一致性和容错性相冲突。

1305
00:40:48,560 --> 00:40:50,600
0,90 90,510 510,810 810,1530 1530,2040
of almost in conflict with

1306
00:40:50,600 --> 00:40:52,220
0,180 180,690 690,780 780,960 960,1620
{you,know} consistency and fault tolerance.|
|

1307
00:40:52,810 --> 00:40:54,010
0,540 540,600 600,720 720,930 930,1200
{} You know to actually
你知道要真正达到强烈的一致性

1308
00:40:54,010 --> 00:40:56,530
0,510 540,930 930,1230 1230,1980 1980,2520
achieve {} strong consistency| requires
|需要不同机器之间的通信，

1309
00:40:56,530 --> 00:40:58,270
0,570 570,780 780,870 870,1110 1110,1740
communication between the different machines,|
|

1310
00:40:58,360 --> 00:41:00,340
0,330 330,600 600,870 870,1230 1230,1980
which might actually reduce performance,|
这实际上可能会降低性能，|

1311
00:41:00,490 --> 00:41:03,070
0,750 750,1590 1620,1920 1920,2100 2100,2580
similarly to achieve fault tolerance,|
类似地，为了实现容错，|

1312
00:41:03,070 --> 00:41:04,450
0,300 300,420 420,510 510,960 960,1380
we need to replicate data,|
我们需要复制数据，|

1313
00:41:04,480 --> 00:41:06,040
0,240 240,420 420,600 600,780 960,1560
means we have to communicate
意味着我们必须将数据从一台机器传送到另一台机器，

1314
00:41:06,040 --> 00:41:06,940
0,240 240,360 360,510 510,780 780,900
data from one machine to

1315
00:41:06,940 --> 00:41:08,800
0,270 270,660 1080,1620 1620,1710 1710,1860
another machine,| and if we
|如果我们能够将机器数据也写入耐久存储器，

1316
00:41:08,800 --> 00:41:09,550
0,120 120,270 270,360 360,570 570,750
were able to write that

1317
00:41:09,550 --> 00:41:11,050
0,300 330,720 720,990 990,1080 1080,1500
machine data also to durable

1318
00:41:11,050 --> 00:41:13,300
0,660 960,1320 1320,1650 1650,2100 2100,2250
storage,| {you,know} that operation is
|你知道那个手术很贵的。

1319
00:41:13,300 --> 00:41:14,300
0,630
expensive.|
|

1320
00:41:14,330 --> 00:41:16,460
0,420 420,900 960,1170 1170,1770 1770,2130
And so the replication cost
因此，复制会降低性能。

1321
00:41:16,460 --> 00:41:18,000
0,60 60,840
the performance.|
|

1322
00:41:18,270 --> 00:41:20,670
0,360 360,690 810,1890 1890,2220 2220,2400
And so achieving these are
因此，同时实现这些是三件事，

1323
00:41:20,670 --> 00:41:21,690
0,270 270,540 540,690 690,780 780,1020
three things at the same

1324
00:41:21,690 --> 00:41:23,220
0,540 750,990 990,1230 1230,1440 1440,1530
time,| {} it turns out
|事实证明，这是非常困难的。

1325
00:41:23,220 --> 00:41:24,810
0,60 60,180 180,660 660,1230 1260,1590
to be extremely difficult| and
|而人们在实践中所做的事实是

1326
00:41:24,810 --> 00:41:25,680
0,90 90,390 390,510 510,720 720,870
the fact that people do

1327
00:41:25,680 --> 00:41:26,850
0,120 120,630 630,900 900,1020 1020,1170
in practice is| they make
|他们做了不同的权衡，

1328
00:41:26,850 --> 00:41:28,590
0,270 270,750 750,1050 1050,1200 1200,1740
different trade-offs,| they will sacrifice
|他们将牺牲一些一致性来获得更好的性能，

1329
00:41:28,590 --> 00:41:30,000
0,180 180,810 810,1020 1020,1230 1230,1410
some consistency to get better

1330
00:41:30,000 --> 00:41:31,230
0,540 540,630 630,870 870,1080 1080,1230
performance,| or maybe some fault
|或者是一些可以获得更好性能的容错功能，

1331
00:41:31,230 --> 00:41:32,640
0,360 360,450 450,570 570,750 750,1410
tolerance that get better performance,|
|

1332
00:41:32,880 --> 00:41:34,080
0,210 210,330 330,480 480,1050 1050,1200
and so we'll see, {}
所以我们会看到，在整个学期里，

1333
00:41:34,080 --> 00:41:35,910
0,330 330,420 420,1140 1230,1470 1470,1830
throughout the semester,| a wide
|广泛的不同类型的设计，

1334
00:41:35,910 --> 00:41:37,110
0,480 480,630 630,900 900,1140 1140,1200
spectrum of different types of

1335
00:41:37,110 --> 00:41:39,150
0,720 900,1290 1290,1650 1650,1740 1740,2040
designs,| {} that you know
|你知道，用不同的方式进行权衡。

1336
00:41:39,180 --> 00:41:41,100
0,300 300,780 780,1260 1260,1710 1710,1920
make that tradeoff in {}

1337
00:41:41,100 --> 00:41:42,040
0,570
differently.|
|

1338
00:41:44,010 --> 00:41:44,910
0,240 240,270 270,660 660,840 840,900
Just a small note of
只是一小段表演，

1339
00:41:44,910 --> 00:41:46,890
0,510 510,900 960,1350 1350,1800 1800,1980
performance,| there's two aspects to
|它有两个方面，

1340
00:41:46,890 --> 00:41:48,840
0,120 120,270 270,810 930,1290 1290,1950
it,| like one is throughput,
|比如吞吐量，所以你买更多的机器，

1341
00:41:50,290 --> 00:41:53,080
0,540 540,990 2280,2430 2430,2610 2610,2790
{} so you buy more

1342
00:41:53,080 --> 00:41:55,030
0,630 660,1140 1140,1290 1290,1620 1620,1950
machines,| hopefully the throughput scales
|希望吞吐量能随着机器数量的增加而增加，

1343
00:41:55,030 --> 00:41:56,170
0,150 150,240 240,510 510,570 570,1140
with the number of machines,|
|

1344
00:41:56,440 --> 00:41:57,850
0,390 390,810 810,1140 1140,1320 1320,1410
but there's another sort of
但是还有另一种外貌表演的形式，

1345
00:41:57,850 --> 00:41:59,350
0,210 210,300 300,690 690,1230 1230,1500
part of aspect performances, {}|
|

1346
00:41:59,380 --> 00:42:01,150
0,570 570,930 930,1230 1230,1320 1320,1770
basically much harder to achieve
基本上很难实现，这就是低延迟。

1347
00:42:01,180 --> 00:42:02,620
0,240 240,480 480,570 570,900 900,1440
{} which is low latency.|
|

1348
00:42:05,640 --> 00:42:06,660
0,240 240,360 360,480 480,630 630,1020
{} And this is particularly
这一点在这些网站中尤为重要，

1349
00:42:06,660 --> 00:42:08,070
0,480 480,570 570,720 720,1200 1200,1410
important in these websites,| where
|在那里你有几千台机器

1350
00:42:08,070 --> 00:42:09,180
0,60 60,240 240,630 630,690 690,1110
you have thousands of thousand

1351
00:42:09,180 --> 00:42:10,860
0,660 660,1110 1110,1230 1230,1380 1380,1680
machines| and you know maybe
|您知道，当您单击URL时，可能会有一个用户请求

1352
00:42:10,860 --> 00:42:12,330
0,300 300,570 570,1080 1080,1380 1380,1470
one user request when you

1353
00:42:12,330 --> 00:42:13,950
0,270 270,420 420,510 510,1050 1050,1620
click on a url| actually
|实际上要花费很多这样的机器才能参与

1354
00:42:13,980 --> 00:42:14,940
0,450 450,510 510,660 660,750 750,960
costs a lot of these

1355
00:42:14,940 --> 00:42:16,740
0,330 330,420 420,1140 1560,1740 1740,1800
machines to participate| and if
|如果其中一台机器非常慢，

1356
00:42:16,740 --> 00:42:17,610
0,210 210,270 270,450 450,780 780,870
one of those machines is

1357
00:42:17,610 --> 00:42:18,930
0,240 240,870 870,930 930,1020 1020,1320
very slow,| you know, maybe
|你知道，也许它有一些机械故障，

1358
00:42:18,930 --> 00:42:20,730
0,150 150,810 810,900 900,1380 1380,1800
it has some mechanical issues,|
|

1359
00:42:20,730 --> 00:42:22,200
0,210 210,630 630,1110 1110,1380 1380,1470
where maybe the disk is
其中可能磁盘不是百分之百正常工作

1360
00:42:22,200 --> 00:42:23,640
0,150 150,540 540,780 780,1020 1020,1440
not working a hundred percent|
|

1361
00:42:23,640 --> 00:42:25,320
0,90 90,330 330,570 570,1080 1350,1680
or some other aspects weren't
或者其他一些方面并不是真的很有效，

1362
00:42:25,320 --> 00:42:28,470
0,180 180,630 1620,2580 2580,2820 2820,3150
just really really work well,|
|

1363
00:42:28,560 --> 00:42:30,660
0,420 420,810 810,1230 1230,1860 1920,2100
that one slow machine can
一台速度较慢的机器可能会导致整个用户体验变慢。

1364
00:42:30,660 --> 00:42:32,280
0,360 360,450 450,900 900,1230 1230,1620
cost the whole user experience

1365
00:42:32,280 --> 00:42:33,280
0,90 90,210 210,630
to be slow.|
|

1366
00:42:33,480 --> 00:42:34,950
0,330 330,570 570,630 630,1110 1110,1470
And this is often referred
这通常被称为尾部延迟。

1367
00:42:34,950 --> 00:42:36,460
0,90 90,240 240,450 450,930
to as tail latency.|
|

1368
00:42:37,540 --> 00:42:39,160
0,480 480,1050 1050,1110 1110,1530 1530,1620
And as a concern that
作为一种会反复出现的担忧，

1369
00:42:39,160 --> 00:42:40,270
0,120 120,420 420,660 660,960 960,1110
will show up over and

1370
00:42:40,270 --> 00:42:42,460
0,390 390,480 480,1020 1020,1470 1470,2190
over,| you know throughout the
|你知道在整个学期里，

1371
00:42:43,030 --> 00:42:44,440
0,480 480,630 630,780 780,1170 1170,1410
semester,| as we discuss different
|当我们讨论不同的机器时

1372
00:42:44,440 --> 00:42:45,880
0,390 390,630 750,1020 1020,1260 1260,1440
machines| and even shows up
|甚至出现在今天的报纸MapReduce的报纸上。

1373
00:42:45,880 --> 00:42:47,830
0,150 150,300 300,630 630,1170 1350,1950
in the today's paper, {}

1374
00:42:47,830 --> 00:42:49,340
0,210 210,390 390,630 630,1020
the {mapreduce -} paper.|
|

1375
00:42:50,180 --> 00:42:51,290
0,180 180,360 360,540 540,810 810,1110
So one other final topic
所以另一个最后的话题将会展示很多东西，

1376
00:42:51,290 --> 00:42:52,610
0,90 90,180 180,480 480,930 930,1320
that will show a lot,|
|

1377
00:42:52,670 --> 00:42:54,860
0,1050 1470,1680 1680,1890 1890,2010 2010,2190
{} at least in the
至少在课堂上，

1378
00:42:54,860 --> 00:42:57,080
0,870 870,1410 1410,1530 1530,1950 1950,2220
class,| particularly the lab is
|特别是实验室的实施方面

1379
00:42:57,080 --> 00:42:58,380
0,750
implementation

1380
00:43:01,900 --> 00:43:04,240
0,690 690,1080 1290,1830 1830,1980 1980,2340
aspects| and here goes really
|这就是你知道的如何管理并发性，

1381
00:43:04,240 --> 00:43:05,410
0,330 330,420 420,900 900,1050 1050,1170
how to manage you know

1382
00:43:05,410 --> 00:43:07,270
0,840 840,1080 1080,1230 1230,1560 1560,1860
concurrency,| how to do remote
|如何实现远程过程调用，

1383
00:43:07,270 --> 00:43:10,270
0,360 360,570 570,1380 1680,2340 2460,3000
procedure call implementation, { -}|
|

1384
00:43:10,270 --> 00:43:11,620
0,270 270,570 570,1080 1080,1110 1110,1350
and just building {distributed -}
只需自己构建分布式系统，

1385
00:43:11,620 --> 00:43:13,300
0,420 420,570 570,1170 1170,1380 1380,1680
systems by themselves,| gonna have
|实际上会面临严重的实施挑战

1386
00:43:13,300 --> 00:43:15,400
0,480 480,600 600,1020 1020,1560 1560,2100
actually a serious implementation challenges|
|

1387
00:43:15,400 --> 00:43:16,840
0,270 270,420 420,630 630,810 810,1440
and that will come over
这会在整个学期一遍又一遍地发生。

1388
00:43:16,840 --> 00:43:18,280
0,90 90,390 390,510 510,960 1050,1440
and over and over throughout

1389
00:43:18,280 --> 00:43:19,280
0,90 90,540
the semester.|
|

1390
00:43:19,970 --> 00:43:21,170
0,240 240,570 570,720 720,960 960,1200
{You,know} partly it's because we
您知道，部分原因是我们希望在容错方面实现性能一致性

1391
00:43:21,170 --> 00:43:22,760
0,150 150,210 210,570 570,1050 1050,1590
want to achieve performance consistency

1392
00:43:22,760 --> 00:43:24,620
0,90 90,630 630,690 690,1110 1170,1860
in {fault,tolerance}| and depression crashes
|抑郁崩溃，崩溃同时发生，

1393
00:43:24,650 --> 00:43:26,990
0,600 600,810 810,1530 1560,1950 1950,2340
crashes in concurrency,| which makes
|这使得驱动器变得非常复杂。

1394
00:43:26,990 --> 00:43:28,960
0,420 420,750 750,1440
just drive complexity.|
|

1395
00:43:30,740 --> 00:43:31,370
0,150 150,330 330,390 390,480 480,630
So those are the main
所以这些都是主要的主题。

1396
00:43:31,370 --> 00:43:32,500
0,630
topics.|
|

1397
00:43:33,050 --> 00:43:36,700
0,270 270,1080 1140,1590 1590,2010
Any questions about {}
对这部分有什么问题吗？

1398
00:43:36,790 --> 00:43:39,320
0,210 210,990
this part?|
|

1399
00:43:44,790 --> 00:43:47,160
0,330 330,1260 1260,1680 1680,1950 1950,2370
Okay, then {let's,sort,of} dive in|
好的，那我们就开始潜水吧|

1400
00:43:47,550 --> 00:43:49,710
0,810 810,1170 1170,1260 1260,1830 1890,2160
and look at the first
请看第一个案例研究

1401
00:43:49,710 --> 00:43:52,260
0,180 180,630 780,2040 2070,2370 2370,2550
case study| and through the
|并通过MapReduce论文。

1402
00:43:52,260 --> 00:43:53,660
0,150 150,450 450,870
{mapreduce -} paper.|
|

1403
00:44:02,580 --> 00:44:05,040
0,480 480,780 780,1260 1320,2190 2220,2460
Then there's an illustration of
然后是6.824中的许多主题的插图，

1404
00:44:05,040 --> 00:44:06,540
0,240 240,330 330,390 390,960 990,1500
many of the topics in

1405
00:44:06,540 --> 00:44:07,860
0,210 210,390 390,690 690,810 810,1320
{6.824 - -},| you know
|你知道我们要讨论的是容错，

1406
00:44:07,890 --> 00:44:09,030
0,510 510,660 660,750 750,960 960,1140
we're gonna be talking about

1407
00:44:09,030 --> 00:44:09,900
0,150 150,600 600,690 690,810 810,870
fault tolerance,| we're going to
|我们将讨论性能和尾部延迟，

1408
00:44:09,900 --> 00:44:12,150
0,240 240,660 690,1590 1590,1890 2010,2250
talk about performance and tail

1409
00:44:12,150 --> 00:44:13,860
0,690 870,1200 1200,1500 1500,1650 1650,1710
latency,| {} all kinds of
|我们整个学期实际上看到的各种各样的问题

1410
00:44:13,860 --> 00:44:15,510
0,330 330,510 510,1020 1020,1380 1380,1650
issues that actually {} we

1411
00:44:15,510 --> 00:44:16,860
0,390 390,780 780,840 840,1260 1260,1350
see throughout the semester| and
|我们将看到一次削减或一个系统来处理这一问题。

1412
00:44:16,860 --> 00:44:17,880
0,120 120,240 240,510 510,900 900,1020
we'll see one cut or

1413
00:44:17,880 --> 00:44:18,960
0,210 210,600 600,720 720,990 990,1080
one system that deals with

1414
00:44:18,960 --> 00:44:19,580
0,210
that.|
|

1415
00:44:20,040 --> 00:44:22,650
0,630 990,1530 1560,1740 1740,2430 2430,2610
{} So good illustration with
很多主题都很好地说明了这一点。

1416
00:44:22,650 --> 00:44:24,260
0,210 210,330 330,390 390,1050
many of the topics.|
|

1417
00:44:28,340 --> 00:44:30,290
0,300 300,570 570,810 810,1230 1230,1950
The paper also very influential.|
这篇论文也很有影响力。|

1418
00:44:30,980 --> 00:44:33,880
0,720

1419
00:44:35,650 --> 00:44:37,930
0,840 840,1140 1140,1530 1530,1800 1800,2280
Although Google internally doesn't use
虽然谷歌内部并没有完全使用本文描述的MapReduce，

1420
00:44:37,930 --> 00:44:39,490
0,330 330,810 810,990 990,1350 1350,1560
{mapreduce -} {} described {in,this}

1421
00:44:39,490 --> 00:44:40,630
0,270 270,750 750,840 840,960 960,1140
paper exactly,| you know they
|你知道，他们有，你知道，直接从这个MapReduce系统派生的系统，

1422
00:44:40,630 --> 00:44:42,370
0,420 450,510 510,960 960,1350 1350,1740
have you know systems directly

1423
00:44:42,370 --> 00:44:44,110
0,750 750,870 870,1020 1020,1230 1230,1740
derived from this {mapreduce -}

1424
00:44:44,110 --> 00:44:45,580
0,480 660,900 900,1050 1050,1140 1140,1470
system,| that they are still
|他们仍然在日常使用，

1425
00:44:45,580 --> 00:44:47,320
0,300 300,990 1140,1530 1530,1680 1680,1740
using day-to-day,| {} there are
|还有其他库看起来很像MapReduce，

1426
00:44:47,320 --> 00:44:50,050
0,450 450,1470 1530,2400 2400,2580 2580,2730
other {} libraries that look

1427
00:44:50,050 --> 00:44:51,820
0,30 30,300 300,630 630,1200 1200,1770
a lot like {mapreduce -},|
|

1428
00:44:51,820 --> 00:44:53,650
0,300 300,750 750,900 900,1290 1290,1830
{} that are widely used,|
它们被广泛使用，|

1429
00:44:54,010 --> 00:44:55,630
0,330 330,480 480,690 690,1320 1320,1620
and it also inspires different
它还启发了除MapReduce本身之外的不同类型的计算模型

1430
00:44:55,630 --> 00:44:57,760
0,270 270,360 360,960 960,1590 1590,2130
types of computational models other

1431
00:44:57,760 --> 00:44:59,800
0,420 420,630 630,900 900,1530 1620,2040
than {mapreduce -} itself| and
|我们会在本学期晚些时候看到更多的一到两个，

1432
00:44:59,800 --> 00:45:00,760
0,270 270,570 570,810 810,870 870,960
we'll see one or two

1433
00:45:00,760 --> 00:45:02,350
0,540 570,1080 1080,1140 1140,1200 1200,1590
more later in the semester,|
|

1434
00:45:02,350 --> 00:45:04,540
0,330 420,990 990,1440 1440,1860
so hugely influential paper.|
如此有影响力的报纸。|

1435
00:45:04,960 --> 00:45:06,360
0,840

1436
00:45:06,360 --> 00:45:07,260
0,90 90,210 210,600 600,780 780,900
And then finally it is
最后，这实际上是第一个实验的主题，

1437
00:45:07,260 --> 00:45:08,610
0,300 300,420 420,870 900,1140 1140,1350
actually the topic of lab

1438
00:45:08,610 --> 00:45:10,080
0,510 630,960 960,1080 1080,1290 1290,1470
one,| which is another good
|这是谈论它的另一个很好的理由。

1439
00:45:10,080 --> 00:45:11,670
0,270 270,690 720,1080 1080,1320 1320,1590
reason to talk about it.|
|

1440
00:45:12,400 --> 00:45:13,840
0,90 90,450 450,840 840,1260 1260,1440
{} Many probably have you
很多人可能已经看过MapReduce的论文，

1441
00:45:13,840 --> 00:45:15,400
0,210 210,810 990,1080 1080,1260 1260,1560
have seen the {mapreduce -}

1442
00:45:15,400 --> 00:45:17,080
0,540 540,1110 1140,1500 1500,1620 1620,1680
paper,| {} shows up in
|出现在6.033中，

1443
00:45:17,290 --> 00:45:18,520
0,360 360,810 810,900 900,1170 1170,1230
{6.033 -},| if you're an
|如果你是麻省理工学院的本科生，

1444
00:45:18,520 --> 00:45:20,710
0,510 510,660 660,780 780,1380 1650,2190
undergrad here at MIT, {}|
|

1445
00:45:20,710 --> 00:45:21,910
0,600 600,720 720,840 840,930 930,1200
otherwise you might have seen
否则你可能会在其他地方看到，

1446
00:45:21,910 --> 00:45:24,400
0,120 120,300 300,900 1140,1710 1980,2490
in other places,| {} yeah,
|是的，但是我们要比6.033稍微深入一点，

1447
00:45:24,400 --> 00:45:25,750
0,180 180,600 600,780 780,1050 1050,1350
but we're gonna go a

1448
00:45:25,780 --> 00:45:27,790
0,240 240,360 360,750 750,750 1770,2010
little bit deeper {} than

1449
00:45:27,790 --> 00:45:28,900
0,90 90,390 390,660 660,900 900,1110
for example {6.033 -},| because
|因为您实际上必须实现自己的MapReduce库

1450
00:45:28,900 --> 00:45:30,040
0,90 90,330 330,480 480,570 570,1140
you actually have to implement

1451
00:45:30,070 --> 00:45:31,660
0,360 360,570 570,780 780,1080 1080,1590
your own {mapreduce -} library|
|

1452
00:45:31,660 --> 00:45:34,000
0,390 600,1230 1230,1560 1560,1740 1740,2340
and {} and as always
而且和往常一样，当你实施一些东西时，

1453
00:45:34,000 --> 00:45:36,190
0,270 270,510 510,930 930,1440 1440,2190
when you implement something, {}|
|

1454
00:45:37,320 --> 00:45:38,400
0,450 450,690 690,810 810,930 930,1080
problems that you know you
你知道你可能不会认真考虑的问题

1455
00:45:38,400 --> 00:45:39,540
0,150 150,420 420,720 720,960 960,1140
might not really thought hard

1456
00:45:39,540 --> 00:45:42,030
0,450 720,1650 1650,1890 1890,2220 2220,2490
about| before {you,know} certainly start
|在你知道之前肯定会突然冒出来。

1457
00:45:42,030 --> 00:45:43,120
0,270 270,570
popping up.|
|

1458
00:45:43,210 --> 00:45:44,230
0,210 210,390 390,780 780,900 900,1020
And so by the end
所以到了最后，

1459
00:45:44,230 --> 00:45:45,370
0,90 90,210 210,360 360,600 600,1140
of it,| you really understand
|你真的明白MapReduce。

1460
00:45:45,610 --> 00:45:46,840
0,180 180,720
that mapreduce.|
|

1461
00:45:50,080 --> 00:45:51,680
0,390 390,1050
Any questions?|
有什么问题吗？|

1462
00:45:53,390 --> 00:45:54,380
0,480

1463
00:46:04,480 --> 00:46:05,290
0,390 390,540 540,630 630,750 750,810
Okay, let me give you
好的，让我给你一点背景，

1464
00:46:05,290 --> 00:46:06,430
0,150 150,330 330,450 450,540 540,1140
a little bit of context,|
|

1465
00:46:06,430 --> 00:46:08,080
0,150 150,270 270,810 1140,1440 1440,1650
you know for {} this
你知道，对于这份报纸来说，

1466
00:46:08,080 --> 00:46:09,310
0,450 480,690 690,900 900,1170 1170,1230
paper,| so this paper is
|这篇论文是由谷歌的两位工程师撰写的，

1467
00:46:09,310 --> 00:46:11,050
0,240 240,570 570,810 810,1020 1020,1740
written by {you,know} two {}

1468
00:46:11,110 --> 00:46:14,340
0,570 570,900 900,1440 1470,2280
engineers from {} Google,|
|

1469
00:46:14,370 --> 00:46:18,390
0,540 540,1200 1500,2250 2400,3150 3480,4020
very well-known,| {} and the
非常有名，|背景是早期的数据中心，

1470
00:46:18,420 --> 00:46:19,380
0,420 420,510 510,690 690,780 780,960
context is sort of the

1471
00:46:19,380 --> 00:46:21,600
0,270 270,510 510,810 1200,1920 1920,2220
early data centers,| Google has
|谷歌有一个建立万维网反向索引所需的搜索引擎

1472
00:46:21,600 --> 00:46:24,360
0,450 870,1260 1260,1770 2010,2670 2670,2760
a search engine needed to

1473
00:46:24,360 --> 00:46:27,000
0,540 570,1110 1290,1920 1920,2490 2520,2640
build {} reverse index of

1474
00:46:27,000 --> 00:46:28,110
0,90 90,240 240,450 450,810 810,1110
the world wide web| to
|基本上允许用户查询互联网

1475
00:46:28,110 --> 00:46:30,150
0,510 510,1110 1110,1470 1470,1650 1650,2040
basically allow users to query

1476
00:46:30,150 --> 00:46:33,360
0,120 120,570 1170,1770 1770,2580 2850,3210
the Internet| and these kind
|而这些计算，

1477
00:46:33,360 --> 00:46:34,980
0,60 60,840 840,960 960,1320 1320,1620
of computations,| {you,know} take multi
|你知道要跑好几个小时，

1478
00:46:34,980 --> 00:46:36,560
0,300 300,390 390,810
hours to run,|
|

1479
00:46:42,480 --> 00:46:43,740
0,480 480,840 840,990 990,1110 1110,1260
{} in the you know
在处理TB级数据的过程中，

1480
00:46:43,740 --> 00:46:45,800
0,510 510,1050 1050,1110 1110,1470
process terabytes of data,|
|

1481
00:46:49,600 --> 00:46:51,600
0,120 120,300 300,390 390,1290
holding {of -} complications
保存复杂的TB级数据，TB级数据。

1482
00:46:55,400 --> 00:46:57,260
0,180 180,720 720,780 780,1290 1620,1860
{} terabyte of data, terabyte

1483
00:46:57,260 --> 00:46:59,540
0,660 660,1050
of data.|
|

1484
00:47:01,320 --> 00:47:03,510
0,210 210,360 360,1170 1170,1500 1500,2190
And so think web indexing
所以想想网络索引，网络爬行，特别是网络索引。

1485
00:47:03,540 --> 00:47:05,760
0,240 240,900 900,1560
web crawling {all,of,this},

1486
00:47:06,310 --> 00:47:08,380
0,600 600,810 810,1290
particularly web indexing.|
|

1487
00:47:08,500 --> 00:47:09,070
0,180 180,270 270,420 420,510 510,570
So if one of the
因此，如果其中一个[驾驶]应用程序，

1488
00:47:09,070 --> 00:47:11,440
0,300 300,840 1260,1740 1740,2220 2250,2370
[driving] application,| {} in you
|在你所知道的谷歌，你知道，你知道，在内部构建这样的应用程序，

1489
00:47:11,440 --> 00:47:12,790
0,90 90,330 330,870 870,960 960,1350
know as Google {you,know} build

1490
00:47:12,790 --> 00:47:15,250
0,180 180,360 360,540 900,1710 1710,2460
these sort of applications internally,|
|

1491
00:47:15,400 --> 00:47:17,380
0,360 360,420 420,570 570,1410 1410,1980
{} you know Sanjay and
你知道桑杰和杰弗里·迪恩，你知道这两个提议，

1492
00:47:17,380 --> 00:47:18,340
0,180 180,480 480,570 570,690 690,960
Jeffrey Dean, you know the

1493
00:47:18,340 --> 00:47:19,870
0,120 120,540 810,1350 1350,1440 1440,1530
two offers,| {} you know
|你知道他们在这方面很在行，

1494
00:47:19,870 --> 00:47:20,530
0,120 120,240 240,450 450,570 570,660
they were very good at

1495
00:47:20,530 --> 00:47:21,640
0,120 120,270 270,330 330,990 990,1110
that kind of stuff,| but
|但他们发现基本上，

1496
00:47:21,640 --> 00:47:24,670
0,120 120,840 840,1470 1710,2310 2700,3030
they discovered basically,| {} {there,are}
|还有许多其他谷歌工程师也想要编写这类特定类型的应用程序，

1497
00:47:24,670 --> 00:47:25,810
0,120 120,300 300,540 540,1050 1050,1140
many other Google engineers who

1498
00:47:25,990 --> 00:47:27,070
0,420 420,510 510,690 690,900 900,1080
wanted to write those kind

1499
00:47:27,070 --> 00:47:28,480
0,90 330,690 690,900 900,960 960,1410
of certain types of applications

1500
00:47:28,480 --> 00:47:29,200
0,180 180,300 300,540 540,600 600,720
too,| they wanted to be
|他们希望能够对所有被爬行的网页编写自己的数据分析。

1501
00:47:29,200 --> 00:47:30,160
0,270 270,390 390,570 570,720 720,960
able to write their own

1502
00:47:30,160 --> 00:47:32,350
0,270 270,1050 1170,1470 1470,1770 1770,2190
data analysis over all the

1503
00:47:32,380 --> 00:47:33,370
0,150 150,510 510,660 660,810 810,990
web pages that had been

1504
00:47:33,370 --> 00:47:34,300
0,540
crawled.|
|

1505
00:47:34,390 --> 00:47:36,610
0,450 450,750 750,1140 1380,2040 2040,2220
{} And so, {} and
因此，他们意识到编写这类应用程序是很困难的，

1506
00:47:36,610 --> 00:47:38,020
0,180 180,600 600,930 930,1260 1260,1410
they realize {you,know} writing these

1507
00:47:38,020 --> 00:47:39,760
0,240 240,420 450,1080 1080,1170 1170,1740
kinds of applications is difficult,|
|

1508
00:47:39,850 --> 00:47:41,470
0,450 450,540 540,720 720,1290 1290,1620
because if you're running multi
因为如果你在许多机器上运行多个小时的计算，

1509
00:47:41,470 --> 00:47:42,940
0,330 330,900 900,1020 1020,1230 1230,1470
hour computation at many many

1510
00:47:42,940 --> 00:47:44,770
0,630 720,990 990,1080 1080,1440 1440,1830
machines,| it is very likely
|很有可能其中一台机器会在计算过程中崩溃

1511
00:47:44,770 --> 00:47:45,640
0,120 120,330 330,390 390,570 570,870
that one of those machines

1512
00:47:45,640 --> 00:47:46,720
0,120 120,570 570,660 660,750 750,1080
will crash you know during

1513
00:47:46,720 --> 00:47:48,820
0,180 180,930 1170,1320 1320,1770 1770,2100
that computation| and therefore you
|因此，您必须制定一些容错计划

1514
00:47:48,820 --> 00:47:50,170
0,180 180,570 600,840 840,960 960,1350
have to build in some

1515
00:47:50,200 --> 00:47:51,970
0,390 390,480 480,690 690,1290 1350,1770
plan for fault tolerance| and
|你知道一旦你开始这么做，

1516
00:47:52,330 --> 00:47:53,410
0,360 360,660 660,750 750,900 900,1080
{} and you know once

1517
00:47:53,410 --> 00:47:54,700
0,120 120,300 300,480 480,900 900,1290
you start doing that,| basically
|基本上要求您基本上已经掌握了大约6.824，并且能够构建这种复杂的系统

1518
00:47:54,700 --> 00:47:56,200
0,540 540,660 660,750 750,1380 1380,1500
requires that you basically have

1519
00:47:56,200 --> 00:47:57,310
0,270 270,540 540,690 690,960 960,1110
taken something like {6.824 -

1520
00:47:57,310 --> 00:47:59,200
0,510 720,1140 1140,1350 1350,1770 1770,1890
-} {} and able to

1521
00:47:59,200 --> 00:48:01,450
0,450 690,870 870,1230 1230,1740 1770,2250
build these kinds of complicated

1522
00:48:01,450 --> 00:48:03,760
0,630 930,1500 1500,1890 1890,2160 2160,2310
systems| and their goal was
|他们的目标基本上是走出这种困境

1523
00:48:03,760 --> 00:48:04,690
0,420 420,510 510,690 690,870 870,930
basically to get out of

1524
00:48:04,690 --> 00:48:05,700
0,270 270,420 420,600
that sort of

1525
00:48:05,790 --> 00:48:08,970
0,750 960,1950 1980,2760 2790,3090 3090,3180
{} dilemma| and make it
|并使非专家编写分布式应用程序在视觉上变得容易。

1526
00:48:08,970 --> 00:48:11,880
0,420 420,1020 1470,1920 1920,2250 2250,2910
visually easy for {non-experts -}

1527
00:48:17,190 --> 00:48:19,650
0,600 600,840 840,1380 1380,1770 1770,2460
{} to write distributed applications.|
|

1528
00:48:20,700 --> 00:48:22,140
0,630 660,930 930,1080 1080,1320 1320,1440
{} Yeah, so that's the
是的，这就是这篇论文的动机，

1529
00:48:22,140 --> 00:48:24,960
0,750 840,1470 1470,1710 1710,1980 1980,2820
motivation {} for this, {}

1530
00:48:25,290 --> 00:48:27,780
0,1230 1260,1380 1380,1740 1740,2130 2130,2490
for this paper,| and why
|以及为什么你对此非常兴奋，

1531
00:48:27,780 --> 00:48:29,160
0,90 90,600 600,810 810,1140 1140,1380
you are very excited about

1532
00:48:29,160 --> 00:48:30,180
0,150 300,480 480,600 600,660 660,1020
it,| and so the approach
|所以他们采取的方法，

1533
00:48:30,180 --> 00:48:31,300
0,150 150,660
they take,|
|

1534
00:48:32,180 --> 00:48:34,370
0,300 300,660 660,990 990,1410 1710,2190
{} that mapreduce take is,|
MapReduce采用的是，|

1535
00:48:34,430 --> 00:48:35,870
0,630 630,870 870,990 990,1290 1290,1440
{} it is not a
它不是一个通用库，

1536
00:48:35,870 --> 00:48:38,180
0,330 330,900 930,1590 1590,1710 1710,2310
general purpose library,| you can't
|你不能接受任何申请

1537
00:48:38,390 --> 00:48:41,180
0,450 450,660 660,1500 1500,1950 2220,2790
take any application| and {}
|并使用MapReduce实际上使其具有基本的容错能力。

1538
00:48:41,180 --> 00:48:42,680
0,240 240,450 450,840 840,1050 1050,1500
use {mapreduce -} to actually

1539
00:48:42,680 --> 00:48:44,000
0,180 180,240 240,600 600,810 810,1320
make it basically fault tolerance.|
|

1540
00:48:44,620 --> 00:48:46,360
0,330 330,690 840,1380 1380,1530 1530,1740
And so, {} it has
因此，它必须写成一种特殊的风格，

1541
00:48:46,360 --> 00:48:46,870
0,60 60,180 180,360 360,450 450,510
to be written in a

1542
00:48:46,870 --> 00:48:48,310
0,390 390,840 840,1080 1080,1200 1200,1440
particular style,| {namely -} using
|即使用这些MAP函数和REDUE函数

1543
00:48:48,310 --> 00:48:50,140
0,180 180,420 420,1170 1200,1500 1500,1830
these map functions and reduce

1544
00:48:50,140 --> 00:48:51,970
0,660 1080,1200 1200,1410 1410,1770 1770,1830
functions| and those functions are
|这些函数基本上是功能性的或无状态的。

1545
00:48:51,970 --> 00:48:53,360
0,330 330,870
basically functional

1546
00:48:53,420 --> 00:48:54,840
0,240 240,900
or stateless.|
|

1547
00:48:55,130 --> 00:48:57,830
0,660 840,1650 1860,2250 2250,2400 2400,2700
{} And, {} but those
但是这些都是程序员编写的顺序代码，

1548
00:48:57,830 --> 00:48:59,150
0,360 360,450 450,930 930,1170 1170,1320
are the programmer writes the

1549
00:48:59,150 --> 00:49:03,500
0,300 300,1170 1500,2370
{} sequential code,|
|

1550
00:49:03,920 --> 00:49:08,000
0,840 2400,3090 3090,3450 3450,3570 3570,4080
and {then,hence} these two functions,|
因此这两个函数，|

1551
00:49:08,000 --> 00:49:08,600
0,120 120,210 210,300 300,510 510,600
you know the map and
您知道用于对框架进行排序的map和Reduce函数

1552
00:49:08,600 --> 00:49:09,770
0,60 60,360 360,750 750,960 960,1170
the reduce function to sort

1553
00:49:09,770 --> 00:49:11,120
0,90 90,210 210,810 870,1260 1260,1350
of the framework| and the
|在框架中，MapReduce框架处理所有分布式的[]。

1554
00:49:11,120 --> 00:49:12,800
0,510 510,570 570,780 780,1050 1050,1680
framework, the {mapreduce -} framework

1555
00:49:13,360 --> 00:49:15,220
0,390 390,510 510,750 750,1260 1290,1860
deals with all the distributed

1556
00:49:15,220 --> 00:49:16,140
0,390
[].|
|

1557
00:49:25,110 --> 00:49:26,400
0,210 210,450 450,600 600,1050 1050,1290
So it will arrange that
因此，它将安排您知道应用程序或程序的二进制文件在多台计算机上运行

1558
00:49:26,400 --> 00:49:27,750
0,90 90,240 240,450 450,1200 1200,1350
you know the application or

1559
00:49:27,750 --> 00:49:29,340
0,240 240,750 750,870 870,960 960,1590
the binary for the programs

1560
00:49:29,340 --> 00:49:30,600
0,120 120,360 360,450 450,690 690,1260
are run on many machines|
|

1561
00:49:30,600 --> 00:49:32,040
0,120 120,450 450,720 720,1170 1170,1440
or install demand machines runs
或安装随需应变的计算机可在多台计算机上运行

1562
00:49:32,040 --> 00:49:33,120
0,60 60,240 240,720 720,840 840,1080
on many machines| and deals
|并处理负载平衡，

1563
00:49:33,120 --> 00:49:34,950
0,90 90,360 360,1080 1320,1530 1530,1830
with load balancing,| it deals
|它处理的是某些速度很慢的机器，

1564
00:49:34,950 --> 00:49:35,970
0,180 180,480 480,780 780,930 930,1020
with certain machines that are

1565
00:49:35,970 --> 00:49:37,830
0,690 810,1260 1260,1410 1410,1560 1560,1860
slow,| {} it will deal
|它会处理崩溃的机器，

1566
00:49:37,830 --> 00:49:39,150
0,120 120,180 180,510 510,660 660,1320
with the machines that crash,|
|

1567
00:49:39,270 --> 00:49:40,740
0,180 180,270 270,750 750,990 990,1470
so the application writer itself,|
所以应用程序编写器本身，|

1568
00:49:40,740 --> 00:49:42,000
0,330 330,780 780,960 960,1020 1020,1260
who wrote {} the {mapreduce
编写MapReduce函数的人根本不必担心这一点。

1569
00:49:42,000 --> 00:49:43,470
0,330 330,810 840,1080 1080,1260 1260,1470
-} function don't really have

1570
00:49:43,470 --> 00:49:44,340
0,90 90,180 180,510 510,750 750,870
to be concerned about this

1571
00:49:44,340 --> 00:49:45,140
0,120 120,420
at all.|
|

1572
00:49:45,500 --> 00:49:46,700
0,330 330,540 540,840 840,1020 1020,1200
And they basically get all
他们基本上得到了所有的东西，

1573
00:49:46,700 --> 00:49:47,960
0,120 120,570 660,960 960,1140 1140,1260
that stuff,| {} if you
|如果你愿意透明地。

1574
00:49:47,960 --> 00:49:49,540
0,300 300,1020
will transparently.|
|

1575
00:49:49,830 --> 00:49:51,090
0,360 360,510 510,990 990,1080 1080,1260
{} And again to make
再一次，为了实现这一点，

1576
00:49:51,090 --> 00:49:52,350
0,120 120,660 720,810 810,930 930,1260
that happen,| you know the
|你知道图书馆实际上不是通用的，

1577
00:49:52,350 --> 00:49:54,300
0,330 330,540 540,1020 1020,1380 1380,1950
library actually not general purpose,|
|

1578
00:49:54,510 --> 00:49:55,380
0,180 180,240 240,600 600,690 690,870
so for example you wanted
例如，您想要编写一个键值服务，

1579
00:49:55,380 --> 00:49:56,100
0,60 60,240 240,270 270,420 420,720
to write a key value

1580
00:49:56,100 --> 00:49:57,210
0,510 570,720 720,900 900,1050 1050,1110
service,| you can use the
|您可以使用MapReduce库，

1581
00:49:57,210 --> 00:49:58,530
0,210 210,480 480,840 840,1110 1110,1320
{mapreduce -} library,| because it's
|因为它假设了一种特殊的计算模型

1582
00:49:58,530 --> 00:50:00,660
0,510 510,570 570,960 960,1590 1590,2130
assumes a particular computational model|
|

1583
00:50:00,810 --> 00:50:02,100
0,360 360,690 690,1080 1080,1200 1200,1290
and your application has to
你的申请必须符合这一点，

1584
00:50:02,100 --> 00:50:03,870
0,180 180,300 300,570 1110,1290 1290,1770
fit in that,| the computation
|你知道的计算模型就像你知道他们在谷歌经常看到的一些东西，

1585
00:50:03,870 --> 00:50:05,340
0,570 570,750 750,870 870,1290 1290,1470
model you know it's like

1586
00:50:05,340 --> 00:50:06,150
0,60 60,240 240,540 540,660 660,810
you know something that they

1587
00:50:06,150 --> 00:50:07,290
0,300 300,420 420,810 810,870 870,1140
saw a lot at Google,|
|

1588
00:50:07,290 --> 00:50:08,670
0,210 210,330 330,570 660,1080 1080,1380
which is like people wanted
这就像人们想要做大数据分析一样

1589
00:50:08,670 --> 00:50:10,200
0,60 60,540 630,990 990,1260 1260,1530
to do {} big data

1590
00:50:10,200 --> 00:50:12,180
0,720 720,1110 1110,1650 1650,1920 1920,1980
analysis| on basically all the
|基本上在世界上所有的网页上。

1591
00:50:12,180 --> 00:50:13,320
0,180 180,540 540,630 630,720 720,1140
web pages in the world.|
|

1592
00:50:14,060 --> 00:50:14,870
0,210 210,240 240,510 510,750 750,810
There are many types of
有许多类型的计算只需要处理大量数据

1593
00:50:14,870 --> 00:50:16,040
0,630 630,780 780,930 930,1110 1110,1170
computations that just have to

1594
00:50:16,040 --> 00:50:18,500
0,480 480,1020 1020,1080 1080,1530 1770,2460
process lots of data| and
|并根据该数据计算价值。

1595
00:50:18,500 --> 00:50:20,060
0,600 600,1110 1110,1350 1350,1410 1410,1560
compute values based on that

1596
00:50:20,060 --> 00:50:20,940
0,300
data.|
|

1597
00:50:21,130 --> 00:50:21,910
0,270 270,450 450,570 570,660 660,780
So that's sort of the
这就是MapReduce的目标应用程序类型。

1598
00:50:21,910 --> 00:50:24,130
0,240 240,330 330,960 960,1500 1620,2220
type of applications that {mapreduce

1599
00:50:24,130 --> 00:50:26,040
0,450 450,1200
-} targets.|
|

1600
00:50:26,190 --> 00:50:27,450
0,210 210,570 570,780 780,1080 1080,1260
Any questions about the sort
有没有关于上下文类型的问题

1601
00:50:27,450 --> 00:50:29,670
0,60 60,750 780,1560 1590,1680 1680,2220
of context| and the motivation
|以及本文的写作动机。

1602
00:50:29,670 --> 00:50:31,320
0,210 210,720 720,1110
for this paper.|
|

1603
00:50:41,770 --> 00:50:44,300
0,600 780,1140 1140,1290 1290,1950
Okay, let me proceed.|
好的，让我继续。|

1604
00:50:45,200 --> 00:50:47,090
0,360 360,840 1290,1560 1560,1770 1770,1890
{} So, {} let me
所以，让我先画一个关于正在发生的事情的抽象视图。

1605
00:50:47,090 --> 00:50:47,750
0,210 210,360 360,480 480,600 600,660
first draw a sort of

1606
00:50:47,750 --> 00:50:49,100
0,90 90,660 660,1050 1050,1140 1140,1350
an abstract view of what's

1607
00:50:49,100 --> 00:50:50,300
0,240 240,570
going on.|
|

1608
00:50:50,300 --> 00:50:51,760
0,840

1609
00:50:56,460 --> 00:50:57,630
0,240 240,630 630,750 750,990 990,1170
And then we'll dive into
然后我们将深入探讨更多细节。

1610
00:50:57,630 --> 00:50:58,800
0,180 180,630
more detail.|
|

1611
00:50:59,080 --> 00:51:01,090
0,240 240,720 840,1290 1500,1680 1680,2010
Yeah, so, {} so you,
是的，所以，所以你，你需要有背景

1612
00:51:01,090 --> 00:51:01,840
0,120 120,270 270,390 390,660 660,750
you sort of need to

1613
00:51:01,840 --> 00:51:02,800
0,360 360,570 570,840 840,900 900,960
have in {} in the

1614
00:51:02,800 --> 00:51:06,640
0,510 630,1770 1770,1980 3210,3600 3600,3840
background| {} and understand exactly
|并准确理解MapReduce是如何工作的，

1615
00:51:06,640 --> 00:51:07,840
0,120 120,270 270,540 540,840 840,1200
how {mapreduce -} work,| which
|当你在做实验一的时候，这对你来说是非常重要的，

1616
00:51:07,840 --> 00:51:08,350
0,60 60,180 180,240 240,330 330,510
is going to be very

1617
00:51:08,350 --> 00:51:09,520
0,360 360,480 480,900 900,1080 1080,1170
important for you when you're

1618
00:51:09,520 --> 00:51:11,200
0,180 180,390 390,690 1170,1350 1350,1680
doing lab one,| is there's
|有一堆输入文件

1619
00:51:11,200 --> 00:51:12,310
0,60 60,240 240,300 300,570 570,1110
a bunch of input files|
|

1620
00:51:12,370 --> 00:51:14,170
0,120 120,480 480,690 690,1230 1410,1800
{you,know} whatever {f1 -} {f2
你知道什么f1，f2，f3，比方说。

1621
00:51:14,170 --> 00:51:16,810
0,630 960,1590 1590,1950 1980,2250 2250,2640
-} {f3 -}, let's say.|
|

1622
00:51:17,240 --> 00:51:17,780
0,120 120,270 270,360 360,480 480,540
Of course, there're going to
当然，在谷歌的案例中，会有更多的人，

1623
00:51:17,780 --> 00:51:18,740
0,60 60,270 270,510 510,840 840,960
be many, many more in

1624
00:51:18,740 --> 00:51:20,270
0,300 300,720 720,960 960,1350 1350,1530
Google's case,| yeah but just
|是的，但只是出于教学上的原因，

1625
00:51:20,270 --> 00:51:22,220
0,240 240,870 870,1290 1290,1560 1560,1950
for pedagogical reasons,| you're gonna
|你要和我的展台一样大小的地方，

1626
00:51:22,250 --> 00:51:25,580
0,600 810,1890 1890,1980 1980,2280 2580,3330
and site of the size

1627
00:51:25,580 --> 00:51:27,380
0,90 90,510 510,1020 1020,1500 1500,1800
of my display,| I just
|我只有三份文件。

1628
00:51:27,380 --> 00:51:29,020
0,420 420,660 660,1200
have three files.|
|

1629
00:51:29,310 --> 00:51:31,320
0,570 630,1230 1230,1650 1650,1860 1860,2010
And, {} basically every, for
而且基本上每个文件都是由这个映射函数逐个映射处理的，

1630
00:51:31,320 --> 00:51:34,290
0,240 240,810 1260,2070 2070,2640 2640,2970
every file is processed by

1631
00:51:34,290 --> 00:51:36,240
0,600 660,1140 1140,1320 1320,1590 1590,1950
this map by map function,|
|

1632
00:51:36,240 --> 00:51:37,470
0,330 360,780 780,990 990,1140 1140,1230
so one written by a
所以一个由程序员编写

1633
00:51:37,470 --> 00:51:40,050
0,750 1050,1830 1830,1920 1920,2400 2400,2580
programmer| and {you,know} produce some
|你知道产生一些输出，所以中间输出，

1634
00:51:40,050 --> 00:51:40,980
0,480
output,

1635
00:51:41,070 --> 00:51:42,930
0,180 180,660 660,990 1260,1440 1440,1860
so intermediate output,| for example
|例如，讨论MapReduce的经典示例是字数计数，

1636
00:51:42,930 --> 00:51:44,820
0,150 150,570 570,1050 1050,1380 1380,1890
the classic example to {}

1637
00:51:45,300 --> 00:51:46,620
0,450 450,630 630,990 990,1110 1110,1320
discuss {mapreduce -} is word

1638
00:51:46,620 --> 00:51:48,960
0,360 690,1110 1110,1800 1800,2130 2130,2340
count,| basically counting how many
|基本上计算一个词在数据集中出现的次数

1639
00:51:48,960 --> 00:51:50,970
0,390 390,480 480,930 930,1560 1560,2010
times a word occurs in

1640
00:51:50,970 --> 00:51:53,100
0,630 660,1080 1080,1380 1380,1500 1500,2130
the data set| or dataset
|或数据集由许多很多文件组成，

1641
00:51:53,100 --> 00:51:54,030
0,270 270,360 360,540 540,720 720,930
consists of many many, many

1642
00:51:54,030 --> 00:51:55,980
0,510 1020,1200 1200,1260 1260,1680 1680,1950
files,| so for example like
|例如，如您所知，我们正在对文件1运行字数统计函数

1643
00:51:55,980 --> 00:51:57,990
0,90 90,780 810,990 990,1530 1560,2010
you know we're running the

1644
00:51:58,020 --> 00:51:59,760
0,300 300,540 540,1020 1020,1500 1500,1740
word count function on file

1645
00:51:59,760 --> 00:52:01,440
0,420 540,720 720,780 780,930 930,1680
one| and it will produce
|它将为每个单词生成和和键值对

1646
00:52:01,740 --> 00:52:03,480
0,330 330,510 510,780 780,1380
{} for every word

1647
00:52:03,480 --> 00:52:05,700
0,390 390,1260 1260,1500 1500,1950 1980,2220
{} and and a key

1648
00:52:05,700 --> 00:52:06,870
0,300 300,660 690,960 960,1020 1020,1170
value pair| and the key
|密钥值对由密钥组成

1649
00:52:06,870 --> 00:52:08,190
0,300 300,690 690,990 990,1050 1050,1320
value pair consists the key|
|

1650
00:52:08,190 --> 00:52:09,390
0,90 90,300 300,420 420,870 1050,1200
in which the word in
其中第一条中的词，

1651
00:52:09,390 --> 00:52:10,840
0,390 390,840
count one,|
|

1652
00:52:11,990 --> 00:52:13,610
0,480 480,690 690,930 930,1290 1290,1620
if can a appeared multiple
如果A可以在该文件F1中出现多次，

1653
00:52:13,610 --> 00:52:14,780
0,360 360,450 450,570 570,1020 1020,1170
times in this file {f1

1654
00:52:14,780 --> 00:52:16,700
0,450 450,1020 1020,1140 1140,1410 1410,1920
-},| {you,know,it} would be multiple|
|你知道会有很多人|

1655
00:52:16,700 --> 00:52:18,140
0,120 120,450 450,780 810,1290 1290,1440
and record for multiple key
并且多个键值对的记录变为A1。

1656
00:52:18,140 --> 00:52:20,180
0,360 360,810 810,990 990,1500
value pairs goes a1.|
|

1657
00:52:21,460 --> 00:52:22,630
0,480 480,600 600,780 780,1080 1080,1170
{} And so maybe you
所以你可能知道这个文件由很多单词组成

1658
00:52:22,630 --> 00:52:23,650
0,120 120,270 270,690 690,1020 1020,1020
know this file consists of

1659
00:52:23,650 --> 00:52:24,850
0,420 420,720 720,840 840,900 900,1200
many words| going to maybe
|可能会变成a，1和b，1，

1660
00:52:24,850 --> 00:52:26,860
0,510 540,930 930,1530 1530,1890 1890,2010
as {a,,1 -} and {b,,1

1661
00:52:26,860 --> 00:52:28,450
0,240 480,810 810,990 990,1140 1140,1590
-},| {so,the,file} contains two words,|
|所以这个文件包含两个词，|

1662
00:52:29,170 --> 00:52:30,430
0,510 510,570 570,660 660,1170 1170,1260
{} you know similar you
你知道，类似的，你知道，的函数映射函数对文件f2做同样的事情

1663
00:52:30,430 --> 00:52:32,350
0,150 150,390 420,1020 1350,1650 1650,1920
know the function map function

1664
00:52:32,350 --> 00:52:33,760
0,660 690,870 870,960 960,1170 1170,1410
for does the same thing

1665
00:52:33,760 --> 00:52:35,050
0,360 360,480 480,810 810,960 960,1290
for the file {f2 -}|
|

1666
00:52:35,050 --> 00:52:35,890
0,150 150,300 300,570 570,690 690,840
and will produce some key
并将产生一些关键值

1667
00:52:35,890 --> 00:52:37,270
0,390 390,480 480,660 660,930 930,1380
values| and let's say maybe
|假设可能只有b这个词在文件中出现了一次。

1668
00:52:37,270 --> 00:52:38,470
0,210 210,600 600,690 690,900 900,1200
there's only the word b

1669
00:52:38,470 --> 00:52:39,980
0,360 360,450 450,570 570,1050
appears in the file

1670
00:52:40,010 --> 00:52:41,840
0,420 420,1020
{} once.|
|

1671
00:52:42,040 --> 00:52:42,970
0,150 150,450 450,600 600,780 780,930
And maybe you know {f3
也许您知道f3，map函数也会运行到文件f3中

1672
00:52:42,970 --> 00:52:45,790
0,510 630,1500 1620,1890 1890,1890 2460,2820
-}, { -} the map

1673
00:52:45,790 --> 00:52:47,020
0,300 300,570 570,780 780,930 930,1230
function also runs into file

1674
00:52:47,020 --> 00:52:50,020
0,150 150,600 990,1710 1920,2310 2310,3000
{f3 -}| and let's assume,
|让我们假设，让我们假设短语a只出现了一次

1675
00:52:50,020 --> 00:52:51,610
0,150 150,390 390,660 660,1080 1110,1590
let's just where the phrases

1676
00:52:51,610 --> 00:52:52,840
0,360 360,690 690,810 810,1110 1110,1230
assume that a shows up

1677
00:52:52,840 --> 00:52:55,420
0,630 900,1590 1590,1800 1800,2100 2100,2580
once| and {you,know} word c
|你知道c这个词只出现过一次。

1678
00:52:55,420 --> 00:52:56,840
0,300 300,390 390,840
shows up once.|
|

1679
00:52:57,780 --> 00:52:59,610
0,210 210,960 960,1140 1140,1320 1320,1830
So basically {you,know,these} map functions
所以基本上你知道这些地图功能都是并行运行的，

1680
00:52:59,610 --> 00:53:02,010
0,240 240,510 510,1260 1350,1980 1980,2400
all running parallel,| completely independent
|彼此完全独立，

1681
00:53:02,010 --> 00:53:02,910
0,90 90,210 210,570 570,660 660,900
of each other,| and there's
|它们之间在输入文件上没有通信，

1682
00:53:02,910 --> 00:53:04,860
0,330 330,840 840,1140 1140,1530 1560,1950
no communication between them on

1683
00:53:04,860 --> 00:53:06,510
0,120 120,420 420,990 1350,1530 1530,1650
their input files,| so this
|所以这将有望给我们带来高吞吐量

1684
00:53:06,510 --> 00:53:07,200
0,60 60,180 180,240 240,420 420,690
is going to give us

1685
00:53:07,230 --> 00:53:08,970
0,450 450,660 660,1260 1290,1620 1620,1740
hopefully high throughput| or you
|或者您知道焦虑扩展了更大的数据集

1686
00:53:08,970 --> 00:53:10,980
0,330 330,630 630,1170 1170,1380 1380,2010
know anxious scaled much much

1687
00:53:10,980 --> 00:53:12,840
0,360 360,600 600,990 1470,1740 1740,1860
bigger data sets| and they
|他们在这些中间值的基础上产生

1688
00:53:12,840 --> 00:53:14,700
0,390 390,510 510,690 690,1200 1200,1860
produced on these intermediate values|
|

1689
00:53:14,730 --> 00:53:16,230
0,330 330,480 480,660 660,990 990,1500
{} these key value pairs
这些键值对a，1b，你知道单独的b，1或者a，1c，1。

1690
00:53:16,860 --> 00:53:18,210
0,120 120,390 390,510 510,1020 1020,1350
{a,,1 -} {b,, -} {you,know,b,,1

1691
00:53:18,210 --> 00:53:19,260
0,210 210,600 600,750 750,810 810,1050
-} alone or {a,,1 -}

1692
00:53:19,260 --> 00:53:20,080
0,180 180,420
c,1 too.|
|

1693
00:53:21,270 --> 00:53:22,380
0,150 150,450 450,570 570,780 780,1110
And then, so the second
然后，所以第二步通常被称为洗牌，

1694
00:53:22,380 --> 00:53:24,330
0,630 930,1200 1200,1530 1530,1830 1830,1950
step is often referred to

1695
00:53:24,330 --> 00:53:26,130
0,210 210,810 1020,1320 1320,1590 1590,1800
as shuffle,| {} is that
|基本上，您知道，基本上在每一行上运行Reduce函数。

1696
00:53:26,130 --> 00:53:29,310
0,540 540,1020 1020,2070 2310,2610 2610,3180
basically {you,know,run} reduce {} functions

1697
00:53:29,340 --> 00:53:31,320
0,390 390,780 780,990 990,1530
on basically each row.|
|

1698
00:53:31,320 --> 00:53:32,640
0,270 270,630 630,750 750,1110 1140,1320
So here we got the
所以在这里我们得到了所有的一排A。

1699
00:53:32,640 --> 00:53:34,400
0,390 390,570 570,690 690,1230
row all the as.|
|

1700
00:53:34,460 --> 00:53:35,810
0,450 450,540 540,660 660,720 720,1350
And we're going to run
我们将运行Reduce函数，

1701
00:53:36,320 --> 00:53:38,280
0,330 330,480 480,810 810,1350
{ -} reduce function,|
|

1702
00:53:39,830 --> 00:53:41,090
0,150 150,270 270,330 330,660 660,1260
and then the reduce function
然后Reduce功能基本上只需要一个键

1703
00:53:41,090 --> 00:53:42,800
0,420 420,930 930,1080 1080,1380 1380,1710
basically takes you know the

1704
00:53:42,800 --> 00:53:44,750
0,270 270,840 870,1530 1530,1740 1740,1950
one key| aggregates all the
|聚合所有Reduce函数获得的输入，

1705
00:53:45,770 --> 00:53:47,420
0,510 510,810 810,1050 1050,1560 1560,1650
reduce function gets input,| the
|键加上聚合值

1706
00:53:47,420 --> 00:53:49,280
0,330 330,660 660,750 750,1290 1290,1860
key plus the aggregated values|
|

1707
00:53:49,280 --> 00:53:52,970
0,150 150,450 450,1140 1140,1380 3150,3690
or not aggravate the,| combined
或者不会激化，|从地图的不同输出中知道的组合值，

1708
00:53:52,970 --> 00:53:54,290
0,570 570,690 690,870 870,1170 1170,1320
values you know from the

1709
00:53:54,290 --> 00:53:55,610
0,300 300,630 630,720 720,1200 1200,1320
different outputs of maps,| so
|所以在这种情况下，Reduce函数会让您知道两个中间结果，

1710
00:53:55,610 --> 00:53:56,990
0,90 90,240 240,720 990,1260 1260,1380
in this case {} the

1711
00:53:56,990 --> 00:53:58,160
0,270 270,660 660,840 840,1080 1080,1170
reduce function would get you

1712
00:53:58,160 --> 00:54:00,920
0,150 150,840 990,1500 1500,2010 2010,2760
know two intermediate results,| both
|都是在a和两个值分别为1和1的a上。

1713
00:54:00,920 --> 00:54:02,630
0,60 60,690 720,1020 1020,1530 1530,1710
on a with a and

1714
00:54:02,630 --> 00:54:03,860
0,180 180,630 630,870 870,990 990,1230
two values one and one.|
|

1715
00:54:04,480 --> 00:54:05,740
0,360 360,450 450,600 600,870 870,1260
And in this case in
并且在这种情况下在字数计数的情况下，

1716
00:54:05,740 --> 00:54:07,000
0,60 60,300 300,390 390,720 720,1260
the case of {the,word} count,|
|

1717
00:54:07,000 --> 00:54:07,750
0,90 90,240 240,390 390,480 480,750
we just add them up|
我们只要把它们加起来就行了|

1718
00:54:07,780 --> 00:54:08,800
0,180 180,450 450,540 540,720 720,1020
and so you know it
所以你知道它会产生价值，

1719
00:54:08,800 --> 00:54:10,450
0,150 150,450 450,510 510,1110 1530,1650
would produce the value,| you
|你知道密钥值对a，2。

1720
00:54:10,450 --> 00:54:12,040
0,360 390,780 780,1110 1110,1440 1440,1590
know key value pair {a,,2

1721
00:54:12,040 --> 00:54:13,020
0,450
-}.|
|

1722
00:54:13,310 --> 00:54:15,230
0,510 900,1110 1110,1350 1350,1800 1800,1920
And we do basically we're
我们基本上是在做我们在做的事情

1723
00:54:15,230 --> 00:54:16,400
0,390 390,690 690,960 960,1110 1110,1170
doing| and basically what we're
|基本上，我们现在所做的每一行都会减少，

1724
00:54:16,400 --> 00:54:18,770
0,420 420,570 570,930 930,2010 2040,2370
doing we're doing we're going

1725
00:54:18,770 --> 00:54:20,210
0,60 60,360 360,480 480,960 1290,1440
to reduce for every you

1726
00:54:20,210 --> 00:54:21,700
0,360 420,990
know row,|
|

1727
00:54:22,510 --> 00:54:24,130
0,270 270,510 510,750 750,900 900,1620
and so this will produce
所以这将产生任何b，2

1728
00:54:24,160 --> 00:54:26,800
0,480 480,1230 1440,1710 1710,1950 1950,2640
whatever b,2| and then simply
|然后简单地放在末端c，最后一个是1。

1729
00:54:26,800 --> 00:54:28,480
0,240 240,600 840,1080 1080,1530 1530,1680
on end {c,,1 -} for

1730
00:54:28,480 --> 00:54:29,620
0,60 60,300 300,570
the last one.|
|

1731
00:54:30,350 --> 00:54:32,030
0,270 270,780 810,990 990,1170 1170,1680
And again, you know the
再说一次，你知道我们洗过一次牌，

1732
00:54:32,180 --> 00:54:34,010
0,420 420,630 630,840 840,1080 1110,1830
once we've done to shuffle,|
|

1733
00:54:34,010 --> 00:54:35,420
0,180 180,630 630,960 960,1080 1080,1410
these reduce functions can totally
这些Reduce功能可以完全彼此独立地运行，

1734
00:54:35,420 --> 00:54:36,680
0,240 240,750 750,870 870,990 990,1260
run independent with each other,|
|

1735
00:54:36,710 --> 00:54:38,570
0,240 240,390 390,510 510,870 1320,1860
{you,know} they can just process
你知道他们可以只处理任何行数据，

1736
00:54:38,570 --> 00:54:40,460
0,510 510,720 720,1260 1260,1440 1440,1890
whatever row data,| they have
|他们已经做了，而且已经做完了，

1737
00:54:40,670 --> 00:54:42,260
0,510 510,960 990,1230 1230,1440 1440,1590
{} and be done with

1738
00:54:42,260 --> 00:54:43,760
0,240 690,870 870,990 990,1140 1140,1500
it,| and so the only
|所以唯一一件非常昂贵的作品，

1739
00:54:43,760 --> 00:54:45,650
0,180 180,270 270,480 480,1590 1590,1890
sort of really expensive piece,|
|

1740
00:54:45,650 --> 00:54:47,390
0,90 90,390 390,780 780,1260 1260,1740
and this is this shuffle
这是中间的洗牌，

1741
00:54:47,390 --> 00:54:50,150
0,60 60,150 150,630 1080,2100 2340,2760
in the middle,| where {}
|在Reduce函数需要获得的情况下，

1742
00:54:50,150 --> 00:54:53,240
0,150 150,480 480,1080 1920,2490 2490,3090
the reduce functions need to

1743
00:54:54,430 --> 00:54:56,020
0,930 1020,1140 1140,1260 1260,1440 1440,1590
obtain,| you know their {inputs
|你基本上都知道他们从每个地图绘制者那里输入的信息，

1744
00:54:56,020 --> 00:54:57,640
0,240 240,390 390,750 750,1080 1080,1620
-} from basically every mapper,|
|

1745
00:54:58,270 --> 00:54:59,140
0,330 330,480 480,660 660,780 780,870
{} so when all the
所以当所有的测绘器都完成后，

1746
00:54:59,140 --> 00:55:00,070
0,330 330,390 390,750 750,840 840,930
mappers are done,| you know
|你知道，Reduce功能基本上可以让你知道需要联系每个地图绘制人员，

1747
00:55:00,070 --> 00:55:02,200
0,120 120,420 420,780 780,1470 1500,2130
the reduce function basically gets

1748
00:55:02,200 --> 00:55:04,240
0,120 120,870 900,1230 1230,1530 1560,2040
you know needs to contact

1749
00:55:04,240 --> 00:55:07,870
0,510 510,840 930,1740 1770,2310 2670,3630
every {} mapper,| {} extract
|从该特定Reduce函数的映射中提取您知道的输出的输出

1750
00:55:07,870 --> 00:55:10,300
0,60 60,360 360,900 930,1380 1380,2430
you know the output for

1751
00:55:10,330 --> 00:55:11,140
0,90 90,420 420,540 540,600 600,810
the output from the map

1752
00:55:11,140 --> 00:55:12,700
0,150 150,330 330,690 690,990 990,1560
of that particular reduce function|
|

1753
00:55:13,060 --> 00:55:15,100
0,870 930,1350 1350,1440 1440,1530 1530,2040
and {} you know sort
你知道的，你知道的，按p排序

1754
00:55:15,100 --> 00:55:16,180
0,90 90,210 210,420 420,930 930,1080
you know by p| and
|然后，您知道，基本上运行Reduce功能。

1755
00:55:16,180 --> 00:55:17,320
0,360 360,450 450,840 840,1050 1050,1140
then {you,know} basically run the

1756
00:55:17,320 --> 00:55:18,400
0,270 270,630
reduce function.|
|

1757
00:55:18,670 --> 00:55:19,930
0,210 210,420 420,840 840,1110 1110,1260
And so basically we're sort
所以基本上我们是在假设，就像论文指出的那样，

1758
00:55:19,930 --> 00:55:22,180
0,60 60,510 510,990 990,1890 1890,2250
of assuming that as paper

1759
00:55:22,180 --> 00:55:23,890
0,240 240,600 630,810 810,1170 1170,1710
points out,| the expensive operation
|昂贵的操作实际上是在映射器和还原器之间混洗数据。

1760
00:55:23,890 --> 00:55:25,660
0,90 90,570 690,1230 1230,1320 1350,1770
is really {} the shuffling

1761
00:55:25,660 --> 00:55:26,710
0,90 90,420 420,720 720,780 780,1050
of data between the mapper

1762
00:55:26,710 --> 00:55:28,080
0,240 240,690
and reducer.|
|

1763
00:55:30,640 --> 00:55:32,290
0,180 180,510 510,660 660,810 810,1650
Any questions about this abstract
对这幅抽象的图画有什么问题吗？

1764
00:55:32,970 --> 00:55:34,080
0,600
picture?|
|

1765
00:55:38,790 --> 00:55:40,650
0,450 1020,1530 1560,1650 1650,1800 1800,1860
Oh, sorry I have a
哦，对不起，我有个问题，

1766
00:55:40,650 --> 00:55:43,800
0,600 1050,2130
question,| so,
|那么，有没有我知道不是所有的问题都可以表达出来，

1767
00:55:44,580 --> 00:55:46,110
0,240 240,720 720,1020 1020,1230 1230,1530
is there I know that

1768
00:55:46,110 --> 00:55:47,430
0,270 270,420 420,840 840,1050 1050,1320
not all problems can be

1769
00:55:47,430 --> 00:55:49,560
0,780 780,1350 1350,1500 1500,1770 1770,2130
expressed,| with in {mapreduce -}
|在MapReduce阶段，

1770
00:55:49,560 --> 00:55:51,150
0,480 480,1200 1200,1260 1260,1410 1410,1590
stage,| but it is for
|但这例如类似于对数组进行排序，

1771
00:55:51,150 --> 00:55:53,520
0,990 990,1170 1470,1680 1680,2250 2250,2370
example {} like sorting an

1772
00:55:53,520 --> 00:55:56,460
0,780 960,1200 1200,1620 1620,2250 2250,2940
array,| is it possible to.|
|有没有可能。|

1773
00:55:56,670 --> 00:55:58,350
0,720 810,1080 1080,1200 1200,1590 1590,1680
Yeah yeah, so sorting is
是的，分类是他们实际上在报纸上谈论得最多的应用之一，

1774
00:55:58,350 --> 00:55:59,370
0,180 180,240 240,330 330,870 870,1020
one of the applications that

1775
00:55:59,370 --> 00:56:00,930
0,750 780,960 960,1020 1020,1290 1290,1560
they talk a lot actually

1776
00:56:00,930 --> 00:56:02,190
0,60 60,120 120,600 630,1140 1140,1260
in the paper,| and it
|这可能是完全由MapReduce完成的事情，

1777
00:56:02,190 --> 00:56:04,080
0,150 150,420 420,1050 1050,1650 1650,1890
would be {} it's something

1778
00:56:04,080 --> 00:56:05,130
0,210 240,540 540,750 750,870 870,1050
that's totally done with {mapreduce

1779
00:56:05,130 --> 00:56:06,540
0,330 330,540 540,960 960,1080 1080,1410
-},| so basically you split
|基本上，您可以在许多方面正确地拆分输入文件，

1780
00:56:06,540 --> 00:56:07,860
0,330 330,780 780,1050 1050,1110 1110,1320
input files correct in many

1781
00:56:07,860 --> 00:56:11,730
0,390 390,840 870,1230 1230,3390 3420,3870
things,| the mappers {} sort
|地图绘制人员对他们的地图进行分类，

1782
00:56:11,730 --> 00:56:12,780
0,210 210,840
their piece,|
|

1783
00:56:12,840 --> 00:56:14,670
0,210 210,810 810,810 810,1440 1440,1830
and then, {} they split
然后，他们拆分产量，

1784
00:56:14,670 --> 00:56:16,230
0,210 210,630 630,1020 1020,1350 1350,1560
the output,| say like r
|比方说像r个水桶

1785
00:56:16,230 --> 00:56:18,750
0,600 870,1380 1380,1620 1620,2040 2040,2520
buckets| and then introduce functions,
|然后引入函数，基本上对特定的存储桶进行排序。

1786
00:56:18,750 --> 00:56:20,610
0,480 480,780 780,960 960,1440 1440,1860
basically sort that particular bucket.|
|

1787
00:56:21,300 --> 00:56:22,410
0,360 360,540 540,600 600,900 900,1110
That gives a total sort
这就给出了一个完整的文件。

1788
00:56:22,410 --> 00:56:23,460
0,90 90,510
of file.|
|

1789
00:56:25,720 --> 00:56:27,120
0,210 210,360 360,810
I see, okay.|
我明白了，好的。|

1790
00:56:28,090 --> 00:56:29,110
0,180 180,240 240,390 390,690 690,1020
And in this case, in
在这种情况下，简而言之很有趣，

1791
00:56:29,110 --> 00:56:30,610
0,300 300,390 390,780 780,1050 1050,1500
short is interesting,| because basically
|因为基本上输入、中间值和输出的大小相同

1792
00:56:30,610 --> 00:56:34,060
0,90 90,750 1140,1500 1500,2370 2490,3450
the input, the intermediate values

1793
00:56:34,060 --> 00:56:35,920
0,180 180,270 270,750 750,1770 1800,1860
and the output are the

1794
00:56:35,920 --> 00:56:37,420
0,240 240,780 1110,1200 1200,1350 1350,1500
same size| and some other
|而其他一些功能，如MAP功能，可能会减少中间状态

1795
00:56:37,420 --> 00:56:38,650
0,450 450,660 660,960 960,1020 1020,1230
functions like maybe the map

1796
00:56:38,650 --> 00:56:40,960
0,300 300,480 480,1200 1470,1710 1710,2310
function will reduce {} intermediate

1797
00:56:40,960 --> 00:56:42,880
0,420 420,960 990,1380 1380,1590 1590,1920
state| to something much smaller
|设置为比输入大小小得多的值，

1798
00:56:42,880 --> 00:56:44,440
0,180 180,270 270,570 570,1050 1230,1560
than the input size, {}|
|

1799
00:56:44,440 --> 00:56:46,390
0,510 510,690 690,1500 1500,1800 1800,1950
{in,the,case} of {} sort that
在排序的情况下，情况并非如此。

1800
00:56:46,390 --> 00:56:47,520
0,90 90,270 270,330 330,780
is not the case.|
|

1801
00:56:49,770 --> 00:56:51,150
0,300 300,930 930,1080 1080,1170 1170,1380
Okay, let's look at the
好，我们来看看报纸，

1802
00:56:51,150 --> 00:56:52,080
0,240 240,540 540,750 750,900 900,930
paper,| actually {you,know} get a
|实际上，你知道，要有一点理智，

1803
00:56:52,080 --> 00:56:52,950
0,150 150,270 270,360 360,660 660,870
little bit of sense,| actually
|实际上你是怎么写的。

1804
00:56:52,950 --> 00:56:54,930
0,150 150,330 330,600 600,900 1260,1980
how you write them. {}|
|

1805
00:56:58,230 --> 00:56:59,730
0,750 930,1200 1200,1320 1320,1380 1380,1500
Well, see if I can
好吧，看看我能不能真的。

1806
00:56:59,730 --> 00:57:00,680
0,510
actually.|
|

1807
00:57:03,000 --> 00:57:04,500
0,210 210,360 360,960
That's just annoying.|
那太烦人了。|

1808
00:57:06,880 --> 00:57:08,400
0,330 330,390 390,960
Lost my menu.|
我的菜单丢了。|

1809
00:57:08,460 --> 00:57:10,110
0,420 420,570 570,840 840,1080 1080,1650
It's {} hold one second.|
稍等一下。|

1810
00:57:22,050 --> 00:57:24,060
0,270 270,1020 1380,1740 1740,1890 1890,2010
Yeah, okay, it's not so
是啊，好吧，这不是很酷，

1811
00:57:24,060 --> 00:57:25,470
0,450 450,630 630,780 780,1050 1050,1410
cool,| give me second to,
|让我倒数第二，开始吧。

1812
00:57:25,950 --> 00:57:27,480
0,390 420,600 600,690 690,990
{} here we go.|
|

1813
00:57:27,540 --> 00:57:29,280
0,360 360,450 450,600 600,870 1050,1740
{} So we go save.|
所以我们去救人。|

1814
00:57:30,610 --> 00:57:32,650
0,270 270,450 450,540 540,870 1380,2040
Good, here, we go, yeah.|
很好，这里，我们走，好的。|

1815
00:57:35,260 --> 00:57:37,300
0,990 1020,1200 1200,1500 1500,1650 1650,2040
Okay, can everybody see this?|
好的，大家都能看到这个吗？|

1816
00:57:41,650 --> 00:57:43,060
0,210 210,360 360,450 450,660 660,1410
Okay, there's a couple questions,|
好的，有几个问题，|

1817
00:57:43,090 --> 00:57:44,520
0,870
{}
恕我直言，暂且不提这些问题，

1818
00:57:45,790 --> 00:57:47,020
0,270 270,540 540,990 990,1170 1170,1230
leg me postpone some of

1819
00:57:47,020 --> 00:57:49,360
0,120 120,630 630,1350 1350,2010 2040,2340
these questions,| {for,example} {} see
|例如，稍后我们将更详细地讨论，

1820
00:57:49,360 --> 00:57:50,920
0,90 90,990 1020,1140 1140,1440 1440,1560
{them -} will discuss in

1821
00:57:50,920 --> 00:57:51,820
0,60 60,330 330,390 390,510 510,900
a second in more detail,|
|

1822
00:57:52,760 --> 00:57:54,620
0,180 180,420 420,1230 1260,1620 1620,1860
{} if I don't answer
如果我没有回答你的问题，请再问一遍。

1823
00:57:54,620 --> 00:57:56,120
0,120 120,930 930,1200 1200,1440 1440,1500
your question, please ask it

1824
00:57:56,120 --> 00:57:56,980
0,270
again.|
|

1825
00:57:56,980 --> 00:57:57,550
0,90 90,180 180,360 360,510 510,570
So the first thing I
所以我想做的第一件事就是

1826
00:57:57,550 --> 00:57:58,150
0,120 120,180 180,300 300,390 390,600
want to do is actually|
|

1827
00:57:58,150 --> 00:57:58,990
0,210 210,360 420,690 690,780 780,840
look at one of the
请看MAP和REDURE函数的论文中的一个示例

1828
00:57:58,990 --> 00:58:00,310
0,420 420,510 510,570 570,1140 1140,1320
examples in the paper of

1829
00:58:00,310 --> 00:58:01,540
0,60 60,300 300,480 480,750 750,1230
the map and reduce functions|
|

1830
00:58:01,780 --> 00:58:03,280
0,480 480,690 690,960 960,1200 1200,1500
responding to the word count
响应于字数统计示例，

1831
00:58:03,280 --> 00:58:04,180
0,420 420,540 540,630 630,720 720,900
example,| that would be sort
|这在某种程度上会被抽象地讨论。

1832
00:58:04,180 --> 00:58:05,940
0,60 60,690 690,1290
of abstractly discussed.|
|

1833
00:58:06,030 --> 00:58:08,580
0,210 210,510 510,690 690,1320 2220,2550
So here's the code for
这是地图的代码，Reduce函数，

1834
00:58:08,580 --> 00:58:10,740
0,60 60,300 300,780 780,1410 1620,2160
the map, reduce function, {}|
|

1835
00:58:10,740 --> 00:58:11,430
0,150 150,270 270,390 390,480 480,690
you see that the map
您可以看到map函数采用键值，

1836
00:58:11,430 --> 00:58:14,460
0,360 360,750 750,1920 2130,2400 2400,3030
function takes {} key value,|
|

1837
00:58:14,670 --> 00:58:15,870
0,240 240,540 540,630 630,990 990,1200
the key is really not
关键在这里真的不重要，

1838
00:58:15,870 --> 00:58:16,890
0,90 90,540 540,780 780,900 900,1020
been important here,| it's the
|这是文档名称，

1839
00:58:16,890 --> 00:58:18,420
0,450 450,720 720,960 960,1170 1170,1530
document name,| so {f1 -}
|所以f1或f2和字符串，

1840
00:58:18,420 --> 00:58:20,250
0,150 150,270 270,720 930,1260 1260,1830
or {f2 -} and string,|
|

1841
00:58:20,250 --> 00:58:21,990
0,480 510,960 960,1290 1290,1380 1380,1740
the {value,is} basically the content
该值基本上就是文件的内容。

1842
00:58:21,990 --> 00:58:23,000
0,90 90,180 180,600
of the file.|
|

1843
00:58:23,120 --> 00:58:24,680
0,450 450,690 690,990 1020,1470 1470,1560
So all the words that
所以在f1文件中实际出现的所有单词

1844
00:58:24,680 --> 00:58:26,420
0,270 270,690 690,990 990,1260 1260,1740
actually appear in the file

1845
00:58:26,420 --> 00:58:28,160
0,150 150,450 1140,1290 1290,1350 1350,1740
{f1 -}| and it basically
|它基本上是通过你知道的争议块代码，

1846
00:58:28,160 --> 00:58:29,690
0,210 210,690 690,780 780,960 960,1530
goes through you know the

1847
00:58:29,990 --> 00:58:31,310
0,510 510,720 720,1020 1020,1200 1200,1320
dispute piece code,| goes to
|去改进单词和文件

1848
00:58:31,310 --> 00:58:32,270
0,390 390,480 480,780 780,870 870,960
improve the words and the

1849
00:58:32,270 --> 00:58:34,010
0,540 750,1020 1020,1170 1170,1260 1260,1740
file| and as an intermediate
|作为中间值，这是你知道的，

1850
00:58:34,010 --> 00:58:35,690
0,510 510,1110 1110,1470 1470,1560 1560,1680
value, {} it's you know

1851
00:58:35,690 --> 00:58:37,610
0,600 720,1170 1170,1170 1170,1710 1710,1920
these,| {} {a,,1 -} {b,,1
|a、1b、1c、1等。

1852
00:58:37,610 --> 00:58:39,400
0,270 270,840 840,1380
-} c,1 etc.|
|

1853
00:58:39,680 --> 00:58:40,700
0,240 240,330 330,450 450,870 870,1020
Look for the programmer point
寻找程序员的观点，

1854
00:58:40,700 --> 00:58:41,870
0,60 60,450 480,630 630,960 960,1170
of view,| you don't really
|您根本看不到这些中间键值对，

1855
00:58:41,870 --> 00:58:43,880
0,180 180,450 450,1080 1500,1680 1680,2010
see these intermediate key value

1856
00:58:43,880 --> 00:58:45,530
0,300 300,390 390,810 960,1470 1470,1650
pairs at all,| {} you
|您只需编写这个简单的映射函数。

1857
00:58:45,530 --> 00:58:46,700
0,150 150,360 360,480 480,780 780,1170
just write this one simple

1858
00:58:46,700 --> 00:58:48,040
0,450 450,840
map function.|
|

1859
00:58:48,960 --> 00:58:50,130
0,120 120,570 570,570 570,900 900,1170
And then, {} the reduce
然后，Reduce功能也或多或少是意料之中的，

1860
00:58:50,130 --> 00:58:51,900
0,600 690,1080 1080,1350 1350,1620 1620,1770
function {} is also more

1861
00:58:51,900 --> 00:58:52,950
0,0 0,300 300,870 870,930 930,1050
or less expected,| you know
|你知道，这需要两个论点，

1862
00:58:52,950 --> 00:58:54,040
0,480
the,

1863
00:58:54,040 --> 00:58:55,810
0,150 150,390 930,1140 1140,1650 1650,1770
it takes two arguments,| you
|你知道钥匙你就像一个

1864
00:58:55,810 --> 00:58:56,830
0,120 120,240 240,720 720,870 870,1020
know the key you're like

1865
00:58:56,860 --> 00:58:59,050
0,480 780,1260 1260,1920 1950,2040 2040,2190
a| and values in this
|并且在这种情况下字数计数的值将为1，

1866
00:58:59,050 --> 00:59:00,310
0,330 330,600 600,810 810,1050 1050,1260
case {} word count would

1867
00:59:00,310 --> 00:59:01,480
0,90 90,390 390,660 660,870 870,1170
be one one one one,|
|

1868
00:59:01,480 --> 00:59:02,620
0,180 180,420 420,660 660,720 720,1140
which a number of times
这是单词A在中间输出中实际出现的次数。

1869
00:59:02,620 --> 00:59:04,600
0,150 150,270 270,570 570,1230 1590,1980
that the {word,a} actually showed

1870
00:59:04,600 --> 00:59:06,430
0,210 210,510 510,720 720,1320 1320,1830
up in the intermediate output.|
|

1871
00:59:06,920 --> 00:59:08,420
0,120 120,420 420,630 630,1200 1230,1500
And basically what the function
基本上，该函数的作用是，

1872
00:59:08,420 --> 00:59:10,460
0,240 240,330 330,660 1350,1710 1710,2040
does,| it just goes over
|它只是遍历值列表

1873
00:59:10,460 --> 00:59:11,720
0,240 240,660 660,900 900,1020 1020,1260
to iterate over the list

1874
00:59:11,720 --> 00:59:13,220
0,60 60,630 630,810 810,1290 1290,1500
of values| and basically add
|基本上就是一加一

1875
00:59:13,400 --> 00:59:14,750
0,360 360,570 570,870 870,1080 1080,1350
one plus one plus one

1876
00:59:14,750 --> 00:59:16,250
0,180 180,600 720,930 930,1080 1080,1500
plus one| and then it's
|然后就是你知道最终结果了。

1877
00:59:16,250 --> 00:59:17,300
0,90 90,180 180,300 300,570 570,1050
you know the final result.|
|

1878
00:59:18,880 --> 00:59:20,650
0,630 690,840 840,1050 1050,1650 1650,1770
And so that's basically you
这基本上就是你知道你可以从这段代码中看到的，对吧，

1879
00:59:20,650 --> 00:59:21,700
0,300 300,480 480,570 570,840 840,1050
know you can see from

1880
00:59:21,700 --> 00:59:22,870
0,180 180,600 630,930 930,1080 1080,1170
this code, right,| like the
|就像程序员基本上总是对的一样，

1881
00:59:22,870 --> 00:59:24,400
0,450 450,780 780,1110 1110,1470 1470,1530
programmer basically always right,| you
|你知道完整的简单的顺序代码，

1882
00:59:24,400 --> 00:59:27,340
0,120 120,720 720,1860 2010,2550 2550,2940
know complete straightforward sequential code,|
|

1883
00:59:27,670 --> 00:59:30,160
0,270 270,930 960,1410 1410,1830 1830,2490
this application very simple, admittedly,|
无可否认，这个应用程序非常简单，|

1884
00:59:30,340 --> 00:59:32,080
0,450 450,660 660,930 930,1440 1440,1740
{} but the code for
但是更复杂的应用程序的代码也将是直接的，

1885
00:59:32,080 --> 00:59:33,370
0,180 180,360 360,690 690,1170 1170,1290
even more complex application would

1886
00:59:33,370 --> 00:59:34,450
0,240 240,390 390,810 810,930 930,1080
also be straight,| you know,
|你知道，顺序可能是更多的代码，

1887
00:59:34,450 --> 00:59:35,740
0,300 300,750 750,960 960,1080 1080,1290
the sequential might be more

1888
00:59:35,740 --> 00:59:36,550
0,330 330,450 450,540 540,690 690,810
code,| but it would be
|但它将是简单的顺序代码。

1889
00:59:36,550 --> 00:59:38,640
0,540 540,960 960,1320
straightforward sequential code.|
|

1890
00:59:38,640 --> 00:59:39,300
0,90 90,180 180,300 300,570 570,660
And in this code, the
在这段代码中，程序根本不担心这样一个事实，

1891
00:59:39,300 --> 00:59:40,740
0,270 270,570 570,900 900,1200 1200,1440
program didn't really worry about

1892
00:59:40,740 --> 00:59:41,580
0,60 60,240 240,420 420,720 720,840
the fact {that,at} all,| the
|机器可能会崩溃，

1893
00:59:41,580 --> 00:59:42,990
0,360 360,540 540,1170 1200,1320 1320,1410
machines might crash,| you know
|你知道可能会有负载平衡，

1894
00:59:42,990 --> 00:59:44,490
0,150 150,330 330,420 420,840 840,1500
there might be loading balance,|
|

1895
00:59:44,550 --> 00:59:45,990
0,240 240,600 600,960 960,1200 1200,1440
{} that's basically all taking
这基本上就是处理MapReduce库的全部工作。

1896
00:59:45,990 --> 00:59:46,890
0,210 210,300 300,360 360,570 570,900
care of the {mapreduce -}

1897
00:59:46,890 --> 00:59:47,820
0,390
library.|
|

1898
00:59:48,990 --> 00:59:50,130
0,360 360,660 660,900 900,1050 1050,1140
{So,as} and so you know
所以你知道希望，我认为这已经被证明是真的，

1899
00:59:50,130 --> 00:59:51,210
0,90 90,570 570,750 750,900 900,1080
the hope and I think

1900
00:59:51,210 --> 00:59:52,110
0,120 120,390 420,720 720,840 840,900
this has proven out to

1901
00:59:52,110 --> 00:59:53,370
0,120 120,480 480,660 660,960 960,1260
be true,| is this actually
|这实际上是由很多人来编写分布式应用程序吗

1902
00:59:53,370 --> 00:59:54,420
0,330 330,450 450,750 750,840 840,1050
made with lots of lots

1903
00:59:54,420 --> 00:59:55,950
0,90 90,360 360,480 480,870 1050,1530
of people to write distributed

1904
00:59:55,950 --> 00:59:59,460
0,720 720,930 930,1620 1710,2970 2970,3510
applications| and process gigantic datasets|
|并处理海量数据集|

1905
00:59:59,460 --> 01:00:00,930
0,270 270,600 600,1020 1020,1230 1230,1470
and like {could,no} way fit
而且LIKE不可能装在一台机器上。

1906
01:00:00,930 --> 01:00:02,300
0,150 150,240 240,510 510,900
on a single machine.|
|

1907
01:00:02,860 --> 01:00:04,180
0,420 450,840 840,900 900,1110 1110,1320
Like {for,example}, the whole world
例如，整个万维网。

1908
01:00:04,180 --> 01:00:05,280
0,180 180,570
wide web.|
|

1909
01:00:07,260 --> 01:00:08,160
0,240 240,360 360,510 510,780 780,900
Does that make sense in
这在以下方面有意义吗，

1910
01:00:08,160 --> 01:00:09,440
0,270 270,630
terms of,|
|

1911
01:00:10,310 --> 01:00:11,720
0,120 120,210 210,420 420,870 930,1410
you know what the programmer
你知道程序员实际看到的是什么。

1912
01:00:11,720 --> 01:00:13,080
0,330 330,840
actually sees.|
|

1913
01:00:15,440 --> 01:00:16,580
0,540 540,810 810,930 930,960 960,1140
Okay, let's talk a little
好的，让我们来谈谈实现的问题。

1914
01:00:16,580 --> 01:00:18,920
0,120 120,330 330,720 750,1770
bit about the implementation.|
|

1915
01:00:19,150 --> 01:00:20,480
0,750

1916
01:00:22,740 --> 01:00:24,060
0,240 240,360 360,630 630,870 870,1320
So I'm using the diagram
所以我用的是这张纸上的图表。

1917
01:00:24,060 --> 01:00:25,640
0,180 180,360 360,540 540,1020
here from the paper.|
|

1918
01:00:28,340 --> 01:00:30,590
0,390 390,1350 1380,1770 1860,2100 2100,2250
So the, so we've got
所以，我们有了用户程序，

1919
01:00:30,590 --> 01:00:31,760
0,60 60,270 270,660 660,840 840,1170
the user program,| so the
|用户程序就像我们刚才看到的MAP和Reduce功能，

1920
01:00:31,760 --> 01:00:32,720
0,210 210,600 600,720 720,900 900,960
user program is like the

1921
01:00:32,720 --> 01:00:33,890
0,240 240,330 330,420 420,750 750,1170
map and the reduce function

1922
01:00:33,890 --> 01:00:35,930
0,150 150,300 300,480 480,960 1320,2040
that we just saw, {}|
|

1923
01:00:35,930 --> 01:00:37,130
0,240 240,690 690,780 780,1020 1020,1200
you submit the map and
您将map和Reduce函数提交给，

1924
01:00:37,130 --> 01:00:40,130
0,330 330,720 720,1380 1440,2190 2250,3000
reduce function to {} the,|
|

1925
01:00:40,580 --> 01:00:41,990
0,510 510,960 960,1140 1140,1260 1260,1410
{} you link it with
您可以将其与MapReduce库相链接

1926
01:00:41,990 --> 01:00:43,400
0,180 180,450 450,720 720,1290 1290,1410
the {mapreduce -} library| and
|然后形成二进制

1927
01:00:43,400 --> 01:00:45,410
0,330 330,630 630,1290 1620,1830 1830,2010
then forms binary| and then
|然后把这个交给Google作业调度程序

1928
01:00:45,410 --> 01:00:46,790
0,210 210,420 420,570 570,810 810,1380
you give this to the

1929
01:00:46,910 --> 01:00:49,580
0,660 660,960 960,1500 1500,1980 2160,2670
Google job scheduler| and {}
|它基本上会找到一大堆机器

1930
01:00:49,580 --> 01:00:51,560
0,210 210,570 570,1290 1290,1680 1710,1980
it will basically {} find

1931
01:00:51,560 --> 01:00:52,610
0,60 60,180 180,330 330,390 390,1050
a whole bunch of machines|
|

1932
01:00:52,820 --> 01:00:54,680
0,420 420,870 870,1470 1500,1680 1680,1860
{} and run {} what
在那里运行他们所谓的工人。

1933
01:00:54,680 --> 01:00:56,220
0,120 120,360 360,900 900,1230
they call workers there.|
|

1934
01:00:56,340 --> 01:00:58,920
0,210 210,600 600,690 690,1080 1530,2580
So like you know {scheduler
就像你们知道的，例如评估中的调度程序，我们稍后会看到，

1935
01:00:58,920 --> 01:01:01,410
0,540 570,1260 1260,1350 1350,1710 1890,2490
-} {for,example} in the evaluation

1936
01:01:01,410 --> 01:01:01,950
0,150 150,270 270,420 420,510 510,540
as we'll see in a

1937
01:01:01,950 --> 01:01:02,670
0,390 390,450 450,540 540,690 690,720
second,| you know there are
|你知道大约有1800台机器，

1938
01:01:02,670 --> 01:01:04,980
0,450 450,660 660,930 930,1530 1680,2310
about {1800 -} machines,| on
|在这1800台机器上，您知道调度程序将运行工作进程，

1939
01:01:04,980 --> 01:01:06,060
0,180 180,390 390,570 570,990 990,1080
these {1800 -} machines, you

1940
01:01:06,060 --> 01:01:07,260
0,120 120,390 390,720 720,900 900,1200
know the scheduler will run

1941
01:01:07,260 --> 01:01:09,390
0,150 150,450 450,1050 1200,1650 1650,2130
{} worker process,| that actually
|它实际上做了实际的工作

1942
01:01:09,390 --> 01:01:11,310
0,600 660,1020 1020,1140 1140,1500 1500,1920
{} does the actual work|
|

1943
01:01:11,310 --> 01:01:12,840
0,240 240,780 780,930 930,1380 1380,1530
and evokes {you,know} map and
并在适当的时候调用Map和Reduce函数。

1944
01:01:12,840 --> 01:01:14,880
0,330 330,960 990,1350 1350,1740 1740,2040
reduce functions {} when when

1945
01:01:14,880 --> 01:01:16,120
0,240 240,810
when appropriate.|
|

1946
01:01:16,850 --> 01:01:18,590
0,300 300,510 510,990 990,1290 1290,1740
There's one other {} process
还有另一个重要的进程，它能够调用实验室中的主进程，称为协调器，

1947
01:01:18,590 --> 01:01:20,180
0,180 180,300 300,930 960,1500 1530,1590
that is important to be

1948
01:01:20,210 --> 01:01:21,140
0,270 270,330 330,510 510,570 570,930
able to call the master

1949
01:01:21,140 --> 01:01:22,340
0,420 420,510 510,600 600,960 960,1200
process in the lab called

1950
01:01:22,340 --> 01:01:24,860
0,60 60,870 1050,1860 1860,2430 2430,2520
the coordinator,| {} and the
|协调人和面包师协调工人们

1951
01:01:24,860 --> 01:01:27,380
0,540 540,930 930,1650 1650,1800 1830,2520
coordinator baker orchestrates the workers|
|

1952
01:01:27,380 --> 01:01:30,050
0,780 960,1620 1620,2130 2130,2280 2280,2670
and hands jobs or maps
把工作或地图(运动员)交给他们，

1953
01:01:30,050 --> 01:01:32,360
0,390 390,720 720,1050 1050,1350 1950,2310
[jocks] {} to them, {}|
|

1954
01:01:32,360 --> 01:01:34,340
0,570 570,1200 1200,1440 1440,1650 1650,1980
{so,like,the} terminology,| here is that
所以就像术语一样，|下面是一个完整应用程序是一个作业，即Map Reduce作业

1955
01:01:34,640 --> 01:01:36,650
0,510 510,900 900,1350 1350,1950 1950,2010
{} a complete application is

1956
01:01:36,650 --> 01:01:38,510
0,240 240,720 720,1020 1020,1350 1350,1860
one job, map reduce job|
|

1957
01:01:38,630 --> 01:01:41,300
0,300 300,870 900,1800 1890,2550 2550,2670
and then reduce identification of
然后再进行归约识别、归约识别或映射识别，这就是所谓的任务。

1958
01:01:41,300 --> 01:01:44,510
0,480 480,600 600,1230 1230,1800 1860,3210
reduce or identification of map

1959
01:01:44,510 --> 01:01:46,010
0,360 360,660 660,840 840,900 900,1500
is what's called the task.|
|

1960
01:01:47,430 --> 01:01:49,500
0,570 870,1380 1380,1500 1500,1560 1560,2070
{} So you know basically
所以你知道基本上你知道协调人会把文件分配给特定的工人

1961
01:01:49,500 --> 01:01:52,260
0,120 120,300 300,900 1170,2130 2130,2760
you know the coordinator will

1962
01:01:52,350 --> 01:01:55,200
0,810 840,1470 1470,2160 2160,2520 2520,2850
assign files to a particular

1963
01:01:55,200 --> 01:01:56,310
0,420 420,540 540,630 630,960 960,1110
workers| and the worker will
|然后，工作器将在该特定文件上调用映射函数

1964
01:01:56,310 --> 01:01:57,750
0,180 180,630 630,720 720,1020 1020,1440
then invoke the map function

1965
01:01:57,750 --> 01:02:00,810
0,90 90,270 270,1050 1320,2340 2370,3060
on that particular {} file|
|

1966
01:02:00,900 --> 01:02:02,010
0,180 180,270 270,480 480,930 930,1110
and it will produce some
它会产生一些中间结果。

1967
01:02:02,010 --> 01:02:03,460
0,480 480,1050
intermediate results.|
|

1968
01:02:03,460 --> 01:02:04,930
0,390 390,510 510,930 930,1260 1260,1470
{You,know,here} the intermediate results,| those
你知道这里的中间结果，|这些中间结果存储在机器的本地盘上，

1969
01:02:04,930 --> 01:02:07,150
0,570 570,1020 1020,1200 1200,1770 1770,2220
intermediate results are stored on

1970
01:02:07,150 --> 01:02:09,700
0,360 390,1020 1020,1440 1470,1680 1680,2550
the local disk of the

1971
01:02:09,730 --> 01:02:11,230
0,480 480,630 630,840 840,1350 1350,1500
machine,| that actually runs that
|它实际运行特定的地图功能。

1972
01:02:11,230 --> 01:02:12,720
0,300 300,570 570,960
particular map function.|
|

1973
01:02:13,720 --> 01:02:15,580
0,330 330,870 870,990 990,1200 1200,1860
And when you know a
当你知道一名工人已经运行了完全特定的地图功能时，

1974
01:02:15,610 --> 01:02:17,440
0,420 420,570 570,930 930,1380 1380,1830
worker has run completely particular

1975
01:02:17,440 --> 01:02:19,090
0,270 270,810 960,1320 1320,1590 1590,1650
map function,| basically tells the
|基本上就是告诉主人我已经完成了地图功能，

1976
01:02:19,090 --> 01:02:20,380
0,480 480,720 720,1020 1020,1140 1140,1290
master I'm done with that

1977
01:02:20,380 --> 01:02:23,020
0,270 270,870 1020,1350 1350,1860 1860,2640
map function,| {} and {}
|你知道它会告诉大师中间结果在哪里。

1978
01:02:23,050 --> 01:02:24,760
0,150 150,480 540,930 930,1410 1410,1710
you know {} it tells

1979
01:02:24,760 --> 01:02:26,620
0,390 390,780 780,990 990,1500 1500,1860
the master {where,the} intermediate results

1980
01:02:26,620 --> 01:02:27,420
0,330
are.|
|

1981
01:02:27,930 --> 01:02:29,940
0,540 960,1590 1590,1680 1680,1830 1830,2010
{} Then, at some point,
然后，在某种程度上，当所有的地图都基本完成时，

1982
01:02:29,940 --> 01:02:31,890
0,120 120,270 270,780 1110,1530 1530,1950
when all the maps are

1983
01:02:31,890 --> 01:02:33,690
0,420 420,930 1020,1590 1590,1680 1680,1800
basically done,| {} you know
|您知道协调器将开始运行Reduce函数

1984
01:02:33,690 --> 01:02:35,640
0,420 480,1080 1080,1200 1200,1500 1500,1950
the coordinator will start running

1985
01:02:35,640 --> 01:02:37,860
0,330 330,990 1200,1500 1500,1860 1860,2220
reduce functions| and reduce functions
|Reduce函数将收集来自不同映射器的中间结果

1986
01:02:37,860 --> 01:02:39,330
0,150 150,720 750,900 900,1050 1050,1470
will collect you know the

1987
01:02:39,390 --> 01:02:41,580
0,600 600,1140 1290,1650 1650,1890 1890,2190
intermediate results from the different

1988
01:02:41,580 --> 01:02:43,650
0,210 210,660 690,1080 1080,1380 1410,2070
{mappers -}| from the locations
|从结果记录中指定的位置，

1989
01:02:43,650 --> 01:02:45,150
0,120 120,210 210,840 840,1170 1170,1500
that are specified in the

1990
01:02:45,570 --> 01:02:48,240
0,600 600,660 660,1140 1470,2070
result the record, {}|
|

1991
01:02:48,270 --> 01:02:50,010
0,480 480,660 660,1140 1170,1590 1590,1740
retrieve that data sorted by
检索按键排序数据，

1992
01:02:50,010 --> 01:02:52,320
0,570 600,840 840,1470 1470,1590 1590,2310
key,| and then basically reduce
|然后基本上在每个键上调用Reduce运行Reduce函数，

1993
01:02:52,350 --> 01:02:54,030
0,570 570,930 930,1020 1020,1320 1320,1680
run invoke the reduce function

1994
01:02:54,030 --> 01:02:56,490
0,210 210,570 570,1110 1290,1860 1860,2460
on every key,| {} and
|和值列表，

1995
01:02:56,490 --> 01:02:58,140
0,180 210,480 480,540 540,1200
the list of values,|
|

1996
01:02:58,700 --> 01:03:00,170
0,150 150,660 660,1050 1050,1170 1170,1470
and that produces an output
这会产生一个输出文件，

1997
01:03:00,170 --> 01:03:01,700
0,540 720,870 870,1020 1020,1140 1140,1530
file,| and that is the
|也就是说，每个Reduce函数将有一个输出文件

1998
01:03:01,700 --> 01:03:02,540
0,180 180,390 390,660 660,780 780,840
you know there's gonna be

1999
01:03:02,540 --> 01:03:04,190
0,270 270,600 600,900 900,1320 1320,1650
one output file per reduce

2000
01:03:04,190 --> 01:03:05,570
0,360 630,1020 1020,1110 1110,1230 1230,1380
function| and you know you
|您知道您可以聚合输出文件，连接输出文件以获得最终输出。

2001
01:03:05,570 --> 01:03:07,280
0,120 120,750 750,1110 1110,1410 1410,1710
can aggregate the output file

2002
01:03:07,280 --> 01:03:08,540
0,540 540,630 630,930 930,1170 1170,1260
concatenate the output files to

2003
01:03:08,540 --> 01:03:10,340
0,390 390,510 510,870 870,1350
get the final output.|
|

2004
01:03:11,440 --> 01:03:12,820
0,240 240,390 390,480 480,720 720,1380
That's sort of the structure,|
这就是某种结构，|

2005
01:03:13,240 --> 01:03:14,860
0,480 510,840 840,1260 1260,1500 1500,1620
the input files live in
输入文件驻留在一个称为GFS的全局文件系统中，

2006
01:03:14,860 --> 01:03:16,780
0,450 450,840 840,1110 1110,1650 1680,1920
a global file system, that's

2007
01:03:16,780 --> 01:03:19,240
0,240 240,930 1470,2100 2100,2400 2400,2460
called GFS,| Google uses a
|谷歌现在使用的是不同的全球文件系统，

2008
01:03:19,240 --> 01:03:20,560
0,270 270,540 540,750 750,1020 1020,1320
different global file system now,|
|

2009
01:03:20,560 --> 01:03:22,150
0,180 180,300 300,630 870,1320 1320,1590
but you know the paper
但你知道这份报纸使用的是全球定位系统，

2010
01:03:22,150 --> 01:03:23,800
0,210 210,750 750,1200 1200,1410 1410,1650
uses GFS,| we'll actually read
|我们下周会真正读到关于GFS的内容

2011
01:03:23,800 --> 01:03:25,870
0,270 270,780 780,1230 1230,1560 1830,2070
about GFS next week| and
|输出文件也会发送到GFS，

2012
01:03:25,870 --> 01:03:26,920
0,60 60,360 360,570 570,810 810,1050
the output files also going

2013
01:03:26,920 --> 01:03:29,050
0,150 150,840 1140,1470 1470,1560 1560,2130
to GFS,| {} the intermediate
|中间文件不存储在GFS中，

2014
01:03:29,050 --> 01:03:30,790
0,510 510,990 1020,1230 1230,1440 1440,1740
files don't are not stored

2015
01:03:30,790 --> 01:03:32,230
0,90 90,540 540,780 780,1170 1170,1440
in GFS,| {that,are} stored on
|它们存储在运行工作的本地机器上。

2016
01:03:32,230 --> 01:03:33,520
0,420 420,960
local machines

2017
01:03:34,360 --> 01:03:35,800
0,510 510,750 750,990 990,1140 1140,1440
where the work is run.|
|

2018
01:03:38,680 --> 01:03:40,900
0,450 450,840 840,1440 1590,2040 2040,2220
Any questions about the sort
任何关于实施的粗略调度器的问题。

2019
01:03:40,900 --> 01:03:42,550
0,90 90,420 450,810 810,900 900,1650
of rough scheduler of implementation.|
|

2020
01:03:45,130 --> 01:03:46,390
0,180 180,390 390,690 690,780 780,1260
{} I have a question
我有一个关于Remote[]的进程文件的问题，

2021
01:03:46,390 --> 01:03:48,190
0,390 390,540 540,1140 1140,1500 1500,1800
about the process file for

2022
01:03:48,190 --> 01:03:49,720
0,150 150,630 630,930 1020,1260 1260,1530
the remote [],| so in
|因此，在Remote[]进程中，文件是否实际传输到Reducer。

2023
01:03:49,720 --> 01:03:51,610
0,150 150,810 810,1380 1380,1620 1620,1890
the {remote,[]} process, is the

2024
01:03:51,610 --> 01:03:54,070
0,510 510,1080 1110,1620 1620,2280 2280,2460
file actually actually transferred to

2025
01:03:54,070 --> 01:03:56,830
0,150 150,870 1110,1680 1860,2220 2220,2760
the reducer.| Yes, so the,
|对，所以准确地说，就是，

2026
01:03:56,860 --> 01:03:59,500
0,510 540,1170 1290,1560 1560,1890 2160,2640
exactly, the,| so the intermediate
|因此，中间结果通过该地图功能生成或存储在运行制图程序的计算机的磁盘上

2027
01:03:59,500 --> 01:04:01,300
0,330 330,480 480,1050 1050,1260 1260,1800
results are produced or stored

2028
01:04:01,300 --> 01:04:03,640
0,390 390,570 570,930 930,1110 1950,2340
on the disk of a

2029
01:04:03,670 --> 01:04:05,140
0,450 450,630 630,810 810,900 900,1470
machine that runs the mapper,

2030
01:04:05,520 --> 01:04:07,200
0,270 270,510 510,780 780,1290 1380,1680
{with,that} {} map function| and
|然后减量就出来了，基本上就是拿回来了，

2031
01:04:07,200 --> 01:04:08,880
0,90 90,720 750,1140 1140,1590 1590,1680
the reduce goes out and

2032
01:04:08,880 --> 01:04:11,130
0,630 690,1200 1200,1380 1590,2130 2130,2250
basically {fetches -},| it's you
|这是你知道的来自每个地图制图器的一组钥匙。

2033
01:04:11,130 --> 01:04:12,750
0,90 90,330 330,630 630,1320 1350,1620
know set of keys from

2034
01:04:12,750 --> 01:04:14,240
0,330 330,990
every mapper.|
|

2035
01:04:14,980 --> 01:04:15,850
0,210 210,300 300,360 360,570 570,870
And so at that point,
因此，在这一点上，您知道数据是通过网络传输的，

2036
01:04:15,850 --> 01:04:16,960
0,180 180,270 270,510 510,600 600,1110
{you,know} the data is transferred

2037
01:04:16,960 --> 01:04:18,580
0,330 330,390 390,870 1230,1530 1530,1620
across the network,| so the
|所以发生的网络通信就在这里。

2038
01:04:18,580 --> 01:04:20,200
0,300 300,780 780,930 930,1410 1440,1620
network communication that happens is

2039
01:04:20,200 --> 01:04:21,460
0,60 60,480
{here -}.|
|

2040
01:04:24,990 --> 01:04:26,430
0,210 210,480 480,630 630,990 1020,1440
The reason that there's little
这里很少有网络通信，根本没有网络通信的原因是

2041
01:04:26,430 --> 01:04:28,170
0,270 270,750 750,900 900,1200 1200,1740
network communication, no network communication

2042
01:04:28,170 --> 01:04:29,430
0,240 240,330 330,750 810,990 990,1260
here at all is| because
|因为工人，协调员给工人分配文件的方式基本上是，

2043
01:04:29,430 --> 01:04:32,700
0,210 210,930 930,1800 2040,2700 2700,3270
the workers, {} {the,way} the

2044
01:04:32,760 --> 01:04:36,270
0,870 900,2070 2400,3030 3030,3390 3390,3510
coordinator assigns {} files to

2045
01:04:36,270 --> 01:04:39,300
0,390 390,630 630,1470 1590,2310 2340,3030
workers is basically,| {} the
|工人在同一台机器上运行，

2046
01:04:39,480 --> 01:04:40,800
0,600 600,720 720,1080 1080,1200 1200,1320
worker is run on the

2047
01:04:40,800 --> 01:04:42,990
0,510 510,1260 1470,1680 1680,1860 1860,2190
same machine,| so every machine
|因此，每台计算机都同时运行工作进程和GFS进程

2048
01:04:42,990 --> 01:04:44,520
0,240 240,540 540,660 660,1110 1110,1530
runs both {} worker process

2049
01:04:44,520 --> 01:04:47,160
0,390 390,690 690,1320 1650,2520 2550,2640
{and,a,GFS -} process| and the
|工人们基本上是被派往

2050
01:04:47,160 --> 01:04:48,960
0,420 420,600 600,960 960,1380 1380,1800
workers are basically send to|
|

2051
01:04:48,960 --> 01:04:50,250
0,300 300,390 390,630 630,930 930,1290
or the map function run
或者映射功能在一台机器上运行，该机器实际将该文件存储在本地GFS中。

2052
01:04:50,250 --> 01:04:52,620
0,570 960,1590 1620,2040 2040,2160 2160,2370
on a machine that actually

2053
01:04:52,620 --> 01:04:54,360
0,330 330,600 600,900 900,1290 1290,1740
has that file locally stored

2054
01:04:54,360 --> 01:04:55,420
0,270 270,810
{in,GFS -}.|
|

2055
01:04:55,640 --> 01:04:56,600
0,150 150,270 270,570 570,720 720,960
And so basically this actually
基本上，这实际上相当于通过GFS从本地读取到本地磁盘，

2056
01:04:56,600 --> 01:04:58,220
0,480 480,570 570,900 900,1260 1260,1620
corresponds to basically local reads

2057
01:04:58,220 --> 01:04:59,570
0,210 210,450 450,930 930,1050 1050,1350
{you,know} through GFS to local

2058
01:04:59,570 --> 01:05:02,390
0,480 690,1260 1260,1380 1380,2040 2520,2820
disk,| {} and then {}
|然后将文件制作或映射和/或制作成中间文件也存储在本地磁盘上，

2059
01:05:02,390 --> 01:05:03,920
0,150 150,450 450,540 540,1170 1230,1530
the files are produced or

2060
01:05:03,950 --> 01:05:05,780
0,510 510,630 630,810 810,1260 1260,1830
mapped and or produced into

2061
01:05:05,780 --> 01:05:07,610
0,570 600,1050 1050,1410 1410,1560 1560,1830
{} intermediate files are stored

2062
01:05:07,610 --> 01:05:08,480
0,60 60,300 300,540 540,720 720,870
on local disk too,| so
|所以在图片的这一部分没有发生交流。

2063
01:05:08,480 --> 01:05:09,770
0,180 180,390 390,900 900,1200 1200,1290
there's no communication happening in

2064
01:05:09,770 --> 01:05:11,360
0,450 570,930 930,990 990,1080 1080,1590
this part of the picture.|
|

2065
01:05:12,520 --> 01:05:13,240
0,150 150,240 240,360 360,420 420,720
And then when the reduce
然后当Reduce功能运行时，

2066
01:05:13,240 --> 01:05:15,310
0,330 330,630 780,1170 1170,1410 1410,2070
functions run,| they actually retrieve
|他们实际上通过网络检索文件，

2067
01:05:15,460 --> 01:05:16,810
0,330 330,600 600,660 660,1170 1170,1350
files across the network,| and
|然后写给GFS。

2068
01:05:16,810 --> 01:05:17,770
0,330 330,540 540,690 690,840 840,960
then write it out to

2069
01:05:17,770 --> 01:05:18,820
0,600
GFS.|
|

2070
01:05:20,460 --> 01:05:21,450
0,330 330,450 450,660 660,780 780,990
There's going to be some
这里将会有一些网络交流，

2071
01:05:21,450 --> 01:05:23,610
0,270 270,810 810,1440 1440,2010 2010,2160
network communication here,| when the
|当工作实际产生时，全局文件系统中的文件。

2072
01:05:23,610 --> 01:05:24,510
0,210 210,300 300,510 510,810 810,900
work is actually produced the

2073
01:05:24,510 --> 01:05:25,470
0,360 360,420 420,480 480,750 750,960
files in the global file

2074
01:05:25,470 --> 01:05:26,380
0,360
system.|
|

2075
01:05:29,130 --> 01:05:31,680
0,240 240,390 390,720 720,1950 2280,2550
I have another question,| is
我还有一个问题，|协调器是否负责对数据进行分区并将其放到每个工作器或机器上？

2076
01:05:31,680 --> 01:05:32,940
0,540
the,

2077
01:05:32,940 --> 01:05:35,610
0,150 150,270 270,1500 1500,1920 1950,2670
is the coordinator {} responsible

2078
01:05:35,610 --> 01:05:38,730
0,660 900,1950 1950,2100 2130,2550 2550,3120
for partitioning the data and

2079
01:05:38,730 --> 01:05:41,100
0,660 660,840 840,1110 1110,1860
putting it on each

2080
01:05:42,370 --> 01:05:46,630
0,990 990,1650 1800,3630 3660,3900 3900,4260
worker or machine?| No, not
|不，基本上不是MapReduce运行用户程序，

2081
01:05:46,630 --> 01:05:48,610
0,270 270,540 540,960 960,1650 1680,1980
really the basically the {mapreduce

2082
01:05:48,610 --> 01:05:49,960
0,300 300,510 630,1050 1050,1110 1110,1350
-} {} run the user

2083
01:05:49,960 --> 01:05:51,280
0,450 450,570 570,840 840,1110 1110,1320
program,| {} basically saying like
|基本上就是说我想在f1，f2，f3，f4上运行，

2084
01:05:51,280 --> 01:05:52,180
0,300 300,450 450,510 510,780 780,900
I want to run it

2085
01:05:52,180 --> 01:05:53,440
0,90 90,270 270,660 660,870 870,1260
on {f1 -} {f2 -}

2086
01:05:53,440 --> 01:05:55,390
0,270 270,600 600,1140 1140,1590 1620,1950
{f3 -} f4 whatever,| {all,the}
|所有输入文件。

2087
01:05:55,390 --> 01:05:56,620
0,240 240,780
input files.|
|

2088
01:05:57,060 --> 01:05:58,740
0,750 750,900 900,1140 1140,1410 1410,1680
And {} those input files
这些输入文件驻留在GFS中。

2089
01:05:58,740 --> 01:06:00,160
0,150 150,210 210,900
live in GFS.|
|

2090
01:06:00,380 --> 01:06:02,060
0,240 240,900 900,1290 1320,1590 1590,1680
And so as part of
因此，作为工作规范的一部分，

2091
01:06:02,060 --> 01:06:03,530
0,90 90,330 330,1050 1050,1260 1260,1470
the job specification,| usually say
|通常会说需要处理哪些文件。

2092
01:06:03,530 --> 01:06:05,270
0,360 360,1440 1440,1560 1560,1620 1620,1740
which files need to be

2093
01:06:05,270 --> 01:06:06,320
0,570
processed.|
|

2094
01:06:07,650 --> 01:06:08,740
0,570
Okay.|
好吧。|

2095
01:06:13,540 --> 01:06:16,270
0,600 600,750 750,1260 1320,1890 2130,2730
Sorry, how does the {}
对不起，分拣是怎么做的，

2096
01:06:17,080 --> 01:06:20,410
0,240 240,870 870,1620 1860,2760 3060,3330
the sorting work,| does like
|喜欢谁做这种排序，怎么做。

2097
01:06:20,410 --> 01:06:21,490
0,180 180,450 450,630 630,930 930,1080
who does this sort and

2098
01:06:22,150 --> 01:06:23,950
0,360 360,630 630,1080 1080,1530 1530,1800
how is.| This the {mapreduce
|这是MapReduce库进行的一些排序，

2099
01:06:23,950 --> 01:06:25,360
0,270 270,750 780,1170 1170,1230 1230,1410
-} library does a little

2100
01:06:25,360 --> 01:06:26,740
0,120 120,180 180,720 750,1320 1320,1380
bit of sorting,| before it
|在它将其传递给到Reduce函数的MapReduce之前。

2101
01:06:26,740 --> 01:06:27,640
0,210 210,300 300,510 510,690 690,900
hands it off to the

2102
01:06:27,640 --> 01:06:29,050
0,240 240,780 840,990 990,1140 1140,1410
{mapreduce -} to the reduce

2103
01:06:29,050 --> 01:06:29,980
0,390
function.|
|

2104
01:06:30,210 --> 01:06:31,230
0,180 180,270 270,540 540,630 630,1020
So, for example the intermediate
因此，例如，中间结果可能具有基本上所有的中间结果

2105
01:06:31,230 --> 01:06:33,150
0,360 360,600 600,900 900,1170 1200,1920
results might have like basically

2106
01:06:33,150 --> 01:06:34,260
0,180 180,240 240,660 660,900 900,1110
all the intermediate results| for
|对于键a、b和c，属于一个工人。

2107
01:06:34,260 --> 01:06:35,400
0,360 360,510 510,660 660,780 780,1140
keys a b and c

2108
01:06:35,400 --> 01:06:37,220
0,270 270,450 450,780 780,1290
go to one worker.|
|

2109
01:06:37,700 --> 01:06:40,070
0,690 690,810 810,930 930,1890 2040,2370
And you know they're you
你知道，它们是，你知道，只有一大堆键值对

2110
01:06:40,070 --> 01:06:41,060
0,180 180,390 390,540 540,600 600,990
know there's just a whole

2111
01:06:41,060 --> 01:06:43,340
0,270 270,1170 1350,1530 1530,1860 1860,2280
bunch of key value pairs|
|

2112
01:06:43,340 --> 01:06:45,350
0,180 210,420 420,1200 1620,1740 1740,2010
like {a,,1 -} you know
就像a，你知道b，你知道，

2113
01:06:45,350 --> 01:06:48,050
0,300 300,1080 1440,1590 1590,1710 1710,2700
{b,,1 -} you know whenever

2114
01:06:48,050 --> 01:06:50,180
0,270 270,540 540,1230 1350,2040 2040,2130
{a,,1 -} again,| {} you
|你知道的，C，1都行。

2115
01:06:50,180 --> 01:06:52,420
0,180 180,510 510,1170 1200,1830
know {c,,1 -} whatever.|
|

2116
01:06:52,420 --> 01:06:53,920
0,450 450,780 780,1110 1110,1320 1320,1500
And basically what the {mapreduce
基本上，MapReduce库所做的是，它首先按键排序，

2117
01:06:53,920 --> 01:06:55,300
0,240 240,600 600,870 870,990 990,1380
-} library {does,is}, it sorts

2118
01:06:55,300 --> 01:06:56,770
0,240 240,360 360,840 870,1290 1320,1470
first by key,| so {[]
|所以[]所有的一切都在一起

2119
01:06:56,770 --> 01:06:58,090
0,240 240,450 450,540 540,780 780,1320
-} all the as together|
|

2120
01:06:58,090 --> 01:06:58,720
0,120 120,240 240,360 360,450 450,630
and then all the bs
然后所有的B都放在一起

2121
01:06:58,720 --> 01:06:59,500
0,360 360,450 450,600 600,720 720,780
together| and then all the
|然后所有的cs都在一起

2122
01:06:59,500 --> 01:07:01,450
0,240 240,900 1020,1230 1230,1350 1350,1950
cs together| and then basically
|然后基本上将来自单个键的所有值连接在一起

2123
01:07:01,480 --> 01:07:03,340
0,960 960,1170 1170,1260 1260,1710 1710,1860
concatenates all the values from

2124
01:07:03,340 --> 01:07:04,540
0,180 180,420 420,720 750,960 960,1200
one single key| and hands
|并将其传递给REDUTE功能。

2125
01:07:04,540 --> 01:07:05,500
0,210 210,450 450,570 570,690 690,960
that off to the reduce

2126
01:07:05,500 --> 01:07:06,360
0,360
function.|
|

2127
01:07:08,630 --> 01:07:09,960
0,300 300,750
Thank you.|
谢谢。|

2128
01:07:17,880 --> 01:07:19,590
0,240 240,750 750,1410 1440,1650 1650,1710
Okay, so I want to
好的，现在我想稍微谈谈[]，

2129
01:07:19,590 --> 01:07:20,250
0,90 90,150 150,330 330,450 450,660
talk a little bit about

2130
01:07:20,250 --> 01:07:22,950
0,510 510,870 1050,1890 1890,2550 2550,2700
[] now,| {} and so
|所以回到过去。

2131
01:07:22,950 --> 01:07:24,620
0,150 150,450 450,780 780,1110
go back to {}.|
|

2132
01:07:32,840 --> 01:07:33,800
0,180 180,240 240,480 480,570 570,960
Could I ask a question
我可以问一个关于MapReduce论文的问题吗？

2133
01:07:33,800 --> 01:07:35,090
0,210 210,300 300,570 570,630 630,1290
about the {mapreduce,paper - -}

2134
01:07:35,090 --> 01:07:37,340
0,150 150,510 1530,1860 1860,2100 2100,2250
real quick,| so is the
|更大的想法也是如此，即许多函数式编程可以归结为MapReduce问题。

2135
01:07:37,340 --> 01:07:40,280
0,570 570,1440 1470,2040 2370,2610 2610,2940
larger idea that a lot

2136
01:07:40,280 --> 01:07:42,530
0,120 120,780 780,1710 1710,2010 2010,2250
of functional programming could be

2137
01:07:42,530 --> 01:07:44,150
0,720 720,810 810,900 900,1200 1200,1620
reduced to the {mapreduce -}

2138
01:07:44,330 --> 01:07:45,680
0,780
problem.|
|

2139
01:07:45,740 --> 01:07:50,300
0,450 630,1260 1620,2580 2640,4170 4170,4560
Yes.| Okay, yeah.| Yeah, okay.|
是。|好的，好的。|好的，好的。|

2140
01:07:50,630 --> 01:07:51,830
0,180 180,570 570,690 690,960 960,1200
In fact the name hints
事实上，这个名字暗示着，

2141
01:07:51,830 --> 01:07:53,360
0,60 60,390 390,900 900,1350 1350,1530
{that -},| because basically there
|因为基本上有两个你知道的映射和归约函数的概念

2142
01:07:53,360 --> 01:07:54,440
0,330 330,450 450,600 600,750 750,1080
two you know the notion

2143
01:07:54,440 --> 01:07:55,220
0,90 90,150 150,420 420,510 510,780
of {} map and reduce

2144
01:07:55,220 --> 01:07:56,510
0,390 390,480 480,750 750,990 990,1290
functions| is something very common
|在函数式编程语言中非常常见。

2145
01:07:56,510 --> 01:07:58,420
0,90 90,420 420,810 810,1440
in functional programming languages.|
|

2146
01:07:58,720 --> 01:08:00,490
0,600 600,1020 1020,1350 1350,1440 1440,1770
And used widely in functional
并在函数式编程语言中广泛使用，

2147
01:08:00,490 --> 01:08:02,170
0,390 390,1020 1140,1350 1350,1500 1500,1680
programming languages,| or any sort
|或任何类型的函数式编程风格，

2148
01:08:02,170 --> 01:08:03,640
0,60 60,360 360,750 750,1200 1230,1470
of functional programming style,| and
|所以基本上你知道这就是灵感的来源。

2149
01:08:03,640 --> 01:08:05,680
0,300 300,930 1110,1770 1770,1860 1860,2040
so the basically you know

2150
01:08:05,680 --> 01:08:07,270
0,210 210,390 390,480 480,1380 1380,1590
that's where the inspiration came

2151
01:08:07,270 --> 01:08:08,040
0,240
from.|
|

2152
01:08:10,990 --> 01:08:12,120
0,600
Okay?|
好吧?|

2153
01:08:12,180 --> 01:08:13,110
0,240 240,450 450,600 600,750 750,930
So actually there's a good
因此，实际上有一个很好的检查，有两个容错，

2154
01:08:13,110 --> 01:08:14,370
0,210 210,330 330,480 480,660 660,1260
check with two fault tolerance,|
|

2155
01:08:14,460 --> 01:08:17,730
0,810 810,1140 1140,1620 1980,2820 3000,3270
{ -} because the the
因为这个想法是，如果一个工人失败了。

2156
01:08:17,730 --> 01:08:20,790
0,480 480,840 840,1080 1080,2400 2880,3060
idea is that if a

2157
01:08:20,790 --> 01:08:22,220
0,360 360,960
worker fails.|
|

2158
01:08:22,310 --> 01:08:24,020
0,720 780,900 900,1470 1470,1620 1620,1710
Then the coordinators are in
然后协调人负责通知工人失败

2159
01:08:24,020 --> 01:08:25,220
0,360 360,450 450,960 960,1110 1110,1200
charge of noticing that the

2160
01:08:25,220 --> 01:08:27,950
0,270 270,660 660,810 810,1410 1470,2730
worker fails| and basically restarts
|然后基本上重新开始这项任务。

2161
01:08:27,980 --> 01:08:29,280
0,240 240,810
that task.|
|

2162
01:08:29,310 --> 01:08:32,100
0,330 330,870 900,1020 1020,1860
And so the coordinator
因此协调器重新运行映射和还原函数。

2163
01:08:35,280 --> 01:08:36,900
0,1140
reruns

2164
01:08:37,750 --> 01:08:39,900
0,570 570,660 660,930 930,1500
map and reduce functions.|
|

2165
01:08:42,340 --> 01:08:43,870
0,90 90,270 270,840 840,1290 1290,1530
Of course, coordinator itself doesn't
当然，协调器本身不会重新运行它们，

2166
01:08:43,870 --> 01:08:45,580
0,390 390,600 600,780 780,1200 1200,1710
rerun them,| but basically coordinator
|但基本上协调员说你知道特定的地图功能需要再次运行，

2167
01:08:45,580 --> 01:08:46,510
0,90 90,510 510,600 600,690 690,930
to says you know that

2168
01:08:46,510 --> 01:08:47,890
0,660 660,870 870,1140 1140,1290 1290,1380
particular map function needs to

2169
01:08:47,890 --> 01:08:50,260
0,150 150,390 390,810 1080,1710 1710,2370
be run again,| because it
|因为在协调者看来，它交给您的任务的机器实际上没有响应，

2170
01:08:50,260 --> 01:08:51,580
0,390 390,480 480,540 540,1140 1140,1320
appears to the coordinator that

2171
01:08:51,580 --> 01:08:53,440
0,480 480,810 810,1170 1170,1680 1680,1860
machine that it handed {you,know}

2172
01:08:53,440 --> 01:08:56,200
0,390 810,1470 1470,1740 1740,2220 2220,2760
the task to actually {}

2173
01:08:56,200 --> 01:08:57,940
0,420 450,780 780,1230 1410,1560 1560,1740
is not responding,| and so
|所以困难的事情就像，

2174
01:08:57,940 --> 01:08:59,230
0,390 390,570 570,780 780,990 990,1290
difficult thing is like,| if
|如果机器在一定时间内没有反应，

2175
01:08:59,230 --> 01:09:00,340
0,60 60,360 360,540 540,930 930,1110
the machine doesn't respond to

2176
01:09:00,340 --> 01:09:01,360
0,30 30,270 270,450 450,510 510,1020
some certain amount of time,|
|

2177
01:09:01,420 --> 01:09:02,320
0,210 210,660 660,720 720,840 840,900
the coordinators are going to
协调人将假定机器崩溃了。

2178
01:09:02,320 --> 01:09:03,880
0,270 270,420 420,690 690,1230
assume that machine crashed.|
|

2179
01:09:04,860 --> 01:09:05,980
0,630

2180
01:09:06,190 --> 01:09:08,200
0,180 180,570 660,1200 1200,1410 1410,2010
And so, {} and that
因此，这意味着当另一名工人获得自由时

2181
01:09:08,200 --> 01:09:11,140
0,480 540,780 780,1260 1260,2070 2190,2940
means {} that { -}

2182
01:09:11,830 --> 01:09:13,360
0,360 360,660 660,930 930,1230 1230,1530
when another worker becomes free|
|

2183
01:09:13,360 --> 01:09:14,350
0,270 270,390 390,510 510,750 750,990
and {you,know} was looking for
你知道我在寻找一项新的任务

2184
01:09:14,350 --> 01:09:16,060
0,240 270,600 600,1200 1410,1590 1590,1710
a new task| and it
|它将分发与之前实际分发的任务相同的任务，然后再次分发。

2185
01:09:16,060 --> 01:09:17,140
0,150 150,390 390,570 570,780 780,1080
will hand out the same

2186
01:09:17,140 --> 01:09:18,310
0,360 360,480 480,600 600,930 930,1170
task that had actually handed

2187
01:09:18,310 --> 01:09:19,810
0,150 150,600 600,720 720,1380 1380,1500
out earlier and handed out

2188
01:09:19,810 --> 01:09:20,640
0,270
again.|
|

2189
01:09:21,460 --> 01:09:22,540
0,540 540,660 660,780 780,930 930,1080
{} And so that's sort
这就是容错的基本计划，

2190
01:09:22,540 --> 01:09:23,560
0,60 60,150 150,450 450,720 720,1020
of the basic plan {for,fault}

2191
01:09:23,560 --> 01:09:25,810
0,570 600,870 870,1170 1350,2010 2010,2250
tolerance is that,| {} if
|如果这里关于特定员工汇报的协调员完成了任务

2192
01:09:25,810 --> 01:09:27,610
0,570 570,840 840,1080 1080,1110 1110,1800
coordinators here about {} particular

2193
01:09:27,610 --> 01:09:31,030
0,1020 1830,2310 2310,2730 2730,3180 3180,3420
{} worker reporting back the

2194
01:09:31,030 --> 01:09:32,380
0,390 390,450 450,810 990,1170 1170,1350
task is done| and we'll
|我们将重新运行该任务。

2195
01:09:32,380 --> 01:09:34,120
0,360 360,420 420,840 870,1230
rerun the task again.|
|

2196
01:09:34,180 --> 01:09:35,380
0,150 150,210 210,480 480,810 810,1200
So an instant question is
因此，一个即时问题是，地图功能是否可以运行两次，

2197
01:09:35,500 --> 01:09:36,940
0,240 240,450 450,510 510,780 780,1440
like can a map function,

2198
01:09:37,360 --> 01:09:38,890
0,480 480,510 510,750 750,960 960,1530
get a map run twice,|
|

2199
01:09:41,530 --> 01:09:43,140
0,180 180,270 270,600 600,1080
and even complete twice,|
甚至完成两次，|

2200
01:09:50,160 --> 01:09:51,390
0,120 120,210 210,780 810,1050 1050,1230
is it possible in this
在这个框架里有没有可能，

2201
01:09:51,390 --> 01:09:52,800
0,510 510,750 750,840 840,1230 1230,1410
framework,| that you know a
|你知道一个特定的映射器会运行两次。

2202
01:09:52,800 --> 01:09:54,780
0,690 690,1080 1080,1230 1230,1410 1410,1980
particular mapper will run twice.|
|

2203
01:09:55,850 --> 01:09:57,530
0,180 180,480 480,600 660,1020 1020,1680
I guess it is,| because
我想是的，|因为如果机器坏了，

2204
01:09:57,530 --> 01:09:59,360
0,360 450,780 780,1200 1200,1440 1440,1830
if the machine is down,|
|

2205
01:09:59,360 --> 01:10:01,240
0,120 120,360 360,660 660,1170
you can't really tell
你真的分不清是哪一个点，

2206
01:10:01,240 --> 01:10:02,530
0,210 210,420 420,780 780,1140 1140,1290
{} at which point,| so
|那么它在特定MapReduce实例期间执行的地图任务实际完成了多少，

2207
01:10:02,530 --> 01:10:04,320
0,180 180,480 480,630 630,1110
how many of the

2208
01:10:04,500 --> 01:10:06,750
0,450 510,1080 1080,1620 1620,1890 2010,2250
{} map tasks that it

2209
01:10:07,440 --> 01:10:10,410
0,810 1230,1950 1950,2070 2070,2610 2610,2970
executed during the specific {mapreduce

2210
01:10:10,410 --> 01:10:12,600
0,330 330,870 900,1200 1200,1650 1650,2190
-} instance were actually completed,|
|

2211
01:10:12,600 --> 01:10:13,680
0,180 180,300 300,480 510,810 810,1080
so you would just have
所以我想，你只需要把它们都查一遍就行了。

2212
01:10:13,680 --> 01:10:15,810
0,360 810,1290 1320,1830 1830,1980 1980,2130
to {} run all of

2213
01:10:15,810 --> 01:10:16,980
0,210 210,300 300,690
them, I guess.|
|

2214
01:10:17,440 --> 01:10:19,750
0,240 240,1440 1440,1590 1590,2190 2190,2310
Yeah, yeah, so mostly we
是的，是的，所以我们通常一次只考虑这一项任务，

2215
01:10:19,750 --> 01:10:20,590
0,150 150,270 270,480 480,600 600,840
just think about this one

2216
01:10:20,590 --> 01:10:21,730
0,300 300,390 390,450 450,840 840,1140
task at a time,| but
|但是，像这样的机器会返回到协调器，请求下一个任务

2217
01:10:21,760 --> 01:10:23,860
0,360 360,990 1080,1560 1560,1950 1950,2100
{} so machine like that

2218
01:10:23,860 --> 01:10:25,300
0,180 180,660 660,1080 1080,1260 1260,1440
one task then goes back

2219
01:10:25,300 --> 01:10:26,230
0,90 90,150 150,630 630,840 840,930
to the coordinator asked for

2220
01:10:26,230 --> 01:10:27,250
0,60 60,330 330,780 810,900 900,1020
the next task| and that
|这可能是另一项地图任务。

2221
01:10:27,250 --> 01:10:28,420
0,150 150,240 240,480 480,720 720,1170
might be another map task.|
|

2222
01:10:28,960 --> 01:10:30,040
0,390 390,570 570,690 690,900 900,1080
{} And so when the
所以当协调人听不到你的背部时，

2223
01:10:30,220 --> 01:10:31,810
0,360 360,570 570,1020 1020,1140 1140,1590
coordinater doesn't hear your back,|
|

2224
01:10:31,990 --> 01:10:33,010
0,180 180,270 270,480 480,660 660,1020
it will say like okay
它会说，好的，让另一名工人也运行地图测试，

2225
01:10:33,040 --> 01:10:34,150
0,270 270,480 480,750 750,1020 1020,1110
go ask another worker to

2226
01:10:34,150 --> 01:10:35,650
0,540 540,720 720,930 930,1200 1200,1500
run that map test too,|
|

2227
01:10:35,770 --> 01:10:36,340
0,180 180,240 240,390 390,480 480,570
but it could be the
但也可能是因为你准确地指出了这一点，

2228
01:10:36,340 --> 01:10:37,450
0,330 330,540 540,750 750,900 900,1110
case that is you point

2229
01:10:37,450 --> 01:10:39,550
0,450 450,720 720,900 900,1170 1530,2100
exactly out,| that the first
|第一个工人，第一台机器实际上并没有崩溃。

2230
01:10:39,580 --> 01:10:41,290
0,690 690,780 780,990 990,1500 1530,1710
worker the first machine didn't

2231
01:10:41,290 --> 01:10:42,600
0,270 270,900
actually crash.|
|

2232
01:10:42,600 --> 01:10:43,380
0,180 180,360 360,600 600,660 660,780
{} Just happen to be
只是碰巧是一份网络请愿书，或者就像协调者这个词不能与机器通信一样，

2233
01:10:43,380 --> 01:10:44,520
0,60 60,360 360,810 810,990 990,1140
a network petition or like

2234
01:10:44,520 --> 01:10:45,630
0,90 90,330 330,810 810,930 930,1110
the word coordinator was not

2235
01:10:45,630 --> 01:10:47,370
0,240 240,330 330,930 930,1110 1110,1740
able to communicate with the

2236
01:10:47,400 --> 01:10:48,900
0,420 450,660 660,1140 1140,1320 1320,1500
machine,| but actually it's just
|但实际上，它只是在愉快地运行，真正地完成了地图任务，

2237
01:10:48,900 --> 01:10:50,010
0,270 270,660 660,750 750,960 960,1110
running happily and actually doing

2238
01:10:50,010 --> 01:10:51,390
0,90 90,330 330,750 1110,1290 1290,1380
the map task,| and it
|它可以产生一组中间的结果。

2239
01:10:51,390 --> 01:10:52,350
0,90 90,480 480,570 570,840 840,960
can produce you know an

2240
01:10:52,350 --> 01:10:54,180
0,540 540,690 690,780 780,1380
intermediate set of results.|
|

2241
01:10:54,460 --> 01:10:55,930
0,570 660,900 900,990 990,1230 1230,1470
{} So the same map
因此，同一地图函数实际上可以精确运行两次

2242
01:10:55,930 --> 01:10:57,730
0,330 330,660 660,1080 1080,1260 1260,1800
function {can,actually} exactly run twice|
|

2243
01:10:58,150 --> 01:11:00,490
0,540 540,960 960,1410 1590,1920 1920,2340
{} and so it's actually
所以这实际上是你知道MapReduce或Functional的原因之一，

2244
01:11:00,490 --> 01:11:01,750
0,300 300,390 390,480 480,1140 1170,1260
one of the reasons you

2245
01:11:01,750 --> 01:11:02,800
0,120 120,300 300,540 540,900 900,1050
know that {mapreduce -} or

2246
01:11:02,800 --> 01:11:05,290
0,720 990,1170 1170,1590 1590,1860 1860,2490
functional is,| because that's okay
|因为如果它是一个功能强大的程序，那是可以的，

2247
01:11:05,290 --> 01:11:06,730
0,300 300,510 510,570 570,960 960,1440
if it's a functional program,|
|

2248
01:11:06,760 --> 01:11:08,110
0,270 270,420 420,720 720,810 810,1350
if you run the same
如果您在相同的输入上运行相同的程序，

2249
01:11:08,110 --> 01:11:09,970
0,630 690,870 870,930 930,1320 1320,1860
program on the same input,|
|

2250
01:11:10,360 --> 01:11:11,320
0,270 270,390 390,540 540,600 600,960
if you run a functional
如果您在相同的输入上运行函数程序，

2251
01:11:11,320 --> 01:11:12,670
0,480 480,600 600,690 690,990 990,1350
program on the same input,|
|

2252
01:11:12,670 --> 01:11:13,750
0,120 120,240 240,480 480,990 990,1080
it will produce exactly the
它将产生完全相同的输出。

2253
01:11:13,750 --> 01:11:14,840
0,240 240,690
same output.|
|

2254
01:11:14,840 --> 01:11:16,130
0,90 90,270 270,510 510,1110 1140,1290
So there's really matter that
所以它运行两次真的很重要，

2255
01:11:16,130 --> 01:11:17,510
0,150 150,360 360,900 930,1050 1050,1380
it runs twice,| you know
|你知道，在这两种情况下产生的产量是完全相同的。

2256
01:11:17,510 --> 01:11:19,610
0,330 420,780 780,1140 1140,1710 1740,2100
in both cases were produced

2257
01:11:19,640 --> 01:11:21,560
0,630 630,690 690,960 960,1440
exactly the same output.|
|

2258
01:11:21,770 --> 01:11:23,000
0,150 150,270 270,480 480,690 690,1230
And so this is where
所以这就是这个功能方面实际上非常重要的地方。

2259
01:11:23,180 --> 01:11:24,890
0,420 420,930 930,1410 1410,1500 1500,1710
this functional aspect is actually

2260
01:11:24,890 --> 01:11:26,660
0,240 240,840
really important.|
|

2261
01:11:26,720 --> 01:11:27,410
0,150 150,420 420,510 510,600 600,690
It basically has to be
它基本上必须是功能性的或确定性的。

2262
01:11:27,410 --> 01:11:29,360
0,420 420,480 480,1320
functional or deterministic.|
|

2263
01:11:33,080 --> 01:11:34,430
0,150 150,390 390,690 690,1110 1140,1350
You see every run of
您可以看到，此映射函数的每次运行都必须产生相同的输出，

2264
01:11:34,430 --> 01:11:35,540
0,120 120,570 570,780 780,1050 1050,1110
this {map,function} must produce the

2265
01:11:35,540 --> 01:11:36,710
0,240 240,660 660,930 930,1050 1050,1170
same output,| because we're going
|因为我们要在总计算中使用其中的一个。

2266
01:11:36,710 --> 01:11:37,610
0,60 60,240 240,480 480,570 570,900
to use one of them

2267
01:11:37,820 --> 01:11:40,310
0,300 300,750 750,870 870,1470 2160,2490
{} into the total total

2268
01:11:40,310 --> 01:11:41,440
0,540
computation.|
|

2269
01:11:42,580 --> 01:11:43,840
0,150 150,480 480,660 660,960 960,1260
So similar, can reduce function
那么类似，会不会减少函数运行两次呢？

2270
01:11:43,840 --> 01:11:45,080
0,180 180,690
run twice?|
|

2271
01:11:59,920 --> 01:12:02,380
0,780 780,840 840,1110 1110,1530 2040,2460
Yes, I believe so.| Yep,
是的，我想是的。|是的，完全出于同样的原因，

2272
01:12:02,410 --> 01:12:03,580
0,510 510,600 600,660 660,840 840,1170
exactly for the same reason,|
|

2273
01:12:03,640 --> 01:12:05,170
0,30 30,630 630,780 780,1140 1140,1530
I mean the machine runs
我的意思是机器运行的还原功能和地图任务没有什么不同，

2274
01:12:05,440 --> 01:12:06,700
0,390 390,720 720,840 840,990 990,1260
reduce function is no different

2275
01:12:06,700 --> 01:12:07,900
0,90 90,150 150,390 390,810 810,1200
than {} map task,| there's
|从容错的角度来看真的没有，

2276
01:12:07,900 --> 01:12:08,980
0,210 210,390 390,570 570,660 660,1080
really no from the {fault,tolerance}

2277
01:12:08,980 --> 01:12:10,210
0,420 420,570 570,720 720,990 990,1230
perspective,| there's no really big
|映射任务和归约任务之间并没有太大的区别，

2278
01:12:10,210 --> 01:12:11,440
0,300 300,570 570,630 630,930 930,1230
difference between a map task

2279
01:12:11,440 --> 01:12:13,630
0,150 150,420 420,870 1140,1890 1920,2190
and reduce task,| if the
|如果运行REDUTE任务的计算机没有报告，

2280
01:12:13,630 --> 01:12:15,250
0,390 390,720 720,810 810,1140 1140,1620
machine running the reduce task

2281
01:12:15,550 --> 01:12:17,920
0,840 840,1200 1200,1620 1620,2040 2040,2370
doesn't report back,| but happens
|但恰好也会完成这项工作，

2282
01:12:17,920 --> 01:12:19,390
0,120 120,480 480,750 990,1350 1350,1470
to also will finish the

2283
01:12:19,390 --> 01:12:21,070
0,480 510,840 840,1110 1110,1500 1500,1680
job,| another machine {might,run} be
|另一台机器可能正在运行完全相同的归约功能。

2284
01:12:21,070 --> 01:12:22,330
0,240 240,690 690,780 780,990 990,1260
running exactly the same reduce

2285
01:12:22,330 --> 01:12:23,100
0,330
function.|
|

2286
01:12:24,060 --> 01:12:25,320
0,150 150,360 360,540 540,810 810,1260
And they will produce output.|
他们将产生产出。|

2287
01:12:25,890 --> 01:12:26,880
0,150 150,330 330,690 690,870 870,990
Now the only sort of
现在唯一有趣的方面是

2288
01:12:26,880 --> 01:12:28,500
0,420 420,930 930,1110 1230,1530 1530,1620
interesting aspect in this is|
|

2289
01:12:28,500 --> 01:12:30,360
0,450 450,990 1020,1350 1350,1680 1680,1860
that both reduce function will
这两个Reduced函数都会写入，您知道，中间会将最终输出文件写入GFS。

2290
01:12:30,360 --> 01:12:32,010
0,360 360,480 480,780 780,1380 1380,1650
write {you,know} an intermediate will

2291
01:12:32,010 --> 01:12:33,690
0,270 270,630 660,1020 1020,1410 1410,1680
write the final output file

2292
01:12:33,690 --> 01:12:35,300
0,270 270,1020
into GFS.|
|

2293
01:12:35,300 --> 01:12:36,920
0,330 330,420 420,810 840,1230 1230,1620
And if you paid attention
如果你注意到它，

2294
01:12:36,920 --> 01:12:38,210
0,180 180,390 690,900 900,1020 1020,1290
to it,| you will notice
|你会注意到他们所做的是

2295
01:12:38,210 --> 01:12:39,170
0,120 120,300 300,510 510,810 810,960
that what they what they

2296
01:12:39,170 --> 01:12:40,280
0,180 180,330 330,630 630,780 780,1110
do is| actually they first
|实际上他们首先在全局文件系统中的中间文件中产生文件，

2297
01:12:40,280 --> 01:12:41,540
0,420 420,510 510,1020 1020,1170 1170,1260
produce the file in an

2298
01:12:41,540 --> 01:12:42,770
0,600 600,810 810,870 870,960 960,1230
intermediate file in the global

2299
01:12:42,770 --> 01:12:43,700
0,240 240,540 540,630 630,780 780,930
file system,| and then do
|然后进行原子重命名，

2300
01:12:43,700 --> 01:12:45,420
0,90 90,570 570,1050
an atomic rename,|
|

2301
01:12:47,670 --> 01:12:49,680
0,540 540,1080 1080,1500
{} to {}
要命名，请移动文件或将文件重命名为其实际的最终名称。

2302
01:12:50,380 --> 01:12:52,390
0,840 870,1290 1290,1380 1380,1830 1830,2010
name, move the file or

2303
01:12:52,390 --> 01:12:53,500
0,300 300,390 390,690 690,960 960,1110
rename the file into its

2304
01:12:53,500 --> 01:12:55,160
0,300 300,660 660,1110
actually final name.|
|

2305
01:12:55,620 --> 01:12:56,910
0,450 450,780 780,1080 1080,1200 1200,1290
{} And because you know
因为你知道它是原子的，

2306
01:12:56,910 --> 01:12:57,990
0,120 120,600 600,660 660,810 810,1080
it's atomic,| you know one
|您知道，这两个REDUTE函数中的一个将获胜，

2307
01:12:57,990 --> 01:12:59,070
0,90 90,150 150,390 390,690 690,1080
of the two reduce functions

2308
01:12:59,070 --> 01:13:00,900
0,150 150,570 810,1410 1410,1620 1620,1830
will win,| but it doesn't
|但谁赢并不重要，

2309
01:13:00,900 --> 01:13:01,950
0,180 180,360 360,570 570,780 780,1050
really matter which one wins,|
|

2310
01:13:01,950 --> 01:13:02,730
0,240 240,330 330,450 450,510 510,780
because they're going to produce
因为它们将产生完全相同的结果，

2311
01:13:02,730 --> 01:13:04,140
0,420 420,510 510,750 750,1170 1170,1410
exactly the same outcome,| because
|因为它们是有功能的。

2312
01:13:04,140 --> 01:13:05,220
0,150 150,570
they're functional.|
|

2313
01:13:08,470 --> 01:13:09,520
0,270 270,540 540,750 750,810 810,1050
{} So just to double
所以我再仔细检查一下，

2314
01:13:09,520 --> 01:13:11,110
0,330 390,870 870,1290 1320,1470 1470,1590
check,| so, {} if we
|因此，如果我们有一台机器正在执行地图任务，

2315
01:13:11,110 --> 01:13:12,310
0,210 210,300 300,720 720,930 930,1200
have a machine that's doing

2316
01:13:12,310 --> 01:13:13,810
0,60 60,480 540,960 960,1140 1140,1500
a map task,| so a
|因此，一台机器可以完成多个地图任务，

2317
01:13:13,810 --> 01:13:15,220
0,510 600,930 930,1080 1080,1230 1230,1410
single machine can do like

2318
01:13:15,220 --> 01:13:16,870
0,540 780,1050 1050,1320 1320,1440 1440,1650
multiple map tasks,| so let's
|假设它正在执行大约10个地图任务

2319
01:13:16,870 --> 01:13:17,710
0,120 120,270 270,420 420,660 660,840
say that it's doing like

2320
01:13:17,710 --> 01:13:19,870
0,390 570,960 960,1410 1620,1980 1980,2160
10 map tasks| and it's
|它在第七个任务中，

2321
01:13:19,870 --> 01:13:21,520
0,90 90,180 180,720 720,1260 1500,1650
in the 7th task,| and
|然后由于某种原因，它失败了

2322
01:13:21,520 --> 01:13:22,390
0,150 150,240 240,450 450,690 690,870
then for some reason it

2323
01:13:22,390 --> 01:13:23,740
0,570 720,840 840,960 960,1020 1020,1350
failed| and then the master
|然后主人就知道这台机器出故障了，

2324
01:13:23,740 --> 01:13:24,970
0,300 300,420 420,540 540,840 840,1230
knows that this machine failed,|
|

2325
01:13:25,330 --> 01:13:26,560
0,240 240,600 600,660 660,1050 1050,1230
so then the master will
因此，主服务器将命令重新执行已完成的所有7个地图任务，

2326
01:13:26,590 --> 01:13:27,820
0,510 510,840 840,1050 1050,1140 1140,1230
order for all of the

2327
01:13:27,820 --> 01:13:29,350
0,660 690,960 960,1260 1260,1410 1410,1530
7 map tasks that were

2328
01:13:29,350 --> 01:13:31,210
0,600 600,780 780,930 930,1110 1110,1860
completed to be {re-executed -},|
|

2329
01:13:31,660 --> 01:13:33,550
0,420 450,1140 1140,1320 1350,1680 1680,1890
{} {distributedly -} maybe on
可能分散在不同的地图机上，所以。

2330
01:13:33,550 --> 01:13:36,280
0,420 420,780 990,1350 1350,1680 1950,2730
different map machine, so.| Yep,
|是的，除非你知道这是对的，

2331
01:13:36,370 --> 01:13:38,860
0,480 480,1590 1590,2280 2280,2340 2340,2490
except {you,know,it's,right},| although I think
|虽然我认为它通常一次只有一张地图，

2332
01:13:38,860 --> 01:13:40,180
0,180 180,540 540,720 720,900 900,1320
it generally just goes one

2333
01:13:40,180 --> 01:13:41,710
0,360 360,480 480,510 510,900 1200,1530
map at a time,| so
|因此，基本上一台机器运行一个map函数或一个Reduce函数，而不是多个。

2334
01:13:41,710 --> 01:13:43,720
0,510 510,1290 1290,1620 1620,1830 1830,2010
basically one machine runs one

2335
01:13:43,720 --> 01:13:45,160
0,270 270,630 660,840 840,1140 1140,1440
map function or one reduce

2336
01:13:45,160 --> 01:13:46,620
0,330 330,540 540,990
function not multiple.|
|

2337
01:13:47,680 --> 01:13:49,510
0,330 630,840 840,960 1110,1500 1500,1830
Okay, thank you.| {} But
好的谢谢。|但在工作人员运行完地图任务后，

2338
01:13:49,510 --> 01:13:51,940
0,630 630,1440 1440,1860 1860,2100 2100,2430
after a worker's done running

2339
01:13:51,940 --> 01:13:54,040
0,90 90,330 330,930 1500,1860 1860,2100
the map task,| does it
|它是否会立即将其文件写入其他计算机可见的位置，

2340
01:13:54,040 --> 01:13:55,660
0,600 600,780 780,960 960,1230 1230,1620
immediately write it's file somewhere

2341
01:13:55,660 --> 01:13:57,880
0,240 240,600 600,1020 1020,1740 1740,2220
that's visible to other machines,|
|

2342
01:13:57,880 --> 01:13:58,960
0,270 270,450 450,540 540,720 720,1080
or does it just keep
或者它只是暂时将该文件保存在其文件系统中[]。

2343
01:13:58,990 --> 01:14:00,100
0,330 330,630 630,720 720,870 870,1110
that file in its file

2344
01:14:00,100 --> 01:14:01,090
0,330 330,450 450,510 510,720 720,990
system for the time {[]

2345
01:14:01,090 --> 01:14:02,380
0,180 180,330 330,720 720,900 900,1290
-}.| It keeps, {} map
|它保持，映射功能总是在本地磁盘上产生结果，

2346
01:14:02,380 --> 01:14:04,150
0,360 360,960 960,1350 1350,1410 1410,1770
function always produce the results

2347
01:14:04,150 --> 01:14:05,680
0,90 90,180 180,450 450,930 1110,1530
on the local disk,| and
|因此它位于其本地文件系统中。

2348
01:14:05,680 --> 01:14:06,340
0,120 120,210 210,420 420,510 510,660
so it sits in its

2349
01:14:06,340 --> 01:14:07,980
0,540 540,840 840,1230
local file system.|
|

2350
01:14:08,420 --> 01:14:10,280
0,510 510,720 720,1440 1440,1740 1740,1860
Right, so then even if
对，所以即使你一次只做一个地图任务，

2351
01:14:10,280 --> 01:14:11,540
0,120 120,240 240,570 570,900 900,1260
you were doing map tasks

2352
01:14:11,540 --> 01:14:12,800
0,180 180,300 300,360 360,900 1110,1260
one at a time,| in
|在你做了多次操作然后机器崩溃的情况下，

2353
01:14:12,800 --> 01:14:13,970
0,60 60,510 510,690 690,900 900,1170
the scenario where you did

2354
01:14:13,970 --> 01:14:15,860
0,780 810,1350 1350,1500 1500,1560 1560,1890
multiple and then the machine

2355
01:14:15,860 --> 01:14:17,540
0,390 390,720 750,1050 1050,1140 1140,1680
crashed,| you lose the intermediate
|你失去了中间的工作，对吧。

2356
01:14:17,540 --> 01:14:19,580
0,420 540,930 930,1140 1140,1950 1950,2040
work, right.| No, it's {sit,in}
|不，它位于文件系统中，

2357
01:14:19,580 --> 01:14:20,540
0,60 60,300 300,660 660,810 810,960
the file system,| so when
|所以当机器恢复工作时，

2358
01:14:20,540 --> 01:14:21,560
0,60 60,330 330,540 540,750 750,1020
the machine comes back up,|
|

2359
01:14:21,590 --> 01:14:22,880
0,120 120,300 300,690 690,1050 1050,1290
you know maybe the stuff
你知道，也许东西就在那里。

2360
01:14:22,880 --> 01:14:23,780
0,90 90,450
is there.|
|

2361
01:14:24,090 --> 01:14:26,280
0,510 510,810 810,1470 1890,2070 2070,2190
Oh, I see, so the
哦，我明白了，所以这些数据实际上是耐用的。

2362
01:14:26,280 --> 01:14:27,600
0,240 240,360 360,720 720,960 960,1320
data is actually in store

2363
01:14:27,600 --> 01:14:28,760
0,600
durably.|
|

2364
01:14:29,070 --> 01:14:30,660
0,180 180,300 300,510 510,1020
Oh, I see, okay.|
哦，我明白了，好的。|

2365
01:14:32,140 --> 01:14:33,310
0,150 150,210 210,750 750,1020 1020,1170
And the map or the
并且MAP或REDUTE函数直接与MAP函数对话

2366
01:14:33,310 --> 01:14:34,600
0,300 300,600 600,900 900,1200 1200,1290
reduce function directly talk to

2367
01:14:34,600 --> 01:14:35,890
0,60 60,330 330,780 780,1050 1050,1290
the map functions| and the
|这些机器实际上是有中间结果的。

2368
01:14:35,920 --> 01:14:37,060
0,390 390,510 510,750 750,1050 1050,1140
machines are actually have the

2369
01:14:37,060 --> 01:14:38,300
0,150 150,240 240,750
{intermediate -} results.|
|

2370
01:14:38,550 --> 01:14:39,780
0,300 300,660 690,900 900,960 960,1230
Okay, so let me talk
好的，那么让我快速谈谈其他几个失败。

2371
01:14:39,780 --> 01:14:40,950
0,420 420,600 600,660 660,900 900,1170
quickly about a couple other

2372
01:14:40,950 --> 01:14:42,260
0,630
failures.|
|

2373
01:14:47,140 --> 01:14:48,040
0,360 360,510 510,690 690,810 810,900
{} And notice all the
注意你问的所有问题，这是一个很棒的问题，

2374
01:14:48,040 --> 01:14:49,180
0,300 300,450 450,780 780,900 900,1140
questions you're asking a great

2375
01:14:49,180 --> 01:14:50,410
0,390 630,720 720,960 960,1080 1080,1230
question,| in fact that it
|事实上，这一切都会显现出来，

2376
01:14:50,410 --> 01:14:51,520
0,300 300,480 480,720 720,900 900,1110
all will show up,| when
|当您实际实施MapReduce时

2377
01:14:51,520 --> 01:14:52,690
0,120 120,360 360,780 780,960 960,1170
you're actually implementing what {mapreduce

2378
01:14:52,690 --> 01:14:53,470
0,300 300,390 390,570 570,690 690,780
-}| {} you'll have to
|你必须确切地决定你要怎么做。

2379
01:14:53,470 --> 01:14:54,670
0,390 390,750 750,870 870,990 990,1200
decide exactly how you're going

2380
01:14:54,670 --> 01:14:56,000
0,60 60,390 390,870
to do things.|
|

2381
01:14:56,630 --> 01:14:57,470
0,360 360,480 480,540 540,720 720,840
{} So a couple other
那么还有其他几件事，协调人会失败吗？我不这样认为。

2382
01:14:57,470 --> 01:14:59,520
0,420 420,600 600,1080 1080,1410
things, can coordinator fail?

2383
01:15:09,400 --> 01:15:11,060
0,90 90,390 390,690 690,1110
I don't think so.|
|

2384
01:15:11,180 --> 01:15:13,400
0,240 240,510 750,1320 1680,1950 1950,2220
That's correct,| the {} like
没错，|就像你的，那只猫，

2385
01:15:13,400 --> 01:15:18,920
0,420 630,2460 2460,2790 4320,5400 5400,5520
your, {} the cat,| the
|协调器不能失败，

2386
01:15:18,920 --> 01:15:21,350
0,420 420,1080 1080,1350 1770,2040 2040,2430
coordinator cannot fail,| so basically
|所以基本上当协调器出现故障时，

2387
01:15:21,350 --> 01:15:22,400
0,210 210,270 270,720 720,990 990,1050
when the coordinator fails,| the
|整个作业必须重新运行。

2388
01:15:22,400 --> 01:15:23,390
0,240 240,570 570,720 720,810 810,990
whole job has to be

2389
01:15:23,390 --> 01:15:24,420
0,480
rerun.|
|

2390
01:15:24,670 --> 01:15:26,200
0,630 630,780 780,960 960,1170 1170,1530
{} You know, in this
你知道，在这个特殊的实现中，

2391
01:15:26,200 --> 01:15:27,520
0,360 360,840 840,960 960,1140 1140,1320
particular implementation,| they have no
|他们没有协调失败的计划。

2392
01:15:27,520 --> 01:15:29,620
0,390 390,870 870,1170 1170,1290 1290,2100
plan for failures of coordinator.|
|

2393
01:15:30,620 --> 01:15:33,200
0,600 750,1050 1050,2040 2070,2520 2520,2580
{} That's what making the
这就是使跌落具有更强的容错性实际上更棘手的原因，

2394
01:15:33,200 --> 01:15:34,550
0,210 210,660 660,810 810,990 990,1350
fall according more fault tolerance

2395
01:15:34,550 --> 01:15:35,150
0,60 60,270 270,360 360,480 480,600
is actually a bit more

2396
01:15:35,150 --> 01:15:36,470
0,360 420,840 840,960 960,1230 1230,1320
tricky,| because it's actually a
|因为它实际上是一种状态，一种被修改的状态，

2397
01:15:36,470 --> 01:15:37,910
0,570 630,840 840,1110 1110,1260 1260,1440
state a state that gets

2398
01:15:37,910 --> 01:15:39,740
0,690 690,1110 1110,1410 1410,1530 1530,1830
modified,| every time a map
|每次映射函数完成或Reduce函数完成时

2399
01:15:39,740 --> 01:15:41,270
0,360 360,780 780,930 930,1200 1200,1530
function completes or reduce function

2400
01:15:41,270 --> 01:15:42,770
0,540 810,1050 1050,1170 1170,1260 1260,1500
completes| and so it actually
|所以它实际上被证明是更复杂的

2401
01:15:42,770 --> 01:15:43,880
0,180 180,270 270,330 330,510 510,1110
turns out to be {}

2402
01:15:43,880 --> 01:15:45,500
0,240 240,780 780,900 900,1050 1050,1620
more complicated| and so basically,
|因此，基本上，这个特殊的库，协调器不会出现故障。

2403
01:15:45,770 --> 01:15:48,260
0,780 930,1560 1560,1980 1980,2370 2370,2490
{} this particular library, the

2404
01:15:48,260 --> 01:15:49,700
0,390 390,720 720,1020
coordinator cannot fail.|
|

2405
01:15:50,160 --> 01:15:50,940
0,90 90,210 210,390 390,690 690,780
We will see later in
我们将在后面的学期技术课中看到，

2406
01:15:50,940 --> 01:15:52,500
0,390 390,990 1080,1320 1320,1410 1410,1560
semester techniques,| that we can
|如果我们愿意，我们可以用它来使协调器容错，

2407
01:15:52,500 --> 01:15:53,670
0,270 270,360 360,570 570,660 660,1170
use to make the coordinator

2408
01:15:53,670 --> 01:15:54,870
0,510 510,690 690,780 780,1050 1050,1200
{fault,tolerant} if we wanted to,|
|

2409
01:15:54,870 --> 01:15:55,770
0,120 120,240 240,600 600,780 780,900
but they decide not to
但他们决定不这么做。

2410
01:15:55,770 --> 01:15:56,740
0,180 180,450
do so.|
|

2411
01:15:57,050 --> 01:15:58,070
0,240 240,480 480,570 570,900 900,1020
One reason they decided not
他们决定不这么做的一个原因是

2412
01:15:58,070 --> 01:15:59,060
0,90 90,210 210,510 510,660 660,990
to do so is| because
|因为只有一台机器，他们基本上希望运行协调器的那台机器很可能会崩溃，

2413
01:15:59,060 --> 01:16:01,310
0,360 360,690 690,1320 1770,1980 1980,2250
a single machine, {} they're

2414
01:16:01,310 --> 01:16:02,600
0,240 240,630 630,810 810,1080 1080,1290
hoping basically that the single

2415
01:16:02,600 --> 01:16:03,800
0,420 420,660 660,930 930,1140 1140,1200
machine that just runs the

2416
01:16:03,800 --> 01:16:05,480
0,630 630,750 750,1170 1170,1290 1290,1680
coordinators are likely to crash,|
|

2417
01:16:05,480 --> 01:16:06,500
0,180 180,270 270,540 540,900 900,1020
while it's very likely that
虽然运行某个地图程序的数千台机器中很可能有一台会崩溃。

2418
01:16:06,500 --> 01:16:07,520
0,180 180,300 300,390 390,930 930,1020
one of the thousands of

2419
01:16:07,520 --> 01:16:09,500
0,570 660,900 900,1140 1140,1470 1470,1980
machines that run some {mapper,will}

2420
01:16:09,500 --> 01:16:10,440
0,570
crash.|
|

2421
01:16:11,780 --> 01:16:12,860
0,570
Okay?|
好吧?|

2422
01:16:13,140 --> 01:16:14,900
0,120 120,300 300,540 540,1110
How about slow workers?|
慢工怎么办？|

2423
01:16:18,290 --> 01:16:19,500
0,600

2424
01:16:21,180 --> 01:16:21,960
0,240 240,300 300,540 540,720 720,780
Sort of another type of
另一种类型的失败，没有讨论这个问题

2425
01:16:21,960 --> 01:16:23,850
0,510 540,870 930,1350 1350,1440 1440,1890
failure to discuss the issue|
|

2426
01:16:23,850 --> 01:16:25,110
0,90 90,570 570,990 990,1170 1170,1260
of where machines might be
机器可能会变慢的地方，

2427
01:16:25,110 --> 01:16:26,340
0,360 360,750 750,900 900,1020 1020,1230
slow,| because like some other
|因为就像在上面运行的其他计算一样，

2428
01:16:26,340 --> 01:16:27,630
0,570 570,840 840,1020 1020,1140 1140,1290
computations running on it,| like
|与GFS一样，它也在同一台机器上运行，

2429
01:16:27,630 --> 01:16:28,710
0,450 450,540 540,750 750,990 990,1080
GFS is also running on

2430
01:16:28,710 --> 01:16:30,150
0,60 60,300 300,810 990,1350 1350,1440
the same machine,| maybe it
|也许它实际上正在使用大量的周期或带宽。

2431
01:16:30,150 --> 01:16:31,080
0,360 360,450 450,720 720,780 780,930
actually is using a lot

2432
01:16:31,080 --> 01:16:32,400
0,60 60,150 150,600 600,690 690,1320
of the cycles or bandwidth.|
|

2433
01:16:33,020 --> 01:16:34,100
0,300 300,510 510,690 690,840 840,1080
Or maybe there are like
或者可能硬件本身也有类似的问题。

2434
01:16:34,100 --> 01:16:36,320
0,390 390,600 600,1140 1170,1620 1620,2220
problems with the hardware itself.|
|

2435
01:16:36,960 --> 01:16:37,890
0,120 120,240 240,450 450,810 810,930
Is there anything special {that,they}
他们做的有什么特别的事吗？

2436
01:16:37,890 --> 01:16:38,920
0,480
do.|
|

2437
01:16:39,430 --> 01:16:40,570
0,360 360,450 450,660 660,750 750,1140
{} I think I recall
我想我记得我读过一些关于，

2438
01:16:40,570 --> 01:16:42,760
0,270 270,570 570,1020 1020,1380 1560,2190
reading something about,| {} when
|当工作接近尾声时，

2439
01:16:42,760 --> 01:16:44,530
0,780 810,1080 1080,1170 1170,1440 1440,1770
the job is getting somewhat

2440
01:16:44,530 --> 01:16:46,270
0,270 270,420 420,930 930,1170 1170,1740
close to finishing,| the coordinator
|协调器将剩余的任务分配给另外的机器，

2441
01:16:46,270 --> 01:16:48,310
0,270 270,960 960,1050 1050,1470 1470,2040
will assign the remaining tasks

2442
01:16:48,310 --> 01:16:50,590
0,450 540,1110 1110,1770 1770,2070 2070,2280
to additional machines,| {} just
|以防有像机器一样落后的情况

2443
01:16:50,590 --> 01:16:52,000
0,90 90,600 600,780 780,1020 1020,1410
in case there are like

2444
01:16:52,330 --> 01:16:53,950
0,390 390,510 510,630 630,1200 1260,1620
machines that are lagging {}|
|

2445
01:16:53,950 --> 01:16:55,600
0,180 180,660 780,1140 1140,1380 1380,1650
and then they will take
然后他们会取最先完成的结果。

2446
01:16:55,600 --> 01:16:57,160
0,240 240,600 600,750 750,1080 1080,1560
the results that finish first.|
|

2447
01:16:58,570 --> 01:17:00,160
0,300 300,600 600,660 660,960 960,1590
{Yeah,exactly,the,slower} workers are called straggler,|
是的，速度慢的工人被称为掉队工人，|

2448
01:17:01,700 --> 01:17:02,690
0,360 360,540 540,660 660,870 870,990
and what they do is
他们所做的就像是在做备份任务，

2449
01:17:02,690 --> 01:17:04,040
0,360 360,510 510,570 570,750 750,1350
{like,they} sort of do backup

2450
01:17:05,470 --> 01:17:07,330
0,630 1020,1260 1260,1350 1350,1710 1710,1860
tasks,| so for example when
|举个例子，当他们接近的时候，

2451
01:17:07,330 --> 01:17:08,890
0,90 90,390 390,1020 1050,1410 1410,1560
they're close to,| indeed you'll
|事实上，当我们去参加比赛时，你会看到我们几乎做了同样的事情，

2452
01:17:08,890 --> 01:17:09,700
0,240 240,510 510,600 600,750 750,810
see when we go to

2453
01:17:09,700 --> 01:17:10,930
0,480 480,750 750,900 900,960 960,1230
competitions almost done the same

2454
01:17:10,930 --> 01:17:11,770
0,90 90,270 270,360 360,780 780,840
thing,| there's a handful of
|还剩下几个减少的任务

2455
01:17:11,770 --> 01:17:13,240
0,360 360,630 630,960 960,1080 1080,1470
reduced task left| {or,a} handful
|或者剩下一些地图任务，

2456
01:17:13,240 --> 01:17:15,040
0,90 90,360 360,600 600,960 1320,1800
of map task left, {}|
|

2457
01:17:15,040 --> 01:17:17,260
0,330 330,780 780,1140 1140,1350 1560,2220
the coordinator actually just basically
协调器实际上只是运行第二个实例，

2458
01:17:17,260 --> 01:17:18,730
0,270 270,330 330,660 660,1260 1260,1470
runs a second instance,| or
|或者在单独的机器上执行该任务的第三个实例。

2459
01:17:18,730 --> 01:17:20,080
0,270 270,540 540,870 870,960 960,1350
maybe third instance of that

2460
01:17:20,080 --> 01:17:21,610
0,480 480,720 720,810 810,1110 1110,1530
task on a separate machine.|
|

2461
01:17:22,080 --> 01:17:23,070
0,120 120,210 210,510 510,810 810,990
And it's totally okay,| that's
这完全没问题，|这样做完全没问题，对吧，

2462
01:17:23,070 --> 01:17:24,030
0,300 300,480 480,570 570,720 720,960
totally okay to do so,

2463
01:17:24,030 --> 01:17:25,710
0,270 270,510 510,810 810,1440 1560,1680
correct,| because it's functional,| so
|因为它很实用，|所以如果我们多次运行相同的计算是没有问题的，

2464
01:17:25,710 --> 01:17:27,300
0,150 180,1050 1050,1380 1380,1500 1500,1590
it's no problem if we

2465
01:17:27,300 --> 01:17:29,130
0,210 210,270 270,480 480,1230 1500,1830
run the same computation {}

2466
01:17:29,130 --> 01:17:30,420
0,300 300,690 690,930 930,990 990,1290
several times,| because the {it,will,reduce}
|因为它会减少，所以我们使用完全相同的输出，

2467
01:17:30,420 --> 01:17:31,740
0,120 120,240 240,630 630,720 720,1320
we use exactly the same

2468
01:17:31,800 --> 01:17:33,030
0,330 330,630 630,900 900,1020 1020,1230
same output,| because it's given
|因为它的输入是相同的

2469
01:17:33,030 --> 01:17:35,250
0,60 60,300 300,690 840,1710 1710,2220
the same input| {} and
|希望这些人中的一个能很快结束，

2470
01:17:35,430 --> 01:17:36,570
0,210 210,450 450,600 600,780 780,1140
the hope is that one

2471
01:17:36,570 --> 01:17:38,100
0,90 90,210 210,420 420,1050 1050,1530
of these other guys will

2472
01:17:38,190 --> 01:17:40,530
0,660 720,1440 1530,2010 2010,2220 2220,2340
finish quickly,| {} and so
|因此，我们不再是表演者，不受速度最慢的工人的限制，

2473
01:17:40,530 --> 01:17:41,940
0,420 420,630 630,900 900,1110 1110,1410
therefore, then we were not

2474
01:17:41,940 --> 01:17:43,020
0,90 90,420 420,510 510,720 720,1080
the performer is not limited

2475
01:17:43,020 --> 01:17:45,420
0,240 240,990 990,1440 1680,1920 1920,2400
by {the,slowest} worker,| but basically
|但基本上最快的是那些被复制的。

2476
01:17:45,420 --> 01:17:46,650
0,300 300,780 780,840 840,960 960,1230
the fastest are the ones

2477
01:17:46,650 --> 01:17:47,900
0,120 120,270 270,780
that got replicated.|
|

2478
01:17:49,480 --> 01:17:50,170
0,120 120,240 240,420 420,540 540,690
And so this is only
所以这只是其中一个问题，

2479
01:17:50,170 --> 01:17:51,940
0,180 180,420 540,1110 1110,1470 1470,1770
one of {} issues,| where
|基本上这是一个对付掉队的人的普遍想法

2480
01:17:51,940 --> 01:17:52,990
0,360 360,720 720,870 870,990 990,1050
like basically this is a

2481
01:17:52,990 --> 01:17:54,760
0,360 360,900 1110,1410 1410,1650 1650,1770
common idea to deal with

2482
01:17:54,760 --> 01:17:55,960
0,600 600,690 690,900 900,1020 1020,1200
stragglers| to deal with tail
|为了处理尾部延迟，

2483
01:17:55,960 --> 01:17:57,820
0,600 750,1110 1110,1440 1440,1650 1650,1860
latency,| {} is to try
|就是尝试基本上复制任务

2484
01:17:57,820 --> 01:18:00,910
0,1020 1050,1410 1410,1890 1890,2430 2670,3090
to basically replicate tasks {}|
|

2485
01:18:00,910 --> 01:18:03,040
0,810 840,1140 1140,1320 1320,1680 1710,2130
and go for the first
争取第一个完成的。

2486
01:18:03,040 --> 01:18:04,180
0,150 150,720
that finishes.|
|

2487
01:18:08,580 --> 01:18:10,470
0,720 840,1140 1140,1260 1260,1710 1710,1890
{} Okay, I think this
好了，我想是时候结束了，

2488
01:18:10,470 --> 01:18:11,610
0,90 90,300 300,570 570,810 810,1140
is time to wrap up,|
|

2489
01:18:11,640 --> 01:18:13,230
0,570 600,750 750,1140 1140,1290 1290,1590
{} so you have to
所以你得去上其他的课，

2490
01:18:13,230 --> 01:18:15,540
0,150 150,270 270,720 720,1320 1620,2310
go to other classes, {}|
|

2491
01:18:15,570 --> 01:18:16,080
0,120 120,270 270,360 360,450 450,510
but these are some of
但这些是MapReduce库中显示的一些主要问题

2492
01:18:16,080 --> 01:18:17,640
0,90 90,390 390,900 960,1350 1350,1560
the major issues {} that

2493
01:18:17,640 --> 01:18:18,510
0,210 210,330 330,480 480,660 660,870
show up in the {mapreduce

2494
01:18:18,510 --> 01:18:20,280
0,270 270,750 750,1020 1140,1560 1560,1770
-} library| and you will
|您肯定会在很大程度上苦苦挣扎，您知道实际实现MapReduce库最困难的部分是什么

2495
01:18:20,280 --> 01:18:21,810
0,360 360,450 450,900 900,1440 1440,1530
definitely be struggling mostly you

2496
01:18:21,810 --> 01:18:22,800
0,270 270,390 390,630 630,930 930,990
know the hard part of

2497
01:18:22,800 --> 01:18:24,030
0,270 270,660 660,720 720,930 930,1230
actually implemented the {mapreduce -}

2498
01:18:24,030 --> 01:18:25,800
0,510 810,1050 1050,1440 1440,1680 1680,1770
library| is actually doing the
|实际上是在做容错方面的工作

2499
01:18:25,800 --> 01:18:27,990
0,210 210,540 540,1230 1410,2040 2040,2190
fault tolerance aspects| and but
|但是你应该记住

2500
01:18:27,990 --> 01:18:28,800
0,120 120,240 240,390 390,450 450,810
you should keep in mind|
|

2501
01:18:28,800 --> 01:18:30,180
0,210 210,360 360,600 600,930 1110,1380
as you're doing that, all
当您这样做时，所有使用您的库的程序员

2502
01:18:30,180 --> 01:18:31,410
0,120 120,660 660,840 840,960 960,1230
the programmers that are using

2503
01:18:31,410 --> 01:18:32,640
0,150 150,540 540,690 690,1020 1020,1230
your library| or would you
|或者你希望我们不用担心所有的分配问题，

2504
01:18:32,640 --> 01:18:33,420
0,210 210,300 300,540 540,690 690,780
like we don't have to

2505
01:18:33,420 --> 01:18:34,620
0,210 210,480 480,600 600,690 690,1200
worry about all the {distributedness

2506
01:18:34,620 --> 01:18:36,810
0,360 630,900 900,1200 1200,1950 2010,2190
-},| {} that they would
|他们会让你去处理，

2507
01:18:36,810 --> 01:18:38,010
0,450 480,780 780,930 930,990 990,1200
have you have to deal

2508
01:18:38,010 --> 01:18:39,330
0,270 630,840 840,1050 1050,1140 1140,1320
with,| so you're in there
|所以你现在处于不幸的境地，

2509
01:18:39,330 --> 01:18:41,130
0,330 330,990 1080,1440 1440,1590 1590,1800
unfortunate situation,| {} you're not
|您不是MapReduce论文的目标，它让您轻松编写MapReduce应用程序，

2510
01:18:41,130 --> 01:18:42,120
0,60 60,420 420,540 540,780 780,990
the target of the {mapreduce

2511
01:18:42,120 --> 01:18:44,310
0,330 330,1080 1140,1680 1710,1890 1890,2190
-} paper making your life

2512
01:18:44,310 --> 01:18:45,600
0,120 120,360 360,540 540,810 810,1290
of writing {mapreduce -} application

2513
01:18:45,600 --> 01:18:47,640
0,390 690,1110 1110,1260 1260,1650 1980,2040
easy,| you're on the {}
|你在方程式的另一边，

2514
01:18:47,640 --> 01:18:48,930
0,360 360,630 630,810 810,930 930,1290
that side of the equation

2515
01:18:48,930 --> 01:18:49,830
0,270 270,420 420,660 660,810 810,900
here,| you actually have to
|实际上，你必须面对这种分布性，成为一名专家。

2516
01:18:49,830 --> 01:18:51,030
0,240 240,360 360,450 450,900 900,1200
deal with the {distributedness -}

2517
01:18:51,030 --> 01:18:52,740
0,480 480,900 900,990 990,1440
and become an expert.|
|

2518
01:18:54,410 --> 01:18:55,500
0,540
Okay?|
好吧?|

2519
01:18:55,500 --> 01:18:57,030
0,720 780,1020 1020,1080 1080,1230 1230,1530
I'm going to hang around
我要在这里逗留一小段时间，

2520
01:18:57,030 --> 01:18:57,870
0,120 120,150 150,330 330,600 600,840
for a little while,| so
|所以人们想去，可以随意去，

2521
01:18:57,870 --> 01:18:59,040
0,450 450,690 690,750 750,990 990,1170
people want to go, feel

2522
01:18:59,040 --> 01:18:59,820
0,150 150,210 210,570 570,690 690,780
free to go,| if you
|如果你想再问几个问题，

2523
01:18:59,820 --> 01:19:01,200
0,150 150,810 840,1110 1110,1170 1170,1380
want to ask a couple

2524
01:19:01,200 --> 01:19:02,190
0,120 120,660 660,720 720,810 810,990
more questions,| you know feel
|你知道，你可以随意这么做，

2525
01:19:02,190 --> 01:19:03,420
0,180 180,270 270,390 390,660
free to do so,|
|

2526
01:19:04,870 --> 01:19:05,770
0,300 300,420 420,570 570,690 690,900
and I'll see your first
我会看到你的名字。

2527
01:19:05,770 --> 01:19:06,540
0,210
name.
