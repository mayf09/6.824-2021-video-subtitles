1
00:00:00,000 --> 00:00:01,020
0,180 180,540 540,630 630,750 750,1020
Good evening or good night

2
00:00:01,020 --> 00:00:03,150
0,240 240,630 1290,1770 1800,2010 2010,2130
wherever you are,| let's get

3
00:00:03,150 --> 00:00:04,320
0,630
started.|

4
00:00:04,440 --> 00:00:05,910
0,180 180,360 360,810 810,1140 1140,1470
{} So today, I wanna

5
00:00:05,940 --> 00:00:07,320
0,210 210,270 270,450 450,840 840,1380
talk a little bit about

6
00:00:07,320 --> 00:00:09,900
0,300 300,990 990,1470 1500,1950 2130,2580
chain replication,| the paper {aside,for,today}

7
00:00:10,260 --> 00:00:13,140
0,330 330,780 780,2190 2190,2490 2490,2880
from {2004 -},| before diving

8
00:00:13,140 --> 00:00:15,120
0,450 450,540 540,1140 1140,1590 1680,1980
into the paper,| a couple

9
00:00:15,120 --> 00:00:17,340
0,300 300,960 960,1410 1410,1950 1980,2220
quick logistic things I just

10
00:00:17,340 --> 00:00:18,270
0,150 150,240 240,540 540,690 690,930
want to remind you of,|

11
00:00:18,810 --> 00:00:20,670
0,450 450,930 930,1440 1440,1590 1590,1860
{} one is we have

12
00:00:20,670 --> 00:00:23,080
0,150 150,750 750,1260 1260,1860
a quiz on Thursday,|

13
00:00:23,830 --> 00:00:25,240
0,540 540,1110 1110,1200 1200,1290 1290,1410
{} and you know the

14
00:00:25,240 --> 00:00:27,640
0,720 720,720 1530,1950 1950,2070 2070,2400
instructions of topics that actually

15
00:00:27,640 --> 00:00:28,600
0,180 180,450 450,510 510,600 600,960
being covered all the quizzes

16
00:00:28,600 --> 00:00:29,770
0,180 180,270 270,330 330,720 720,1170
are on the schedule page,|

17
00:00:29,800 --> 00:00:31,150
0,300 300,510 510,720 720,1050 1080,1350
{} we'll try to send

18
00:00:31,150 --> 00:00:33,130
0,390 450,990 990,1590 1590,1710 1710,1980
out an announcement of {piazza

19
00:00:33,130 --> 00:00:34,480
0,180 180,360 360,480 480,690 690,1350
- -} for more details|

20
00:00:34,780 --> 00:00:36,940
0,300 300,840 840,1470 1470,1920 1920,2160
about exactly how we'll do

21
00:00:36,940 --> 00:00:38,620
0,330 330,780 1080,1410 1410,1560 1560,1680
the quiz,| {} it's going

22
00:00:38,620 --> 00:00:39,700
0,60 60,150 150,240 240,480 480,1080
to be in grade scope,|

23
00:00:39,730 --> 00:00:42,730
0,690 1050,1650 1650,1920 1920,2280 2310,3000
{} and {} it's basically

24
00:00:42,730 --> 00:00:44,380
0,240 240,570 570,810 810,1140 1140,1650
during class hours 80 minutes,|

25
00:00:44,470 --> 00:00:47,020
0,750 1200,1440 1440,2100 2100,2460 2460,2550
{} and more details to

26
00:00:47,020 --> 00:00:48,560
0,1110
follow.|

27
00:00:49,010 --> 00:00:51,410
0,270 270,810 1140,1950 1950,1950 1950,2400
The second {you,know} I want

28
00:00:51,410 --> 00:00:53,210
0,120 120,390 390,660 660,1050 1080,1800
to remind people of is

29
00:00:53,240 --> 00:00:56,140
0,870 1440,2100
projects, {}|

30
00:00:56,790 --> 00:00:57,990
0,150 150,420 420,630 630,690 690,1200
if you'd like to do

31
00:00:57,990 --> 00:00:59,220
0,90 90,540 540,870 870,990 990,1230
a project instead of lab

32
00:00:59,220 --> 00:01:03,700
0,510 900,3930
4,| then

33
00:01:03,890 --> 00:01:05,090
0,450 450,630 630,720 720,810 810,1200
{} you can do so,|

34
00:01:05,090 --> 00:01:06,710
0,480 480,630 630,750 750,1410 1410,1620
{} but {you,should} submit a

35
00:01:06,710 --> 00:01:08,060
0,510 510,630 630,720 720,1170 1170,1350
proposal for a project| and

36
00:01:08,060 --> 00:01:10,460
0,300 300,450 450,690 690,1500 1860,2400
there's a couple paragraphs {}

37
00:01:10,460 --> 00:01:12,920
0,390 390,1050 1440,1500 1500,2010 2010,2460
to {} through {the,submission} website,|

38
00:01:12,950 --> 00:01:14,180
0,510 510,660 660,810 810,930 930,1230
{} so that we can

39
00:01:14,180 --> 00:01:15,230
0,150 150,240 240,660 660,840 840,1050
give you feedback| and to

40
00:01:15,230 --> 00:01:16,340
0,240 240,300 300,540 540,690 690,1110
tell you what this project

41
00:01:16,340 --> 00:01:18,350
0,360 360,900 900,1440 1470,1680 1680,2010
actually appropriate for a final

42
00:01:18,350 --> 00:01:19,790
0,510 510,720 720,810 810,990 990,1440
project in {6.824 - -},|

43
00:01:20,300 --> 00:01:21,380
0,360 360,540 540,660 660,810 810,1080
{} if you're just planning

44
00:01:21,380 --> 00:01:22,850
0,180 180,450 450,930 960,1110 1110,1470
to lab 4,| there's absolutely

45
00:01:22,850 --> 00:01:23,540
0,240 240,330 330,450 450,540 540,690
nothing you have to do

46
00:01:23,540 --> 00:01:24,400
0,120 120,390
at all.|

47
00:01:25,240 --> 00:01:27,190
0,630 900,1140 1140,1470 1470,1650 1650,1950
{} Any questions about these

48
00:01:27,190 --> 00:01:28,900
0,210 210,1170
two logistical

49
00:01:29,020 --> 00:01:30,500
0,930
{}

50
00:01:31,170 --> 00:01:32,340
0,660
points?|

51
00:01:36,270 --> 00:01:39,090
0,480 810,1620 1680,2370 2400,2730 2730,2820
Okay, then, {} let me

52
00:01:39,090 --> 00:01:40,320
0,180 180,420 420,630 630,930 930,1230
move on to one other

53
00:01:40,320 --> 00:01:41,700
0,720 720,840 840,1080 1080,1170 1170,1380
point, I wanted to bring

54
00:01:41,700 --> 00:01:43,590
0,210 210,420 420,570 570,1080 1530,1890
up,| which is the sort

55
00:01:43,590 --> 00:01:46,680
0,90 90,810 840,1500 2040,2550 2550,3090
of correction {} from {

56
00:01:46,950 --> 00:01:49,890
0,540 1590,1710 1710,2520 2550,2730 2730,2940
-} a lecturer a little

57
00:01:49,890 --> 00:01:51,900
0,210 210,660 870,1290 1290,1740 1740,2010
while ago,| {} we, {}

58
00:01:51,900 --> 00:01:53,670
0,90 90,330 330,540 540,1200 1230,1770
we walked through the {Go,code}

59
00:01:53,670 --> 00:01:56,250
0,240 240,540 570,1170 1200,2340 2340,2580
for the raft implementation of

60
00:01:56,250 --> 00:01:57,060
0,210 210,330 330,510 510,660 660,810
{2a -} {2b -} that

61
00:01:57,060 --> 00:01:59,160
0,120 120,510 780,1470 1500,1980 1980,2100
I had| and {} we

62
00:01:59,160 --> 00:01:59,940
0,180 180,210 210,390 390,510 510,780
talked a little bit about

63
00:01:59,940 --> 00:02:03,210
0,420 510,1140 1140,1530 1530,2070 2460,3270
the go defer statement| and

64
00:02:03,210 --> 00:02:04,650
0,450 450,840 840,1050 1050,1350 1350,1440
I mentioned that you can

65
00:02:04,650 --> 00:02:06,180
0,270 270,690 690,840 840,1170 1170,1530
actually have the defer statement

66
00:02:06,180 --> 00:02:07,470
0,360 360,450 450,540 540,780 780,1290
inside of a base block|

67
00:02:07,530 --> 00:02:09,300
0,660 660,930 930,1200 1200,1320 1320,1770
{} and that is correct|

68
00:02:09,750 --> 00:02:10,740
0,300 300,360 360,720 720,930 930,990
and I think maybe it

69
00:02:10,740 --> 00:02:11,670
0,150 150,420 420,630 630,870 870,930
was [Philip] who asked the

70
00:02:11,670 --> 00:02:13,680
0,300 300,1020 1020,1140 1140,1770 1770,2010
question,| what is exactly when

71
00:02:13,680 --> 00:02:15,180
0,180 180,390 390,540 540,1200 1200,1500
is that get executed| and

72
00:02:15,180 --> 00:02:16,680
0,150 150,390 390,540 540,930 930,1500
I answered that question incorrectly,|

73
00:02:17,040 --> 00:02:18,180
0,510 510,660 660,720 720,870 870,1140
{} you know the defer

74
00:02:18,180 --> 00:02:19,380
0,150 150,240 240,420 420,1050 1050,1200
statement that gets executed at

75
00:02:19,380 --> 00:02:20,460
0,60 60,360 360,480 480,660 660,1080
the point that gets return

76
00:02:20,460 --> 00:02:21,510
0,150 150,210 210,300 300,690 690,1050
out of the function,| not

77
00:02:21,510 --> 00:02:22,470
0,180 180,420 420,630 630,690 690,960
{in,your} return {out,of} the base

78
00:02:22,470 --> 00:02:23,260
0,450
block.|

79
00:02:23,350 --> 00:02:25,300
0,300 300,510 510,810 810,900 900,1950
And so that my apologizes

80
00:02:25,300 --> 00:02:27,440
0,330 360,810 810,990 990,1560
that caused any confusion.|

81
00:02:27,720 --> 00:02:28,980
0,750

82
00:02:29,980 --> 00:02:32,800
0,180 180,1050 1080,2010
Any questions about

83
00:02:32,800 --> 00:02:34,960
0,510 540,780 780,1590
the that clarification?|

84
00:02:37,610 --> 00:02:39,650
0,660 1260,1560 1560,1860 1860,1980 1980,2040
Okay, good, there's sort of

85
00:02:39,650 --> 00:02:40,970
0,150 150,480 480,630 630,1020 1020,1320
two topics| and really talk

86
00:02:40,970 --> 00:02:42,110
0,210 210,630 630,930 930,1020 1020,1140
to technical talks,| I want

87
00:02:42,110 --> 00:02:43,130
0,60 60,270 270,540 540,840 840,1020
to talk about today is

88
00:02:43,130 --> 00:02:44,660
0,120 120,300 300,600 600,1200 1320,1530
the {zookeeper -} locks,| which

89
00:02:44,660 --> 00:02:46,580
0,120 120,390 390,660 780,1260 1320,1920
I didn't get to finish

90
00:02:46,580 --> 00:02:48,160
0,90 90,360 360,870
the last time,|

91
00:02:48,250 --> 00:02:49,810
0,240 240,720 720,1200 1200,1350 1350,1560
and then I'll talk about

92
00:02:49,810 --> 00:02:54,790
0,240 240,960 1980,2580 3090,3690 3750,4980
chain replication.| Alright?| So both

93
00:02:54,790 --> 00:02:56,380
0,240 240,540 540,1350 1350,1440 1440,1590
for chain replication and {zookeeper

94
00:02:56,380 --> 00:02:57,520
0,390 390,480 480,630 630,960 960,1140
-},| you know we're sort

95
00:02:57,520 --> 00:02:59,110
0,60 60,780 780,1050 1050,1230 1230,1590
of still in the same

96
00:02:59,110 --> 00:03:01,580
0,690 690,1260 1290,1950
context as before,|

97
00:03:01,610 --> 00:03:04,520
0,1110 1260,2160 2160,2610 2610,2760 2760,2910
namely we're doing you know

98
00:03:04,520 --> 00:03:06,460
0,420 420,630 630,1140
replicated state machines.|

99
00:03:07,240 --> 00:03:08,590
0,510 510,600 600,780 780,1050 1050,1350
And you know just a

100
00:03:08,590 --> 00:03:11,170
0,360 360,1110 1680,2370 2370,2460 2460,2580
usual diagram,| {} you know

101
00:03:11,170 --> 00:03:12,490
0,120 120,240 240,540 540,1200 1200,1320
we have {} servers,| you

102
00:03:12,490 --> 00:03:13,720
0,120 120,330 330,600 600,780 780,1230
know that runs on some

103
00:03:13,750 --> 00:03:16,750
0,690 690,1230 1230,1560 1560,2370 2400,3000
replication libraries like ZAB or

104
00:03:16,900 --> 00:03:19,080
0,1050
Raft,|

105
00:03:20,220 --> 00:03:22,140
0,240 240,450 450,960 990,1440 1440,1920
we have clients talking to

106
00:03:22,200 --> 00:03:23,730
0,180 180,750 750,990 990,1470 1470,1530
the servers,| for example in

107
00:03:23,730 --> 00:03:25,680
0,60 60,360 360,600 720,1350 1350,1950
the case of {zookeeper -}

108
00:03:25,740 --> 00:03:26,940
0,300 300,570 570,780 780,840 840,1200
might actually send to create

109
00:03:26,940 --> 00:03:29,400
0,540 1500,1620 1620,1830 1830,1950 1950,2460
call,| {you,know} {zookeeper -} internally

110
00:03:29,400 --> 00:03:30,840
0,120 120,300 300,810 1230,1350 1350,1440
how some states you know

111
00:03:30,840 --> 00:03:32,160
0,180 180,390 390,1050 1050,1140 1140,1320
some z nodes,| you know

112
00:03:32,160 --> 00:03:33,300
0,180 180,300 300,600 600,960 960,1140
that are hanging off in

113
00:03:33,300 --> 00:03:35,070
0,390 390,600 600,660 660,1170 1560,1770
a form of tree| and

114
00:03:35,070 --> 00:03:36,150
0,150 150,360 360,450 450,870 870,1080
so when an operation comes

115
00:03:36,150 --> 00:03:37,710
0,330 330,450 450,570 570,1410 1440,1560
in,| you know zookeeper you

116
00:03:37,710 --> 00:03:39,720
0,300 570,1020 1020,1170 1170,1590 1590,2010
know forwards that operation basically

117
00:03:39,720 --> 00:03:41,910
0,210 210,600 720,1350 1350,1650 1650,2190
to the Raft ZAB library,|

118
00:03:41,910 --> 00:03:42,990
0,180 180,360 360,480 480,870 870,1080
it does some chatting back

119
00:03:42,990 --> 00:03:44,060
0,90 90,840
and forth,|

120
00:03:44,240 --> 00:03:45,230
0,90 90,240 240,690 690,960 960,990
{} and to get a

121
00:03:45,230 --> 00:03:46,670
0,480 480,600 600,690 690,1050 1050,1440
majority of the servers| to

122
00:03:46,760 --> 00:03:48,260
0,600 600,660 660,750 750,1080 1110,1500
accept you know that {}

123
00:03:48,260 --> 00:03:49,610
0,570 810,990 990,1110 1110,1200 1200,1350
command| and then at some

124
00:03:49,610 --> 00:03:50,570
0,390 390,480 480,630 630,870 870,960
point you know once it's

125
00:03:50,570 --> 00:03:52,430
0,420 420,480 480,720 720,1200 1230,1860
accepted,| it comes out {}

126
00:03:52,430 --> 00:03:54,320
0,390 390,720 720,1110 1110,1200 1200,1890
the servers applies the operation|

127
00:03:54,530 --> 00:03:55,760
0,300 300,510 510,570 570,990 990,1230
and sends a response back

128
00:03:55,760 --> 00:03:57,170
0,120 120,180 180,630 930,1110 1110,1410
to the client,| so the

129
00:03:57,170 --> 00:03:58,820
0,210 210,600 600,900 930,1230 1230,1650
standard story of {} replicated

130
00:03:58,820 --> 00:04:00,170
0,210 210,630 630,720 720,840 840,1350
state machine,| if you start,

131
00:04:00,440 --> 00:04:01,790
0,390 390,480 480,900 900,1080 1080,1350
all the replicated state machine

132
00:04:01,790 --> 00:04:02,990
0,330 330,390 390,630 630,1140 1140,1200
starting the same state,| you

133
00:04:02,990 --> 00:04:04,250
0,300 300,390 390,660 660,1200 1200,1260
apply the same operation in

134
00:04:04,250 --> 00:04:05,750
0,60 60,360 360,870 930,1410 1410,1500
the same order,| then you

135
00:04:05,750 --> 00:04:06,380
0,120 120,300 300,480 480,570 570,630
will end up in the

136
00:04:06,380 --> 00:04:07,580
0,210 210,570 570,690 690,960 960,1200
same state| and so any

137
00:04:07,580 --> 00:04:08,720
0,120 120,330 330,690 690,930 930,1140
of the machines can take

138
00:04:08,720 --> 00:04:10,100
0,330 330,480 480,1050
over if necessary.|

139
00:04:11,430 --> 00:04:12,510
0,540 570,750 750,840 840,900 900,1080
Now, one of the things

140
00:04:12,510 --> 00:04:13,680
0,90 90,210 210,840 840,1020 1020,1170
that was cool, that were

141
00:04:13,680 --> 00:04:15,300
0,330 330,690 720,1080 1080,1410 1410,1620
interesting about {zookeeper -} is|

142
00:04:15,300 --> 00:04:16,890
0,330 330,420 420,630 630,870 870,1590
that you know read operations

143
00:04:16,890 --> 00:04:18,870
0,480 510,870 870,1290 1290,1380 1380,1980
can be served for many

144
00:04:18,900 --> 00:04:21,450
0,1020 1050,1710 1920,2220 2220,2400 2400,2550
{} servers| for any of

145
00:04:21,450 --> 00:04:22,290
0,90 90,480 480,570 570,750 750,840
the peers or any of

146
00:04:22,290 --> 00:04:23,340
0,90 90,300 300,360 360,510 510,1050
the one of the servers|

147
00:04:23,790 --> 00:04:24,960
0,300 300,420 420,840 840,930 930,1170
and this allows {zookeeper -}

148
00:04:24,960 --> 00:04:26,730
0,150 150,600 600,780 780,1320 1320,1770
to extremely high performance,| because

149
00:04:26,730 --> 00:04:29,100
0,90 90,240 240,810 990,1770 1800,2370
you can actually {} scale

150
00:04:29,100 --> 00:04:30,330
0,90 90,360 360,480 480,660 660,1230
the number of read operations

151
00:04:30,330 --> 00:04:31,650
0,150 150,270 270,630 630,720 720,1320
with the number of servers,|

152
00:04:32,190 --> 00:04:33,810
0,450 450,660 660,990 1020,1380 1380,1620
{} as a flip side

153
00:04:33,810 --> 00:04:35,250
0,60 60,510 540,1080 1080,1350 1350,1440
of that| {} you know

154
00:04:35,250 --> 00:04:37,620
0,750 780,1140 1140,1320 1320,1620 1620,2370
zookeeper actually gave up on

155
00:04:37,920 --> 00:04:39,420
0,330 330,720 720,1230 1230,1290 1290,1500
that particular scenario,| {} gave

156
00:04:39,420 --> 00:04:41,520
0,150 150,390 390,780 780,1230
up on {linearizability -}.|

157
00:04:49,920 --> 00:04:51,900
0,360 360,480 480,810 810,1290 1350,1980
Because we know from {for,example}

158
00:04:51,900 --> 00:04:54,090
0,630 630,750 750,990 990,1500 1500,2190
{in,Raft},| you can't actually arbitrary

159
00:04:54,090 --> 00:04:56,430
0,390 390,630 630,780 780,1230 1500,2340
serve read from any server,|

160
00:04:56,550 --> 00:04:59,190
0,1350 1350,1560 1560,1710 1710,1950 1950,2640
because I have not seen

161
00:04:59,190 --> 00:05:00,900
0,90 90,390 390,810 810,1170 1380,1710
the latest update yet, {}|

162
00:05:00,900 --> 00:05:02,010
0,150 150,390 390,690 690,1020 1020,1110
and so in case of

163
00:05:02,010 --> 00:05:03,300
0,240 240,390 390,630 630,930 930,1290
zookeeper,| {} that {} is

164
00:05:03,300 --> 00:05:05,820
0,90 90,300 300,780 960,1860 1890,2520
a [true] too| and, {}

165
00:05:05,820 --> 00:05:07,980
0,240 240,660 690,930 930,1710 1710,2160
and so read operations are

166
00:05:07,980 --> 00:05:09,900
0,540 570,720 720,960 960,1140 1140,1920
not you know| or the

167
00:05:09,900 --> 00:05:11,730
0,480 480,810 810,1260 1260,1410 1410,1830
operation zookeeper defines {} don't

168
00:05:11,730 --> 00:05:13,480
0,270 270,420 420,840 840,1470
provide a linearizable interface.|

169
00:05:13,960 --> 00:05:15,490
0,420 480,660 660,1320 1320,1410 1410,1530
{} But nevertheless you know

170
00:05:15,490 --> 00:05:17,050
0,120 120,630 660,810 810,1260 1260,1560
we saw that actually is|

171
00:05:17,080 --> 00:05:18,160
0,270 270,390 390,720 720,750 750,1080
{} it provides a slightly

172
00:05:18,160 --> 00:05:19,780
0,420 420,600 600,660 660,1080 1080,1620
different sort of correctness guarantee

173
00:05:19,780 --> 00:05:21,880
0,90 90,480 480,990 1290,1620 1620,2100
that {linearizability -},| {} and

174
00:05:21,880 --> 00:05:24,370
0,390 390,630 630,1020 1020,1350 1980,2490
that actually correctness guarantee is

175
00:05:24,760 --> 00:05:26,860
0,630 840,1140 1140,1320 1320,1710 1710,2100
useful,| {} and useful enough

176
00:05:26,860 --> 00:05:27,850
0,330 330,480 480,630 630,750 750,990
to be able to write

177
00:05:27,850 --> 00:05:29,860
0,270 270,900 900,1230 1230,1320 1320,2010
actually programs,| and the particular

178
00:05:29,980 --> 00:05:31,060
0,270 270,360 360,840 840,1020 1020,1080
set of programs that you

179
00:05:31,060 --> 00:05:33,640
0,90 90,540 540,990 1470,2160 2160,2580
know zookeeper {was,you,know} focusing on

180
00:05:33,730 --> 00:05:35,680
0,840 870,1290 1290,1650 1650,1860 1860,1950
is| {} these what they

181
00:05:35,680 --> 00:05:39,700
0,480 510,660 660,1620 2940,3150 3150,4020
call now configuration or coordination

182
00:05:42,770 --> 00:05:44,600
0,990
programs.|

183
00:05:52,220 --> 00:05:53,360
0,210 210,360 360,720 720,900 900,1140
And so the thing to

184
00:05:53,360 --> 00:05:54,050
0,150 150,360 360,420 420,570 570,690
think about it,| there's a

185
00:05:54,050 --> 00:05:55,400
0,240 240,300 300,690 690,810 810,1350
lot of systems that we

186
00:05:55,430 --> 00:05:56,630
0,210 210,450 450,780 780,870 870,1200
looked at in the past,|

187
00:05:56,630 --> 00:05:58,490
0,210 240,630 630,1200 1230,1380 1380,1860
they typically have some replication

188
00:05:58,490 --> 00:06:01,010
0,360 360,570 570,690 690,1200 1680,2520
story| and they have {}

189
00:06:01,130 --> 00:06:03,530
0,930 930,1020 1020,1650 1860,2250 2250,2400
coordinator {} master that sort

190
00:06:03,530 --> 00:06:05,090
0,60 60,630 630,960 960,1080 1080,1560
of coordinates the the group|

191
00:06:05,090 --> 00:06:06,440
0,390 510,960 960,1110 1110,1230 1230,1350
and {} {zookeeper - -}

192
00:06:06,440 --> 00:06:08,060
0,240 240,780 780,870 870,1110 1110,1620
really intended you know for

193
00:06:08,060 --> 00:06:09,260
0,150 150,180 180,690 690,1020 1020,1200
as a server| for that

194
00:06:09,260 --> 00:06:10,850
0,210 210,480 510,630 630,840 840,1590
kind of you know master

195
00:06:10,850 --> 00:06:13,040
0,450 540,1380 1380,1710 1920,2100 2100,2190
or coordinator role| and it

196
00:06:13,040 --> 00:06:14,150
0,330 330,360 360,540 540,600 600,1110
provides a bunch of primitives

197
00:06:14,150 --> 00:06:15,440
0,180 180,510 510,720 720,990 990,1290
{you,know} to {} make that

198
00:06:15,440 --> 00:06:17,780
0,300 300,840 930,1350 1560,2010 2010,2340
{} doable| and {} the

199
00:06:17,870 --> 00:06:19,010
0,480 480,780 810,960 960,1080 1080,1140
two the you know we

200
00:06:19,010 --> 00:06:19,850
0,210 210,240 240,450 450,570 570,840
talked a little bit about

201
00:06:19,850 --> 00:06:22,670
0,360 360,960 990,1590 1590,1950 2070,2820
atomic increment last week, {}|

202
00:06:22,670 --> 00:06:24,560
0,630 660,1050 1050,1680 1680,1740 1740,1890
and with some the other

203
00:06:24,560 --> 00:06:26,180
0,300 300,480 480,630 630,1020 1260,1620
[surface] and want to finish

204
00:06:26,180 --> 00:06:27,530
0,330 330,390 390,510 510,960 960,1350
off, you know talking about

205
00:06:27,530 --> 00:06:28,600
0,600
locks.|

206
00:06:28,840 --> 00:06:30,880
0,600 1170,1620 1620,1830 1830,1920 1920,2040
{} One, because there were

207
00:06:30,880 --> 00:06:31,720
0,60 60,180 180,240 240,570 570,840
a lot of questions about

208
00:06:31,720 --> 00:06:32,650
0,120 120,240 240,540 540,840 840,930
it| and two actually is

209
00:06:32,650 --> 00:06:34,270
0,210 210,660 1110,1350 1350,1470 1470,1620
quite interesting| and there's sort

210
00:06:34,270 --> 00:06:36,370
0,270 300,660 660,960 960,1260 1260,2100
of two different locking {in,limitations}|

211
00:06:36,370 --> 00:06:36,910
0,120 120,150 150,360 360,480 480,540
and {} first {I,want} to

212
00:06:36,910 --> 00:06:38,050
0,180 180,360 360,420 420,750 750,1140
talk about the simple one,|

213
00:06:38,290 --> 00:06:40,720
0,930 930,1530 1710,2130 2130,2310 2310,2430
namely where, {} let me

214
00:06:40,720 --> 00:06:42,700
0,300 300,570 570,870 1050,1470 1470,1980
write down the pseudo code,|

215
00:06:42,820 --> 00:06:43,810
0,300 300,450 450,540 540,780 780,990
then we can talk about

216
00:06:43,810 --> 00:06:44,710
0,150 180,540 540,600 600,780 780,900
it again a little bit

217
00:06:44,710 --> 00:06:46,870
0,120 120,750 960,1380 1380,1800 1830,2160
in detail,| {} so the

218
00:06:46,900 --> 00:06:49,660
0,480 480,720 720,1020 1020,1500 2460,2760
{pseudo -} code for the

219
00:06:49,660 --> 00:06:51,700
0,300 300,870 1230,1500 1500,1650 1650,2040
lock was| something like this,

220
00:06:51,700 --> 00:06:53,470
0,120 120,930 960,1350 1350,1470 1470,1770
{you,know} acquire {} in {an,infinite}

221
00:06:53,470 --> 00:06:55,540
0,660 930,1140 1140,1470 1470,1680 1680,2070
loop| {you,know} try to create

222
00:06:55,540 --> 00:06:56,720
0,90 90,360 360,870
the lock file,|

223
00:07:01,190 --> 00:07:03,180
0,840 840,1110 1110,1470
name {lf -},

224
00:07:03,180 --> 00:07:04,770
0,480 480,810 810,870 870,1470 1470,1590
and set {ephemeral -} to

225
00:07:04,770 --> 00:07:06,400
0,540
true.|

226
00:07:11,460 --> 00:07:12,150
0,150 150,240 240,360 360,540 540,690
And we'll talk about that

227
00:07:12,150 --> 00:07:13,380
0,90 90,120 120,360 360,960 1020,1230
in a second| why you

228
00:07:13,380 --> 00:07:15,300
0,60 60,390 390,780 810,1140 1140,1920
know if the create succeeds,|

229
00:07:16,120 --> 00:07:17,800
0,330 330,840 840,960 960,1140 1140,1680
{} then you know the

230
00:07:17,920 --> 00:07:19,570
0,300 300,810 810,1020 1020,1170 1170,1650
that process where the client

231
00:07:19,570 --> 00:07:20,410
0,150 150,240 240,510 510,720 720,840
was the first one| to

232
00:07:20,410 --> 00:07:21,820
0,240 240,390 390,750 750,870 870,1410
create that file| and basically

233
00:07:21,850 --> 00:07:23,950
0,900 930,1350 1350,1560 1560,2010 2010,2100
successfully gets the lock| and

234
00:07:23,950 --> 00:07:24,760
0,150 150,300 300,600 600,720 720,810
so it breaks out of

235
00:07:24,760 --> 00:07:26,080
0,120 120,360 360,570 570,690 690,1320
the for loop and returns.|

236
00:07:26,980 --> 00:07:29,000
0,630 810,1530
{} If

237
00:07:29,120 --> 00:07:31,340
0,1050 1080,1470 1470,1620 1620,2040 2070,2220
the client did not,| you

238
00:07:31,340 --> 00:07:32,210
0,120 120,240 240,480 480,570 570,870
know be able to create

239
00:07:32,210 --> 00:07:33,410
0,60 60,420 420,840 840,840 840,1200
a file,| then {} it

240
00:07:33,410 --> 00:07:34,920
0,210 210,930
calles exists,|

241
00:07:34,920 --> 00:07:36,780
0,390 840,1200 1200,1500 1500,1770 1770,1860
and the call exists is

242
00:07:36,780 --> 00:07:38,010
0,210 210,540 540,990 990,1080 1080,1230
not really for you know

243
00:07:38,010 --> 00:07:38,790
0,210 210,330 330,420 420,720 720,780
see if it exists or

244
00:07:38,790 --> 00:07:40,260
0,270 270,750 780,990 990,1410 1410,1470
not,| because you know it

245
00:07:40,260 --> 00:07:42,360
0,240 240,750 1050,1800 1800,2010 2010,2100
doesn't exist,| basically set a

246
00:07:42,360 --> 00:07:43,480
0,660
watch,|

247
00:07:47,420 --> 00:07:48,770
0,420 420,570 570,1020 1020,1140 1140,1350
and the idea is that

248
00:07:48,770 --> 00:07:50,660
0,90 90,270 270,390 390,1650 1680,1890
you know the watch will

249
00:07:50,660 --> 00:07:51,800
0,180 180,570 570,750 750,1020 1020,1140
go off,| if actually the

250
00:07:51,800 --> 00:07:55,310
0,360 360,1140 2100,2610 2610,3180 3180,3510
file disappears,| {} and if

251
00:07:55,310 --> 00:07:56,420
0,60 60,540 540,870 870,960 960,1110
it disappears, then you know

252
00:07:56,420 --> 00:07:57,080
0,90 90,390 390,480 480,630 630,660
the client will get a

253
00:07:57,080 --> 00:07:59,300
0,780 780,900 900,1530 1680,2070 2070,2220
notification,| so basically we're going

254
00:07:59,300 --> 00:08:00,380
0,90 90,210 210,450 450,840 840,1080
to be doing here is

255
00:08:00,380 --> 00:08:01,640
0,180 180,390 390,480 480,630 630,1260
just wait for that notification.|

256
00:08:09,390 --> 00:08:10,080
0,180 180,330 330,480 480,570 570,690
So that's sort of the

257
00:08:10,080 --> 00:08:12,810
0,690 690,1410 1560,1890 1890,2010 2010,2730
acquire operation,| then the release

258
00:08:13,410 --> 00:08:15,660
0,450 450,780 780,1380
is very simple.|

259
00:08:17,080 --> 00:08:18,370
0,240 240,570 570,960 960,1140 1140,1290
The release basically is that

260
00:08:18,370 --> 00:08:20,020
0,210 210,480 480,810 810,1230 1260,1650
does nothing else| than sending

261
00:08:20,020 --> 00:08:21,550
0,120 120,630 660,1260 1260,1440 1440,1530
the delete operation to the

262
00:08:21,550 --> 00:08:23,020
0,150 150,390 390,1050 1260,1350 1350,1470
{zookeeper -} servers,| you know

263
00:08:23,020 --> 00:08:24,280
0,150 150,240 240,780 780,960 960,1260
for the for the lock

264
00:08:24,280 --> 00:08:25,200
0,360
file,|

265
00:08:25,440 --> 00:08:26,400
0,240 240,330 330,720 720,780 780,960
so {lf -} in this

266
00:08:26,400 --> 00:08:27,380
0,480
case.|

267
00:08:27,800 --> 00:08:28,850
0,360 360,450 450,630 630,780 780,1050
And so what does that

268
00:08:28,850 --> 00:08:30,680
0,180 180,570 570,750 750,1080 1110,1830
do,| well if the delete

269
00:08:30,680 --> 00:08:31,550
0,90 90,240 240,480 480,570 570,870
you know sent to the

270
00:08:31,550 --> 00:08:32,750
0,210 210,450 450,990 990,1050 1050,1200
{zookeeper -} servers,| you know

271
00:08:32,750 --> 00:08:34,280
0,270 270,450 450,720 720,1140 1140,1530
the {zookeeper -} serves a

272
00:08:34,340 --> 00:08:37,280
0,780 780,1410 1410,1710 1710,2310 2670,2940
performance {} delete operation,| that

273
00:08:37,280 --> 00:08:40,490
0,180 180,750 900,1890 1950,2370 2370,3210
will actually,| {} {let's -}

274
00:08:40,490 --> 00:08:41,420
0,240 240,330 330,600 600,780 780,930
{that,make} the file would go

275
00:08:41,420 --> 00:08:43,340
0,600 720,1110 1110,1290 1290,1800 1800,1920
away,| that will fire to

276
00:08:43,340 --> 00:08:45,350
0,660 810,990 990,1170 1170,1410 1410,2010
watch| and so every client

277
00:08:45,350 --> 00:08:46,670
0,180 180,450 450,540 540,1140 1140,1320
that actually is waiting,| you

278
00:08:46,670 --> 00:08:48,920
0,150 150,900 900,1500 1500,1620 1620,2250
know for {} the notification|

279
00:08:48,920 --> 00:08:50,450
0,90 90,270 270,300 300,1140 1380,1530
will get a notification| and

280
00:08:50,450 --> 00:08:51,440
0,120 120,240 240,420 420,570 570,990
then {they -} go retry.|

281
00:08:52,100 --> 00:08:53,510
0,660 690,1020 1020,1110 1110,1200 1200,1410
And {} you know one

282
00:08:53,510 --> 00:08:54,530
0,90 90,240 240,390 390,480 480,1020
of them will be successful

283
00:08:54,530 --> 00:08:55,430
0,90 90,180 180,660 660,750 750,900
in the retry, will get

284
00:08:55,430 --> 00:08:56,480
0,90 90,330 330,690 690,780 780,1050
the lock file or create

285
00:08:56,480 --> 00:08:57,680
0,60 60,300 300,810 870,1050 1050,1200
a lock file,| and then

286
00:08:57,680 --> 00:08:59,000
0,480 660,810 810,930 930,1020 1020,1320
proceed| and then the others

287
00:08:59,000 --> 00:09:01,400
0,390 390,870 870,1260 1260,2100 2100,2400
ones go back into {}

288
00:09:01,400 --> 00:09:04,190
0,450 660,1500 1530,1830 1830,2460 2490,2790
there {} call exists| and

289
00:09:04,190 --> 00:09:05,360
0,120 120,210 210,510 510,1020 1020,1170
going to wait for a

290
00:09:05,360 --> 00:09:06,560
0,720
notification.|

291
00:09:07,280 --> 00:09:09,440
0,570 660,1020 1020,1170 1170,1410 1410,2160
And the zoo keeper semantics,

292
00:09:09,440 --> 00:09:10,610
0,90 90,330 330,540 540,1020 1050,1170
you know good enough,| you

293
00:09:10,610 --> 00:09:13,700
0,150 150,450 450,2550 2550,3000 3000,3090
know the strong {the,linearizability -

294
00:09:13,700 --> 00:09:15,860
0,420 420,570 570,840 840,1590 1650,2160
-} for write operations,| plus

295
00:09:15,860 --> 00:09:17,180
0,90 90,210 210,510 540,1110 1110,1320
you know the rules for

296
00:09:17,180 --> 00:09:18,800
0,210 210,840 840,990 990,1410 1470,1620
when notifications go off| are

297
00:09:18,800 --> 00:09:20,090
0,330 330,600 600,750 750,1110 1110,1290
strong enough that basically this

298
00:09:20,090 --> 00:09:21,770
0,450 450,840 840,900 900,1320 1320,1680
actually implements a faithful lock,|

299
00:09:21,950 --> 00:09:23,780
0,180 180,450 450,1110 1110,1680 1680,1830
where only one client,| if

300
00:09:23,780 --> 00:09:24,590
0,120 120,180 180,330 330,720 720,810
there are any clients at

301
00:09:24,590 --> 00:09:25,340
0,60 60,300 300,510 510,690 690,750
the same time trying to

302
00:09:25,340 --> 00:09:26,270
0,150 150,240 240,480 480,690 690,930
get the lock,| only one

303
00:09:26,270 --> 00:09:27,260
0,90 90,270 270,570
will get it.|

304
00:09:27,260 --> 00:09:29,360
0,420 420,810 810,1170 1350,1950 1950,2100
And when the release is

305
00:09:29,360 --> 00:09:30,860
0,510 510,660 660,930 930,1140 1170,1500
done| or when the file

306
00:09:30,860 --> 00:09:32,330
0,120 120,270 270,810 870,1170 1170,1470
has been deleted,| only one

307
00:09:32,330 --> 00:09:33,440
0,90 90,150 150,570 600,990 990,1110
in the next round will

308
00:09:33,440 --> 00:09:34,380
0,150 150,420
get it.|

309
00:09:34,620 --> 00:09:35,940
0,510 660,960 960,1110 1110,1230 1230,1320
{} So that's sort of

310
00:09:35,940 --> 00:09:38,220
0,570 960,1500 1500,1680 1680,1830 1830,2280
cool,| {} and it's interesting

311
00:09:38,220 --> 00:09:39,900
0,150 150,270 270,570 570,1110 1140,1680
that you could build {}

312
00:09:39,900 --> 00:09:40,860
0,90 90,150 150,360 360,690 720,960
you know sort of sort

313
00:09:40,860 --> 00:09:42,900
0,120 120,270 270,1020 1020,1620 1710,2040
of the foundational primitive| on

314
00:09:42,900 --> 00:09:44,460
0,240 240,330 330,810 810,1110 1110,1560
using the primitives that the

315
00:09:44,460 --> 00:09:46,080
0,180 180,540 540,1140
{zookeeper -} offers.|

316
00:09:46,280 --> 00:09:47,300
0,360 360,450 450,600 600,750 750,1020
And you see here, both

317
00:09:47,300 --> 00:09:49,220
0,90 90,630 660,1170 1170,1620 1740,1920
the role of the you

318
00:09:49,220 --> 00:09:51,230
0,180 180,480 510,720 720,1380 1590,2010
know the the watch| and

319
00:09:51,230 --> 00:09:52,250
0,180 180,390 390,480 480,750 750,1020
then there's the second role

320
00:09:52,250 --> 00:09:53,120
0,120 120,240 240,660 660,750 750,870
for the ephemeral,| you know

321
00:09:53,120 --> 00:09:55,280
0,420 510,1170 1170,1350 1350,1650 1650,2160
the ephemeral is there,| because,

322
00:09:55,460 --> 00:09:57,050
0,450 450,900 900,1320 1320,1530 1530,1590
{} what happens if a

323
00:09:57,050 --> 00:09:59,450
0,720 900,1500 1500,1590 1590,2040 2040,2400
client fails to crash,| before

324
00:09:59,450 --> 00:10:01,370
0,90 90,330 330,390 390,990 1230,1920
it calls {} release| and

325
00:10:01,490 --> 00:10:03,140
0,540 540,1080 1080,1170 1170,1290 1290,1650
the semantics of the ephemeral

326
00:10:03,140 --> 00:10:05,060
0,600 600,1050 1050,1290 1290,1530 1530,1920
files,| that {zookeeper -} servers

327
00:10:05,060 --> 00:10:06,560
0,570 780,930 930,1020 1020,1410 1410,1500
will, if it decides that

328
00:10:06,560 --> 00:10:07,430
0,60 60,330 330,450 450,810 810,870
the client has crashed,| it

329
00:10:07,430 --> 00:10:09,740
0,330 360,840 840,990 990,1800 1950,2310
will do the operation, {}|

330
00:10:09,740 --> 00:10:11,270
0,150 150,420 420,840 840,930 930,1530
it will remove the file

331
00:10:11,390 --> 00:10:13,250
0,270 270,840 840,990 990,1350 1350,1860
on behalf of the client,|

332
00:10:13,340 --> 00:10:14,630
0,210 210,570 570,720 720,780 780,1290
so even if the client

333
00:10:15,140 --> 00:10:17,240
0,510 510,630 630,1320 1620,1950 1950,2100
fails or crashes,| {zookeeper -}

334
00:10:17,240 --> 00:10:18,500
0,360 360,450 450,990 990,1110 1110,1260
serve the site at some

335
00:10:18,500 --> 00:10:19,910
0,300 300,420 420,750 750,840 840,1410
point the client is done,|

336
00:10:20,060 --> 00:10:21,530
0,360 360,510 510,660 660,1230 1320,1470
and that will remove the

337
00:10:21,530 --> 00:10:23,090
0,330 330,570 570,990 1050,1320 1320,1560
file lock f,| which will

338
00:10:23,090 --> 00:10:24,710
0,480 480,1110 1110,1200 1200,1290 1290,1620
cause notifications to be sent

339
00:10:24,710 --> 00:10:25,850
0,90 90,360 360,780 780,1050 1050,1140
to other clients actually are

340
00:10:25,850 --> 00:10:26,900
0,270 270,540 540,720
waiting for it.|

341
00:10:27,450 --> 00:10:29,730
0,360 360,750 870,1140 1140,1500 1500,2280
{} So, {} it's a

342
00:10:29,730 --> 00:10:31,260
0,450 450,660 660,720 720,1230 1230,1530
cool set of primitives to

343
00:10:31,260 --> 00:10:33,240
0,450 450,720 720,1110 1110,1680 1680,1980
build {} powerful abstraction that

344
00:10:33,240 --> 00:10:34,680
0,150 150,240 240,540 540,630 630,1440
can be useful in applications.|

345
00:10:35,870 --> 00:10:37,670
0,300 300,870 870,990 990,1230 1230,1800
One downside of this particular

346
00:10:37,670 --> 00:10:39,180
0,930
implementation

347
00:10:39,240 --> 00:10:41,700
0,630 630,1110 1110,1590 1860,2100 2100,2460
{} is that,| it has

348
00:10:41,700 --> 00:10:43,110
0,240 240,480 480,510 510,840 840,1410
what's called a herding effect,|

349
00:10:43,470 --> 00:10:45,780
0,960 990,1710 1710,1830 1830,2160 2160,2310
{} namely {you,know} let's say

350
00:10:45,780 --> 00:10:46,860
0,120 120,240 240,300 300,660 660,1080
you have a thousand clients,|

351
00:10:46,860 --> 00:10:48,630
0,240 240,390 390,660 720,1320 1320,1770
{you,know} want to go grab

352
00:10:48,630 --> 00:10:49,950
0,360 360,720 720,990 990,1110 1110,1320
the lock file or make

353
00:10:49,950 --> 00:10:51,750
0,90 90,330 330,720 720,1290 1290,1800
the lock file, required lock,|

354
00:10:51,960 --> 00:10:53,370
0,690 810,960 960,1200 1200,1290 1290,1410
now {} one is going

355
00:10:53,370 --> 00:10:55,170
0,90 90,840 990,1170 1350,1560 1560,1800
to succeed| and {999 -

356
00:10:55,170 --> 00:10:56,610
0,480 480,690 690,810 810,900 900,1440
-} are going to call

357
00:10:56,640 --> 00:10:58,440
0,540 540,1080 1080,1410 1410,1680 1680,1800
{} exists and wait for

358
00:10:58,440 --> 00:10:59,640
0,60 60,750
a notification.|

359
00:10:59,700 --> 00:11:01,680
0,300 300,690 690,870 870,1500 1770,1980
Then when the first a

360
00:11:01,680 --> 00:11:03,660
0,690 720,1170 1170,1290 1290,1740 1740,1980
client deletes the file or

361
00:11:03,660 --> 00:11:06,150
0,390 390,480 480,780 780,1200 2280,2490
releases the file lock,| {999

362
00:11:06,150 --> 00:11:06,960
0,210 210,510 510,630 630,750 750,810
- -} are going to

363
00:11:06,960 --> 00:11:09,270
0,450 570,840 840,1080 1080,1470 1470,2310
try {} to actually acquire

364
00:11:09,540 --> 00:11:10,600
0,150 150,570
the lock.|

365
00:11:10,750 --> 00:11:11,770
0,330 330,450 450,660 660,840 840,1020
And of course only one

366
00:11:11,770 --> 00:11:12,670
0,90 90,210 210,270 270,690 690,900
is going to succeed,| {and,998

367
00:11:12,670 --> 00:11:13,990
0,840 840,930 930,1050 1050,1170 1170,1320
-} are going to be

368
00:11:13,990 --> 00:11:16,210
0,270 270,390 390,450 450,1020 1800,2220
sitting for a notification,| but

369
00:11:16,420 --> 00:11:18,400
0,330 330,630 630,1170 1200,1650 1650,1980
you know the did this,|

370
00:11:18,400 --> 00:11:19,510
0,150 150,330 330,750 750,900 900,1110
you know every sort of

371
00:11:19,510 --> 00:11:21,220
0,420 420,990 990,1050 1050,1440 1440,1710
random disappearance,| a huge amount

372
00:11:21,220 --> 00:11:23,770
0,60 60,540 690,1530 1560,2130 2160,2550
of traffic,| {} and {}

373
00:11:23,770 --> 00:11:25,390
0,150 150,270 270,660 660,1350 1350,1620
you know basically bombarding,| {you,know}

374
00:11:25,390 --> 00:11:27,520
0,90 90,270 270,570 570,900 1830,2130
the {zookeeper -} serve {999

375
00:11:27,520 --> 00:11:29,230
0,870 870,1170 1170,1290 1290,1500 1500,1710
- -} to try to

376
00:11:29,230 --> 00:11:30,970
0,330 330,420 420,1020 1110,1260 1260,1740
do it again,| you know

377
00:11:30,970 --> 00:11:33,190
0,360 360,480 480,840 840,1320 1680,2220
all but one are {}

378
00:11:33,190 --> 00:11:34,260
0,150 150,330 330,690
are gonna fail.|

379
00:11:34,610 --> 00:11:35,810
0,240 240,570 660,930 930,990 990,1200
And so that's a little

380
00:11:35,810 --> 00:11:38,510
0,120 120,210 210,1440 1440,2010 2010,2700
bit of undesirable property, {}

381
00:11:38,510 --> 00:11:40,490
0,0 0,480 480,750 750,1200 1560,1980
{} this herding effect, {}|

382
00:11:40,490 --> 00:11:41,630
0,330 330,480 480,600 600,810 810,1140
and it's a real problem

383
00:11:41,630 --> 00:11:42,800
0,120 120,630 630,720 720,840 840,1170
in practice,| you know move

384
00:11:42,800 --> 00:11:45,170
0,480 510,1110 1350,1740 1740,2100 2100,2370
on a small scale multi

385
00:11:45,170 --> 00:11:46,580
0,270 270,780 780,960 960,1290 1290,1410
core machines| as well as

386
00:11:46,580 --> 00:11:47,810
0,420 420,600 600,840 840,990 990,1230
{of,course} {} setting like this|

387
00:11:47,810 --> 00:11:49,700
0,420 420,810 810,1410 1410,1560 1560,1890
where network messages are not

388
00:11:49,700 --> 00:11:50,560
0,390
free.

389
00:11:51,390 --> 00:11:52,980
0,180 180,300 300,690 690,1140 1290,1590
So it's interesting that actually

390
00:11:52,980 --> 00:11:54,060
0,180 180,450 450,750 750,810 810,1080
{zookeeper -} provides {} enough

391
00:11:54,060 --> 00:11:55,080
0,480 480,570 570,690 690,810 810,1020
primitives,| that you could actually

392
00:11:55,080 --> 00:11:56,070
0,90 90,450 450,480 480,660 660,990
do quite a bit better|

393
00:11:56,070 --> 00:11:56,820
0,150 150,240 240,330 330,540 540,750
and you can actually build

394
00:11:56,820 --> 00:11:58,320
0,60 60,570 660,840 840,1110 1110,1500
a lock,| that doesn't have

395
00:11:58,320 --> 00:12:00,420
0,360 360,540 540,630 630,1170 1200,2100
suffered from the herding effect.|

396
00:12:01,310 --> 00:12:03,460
0,450 450,570 570,900 900,1350
So a better lock,|

397
00:12:08,950 --> 00:12:10,330
0,510 510,660 660,780 780,1230 1230,1380
and it's very interesting,| let

398
00:12:10,330 --> 00:12:11,770
0,300 300,600 630,900 900,1020 1020,1440
me a pull out the

399
00:12:13,420 --> 00:12:15,120
0,390 390,630 630,720 720,1140
pseudo code for this,|

400
00:12:15,180 --> 00:12:16,260
0,180 180,300 300,420 420,480 480,1080
which is in the paper,|

401
00:12:16,290 --> 00:12:17,430
0,270 270,480 480,600 600,750 750,1140
{} so we can look

402
00:12:17,430 --> 00:12:18,380
0,120 120,360
at it,|

403
00:12:18,730 --> 00:12:20,110
0,150 150,660 660,750 750,900 900,1380
and discuss you know why

404
00:12:20,110 --> 00:12:20,830
0,120 120,210 210,390 390,600 600,720
you know this lock is

405
00:12:20,830 --> 00:12:23,140
0,420 1110,1560 1560,2070 2070,2190 2190,2310
better| and particularly what we'll

406
00:12:23,140 --> 00:12:24,130
0,360 360,480 480,660 660,810 810,990
see is that this lock

407
00:12:24,130 --> 00:12:25,540
0,90 90,420 420,720 720,1140 1140,1410
is better,| because basically there's

408
00:12:25,540 --> 00:12:26,840
0,750
no,

409
00:12:26,840 --> 00:12:29,780
0,300 300,570 570,1290 1290,1860 2100,2940
there's no retry,| were all

410
00:12:29,810 --> 00:12:31,460
0,420 420,570 570,840 840,1410 1410,1650
clients that didn't succeed getting

411
00:12:31,460 --> 00:12:33,050
0,120 120,570 690,1170 1170,1500 1500,1590
the lock will retry to

412
00:12:33,050 --> 00:12:34,400
0,210 210,300 300,690 720,1260 1260,1350
try to get| instead {you,know}

413
00:12:34,400 --> 00:12:36,290
0,660 870,1260 1260,1440 1440,1500 1500,1890
basically do all the clients

414
00:12:36,290 --> 00:12:37,700
0,60 60,240 240,300 300,630 630,1410
are sort of for {a,line},|

415
00:12:37,850 --> 00:12:39,290
0,300 300,690 690,1080 1080,1260 1260,1440
{} and {} they get

416
00:12:39,290 --> 00:12:40,280
0,60 60,300 300,540 540,660 660,990
to log one by one.|

417
00:12:40,900 --> 00:12:42,220
0,330 330,420 420,870 870,960 960,1320
And the way you know

418
00:12:42,220 --> 00:12:43,390
0,270 270,390 390,480 480,960 960,1170
that you can program that|

419
00:12:43,390 --> 00:12:45,580
0,240 240,690 690,1350 1560,2070 2070,2190
using zookeeper's primitives as in

420
00:12:45,580 --> 00:12:47,480
0,150 150,720 720,990 990,1410
this particular pseudo code.|

421
00:12:47,740 --> 00:12:48,340
0,240 240,330 330,360 360,390 390,600
And there are a couple

422
00:12:48,340 --> 00:12:50,470
0,720 810,1260 1260,1740 1740,2070 2070,2130
differences that {} compared to

423
00:12:50,470 --> 00:12:52,360
0,90 90,420 420,840 1260,1680 1680,1890
the previous one,| {} first

424
00:12:52,360 --> 00:12:54,240
0,120 120,570 660,1320
of all, the,|

425
00:12:54,780 --> 00:12:56,120
0,390 390,810

426
00:12:56,180 --> 00:12:57,800
0,390 390,510 510,930 930,1530 1530,1620
there's an additional flag, you

427
00:12:57,800 --> 00:13:00,200
0,510 510,630 630,1140 1140,1650 1650,2400
pass to create namely SEQUENTIAL,|

428
00:13:00,560 --> 00:13:02,030
0,180 180,450 450,930 930,1260 1260,1470
{} which basically means that

429
00:13:02,030 --> 00:13:03,980
0,60 60,1230 1260,1500 1500,1770 1770,1950
as a these files are

430
00:13:03,980 --> 00:13:05,810
0,510 540,600 600,1170 1200,1440 1440,1830
created,| the {} lock file

431
00:13:05,810 --> 00:13:06,650
0,120 120,510 510,630 630,690 690,840
is created,| but it will

432
00:13:06,650 --> 00:13:08,720
0,120 120,480 480,750 1710,1860 1860,2070
be created as the first

433
00:13:08,720 --> 00:13:09,560
0,210 210,360 360,450 450,600 600,840
one, it will be {lock-0

434
00:13:09,560 --> 00:13:10,910
0,600 630,870 870,930 930,1110 1110,1350
-},| then the next one

435
00:13:10,910 --> 00:13:12,980
0,180 180,270 270,540 540,1080 1320,2070
will be {lock-1 -}, etc.|

436
00:13:16,920 --> 00:13:17,910
0,180 180,240 240,390 390,660 660,990
So {} we have like

437
00:13:17,910 --> 00:13:19,680
0,180 180,480 480,870 870,1500 1500,1770
a thousand clients rushing {you,know}

438
00:13:19,680 --> 00:13:20,820
0,150 150,270 270,690 690,810 810,1140
to the servers to actually

439
00:13:20,820 --> 00:13:22,170
0,210 210,330 330,840 840,930 930,1350
try to acquire to lock,|

440
00:13:22,260 --> 00:13:23,910
0,750 750,870 870,1200 1200,1530 1530,1650
basically a thousand files will

441
00:13:23,910 --> 00:13:25,650
0,150 150,630 660,1230 1230,1590 1590,1740
be created,| all numbered from

442
00:13:25,650 --> 00:13:27,960
0,360 360,720 750,1470 1470,1770
0 to {999 -}.|

443
00:13:28,750 --> 00:13:31,600
0,690 870,1680 1800,2280
Then, {} so.|

444
00:13:31,600 --> 00:13:32,920
0,360 360,510 510,900 900,1230 1230,1320
So, I'll succeed creating a

445
00:13:32,920 --> 00:13:35,830
0,450 480,1230 1260,1890 1890,2310 2310,2910
file,| {} the creator returns

446
00:13:35,830 --> 00:13:39,490
0,450 450,750 780,1500 1800,2640 2730,3660
actually the number that that

447
00:13:39,490 --> 00:13:40,360
0,150 150,450 450,630 630,780 780,870
you got,| so if the

448
00:13:40,360 --> 00:13:41,620
0,330 330,780 780,930 930,1020 1020,1260
client 0, if the first

449
00:13:41,620 --> 00:13:43,870
0,300 300,510 510,990 1260,1950 1950,2250
client gets {you,know} block creates

450
00:13:43,870 --> 00:13:45,490
0,210 210,810 900,1380 1380,1500 1500,1620
lock 0,| then it will

451
00:13:45,490 --> 00:13:46,930
0,210 210,570 570,990 1020,1350 1350,1440
get 0 back| and the

452
00:13:46,930 --> 00:13:48,010
0,240 240,360 360,540 540,810 810,1080
second will get 1 back,

453
00:13:48,010 --> 00:13:49,160
0,330 330,750
etc, etc.|

454
00:13:49,780 --> 00:13:50,890
0,510 510,600 600,690 690,930 930,1110
Then you know that you

455
00:13:50,890 --> 00:13:52,720
0,150 150,540 540,1020 1020,1290 1290,1830
can basically ask you to

456
00:13:52,780 --> 00:13:54,040
0,270 270,480 480,600 600,1110 1110,1260
get all the children in

457
00:13:54,040 --> 00:13:55,990
0,390 390,1200 1230,1500 1500,1830 1830,1950
that directory| under which you

458
00:13:55,990 --> 00:13:57,100
0,90 90,270 270,540 540,600 600,1110
know these files are created,|

459
00:13:57,130 --> 00:13:57,970
0,270 270,390 390,450 450,600 600,840
and so in this case

460
00:13:57,970 --> 00:13:58,600
0,210 210,330 330,420 420,570 570,630
maybe that would be a

461
00:13:58,600 --> 00:14:01,150
0,510 960,1620 1620,2160 2160,2250 2250,2550
thousand {} children and found

462
00:14:01,150 --> 00:14:03,190
0,150 150,690 1050,1560 1560,1740 1740,2040
z nodes,| {} and then

463
00:14:03,190 --> 00:14:04,180
0,150 150,240 240,390 390,690 720,990
you can just look at

464
00:14:04,180 --> 00:14:05,420
0,300 330,810
the n,|

465
00:14:05,480 --> 00:14:08,210
0,1260 1500,1800 1800,1950 1950,2280 2280,2730
and see if you're n,|

466
00:14:08,270 --> 00:14:09,350
0,240 240,390 390,600 600,930 930,1080
in this case 0 is

467
00:14:09,350 --> 00:14:11,240
0,90 90,420 420,720 720,1320 1410,1890
the load znode {to,see}, {}|

468
00:14:11,240 --> 00:14:12,230
0,120 120,210 210,480 480,540 540,990
and if that's the case,

469
00:14:12,260 --> 00:14:12,950
0,180 180,360 360,450 450,630 630,690
that means you got the

470
00:14:12,950 --> 00:14:13,880
0,420
lock.|

471
00:14:13,880 --> 00:14:14,720
0,240 240,330 330,450 450,600 600,840
And so that makes total

472
00:14:14,720 --> 00:14:15,740
0,300 300,450 450,510 510,750 750,1020
sense,| but the first line

473
00:14:15,740 --> 00:14:17,780
0,210 210,660 660,1080 1080,1530 1740,2040
gets actually 0 back, {}|

474
00:14:17,780 --> 00:14:18,620
0,180 180,270 270,420 420,720 720,840
all the other clients have

475
00:14:18,620 --> 00:14:19,580
0,60 60,330 330,660 660,870 870,960
a higher number,| because {they're

476
00:14:19,580 --> 00:14:21,200
0,120 120,210 210,510 510,960 1260,1620
-} {sequentially -} numbered| and

477
00:14:21,200 --> 00:14:22,310
0,330 330,570 570,780 780,1020 1020,1110
so the first client will

478
00:14:22,310 --> 00:14:23,270
0,330 330,420 420,660 660,810 810,960
succeed in getting it| and

479
00:14:23,270 --> 00:14:24,320
0,120 120,210 210,360 360,840 870,1050
all the other ones, what

480
00:14:24,320 --> 00:14:26,240
0,120 120,300 300,600 600,1110 1380,1920
they're gonna do is, {}|

481
00:14:26,420 --> 00:14:28,280
0,360 360,480 480,1020 1050,1440 1440,1860
{they're,going} to look at, they're

482
00:14:28,280 --> 00:14:29,420
0,120 120,180 180,390 390,480 480,1140
going to find the p

483
00:14:29,810 --> 00:14:30,830
0,300 300,480 480,840 840,930 930,1020
{you,know} the number that is

484
00:14:30,830 --> 00:14:31,760
0,270 270,360 360,570 570,660 660,930
right in front of them,|

485
00:14:31,790 --> 00:14:32,900
0,270 270,360 360,840 840,960 960,1110
so for example if this

486
00:14:32,900 --> 00:14:34,610
0,120 120,630 1050,1290 1290,1500 1500,1710
is client,| {} that got

487
00:14:34,610 --> 00:14:36,320
0,450 450,570 570,810 810,1230 1230,1710
back you know {lock-10 -},|

488
00:14:36,410 --> 00:14:37,190
0,150 150,270 270,330 330,690 690,780
it's going to look you

489
00:14:37,190 --> 00:14:39,380
0,210 210,870 900,1110 1110,1470 1470,2190
know for {} znode 9

490
00:14:39,380 --> 00:14:40,820
0,180 180,450 450,960 1020,1170 1170,1440
{you,know} {lock-9 -}| and basically

491
00:14:40,820 --> 00:14:41,840
0,150 150,240 240,690 690,780 780,1020
put a watch on that

492
00:14:41,840 --> 00:14:42,720
0,420
file.|

493
00:14:45,760 --> 00:14:46,900
0,150 150,330 330,660 660,840 840,1140
So this means that every

494
00:14:46,900 --> 00:14:48,880
0,660 930,1350 1350,1710 1710,1890 1890,1980
client {} will have a

495
00:14:48,880 --> 00:14:50,680
0,420 420,900 900,1080 1080,1230 1230,1800
watch basically on its predecessor,|

496
00:14:50,770 --> 00:14:52,120
0,420 420,690 690,870 870,960 960,1350
so it goes to see

497
00:14:52,120 --> 00:14:53,290
0,390 390,570 570,630 630,930 930,1170
that's all the clients form

498
00:14:53,290 --> 00:14:56,420
0,60 60,660 960,1920 1950,2610
a line| and {}

499
00:14:56,420 --> 00:14:57,590
0,180 180,630 630,690 690,1020 1020,1170
and then {you,know,the} client just

500
00:14:57,590 --> 00:14:59,690
0,510 540,1200 1200,1290 1290,1530 1530,2100
gonna wait for that notification

501
00:14:59,690 --> 00:15:00,820
0,60 60,180 180,570
to go off.|

502
00:15:00,850 --> 00:15:02,170
0,420 420,570 570,810 810,1140 1140,1320
And so that means for

503
00:15:02,170 --> 00:15:03,790
0,360 360,600 600,900 900,1470 1500,1620
example when client 0 you

504
00:15:03,790 --> 00:15:05,110
0,180 180,330 330,600 600,930 930,1320
know we got 0 back,|

505
00:15:05,110 --> 00:15:06,460
0,90 90,360 360,780 810,1230 1230,1350
you know {} releases the

506
00:15:06,460 --> 00:15:07,960
0,330 360,570 570,750 750,1080 1080,1500
lock,| it will delete n,|

507
00:15:08,470 --> 00:15:09,520
0,360 360,570 570,750 750,960 960,1050
{} this will get a

508
00:15:09,520 --> 00:15:10,990
0,690 690,750 750,960 960,1260 1260,1470
notification to go off for

509
00:15:10,990 --> 00:15:12,860
0,120 120,570 570,1230
the file one.|

510
00:15:13,010 --> 00:15:14,000
0,270 270,360 360,450 450,870 870,990
And so the client is

511
00:15:14,000 --> 00:15:15,140
0,240 240,540 540,660 660,840 840,1140
actually waiting for that particular

512
00:15:15,140 --> 00:15:19,010
0,720 720,1110 1110,1110 2100,3120 3360,3870
notification, then will run,| but

513
00:15:19,010 --> 00:15:20,000
0,180 180,300 300,630 630,810 810,990
it's the only one that

514
00:15:20,000 --> 00:15:23,570
0,540 840,1650 1680,3270 3270,3420 3420,3570
runs| and a it will

515
00:15:23,570 --> 00:15:24,520
0,480
succeed.|

516
00:15:25,330 --> 00:15:26,440
0,300 300,420 420,660 660,750 750,1110
And so here we see

517
00:15:26,440 --> 00:15:27,580
0,120 120,300 300,480 480,570 570,1140
you know this is sometimes

518
00:15:27,580 --> 00:15:28,960
0,300 300,510 510,600 600,1080 1080,1380
easier type of {locks,,called} ticket

519
00:15:28,960 --> 00:15:30,060
0,540
locks.|

520
00:15:30,640 --> 00:15:32,500
0,480 510,780 780,1080 1080,1350 1350,1860
In a {multi-core -} programming,|

521
00:15:32,500 --> 00:15:33,520
0,120 120,210 210,570 570,660 660,1020
if you're familiar with them,|

522
00:15:33,670 --> 00:15:34,210
0,120 120,240 240,330 330,480 480,540
and they are sort of

523
00:15:34,210 --> 00:15:36,700
0,90 90,450 450,1740 1740,2160 2160,2490
the same {} same idea

524
00:15:36,700 --> 00:15:38,080
0,300 300,540 540,900 900,1170 1170,1380
of ticket locks,| actually you're

525
00:15:38,080 --> 00:15:40,450
0,600 600,1050 1050,1500 1590,2130 2130,2370
building into this, {} using

526
00:15:40,450 --> 00:15:42,280
0,180 180,750 780,1440
{zookeeper -} primitives.|

527
00:15:42,580 --> 00:15:44,260
0,540 540,750 750,840 840,1380 1380,1680
Again, what is interesting about

528
00:15:44,260 --> 00:15:45,790
0,90 90,300 300,570 930,1440 1440,1530
it is that,| {} you

529
00:15:45,790 --> 00:15:46,900
0,60 60,210 210,600 600,690 690,1110
know these primitives are powerful

530
00:15:46,900 --> 00:15:47,680
0,270 270,390 390,450 450,570 570,780
enough,| that you can actually

531
00:15:47,680 --> 00:15:48,850
0,240 240,390 390,540 540,600 600,1170
build these kind of locks.|

532
00:15:51,260 --> 00:15:52,860
0,210 210,510 510,720 720,1110
Any questions about this?|

533
00:15:57,840 --> 00:15:58,440
0,210 210,240 240,390 390,450 450,600
Okay, I want to make

534
00:15:58,440 --> 00:16:00,570
0,300 300,510 510,1020 1080,1500 1500,2130
one more comment {you,know,about} the

535
00:16:00,600 --> 00:16:03,300
0,210 210,810 1020,1770 1770,2100 2100,2700
these locks,| before moving onto

536
00:16:03,300 --> 00:16:05,520
0,780 810,1050 1050,1140 1140,1770 2040,2220
{} chain {} application.| We

537
00:16:05,520 --> 00:16:06,090
0,90 90,150 150,450 450,510 510,570
have a question in the

538
00:16:06,090 --> 00:16:07,710
0,450 600,990 990,1290 1290,1530 1530,1620
chat.| Yeah, okay, what's the

539
00:16:07,710 --> 00:16:09,270
0,450 450,720 720,960 960,1110 1110,1560
question {in,chat}.| What is the

540
00:16:09,300 --> 00:16:11,550
0,600 810,1320 1320,1530 1530,1800 1800,2250
watch for on line 4?|

541
00:16:12,140 --> 00:16:14,240
0,540 570,810 810,1380 1770,1920 1920,2100
Good, go back, on this

542
00:16:14,240 --> 00:16:16,060
0,270 270,540 540,990
one line 4?|

543
00:16:17,480 --> 00:16:18,140
0,240 240,330 330,450 450,600 600,660
Yeah, I think that's the

544
00:16:18,140 --> 00:16:19,120
0,420
question.|

545
00:16:19,580 --> 00:16:21,980
0,510 510,1620 1620,1680 1680,2040 2040,2400
Yeah, well, { -} that

546
00:16:21,980 --> 00:16:23,210
0,390 390,720 720,1080 1080,1170 1170,1230
watch my comment,| with the

547
00:16:23,210 --> 00:16:24,590
0,300 300,510 510,690 690,930 930,1380
watch actually should go with

548
00:16:24,710 --> 00:16:26,440
0,30 390,690 690,1230
{you,know} line 5,|

549
00:16:26,500 --> 00:16:27,850
0,210 210,390 390,630 630,1020 1020,1350
so there's no watch {on,line}

550
00:16:27,850 --> 00:16:29,440
0,300 330,690
4, right,|

551
00:16:29,590 --> 00:16:31,270
0,510 540,930 930,1080 1080,1260 1260,1680
{} line 4 just finds

552
00:16:31,270 --> 00:16:32,410
0,390 390,480 480,600 600,720 720,1140
p you know the numbers

553
00:16:32,410 --> 00:16:34,680
0,270 270,870 900,1380 1380,1680
right before you're n,|

554
00:16:39,850 --> 00:16:40,660
0,210 210,360 360,570 570,750 750,810
if that doesn't answer the

555
00:16:40,660 --> 00:16:41,740
0,390 390,660 660,840 840,960 960,1080
question,| please, if you come

556
00:16:41,740 --> 00:16:42,880
0,240 240,480 480,660 660,810 810,1140
back later and that's fine.|

557
00:16:43,570 --> 00:16:45,910
0,450 450,600 600,1080 1080,1650 1800,2340
Actually, {I,have} another question.| Yeah.|

558
00:16:45,910 --> 00:16:46,780
0,180 180,300 300,480 480,750 750,870
This is going actually I

559
00:16:46,780 --> 00:16:48,040
0,180 180,420 420,510 510,750 750,1260
think back a few slides,|

560
00:16:48,040 --> 00:16:49,570
0,300 360,570 570,780 780,1020 1020,1530
but how does {zookeeper -}

561
00:16:49,570 --> 00:16:51,040
0,570 570,840 870,960 960,1320 1320,1470
determine that a client has

562
00:16:51,040 --> 00:16:52,480
0,390 390,540 540,840 840,1290 1290,1440
failed| and thus release the

563
00:16:52,480 --> 00:16:54,790
0,480 480,960 1260,1560 1560,1830 1830,2310
ephemeral lock,| I can often,

564
00:16:54,850 --> 00:16:56,380
0,240 240,570 570,750 750,1350 1350,1530
it's just like partitions for

565
00:16:56,380 --> 00:16:57,440
0,30 30,600
a moment.|

566
00:16:57,440 --> 00:16:59,600
0,390 390,660 660,1110 1110,1410 1410,2160
Yeah, so, {} well, yeah

567
00:16:59,780 --> 00:17:00,800
0,180 180,330 330,570 570,870 870,1020
so that could happen,| so

568
00:17:00,800 --> 00:17:01,940
0,60 60,390 390,690 690,1020 1020,1140
the client might actually,| so

569
00:17:01,940 --> 00:17:02,930
0,90 90,330 330,450 450,510 510,990
the client has a session

570
00:17:03,020 --> 00:17:04,940
0,360 360,570 570,750 750,1620 1620,1920
right with the zookeeper {}

571
00:17:04,940 --> 00:17:08,030
0,660 1080,1950 1950,2370 2370,2850 2850,3090
servers| and {} {the,client} needs

572
00:17:08,030 --> 00:17:09,650
0,450 450,990 1020,1380 1380,1470 1470,1620
to,| {} actually the {zookeeper

573
00:17:09,650 --> 00:17:10,970
0,330 330,420 420,750 750,1020 1020,1320
-} and client basically sends

574
00:17:10,970 --> 00:17:12,890
0,420 420,540 540,690 690,1050 1530,1920
heartbeats to each other, {}|

575
00:17:12,890 --> 00:17:15,290
0,300 300,510 510,990 990,1950 1980,2400
if {zookeeper -} {} servers

576
00:17:15,290 --> 00:17:16,580
0,360 360,780 780,930 930,990 990,1290
doesn't hear from a client

577
00:17:16,580 --> 00:17:17,930
0,90 90,120 120,300 300,870 960,1350
for a little while,| then

578
00:17:17,930 --> 00:17:18,800
0,90 90,300 300,360 360,780 780,870
it's just {} desides that

579
00:17:18,800 --> 00:17:20,510
0,300 300,600 600,720 720,1320 1320,1710
{client,is} down and {close,the} session.|

580
00:17:21,600 --> 00:17:22,980
0,420 420,690 690,870 870,1170 1170,1380
And so the client is

581
00:17:22,980 --> 00:17:24,030
0,210 210,300 300,540 540,930 930,1050
trying to send messages on

582
00:17:24,030 --> 00:17:24,930
0,90 90,420 420,540 540,600 600,900
the session,| but the session

583
00:17:24,930 --> 00:17:26,010
0,90 90,270 270,600 600,690 690,1080
is just closed is gone|

584
00:17:26,550 --> 00:17:27,690
0,240 240,480 480,900 900,1020 1020,1140
and any files that were

585
00:17:27,690 --> 00:17:30,090
0,540 540,660 660,780 780,1980 1980,2400
created in the,| {ephemeral -}

586
00:17:30,090 --> 00:17:31,230
0,270 270,360 360,450 450,810 810,1140
files that were created during

587
00:17:31,230 --> 00:17:33,280
0,150 150,540 600,1080 1080,1470
that session {are,basically} deleted.|

588
00:17:34,860 --> 00:17:36,120
0,150 150,270 270,450 450,630 630,1260
And so if the network

589
00:17:36,120 --> 00:17:40,290
0,930 960,1680 1680,2820 2970,3660 3750,4170
{} reconvenes or [reveals],| then

590
00:17:40,290 --> 00:17:41,580
0,60 60,750 750,900 900,1140 1140,1290
the client will try to

591
00:17:41,580 --> 00:17:42,780
0,180 180,480 480,690 690,870 870,1200
send messages over that session|

592
00:17:42,780 --> 00:17:43,740
0,120 120,570 570,720 720,870 870,960
and basically {zookeeper - -}

593
00:17:43,740 --> 00:17:44,970
0,360 360,450 450,660 660,870 870,1230
servers {} say like that

594
00:17:45,240 --> 00:17:47,080
0,390 390,600 600,900 900,1350
session doesn't exist anymore,|

595
00:17:47,370 --> 00:17:48,780
0,150 150,330 330,750 750,900 900,1410
you gotta retry or restart

596
00:17:48,780 --> 00:17:50,060
0,120 120,270 270,690
a new session.|

597
00:17:50,830 --> 00:17:52,280
0,240 240,390 390,570 570,870
Got it, thank you.|

598
00:17:53,470 --> 00:17:54,730
0,330 330,720 750,900 900,1080 1080,1260
Okay good, so there's one

599
00:17:54,730 --> 00:17:56,500
0,360 360,720 750,1110 1110,1380 1380,1770
important point about this, {}|

600
00:17:56,500 --> 00:17:59,050
0,300 300,720 720,1200 1200,1680 1710,2550
I'll call zlocks, where {zookeeper

601
00:17:59,050 --> 00:18:02,350
0,300 300,810 1800,2370 2550,2910 2910,3300
-} locks| and that is

602
00:18:02,380 --> 00:18:03,850
0,240 240,540 540,600 600,1290 1290,1470
they're not the same or

603
00:18:03,850 --> 00:18:05,290
0,210 210,540 540,960 960,1260 1260,1440
have similar {semantics -},| like

604
00:18:05,290 --> 00:18:06,070
0,90 90,390 390,510 510,630 630,780
the locks that you were

605
00:18:06,070 --> 00:18:07,360
0,480 480,720 720,930 930,1230 1230,1290
using or Go locks of

606
00:18:07,360 --> 00:18:08,840
0,150 150,720
mutexes.|

607
00:18:09,360 --> 00:18:10,170
0,420 420,540 540,630 630,750 750,810
{} And it's sort of

608
00:18:10,170 --> 00:18:11,400
0,90 90,420 420,600 600,690 690,1230
an important point to realize|

609
00:18:11,400 --> 00:18:12,480
0,90 90,330 450,750 750,960 960,1080
you know {} even though

610
00:18:12,480 --> 00:18:13,290
0,150 150,480 480,570 570,750 750,810
they're different,| we'll see in

611
00:18:13,290 --> 00:18:14,490
0,60 60,330 330,450 450,660 660,1200
a second, they're still useful,|

612
00:18:14,490 --> 00:18:15,840
0,240 240,360 360,540 540,630 630,1350
but they're not as strong

613
00:18:15,840 --> 00:18:16,800
0,300 300,600 600,780 780,870 870,960
as {} sort of the

614
00:18:16,800 --> 00:18:19,170
0,810 1290,1770 1770,1860 1860,2310 2310,2370
{Go,locks},| {} in particular the

615
00:18:19,170 --> 00:18:20,280
0,300 300,360 360,570 570,690 690,1110
case is that is interesting

616
00:18:20,280 --> 00:18:21,150
0,210 210,360 360,540 540,630 630,870
is,| like when the lock

617
00:18:21,150 --> 00:18:22,680
0,300 300,870
holder fails,|

618
00:18:23,360 --> 00:18:25,760
0,300 330,630 630,1080 1080,1710
so {if,lock} holder fails,|

619
00:18:27,930 --> 00:18:29,430
0,180 180,510 510,720 720,990 990,1500
{} basically {zookeeper -} decides

620
00:18:29,430 --> 00:18:31,020
0,180 180,750 750,1050 1050,1200 1200,1590
that lock holder has failed,

621
00:18:31,020 --> 00:18:32,400
0,180 180,270 270,630 630,810 810,1380
correct,| as we just discussed,|

622
00:18:32,520 --> 00:18:35,250
0,840 960,1080 1080,1200 1200,2040 2130,2730
then it is possible, that

623
00:18:35,250 --> 00:18:35,970
0,180 180,300 300,360 360,540 540,720
we're going to see some

624
00:18:35,970 --> 00:18:37,580
0,510 510,1080
intermediate state.|

625
00:18:42,820 --> 00:18:44,230
0,150 150,660 660,930 930,1020 1020,1410
And remember like the whole

626
00:18:44,230 --> 00:18:45,550
0,240 240,390 390,870 870,1080 1080,1320
rule that {locks,is},| like its

627
00:18:45,550 --> 00:18:47,350
0,330 330,1050 1050,1140 1140,1260 1260,1800
critical section you know you're

628
00:18:47,350 --> 00:18:49,300
0,240 240,540 540,750 750,1230 1260,1950
some invariant is true,| while

629
00:18:49,300 --> 00:18:50,830
0,240 240,870 870,1170 1170,1260 1260,1530
you're going through the critical

630
00:18:50,830 --> 00:18:52,060
0,330 330,540 540,750 750,1110 1110,1230
section,| so that it might

631
00:18:52,060 --> 00:18:52,990
0,150 150,270 270,540 540,660 660,930
not be true,| but then

632
00:18:52,990 --> 00:18:54,370
0,120 120,240 240,510 510,780 780,1380
at the end you reestablish

633
00:18:54,370 --> 00:18:55,980
0,90 90,450
new [variants].|

634
00:18:56,320 --> 00:18:57,880
0,810 810,990 990,1350 1350,1500 1500,1560
{} In here, it's the

635
00:18:57,880 --> 00:18:59,350
0,330 330,540 540,630 630,1050 1050,1470
case, like it required lock,|

636
00:18:59,350 --> 00:19:00,550
0,270 270,630 630,900 900,1080 1080,1200
client requires lock, does some

637
00:19:00,550 --> 00:19:01,930
0,660 690,840 840,1140 1140,1260 1260,1380
steps| and then you know

638
00:19:01,930 --> 00:19:02,950
0,240 240,390 390,600 600,960 960,1020
maybe {zookeeper -} decides if

639
00:19:02,950 --> 00:19:04,570
0,90 90,870 870,1170 1170,1290 1290,1620
the client decides the client

640
00:19:04,570 --> 00:19:07,090
0,630 690,1560 1560,1800 1800,2130 2130,2520
crash| and {} basically revokes

641
00:19:07,090 --> 00:19:08,500
0,510 660,1050 1050,1140 1140,1290 1290,1410
lock,| but you know the

642
00:19:08,500 --> 00:19:09,670
0,510 510,600 600,690 690,810 810,1170
state, you know the system

643
00:19:09,670 --> 00:19:11,200
0,240 240,600 600,930 930,1050 1050,1530
might actually be some intermediate

644
00:19:11,200 --> 00:19:12,490
0,240 240,360 360,510 510,690 690,1290
state| from which the environment

645
00:19:12,490 --> 00:19:14,290
0,120 120,300 300,690 1350,1590 1590,1800
was not true right,| so

646
00:19:14,290 --> 00:19:15,460
0,270 270,510 510,600 600,990 990,1170
it's not the case,| that

647
00:19:15,460 --> 00:19:17,770
0,660 780,1020 1020,1320 1320,1740 1740,2310
basically {} these logs guarantee

648
00:19:17,770 --> 00:19:19,990
0,900 900,1110 1140,1500 1500,1800 1800,2220
adamicity of the critical section.|

649
00:19:21,180 --> 00:19:22,830
0,600 780,960 960,1320 1350,1500 1500,1650
{} So what, so what

650
00:19:22,830 --> 00:19:24,870
0,120 120,1110 1140,1320 1320,1500 1500,2040
they do, what they useful

651
00:19:24,870 --> 00:19:27,140
0,480 900,1620
for, {}|

652
00:19:29,510 --> 00:19:31,010
0,330 330,510 510,630 630,840 840,1500
is for some other purposes,|

653
00:19:33,640 --> 00:19:35,410
0,450 450,690 690,1110 1110,1590 1590,1770
{in,fact} {sort,of} two primary use

654
00:19:35,410 --> 00:19:37,030
0,450 450,1200 1200,1320 1320,1500 1500,1620
cases,| one I think is

655
00:19:37,030 --> 00:19:38,640
0,300 300,780
leader election,|

656
00:19:43,380 --> 00:19:45,420
0,510 630,1530 1530,1680 1680,1830 1830,2040
so basically if we need

657
00:19:45,420 --> 00:19:46,680
0,480 480,660 660,720 720,1140 1140,1260
a set of clients,| that

658
00:19:46,680 --> 00:19:47,520
0,150 150,240 240,480 480,570 570,840
need to select the leader

659
00:19:47,520 --> 00:19:48,690
0,270 270,570 570,660 660,780 780,1170
among them,| you know we

660
00:19:48,810 --> 00:19:50,820
0,480 480,780 780,1050 1050,1530 1560,2010
can all try to basically

661
00:19:50,970 --> 00:19:52,500
0,300 300,390 390,660 660,1170 1200,1530
create the lock file,| one

662
00:19:52,500 --> 00:19:54,210
0,60 60,240 240,990 1020,1350 1350,1710
of them succeed,| that's basically

663
00:19:54,210 --> 00:19:55,640
0,210 210,510 510,570 570,960
then becomes a leader.|

664
00:19:55,860 --> 00:19:57,450
0,210 210,360 360,1020 1020,1320 1320,1590
And that leader could clean

665
00:19:57,450 --> 00:19:59,610
0,300 300,540 540,990 990,1560 1560,2160
up any intermediate states {if,possible}

666
00:19:59,610 --> 00:20:01,740
0,390 390,1050
if necessary,|

667
00:20:02,070 --> 00:20:03,930
0,690 1080,1260 1260,1410 1410,1620 1620,1860
or you know do these

668
00:20:03,930 --> 00:20:05,460
0,360 360,870 870,1200 1200,1290 1290,1530
atomic updates,| using the ready

669
00:20:05,460 --> 00:20:06,690
0,330 360,630 630,990 990,1110 1110,1230
trick,| where basically you do

670
00:20:06,690 --> 00:20:07,860
0,60 60,300 300,420 420,840 840,1170
a bunch of writes to

671
00:20:07,860 --> 00:20:08,700
0,150 150,510 510,600 600,720 720,840
some file,| but then you

672
00:20:08,700 --> 00:20:09,870
0,420 420,510 510,870 870,1080 1080,1170
expose the file only at

673
00:20:09,870 --> 00:20:11,040
0,60 60,420 420,630 630,870 870,1170
the very end,| and that

674
00:20:11,040 --> 00:20:13,110
0,180 180,420 420,450 450,1140 1530,2070
way make a set of

675
00:20:13,110 --> 00:20:15,540
0,450 450,930 930,1440 1440,1710 1710,2430
writes actually are more transactional

676
00:20:15,540 --> 00:20:16,260
0,270
work.|

677
00:20:16,390 --> 00:20:17,980
0,360 360,570 570,1050 1050,1260 1260,1590
So that's one use case

678
00:20:17,980 --> 00:20:19,090
0,150 150,330 330,510 510,570 570,1110
for these kind of locks,|

679
00:20:19,240 --> 00:20:21,040
0,360 360,900 990,1380 1380,1710 1710,1800
the second use case is

680
00:20:21,040 --> 00:20:22,630
0,240 240,330 330,660 660,1020 1020,1590
what I call soft locks,|

681
00:20:27,260 --> 00:20:28,790
0,540 540,780 780,1170 1170,1410 1410,1530
{the,soft,locks} you know the way

682
00:20:28,790 --> 00:20:30,380
0,90 90,240 240,600 600,810 810,1590
to think about is that,|

683
00:20:30,560 --> 00:20:33,110
0,240 240,810 900,1500 1500,2220 2430,2550
let's say {we,have,a} worker in

684
00:20:33,110 --> 00:20:34,760
0,60 60,270 270,540 540,1140 1230,1650
the {mapreduce -} style| and

685
00:20:34,760 --> 00:20:35,930
0,60 60,390 390,840 840,1110 1110,1170
the map I want to

686
00:20:35,930 --> 00:20:38,450
0,420 420,1080 1080,1710 1710,2190 2190,2520
basically arrange that {you,know,every} {}

687
00:20:38,450 --> 00:20:40,190
0,300 300,810 810,1050 1050,1470 1470,1740
worker executes a particular map

688
00:20:40,190 --> 00:20:43,310
0,270 270,540 540,1080 1470,2040 2040,3120
task only once { -}|

689
00:20:43,460 --> 00:20:44,720
0,210 210,600 660,810 810,1080 1080,1260
and so the one way

690
00:20:44,720 --> 00:20:45,800
0,90 90,210 210,480 480,720 720,1080
to do that,| we basically

691
00:20:45,800 --> 00:20:46,880
0,210 210,270 270,630 630,960 960,1080
take a lock out| you

692
00:20:46,880 --> 00:20:48,770
0,90 90,330 330,510 510,1290 1440,1890
know for that particular {}

693
00:20:48,770 --> 00:20:50,930
0,360 360,870 1110,1500 1530,2100 2100,2160
input file,| {} run you

694
00:20:50,930 --> 00:20:53,270
0,150 150,240 240,1080 1230,1380 1380,2340
know the computation| and then

695
00:20:53,300 --> 00:20:54,740
0,330 330,720 720,1050 1050,1290 1290,1440
{you,know} once the map is

696
00:20:54,740 --> 00:20:55,880
0,330 330,600 600,780 780,1080 1080,1140
done,| then you release the

697
00:20:55,880 --> 00:20:58,190
0,240 240,570 720,1680 1680,1830 1830,2310
lock file,| {so,this} will cost

698
00:20:58,190 --> 00:20:59,960
0,420 420,960 960,1290 1290,1470 1470,1770
only one {mapper -} to

699
00:20:59,960 --> 00:21:01,490
0,120 120,420 420,780 780,900 900,1530
the common case to execute

700
00:21:01,760 --> 00:21:04,520
0,690 690,960 960,1320 1320,1890 2310,2760
{} a particular task| and

701
00:21:04,670 --> 00:21:06,530
0,570 690,990 990,1350 1350,1740 1740,1860
and that's exactly what we

702
00:21:06,530 --> 00:21:07,550
0,270 270,390 390,480 480,930 930,1020
want,| but of course you

703
00:21:07,550 --> 00:21:09,050
0,120 120,630 630,780 780,1170 1170,1500
know if the mapper would

704
00:21:09,050 --> 00:21:10,160
0,390 390,630 630,720 720,990 990,1110
fail,| then the lock will

705
00:21:10,160 --> 00:21:12,050
0,150 150,750 900,1050 1050,1620 1620,1890
be released| and then we

706
00:21:12,050 --> 00:21:13,190
0,270 270,630 630,780 780,810 810,1140
might execute it a second

707
00:21:13,190 --> 00:21:14,510
0,300 300,600 600,960 960,1230 1230,1320
time,| because somebody else will

708
00:21:14,510 --> 00:21:15,740
0,210 210,300 300,810 810,840 840,1230
try to acquire a lock|

709
00:21:16,040 --> 00:21:17,000
0,210 210,300 300,360 360,510 510,960
and so in that case,|

710
00:21:17,000 --> 00:21:17,600
0,90 90,210 210,330 330,390 390,600
you know for the case

711
00:21:17,600 --> 00:21:18,710
0,60 60,270 270,540 540,720 720,1110
of {mapreduce -}, that's perfectly

712
00:21:18,710 --> 00:21:20,960
0,330 360,720 930,1590 1590,1740 1740,2250
fine, right,| the, it's okay

713
00:21:20,960 --> 00:21:22,070
0,120 120,180 180,540 540,660 660,1110
if the task is executed

714
00:21:22,070 --> 00:21:23,380
0,630
twice,|

715
00:21:24,870 --> 00:21:27,440
0,210 210,510 510,1410
it happens twice.|

716
00:21:29,680 --> 00:21:30,460
0,150 150,210 210,390 390,630 630,780
And in some ways what

717
00:21:30,460 --> 00:21:31,600
0,90 90,600 600,780 780,900 900,1140
it really is,| it's more

718
00:21:31,600 --> 00:21:33,190
0,390 390,990 990,1230 1230,1320 1320,1590
performance optimization,| in the usual

719
00:21:33,190 --> 00:21:34,720
0,240 240,300 300,540 540,1110 1320,1530
case you wanted to you

720
00:21:34,720 --> 00:21:36,130
0,240 240,510 510,900 900,1020 1020,1410
wanted that actually is execute

721
00:21:36,130 --> 00:21:37,720
0,90 90,330 330,840 990,1290 1290,1590
the only once,| {} but

722
00:21:37,720 --> 00:21:38,350
0,90 90,210 210,390 390,540 540,630
you know if there's a

723
00:21:38,350 --> 00:21:39,400
0,570 570,720 720,900 900,990 990,1050
failure,| it might be the

724
00:21:39,400 --> 00:21:40,450
0,270 270,390 390,510 510,990 990,1050
case, that you're executing a

725
00:21:40,450 --> 00:21:42,310
0,240 240,480 480,990 1290,1620 1620,1860
map job twice,| {then,that} thing,

726
00:21:42,310 --> 00:21:43,660
0,420 420,510 510,750 750,1080 1080,1350
and the {mapreduce -} means

727
00:21:43,660 --> 00:21:44,440
0,90 90,300 300,450 450,570 570,780
you set up in such

728
00:21:44,440 --> 00:21:45,280
0,90 90,240 240,420 420,660 660,840
a way that actually {that's

729
00:21:45,280 --> 00:21:47,320
0,1320 1320,1380
-} okay.|

730
00:21:47,870 --> 00:21:48,890
0,300 300,420 420,480 480,690 690,1020
And so in those cases,|

731
00:21:48,890 --> 00:21:49,490
0,120 120,180 180,300 300,480 480,600
{} these sort of

732
00:21:49,670 --> 00:21:51,170
0,480 480,570 570,840 840,1170 1170,1500
locks are really useful, too.|

733
00:21:52,780 --> 00:21:54,070
0,180 180,480 480,630 630,990 990,1290
Any questions about this, about

734
00:21:54,070 --> 00:21:55,180
0,360
{}

735
00:21:55,830 --> 00:21:57,330
0,210 210,690 690,840 840,1410 1410,1500
this perspective for locks,| you

736
00:21:57,330 --> 00:21:58,350
0,120 120,330 330,510 510,750 750,1020
know the {zookeeper -} locks

737
00:21:58,350 --> 00:21:59,370
0,30 30,210 210,720 720,930 930,1020
are not exactly like the

738
00:21:59,370 --> 00:22:00,930
0,600 600,900 960,1290 1290,1440 1440,1560
{Go,locks}| and it's just an

739
00:22:00,930 --> 00:22:01,890
0,330 330,450 450,690 690,870 870,960
important thing to keep in

740
00:22:01,890 --> 00:22:02,900
0,450
mind.|

741
00:22:03,760 --> 00:22:07,660
0,210 210,540 1080,1800 2100,3060 3090,3900
Oh.| Yeah, {go,ahead}, Alexander.| Yeah,

742
00:22:07,660 --> 00:22:09,010
0,480 480,600 600,720 720,1170 1170,1350
I had a question,| you

743
00:22:09,010 --> 00:22:10,210
0,270 270,570 570,840 840,1080 1080,1200
said that, {} one of

744
00:22:10,210 --> 00:22:12,100
0,120 120,930 930,1080 1080,1440 1440,1890
the differences is that, {}|

745
00:22:12,850 --> 00:22:15,800
0,840 840,1080 1080,1680 1680,2340
in {zlocks -}, the,

746
00:22:16,420 --> 00:22:18,480
0,270 270,510 510,1140
if, if the,

747
00:22:18,480 --> 00:22:19,680
0,150 150,300 300,690 690,1050 1050,1200
if the server holding the

748
00:22:19,680 --> 00:22:21,390
0,480 480,1050 1050,1260 1260,1380 1380,1710
lock dies,| then the lock

749
00:22:21,390 --> 00:22:24,140
0,270 270,780 810,1380 1410,2070
can be revoked,| but,

750
00:22:24,600 --> 00:22:25,860
0,360 360,510 510,780 780,1140 1140,1260
does that still happen if

751
00:22:25,860 --> 00:22:27,720
0,150 150,420 420,810 810,1440 1680,1860
you don't pass the,| because

752
00:22:27,720 --> 00:22:29,660
0,270 270,510 510,1350
there's that flag

753
00:22:30,400 --> 00:22:33,640
0,510 510,960 1110,1740 1740,2220 2250,3240
called {} EPHEMERAL.| EPHEMERAL,

754
00:22:33,700 --> 00:22:34,780
0,210 210,390 390,630 630,900 900,1080
yeah, it only happens with

755
00:22:34,780 --> 00:22:36,320
0,120 120,600 600,1020
the ephemeral file.|

756
00:22:36,350 --> 00:22:37,790
0,360 360,540 540,1020 1020,1170 1170,1440
Right, so can we just

757
00:22:37,790 --> 00:22:40,460
0,960 1140,1770 1770,1920 1920,2400 2400,2670
like emulate the {Go,locks} by

758
00:22:40,460 --> 00:22:44,460
0,330 330,840 840,990 990,1620
not passing {EPHEMERAL -}.|

759
00:22:46,570 --> 00:22:47,470
0,150 150,270 270,510 510,840 840,900
{Okay,good}, what would happen then,|

760
00:22:47,470 --> 00:22:49,040
0,480 480,1020
{you,create} {basically,a,persistent,file},|

761
00:22:49,040 --> 00:22:50,780
0,90 90,510 510,1200
the client dies.|

762
00:22:51,400 --> 00:22:53,080
0,180 180,390 390,570 570,1110
You said the lock?|

763
00:22:53,640 --> 00:22:54,630
0,150 150,270 270,360 360,600 600,990
And so the lock will

764
00:22:54,660 --> 00:22:56,880
0,210 210,330 330,1020 1260,1920 1920,2220
keep on existing and nobody

765
00:22:56,880 --> 00:22:58,300
0,150 150,450 450,690
will release it.|

766
00:22:58,450 --> 00:22:59,950
0,570 570,750 750,840 840,900 900,1500
And we have a deadlock.|

767
00:23:02,050 --> 00:23:03,310
0,570 600,690 690,900 900,1170 1170,1260
Because the one person that

768
00:23:03,310 --> 00:23:04,930
0,240 240,510 510,750 780,960 960,1620
could release it is dead

769
00:23:06,540 --> 00:23:07,920
0,150 150,810
or crushed.|

770
00:23:09,000 --> 00:23:09,720
0,270 270,330 330,510 510,660 660,720
And in fact, this is

771
00:23:09,720 --> 00:23:11,340
0,390 390,570 570,930 930,1230 1230,1620
why {EPHEMERAL -} parties there.|

772
00:23:13,350 --> 00:23:15,390
0,450 540,870 1050,1260 1260,1500 1530,2040
{} Is, is it actually

773
00:23:15,390 --> 00:23:16,740
0,180 180,780
the only,

774
00:23:17,100 --> 00:23:18,030
0,150 150,330 330,630 630,720 720,930
the only person who could

775
00:23:18,030 --> 00:23:19,290
0,270 270,420 420,690 690,1110 1110,1260
release it,| because anyone can

776
00:23:19,290 --> 00:23:21,030
0,330 330,510 510,810 810,1140 1560,1740
delete that file, right,| you

777
00:23:21,030 --> 00:23:23,520
0,180 180,870 870,1440 1440,1860 2190,2490
have a background, like.| That

778
00:23:23,520 --> 00:23:25,500
0,1110 1110,1560 1560,1620 1620,1740 1740,1980
will break, you know maybe

779
00:23:25,500 --> 00:23:26,370
0,150 150,300 300,570 570,630 630,870
the other client is still

780
00:23:26,370 --> 00:23:27,840
0,360 360,510 510,990 990,1260 1260,1470
running,| and also still thinks

781
00:23:27,840 --> 00:23:29,080
0,90 90,240 240,390 390,810
it holds a lock.|

782
00:23:32,370 --> 00:23:33,440
0,180 180,630
That's true.|

783
00:23:33,750 --> 00:23:34,740
0,180 180,510 510,690 690,750 750,990
{} You guys are getting

784
00:23:34,740 --> 00:23:36,480
0,210 210,450 450,1170 1170,1650 1650,1740
sort of, basically you're,| {this,is}

785
00:23:36,480 --> 00:23:38,070
0,480 480,840 840,990 990,1260 1260,1590
consensus problem all over again,

786
00:23:38,100 --> 00:23:39,200
0,300
right.|

787
00:23:39,350 --> 00:23:41,480
0,930 930,1410 1410,1470 1470,1680 1680,2130
{} And you know we,|

788
00:23:44,820 --> 00:23:45,630
0,330 330,480 480,570 570,720 720,810
so this is sort of

789
00:23:45,630 --> 00:23:46,740
0,210 210,510 510,840 840,960 960,1110
a clean way to get

790
00:23:46,740 --> 00:23:48,570
0,270 270,390 390,720 1020,1650 1650,1830
most of it,| but not

791
00:23:48,570 --> 00:23:49,860
0,210 210,300 300,540 960,1170 1170,1290
all of it, if you

792
00:23:49,860 --> 00:23:51,300
0,390 630,960 960,990 990,1200 1200,1440
will| and I think if

793
00:23:51,300 --> 00:23:51,900
0,90 90,210 210,270 270,420 420,600
you want to make things

794
00:23:51,900 --> 00:23:53,520
0,480 480,1050 1050,1110 1110,1440 1440,1620
atomic,| across a number of

795
00:23:53,520 --> 00:23:55,350
0,690 690,900 900,960 960,1230 1230,1830
a set of writes atomic,|

796
00:23:55,530 --> 00:23:56,460
0,90 90,240 240,630 630,810 810,930
so you basically use this

797
00:23:56,460 --> 00:23:59,160
0,510 780,1470 1500,2280
trick of {},|

798
00:23:59,460 --> 00:24:00,820
0,780

799
00:24:01,540 --> 00:24:02,980
0,330 330,450 450,720 720,1290 1290,1440
use this trick, basically {}

800
00:24:02,980 --> 00:24:03,880
0,120 120,390 390,630 630,840 840,900
the ready trick,| where you

801
00:24:03,880 --> 00:24:04,720
0,120 120,180 180,360 360,480 480,840
do a bunch of writes

802
00:24:04,720 --> 00:24:05,740
0,150 150,630 630,720 720,780 780,1020
and {expose,them} at the same

803
00:24:05,740 --> 00:24:06,620
0,330
time.|

804
00:24:10,640 --> 00:24:12,110
0,270 270,390 390,810 810,1050 1050,1470
Could you explain those soft

805
00:24:12,110 --> 00:24:13,640
0,390 390,990
locks again?|

806
00:24:13,640 --> 00:24:15,800
0,660 660,870 870,1200 1200,1560 1590,2160
{} Okay, soft locks means

807
00:24:15,800 --> 00:24:16,790
0,90 90,390 390,450 450,870 870,990
that basically an operation can

808
00:24:16,790 --> 00:24:18,020
0,210 210,720
happen twice.|

809
00:24:18,200 --> 00:24:19,550
0,720 720,1050 1050,1200 1200,1290 1290,1350
{} And so in the

810
00:24:19,550 --> 00:24:20,510
0,300 300,570 570,690 690,810 810,960
common case,| if there's no

811
00:24:20,510 --> 00:24:21,710
0,600 600,720 720,810 810,960 960,1200
crashes, you know {it,will} happen

812
00:24:21,710 --> 00:24:22,880
0,510 510,630 630,720 720,1050 1050,1170
once,| you know because they

813
00:24:22,880 --> 00:24:24,110
0,180 180,510 510,870 870,1020 1020,1230
are the client will take

814
00:24:24,110 --> 00:24:24,920
0,60 60,300 300,600 600,690 690,810
a lock out, will do

815
00:24:24,920 --> 00:24:26,660
0,90 90,660 660,1260
the operation release,|

816
00:24:26,720 --> 00:24:29,060
0,810 810,1560 1590,1890 1890,2160 2160,2340
{} and, {} but if

817
00:24:29,060 --> 00:24:31,010
0,240 240,540 540,1110 1170,1530 1530,1950
their client failed, {} halfway

818
00:24:31,010 --> 00:24:32,240
0,270 270,330 330,810 810,1140 1140,1230
through,| for example, then the

819
00:24:32,240 --> 00:24:33,590
0,240 240,390 390,480 480,1020 1020,1350
lock would be automatically released

820
00:24:33,590 --> 00:24:34,490
0,90 90,270 270,690 690,810 810,900
by {zookeeper -}| and then

821
00:24:34,490 --> 00:24:36,200
0,330 330,390 390,870 930,1440 1440,1710
maybe a second client who

822
00:24:36,200 --> 00:24:37,640
0,450 450,540 540,750 750,1020 1020,1440
execute the same map task.|

823
00:24:41,710 --> 00:24:42,430
0,180 180,270 270,360 360,600 600,720
So in the case of

824
00:24:42,430 --> 00:24:44,650
0,540 720,1290 1290,1710 1710,2130 2130,2220
leader election,| I, what's the

825
00:24:44,650 --> 00:24:46,450
0,420 420,780 780,1140 1170,1380 1380,1800
intermediate state could get exposed

826
00:24:46,450 --> 00:24:48,430
0,210 630,900 900,1170 1170,1680 1680,1980
here,| it seems that first.|

827
00:24:49,090 --> 00:24:50,800
0,480 480,780 810,1200 1200,1440 1440,1710
Okay, {} pure leader election

828
00:24:50,800 --> 00:24:51,760
0,90 90,240 240,330 330,510 510,960
there would be no intermediate

829
00:24:51,760 --> 00:24:53,020
0,330 330,450 450,840 840,960 960,1260
state,| but typically the leader

830
00:24:53,020 --> 00:24:54,520
0,180 180,510 510,570 570,1140 1140,1500
will create a configuration file

831
00:24:54,550 --> 00:24:55,900
0,390 540,810 810,930 930,1230 1230,1350
right,| as we saw in

832
00:24:55,900 --> 00:24:58,000
0,150 150,540 540,1320 1350,1800 1800,2100
{zookeeper -} where {you,know} using

833
00:24:58,000 --> 00:24:59,140
0,90 90,330 330,720
the ready trick.|

834
00:25:00,060 --> 00:25:01,050
0,120 120,390 450,600 600,780 780,990
I see, and so you

835
00:25:01,050 --> 00:25:02,040
0,270 270,480 480,540 540,720 720,990
just write the whole file,|

836
00:25:02,040 --> 00:25:03,960
0,120 120,300 300,660 690,1320 1350,1920
and then {convert,it} atomic, {use,name}.|

837
00:25:03,960 --> 00:25:05,660
0,750
Yep.|

838
00:25:06,870 --> 00:25:09,780
0,300 300,510 510,1140 1380,2400 2490,2910
Sorry, could you explain what

839
00:25:09,780 --> 00:25:12,240
0,120 120,330 330,930 930,1680 1860,2460
the ready trick is, exactly.|

840
00:25:13,830 --> 00:25:14,640
0,270 270,360 360,540 540,600 600,810
{I,was,hoping}, I think we talked

841
00:25:14,640 --> 00:25:17,010
0,180 180,420 420,660 1020,1590 1650,2370
about last time.| Sorry. {}|

842
00:25:17,010 --> 00:25:19,650
0,390 630,1290 1320,1740 1740,2490 2520,2640
So so maybe we, {you,can}

843
00:25:19,650 --> 00:25:20,640
0,180 180,270 270,660 660,900 900,990
hold that question,| well I'm

844
00:25:20,640 --> 00:25:21,270
0,240 240,330 330,420 420,540 540,630
happy to do it at

845
00:25:21,270 --> 00:25:21,900
0,90 90,270 270,330 330,390 390,630
the end of the lecture

846
00:25:21,900 --> 00:25:22,660
0,330
again.|

847
00:25:25,980 --> 00:25:27,540
0,510 510,810 810,1080 1110,1320 1320,1560
Because otherwise I have little

848
00:25:27,540 --> 00:25:28,890
0,180 180,300 300,480 480,690 690,1350
time to actually talk about

849
00:25:28,890 --> 00:25:30,220
0,210 210,750
chain replication.|

850
00:25:35,560 --> 00:25:37,870
0,150 150,570 570,840 840,1440 1470,2310
Any other [last minute] questions?|

851
00:25:40,290 --> 00:25:42,480
0,540 630,960 960,1050 1050,1290 1290,2190
Okay, let me set the

852
00:25:42,480 --> 00:25:43,920
0,420 420,630 630,900 900,1380 1380,1440
states where chain replication a

853
00:25:43,920 --> 00:25:45,240
0,240 240,630 630,1080 1080,1230 1230,1320
little bit| and it will

854
00:25:45,240 --> 00:25:46,230
0,180 180,300 300,600 600,780 780,990
also come back to {zookeeper

855
00:25:46,230 --> 00:25:47,910
0,270 270,360 360,540 540,1050 1230,1680
-} in some sense {}|

856
00:25:47,910 --> 00:25:50,340
0,570 660,1410 1410,1710 1710,2160 2190,2430
and basically turns out there's

857
00:25:50,340 --> 00:25:52,080
0,120 120,240 240,660 660,1110 1110,1740
sort of two common approaches

858
00:25:52,080 --> 00:25:54,030
0,390 390,690 690,1110 1110,1350 1350,1950
to build replicated state machines|

859
00:25:54,330 --> 00:25:55,620
0,240 240,360 360,690 690,930 930,1290
and we really haven't called

860
00:25:55,620 --> 00:25:57,180
0,240 240,420 420,570 570,1110 1230,1560
out these two approaches| and

861
00:25:57,180 --> 00:25:58,290
0,330 330,570 570,840 840,990 990,1110
we've seen them,| but I

862
00:25:58,290 --> 00:25:59,700
0,300 300,540 540,1050 1050,1260 1260,1410
really talked explicitly about them,|

863
00:25:59,700 --> 00:26:00,360
0,60 60,240 240,300 300,390 390,660
I want to do this,

864
00:26:00,360 --> 00:26:01,960
0,330 330,510 510,1110
this time explicitly.|

865
00:26:01,960 --> 00:26:03,080
0,570
So.|

866
00:26:05,790 --> 00:26:07,260
0,270 270,420 420,570 570,900 900,1470
Because there's some interesting observations

867
00:26:07,260 --> 00:26:09,750
0,90 90,210 210,600 1380,2250 2250,2490
to be made approaches to

868
00:26:09,750 --> 00:26:13,480
0,330 330,780 780,960 960,1530
building replicated state machines.|

869
00:26:14,550 --> 00:26:17,640
0,630 810,1020 1020,1320 1320,1860 2160,3090
And the first one is

870
00:26:17,700 --> 00:26:19,050
0,330 330,540 540,840 840,990 990,1350
{} the one we've basically

871
00:26:19,050 --> 00:26:20,520
0,300 300,390 390,990 1050,1350 1350,1470
seen the labs,| which is

872
00:26:20,520 --> 00:26:23,500
0,570 600,960 960,1920
{you,run} all operations

873
00:26:25,260 --> 00:26:27,140
0,180 180,300 300,660 660,1350
you know through raft,|

874
00:26:30,330 --> 00:26:31,530
0,480 480,570 570,720 720,1020 1020,1200
raft, {zookeeper - - -}

875
00:26:31,530 --> 00:26:32,970
0,450 450,660 660,780 780,1020 1020,1440
raft or you know paxos

876
00:26:32,970 --> 00:26:34,780
0,570 570,960
whatever {you,know}

877
00:26:34,840 --> 00:26:36,400
0,390 390,780 780,870 870,1140 1140,1560
{consensus -},| you know the

878
00:26:36,400 --> 00:26:38,860
0,360 360,780 780,990 990,1440 1950,2460
consensus algorithm you're using| and

879
00:26:38,860 --> 00:26:39,460
0,90 90,270 270,360 360,480 480,600
so this is sort of

880
00:26:39,460 --> 00:26:40,540
0,150 150,210 210,360 360,690 690,1080
like the key value store,

881
00:26:40,570 --> 00:26:43,330
0,900 930,1260 1260,1770 1770,2280 2310,2760
right,| {} {in,lab,3} where you

882
00:26:43,330 --> 00:26:44,920
0,450 450,690 690,1260 1260,1380 1380,1590
put get operations you run

883
00:26:44,920 --> 00:26:46,330
0,300 300,510 510,690 690,1200 1200,1410
older put get operations through

884
00:26:46,330 --> 00:26:48,360
0,690 840,1530
raft| and

885
00:26:48,450 --> 00:26:49,740
0,180 180,330 330,480 480,930 930,1290
you know the servers basically

886
00:26:49,740 --> 00:26:50,850
0,510 510,570 570,690 690,960 960,1110
update you know the key

887
00:26:50,850 --> 00:26:52,530
0,330 330,600 600,1050 1050,1290 1290,1680
value store state as the

888
00:26:52,800 --> 00:26:54,510
0,990 990,1080 1080,1290 1290,1500 1500,1710
operations are coming in on

889
00:26:54,510 --> 00:26:55,940
0,90 90,390 390,900
the apply channel.|

890
00:26:56,060 --> 00:26:58,160
0,660 750,1680 1680,1830 1830,2010 2010,2100
And, {} you know, and

891
00:26:58,160 --> 00:26:59,690
0,420 420,600 600,900 900,1140 1140,1530
basically we have our replicated

892
00:26:59,690 --> 00:27:01,880
0,450 1020,1500 1500,1650 1650,1740 1740,2190
states,| so this is how

893
00:27:01,880 --> 00:27:04,100
0,330 330,480 480,1110
lab 3 works.|

894
00:27:05,960 --> 00:27:07,160
0,210 210,450 450,690 690,840 840,1200
{} It turns out that

895
00:27:07,160 --> 00:27:09,710
0,960 960,1500 1500,1920 1920,2430 2430,2550
style,| where basically raft is

896
00:27:09,710 --> 00:27:11,630
0,390 390,510 510,1050 1080,1770 1770,1920
used to also run all

897
00:27:11,630 --> 00:27:12,950
0,120 120,690 690,780 780,1020 1020,1320
the operations is actually not

898
00:27:12,950 --> 00:27:14,600
0,240 240,600 1080,1350 1350,1500 1500,1650
that common,| {} we'll see

899
00:27:14,600 --> 00:27:15,650
0,150 150,360 360,780 780,990 990,1050
some other designs later in

900
00:27:15,650 --> 00:27:16,550
0,60 60,480 480,570 570,690 690,900
the semester to do that

901
00:27:16,550 --> 00:27:17,930
0,180 180,420 480,900 900,1110 1110,1380
too,| like spanner does it,|

902
00:27:18,200 --> 00:27:19,430
0,360 360,510 510,690 690,930 930,1230
{} but it's not actually

903
00:27:19,430 --> 00:27:21,620
0,840 840,990 990,1380 1380,1950 1950,2190
completely the standard approach| or

904
00:27:21,620 --> 00:27:23,060
0,180 180,390 390,750 750,1110 1110,1440
{} more common approach actually

905
00:27:23,060 --> 00:27:25,250
0,180 180,540 750,1290 1290,1590 1590,2190
is to have a configuration

906
00:27:25,250 --> 00:27:27,580
0,540 570,930 960,1230 1230,1740
server, like {zookeeper -}

907
00:27:33,750 --> 00:27:36,030
0,720 1110,1290 1290,1440 1440,1950 1950,2280
servers| and the configuration servers

908
00:27:36,030 --> 00:27:38,430
0,450 450,1080 1080,1290 1290,1710 1710,2400
itself internally might use paxos

909
00:27:38,430 --> 00:27:42,240
0,510 510,1140 1290,3210 3210,3420 3420,3810
raft or {} or ZAB

910
00:27:42,240 --> 00:27:44,730
0,90 90,690 990,1650 1680,1980 1980,2490
or whatever| and really in

911
00:27:44,730 --> 00:27:46,500
0,150 150,420 420,660 660,1410 1410,1770
the {configuration -} servers really

912
00:27:46,500 --> 00:27:48,450
0,300 300,390 390,900 900,1020 1020,1950
plays the role of the

913
00:27:48,510 --> 00:27:50,460
0,810 810,870 870,960 960,1500 1500,1950
coordinator or the master,| like

914
00:27:50,460 --> 00:27:53,460
0,90 90,630 630,1110 1680,2430 2820,3000
the GFS master,| and in

915
00:27:53,460 --> 00:27:55,380
0,540 540,720 720,1050 1050,1350 1350,1920
addition to basically having configuration

916
00:27:55,380 --> 00:27:58,410
0,540 540,750 750,1470 1710,2370 2370,3030
servers actually implemented,| {} using

917
00:27:58,410 --> 00:28:00,330
0,510 510,600 600,930 930,1620 1620,1920
one of these raft paxos

918
00:28:00,330 --> 00:28:02,190
0,720 900,1170 1170,1320 1320,1530 1530,1860
algorithms,| { -} you actually

919
00:28:02,190 --> 00:28:04,680
0,570 1080,1170 1170,1530 1530,1920 1950,2490
run a primary backup replication.|

920
00:28:12,680 --> 00:28:14,060
0,240 240,390 390,720 720,900 900,1380
And so we think about

921
00:28:14,090 --> 00:28:16,190
0,1110 1140,1260 1260,1800 1800,1920 1920,2100
GFS you know we saw

922
00:28:16,190 --> 00:28:17,570
0,300 300,360 360,420 420,1050 1110,1380
early in the semester has

923
00:28:17,570 --> 00:28:18,830
0,120 120,300 300,360 360,1080 1080,1260
that sort of structure,| {like,in}

924
00:28:18,830 --> 00:28:20,270
0,120 120,540 540,750 750,810 810,1440
the GFS was a master|

925
00:28:20,480 --> 00:28:22,730
0,210 210,360 360,720 720,1590 1590,2250
and that basically determines which

926
00:28:22,730 --> 00:28:23,870
0,210 210,300 300,720 720,1110 1110,1140
set of servers hold a

927
00:28:23,870 --> 00:28:26,090
0,420 420,900 1200,1410 1410,1770 1770,2220
particular chunk,| so basically determined

928
00:28:26,090 --> 00:28:27,440
0,90 90,510 510,1050 1050,1260 1260,1350
the replica group for a

929
00:28:27,440 --> 00:28:29,570
0,420 810,1050 1050,1500 1560,1680 1680,2130
chunk| and then the replica

930
00:28:29,570 --> 00:28:31,790
0,990 990,1380 1380,1680 1680,2130 2130,2220
chunk group basically executed the

931
00:28:31,790 --> 00:28:33,530
0,300 300,660 660,1230 1380,1620 1620,1740
primary backup replication,| one of

932
00:28:33,530 --> 00:28:35,210
0,270 270,570 570,720 720,1050 1080,1680
the chunks was the primary|

933
00:28:35,330 --> 00:28:36,020
0,150 150,210 210,360 360,570 570,690
and the other ones were

934
00:28:36,020 --> 00:28:37,490
0,90 90,720 720,990 990,1170 1170,1470
the backups| and they basically

935
00:28:37,490 --> 00:28:38,600
0,120 120,180 180,750 750,930 930,1110
had a protocol that they

936
00:28:38,600 --> 00:28:40,100
0,210 210,330 330,630 630,960 960,1500
use for primary backup replication.|

937
00:28:41,140 --> 00:28:42,130
0,180 180,270 270,450 450,660 660,990
You can think about {VM-FT

938
00:28:42,130 --> 00:28:43,900
0,630 630,720 720,780 780,1350 1350,1770
-} in a similar style,|

939
00:28:43,900 --> 00:28:45,460
0,300 300,810 810,1140 1140,1230 1230,1560
where configuration server is basically

940
00:28:45,460 --> 00:28:47,140
0,330 330,540 540,1050 1140,1410 1410,1680
{test,and} set server,| which basically

941
00:28:47,140 --> 00:28:48,430
0,480 480,720 720,900 900,1170 1170,1290
recorded who was actually the

942
00:28:48,430 --> 00:28:50,020
0,570 840,990 990,1110 1110,1200 1200,1590
primary| and then the primary

943
00:28:50,020 --> 00:28:51,490
0,480 480,720 720,840 840,1230 1230,1470
backup have a protocol| to

944
00:28:51,490 --> 00:28:53,560
0,510 510,930 930,1140 1140,1590 1590,2070
basically send {you,know} channel operation

945
00:28:53,560 --> 00:28:54,820
0,180 180,270 270,810 990,1140 1140,1260
down to channel| and so

946
00:28:54,820 --> 00:28:57,670
0,540 780,1110 1110,1500 1500,1830 1890,2850
the primary backup is roughly

947
00:28:57,670 --> 00:28:59,530
0,120 120,510 540,870 870,1440 1440,1860
in sync| and implement a

948
00:28:59,740 --> 00:29:01,800
0,720 720,1110 1110,1290 1290,1620
{} replicated state machine.|

949
00:29:02,540 --> 00:29:04,310
0,300 300,780 780,1320 1320,1710 1710,1770
And this approach tends to

950
00:29:04,310 --> 00:29:05,270
0,150 150,390 390,420 420,660 660,960
be served a more common

951
00:29:05,270 --> 00:29:07,240
0,660
approach,|

952
00:29:10,230 --> 00:29:12,480
0,750 750,1290 1290,1800 1830,2100 2100,2250
{} although the approach number

953
00:29:12,480 --> 00:29:15,480
0,240 240,570 570,1200 1770,2370 2430,3000
one also happens,| {} one

954
00:29:15,480 --> 00:29:16,500
0,240 240,360 360,510 510,750 750,1020
one way to think about

955
00:29:16,500 --> 00:29:18,090
0,450 450,570 570,990 990,1380 1380,1590
this,| {} is that you

956
00:29:18,090 --> 00:29:19,300
0,570
know

957
00:29:19,750 --> 00:29:21,430
0,570 600,810 810,1110 1110,1500 1500,1680
if the raft states,| like

958
00:29:21,430 --> 00:29:22,450
0,60 60,360 360,450 450,600 600,1020
for example our key value

959
00:29:22,450 --> 00:29:24,100
0,240 240,660 660,810 810,960 960,1650
{} servers would be gigantic,|

960
00:29:24,100 --> 00:29:25,570
0,90 90,540 540,900 960,1260 1260,1470
you know {have,a} huge amount

961
00:29:25,570 --> 00:29:26,680
0,90 90,270 270,690 720,840 840,1110
of this state,| you know

962
00:29:26,710 --> 00:29:28,510
0,750 780,900 900,1110 1110,1380 1380,1800
terabytes of key value server,|

963
00:29:28,810 --> 00:29:30,400
0,360 360,720 720,990 990,1290 1290,1590
would raft be very good

964
00:29:30,400 --> 00:29:31,360
0,420 420,600 600,720 720,870 870,960
match for that kind of

965
00:29:31,360 --> 00:29:32,600
0,750
application,|

966
00:29:34,740 --> 00:29:35,940
0,210 210,390 390,480 480,600 600,1200
or what is the risk,|

967
00:29:38,610 --> 00:29:40,480
0,210 210,270 270,660 660,1290
or the potential problem.|

968
00:29:47,380 --> 00:29:49,570
0,360 360,870 870,1290 1290,1650 1710,2190
{} We flush the log

969
00:29:49,570 --> 00:29:51,620
0,360 360,900 900,1470
very often,| so

970
00:29:51,680 --> 00:29:53,360
0,300 300,510 510,600 600,720 720,1680
maybe that could be problematic.|

971
00:29:53,750 --> 00:29:56,120
0,240 240,330 330,1140 1140,2160 2160,2370
Could be problematic, what how

972
00:29:56,120 --> 00:29:57,320
0,570 570,750 750,1050 1050,1110 1110,1200
what's the size of the

973
00:29:57,320 --> 00:29:58,460
0,600
checkpoint,|

974
00:29:59,740 --> 00:30:01,420
0,330 330,810 840,1050 1050,1560 1560,1680
if our key {value,server} is

975
00:30:01,420 --> 00:30:02,640
0,240 240,660
really big.|

976
00:30:04,930 --> 00:30:06,370
0,270 270,780 780,990 990,1050 1050,1440
It's linear in the size

977
00:30:06,370 --> 00:30:07,720
0,120 120,270 270,900 900,1080 1080,1350
of the {key,values} {}.| Yeah,

978
00:30:07,720 --> 00:30:08,800
0,150 240,300 300,690 690,900 900,1080
so that could also be

979
00:30:08,800 --> 00:30:10,780
0,750 840,1020 1020,1200 1200,1830 1860,1980
gigantic,| so at any you

980
00:30:10,780 --> 00:30:12,040
0,270 270,540 540,750 750,870 870,1260
know any time the checkpoint

981
00:30:12,040 --> 00:30:12,910
0,150 150,240 240,330 330,750 780,870
has to be sent,| you

982
00:30:12,910 --> 00:30:13,420
0,150 150,240 240,360 360,420 420,510
know it's going to be

983
00:30:13,420 --> 00:30:14,780
0,60 60,270 270,900
a big checkpoint.|

984
00:30:14,900 --> 00:30:16,040
0,390 390,510 510,690 690,1050 1050,1140
And so the raft it's

985
00:30:16,040 --> 00:30:16,820
0,210 210,360 360,510 510,570 570,780
not really sort of set

986
00:30:16,820 --> 00:30:19,610
0,330 330,450 450,1470 1470,2160 2580,2790
up,| you know, {} so

987
00:30:19,610 --> 00:30:20,270
0,120 120,420 420,480 480,600 600,660
the primary is going to

988
00:30:20,270 --> 00:30:21,230
0,510 510,600 600,750 750,840 840,960
communicate,| you know the new

989
00:30:21,230 --> 00:30:23,510
0,330 330,960 960,1560 1560,2040 2040,2280
{primary,is,going,to} communicate these snapshots| you

990
00:30:23,510 --> 00:30:24,530
0,150 150,240 240,510 510,630 630,1020
did in lab {2d -}

991
00:30:24,530 --> 00:30:25,400
0,60 60,240 240,540 540,810 810,870
you know to the the

992
00:30:25,400 --> 00:30:27,020
0,510 510,1020 1020,1170 1170,1260 1260,1620
backups,| they're gonna be big.|

993
00:30:27,760 --> 00:30:29,440
0,360 360,780 930,1230 1230,1500 1500,1680
And so you often want

994
00:30:29,440 --> 00:30:30,040
0,180 180,300 300,330 330,480 480,600
to be a little bit

995
00:30:30,040 --> 00:30:32,560
0,180 180,540 540,1170 1350,1770 1770,2520
more clever plan| to synchronize

996
00:30:32,560 --> 00:30:34,840
0,180 180,420 420,1230 1260,1710 1710,2280
and {re-synchronize -} new servers|

997
00:30:35,020 --> 00:30:37,510
0,570 750,1320 1320,1890 1890,2070 2070,2490
and {} so and one

998
00:30:37,510 --> 00:30:38,830
0,300 300,420 420,840 840,1170 1170,1320
reason that basically often these

999
00:30:38,830 --> 00:30:40,150
0,210 210,300 300,720 720,1140 1140,1320
things are split into two

1000
00:30:40,150 --> 00:30:41,980
0,270 270,690 690,1230 1230,1290 1290,1830
different pieces| where the configuration

1001
00:30:41,980 --> 00:30:43,810
0,480 480,630 630,1020 1020,1530 1530,1830
servers that basically small {in,terms,of}

1002
00:30:43,810 --> 00:30:45,640
0,480 780,930 930,1290 1290,1470 1470,1830
state| and then {you,know} primary

1003
00:30:45,640 --> 00:30:48,430
0,390 390,930 930,1680 1680,2130 2160,2790
backup plan actually may replicate

1004
00:30:48,430 --> 00:30:49,900
0,420 420,660 660,720 720,1020
huge amount of data.|

1005
00:30:50,390 --> 00:30:51,530
0,270 270,630 720,870 870,930 930,1140
And so this is why,

1006
00:30:51,530 --> 00:30:52,580
0,360 360,660 660,750 750,930 930,1050
one reason you see sort

1007
00:30:52,580 --> 00:30:54,020
0,60 60,240 240,930
of both approaches.|

1008
00:30:54,920 --> 00:30:56,180
0,120 120,210 210,330 330,720
Does that make sense?|

1009
00:30:57,620 --> 00:30:58,490
0,240 240,360 360,570 570,630 630,870
I'll come back to that

1010
00:30:58,490 --> 00:30:58,970
0,60 60,180 180,300 300,390 390,480
at the end of the

1011
00:30:58,970 --> 00:31:00,650
0,300 300,660 720,1380 1380,1530 1530,1680
lecture again,| {} but it's

1012
00:31:00,650 --> 00:31:01,820
0,360 360,420 420,540 540,690 690,1170
important to keep this {in,mind}.|

1013
00:31:02,470 --> 00:31:04,510
0,540 540,780 1110,1260 1260,1470 1470,2040
So {what,approach} or what benefits

1014
00:31:04,510 --> 00:31:06,130
0,300 300,690 690,930 930,1170 1170,1620
does 1 give over 2.|

1015
00:31:07,360 --> 00:31:08,530
0,540 540,750 750,960 960,1110 1110,1170
{} You don't have to

1016
00:31:08,530 --> 00:31:10,150
0,240 240,450 450,540 540,870 1200,1620
have two of them, right,|

1017
00:31:10,150 --> 00:31:11,740
0,240 240,750 750,900 900,1260 1260,1590
in one you basically have

1018
00:31:11,740 --> 00:31:13,060
0,420 420,540 540,720 720,810 810,1320
raft,| you run the operations

1019
00:31:13,060 --> 00:31:14,260
0,180 180,690 690,780 780,990 990,1200
for [] and then does

1020
00:31:14,260 --> 00:31:16,180
0,90 90,600 600,750 750,1260 1620,1920
the configuration for {you,too},| so

1021
00:31:16,180 --> 00:31:17,500
0,360 360,510 510,600 600,660 660,1320
everything is in a single,

1022
00:31:18,550 --> 00:31:21,400
0,420 420,900 1770,2100 2100,2670 2670,2850
single component,| and here in

1023
00:31:21,400 --> 00:31:22,090
0,210 210,360 360,480 480,570 570,690
number two, we have two

1024
00:31:22,090 --> 00:31:23,530
0,600 600,690 690,810 810,930 930,1440
components,| you know we have

1025
00:31:23,530 --> 00:31:25,000
0,120 120,570 570,960 960,1110 1110,1470
a configuration service, that includes

1026
00:31:25,000 --> 00:31:26,710
0,600 690,1110 1110,1230 1230,1620 1620,1710
raft| and we have a

1027
00:31:26,710 --> 00:31:28,940
0,270 270,570 570,1110
primary backup scheme.|

1028
00:31:30,400 --> 00:31:31,840
0,120 120,300 300,390 390,930 1110,1440
So maybe this will become

1029
00:31:31,840 --> 00:31:32,860
0,120 120,450 450,570 570,780 780,1020
more clear, as we talk

1030
00:31:32,860 --> 00:31:34,400
0,210 210,420 420,960
about chain replication.|

1031
00:31:36,480 --> 00:31:38,280
0,480 840,990 990,1320 1320,1560 1560,1800
{} Yeah.| I had a

1032
00:31:38,280 --> 00:31:39,810
0,150 150,330 330,870 900,1230 1230,1530
really quick question,| so I

1033
00:31:39,840 --> 00:31:41,730
0,510 510,750 750,1230 1560,1710 1710,1890
especially for two,| I guess

1034
00:31:41,730 --> 00:31:43,470
0,300 510,750 750,1110 1110,1230 1230,1740
would like what the advantage

1035
00:31:43,470 --> 00:31:45,270
0,180 180,270 270,420 420,870 1410,1800
being that you have like,|

1036
00:31:45,270 --> 00:31:46,740
0,240 240,810 810,1170 1170,1320 1320,1470
if consensus reached through the

1037
00:31:46,740 --> 00:31:48,270
0,510 630,810 810,900 900,1140 1140,1530
leader| and the leader never

1038
00:31:48,270 --> 00:31:49,800
0,420 420,720 720,1050
fails, right, like.|

1039
00:31:50,220 --> 00:31:51,390
0,360 360,540 540,750 750,1050 1050,1170
Yeah, so the advantage of

1040
00:31:51,390 --> 00:31:52,350
0,270 270,480 480,720 720,840 840,960
two is that,| as we

1041
00:31:52,350 --> 00:31:53,460
0,150 150,270 270,660 660,840 840,1110
see in second in chain

1042
00:31:53,460 --> 00:31:55,470
0,690 840,1260 1260,1470 1470,1650 1650,2010
replication| is there's a separate

1043
00:31:55,470 --> 00:31:56,670
0,360 360,570 600,870 870,1110 1110,1200
process that takes care of

1044
00:31:56,670 --> 00:31:58,500
0,90 90,750 750,1170 1200,1710 1710,1830
the configuration part| and you

1045
00:31:58,500 --> 00:31:59,580
0,300 300,420 420,540 540,780 780,1080
don't have to worry about

1046
00:31:59,580 --> 00:32:00,570
0,120 120,360 360,480 480,690 690,990
in terms of your primary

1047
00:32:00,570 --> 00:32:02,200
0,330 330,780 780,1140
backup replication scheme.|

1048
00:32:02,600 --> 00:32:04,520
0,360 360,780 780,1170 1170,1410 1410,1920
{} And that just decides

1049
00:32:04,520 --> 00:32:05,600
0,270 270,750 750,900 900,1020 1020,1080
like GFS,| that's sort of

1050
00:32:05,600 --> 00:32:06,650
0,150 150,210 210,690 690,900 900,1050
like the master, it just

1051
00:32:06,650 --> 00:32:07,520
0,420 420,510 510,600 600,810 810,870
decides for a couple of

1052
00:32:07,520 --> 00:32:08,150
0,240 240,300 300,450 450,570 570,630
here,| set up have the

1053
00:32:08,150 --> 00:32:09,470
0,360 360,540 540,810 810,930 930,1320
servers to form this particular

1054
00:32:09,470 --> 00:32:10,560
0,330 330,630
replica group.|

1055
00:32:10,620 --> 00:32:13,500
0,630 660,1290 1290,1620 1620,2490 2490,2880
And backup primary backup protocol

1056
00:32:13,500 --> 00:32:14,280
0,210 210,330 330,420 420,570 570,780
doesn't have to think about

1057
00:32:14,280 --> 00:32:15,200
0,330
this.|

1058
00:32:16,240 --> 00:32:17,220
0,450
Thanks.|

1059
00:32:17,370 --> 00:32:18,780
0,240 240,870 960,1200 1200,1350 1350,1410
And so this is a

1060
00:32:18,780 --> 00:32:20,310
0,150 150,690 690,1080 1080,1260 1290,1530
good introduction to {} chain

1061
00:32:20,310 --> 00:32:21,930
0,480 480,780 780,870 870,1110 1110,1620
replication,| because the chain replication

1062
00:32:21,930 --> 00:32:23,400
0,90 90,840 1020,1260 1260,1410 1410,1470
is exactly that sort of

1063
00:32:23,400 --> 00:32:27,330
0,120 120,810 930,1710 2190,3330 3330,3930
a primary backup replication scheme

1064
00:32:29,010 --> 00:32:31,300
0,330 330,660 660,1020
for approach two.|

1065
00:32:35,650 --> 00:32:36,490
0,120 120,240 240,360 360,480 480,840
And that is to say

1066
00:32:36,490 --> 00:32:37,780
0,240 240,360 360,660 660,1050 1050,1290
that you know {} chain

1067
00:32:37,780 --> 00:32:40,780
0,510 510,1200 1230,1410 1410,1650 1650,3000
replication issues,| there is a

1068
00:32:40,780 --> 00:32:43,090
0,630 630,1200 1650,2040 2040,2160 2160,2310
configuration servers,| {} then I

1069
00:32:43,090 --> 00:32:44,080
0,150 150,240 240,510 510,630 630,990
think they called the master

1070
00:32:44,080 --> 00:32:45,500
0,450 450,930
{process,in} paper.|

1071
00:32:45,880 --> 00:32:47,950
0,570 660,1230 1230,1470 1470,1890 1890,2070
{} Then chain replication themselves,

1072
00:32:47,950 --> 00:32:49,330
0,180 180,210 210,870 870,990 990,1380
there's a couple of cool

1073
00:32:49,330 --> 00:32:50,580
0,720
properties,|

1074
00:32:50,580 --> 00:32:53,840
0,330 330,990 1110,1440 1440,2310
{} one read operations,

1075
00:32:53,840 --> 00:32:54,740
0,210 210,330 330,510 510,720 720,900
or as they call them

1076
00:32:54,740 --> 00:32:58,100
0,330 330,1170 2400,2850 2850,3150 3150,3360
query operations involve only one

1077
00:32:58,100 --> 00:32:59,940
0,570
server,|

1078
00:33:01,430 --> 00:33:03,950
0,600 600,1170 1380,1680 1680,2040 2070,2520
namely {the,tail} as we've seen

1079
00:33:03,950 --> 00:33:05,120
0,60 60,540
{in,a} second.|

1080
00:33:05,120 --> 00:33:06,640
0,810

1081
00:33:07,120 --> 00:33:09,070
0,420 420,900 900,1260 1260,1740 1740,1950
Another nice property about chain

1082
00:33:09,070 --> 00:33:10,180
0,450 450,570 570,750 750,840 840,1110
replication that has a very

1083
00:33:10,180 --> 00:33:12,440
0,600 600,1080 1080,1440
simple recovery plan.|

1084
00:33:13,510 --> 00:33:14,290
0,240 240,360 360,420 420,570 570,780
I'm going to talk about

1085
00:33:14,290 --> 00:33:14,950
0,150 150,240 240,420 420,510 510,660
all of these in more

1086
00:33:14,950 --> 00:33:17,300
0,420 420,480 480,570 570,990
detail in the second.|

1087
00:33:18,910 --> 00:33:20,350
0,600 690,870 870,1050 1050,1320 1320,1440
And there's only something that

1088
00:33:20,350 --> 00:33:22,660
0,210 210,690 870,1470 1590,2160 2160,2310
you started,| have you you

1089
00:33:22,660 --> 00:33:24,250
0,540 540,750 750,810 810,1230 1230,1590
appreciate given the fact| how

1090
00:33:24,250 --> 00:33:25,780
0,570 570,660 660,870 870,960 960,1530
complicated can be in raft,|

1091
00:33:26,230 --> 00:33:28,060
0,480 480,990 990,1230 1230,1590 1590,1830
{} and it provides actually

1092
00:33:28,060 --> 00:33:32,920
0,720 2340,3600 3600,4170 4170,4650 4650,4860
strong strong properties, namely {linearizability

1093
00:33:32,920 --> 00:33:34,100
0,690
-},|

1094
00:33:34,550 --> 00:33:35,210
0,240 240,360 360,540 540,600 600,660
if we put in the

1095
00:33:35,210 --> 00:33:37,790
0,210 210,930 1440,1770 1770,2310 2310,2580
get operations| and finally just

1096
00:33:37,790 --> 00:33:38,960
0,180 180,330 330,390 390,600 600,1170
a lot of people ask,|

1097
00:33:38,960 --> 00:33:40,640
0,210 210,480 480,540 540,1050 1050,1680
there's actually a reasonable influential

1098
00:33:40,640 --> 00:33:41,760
0,540
design,|

1099
00:33:43,020 --> 00:33:44,190
0,450 450,780 780,900 900,1140 1140,1170
and used by quite a

1100
00:33:44,190 --> 00:33:46,440
0,240 240,330 330,990
number of systems,|

1101
00:33:46,640 --> 00:33:47,870
0,330 330,630 630,810 810,1020 1020,1230
{} so these are used

1102
00:33:47,870 --> 00:33:49,080
0,90 90,660
in practice.|

1103
00:33:50,080 --> 00:33:51,130
0,330 330,600 600,840 840,900 900,1050
This is going to talk

1104
00:33:51,130 --> 00:33:52,210
0,210 210,330 330,420 420,570 570,1080
about each of these components|

1105
00:33:52,210 --> 00:33:53,470
0,90 90,270 270,450 450,630 630,1260
and we'll get more detail|

1106
00:33:53,710 --> 00:33:55,120
0,480 480,810 810,930 930,1050 1050,1410
and then we'll come back

1107
00:33:55,120 --> 00:33:55,960
0,180 180,330 330,510 510,570 570,840
to this sort of approach

1108
00:33:55,960 --> 00:33:57,760
0,240 240,570 570,930 930,1260
one versus approach two.|

1109
00:34:00,250 --> 00:34:01,300
0,360 360,660 660,780 780,990 990,1050
{} So in terms of

1110
00:34:01,300 --> 00:34:02,720
0,60 60,750
an overview,|

1111
00:34:07,060 --> 00:34:09,880
0,450 570,1320 1740,2040 2040,2130 2130,2820
oops, {} there's an overview,|

1112
00:34:10,210 --> 00:34:11,800
0,570 720,1110 1110,1260 1260,1320 1320,1590
{} new sort of [delay]

1113
00:34:11,800 --> 00:34:12,700
0,90 90,180 180,660 690,810 810,900
of the land, you know

1114
00:34:12,700 --> 00:34:15,370
0,180 180,360 360,810 1170,1860 1860,2670
there is a massive process

1115
00:34:17,550 --> 00:34:20,240
0,420 420,960 960,1680
{or,a} configuration service.|

1116
00:34:23,820 --> 00:34:25,200
0,120 120,360 360,660 660,780 780,1380
And then basically keep track

1117
00:34:25,230 --> 00:34:26,640
0,90 90,300 300,840 840,1260 1260,1410
you know which server is

1118
00:34:26,640 --> 00:34:28,140
0,150 150,240 240,840 1050,1410 1410,1500
going to belong to a

1119
00:34:28,140 --> 00:34:30,320
0,870 870,1500
particular change.|

1120
00:34:30,320 --> 00:34:32,120
0,420 450,660 660,1110 1110,1350 1350,1800
So {S1 -} {S2 -}

1121
00:34:32,120 --> 00:34:33,380
0,180 180,540 540,750 750,1140 1140,1260
{S3 -} {you,know} basically have

1122
00:34:33,380 --> 00:34:34,100
0,30 30,420 420,480 480,630 630,720
a record of what the

1123
00:34:34,100 --> 00:34:36,140
0,750 870,1170 1170,1620 1620,1860 1860,2040
{chain,is},| who the head is

1124
00:34:36,140 --> 00:34:37,430
0,90 90,270 270,360 360,990 1020,1290
and who the {tail,is}| and

1125
00:34:37,430 --> 00:34:38,990
0,480 870,1110 1110,1320 1320,1380 1380,1560
so that could be configuration

1126
00:34:38,990 --> 00:34:40,490
0,450 450,750 750,1200 1200,1350 1350,1500
servers| and here we do

1127
00:34:40,490 --> 00:34:41,750
0,240 240,510 510,690 690,930 930,1260
actually have our {servers -},|

1128
00:34:41,750 --> 00:34:43,340
0,90 90,210 210,420 420,930
you know {S1 -}

1129
00:34:43,370 --> 00:34:44,860
0,300 300,930
{S2 -}

1130
00:34:46,160 --> 00:34:47,720
0,390 390,960
{S3 -},|

1131
00:34:49,870 --> 00:34:51,160
0,330 330,510 510,600 600,990 990,1290
and one of them is

1132
00:34:51,160 --> 00:34:52,260
0,480
the

1133
00:34:52,410 --> 00:34:54,090
0,510 780,1320 1320,1440 1440,1620 1620,1680
head, typically {the,one} {with -

1134
00:34:54,090 --> 00:34:56,370
0,150 150,210 210,840 930,1680 1680,2280
-} the smaller number| and

1135
00:34:56,430 --> 00:34:58,660
0,330 330,450 450,1140
one is {the,tail}.|

1136
00:35:00,160 --> 00:35:01,180
0,360 360,510 510,810 810,930 930,1020
And so we have a

1137
00:35:01,180 --> 00:35:02,480
0,600
client,|

1138
00:35:03,190 --> 00:35:04,390
0,270 270,510 510,810 810,930 930,1200
{} the client may talk

1139
00:35:04,390 --> 00:35:05,710
0,90 90,150 150,690 690,1200 1200,1320
to the configuration server,| who

1140
00:35:05,710 --> 00:35:08,230
0,900 900,1440 1980,2340 2340,2400 2400,2520
are actually part of the

1141
00:35:08,230 --> 00:35:10,150
0,630 900,1440 1440,1680 1680,1860 1860,1920
chain| {} and then it

1142
00:35:10,150 --> 00:35:12,220
0,240 240,600 600,1230 1290,1860 1860,2070
sends {a,write} request to the

1143
00:35:12,220 --> 00:35:13,340
0,480
head,|

1144
00:35:13,370 --> 00:35:14,570
0,180 180,390 390,540 540,660 660,1200
so this is a protocol

1145
00:35:14,570 --> 00:35:16,130
0,300 300,690 690,1200 1200,1320 1320,1560
in chain replication,| the write

1146
00:35:16,130 --> 00:35:17,660
0,390 390,720 720,1020 1020,1200 1200,1530
request always goes to the,

1147
00:35:18,370 --> 00:35:20,620
0,570 960,1110 1110,1590 1860,2100 2100,2250
{} the head| and what

1148
00:35:20,620 --> 00:35:21,460
0,90 90,270 270,600 600,660 660,840
the head does, the head

1149
00:35:21,460 --> 00:35:23,470
0,300 300,900 900,1350 1350,1590 1590,2010
basically pushes,| {you,know,the,head} actually applies

1150
00:35:23,470 --> 00:35:25,360
0,90 90,780 1050,1500 1500,1740 1740,1890
the operation {} on its

1151
00:35:25,360 --> 00:35:26,440
0,420 420,540 540,780 780,870 870,1080
state| and maybe it has

1152
00:35:26,440 --> 00:35:28,030
0,60 60,540 570,1230 1230,1410 1410,1590
a disk associated with it,|

1153
00:35:28,030 --> 00:35:30,100
0,840 1140,1230 1230,1530 1530,1890 1890,2070
whatever the {key,value} server on

1154
00:35:30,100 --> 00:35:32,110
0,150 690,1260 1260,1590 1590,1680 1680,2010
it,| and then it sends

1155
00:35:32,110 --> 00:35:33,580
0,390 420,1020 1050,1110 1110,1230 1230,1470
the update,| you know there's

1156
00:35:33,580 --> 00:35:36,280
0,210 210,300 300,870 900,1860 1890,2700
all of the operation down

1157
00:35:36,280 --> 00:35:37,260
0,90 90,570
the chain

1158
00:35:38,300 --> 00:35:40,280
0,240 240,570 570,810 810,1410 1410,1980
in {FIFO -} order and

1159
00:35:40,280 --> 00:35:42,260
0,630 810,1230 1230,1560 1560,1710 1710,1980
reliably,| {} so {S1 -}

1160
00:35:42,260 --> 00:35:43,760
0,330 330,570 570,660 660,1050 1050,1500
will send the update to

1161
00:35:43,760 --> 00:35:45,650
0,180 180,690 1050,1410 1410,1620 1620,1890
{S2 -},| {S2 -} it

1162
00:35:45,650 --> 00:35:47,420
0,180 180,420 420,870 900,1440 1440,1770
has {make,its,own} disk,| apply the

1163
00:35:47,420 --> 00:35:49,700
0,660 660,1020 1020,1470 1500,1920 1920,2280
operation or the state change

1164
00:35:49,700 --> 00:35:52,130
0,270 270,750 750,1350 1800,2130 2130,2430
to its state,| {} once

1165
00:35:52,130 --> 00:35:53,780
0,390 390,870 870,1170 1380,1560 1560,1650
actually applyed it,| you know

1166
00:35:53,780 --> 00:35:55,220
0,180 180,420 420,780 780,930 930,1440
it will forward it to

1167
00:35:55,670 --> 00:35:57,950
0,690 780,1500 1500,2130 2130,2220 2220,2280
the last node in the

1168
00:35:57,950 --> 00:35:59,090
0,450 450,570 570,990 990,1110 1110,1140
chain,| this, because there are

1169
00:35:59,090 --> 00:35:59,900
0,210 210,360 360,600 600,660 660,810
only three nodes in this

1170
00:35:59,900 --> 00:36:00,950
0,330 330,660 660,750 750,870 870,1050
particular chain,| you could have

1171
00:36:00,950 --> 00:36:04,070
0,360 360,480 480,1350 1800,2430 2430,3120
chains are longer, {if,you,want,more} availability.|

1172
00:36:04,690 --> 00:36:06,430
0,480 750,930 930,1110 1110,1410 1440,1740
{} And when the last

1173
00:36:06,430 --> 00:36:09,160
0,390 390,690 690,1650 1800,2280 2280,2730
node gets the message which

1174
00:36:09,160 --> 00:36:11,260
0,540 540,1110 1200,1560 1560,1680 1680,2100
state change,| {} it applies

1175
00:36:11,260 --> 00:36:14,050
0,360 360,780 780,1380 2250,2430 2430,2790
to its state| and then

1176
00:36:14,050 --> 00:36:15,340
0,240 270,510 510,720 720,1110 1110,1290
{} this {is,the} charge actually

1177
00:36:15,340 --> 00:36:16,930
0,120 120,420 420,510 510,1110 1110,1590
we're sending an acknowledgment back

1178
00:36:16,990 --> 00:36:19,220
0,600 600,1080 1110,1710
to the client,|

1179
00:36:20,440 --> 00:36:21,640
0,180 180,300 300,840 840,930 930,1200
so it's {the,tail} who sends

1180
00:36:21,640 --> 00:36:23,220
0,60 60,630 630,1020
the acknowledgement back.|

1181
00:36:23,840 --> 00:36:25,180
0,750

1182
00:36:25,180 --> 00:36:27,460
0,240 240,720 870,1500 1500,1980 1980,2280
And so {} one way

1183
00:36:27,460 --> 00:36:28,600
0,330 330,540 540,780 780,990 990,1140
to think about this is

1184
00:36:28,600 --> 00:36:30,640
0,210 210,480 480,900 1260,1830 1830,2040
that,| when the tail or

1185
00:36:30,640 --> 00:36:31,660
0,60 60,180 180,390 390,540 540,1020
in this case as 3

1186
00:36:31,660 --> 00:36:32,920
0,60 60,300 300,630 630,1140 1140,1260
you know actually applies to

1187
00:36:32,920 --> 00:36:34,300
0,330 330,780 810,1050 1050,1290 1290,1380
state change,| that's {sort,of} the

1188
00:36:34,300 --> 00:36:35,580
0,330 330,780
commit point.|

1189
00:36:39,080 --> 00:36:39,890
0,180 180,240 240,540 540,660 660,810
And the reason that this

1190
00:36:39,890 --> 00:36:41,000
0,120 120,210 210,510 510,870 870,1110
is the commit point| is

1191
00:36:41,000 --> 00:36:43,910
0,270 270,840 840,1410 2190,2730 2730,2910
because subsequent reads always come

1192
00:36:43,910 --> 00:36:45,110
0,180 180,270 270,750 810,1050 1050,1200
from the tail,| so if

1193
00:36:45,110 --> 00:36:46,640
0,480 480,630 630,810 810,990 990,1530
anybody or any other client

1194
00:36:48,000 --> 00:36:50,010
0,300 300,570 570,870 870,1530 1620,2010
{you,know} {does,a} read operation, {}|

1195
00:36:50,010 --> 00:36:51,300
0,150 150,420 420,570 570,690 690,1290
they always go to {the,tail},|

1196
00:36:52,160 --> 00:36:53,540
0,150 150,210 210,540 540,930 930,1380
and the tail basically responds

1197
00:36:53,540 --> 00:36:55,080
0,420 420,690 690,750 750,960
immediately back to them.|

1198
00:36:55,360 --> 00:36:56,530
0,240 270,510 510,930 930,1050 1050,1170
So read operations go to

1199
00:36:56,530 --> 00:36:58,270
0,630 660,870 870,1200 1200,1470 1470,1740
{the,tail},| so here's client 1,

1200
00:36:58,270 --> 00:36:59,950
0,150 150,240 240,540 540,1050 1290,1680
here is client 2,| client

1201
00:36:59,950 --> 00:37:01,720
0,90 90,270 270,480 480,1200 1290,1770
2 does read operation, {}|

1202
00:37:01,720 --> 00:37:03,490
0,900 900,1110 1110,1230 1230,1320 1320,1770
it goes through the tail,|

1203
00:37:03,490 --> 00:37:04,780
0,180 180,510 510,990 990,1080 1080,1290
the tail responds and that's

1204
00:37:04,780 --> 00:37:05,560
0,180
it.|

1205
00:37:06,630 --> 00:37:07,290
0,210 210,330 330,450 450,480 480,660
And so there's a couple

1206
00:37:07,290 --> 00:37:08,310
0,270 270,420 420,540 540,960 960,1020
things that I wanted to

1207
00:37:08,310 --> 00:37:11,550
0,300 300,720 960,1830 2280,2970 3000,3240
point out,| {} the one

1208
00:37:11,550 --> 00:37:12,750
0,300 300,390 390,690 690,960 960,1200
of the interesting points out

1209
00:37:12,750 --> 00:37:13,830
0,90 90,210 210,300 300,510 510,1080
is that,| the read operations

1210
00:37:13,830 --> 00:37:15,560
0,150 150,510 510,660 660,1200
just involve one server,

1211
00:37:16,040 --> 00:37:17,420
0,360 360,510 510,900 900,960 960,1380
right,| like if you remember

1212
00:37:17,420 --> 00:37:19,430
0,420 420,1050 1050,1530 1560,1920 1920,2010
from lab 3| or if

1213
00:37:19,430 --> 00:37:20,540
0,60 60,150 150,270 270,690 690,1110
you have any progress, we've

1214
00:37:20,540 --> 00:37:21,860
0,300 300,420 420,690 690,1020 1020,1320
started to do lab 3,|

1215
00:37:21,950 --> 00:37:24,590
0,300 300,840 840,1230 1230,1920 2070,2640
read operations actually involved {you,know}

1216
00:37:24,590 --> 00:37:27,320
0,990 990,1200 1200,1830 1830,2310 2310,2730
in our implementation,| read operation

1217
00:37:27,320 --> 00:37:30,140
0,240 240,570 570,1020 1050,1740 1740,2820
go through the raft log|

1218
00:37:30,140 --> 00:37:30,800
0,210 210,360 360,480 480,600 600,660
and all that kind of

1219
00:37:30,800 --> 00:37:33,170
0,420 810,1110 1200,1590 1590,2070 2070,2370
stuff the paper discusses an

1220
00:37:33,170 --> 00:37:35,540
0,1140 1380,1740 1740,1800 1800,1950 1950,2370
optimization,| but the read operation

1221
00:37:35,540 --> 00:37:36,800
0,420 420,600 600,690 690,840 840,1260
always goes to the leader|

1222
00:37:36,800 --> 00:37:37,910
0,270 270,360 360,630 630,930 930,1110
and the leader first has

1223
00:37:37,910 --> 00:37:39,500
0,330 330,960 960,1050 1050,1500 1500,1590
to contact the majority of

1224
00:37:39,500 --> 00:37:40,580
0,60 60,450 450,810 810,960 960,1080
the servers,| before it can

1225
00:37:40,580 --> 00:37:41,990
0,480 480,570 570,1020 1020,1080 1080,1410
execute the operation {} local.|

1226
00:37:42,410 --> 00:37:43,400
0,210 210,390 390,690 690,810 810,990
{} So what you see

1227
00:37:43,400 --> 00:37:44,750
0,390 390,510 510,780 930,1170 1170,1350
here is that,| the read

1228
00:37:44,750 --> 00:37:46,100
0,450 450,660 660,810 810,990 990,1350
operation actually go to complete,|

1229
00:37:46,100 --> 00:37:48,890
0,120 120,330 1530,1860 1860,2130 2130,2790
so that {} different server

1230
00:37:48,920 --> 00:37:50,510
0,210 210,480 480,990 990,1170 1170,1590
from write operations,| so the

1231
00:37:50,510 --> 00:37:52,070
0,300 300,810 810,930 930,1230 1230,1560
{read,and,write} workload is excellent spread

1232
00:37:52,070 --> 00:37:53,480
0,120 120,360 360,570 570,750 750,1410
at least over two servers,|

1233
00:37:54,360 --> 00:37:56,670
0,450 570,780 780,1290 1320,1590 1590,2310
{} for more read operation

1234
00:37:56,790 --> 00:37:58,560
0,600 600,810 810,990 990,1440 1470,1770
involves only one server, {}|

1235
00:37:58,560 --> 00:38:00,180
0,240 240,810 810,1200 1230,1500 1500,1620
there's never, {} doesn't have

1236
00:38:00,180 --> 00:38:00,900
0,90 90,240 240,330 330,540 540,720
to talk to any other

1237
00:38:00,900 --> 00:38:01,950
0,360 360,450 450,570 570,720 720,1050
server,| it can just respond

1238
00:38:01,950 --> 00:38:02,790
0,60 60,300 450,600 600,690 690,840
{immediately -}| and we'll see

1239
00:38:02,790 --> 00:38:04,290
0,60 60,210 210,330 330,810 1020,1500
a little bit later| why

1240
00:38:04,290 --> 00:38:06,180
0,240 240,330 330,780 780,1320 1320,1890
this is actually {} important|

1241
00:38:06,180 --> 00:38:07,080
0,120 120,300 300,480 480,600 600,900
or why this is actually

1242
00:38:07,080 --> 00:38:09,360
0,540 540,840 840,1470 1470,1680 1680,2280
what further optimization this allows.|

1243
00:38:10,400 --> 00:38:11,780
0,420 570,780 780,870 870,1170 1170,1380
{} So the commit point

1244
00:38:11,780 --> 00:38:12,740
0,120 120,390 390,480 480,810 810,960
is really you know the

1245
00:38:12,740 --> 00:38:14,060
0,330 330,450 450,570 570,990 1020,1320
point,| that the write actually

1246
00:38:14,060 --> 00:38:15,650
0,510 510,630 630,930 930,1260 1260,1590
happens at the tail end,|

1247
00:38:15,800 --> 00:38:17,540
0,270 270,330 330,600 600,1080 1320,1740
because at that point the

1248
00:38:17,540 --> 00:38:19,160
0,240 240,690 690,780 780,1260 1260,1620
write operation is visible to

1249
00:38:19,160 --> 00:38:20,690
0,480 480,720 720,990 990,1320 1320,1530
readers| and not before any

1250
00:38:20,690 --> 00:38:21,920
0,270 270,810
other points.|

1251
00:38:22,780 --> 00:38:24,490
0,480 720,1080 1080,1230 1230,1590 1590,1710
{} And this also you

1252
00:38:24,490 --> 00:38:26,260
0,120 120,660 660,930 930,1380 1380,1770
know provides this {linearizability -},|

1253
00:38:26,260 --> 00:38:27,100
0,150 150,240 240,540 540,720 720,840
so it's pretty easy to

1254
00:38:27,100 --> 00:38:28,120
0,270 270,480 480,720 720,810 810,1020
see that,| in the case

1255
00:38:28,120 --> 00:38:30,460
0,90 90,270 270,870 1440,1860 1860,2340
of no crashes, scheme guarantees

1256
00:38:30,460 --> 00:38:32,470
0,240 240,810 810,1230 1350,1560 1560,2010
{} linearizability,| because the writes

1257
00:38:32,470 --> 00:38:33,490
0,180 180,360 360,720 720,810 810,1020
are all applied in sum

1258
00:38:33,490 --> 00:38:34,840
0,270 270,750 750,930 930,990 990,1350
total order at the head|

1259
00:38:35,380 --> 00:38:38,530
0,1080 1290,1920 1920,2520 2520,2670 2670,3150
and {} when the tail

1260
00:38:38,530 --> 00:38:40,150
0,690 690,780 780,870 870,1140 1140,1620
receives you know that update,|

1261
00:38:40,180 --> 00:38:41,500
0,420 420,690 690,930 930,1020 1020,1320
it's, {} it's the commit

1262
00:38:41,500 --> 00:38:43,300
0,300 300,540 540,750 780,1410 1410,1800
point,| it {wants,to} respond to

1263
00:38:43,300 --> 00:38:44,410
0,420 420,480 480,690 690,750 750,1110
{the,client} and sent the request

1264
00:38:44,410 --> 00:38:45,240
0,390
back.|

1265
00:38:45,240 --> 00:38:46,290
0,480 510,600 600,720 720,870 870,1050
If you know that same

1266
00:38:46,290 --> 00:38:47,190
0,270 270,330 330,630 630,810 810,900
client {immediately -} does a

1267
00:38:47,190 --> 00:38:48,870
0,180 180,960 1080,1470 1470,1560 1560,1680
read operation,| {} it will

1268
00:38:48,870 --> 00:38:49,830
0,180 180,330 330,450 450,840 840,960
go to the tail| and

1269
00:38:49,830 --> 00:38:51,030
0,120 120,270 270,720 720,810 810,1200
it will observe the last

1270
00:38:51,030 --> 00:38:52,080
0,570
change.|

1271
00:38:52,200 --> 00:38:54,330
0,330 330,810 840,1500 1500,1860 1860,2130
{} So, {} certainly within

1272
00:38:54,330 --> 00:38:55,710
0,60 60,330 330,810 810,1110 1110,1380
a single client,| basically all

1273
00:38:55,710 --> 00:38:57,540
0,450 450,540 540,840 840,1320
operations are totally ordered,|

1274
00:38:57,760 --> 00:38:58,720
0,180 180,420 420,630 630,720 720,960
it's pretty easy to see

1275
00:38:58,720 --> 00:39:00,580
0,510 510,1110 1110,1380 1380,1650 1650,1860
that {in,client},| if client 2

1276
00:39:00,580 --> 00:39:02,320
0,240 240,330 330,540 540,1050 1050,1740
start to read operation after

1277
00:39:02,380 --> 00:39:04,810
0,450 450,840 870,1710 1710,1830 1830,2430
client 1 operation is finished,|

1278
00:39:05,020 --> 00:39:06,610
0,240 240,420 420,630 630,1080 1080,1590
and when it finished, when

1279
00:39:06,610 --> 00:39:08,230
0,120 120,420 420,600 600,1200 1380,1620
the tail has responded,| so

1280
00:39:08,230 --> 00:39:09,700
0,270 270,510 510,990 990,1110 1110,1470
any read operation that starts

1281
00:39:09,700 --> 00:39:11,770
0,240 240,420 420,660 660,1320 1590,2070
after a write operation| will

1282
00:39:11,770 --> 00:39:13,150
0,630 660,750 750,870 870,960 960,1380
observe you know the last

1283
00:39:13,150 --> 00:39:14,170
0,90 90,390 390,870 870,960 960,1020
or the result of the

1284
00:39:14,170 --> 00:39:15,700
0,240 240,480 480,900 1290,1440 1440,1530
most recent write| and so

1285
00:39:15,700 --> 00:39:16,780
0,150 150,390 390,630 630,840 870,1080
it's pretty easy to get

1286
00:39:16,780 --> 00:39:18,160
0,90 90,570 570,900 900,1080 1080,1380
an intuition here,| that {you,know,this}

1287
00:39:18,160 --> 00:39:19,330
0,180 180,360 360,720 750,1080 1080,1170
is going to provide us

1288
00:39:19,330 --> 00:39:20,640
0,150 150,390 390,900
with {linearizability -}.|

1289
00:39:22,050 --> 00:39:23,260
0,600
Okay?|

1290
00:39:23,460 --> 00:39:25,080
0,450 570,1170 1260,1440 1440,1500 1500,1620
So, {} what I like

1291
00:39:25,080 --> 00:39:26,130
0,60 60,180 180,450 450,600 600,1050
to do now is actually

1292
00:39:26,130 --> 00:39:27,120
0,120 120,300 300,480 480,750 750,990
to take a quick break

1293
00:39:27,120 --> 00:39:28,650
0,180 180,540 570,930 930,1290 1290,1530
out room {} section| and

1294
00:39:28,650 --> 00:39:29,340
0,210 210,330 330,510 510,630 630,690
I would like you to

1295
00:39:29,340 --> 00:39:32,460
0,690 720,1680 2370,2790 2790,2940 2940,3120
discuss the question| that was

1296
00:39:32,460 --> 00:39:33,870
0,210 210,540 540,1110 1260,1350 1350,1410
a {post,in} lecture,| you know

1297
00:39:33,870 --> 00:39:35,340
0,180 180,300 300,480 480,1140 1140,1470
what could go wrong| or

1298
00:39:35,340 --> 00:39:37,500
0,990 1320,1560 1560,1620 1620,1890 1890,2160
like what a great {linearizability

1299
00:39:37,500 --> 00:39:39,390
0,120 120,900 900,1200 1410,1830 1830,1890
- -},| if instead of

1300
00:39:39,390 --> 00:39:41,430
0,330 330,420 420,1020 1050,1710 1710,2040
having the tail responds to

1301
00:39:41,430 --> 00:39:44,100
0,60 60,600 900,1620 1620,2070 2070,2670
the client,| {} have {the,head}

1302
00:39:44,100 --> 00:39:45,510
0,360 360,420 420,510 510,870 870,1410
responded to the client immediately

1303
00:39:45,510 --> 00:39:47,160
0,360 360,540 540,630 630,1410 1440,1650
after it is received,| you

1304
00:39:47,160 --> 00:39:49,500
0,150 150,750 1140,1680 1680,2040 2070,2340
know the { -} write

1305
00:39:49,500 --> 00:39:50,340
0,570
request.|

1306
00:39:51,360 --> 00:39:52,560
0,300 300,660 660,900 900,1080 1080,1200
{} And maybe those are

1307
00:39:52,560 --> 00:39:53,820
0,150 150,480 480,630 630,990 990,1260
good topics or to {}

1308
00:39:53,850 --> 00:39:54,810
0,300 300,360 360,570 570,780 780,960
debate a little bit| and

1309
00:39:54,810 --> 00:39:55,320
0,90 90,180 180,330 330,390 390,510
if you want to go

1310
00:39:55,320 --> 00:39:56,190
0,90 90,270 270,450 450,780 780,870
in any other direction to

1311
00:39:56,190 --> 00:39:57,900
0,210 210,840 840,1050 1050,1470 1470,1710
talk about chain replication {[]

1312
00:39:57,900 --> 00:39:59,340
0,120 120,570 570,960 960,1140 1140,1440
-} welcome,| maybe that's something

1313
00:39:59,340 --> 00:40:00,540
0,150 150,510 510,750
to start with.|

1314
00:40:00,720 --> 00:40:01,740
0,210 210,540 540,720 720,810 810,1020
So let's take a five

1315
00:40:01,740 --> 00:40:02,970
0,180 180,540 540,810 810,900 900,1230
minute breakout room| and then

1316
00:40:03,920 --> 00:40:05,140
0,690
{}

1317
00:40:05,200 --> 00:40:06,100
0,390 390,450 450,570 570,780 780,900
we'll {} do this and

1318
00:40:06,100 --> 00:40:07,280
0,90 90,660
I think,|

1319
00:40:07,280 --> 00:40:08,480
0,330 330,480 480,540 540,960 990,1200
{} let me see, {}

1320
00:40:08,480 --> 00:40:09,200
0,330 330,450 450,540 540,660 660,720
or [] you're going to

1321
00:40:09,200 --> 00:40:10,100
0,60 60,300
do it.|

1322
00:40:10,320 --> 00:40:13,530
0,570 570,1080 1080,2010 2310,2970 3000,3210
And yet and okay. {}|

1323
00:40:13,530 --> 00:40:14,340
0,180 180,360 360,450 450,660 660,810
You have to make you

1324
00:40:14,340 --> 00:40:16,140
0,390 390,780 780,1110 1230,1590 1590,1800
something, or.| I don't think

1325
00:40:16,140 --> 00:40:18,600
0,90 90,720 1320,1800 1950,2250 2250,2460
it's necessary.| I think it

1326
00:40:18,660 --> 00:40:20,310
0,330 330,780 780,1200 1200,1290 1290,1650
zoom change, {so,it,should} be possible

1327
00:40:20,310 --> 00:40:21,320
0,210 210,480
there, too.|

1328
00:40:24,760 --> 00:40:26,440
0,1050
Zooms,

1329
00:40:27,240 --> 00:40:29,560
0,450 450,690 690,1020
yep, that's right.|

1330
00:40:31,810 --> 00:40:34,240
0,480 510,1440
Yep, okay.|

1331
00:41:07,320 --> 00:41:08,640
0,750

1332
00:42:08,820 --> 00:42:09,460
0,480

1333
00:42:16,350 --> 00:42:17,740
0,840

1334
00:42:23,860 --> 00:42:24,760
0,60

1335
00:42:48,630 --> 00:42:49,760
0,120

1336
00:42:50,640 --> 00:42:51,520
0,510

1337
00:42:53,650 --> 00:42:54,520
0,60

1338
00:42:56,260 --> 00:42:57,880
0,960

1339
00:43:17,290 --> 00:43:18,240
0,420

1340
00:44:27,090 --> 00:44:28,460
0,870

1341
00:44:46,370 --> 00:44:47,840
0,690

1342
00:47:43,180 --> 00:47:45,790
0,660 660,900 900,1140 1140,1560 2070,2610
Hey, we're coming back.| Yeah,

1343
00:47:45,790 --> 00:47:48,670
0,420 420,1020 1200,1500 1500,1980 2310,2880
whenever you.| I'm ready.| Okay,

1344
00:47:48,700 --> 00:47:49,660
0,120 120,360 360,630 630,870 870,960
I mean I think I

1345
00:47:49,660 --> 00:47:51,700
0,240 240,720 720,810 810,1500
can close to [zooms].|

1346
00:47:51,700 --> 00:47:54,060
0,900

1347
00:48:09,460 --> 00:48:11,300
0,450

1348
00:48:29,740 --> 00:48:31,440
0,1230

1349
00:48:57,530 --> 00:48:59,800
0,330 900,1710
Right, back.|

1350
00:49:07,090 --> 00:49:10,030
0,690 930,1710 1740,2250 2400,2640 2640,2940
Okay, {} so you know

1351
00:49:10,030 --> 00:49:12,640
0,180 180,780 780,930 930,1680 1710,2610
just quickly to summarize,| why

1352
00:49:13,090 --> 00:49:14,410
0,480 480,570 570,900 900,1080 1080,1320
you know that would break

1353
00:49:14,410 --> 00:49:16,060
0,60 60,420 420,960 990,1170 1170,1650
the {linearizability -},| {} so

1354
00:49:16,480 --> 00:49:18,190
0,450 450,1020 1050,1230 1230,1560 1560,1710
protocol change {} change that

1355
00:49:18,190 --> 00:49:21,370
0,600 630,1290 1290,1680 2310,3090 3090,3180
was contemplated was to you

1356
00:49:21,370 --> 00:49:22,930
0,90 90,390 390,930 930,1260 1260,1560
know {both,keep} propagating to {S1

1357
00:49:22,930 --> 00:49:23,710
0,180 180,300 300,390 390,630 630,780
-} and {S2 -} {S3

1358
00:49:23,710 --> 00:49:25,390
0,420 600,990 990,1380 1380,1500 1500,1680
-},| {} but you know

1359
00:49:25,390 --> 00:49:26,650
0,180 180,420 420,630 630,930 930,1260
as soon as S1 actually

1360
00:49:26,650 --> 00:49:28,870
0,120 120,600 660,1080 1080,1590 1590,2220
has done,| {} which propagation

1361
00:49:28,870 --> 00:49:30,340
0,150 150,480 480,840 840,1110 1110,1470
as it responds back to

1362
00:49:30,340 --> 00:49:33,010
0,180 180,780 1380,1740 1740,2100 2100,2670
a client| and clearly this

1363
00:49:33,220 --> 00:49:35,440
0,270 270,930 930,1050 1050,1710 1710,2220
will break the linearizability,| because,

1364
00:49:35,830 --> 00:49:37,180
0,420 420,660 660,780 780,1140 1140,1350
{} let's say {the,client} 1

1365
00:49:37,180 --> 00:49:38,590
0,180 180,630 630,840 840,900 900,1410
to write got the acknowledgement

1366
00:49:38,590 --> 00:49:39,880
0,420 420,510 510,720 720,1170 1170,1290
back,| you know from {S1

1367
00:49:39,880 --> 00:49:41,170
0,540 600,810 810,990 990,1050 1050,1290
-},| {S1 -} of course

1368
00:49:41,170 --> 00:49:42,430
0,540 570,660 660,870 870,1110 1110,1260
has the write also in

1369
00:49:42,430 --> 00:49:43,600
0,540 540,720 720,960 960,1050 1050,1170
progress {S2 -} and {S3

1370
00:49:43,600 --> 00:49:45,640
0,390 510,840 840,1110 1110,1890 1920,2040
-},| but maybe before you

1371
00:49:45,640 --> 00:49:47,080
0,180 180,450 450,690 690,960 960,1440
know {S2 -} actually context

1372
00:49:47,080 --> 00:49:49,030
0,150 150,540 540,1140 1140,1440 1440,1950
{S3 -},| {the,client} actually sends

1373
00:49:49,400 --> 00:49:50,750
0,150 150,360 360,1050 1110,1230 1230,1350
a read operation you know

1374
00:49:50,750 --> 00:49:52,790
0,630 630,1140 1140,1650 1800,1950 1950,2040
to {S3 -}| and of

1375
00:49:52,790 --> 00:49:54,140
0,240 240,420 420,540 540,690 690,1350
course now it will return

1376
00:49:54,170 --> 00:49:56,270
0,570 600,1290 1290,1620 1620,2010 2010,2100
a value from before the

1377
00:49:56,270 --> 00:49:58,070
0,330 330,720 720,1080 1230,1470 1470,1800
write stops,| so the client

1378
00:49:58,070 --> 00:49:59,300
0,240 240,480 480,900 900,1020 1020,1230
doesn't even observe its own

1379
00:49:59,300 --> 00:50:01,580
0,510 510,750 750,1140 1230,1980 1980,2280
writes| and so clearly a

1380
00:50:01,580 --> 00:50:03,320
0,270 270,540 540,690 690,1080 1440,1740
break {linearizability - -},| and

1381
00:50:03,320 --> 00:50:04,790
0,120 120,240 240,420 420,990 1170,1470
so it's very important, that

1382
00:50:04,790 --> 00:50:05,540
0,60 60,300 300,480 480,540 540,750
you know as I said

1383
00:50:05,540 --> 00:50:08,240
0,420 420,630 630,810 810,1860 1920,2700
earlier,| {that's -} the tail

1384
00:50:08,480 --> 00:50:10,790
0,720 720,1020 1020,1110 1110,1830 1830,2310
actually since the acknowledgement back

1385
00:50:11,000 --> 00:50:13,580
0,270 270,870 1110,1650 1650,2100 2100,2580
to {the,client},| because really the

1386
00:50:13,610 --> 00:50:15,620
0,330 330,840 840,1050 1050,1560 1560,2010
once {the,tail} has processed the

1387
00:50:15,920 --> 00:50:17,810
0,630 630,1200 1200,1440 1440,1560 1560,1890
write operation,| that is actually

1388
00:50:17,810 --> 00:50:19,430
0,300 300,510 510,750 750,1290 1290,1620
really what the {commit,point} is.|

1389
00:50:20,630 --> 00:50:21,720
0,720

1390
00:50:22,200 --> 00:50:23,960
0,240 240,540 540,690 690,1170
Any questions about that?|

1391
00:50:28,400 --> 00:50:29,750
0,390 390,390 900,1080 1080,1230 1230,1350
Okay, {} so this was

1392
00:50:29,750 --> 00:50:31,700
0,120 120,180 180,630 630,1290 1620,1950
sort of normal operations| and

1393
00:50:31,700 --> 00:50:32,330
0,150 150,210 210,390 390,420 420,630
let me talk a little

1394
00:50:32,330 --> 00:50:36,170
0,180 180,690 720,1530 3540,3750 3750,3840
bit about crashes,| {since,it's,6.824 -

1395
00:50:36,170 --> 00:50:38,150
0,480 510,870 870,1380 1380,1740 1740,1980
-} distributed systems,| so all

1396
00:50:38,150 --> 00:50:39,350
0,90 90,390 390,690 690,990 990,1200
the action is where when

1397
00:50:39,350 --> 00:50:40,880
0,60 60,420 420,870
the failures happen.|

1398
00:50:42,850 --> 00:50:44,320
0,390 390,1020 1080,1320 1320,1410 1410,1470
{} And one of the

1399
00:50:44,320 --> 00:50:45,250
0,210 210,270 270,330 330,660 660,930
things that is cool about

1400
00:50:45,250 --> 00:50:47,410
0,240 240,510 510,1380 1380,2010 2040,2160
{} chain replication is| you

1401
00:50:47,410 --> 00:50:48,550
0,420 420,570 570,780 780,840 840,1140
know the number of failure

1402
00:50:48,550 --> 00:50:50,140
0,540 540,630 630,840 840,1110 1110,1590
scenarios is actually quite limited.|

1403
00:50:50,810 --> 00:50:52,310
0,180 180,570 810,990 990,1170 1170,1500
And so, {} let me

1404
00:50:52,310 --> 00:50:54,590
0,480 540,1200 1200,1380 1380,1920 1920,2280
{} basically three cases,| namely

1405
00:50:54,590 --> 00:50:55,850
0,90 90,300 300,780 780,1050 1050,1260
the head fails, the one

1406
00:50:55,850 --> 00:50:57,230
0,60 60,150 150,630 630,960 960,1380
of the intermediate server fails,

1407
00:50:57,230 --> 00:50:59,090
0,150 150,510 510,1020 1530,1710 1710,1860
or tail fails,| so let's

1408
00:50:59,090 --> 00:50:59,930
0,180 180,240 240,390 390,720 720,840
look at one of each

1409
00:50:59,930 --> 00:51:01,010
0,270 270,570 570,720 720,900 900,1080
one of each of those

1410
00:51:01,010 --> 00:51:03,440
0,570 570,1080 1350,1740 1740,2190 2220,2430
cases,| so here's are {you,know}

1411
00:51:03,440 --> 00:51:04,970
0,60 60,540 540,720 720,960 960,1530
the case we have {a,head}

1412
00:51:05,060 --> 00:51:07,220
0,510 510,1020 1260,1770 1770,2010 2010,2160
{S1 -},| let's say that

1413
00:51:07,220 --> 00:51:09,100
0,210 210,660 660,840 840,1470
it applied {U1 -},

1414
00:51:09,100 --> 00:51:10,450
0,240 240,750 750,900 900,1020 1020,1350
{U2 -} and {U3 -}

1415
00:51:10,450 --> 00:51:12,000
0,180 180,360 360,1050
sort for updates,|

1416
00:51:12,330 --> 00:51:14,680
0,690 690,930 930,1170 1170,1770
talks to {S2 -},|

1417
00:51:15,050 --> 00:51:16,040
0,270 270,390 390,660 660,810 810,990
{maybe -} {S2 -} has

1418
00:51:16,040 --> 00:51:18,620
0,240 240,1080 1110,1710 1740,2070 2070,2580
done U2 and {U1 -},|

1419
00:51:19,930 --> 00:51:21,700
0,690 720,810 810,1230 1260,1680 1680,1770
and you know where we

1420
00:51:21,700 --> 00:51:22,630
0,240 240,420 420,630 630,840 840,930
have {S3 -} which is

1421
00:51:22,630 --> 00:51:23,880
0,690
{the,tail},|

1422
00:51:23,940 --> 00:51:25,170
0,360 360,510 510,780 780,930 930,1230
and it only has done

1423
00:51:25,170 --> 00:51:26,850
0,360 360,540 540,960 1140,1470 1470,1680
one so far| and so

1424
00:51:26,850 --> 00:51:29,010
0,120 120,540 1050,1650 1650,1770 1770,2160
the client client was talking

1425
00:51:29,010 --> 00:51:31,200
0,450 600,900 900,1410
to {S1 -},|

1426
00:51:31,500 --> 00:51:33,660
0,720 900,1440 1680,1860 1860,2010 2010,2160
{} and {} we don't

1427
00:51:33,660 --> 00:51:34,620
0,150 150,210 210,360 360,750 750,960
want to think about what

1428
00:51:34,620 --> 00:51:36,090
0,600 600,990 990,1170 1170,1380 1380,1470
happens| and what needs to

1429
00:51:36,090 --> 00:51:37,560
0,450 450,750 750,990 990,1110 1110,1470
happen in one of these

1430
00:51:37,560 --> 00:51:39,480
0,570 750,930 930,1290 1320,1800 1800,1920
crashes.| So let's start with

1431
00:51:39,480 --> 00:51:41,400
0,90 90,480 480,720 720,1080 1410,1920
the case that the head

1432
00:51:41,400 --> 00:51:42,640
0,780
crashes,|

1433
00:51:42,730 --> 00:51:44,230
0,360 360,750 750,900 900,1080 1080,1500
and so the head crashes

1434
00:51:44,230 --> 00:51:45,370
0,360 360,600 600,720 720,780 780,1140
what needs to be done,|

1435
00:51:47,530 --> 00:51:48,880
0,210 210,330 330,390 390,720 720,1350
this is an easy case

1436
00:51:49,030 --> 00:51:50,640
0,120 120,390 390,990
or hard case.|

1437
00:51:53,070 --> 00:51:55,320
0,780 990,1710 1710,1830 1830,2010 2010,2250
Easier.| {I,hope} in easy case,

1438
00:51:55,320 --> 00:51:56,600
0,660
{why,[]}.|

1439
00:51:56,780 --> 00:51:58,580
0,330 330,540 540,900 930,1350 1350,1800
{} {You,can} just caught off

1440
00:51:58,730 --> 00:52:01,070
0,510 540,780 780,1320 1740,2160 2160,2340
{} the head,| oh, {sorry

1441
00:52:01,070 --> 00:52:02,390
0,90 90,330 360,750 780,900 900,1320
-} the yeah the head,|

1442
00:52:02,390 --> 00:52:04,430
0,300 420,600 600,810 840,1410 1830,2040
and you know make {}

1443
00:52:04,430 --> 00:52:06,830
0,270 270,690 780,1110 1110,1470 1740,2400
{S2 -} {a,head} now.| Yeah,

1444
00:52:06,860 --> 00:52:09,260
0,1350 1350,1650 1650,1800 1800,2190 2190,2400
you know, so what's going

1445
00:52:09,260 --> 00:52:10,220
0,60 60,330 330,660 660,810 810,960
to happen correct is| the

1446
00:52:10,220 --> 00:52:11,780
0,510 510,810 810,1320 1320,1410 1410,1560
configuration server discovers that {S1

1447
00:52:11,780 --> 00:52:13,080
0,240 240,330 330,810
-} is gone,|

1448
00:52:13,080 --> 00:52:14,010
0,180 180,540 540,600 600,750 750,930
what decides if {S1 -}

1449
00:52:14,010 --> 00:52:17,100
0,120 120,600 870,1860 1890,2550 2580,3090
is gone| and {} then

1450
00:52:17,100 --> 00:52:18,990
0,0 0,960 960,1200 1200,1410 1410,1890
{} basically {} can promote

1451
00:52:18,990 --> 00:52:20,250
0,180 180,360 360,510 510,660 660,1260
{S2 -} to be the

1452
00:52:20,370 --> 00:52:22,740
0,570 870,1200 1200,1530 1530,1680 1680,2370
head {} in the subsequent

1453
00:52:22,740 --> 00:52:25,080
0,1140 1380,1710 1710,2100 2100,2220 2220,2340
operations| and clients now in

1454
00:52:25,080 --> 00:52:26,190
0,60 60,540 540,780 780,1050 1050,1110
the future and talk to

1455
00:52:26,190 --> 00:52:27,750
0,210 210,780 930,1230 1230,1440 1440,1560
this guy| and why is

1456
00:52:27,750 --> 00:52:28,840
0,120 120,690
this correct,|

1457
00:52:29,690 --> 00:52:30,890
0,300 300,510 510,900 900,1050 1050,1200
so what operation have we

1458
00:52:30,890 --> 00:52:31,920
0,510
lost.|

1459
00:52:33,100 --> 00:52:35,230
0,150 150,600 600,900 900,1530 1620,2130
We lost {U3 -}.| Yeah,

1460
00:52:35,230 --> 00:52:36,720
0,120 120,240 240,330 330,900
is that a problem?|

1461
00:52:36,840 --> 00:52:40,620
0,420 420,900 1170,1560 1560,2310 2520,3780
That's valid {to,lose} operations.| Yeah,

1462
00:52:40,770 --> 00:52:41,970
0,210 210,330 330,570 570,1110 1110,1200
yeah, it's fair game to

1463
00:52:41,970 --> 00:52:43,260
0,270 270,420 420,720 750,1110 1110,1290
lose {U3 -},| {U3 -}

1464
00:52:43,260 --> 00:52:44,760
0,150 150,420 420,600 600,1110 1140,1500
has not been committed,| because

1465
00:52:44,760 --> 00:52:46,020
0,300 300,750 750,840 840,930 930,1260
only operations at the tail

1466
00:52:46,020 --> 00:52:47,700
0,480 960,1140 1140,1350 1350,1560 1560,1680
committed| and so just as

1467
00:52:47,700 --> 00:52:49,290
0,270 270,600 600,990 990,1170 1170,1590
if the operation never happens,|

1468
00:52:49,290 --> 00:52:49,950
0,120 120,180 180,270 270,570 570,660
you know the client could

1469
00:52:49,950 --> 00:52:51,540
0,240 240,540 540,720 720,1470 1500,1590
not even have observed,| you

1470
00:52:51,540 --> 00:52:52,920
0,150 150,360 360,720 720,1020 1020,1380
know that actually you {}

1471
00:52:52,920 --> 00:52:54,750
0,510 510,990 1050,1350 1350,1620 1620,1830
this {} {U2 -} or

1472
00:52:54,750 --> 00:52:55,890
0,180 180,360 360,600 600,720 720,1140
{U3 -} actually it happens,|

1473
00:52:55,890 --> 00:52:56,550
0,180 180,300 300,450 450,570 570,660
or {U3 -} it should

1474
00:52:56,550 --> 00:52:57,280
0,270
happen.|

1475
00:52:57,310 --> 00:52:58,840
0,480 510,660 660,750 750,1050 1050,1530
Okay, so it's perfectly fine

1476
00:52:59,110 --> 00:53:01,360
0,360 360,480 480,900 1020,2130 2130,2250
to do this,| why is

1477
00:53:01,360 --> 00:53:03,040
0,60 60,540 540,1080 1080,1440 1440,1680
it important configuration servers actually

1478
00:53:03,040 --> 00:53:03,940
0,390 390,540 540,690 690,750 750,900
involved here,| could {} like

1479
00:53:03,940 --> 00:53:05,410
0,630 630,900 900,1260 1260,1350 1350,1470
{S2 -} decide on its

1480
00:53:05,410 --> 00:53:06,610
0,210 210,300 300,630 630,870 870,1200
own to become the head,|

1481
00:53:07,380 --> 00:53:08,190
0,180 180,270 270,480 480,570 570,810
let's say yes,| you couldn't

1482
00:53:08,190 --> 00:53:09,240
0,210 210,330 330,600 600,960 960,1050
talk to anyone anymore| and

1483
00:53:09,240 --> 00:53:10,260
0,60 60,270 270,420 420,600 600,1020
{decides -} like {} whatever

1484
00:53:10,290 --> 00:53:11,160
0,150 150,300 300,360 360,570 570,870
I want to become head,|

1485
00:53:11,780 --> 00:53:13,260
0,120 120,300 300,420 420,900
would that be valid?|

1486
00:53:14,770 --> 00:53:16,450
0,240 240,390 390,690 720,1350 1350,1680
What is that, like maybe

1487
00:53:16,450 --> 00:53:20,950
0,360 360,690 2130,2340 2490,4110 4200,4500
create a split.| Yeah, yeah,

1488
00:53:20,950 --> 00:53:21,790
0,150 150,300 300,540 540,570 570,840
that would create a split

1489
00:53:21,790 --> 00:53:22,870
0,270 270,480 480,720 720,810 810,1080
ring, right,| because it might

1490
00:53:22,870 --> 00:53:23,890
0,210 210,330 330,450 450,810 810,1020
get {S2 -},| might just

1491
00:53:23,890 --> 00:53:25,750
0,120 120,750 870,1200 1200,1380 1380,1860
be partitioned from {S1 -}|

1492
00:53:26,140 --> 00:53:27,400
0,420 420,540 540,720 720,1110 1110,1260
and so now both are

1493
00:53:27,400 --> 00:53:29,530
0,540 810,1230 1230,1500 1500,1620 1620,2130
heads,| maybe both are processing

1494
00:53:29,530 --> 00:53:30,850
0,570 570,720 720,1050 1050,1170 1170,1320
commands,| will be you know

1495
00:53:30,850 --> 00:53:34,030
0,600 600,1020 1320,2460 2670,2730 2730,3180
violate are,| {} you know

1496
00:53:34,060 --> 00:53:35,230
0,570 570,720 720,780 780,990 990,1170
basically trying to do this

1497
00:53:35,230 --> 00:53:36,580
0,210 210,660 660,1020 1020,1110 1110,1350
whole property having the total

1498
00:53:36,580 --> 00:53:37,440
0,420
order,|

1499
00:53:38,190 --> 00:53:40,290
0,180 180,360 360,600 600,1020 1500,2100
{we,can} now.| {Also - -},

1500
00:53:40,320 --> 00:53:41,970
0,420 420,720 720,960 960,1380 1380,1650
does this two even know

1501
00:53:41,970 --> 00:53:42,810
0,180 180,360 360,600 600,750 750,840
that this one is a

1502
00:53:42,810 --> 00:53:45,660
0,630 750,1290 1290,1500 1500,1950 1980,2850
head,| because it just receives.|

1503
00:53:46,360 --> 00:53:47,710
0,510 540,870 870,1140 1140,1290 1290,1350
{} You probably got it

1504
00:53:47,710 --> 00:53:49,120
0,120 120,210 210,750 750,1290 1290,1410
from the configuration information in

1505
00:53:49,120 --> 00:53:52,030
0,330 330,780 1230,1680 1680,2400 2400,2910
previous time,| like when configuration

1506
00:53:52,030 --> 00:53:53,620
0,330 330,690 690,750 750,1020 1020,1590
service decides a new configuration,|

1507
00:53:53,620 --> 00:53:54,310
0,90 90,210 210,450 450,630 630,690
they can tell all the

1508
00:53:54,310 --> 00:53:56,050
0,390 390,600 600,1080 1080,1290 1290,1740
servers and whatever and {the,clients}

1509
00:53:56,050 --> 00:53:57,520
0,540 540,960 990,1080 1080,1230 1230,1470
actually care| you know here's

1510
00:53:57,520 --> 00:53:58,820
0,60 60,210 210,780
the new configuration.|

1511
00:54:00,090 --> 00:54:01,560
0,270 270,420 420,690 690,1080 1080,1470
Does this only happen when

1512
00:54:01,560 --> 00:54:02,700
0,210 210,570 570,660 660,930 930,1140
{S1 -} to {S2 -}

1513
00:54:02,700 --> 00:54:04,680
0,510 510,660 660,1170 1170,1590 1620,1980
connection is separate| or wait

1514
00:54:04,680 --> 00:54:06,150
0,330 450,780 780,1080 1080,1170 1170,1470
what, what causes the split

1515
00:54:06,150 --> 00:54:07,460
0,270 270,720
brain again?|

1516
00:54:07,760 --> 00:54:08,900
0,360 360,570 570,690 690,990 990,1140
Split brain would happen if

1517
00:54:08,900 --> 00:54:09,860
0,210 210,420 420,570 570,720 720,960
{S2 -} on its own

1518
00:54:09,860 --> 00:54:11,480
0,660 690,1080 1080,1230 1230,1440 1440,1620
decided that {S1 -} has

1519
00:54:11,480 --> 00:54:12,650
0,300 300,420 420,750 750,810 810,1170
failed and became the head.|

1520
00:54:13,220 --> 00:54:14,510
0,360 360,690 690,870 870,1140 1140,1290
So we're not allowed to

1521
00:54:14,510 --> 00:54:15,470
0,180 180,300 300,780 780,870 870,960
have that happen| and the

1522
00:54:15,470 --> 00:54:17,300
0,300 300,690 690,1290 1320,1620 1620,1830
way actually the little work

1523
00:54:17,300 --> 00:54:18,440
0,180 180,270 270,720 720,930 930,1140
out in practice is that,|

1524
00:54:18,440 --> 00:54:19,790
0,120 120,210 210,270 270,810 810,1350
there is a configuration server|

1525
00:54:20,030 --> 00:54:21,380
0,180 180,450 450,990 990,1230 1230,1350
that actually decides what is

1526
00:54:21,380 --> 00:54:23,660
0,210 210,270 270,510 510,1230 1920,2280
actually the current configuration| and

1527
00:54:23,660 --> 00:54:25,670
0,660 750,1110 1110,1410 1410,1560 1560,2010
so {} if it decides

1528
00:54:25,670 --> 00:54:26,810
0,150 150,270 270,510 510,660 660,1140
that {S1 -} is dead,|

1529
00:54:27,170 --> 00:54:28,700
0,420 420,810 810,990 990,1110 1110,1530
{} then it can inform

1530
00:54:28,700 --> 00:54:29,930
0,180 180,330 330,510 510,930 930,1230
{S2 -} {S3 -}| saying

1531
00:54:29,930 --> 00:54:31,190
0,180 180,570 630,930 930,1200 1200,1260
like hey you guys are

1532
00:54:31,190 --> 00:54:33,440
0,240 240,390 390,960 990,1560 1800,2250
now the new chain and

1533
00:54:33,440 --> 00:54:34,700
0,150 150,390 390,510 510,870
{S2 is} the head.|

1534
00:54:35,030 --> 00:54:36,590
0,450 450,690 690,900 900,1170 1170,1560
And when that change happens,|

1535
00:54:36,590 --> 00:54:37,700
0,210 210,330 330,480 480,780 780,1110
so in this case basically

1536
00:54:37,700 --> 00:54:39,080
0,150 150,360 360,450 450,960 990,1380
{S1 -} is dropped,| nothing

1537
00:54:39,080 --> 00:54:40,850
0,300 300,510 510,600 600,1140 1290,1770
else has to happen, {}|

1538
00:54:40,850 --> 00:54:43,310
0,720 750,1140 1140,1350 1350,1710 1710,2460
because {S2 - -} has,|

1539
00:54:43,550 --> 00:54:44,690
0,180 180,540 540,870 870,1020 1020,1140
the only update that we

1540
00:54:44,690 --> 00:54:45,860
0,480 480,540 540,750 750,1050 1050,1170
lost,| the one actually was

1541
00:54:45,860 --> 00:54:47,090
0,180 180,480 480,870 870,1050 1050,1230
not committed anyway,| so there's

1542
00:54:47,090 --> 00:54:48,320
0,240 240,330 330,480 480,870 870,1230
nothing to be repaired further.|

1543
00:54:49,990 --> 00:54:51,550
0,300 300,750 780,1200 1200,1410 1410,1560
So making this go from

1544
00:54:51,550 --> 00:54:53,530
0,240 240,780 780,1170 1170,1470 1470,1980
this setting from three replica

1545
00:54:53,560 --> 00:54:54,730
0,240 240,480 480,840 840,930 930,1170
with the dropping the head|

1546
00:54:54,730 --> 00:54:56,620
0,150 150,630 630,870 870,1410 1410,1890
is basically pretty straightforward operation.|

1547
00:55:00,140 --> 00:55:01,420
0,810
Okay?|

1548
00:55:01,450 --> 00:55:03,100
0,360 540,1140 1140,1500 1500,1590 1590,1650
{} Professor, I have a

1549
00:55:03,100 --> 00:55:05,320
0,540 540,1080 1140,1950 1950,2130 2130,2220
question,| so there's there's an

1550
00:55:05,320 --> 00:55:07,540
0,630 630,1080 1080,1320 1320,1650
assumption here,| that {}

1551
00:55:07,690 --> 00:55:10,720
0,420 630,1350 1620,1890 1890,2700 2790,3030
like the {} commands that,|

1552
00:55:10,720 --> 00:55:13,690
0,510 780,1140 1350,2100 2130,2370 2370,2970
like like leave {S1 -}

1553
00:55:13,750 --> 00:55:15,670
0,330 330,480 480,1020 1020,1230 1230,1920
like will arrive in order

1554
00:55:16,060 --> 00:55:18,340
0,660 750,1200 1200,1560 1890,2100 2100,2280
and {S2 -},| is that

1555
00:55:18,340 --> 00:55:19,220
0,390
like,

1556
00:55:19,460 --> 00:55:20,870
0,120 120,240 240,330 330,750 750,1410
is that a reasonable assumption,

1557
00:55:20,900 --> 00:55:22,400
0,210 210,630 930,1140 1140,1230 1230,1500
for like.| Well, I think

1558
00:55:22,400 --> 00:55:23,780
0,90 90,240 240,1050 1080,1230 1230,1380
the way they,| so they

1559
00:55:23,780 --> 00:55:25,280
0,330 330,690 690,1110 1110,1380 1380,1500
basically say we need a

1560
00:55:25,280 --> 00:55:26,840
0,450 450,960 960,1260 1260,1380 1380,1560
reliable FIFO between {S1 -}

1561
00:55:26,840 --> 00:55:28,220
0,120 120,270 270,540 690,1230 1230,1380
and {S2 -} right,| {S2

1562
00:55:28,220 --> 00:55:29,480
0,180 180,270 270,390 390,780 840,1260
-} to {S3 -}| and

1563
00:55:29,480 --> 00:55:30,290
0,90 90,240 240,330 330,510 510,810
I think the way they

1564
00:55:30,290 --> 00:55:31,580
0,540 540,690 690,780 780,1050 1050,1290
implement, that is probably using

1565
00:55:31,580 --> 00:55:32,860
0,360 360,750
TCP connection.|

1566
00:55:36,470 --> 00:55:37,560
0,510
{Okay,thanks}.

1567
00:55:37,620 --> 00:55:38,880
0,210 210,480 480,1020 1020,1200 1200,1260
Okay, so let's look at

1568
00:55:38,880 --> 00:55:40,200
0,60 60,300 300,810
the second case.|

1569
00:55:40,200 --> 00:55:41,790
0,450 450,690 690,1020 1020,1380 1410,1590
{} So we're have you

1570
00:55:41,790 --> 00:55:43,050
0,240 240,510 510,660 660,780 780,1260
know { -} {S1 -},

1571
00:55:43,940 --> 00:55:45,800
0,390 390,540 540,1200
{you,know,S2 - -},

1572
00:55:46,700 --> 00:55:48,110
0,270 270,810 960,1140 1140,1200 1200,1410
{S3 -}| and of course

1573
00:55:48,110 --> 00:55:49,040
0,90 90,240 240,330 330,840 840,930
there could be more you

1574
00:55:49,040 --> 00:55:50,180
0,120 120,480 480,660 660,1020 1020,1140
know servers into chain,| but

1575
00:55:50,180 --> 00:55:52,100
0,750 780,1170 1200,1440 1440,1740 1740,1920
like {you,know} three enough for

1576
00:55:52,100 --> 00:55:52,820
0,150 150,240 240,570 570,660 660,720
us to consider all the

1577
00:55:52,820 --> 00:55:55,610
0,660 1200,1560 1560,2130 2160,2520 2520,2790
cases| and so now what

1578
00:55:55,610 --> 00:55:56,390
0,90 90,240 240,300 300,570 570,780
we want to do take

1579
00:55:56,390 --> 00:55:57,110
0,60 60,270 270,420 420,480 480,720
the case where a middle

1580
00:55:57,110 --> 00:55:58,400
0,210 210,840
one crashes,|

1581
00:55:58,790 --> 00:56:00,420
0,180 180,360 360,930
this one crashes.|

1582
00:56:00,780 --> 00:56:03,120
0,900 930,1680 1680,1800 1800,1890 1890,2340
And, {} so the configuration

1583
00:56:03,120 --> 00:56:04,500
0,330 330,390 390,540 540,930 930,1380
server at some point besides

1584
00:56:04,500 --> 00:56:06,060
0,510 510,720 720,1260 1260,1380 1380,1560
{S2 -} crash| you know

1585
00:56:06,060 --> 00:56:07,860
0,630 630,930 930,1140 1140,1470 1470,1800
informs S1 {S3 -},| that

1586
00:56:07,860 --> 00:56:09,510
0,510 510,720 720,1200 1200,1440 1440,1650
basically they form the new

1587
00:56:09,510 --> 00:56:10,640
0,540
chain,|

1588
00:56:10,730 --> 00:56:12,920
0,540 540,1020 1020,1440 1440,1860 1860,2190
{} and we're wondering about

1589
00:56:12,920 --> 00:56:14,300
0,420 600,810 810,1080 1080,1290 1290,1380
like what else needs to

1590
00:56:14,300 --> 00:56:15,240
0,360
happen.|

1591
00:56:16,010 --> 00:56:16,730
0,120 120,300 300,390 390,480 480,720
We saw in the first

1592
00:56:16,730 --> 00:56:18,710
0,450 450,540 540,750 750,1380 1410,1980
case, the head drops,| then

1593
00:56:18,710 --> 00:56:19,700
0,300 300,540 540,810 810,900 900,990
nothing really has to be

1594
00:56:19,700 --> 00:56:20,840
0,300 300,540 540,690 690,1050 1050,1140
done,| other than updating the

1595
00:56:20,840 --> 00:56:22,010
0,420 420,630 630,870 870,1080 1080,1170
chain,| now we're updating the

1596
00:56:22,010 --> 00:56:23,780
0,390 390,450 450,780 780,1230 1650,1770
chain,| the question is is

1597
00:56:23,780 --> 00:56:25,320
0,300 300,540 540,630 630,960
anything needs to happen.|

1598
00:56:26,850 --> 00:56:28,740
0,870 990,1230 1230,1470 1470,1740 1740,1890
The {S1 -} needs to

1599
00:56:28,740 --> 00:56:30,180
0,480 480,630 630,900 900,1140 1140,1440
send to {S3 -},| the

1600
00:56:30,180 --> 00:56:31,260
0,420 420,600 600,720 720,990 990,1080
request that it sent to

1601
00:56:31,260 --> 00:56:32,340
0,210 210,390 390,570 570,840 840,1080
{S2 -},| but didn't make

1602
00:56:32,340 --> 00:56:37,080
0,120 120,300 1830,3540 3540,3930 3930,4740
it to {S3 - -

1603
00:56:37,080 --> 00:56:39,630
0,150 150,690 1140,1710 1710,2130 2220,2550
- -}.| Yes, we {have

1604
00:56:39,630 --> 00:56:40,650
0,270 270,420 420,660 660,750 750,1020
-} you know {U1 -}

1605
00:56:40,650 --> 00:56:41,760
0,90 90,210 210,750 750,900 900,1110
U2 {U3 -},| this guy

1606
00:56:41,760 --> 00:56:43,410
0,390 420,630 630,900 900,1080 1080,1650
had {} see {U1,and,U2 -},|

1607
00:56:43,920 --> 00:56:46,200
0,1230 1260,1380 1380,1710 1710,1920 1920,2280
and {this,guy,see,U1}, {and,the} U2

1608
00:56:46,200 --> 00:56:47,370
0,240 240,480 480,570 570,1080 1080,1170
that's actually in progress,| you

1609
00:56:47,370 --> 00:56:51,960
0,1050 1440,2160 2490,3150 3750,4350 4350,4590
know { -} {the,I,got} lost

1610
00:56:51,960 --> 00:56:53,130
0,210 210,480 480,840 840,960 960,1170
{S2 -},| basically {S1 -}

1611
00:56:53,130 --> 00:56:54,180
0,180 180,270 270,690 690,870 870,1050
has to {bring,S3 - -}

1612
00:56:54,180 --> 00:56:55,500
0,120 120,240 240,330 330,720 750,1320
{} up to date,| basically

1613
00:56:55,500 --> 00:56:57,030
0,570 570,990 990,1110 1110,1230 1230,1530
forward U2 and {U3 -}.|

1614
00:56:58,120 --> 00:56:59,470
0,630 690,840 840,1080 1080,1140 1140,1350
Okay, so that's a little

1615
00:56:59,470 --> 00:57:01,210
0,120 120,180 180,420 420,960 1230,1740
bit of work involved,| let's

1616
00:57:01,210 --> 00:57:02,980
0,360 360,450 450,750 750,1290
consider the final case,

1617
00:57:03,180 --> 00:57:04,560
0,720
{the,tail}.|

1618
00:57:04,820 --> 00:57:06,440
0,690 720,1140 1140,1380 1380,1470 1470,1620
So {} here we go

1619
00:57:06,440 --> 00:57:08,090
0,450 480,630 630,750 750,900 900,1650
again,| we have three cases,|

1620
00:57:09,200 --> 00:57:11,390
0,750 900,1080 1080,1320 1320,1980 1980,2190
S1 or three servers {S2

1621
00:57:11,390 --> 00:57:14,540
0,600 1830,2160 2160,2430 2430,2580 2580,3150
-}, {the,third} one is 3.|

1622
00:57:16,240 --> 00:57:19,180
0,720 750,1470 2190,2670 2670,2880 2880,2940
And, {} let's see, {}

1623
00:57:19,180 --> 00:57:22,480
0,480 480,870 1140,1860 1890,2640
so the tail crashes.|

1624
00:57:22,990 --> 00:57:24,610
0,240 240,810 1050,1230 1230,1350 1350,1620
And so at some point

1625
00:57:24,610 --> 00:57:27,160
0,60 60,690 690,1530 1830,2310 2310,2550
in time,| the configuration server

1626
00:57:27,160 --> 00:57:29,170
0,780 1020,1530 1530,1680 1680,1740 1740,2010
notices decides that the new

1627
00:57:29,170 --> 00:57:29,830
0,270 270,330 330,450 450,510 510,660
chain is going to be

1628
00:57:29,830 --> 00:57:30,730
0,120 120,300 300,390 390,540 540,900
{S1 -} and {S2 -}|

1629
00:57:30,730 --> 00:57:31,750
0,270 270,390 390,570 570,750 750,1020
tells {S1 -} and S2

1630
00:57:31,750 --> 00:57:32,500
0,180 180,270 270,540 540,690 690,750
that they are part of

1631
00:57:32,500 --> 00:57:35,320
0,60 60,210 210,720 1170,2250 2280,2820
the new chain| and {}

1632
00:57:35,320 --> 00:57:36,370
0,270 270,450 450,630 630,690 690,1050
what else needs to happen.|

1633
00:57:38,240 --> 00:57:40,340
0,540 540,750 750,960 960,1530 1920,2100
Well, let's write down,| we

1634
00:57:40,340 --> 00:57:41,480
0,600
know,

1635
00:57:41,770 --> 00:57:42,790
0,270 270,540 540,630 630,930 930,1020
these guys have seen {U1

1636
00:57:42,790 --> 00:57:44,710
0,510 510,1050 1050,1230 1230,1410 1410,1920
-} U2 and {U3 -},|

1637
00:57:44,710 --> 00:57:45,730
0,300 300,540 540,630 630,840 840,1020
this guy I've seen {U1

1638
00:57:45,730 --> 00:57:47,220
0,330 330,1020
-} U2,|

1639
00:57:48,040 --> 00:57:48,940
0,150 150,300 300,570 570,660 660,900
so who becomes the new

1640
00:57:48,940 --> 00:57:51,260
0,480 510,660 660,870 870,1770
tail in this scenario?|

1641
00:57:51,990 --> 00:57:53,670
0,270 270,600 870,1230 1230,1470 1470,1680
{S2 -}.| Yes, S2 becomes

1642
00:57:53,670 --> 00:57:55,590
0,180 180,810 1020,1440 1440,1710 1710,1920
new tail| and anything else

1643
00:57:55,590 --> 00:57:56,920
0,90 90,240 240,300 300,750
that needs to happen?|

1644
00:57:57,380 --> 00:57:59,480
0,450 840,1260 1260,1410 1410,1860 1860,2100
I guess the client needs

1645
00:57:59,480 --> 00:58:00,920
0,120 120,270 270,1050 1050,1260 1260,1440
to be informed that {S2

1646
00:58:00,920 --> 00:58:02,930
0,210 210,420 420,930 1380,1620 1620,2010
-} is the.| Yeah, {that's,the,client}

1647
00:58:02,930 --> 00:58:04,130
0,150 150,480 480,630 630,690 690,1200
might learn from the configuration

1648
00:58:04,130 --> 00:58:05,460
0,390 390,840
server, correct.|

1649
00:58:05,750 --> 00:58:06,950
0,540 540,720 720,870 870,1080 1080,1200
{} And so yeah, but

1650
00:58:06,950 --> 00:58:07,850
0,210 210,390 390,540 540,600 600,900
nothing else has to happen,

1651
00:58:07,880 --> 00:58:11,450
0,240 240,690 1080,1950 2340,3060 3360,3570
right,| because {} the, all

1652
00:58:11,450 --> 00:58:13,040
0,90 90,600 600,720 720,870 870,1590
the committed, you know the

1653
00:58:13,160 --> 00:58:14,900
0,300 300,600 600,1080 1080,1170 1170,1740
no committed operations are lost,|

1654
00:58:15,080 --> 00:58:18,170
0,780 780,1500 1770,2610 2610,2730 2730,3090
{} and {} you know,

1655
00:58:18,380 --> 00:58:19,850
0,660 660,1020 1020,1170 1170,1230 1230,1470
and as we are still

1656
00:58:19,850 --> 00:58:21,140
0,300 300,570 600,930 930,1020 1020,1290
in {} needs to still

1657
00:58:21,140 --> 00:58:22,310
0,360 360,600 600,1080 1080,1170 1170,1170
be actually propagated to {S2

1658
00:58:22,310 --> 00:58:23,810
0,510 510,690 690,990 990,1140 1140,1500
-} will be just happening.|

1659
00:58:24,740 --> 00:58:25,850
0,300 300,450 450,780 780,870 870,1110
Okay, so dropping the tail

1660
00:58:25,850 --> 00:58:26,960
0,60 60,300 300,600 600,900 900,1110
is also reasonable straightforward.| So

1661
00:58:26,960 --> 00:58:27,890
0,360 360,420 420,660 660,750 750,930
dropping the tail, the head

1662
00:58:27,890 --> 00:58:29,300
0,270 270,420 420,720 720,930 930,1410
is a reasonable {straightforward -},|

1663
00:58:29,510 --> 00:58:30,470
0,450 450,510 510,690 690,870 870,960
dropping the middle one is

1664
00:58:30,470 --> 00:58:31,910
0,120 120,240 240,360 360,990 1200,1440
a bit more complicated,| but

1665
00:58:31,910 --> 00:58:33,710
0,150 150,330 330,480 480,1140 1410,1800
not much more complicated,| and

1666
00:58:33,710 --> 00:58:34,580
0,210 210,420 420,570 570,780 780,870
the key thing go I

1667
00:58:34,580 --> 00:58:35,500
0,150 150,390
want to

1668
00:58:35,650 --> 00:58:37,270
0,210 210,270 270,750 750,1110 1110,1620
sort of emphasize here is,|

1669
00:58:37,420 --> 00:58:38,350
0,180 180,300 300,420 420,810 810,930
how does this compare to

1670
00:58:38,350 --> 00:58:39,790
0,210 210,480 480,630 630,960 1050,1440
figure 7 and 8 in

1671
00:58:39,790 --> 00:58:41,140
0,120 120,420 420,810
the raft paper.|

1672
00:58:49,080 --> 00:58:51,180
0,360 360,690 1470,1740 1740,1830 1830,2100
Maybe to, yeah, go ahead.|

1673
00:58:52,620 --> 00:58:55,200
0,540 540,1140 1350,1590 1620,2340 2340,2580
Question, {so ... - -

1674
00:58:55,200 --> 00:58:56,850
0,270 270,570 570,1050 1110,1500 1500,1650
- - - - -

1675
00:58:56,850 --> 00:58:58,920
0,660 750,990 990,1230 1230,1350 1740,2070
- - - - -

1676
00:58:59,070 --> 00:59:01,140
0,300 300,690 1020,1710 1710,1800 1800,2070
- - - - -

1677
00:59:01,140 --> 00:59:02,310
0,480 480,690 690,780 780,870 870,1170
- - - - -

1678
00:59:02,310 --> 00:59:04,140
0,390 390,930 930,1110 1110,1290 1290,1830
-},| that these new operations

1679
00:59:04,140 --> 00:59:06,870
0,120 120,270 270,1140 2070,2640 2640,2730
have been automatically.| Um, {}

1680
00:59:06,870 --> 00:59:08,100
0,300 300,360 360,600 600,900 900,1230
sorry I didn't hear you,|

1681
00:59:08,130 --> 00:59:10,530
0,510 510,1110 1200,1650 1650,1860 1860,2400
were pretty {} pretty noisy

1682
00:59:10,680 --> 00:59:12,560
0,510 510,840
connection there.|

1683
00:59:12,890 --> 00:59:14,630
0,360 480,840 840,930 930,1230 1230,1740
Yeah, like I'm just saying,

1684
00:59:14,630 --> 00:59:16,970
0,420 420,810 960,1620 1620,1890 1890,2340
that {S2,becomes} new {} tail,|

1685
00:59:17,360 --> 00:59:18,980
0,240 240,450 450,630 630,990 1020,1620
don't have to send acknowledgment

1686
00:59:18,980 --> 00:59:20,030
0,210 210,300 300,390 390,930 930,1050
back to the client| and

1687
00:59:20,030 --> 00:59:20,960
0,120 120,210 210,420 420,780 780,930
there are some entries that

1688
00:59:20,960 --> 00:59:22,960
0,150 150,360 360,930 930,1350
have been automatically committed.|

1689
00:59:23,810 --> 00:59:25,100
0,270 270,600 600,1020 1020,1200 1200,1290
{} Yeah, that might be

1690
00:59:25,100 --> 00:59:27,380
0,60 60,330 330,570 570,1530 1590,2280
the case,| that {} what

1691
00:59:27,380 --> 00:59:28,160
0,270 270,360 360,420 420,690 690,780
happens is the client is

1692
00:59:28,160 --> 00:59:29,390
0,210 210,330 330,390 390,870 900,1230
probably going to retry, right|

1693
00:59:29,870 --> 00:59:31,790
0,870 900,1470 1470,1680 1680,1860 1860,1920
and {} we have to

1694
00:59:31,790 --> 00:59:33,380
0,180 180,270 270,540 540,1260 1260,1590
have a separate duplication scheme

1695
00:59:33,380 --> 00:59:35,240
0,270 270,420 420,780 780,1350 1350,1860
like in {} {lab,3} anyway.|

1696
00:59:36,470 --> 00:59:37,130
0,240 240,330 330,480 480,600 600,660
And so there's kind of

1697
00:59:37,130 --> 00:59:39,200
0,690 1050,1320 1320,1560 1560,1740 1740,2070
a couple different ways about

1698
00:59:39,200 --> 00:59:39,920
0,150 150,240 240,390 390,600 600,720
how to do it, {}|

1699
00:59:39,920 --> 00:59:40,910
0,180 180,480 480,510 510,660 660,990
the paper are not particularly

1700
00:59:40,910 --> 00:59:41,780
0,270 270,450 450,660 660,720 720,870
clear which one it will

1701
00:59:41,780 --> 00:59:42,680
0,390
take.|

1702
00:59:43,610 --> 00:59:45,200
0,330 330,570 570,870 870,1050
Okay, {I,see}, thank you.|

1703
00:59:45,660 --> 00:59:47,370
0,420 900,1350 1350,1440 1440,1620 1620,1710
Yeah, like in that in

1704
00:59:47,370 --> 00:59:48,390
0,180 180,480 480,750 750,930 930,1020
that case,| didn't didn't the

1705
00:59:48,390 --> 00:59:50,120
0,330 330,510 510,720 720,1080
paper just say like,|

1706
00:59:50,120 --> 00:59:51,590
0,90 90,420 450,630 630,1080 1140,1470
you know it might like,|

1707
00:59:52,160 --> 00:59:53,330
0,270 270,390 390,480 480,720 720,1170
even if it doesn't respond

1708
00:59:53,330 --> 00:59:54,590
0,150 150,480 480,570 570,780 780,1260
it,| could or could not

1709
00:59:54,590 --> 00:59:57,360
0,210 210,870
have succeeded.|

1710
00:59:57,950 --> 00:59:59,000
0,270 270,390 390,780 780,870 870,1050
Okay, so back to my

1711
00:59:59,000 --> 01:00:00,260
0,300 300,630 630,930 930,1140 1140,1260
actual original question,| which is

1712
01:00:00,260 --> 01:00:01,130
0,210 210,300 300,540 540,720 720,870
like, you know how does

1713
01:00:01,130 --> 01:00:02,930
0,240 360,960 960,1170 1170,1530 1530,1800
this contrast,| this picture of

1714
01:00:02,930 --> 01:00:04,970
0,360 540,1020 1020,1440 1440,1740 1740,2040
my my drawn picture here

1715
01:00:04,970 --> 01:00:05,840
0,120 120,270 270,510 510,750 750,870
on this white board,| how

1716
01:00:05,840 --> 01:00:06,830
0,150 150,270 270,660 660,720 720,990
does that contrast to figure

1717
01:00:06,830 --> 01:00:07,980
0,270 270,390 390,660
7 and 8?|

1718
01:00:08,610 --> 01:00:11,550
0,630 1170,2070 2190,2250 2400,2790 2790,2940
Simpler?| Yeah, I mean that's

1719
01:00:11,550 --> 01:00:12,360
0,90 90,270 270,540 540,570 570,810
the key point I wanted

1720
01:00:12,360 --> 01:00:13,320
0,60 60,180 180,630 630,840 840,960
to get across, right,| you

1721
01:00:13,320 --> 01:00:14,730
0,540 540,750 750,990 990,1170 1170,1410
know there's not that many

1722
01:00:14,730 --> 01:00:16,140
0,300 300,390 390,780 780,1080 1080,1410
cases to consider here,| basically

1723
01:00:16,140 --> 01:00:18,000
0,180 180,780 1140,1500 1500,1740 1740,1860
three cases,| {} which is

1724
01:00:18,000 --> 01:00:19,800
0,180 180,720 720,810 810,1500 1500,1800
like slightly you know quite

1725
01:00:19,800 --> 01:00:21,450
0,30 30,180 180,600 600,990 1050,1650
a bit simpler than {}

1726
01:00:21,450 --> 01:00:23,100
0,510 990,1290 1290,1350 1350,1410 1410,1650
the case of the raft

1727
01:00:23,100 --> 01:00:24,630
0,300 300,720 720,810 810,1080 1080,1530
paper,| where the many []

1728
01:00:24,630 --> 01:00:26,100
0,90 90,780 780,990 990,1410 1410,1470
to consider the scenarios are

1729
01:00:26,100 --> 01:00:27,870
0,240 240,810 960,1440 1470,1680 1680,1770
quite complicated,| now part of

1730
01:00:27,870 --> 01:00:29,250
0,240 240,330 330,810 1020,1200 1200,1380
that is because you know

1731
01:00:29,250 --> 01:00:30,510
0,270 270,330 330,750 780,1110 1110,1260
it's a chain, right, {}|

1732
01:00:30,510 --> 01:00:31,500
0,150 150,330 330,570 570,720 720,990
you know things are pushed

1733
01:00:31,500 --> 01:00:34,260
0,600 810,1980 1980,2400 2400,2460 2460,2760
down {} in a very

1734
01:00:34,260 --> 01:00:36,720
0,210 210,750 750,1530 1530,2160 2160,2460
sort of straightforward manner,| down

1735
01:00:36,720 --> 01:00:38,580
0,60 60,540 540,990 1350,1500 1500,1860
the replication chain,| and part

1736
01:00:38,580 --> 01:00:39,540
0,60 60,300 300,390 390,480 480,960
of that is, of course,

1737
01:00:39,540 --> 01:00:41,010
0,90 90,660 660,1080 1200,1350 1350,1470
the configuration part is sort

1738
01:00:41,010 --> 01:00:43,290
0,120 120,840 870,1230 1230,1770 1770,2280
of outsource to configuration manager

1739
01:00:43,320 --> 01:00:44,160
0,480
manager.|

1740
01:00:44,540 --> 01:00:45,500
0,300 300,480 480,600 600,690 690,960
{} But for the primary

1741
01:00:45,500 --> 01:00:47,390
0,540 810,1200 1230,1620 1620,1800 1800,1890
backup {} part of the

1742
01:00:47,390 --> 01:00:48,860
0,420 420,870 930,1140 1140,1200 1200,1470
recovery plan,| that's a reasonable

1743
01:00:48,860 --> 01:00:50,270
0,630 660,900 900,1050 1050,1230 1230,1410
straightforward,| there are only three

1744
01:00:50,270 --> 01:00:52,320
0,630 630,900 900,1530
configurations to consider.|

1745
01:00:54,920 --> 01:00:56,480
0,150 150,330 330,900 1080,1500 1500,1560
{} One more point {I,want,to}

1746
01:00:56,480 --> 01:00:57,620
0,210 210,390 390,540 540,780 780,1140
make,| which is like how

1747
01:00:57,620 --> 01:00:58,820
0,120 120,300 300,360 360,780 900,1200
to add a replica,| because

1748
01:00:58,820 --> 01:01:00,110
0,270 270,750 750,870 870,1020 1020,1290
any system you know that

1749
01:01:00,230 --> 01:01:01,400
0,540 570,780 780,840 840,1050 1050,1170
here going to run for

1750
01:01:01,400 --> 01:01:02,750
0,420 420,810 810,900 900,1050 1050,1350
{real,time},| really at some point

1751
01:01:02,750 --> 01:01:03,900
0,90 90,540
you gotta

1752
01:01:04,180 --> 01:01:05,410
0,300 300,330 330,480 480,840 840,1230
add a new one in,|

1753
01:01:05,680 --> 01:01:07,930
0,420 420,1200 1200,1740 1740,1890 1890,2250
because otherwise you're gonna lose,|

1754
01:01:07,930 --> 01:01:08,980
0,180 180,450 450,510 510,870 870,1050
you start the three,| then

1755
01:01:08,980 --> 01:01:09,790
0,120 120,270 270,510 510,690 690,810
you have two, then get

1756
01:01:09,790 --> 01:01:10,360
0,240 240,330 330,420 420,480 480,570
one and then you have

1757
01:01:10,360 --> 01:01:11,290
0,360 360,510 510,630 630,840 840,930
zero| and then you're on

1758
01:01:11,290 --> 01:01:12,820
0,60 60,390 420,840 1080,1410 1410,1530
the [].| So, {you,know} you

1759
01:01:12,820 --> 01:01:15,070
0,240 240,540 540,1380 1410,1770 1770,2250
have to {} add new

1760
01:01:15,100 --> 01:01:16,600
0,420 420,870 870,1080 1080,1410 1410,1500
replica,| {so,let's} to consider the

1761
01:01:16,600 --> 01:01:19,480
0,570 1020,1500 1500,1860 1860,2370 2670,2880
case,| {so,here's} {S1 -}, it

1762
01:01:19,480 --> 01:01:21,160
0,150 150,240 240,720
is the head,|

1763
01:01:21,820 --> 01:01:22,660
0,270 270,480 480,720 720,810 810,840
let's say we're in a

1764
01:01:22,660 --> 01:01:24,160
0,510 510,1080 1110,1230 1230,1380 1380,1500
scenario,| where you know we

1765
01:01:24,160 --> 01:01:25,540
0,180 180,540 540,660 660,810 810,1380
have S1 and {S2 -}

1766
01:01:25,870 --> 01:01:27,970
0,270 270,330 330,840 840,1320 1320,2100
{who's} the tail| and basically

1767
01:01:28,030 --> 01:01:29,110
0,270 270,390 390,450 450,660 660,1080
we want to bring {up,S3

1768
01:01:29,140 --> 01:01:30,340
0,270 270,660
- -},|

1769
01:01:32,190 --> 01:01:33,150
0,180 180,300 300,570 570,870 870,960
and it turns out, you

1770
01:01:33,150 --> 01:01:34,200
0,90 90,210 210,270 270,480 480,1050
know as the paper described,|

1771
01:01:34,200 --> 01:01:35,280
0,90 90,210 210,450 450,960 960,1080
it was most convenient to

1772
01:01:35,280 --> 01:01:37,470
0,240 240,390 390,870 1260,1920 1920,2190
actually do this {} at

1773
01:01:37,470 --> 01:01:40,080
0,1830 1830,2100 2100,2250 2250,2370 2370,2610
the tail end of it,|

1774
01:01:40,260 --> 01:01:41,220
0,150 150,450 450,630 630,720 720,960
so basically make the new

1775
01:01:41,220 --> 01:01:44,960
0,750 870,1740 1980,2730 2730,3270
server, the new tail.|

1776
01:01:45,170 --> 01:01:46,130
0,360 360,480 480,570 570,750 750,960
And so the way that

1777
01:01:46,130 --> 01:01:47,390
0,180 180,630 630,840 840,1200 1200,1260
we proceed is| select the

1778
01:01:47,390 --> 01:01:49,820
0,360 360,480 480,990 1350,1800 1800,2430
client is here,| talking to

1779
01:01:49,850 --> 01:01:51,590
0,540 540,900 900,1260 1260,1650 1650,1740
{S2 -},| because that's the

1780
01:01:51,590 --> 01:01:53,300
0,300 300,840 960,1410 1410,1530 1530,1710
current tail,| {} {S3 -}

1781
01:01:53,300 --> 01:01:54,890
0,180 180,720 840,1140 1140,1500 1500,1590
comes up| and basically the

1782
01:01:54,890 --> 01:01:55,610
0,210 210,360 360,420 420,660 660,720
first thing it does is

1783
01:01:55,610 --> 01:01:57,050
0,60 60,360 360,1050 1050,1170 1170,1440
it actually copies {you,know} old

1784
01:01:57,050 --> 01:01:59,090
0,540 540,870 870,1080 1080,1470 1470,2040
state from {S3 -} to,|

1785
01:01:59,180 --> 01:02:00,080
0,240 240,390 390,510 510,660 660,900
{from,S2 -} to {S3 -}.|

1786
01:02:01,040 --> 01:02:01,910
0,180 180,270 270,420 420,540 540,870
And so this may take

1787
01:02:01,910 --> 01:02:04,040
0,540 930,1260 1260,1590 1590,1710 1710,2130
hours, right,| where you know

1788
01:02:04,460 --> 01:02:05,780
0,450 450,510 510,900 900,1080 1080,1320
tens of minutes, or maybe

1789
01:02:05,780 --> 01:02:06,980
0,300 300,630 630,900 900,990 990,1200
indeed multiple hours| you're going

1790
01:02:06,980 --> 01:02:09,140
0,210 210,810 1050,1800 1800,1890 1890,2160
we're copying gigabytes of data

1791
01:02:09,140 --> 01:02:10,400
0,120 120,630 630,720 720,1080 1080,1260
or terabytes of data from

1792
01:02:10,400 --> 01:02:11,360
0,180 180,330 330,420 420,570 570,960
{S2 -} to {S3 -},|

1793
01:02:11,630 --> 01:02:12,920
0,210 210,570 570,750 750,1200 1200,1290
but while that's happening,| you

1794
01:02:12,920 --> 01:02:14,450
0,210 210,390 390,570 570,660 660,1530
know {S2 -} and {S3

1795
01:02:14,450 --> 01:02:16,220
0,270 270,420 420,810 810,1080 1080,1770
-} can just serve request,|

1796
01:02:16,880 --> 01:02:18,350
0,90 90,600 870,1110 1110,1320 1320,1470
of course it does have

1797
01:02:18,350 --> 01:02:20,690
0,90 90,450 450,720 720,1440 1620,2340
to remember which ones {}

1798
01:02:20,690 --> 01:02:22,670
0,450 450,720 720,930 930,1560 1560,1980
are came in after {S3

1799
01:02:22,670 --> 01:02:24,170
0,180 180,630 630,1020 1050,1320 1320,1500
-} start copy,| so keep

1800
01:02:24,170 --> 01:02:25,100
0,60 60,360 360,690 690,870 870,930
a list of all the

1801
01:02:25,100 --> 01:02:26,240
0,480 480,630 630,720 720,900 900,1140
updates,| that are sort of

1802
01:02:26,810 --> 01:02:28,310
0,690 690,990 990,1200 1200,1320 1320,1500
happened,| but there have not

1803
01:02:28,310 --> 01:02:29,780
0,120 120,660 660,750 750,1080 1080,1470
been propagated to S3 yet,|

1804
01:02:29,900 --> 01:02:31,160
0,420 420,600 600,840 840,990 990,1260
at some point {S3 -}

1805
01:02:31,160 --> 01:02:32,900
0,660 660,840 840,990 990,1050 1050,1740
done with all the copying|

1806
01:02:33,080 --> 01:02:34,460
0,240 240,540 540,960 960,1110 1110,1380
and basically tells {S2 -}

1807
01:02:34,460 --> 01:02:36,320
0,210 210,360 360,780 1140,1440 1440,1860
{} okay, man, I'm ready

1808
01:02:36,320 --> 01:02:37,310
0,90 90,210 210,300 300,570 570,990
you know to become {the,tail},|

1809
01:02:37,310 --> 01:02:38,330
0,90 90,300 300,450 450,510 510,1020
I got all the state

1810
01:02:38,660 --> 01:02:40,610
0,480 480,780 780,1110 1140,1830 1830,1950
{S2 -},| {so,sends -} an

1811
01:02:40,610 --> 01:02:43,130
0,480 480,840 1080,1500 1830,2280 2280,2520
email basically email message,| {S2

1812
01:02:43,130 --> 01:02:44,720
0,180 180,660 660,1020 1020,1440 1440,1590
-} saying okay I want

1813
01:02:44,720 --> 01:02:46,820
0,60 60,390 450,930 1110,1860 1890,2100
to be {} {the,tail},| {S2

1814
01:02:46,820 --> 01:02:48,230
0,150 150,870 870,1020 1020,1230 1230,1410
-} responses, like yeah that's

1815
01:02:48,230 --> 01:02:50,420
0,630 750,1170 1170,1350 1350,1680 1680,2190
okay,| {} but once your

1816
01:02:50,450 --> 01:02:52,380
0,780 780,930 930,1050 1050,1680
applied all the updates.|

1817
01:02:54,030 --> 01:02:55,110
0,240 240,420 420,780 780,930 930,1080
And so basically {S2 -}

1818
01:02:55,110 --> 01:02:56,610
0,270 270,360 360,810 810,1050 1050,1500
sends the updates in response

1819
01:02:56,610 --> 01:02:58,800
0,390 390,930 960,1320 1320,1980 1980,2190
to {} this,| I want

1820
01:02:58,800 --> 01:02:59,580
0,120 120,360 360,540 540,600 600,780
to go on to come

1821
01:02:59,580 --> 01:03:00,920
0,270 270,270
to {}

1822
01:03:01,010 --> 01:03:03,200
0,150 150,870 870,1320 1320,1830 1830,2190
a tail request,| in response

1823
01:03:03,200 --> 01:03:05,330
0,870 900,1200 1200,1350 1350,1800 1890,2130
that to {S3 -},| S3

1824
01:03:05,330 --> 01:03:07,040
0,480 480,570 570,1200 1380,1560 1560,1710
replies the updates| and then

1825
01:03:07,040 --> 01:03:10,370
0,600 600,690 1410,2100 2610,3270 3270,3330
becomes {you,know,the} tail,| and you

1826
01:03:10,370 --> 01:03:11,690
0,390 390,810 810,930 930,1050 1050,1320
know clients that we're talking

1827
01:03:11,690 --> 01:03:12,800
0,300 300,510 510,780 840,960 960,1110
to S2| and S2 can

1828
01:03:12,800 --> 01:03:13,880
0,210 210,480 480,870 870,930 930,1080
tell the client,| you know

1829
01:03:13,880 --> 01:03:14,660
0,90 90,330 330,510 510,600 600,780
from now on, I'm not

1830
01:03:14,660 --> 01:03:15,740
0,270 270,660 660,780 780,900 900,1080
tail anymore,| you should talk

1831
01:03:15,740 --> 01:03:16,610
0,60 60,150 150,480 570,750 750,870
to {S3 -}| and so

1832
01:03:16,610 --> 01:03:17,900
0,150 150,270 270,840
they can swap

1833
01:03:17,960 --> 01:03:19,440
0,120 120,240 240,390 390,900
you know that direction.|

1834
01:03:19,470 --> 01:03:21,300
0,150 150,270 270,570 570,1140 1230,1830
And so that's the way

1835
01:03:21,300 --> 01:03:23,280
0,180 180,510 510,780 780,1350 1350,1980
to add a replica into

1836
01:03:23,280 --> 01:03:24,440
0,150 150,540
a chain.|

1837
01:03:26,160 --> 01:03:28,020
0,390 450,930 930,1110 1110,1410 1440,1860
So question on this, {}|

1838
01:03:28,140 --> 01:03:29,190
0,210 210,480 480,660 660,840 840,1050
don't you run into this

1839
01:03:29,190 --> 01:03:30,780
0,150 150,600 600,810 810,1110 1110,1590
like infinite loop problem,| {where,S2

1840
01:03:30,780 --> 01:03:32,040
0,180 180,480 480,900 900,1020 1020,1260
-} sends updates to {S3

1841
01:03:32,040 --> 01:03:33,060
0,300 300,420 420,630 630,810 810,1020
-}| and when {S3 -}

1842
01:03:33,060 --> 01:03:34,920
0,120 120,390 630,1380 1380,1590 1590,1860
is like updating, its also

1843
01:03:34,920 --> 01:03:36,660
0,510 510,750 750,1440 1440,1560 1560,1740
serving more requests,| so as

1844
01:03:36,660 --> 01:03:38,250
0,210 210,960 990,1290 1290,1500 1500,1590
more updates than needs to

1845
01:03:38,250 --> 01:03:39,180
0,240 240,390 390,600 600,810 810,930
send and goes back and

1846
01:03:39,180 --> 01:03:40,060
0,480
forth.|

1847
01:03:40,280 --> 01:03:42,470
0,540 540,1230 1230,1500 1500,1740 1740,2190
No, no, once {S2 -}

1848
01:03:42,470 --> 01:03:44,150
0,210 210,690 690,930 930,1470 1470,1680
have sent the updates,| {S3

1849
01:03:44,180 --> 01:03:45,200
0,120 120,300 300,510 510,750 750,1020
-} have not seen yet

1850
01:03:45,200 --> 01:03:46,640
0,150 150,300 300,480 480,960 1170,1440
{you,know} to {S2 -} to

1851
01:03:46,640 --> 01:03:48,140
0,480 600,930 930,1050 1050,1230 1230,1500
S3,| then from then on

1852
01:03:48,140 --> 01:03:50,120
0,300 300,780 780,1020 1020,1590 1590,1980
the normal chain replication,| whenever

1853
01:03:50,120 --> 01:03:51,620
0,150 150,360 360,600 600,1020 1020,1500
{S2 -} gets a request,|

1854
01:03:51,620 --> 01:03:52,910
0,180 180,540 540,660 660,810 810,1290
an update from {S1 -}

1855
01:03:53,090 --> 01:03:54,230
0,360 360,780 780,870 870,990 990,1140
it forwards it to {S3

1856
01:03:54,230 --> 01:03:55,060
0,360
-}.|

1857
01:03:57,400 --> 01:03:58,600
0,330 330,480 480,690 690,900 900,1200
Right, but {S3 -} can

1858
01:03:58,600 --> 01:03:59,860
0,300 300,390 390,780 780,1170 1170,1260
become the tail until it

1859
01:03:59,860 --> 01:04:01,660
0,90 90,750 750,1380 1410,1680 1680,1800
is successfully processed all the

1860
01:04:01,660 --> 01:04:03,550
0,450 450,690 690,930 930,1290 1290,1890
updates.| Oh, yeah so, {}

1861
01:04:03,580 --> 01:04:05,140
0,690 690,1170 1170,1260 1260,1440 1440,1560
yeah, once it sets up

1862
01:04:05,140 --> 01:04:06,610
0,60 60,480 480,840 840,1290 1290,1470
the TCP channel,| basically {S2

1863
01:04:06,610 --> 01:04:07,810
0,210 210,420 420,570 570,750 750,1200
-} can just say like

1864
01:04:07,810 --> 01:04:09,370
0,330 510,780 780,960 960,1350 1350,1560
for,| once you've processed these

1865
01:04:09,370 --> 01:04:10,930
0,540 570,780 780,900 900,1140 1140,1560
guys,| you can become {the,tail},|

1866
01:04:10,930 --> 01:04:12,430
0,210 210,390 390,600 600,1020 1380,1500
because you've seen everything,| I

1867
01:04:12,430 --> 01:04:13,780
0,420 420,630 630,870 870,1230 1230,1350
mean and everything else you

1868
01:04:13,780 --> 01:04:15,190
0,180 180,510 540,840 840,1080 1080,1410
can be pipe lined after

1869
01:04:15,190 --> 01:04:16,300
0,270 300,570 570,660 660,750 750,1110
that, right,| in the same

1870
01:04:16,300 --> 01:04:17,580
0,390 390,870
TCP channel.|

1871
01:04:19,040 --> 01:04:20,720
0,510 510,720 720,1080 1080,1200 1200,1680
It could become the tail,

1872
01:04:20,720 --> 01:04:22,460
0,450 480,840 840,1290 1320,1500 1500,1740
right, right after,| like even

1873
01:04:22,460 --> 01:04:23,870
0,330 330,450 450,810 810,930 930,1410
before it processes the update,|

1874
01:04:23,870 --> 01:04:24,770
0,360 360,540 540,720 720,840 840,900
{} as long as it

1875
01:04:24,770 --> 01:04:26,990
0,270 270,600 600,1410 1890,2100 2100,2220
doesn't serve requests.| As long

1876
01:04:26,990 --> 01:04:27,950
0,60 60,120 120,330 330,540 540,960
as it doesn't serve requests

1877
01:04:27,950 --> 01:04:29,030
0,450 450,720 720,780 780,930 930,1080
exactly, right,| it just has

1878
01:04:29,030 --> 01:04:30,110
0,90 90,420 420,570 570,660 660,1080
to process all the updates,|

1879
01:04:30,110 --> 01:04:31,220
0,180 180,300 300,450 450,600 600,1110
that {S2 -} is received

1880
01:04:31,220 --> 01:04:32,930
0,150 150,300 300,780 1170,1590 1590,1710
{S3 -} not,| once we

1881
01:04:32,930 --> 01:04:35,690
0,360 360,750 750,990 990,1050 1050,2760
updated those,| then it becomes

1882
01:04:35,690 --> 01:04:37,640
0,210 210,480 480,900 900,1590
{tail,and} start processing request.|

1883
01:04:38,780 --> 01:04:40,280
0,150 150,390 390,600 600,1200 1230,1500
I see, so blocks like

1884
01:04:40,280 --> 01:04:41,990
0,600 600,870 870,960 960,1320 1320,1710
requests for a moment,| while

1885
01:04:41,990 --> 01:04:45,300
0,180 180,630 660,1080 1080,1560
it processes new update.|

1886
01:04:48,820 --> 01:04:49,960
0,600
Okay?|

1887
01:04:52,900 --> 01:04:54,940
0,420 420,540 540,1170 1200,1800 1800,2040
Okay, so now I wanna

1888
01:04:54,940 --> 01:04:56,050
0,90 90,540 540,630 630,870 870,1110
come back,| you know to

1889
01:04:56,050 --> 01:04:57,760
0,660 660,990 990,1410 1410,1470 1470,1710
basically questions, lots of people

1890
01:04:57,760 --> 01:04:59,590
0,330 330,630 630,810 810,1320 1320,1830
ask,| how this contrast to

1891
01:04:59,710 --> 01:05:01,990
0,300 300,630 1560,1860 1860,2070 2070,2280
sort of,| how our {CR

1892
01:05:01,990 --> 01:05:04,660
0,240 240,960 1320,1740 1740,2190 2190,2670
-} properties chain replication properties,|

1893
01:05:04,810 --> 01:05:05,680
0,240 240,510 510,660 660,810 810,870
how do how does it

1894
01:05:05,680 --> 01:05:07,040
0,690
compare,|

1895
01:05:07,700 --> 01:05:08,450
0,180 180,420 420,480 480,570 570,750
and one of the good

1896
01:05:08,450 --> 01:05:09,200
0,240 240,420 420,480 480,570 570,750
{}, one of the good

1897
01:05:09,200 --> 01:05:11,720
0,570 570,960 1020,1770 1770,2010 2010,2520
properties| and mostly with respectful

1898
01:05:11,720 --> 01:05:14,780
0,90 90,660 660,840 840,1710
in comparison to raft.|

1899
01:05:15,320 --> 01:05:16,580
0,120 120,180 180,510 510,990 1020,1260
And of course I got

1900
01:05:16,580 --> 01:05:17,510
0,60 60,330 330,420 420,690 690,930
to say,| of course like

1901
01:05:17,510 --> 01:05:20,780
0,390 930,1920 1920,2160 2160,2940 2940,3270
{} the chain replication just

1902
01:05:20,780 --> 01:05:22,520
0,480 480,810 840,1170 1170,1500 1500,1740
influence the primary backup scheme,|

1903
01:05:22,520 --> 01:05:24,350
0,120 120,570 660,720 720,1230 1230,1830
but not the configuration servers,|

1904
01:05:24,470 --> 01:05:25,250
0,210 210,330 330,450 450,690 690,780
so we'll come back to

1905
01:05:25,250 --> 01:05:25,880
0,180 180,240 240,390 390,510 510,630
that a little bit more

1906
01:05:25,880 --> 01:05:26,690
0,60 60,390 390,510 510,570 570,810
in detail,| but a couple

1907
01:05:26,690 --> 01:05:27,470
0,210 210,330 330,420 420,540 540,780
things that we can know,|

1908
01:05:27,470 --> 01:05:29,900
0,60 1110,1500 1500,1680 1680,2070 2070,2430
if we just compare sort

1909
01:05:30,260 --> 01:05:32,390
0,630 660,1350 1350,1470 1470,1740 1740,2130
of {the,way} the raft protocol

1910
01:05:32,390 --> 01:05:34,400
0,330 330,720 720,1140 1140,1500 1500,2010
works with the chain replication

1911
01:05:34,400 --> 01:05:35,260
0,510
protocol.|

1912
01:05:35,480 --> 01:05:36,530
0,450 450,630 630,690 690,960 960,1050
And first of all you

1913
01:05:36,530 --> 01:05:37,430
0,180 180,240 240,360 360,570 570,900
know we can achieve a

1914
01:05:37,430 --> 01:05:38,960
0,420 420,870 870,1110 1110,1320 1320,1530
positive aspect,| that's gonna chain

1915
01:05:38,960 --> 01:05:42,380
0,540 540,690 690,1050 1140,1950
replication is that {the,client}

1916
01:05:42,410 --> 01:05:44,120
0,180 180,960
{RPCs -}

1917
01:05:46,820 --> 01:05:48,680
0,420 420,540 540,900 900,1260 1260,1860
are in {} split between

1918
01:05:51,520 --> 01:05:52,150
0,210 210,300 300,450 450,540 540,630
to the head and the

1919
01:05:52,150 --> 01:05:54,040
0,660
tail.|

1920
01:05:56,600 --> 01:05:58,040
0,210 210,330 330,780 780,930 930,1440
That's a load of actually

1921
01:05:58,040 --> 01:05:59,720
0,480 480,900 900,1290 1290,1380 1380,1680
{} serving any {} client

1922
01:05:59,720 --> 01:06:00,920
0,480 480,660 660,810 810,900 900,1200
operation| that can be split

1923
01:06:00,920 --> 01:06:02,120
0,240 240,600 600,720 720,810 810,1200
actually between two of them,|

1924
01:06:02,210 --> 01:06:03,380
0,240 240,480 480,600 600,720 750,1170
they don't have to run

1925
01:06:03,380 --> 01:06:04,490
0,180 180,270 270,690 690,840 840,1110
through the leader as in

1926
01:06:04,490 --> 01:06:05,900
0,240 240,390 390,930
{} in raft.|

1927
01:06:06,410 --> 01:06:07,720
0,570
Furthermore,

1928
01:06:07,750 --> 01:06:09,910
0,210 210,480 480,1140 1440,1560 1560,2160
the head sends the update

1929
01:06:11,400 --> 01:06:14,070
0,660 1200,1410 1410,1830 1830,2010 2010,2670
once,| so unlike in raft,

1930
01:06:14,460 --> 01:06:16,710
0,300 300,1050 1140,1440 1440,1890 1920,2250
{} where the head or

1931
01:06:16,710 --> 01:06:18,510
0,210 210,660 660,1020 1020,1260 1260,1800
the leader basically sends updates,|

1932
01:06:18,510 --> 01:06:20,550
0,420 450,870 870,1170 1170,1530 1530,2040
{} {the,log} entry to every

1933
01:06:20,550 --> 01:06:22,230
0,690 780,1110 1110,1200 1200,1350 1350,1680
appear,| {} in this particular

1934
01:06:22,230 --> 01:06:23,790
0,450 450,810 810,900 900,1110 1110,1560
scheme actually it's only happened

1935
01:06:23,790 --> 01:06:25,860
0,540 630,1170 1170,1440 1440,1620 1620,2070
the head always sends one

1936
01:06:26,040 --> 01:06:28,320
0,720 750,1200 1200,1350 1350,1830
{} basically {RPC -}.|

1937
01:06:28,580 --> 01:06:29,510
0,180 180,300 300,420 420,630 630,930
And so there are fewer

1938
01:06:29,510 --> 01:06:34,040
0,390 390,960 1710,2370 2880,3750 3780,4530
messages involved,| {} reads or

1939
01:06:34,070 --> 01:06:35,820
0,390 390,1140
create operations

1940
01:06:36,630 --> 01:06:38,680
0,510 510,1200
involve only,

1941
01:06:40,780 --> 01:06:42,920
0,360 360,870 900,1380
only the tail,|

1942
01:06:43,160 --> 01:06:44,510
0,120 120,540 540,720 720,810 810,1350
{unlike -} in the raft,|

1943
01:06:44,510 --> 01:06:46,160
0,90 90,240 240,990 1260,1410 1410,1650
you know the if you

1944
01:06:46,160 --> 01:06:47,480
0,270 270,390 390,480 480,960 960,1320
even if you implement the

1945
01:06:47,480 --> 01:06:50,000
0,210 210,540 540,1470 1650,2340 2370,2520
read only optimization,| the read

1946
01:06:50,000 --> 01:06:53,180
0,240 240,870 1410,2490 2520,2910 2910,3180
only optimization avoid having read

1947
01:06:53,180 --> 01:06:55,070
0,480 480,690 690,1020 1020,1230 1230,1890
operation go through the log|

1948
01:06:55,220 --> 01:06:56,870
0,810 810,990 990,1410 1410,1530 1530,1650
and being appended to all

1949
01:06:56,870 --> 01:06:58,130
0,60 60,270 270,390 390,870 1050,1260
the logs {} appears,| but

1950
01:06:58,130 --> 01:06:59,660
0,60 60,330 330,900 900,1080 1080,1530
it still requires that the

1951
01:06:59,810 --> 01:07:01,670
0,750 750,1110 1110,1320 1320,1800 1800,1860
leader actually {} contact the

1952
01:07:01,670 --> 01:07:03,200
0,600 600,690 690,780 780,1290 1350,1530
majority of the peers| to

1953
01:07:03,200 --> 01:07:05,960
0,630 750,1020 1020,1140 1140,1680 1680,2760
decide when it's actually a

1954
01:07:05,960 --> 01:07:08,500
0,1050 1050,1200 1200,1620 1650,2220
operation can be served.|

1955
01:07:09,820 --> 01:07:12,910
0,630 1140,1470 1470,1980 1980,2520 2520,3090
{} So, another positive aspect

1956
01:07:12,910 --> 01:07:13,780
0,60 60,180 180,540 540,690 690,870
of this [] is a

1957
01:07:13,780 --> 01:07:15,070
0,300 300,570 570,1050 1050,1170 1170,1290
simple crash recovery as we

1958
01:07:15,070 --> 01:07:17,880
0,210 210,660
talked about,|

1959
01:07:23,620 --> 01:07:25,090
0,600 630,900 900,1020 1020,1170 1170,1470
{} but you know a

1960
01:07:25,090 --> 01:07:27,220
0,270 270,900 1050,1620 1620,1950 1950,2130
major downside compared to sort

1961
01:07:27,220 --> 01:07:28,510
0,60 60,150 150,390 390,930 960,1290
of the raft scheme| is

1962
01:07:28,510 --> 01:07:31,090
0,480 480,630 630,750 750,1290 1830,2580
that you have one failure

1963
01:07:34,450 --> 01:07:36,380
0,540 540,660 660,1440
requires {reconfiguration -}.|

1964
01:07:44,720 --> 01:07:46,190
0,330 330,390 390,930 960,1290 1290,1470
And the reason now that

1965
01:07:46,190 --> 01:07:48,230
0,210 210,1110 1110,1470 1470,1920 1920,2040
the reconfiguration are required is|

1966
01:07:48,230 --> 01:07:50,540
0,330 330,630 660,1440 1710,2070 2070,2310
because like write actually have

1967
01:07:50,540 --> 01:07:51,320
0,90 90,300 300,480 480,570 570,780
to go through the whole

1968
01:07:51,320 --> 01:07:52,280
0,420
chain,|

1969
01:07:52,340 --> 01:07:53,720
0,240 240,780 870,1110 1110,1260 1260,1380
and so, {} and the

1970
01:07:53,720 --> 01:07:55,220
0,210 210,540 540,1020 1020,1350 1350,1500
write cannot acknowledge until that

1971
01:07:55,220 --> 01:07:57,170
0,570 780,1290 1290,1470 1470,1620 1620,1950
every server in the chain

1972
01:07:57,170 --> 01:07:58,760
0,240 240,420 420,1080
actually has processes.|

1973
01:07:58,880 --> 01:07:59,810
0,120 120,240 240,360 360,570 570,930
And that is actually slightly

1974
01:07:59,810 --> 01:08:01,010
0,330 330,630 630,990 990,1080 1080,1200
different, correct,| raft as you

1975
01:08:01,010 --> 01:08:02,870
0,180 180,630 780,1260 1260,1740 1740,1860
well know,| because assume it's

1976
01:08:02,870 --> 01:08:05,210
0,570 570,900 900,1740 1740,2010 2010,2340
basically {} majority, the peers

1977
01:08:05,210 --> 01:08:06,890
0,300 300,900 900,990 990,1440 1440,1680
actually accepted the particular write

1978
01:08:06,890 --> 01:08:08,750
0,450 450,900 900,990 990,1230 1230,1860
operation independent to their logs,|

1979
01:08:08,750 --> 01:08:10,040
0,120 120,420 420,540 540,720 720,1290
the system can just proceed,|

1980
01:08:10,640 --> 01:08:11,990
0,150 150,270 270,480 480,750 750,1350
and so there's actually no

1981
01:08:11,990 --> 01:08:13,700
0,540 540,660 660,1020 1020,1290 1290,1710
interruption at all,| if one

1982
01:08:13,700 --> 01:08:15,640
0,330 330,750 750,900 900,1350
server fails,| for example,

1983
01:08:16,120 --> 01:08:17,380
0,180 180,480 480,780 780,1050 1050,1260
if the remaining servers still

1984
01:08:17,380 --> 01:08:19,480
0,240 240,300 300,840 1200,1860 1860,2100
form a majority,| while {in,chain}

1985
01:08:19,480 --> 01:08:21,580
0,690 780,1200 1200,1530 1530,1920 1920,2100
replication,| if one server would

1986
01:08:21,580 --> 01:08:23,170
0,570 630,1020 1020,1110 1110,1260 1260,1590
fail,| then you know somebody's

1987
01:08:23,170 --> 01:08:24,490
0,510 510,750 750,960 960,1020 1020,1320
reconfiguration actually has to happen|

1988
01:08:24,490 --> 01:08:25,840
0,210 210,570 570,1050 1050,1200 1200,1350
which means there's gonna be

1989
01:08:25,840 --> 01:08:27,910
0,60 60,390 390,870 930,1500 1500,2070
a short period probably downtime,

1990
01:08:28,490 --> 01:08:29,540
0,510
right.|

1991
01:08:29,540 --> 01:08:30,900
0,90 90,180 180,330 330,720
Does that make sense?|

1992
01:08:35,010 --> 01:08:36,150
0,600 720,870 870,990 990,1050 1050,1140
Now I want to make

1993
01:08:36,150 --> 01:08:37,920
0,240 240,450 450,900 900,1230 1230,1770
one more point| {sort,of} in

1994
01:08:37,950 --> 01:08:39,210
0,720 720,780 780,900 900,1080 1080,1260
contrast you know to sort

1995
01:08:39,210 --> 01:08:41,160
0,90 90,660 690,1050 1050,1500 1500,1950
of the raft replication scheme

1996
01:08:41,370 --> 01:08:43,260
0,390 390,930 1230,1620 1620,1710 1710,1890
is this,| because the read

1997
01:08:43,260 --> 01:08:45,150
0,510 510,1020 1020,1260 1260,1410 1410,1890
operations involve only one server,|

1998
01:08:45,150 --> 01:08:47,800
0,270 270,420 420,1140 1170,2040
there's a cool {}

1999
01:08:47,800 --> 01:08:49,180
0,600 600,720 720,840 840,1200 1200,1380
extension,| if you will that

2000
01:08:49,180 --> 01:08:50,260
0,210 210,450 450,660 660,870 870,1080
actually gets really high read

2001
01:08:50,260 --> 01:08:52,360
0,720 900,1230 1230,1650 1710,1860 1860,2100
performance,| and so the basic

2002
01:08:52,360 --> 01:08:53,920
0,270 270,360 360,450 450,1110
idea is as follows,|

2003
01:08:55,710 --> 01:08:56,940
0,660

2004
01:09:10,550 --> 01:09:12,320
0,480 480,600 600,870 870,1410 1410,1770
{} the basic {idea,is} basically

2005
01:09:12,320 --> 01:09:13,970
0,90 90,720 750,900 900,1080 1080,1650
to split| you know the

2006
01:09:14,560 --> 01:09:16,180
0,300 300,810 810,1170 1200,1320 1320,1620
split objects or they call

2007
01:09:16,180 --> 01:09:17,950
0,480 480,600 600,780 780,1290 1320,1770
volumes in the paper,| split

2008
01:09:17,950 --> 01:09:19,500
0,180 180,780
the objects

2009
01:09:19,500 --> 01:09:21,520
0,510 510,900 900,1500
across multiple chains.|

2010
01:09:27,360 --> 01:09:28,350
0,180 180,450 450,510 510,780 780,990
So instead of having one

2011
01:09:28,350 --> 01:09:29,490
0,300 300,450 450,840 840,1080 1080,1140
chain that I've done in

2012
01:09:29,490 --> 01:09:31,140
0,90 90,660 660,1290 1290,1530 1530,1650
the previous boards,| we're going

2013
01:09:31,140 --> 01:09:32,640
0,60 60,210 210,600 600,1110 1290,1500
to have multiple chains| and

2014
01:09:32,640 --> 01:09:33,630
0,120 120,180 180,660 660,780 780,990
so for example we might

2015
01:09:33,630 --> 01:09:35,340
0,180 180,690 720,990 990,1170 1170,1710
have {} {CH1 - -}

2016
01:09:36,180 --> 01:09:38,130
0,420 420,570 570,870 870,1380 1560,1950
{} in chain one,| {S1

2017
01:09:38,130 --> 01:09:40,320
0,600 1080,1260 1260,1710 1710,1890 1890,2190
-} is {the,head}, {S2,is -}

2018
01:09:40,320 --> 01:09:41,880
0,390 420,690 690,1080 1080,1410 1410,1560
the middle guy {and,S3 -

2019
01:09:41,880 --> 01:09:43,200
0,270 270,360 360,720
-} {is,the} tail.|

2020
01:09:43,260 --> 01:09:45,560
0,240 240,600 600,1140
And chain two,

2021
01:09:45,830 --> 01:09:47,060
0,210 210,390 390,510 510,780 780,1230
{you,know} we're going to rotate

2022
01:09:47,060 --> 01:09:48,440
0,180 180,660 720,990 990,1260 1260,1380
things around,| {S2 -} as

2023
01:09:48,440 --> 01:09:49,970
0,90 90,480 540,900 900,1350 1350,1530
the head, {S3 -} is

2024
01:09:49,970 --> 01:09:53,060
0,1230 1230,1470 1470,1950 1980,2370 2910,3090
the middle guy,| oops, {S3,is

2025
01:09:53,060 --> 01:09:55,220
0,240 240,300 300,480 480,1020 1200,2160
-} the middle guy and

2026
01:09:55,400 --> 01:09:57,420
0,240 240,810 840,990 990,1560
{S1 -} is {the,tail}.|

2027
01:09:57,630 --> 01:10:00,300
0,300 300,720 720,1200 2370,2550 2550,2670
And chain 3, we're going

2028
01:10:00,300 --> 01:10:01,530
0,60 60,390 390,660 660,1080 1080,1230
to arrange {} basically {S3

2029
01:10:01,530 --> 01:10:02,550
0,210 210,330 330,390 390,600 600,1020
-} as the head guy,|

2030
01:10:02,550 --> 01:10:05,430
0,270 270,570 570,1020 1470,2310 2430,2880
{S2 -} as, {} oops

2031
01:10:05,460 --> 01:10:06,870
0,210 210,720 720,780 780,990 990,1410
{S1 -} the middle guy

2032
01:10:06,870 --> 01:10:08,280
0,120 120,270 270,750 1140,1320 1320,1410
and {S2 -} is the

2033
01:10:08,280 --> 01:10:09,220
0,480
tail.|

2034
01:10:09,710 --> 01:10:10,730
0,450 450,630 630,750 750,900 900,1020
Basically we're gonna do is|

2035
01:10:10,730 --> 01:10:12,560
0,90 90,210 210,270 270,750 960,1830
we're going to split objects

2036
01:10:12,560 --> 01:10:13,910
0,330 330,480 480,810 810,1170 1170,1350
across these multiple chains,| so

2037
01:10:13,910 --> 01:10:15,380
0,90 90,660 660,1050 1050,1350 1350,1470
the configuration server basically has

2038
01:10:15,380 --> 01:10:16,490
0,60 60,600 600,720 720,840 840,1110
a map,| you know saying

2039
01:10:16,490 --> 01:10:18,200
0,240 240,600 660,1200 1200,1650 1650,1710
let go shard one you

2040
01:10:18,200 --> 01:10:19,550
0,120 120,570 570,690 690,1050 1050,1350
know objects {in,shard} one {go,to}

2041
01:10:19,550 --> 01:10:22,790
0,270 270,750 990,2640 2640,2910 2910,3240
chain one,| object shard two

2042
01:10:22,790 --> 01:10:24,260
0,150 150,270 270,570 570,1020 1020,1470
go to chain two,| objects

2043
01:10:24,260 --> 01:10:25,400
0,270 270,600 600,780 780,960 960,1140
shard three now go to

2044
01:10:25,400 --> 01:10:26,380
0,240 240,510
chain three.|

2045
01:10:27,140 --> 01:10:28,100
0,300 300,510 510,750 750,870 870,960
{} And what is the

2046
01:10:28,100 --> 01:10:29,180
0,210 210,450 450,720 720,840 840,1080
cool part about it is

2047
01:10:29,180 --> 01:10:31,310
0,420 690,1380 1380,1560 1560,1950 1980,2130
that,| {} you know, we

2048
01:10:31,310 --> 01:10:33,470
0,210 210,570 570,1230 1620,1980 1980,2160
have multiple tails| and as

2049
01:10:33,470 --> 01:10:35,030
0,180 180,390 390,1110 1140,1320 1320,1560
well as {three,tail} for some

2050
01:10:35,030 --> 01:10:36,290
0,570 600,750 750,990 990,1110 1110,1260
chain,| {S1 -} is it's

2051
01:10:36,290 --> 01:10:38,600
0,870 870,1140 1140,1260 1260,1830 1830,2310
a tale for some chain,|

2052
01:10:38,690 --> 01:10:39,740
0,330 330,570 570,690 690,750 750,1050
{S2 -} is a tail

2053
01:10:39,740 --> 01:10:41,600
0,180 180,420 420,780 1290,1470 1470,1860
for some chain| and basically

2054
01:10:41,600 --> 01:10:43,670
0,240 240,810 810,1110 1110,1440 1440,2070
read operations produce different chain|

2055
01:10:43,790 --> 01:10:45,680
0,720 720,840 840,960 960,1380 1380,1890
can now be completely executed

2056
01:10:45,680 --> 01:10:47,480
0,90 90,660 720,1170 1260,1680 1680,1800
in parallel,| so if the

2057
01:10:47,480 --> 01:10:48,920
0,210 210,810 810,1140 1140,1350 1350,1440
read operations hit all the

2058
01:10:48,920 --> 01:10:50,840
0,300 300,990 1200,1500 1500,1710 1710,1920
different shards,| {} sort of

2059
01:10:50,840 --> 01:10:52,610
0,450 450,900 900,1350 1350,1410 1410,1770
uniform spread,| basically you know

2060
01:10:52,610 --> 01:10:53,900
0,150 150,780 780,1020 1020,1200 1200,1290
our {read,throughput} is going to

2061
01:10:53,900 --> 01:10:55,820
0,630 630,1290 1290,1440 1440,1530 1530,1920
increase linearly with the number

2062
01:10:55,820 --> 01:10:56,990
0,210 210,570 570,900 900,1050 1050,1170
of {} tails that we

2063
01:10:56,990 --> 01:10:57,860
0,240 270,450 450,510 510,660 660,870
have| and in this case,

2064
01:10:57,860 --> 01:10:58,790
0,120 120,270 270,720 720,810 810,930
we have {three,tails},| so we

2065
01:10:58,790 --> 01:10:59,570
0,150 150,300 300,540 540,630 630,780
get three times to read

2066
01:10:59,570 --> 01:11:00,420
0,660
performance.|

2067
01:11:01,260 --> 01:11:02,010
0,150 150,240 240,360 360,690 690,750
So we did basically the

2068
01:11:02,010 --> 01:11:03,420
0,570 570,840 840,1230 1230,1350 1350,1410
same,| so we get a

2069
01:11:03,420 --> 01:11:04,110
0,150 150,270 270,360 360,450 450,690
little bit of the same

2070
01:11:04,110 --> 01:11:05,460
0,450 450,570 570,750 750,1050 1050,1350
properties the {zookeeper -} had,|

2071
01:11:05,730 --> 01:11:07,140
0,630 630,720 720,930 930,1290 1290,1410
where the read performance can

2072
01:11:07,140 --> 01:11:08,760
0,90 90,540 930,1410 1410,1530 1530,1620
be excellent,| scale with the

2073
01:11:08,760 --> 01:11:10,770
0,210 210,270 270,870 1230,1890 1890,2010
number of servers,| but we

2074
01:11:10,770 --> 01:11:12,090
0,300 300,540 540,750 750,960 960,1320
also get not only that,|

2075
01:11:12,090 --> 01:11:13,470
0,90 90,300 300,420 420,780 780,1380
we get the scale part,|

2076
01:11:13,980 --> 01:11:15,360
0,210 210,330 330,1050 1050,1140 1140,1380
but we maintain the {linearizability

2077
01:11:15,360 --> 01:11:18,750
0,150 150,630 2520,2730 2730,2880 2880,3390
- -},| in this scheme,

2078
01:11:18,750 --> 01:11:19,500
0,150 150,330 330,450 450,540 540,750
we don't have to actually

2079
01:11:19,500 --> 01:11:20,790
0,180 180,420 420,570 570,810 810,1290
give up on {linearizability -}.|

2080
01:11:22,580 --> 01:11:24,500
0,570 600,810 810,870 870,990 990,1920
So when we get to

2081
01:11:24,680 --> 01:11:26,840
0,390 390,690 690,1350 1350,1860 1860,2160
two nice properties,| namely good

2082
01:11:26,840 --> 01:11:28,310
0,150 150,720 720,840 840,1140 1140,1470
read performance and effective scaling

2083
01:11:28,310 --> 01:11:29,330
0,120 120,210 210,390 390,450 450,1020
with the number of servers,|

2084
01:11:29,720 --> 01:11:30,710
0,360 360,570 570,750 750,900 900,990
at least for each of

2085
01:11:30,710 --> 01:11:32,660
0,120 120,540 540,690 690,1380 1440,1950
two different {} chains, {}|

2086
01:11:32,660 --> 01:11:34,280
0,510 510,690 690,900 900,1080 1080,1620
and {} we got actually

2087
01:11:34,280 --> 01:11:35,600
0,480 480,600 600,960 960,1200 1200,1320
and we maintain {linearizability -

2088
01:11:35,600 --> 01:11:36,480
0,390
-}.|

2089
01:11:43,420 --> 01:11:44,960
0,180 180,480 480,630 630,1020
Any questions about this?|

2090
01:11:49,540 --> 01:11:50,410
0,300 300,390 390,510 510,810 810,870
Sorry, in this case,| the

2091
01:11:50,410 --> 01:11:52,870
0,720 750,1050 1050,1320 1320,1680 1680,2460
client when they are deciding

2092
01:11:53,080 --> 01:11:55,840
0,870 1380,1920 1920,2040 2040,2280 2280,2760
which chain to read from,|

2093
01:11:56,260 --> 01:11:57,850
0,480 480,630 630,750 750,960 960,1590
would they be able to,

2094
01:11:58,900 --> 01:12:00,040
0,150 150,420 420,630 630,750 750,1140
to do like to decide

2095
01:12:00,040 --> 01:12:01,210
0,540 540,630 630,810 810,930 930,1170
themselves| or do they need

2096
01:12:01,210 --> 01:12:04,030
0,180 180,750 750,1110 1620,2430 2430,2820
to contact the configuration server

2097
01:12:04,030 --> 01:12:06,100
0,120 120,780 1110,1440 1440,1620 1620,2070
to decide.| Yeah, so {this,is}

2098
01:12:06,100 --> 01:12:07,240
0,30 30,210 210,660 660,990 990,1140
a great question,| {} so

2099
01:12:07,240 --> 01:12:08,920
0,720 720,1020 1020,1110 1110,1350 1350,1680
typically and the paper actually

2100
01:12:08,920 --> 01:12:10,480
0,270 270,600 600,1110 1110,1380 1380,1560
doesn't really explicit about it,|

2101
01:12:10,480 --> 01:12:11,650
0,90 90,150 150,540 570,930 930,1170
you know they talk about

2102
01:12:11,650 --> 01:12:13,840
0,270 270,630 630,900 900,1470 1650,2190
maybe talking through proxy to

2103
01:12:13,870 --> 01:12:15,580
0,450 450,870 870,1020 1290,1530 1530,1710
{} {servers -},| {} what

2104
01:12:15,580 --> 01:12:16,240
0,90 90,180 180,300 300,390 390,660
you will do in lab

2105
01:12:16,240 --> 01:12:17,440
0,480 480,570 570,990 990,1080 1080,1200
4 is basically you will

2106
01:12:17,440 --> 01:12:19,570
0,420 420,510 510,1170 1410,1560 1560,2130
download the configuration,| the configuration

2107
01:12:19,570 --> 01:12:21,430
0,120 120,810 810,870 870,1230 1230,1860
will include the shard assignment,|

2108
01:12:21,880 --> 01:12:23,650
0,150 150,810 840,1200 1200,1380 1380,1770
{} and {} you download

2109
01:12:23,650 --> 01:12:24,880
0,150 150,270 270,360 360,840 840,1230
that from the configuration server.|

2110
01:12:28,820 --> 01:12:29,690
0,180 180,360 360,420 420,510 510,870
You need to be careful

2111
01:12:29,690 --> 01:12:30,740
0,270 270,450 450,600 600,930 930,1050
about how you order the

2112
01:12:30,740 --> 01:12:31,760
0,570 570,690 690,810 810,900 900,1020
servers in each of the

2113
01:12:31,760 --> 01:12:33,560
0,480 480,810 810,1140 1200,1350 1350,1800
chains,| prevent like a particular

2114
01:12:33,560 --> 01:12:35,420
0,270 270,420 420,600 600,1560 1740,1860
chain from being oversaturated| or

2115
01:12:35,420 --> 01:12:36,710
0,60 60,510 510,900 900,1200 1200,1290
{} particular link between like

2116
01:12:36,710 --> 01:12:38,020
0,210 210,840
two servers.|

2117
01:12:38,140 --> 01:12:39,910
0,450 450,1080 1080,1320 1320,1530 1530,1770
{} Yeah, this, this, this,

2118
01:12:39,910 --> 01:12:41,350
0,150 150,750 750,1110 1110,1260 1260,1440
this scheme doesn't really take

2119
01:12:41,350 --> 01:12:42,820
0,210 210,540 540,1140 1140,1290 1290,1470
that into account,| {} you

2120
01:12:42,820 --> 01:12:44,440
0,90 90,570 570,990 990,1080 1080,1620
can imagine like the configuration

2121
01:12:44,440 --> 01:12:46,150
0,300 300,810 810,900 900,1380 1380,1710
plan or the configuration manager

2122
01:12:46,150 --> 01:12:47,530
0,150 150,240 240,900 900,1290 1290,1380
has a sophisticated model of

2123
01:12:47,530 --> 01:12:48,970
0,300 300,450 450,540 540,1020 1020,1440
actually how the network is

2124
01:12:48,970 --> 01:12:49,990
0,210 210,540 540,780 780,870 870,1020
laid out| and you know

2125
01:12:49,990 --> 01:12:50,920
0,120 120,210 210,450 450,750 750,930
can be very careful about

2126
01:12:50,920 --> 01:12:51,970
0,180 180,270 270,630 630,690 690,1050
how the chains are done.|

2127
01:12:53,810 --> 01:12:55,340
0,390 390,570 570,900 900,1200 1200,1530
Maybe even shard more shards

2128
01:12:55,340 --> 01:12:56,390
0,90 90,300 300,720 720,780 780,1050
to one chain of fewer

2129
01:12:56,390 --> 01:12:58,250
0,390 390,480 480,780 780,1350 1350,1860
shards to another chain,| all

2130
01:12:58,250 --> 01:12:59,090
0,90 90,300 300,390 390,450 450,840
the stuff is in principle

2131
01:12:59,090 --> 01:13:01,100
0,450 540,930 930,1020 1020,1740 1830,2010
possible,| because the configuration can

2132
01:13:01,100 --> 01:13:02,600
0,210 210,450 450,600 600,930 1110,1500
just manage to just compute

2133
01:13:02,600 --> 01:13:04,160
0,330 330,420 420,780 780,1140 1170,1560
anything it likes,| in basically

2134
01:13:04,160 --> 01:13:06,000
0,300 360,660 660,750 750,1350
says use the assignment.|

2135
01:13:08,220 --> 01:13:09,540
0,210 210,450 810,990 990,1110 1110,1320
Thank you.| {} Can even

2136
01:13:09,540 --> 01:13:10,620
0,180 180,600 600,750 750,810 810,1080
read balance if it wants

2137
01:13:10,620 --> 01:13:11,420
0,240
to.|

2138
01:13:18,560 --> 01:13:19,430
0,120 120,210 210,300 300,630 630,870
{Answer -} the question, could

2139
01:13:19,430 --> 01:13:20,690
0,60 60,330 330,570 570,720 720,1260
you explain again how linearizability

2140
01:13:20,690 --> 01:13:22,010
0,120 120,420 420,570 570,870 870,1320
is kept under this {}

2141
01:13:22,010 --> 01:13:23,990
0,540 540,990 1110,1620 1620,1770 1770,1980
extension,| well, nothing has really

2142
01:13:23,990 --> 01:13:25,850
0,630 660,1230 1230,1410 1410,1650 1650,1860
changed,| {} we're still doing

2143
01:13:25,850 --> 01:13:27,800
0,360 360,1080 1080,1350 1350,1440 1440,1950
primary backup using a chain,|

2144
01:13:28,070 --> 01:13:30,890
0,570 570,1380 1410,2310 2310,2550 2550,2820
{} in {} and so

2145
01:13:30,890 --> 01:13:33,050
0,300 300,900 1110,1440 1440,1770 1770,2160
you know we basically carry

2146
01:13:33,050 --> 01:13:34,850
0,510 510,660 660,1050 1050,1500 1500,1800
over the {linearizability -} from

2147
01:13:34,850 --> 01:13:36,140
0,60 60,390 390,840 870,1110 1110,1290
the single chain| and that's

2148
01:13:36,140 --> 01:13:36,860
0,300
it.|

2149
01:13:42,470 --> 01:13:44,180
0,210 210,480 480,780 780,1020 1020,1710
This might be like speculative,|

2150
01:13:44,180 --> 01:13:45,830
0,150 150,360 360,690 690,1200 1200,1650
but how this compared to,|

2151
01:13:47,020 --> 01:13:48,250
0,150 150,390 390,600 600,750 750,1230
I guess maybe it's equivalent

2152
01:13:48,250 --> 01:13:49,420
0,90 90,360 360,780 780,1080 1080,1170
of just having groups of

2153
01:13:49,420 --> 01:13:52,060
0,480 480,630 630,1200 1230,2010 2370,2640
servers for each {like,link},| instead

2154
01:13:52,060 --> 01:13:53,170
0,60 60,330 330,750 750,840 840,1110
of having reusing the same

2155
01:13:53,170 --> 01:13:54,610
0,330 360,780 780,1140 1140,1260 1260,1440
ones,| or not for each

2156
01:13:54,610 --> 01:13:56,440
0,210 210,330 330,450 450,720 720,1830
link, but for each {}

2157
01:13:57,340 --> 01:13:58,450
0,390 390,480 480,600 600,990 990,1110
step in the chain,| so

2158
01:13:58,450 --> 01:13:59,950
0,180 180,630 630,780 780,1200 1200,1500
like S1 is like three

2159
01:13:59,950 --> 01:14:01,180
0,450 450,630 630,840 840,1020 1020,1230
servers,| {S2 -} as three

2160
01:14:01,180 --> 01:14:03,280
0,570 870,1170 1170,1410 1440,2010 2010,2100
servers,| instead of reusing the

2161
01:14:03,280 --> 01:14:04,840
0,240 240,630 900,1050 1050,1440 1440,1560
same one| and entering from

2162
01:14:04,840 --> 01:14:06,160
0,300 300,810
different points.|

2163
01:14:06,190 --> 01:14:09,010
0,210 210,1260 1290,2340 2340,2700 2700,2820
{} Yeah yeah, what would

2164
01:14:09,010 --> 01:14:10,030
0,120 120,180 180,510 510,600 600,1020
be the advantage of that

2165
01:14:10,090 --> 01:14:11,350
0,480 480,600 600,690 690,1170 1170,1260
scheme that you imagine.| I

2166
01:14:11,350 --> 01:14:14,360
0,150 150,420 420,540 540,1500
mean just for scalability,|

2167
01:14:14,860 --> 01:14:16,750
0,240 240,510 510,900 900,1260 1440,1890
while also maintain {} {linearizability

2168
01:14:16,750 --> 01:14:18,910
0,570 780,1350 1350,1800 1800,1890 1890,2160
-}.| Well, the the reason

2169
01:14:18,910 --> 01:14:20,350
0,300 300,390 390,660 660,750 750,1440
that this scheme is attractive

2170
01:14:20,350 --> 01:14:21,640
0,150 150,330 330,720 720,960 960,1290
is that,| {because,we} have {the,tail}

2171
01:14:21,640 --> 01:14:22,360
0,180 180,330 330,540 540,600 600,720
might have quite a bit

2172
01:14:22,360 --> 01:14:23,050
0,90 90,270 270,390 390,450 450,690
of load,| but the middle

2173
01:14:23,050 --> 01:14:25,000
0,210 210,720 750,1440 1440,1650 1650,1950
guy doesn't| {and,you,know} by having

2174
01:14:25,000 --> 01:14:26,740
0,210 210,390 390,1110 1230,1470 1470,1740
{sort,of} this arrangement,| we spread

2175
01:14:26,740 --> 01:14:28,150
0,90 90,330 330,630 630,780 780,1410
the load across all servers.|

2176
01:14:30,910 --> 01:14:32,500
0,210 210,540 540,900
I see, okay.|

2177
01:14:40,090 --> 01:14:41,300
0,270 270,660
Okay, good.|

2178
01:14:41,450 --> 01:14:42,740
0,360 390,810 810,1020 1020,1170 1170,1290
So maybe I want to

2179
01:14:42,740 --> 01:14:45,220
0,540 540,1050
summarize here,|

2180
01:14:47,850 --> 01:14:49,650
0,420 420,660 660,900 1320,1770 1770,1800
and sort of talk a

2181
01:14:49,650 --> 01:14:50,550
0,180 180,330 330,570 570,810 810,900
little bit about,| so we

2182
01:14:50,550 --> 01:14:53,250
0,180 180,330 330,660 660,1170 2280,2700
saw this approach one,| which

2183
01:14:53,250 --> 01:14:55,340
0,180 180,390 390,1230
we're {do,in} lab,|

2184
01:14:55,610 --> 01:14:57,050
0,330 330,450 450,630 630,1200 1200,1440
which we do {in,lab,3},| which

2185
01:14:57,050 --> 01:14:59,270
0,510 870,1410 1410,1590 1590,1710 1710,2220
is run all the operations

2186
01:14:59,270 --> 01:15:02,420
0,210 210,720 720,840 840,2220 2250,3150
through raft| and {or,the} replication,

2187
01:15:02,420 --> 01:15:03,920
0,90 90,360 360,780 780,1350 1350,1500
you know the configuration and

2188
01:15:03,920 --> 01:15:05,570
0,540 540,630 630,840 840,1290 1290,1650
replication is all built using

2189
01:15:05,570 --> 01:15:07,580
0,480 750,1470 1470,1560 1560,1800 1800,2010
{} raft| and nothing else

2190
01:15:07,580 --> 01:15:09,260
0,120 120,780 1080,1230 1230,1500 1500,1680
is involved| and then sort

2191
01:15:09,260 --> 01:15:10,640
0,60 60,180 180,600 600,1170 1200,1380
of this approach two,| you

2192
01:15:10,640 --> 01:15:12,050
0,90 90,300 300,420 420,840 1020,1410
know which is the topic

2193
01:15:12,050 --> 01:15:13,970
0,60 60,300 300,660 660,1230 1440,1920
of this particular paper, {}|

2194
01:15:13,970 --> 01:15:16,340
0,750 810,1170 1170,1230 1230,1770 1770,2370
where there's a configuration server,|

2195
01:15:16,400 --> 01:15:20,150
0,390 390,690 690,930 930,1920 3210,3750
perhaps built using raft or

2196
01:15:20,180 --> 01:15:20,990
0,150 150,450 450,570 570,630 630,810
{} paxos or a new

2197
01:15:20,990 --> 01:15:23,510
0,390 630,1230 1260,1560 1560,2010 2010,2520
one in a primary backup

2198
01:15:23,540 --> 01:15:25,660
0,720 720,1170
replication scheme,|

2199
01:15:26,010 --> 01:15:31,120
0,1500 1500,2190 2700,3510
{and,primary} backup using

2200
01:15:31,120 --> 01:15:34,600
0,660 660,1290
chain replication.|

2201
01:15:39,690 --> 01:15:41,130
0,480 480,630 630,720 720,1200 1200,1440
And you can see, you

2202
01:15:41,130 --> 01:15:42,840
0,90 90,540 540,1020 1020,1140 1140,1710
know hopefully there's a little

2203
01:15:42,840 --> 01:15:44,790
0,330 330,930 930,1050 1050,1470 1470,1950
clear,| there's some attractive properties

2204
01:15:44,790 --> 01:15:46,770
0,120 120,510 510,870 1200,1800 1800,1980
to approach 2,| {} in

2205
01:15:46,770 --> 01:15:48,540
0,90 90,420 420,840 1170,1560 1560,1770
the sense that,| {} you

2206
01:15:48,540 --> 01:15:50,250
0,210 210,420 420,840 840,990 990,1710
can get scalable {re-performance -}|

2207
01:15:50,370 --> 01:15:52,530
0,690 690,1050 1050,1230 1230,1530 1530,2160
{} on the primary backups,|

2208
01:15:52,830 --> 01:15:54,150
0,360 360,570 570,690 690,870 870,1320
of course {not,on} the configuration

2209
01:15:54,150 --> 01:15:56,850
0,360 360,690 1440,1950 1950,2220 2220,2700
server,| because {it,runs} {} raft,|

2210
01:15:56,850 --> 01:15:57,930
0,300 300,390 390,600 600,810 810,1080
like you know you're doing

2211
01:15:57,930 --> 01:15:59,580
0,270 270,690 1020,1440 1440,1530 1530,1650
approach 1,| but you can

2212
01:15:59,580 --> 01:16:00,840
0,120 120,450 450,510 510,720 720,1260
at least you know, {maybe

2213
01:16:00,840 --> 01:16:02,130
0,270 270,480 480,870 870,990 990,1290
-} scale re-performs for actual

2214
01:16:02,130 --> 01:16:03,990
0,720 720,1050 1050,1320 1320,1620 1620,1860
operations on the {replicas -}|

2215
01:16:03,990 --> 01:16:05,880
0,240 240,960 990,1320 1320,1560 1560,1890
or on the primary backup

2216
01:16:05,880 --> 01:16:07,820
0,360 390,690 690,900 900,1590
scheme,| {put,in} get operations.|

2217
01:16:08,270 --> 01:16:10,730
0,570 900,1290 1290,1770 1770,2310 2310,2460
{} The other {} thing

2218
01:16:10,730 --> 01:16:11,990
0,150 150,390 390,870 870,1080 1080,1260
that is nice about this

2219
01:16:11,990 --> 01:16:13,970
0,60 60,300 780,1620 1650,1830 1830,1980
is that,| the if you

2220
01:16:13,970 --> 01:16:15,110
0,270 300,690 690,750 750,960 960,1140
have data is very very

2221
01:16:15,110 --> 01:16:16,160
0,600 630,690 690,810 810,960 960,1050
large,| you know you can

2222
01:16:16,160 --> 01:16:18,650
0,240 240,600 600,1410 1410,2010 2160,2490
have more specialized { -

2223
01:16:18,650 --> 01:16:22,580
0,570 780,1140 1170,1950 1950,3150 3450,3930
- -} synchronization| or {}

2224
01:16:22,580 --> 01:16:23,840
0,330 330,510 510,840 840,1200 1200,1260
scheme to basically copy the

2225
01:16:23,840 --> 01:16:24,860
0,270 270,390 390,570 570,900 900,1020
state from one machine to

2226
01:16:24,860 --> 01:16:26,000
0,300 300,720
another machine.|

2227
01:16:26,180 --> 01:16:27,740
0,510 510,900 900,960 960,1110 1110,1560
{} And you know the

2228
01:16:27,920 --> 01:16:29,570
0,510 510,990 990,1170 1170,1440 1440,1650
chain replication or when any

2229
01:16:29,570 --> 01:16:30,650
0,120 120,180 180,450 450,720 720,1080
sort of primary backup schemes|

2230
01:16:30,650 --> 01:16:32,360
0,180 180,660 660,810 810,1050 1050,1710
are separated from the relationship|

2231
01:16:32,390 --> 01:16:33,350
0,450 450,510 510,600 600,720 720,960
allows you to do that

2232
01:16:33,350 --> 01:16:34,240
0,360
easily.|

2233
01:16:34,500 --> 01:16:36,000
0,180 180,300 300,510 660,1140 1140,1500
And so it's quite common

2234
01:16:36,000 --> 01:16:37,710
0,240 240,420 420,630 630,1140 1170,1710
that you know the practice,|

2235
01:16:37,710 --> 01:16:38,910
0,90 90,180 180,420 420,720 720,1200
you know people will approach

2236
01:16:38,910 --> 01:16:40,800
0,450 690,1200 1200,1410 1410,1590 1590,1890
2,| although it is also

2237
01:16:40,800 --> 01:16:42,960
0,330 330,960 960,1200 1200,1770 1770,2160
not impossible to actually {}

2238
01:16:42,960 --> 01:16:44,880
0,240 240,540 540,900 900,1380 1650,1920
use approach 1 for {}

2239
01:16:44,880 --> 01:16:47,250
0,150 150,840 1050,1380 1380,1830 1830,2370
your replicated state machine| including

2240
01:16:47,250 --> 01:16:50,460
0,840 840,1470 1770,2610 2610,3000 3000,3210
serving {} operations like put

2241
01:16:50,460 --> 01:16:52,020
0,210 210,870 870,1080 1080,1170 1170,1560
get operations| and in fact,

2242
01:16:52,020 --> 01:16:53,640
0,300 300,480 480,780 780,1200 1200,1620
{the,lab,3} would do it,| we

2243
01:16:53,640 --> 01:16:55,260
0,120 120,300 300,630 630,1050 1050,1620
will see later paper in

2244
01:16:55,620 --> 01:16:57,540
0,420 420,780 780,1470 1530,1770 1770,1920
this semester Spanner| and that

2245
01:16:57,540 --> 01:16:59,730
0,300 300,720 750,1290 1290,1710 1710,2190
actually uses [access] {to,actually} also

2246
01:16:59,730 --> 01:17:01,080
0,150 150,270 270,1050
do the operations.|

2247
01:17:03,780 --> 01:17:05,560
0,300 300,510 510,870 870,1230
Any further questions here?|

2248
01:17:14,710 --> 01:17:15,880
0,180 180,510 510,810 810,930 930,1170
If not, then I wish

2249
01:17:15,880 --> 01:17:16,810
0,180 180,390 390,570 570,780 780,930
you all good luck on

2250
01:17:16,810 --> 01:17:19,330
0,210 210,780 780,900 900,1530 1800,2520
the Mid-term on Thursday,| and

2251
01:17:19,330 --> 01:17:20,470
0,300 300,450 450,600 600,690 690,1140
I'll see you in person,

2252
01:17:20,470 --> 01:17:22,900
0,330 330,750 750,840 840,1350 1740,2430
while virtually in person next

2253
01:17:22,900 --> 01:17:23,840
0,360
week.|

2254
01:17:28,780 --> 01:17:29,470
0,210 210,270 270,450 450,540 540,690
And if you have any

2255
01:17:29,470 --> 01:17:31,120
0,480 630,1050 1050,1380 1380,1560 1560,1650
questions,| please feel free to

2256
01:17:31,120 --> 01:17:34,660
0,180 180,990 1440,1680 3090,3420 3420,3540
hang around| and {I'll,do} my

2257
01:17:34,660 --> 01:17:36,280
0,240 240,420 420,660 660,840
best to answer them.|

2258
01:17:36,520 --> 01:17:39,610
0,270 270,360 360,1620 2130,2820 2820,3090
I have a question about

2259
01:17:39,610 --> 01:17:41,320
0,330 330,630 810,1050 1050,1410 1410,1710
something that you mentioned about

2260
01:17:41,320 --> 01:17:42,670
0,420 420,600 600,840 840,1170 1170,1350
raft,| so you mentioned that

2261
01:17:42,670 --> 01:17:43,960
0,300 300,630 630,990 990,1170 1170,1290
all the reads have to

2262
01:17:43,960 --> 01:17:45,070
0,270 270,540 540,600 600,1050 1050,1110
go through the majority of

2263
01:17:45,070 --> 01:17:46,570
0,660 810,930 930,1020 1020,1260 1260,1500
servers,| but I'm not quite

2264
01:17:46,570 --> 01:17:48,220
0,210 210,210 210,690 690,1140 1140,1650
sure I understand why,| because

2265
01:17:48,400 --> 01:17:51,100
0,180 180,780 1080,1920 1950,2340 2340,2700
the leader has {all,of,the} committed

2266
01:17:51,100 --> 01:17:52,990
0,540 540,840 840,1350 1350,1590 1590,1890
entries, right.| Yeah, there's two

2267
01:17:52,990 --> 01:17:55,690
0,150 150,600 630,1410 2340,2580 2580,2700
two schemes, {} if the

2268
01:17:55,690 --> 01:17:57,760
0,660 780,1500 1530,1800 1800,1890 1890,2070
leader,| so either you run

2269
01:17:57,760 --> 01:17:58,660
0,150 150,180 180,600 600,720 720,900
into a situation where all

2270
01:17:58,660 --> 01:18:00,250
0,270 270,780 780,1200 1200,1500 1500,1590
recent writes are served by

2271
01:18:00,250 --> 01:18:01,320
0,180 180,720
the leader,

2272
01:18:01,410 --> 01:18:02,440
0,450
right,|

2273
01:18:02,440 --> 01:18:03,490
0,600 630,720 720,840 840,1020 1020,1050
or you know there's a

2274
01:18:03,490 --> 01:18:05,200
0,540 540,660 660,930 930,1020 1020,1710
possibility to serve from principle|

2275
01:18:05,200 --> 01:18:06,700
0,150 240,480 480,900 900,1170 1170,1500
and read operation from another

2276
01:18:06,700 --> 01:18:07,900
0,360 360,570 570,900 900,1050 1050,1200
peer,| but then you have

2277
01:18:07,900 --> 01:18:10,480
0,90 90,690 690,990 990,1740 2160,2580
to contact first majority {}

2278
01:18:10,480 --> 01:18:11,260
0,120 120,210 210,480 480,570 570,780
of the servers| to make

2279
01:18:11,260 --> 01:18:12,250
0,390 390,600 600,720 720,840 840,990
absolute sure that you have

2280
01:18:12,250 --> 01:18:13,720
0,90 90,390 390,930
the last operation.|

2281
01:18:14,990 --> 01:18:16,400
0,270 270,420 420,840 840,1200 1200,1410
Got it,| so that that

2282
01:18:16,430 --> 01:18:17,840
0,690 690,840 840,1020 1020,1110 1110,1410
requirement is if we want

2283
01:18:17,840 --> 01:18:19,370
0,270 300,810 810,1020 1020,1170 1170,1530
to spread all the reads

2284
01:18:19,370 --> 01:18:21,890
0,690 720,1230 1320,1860 1860,2400 2400,2520
across every peer.| We have

2285
01:18:21,890 --> 01:18:23,600
0,90 90,210 210,450 450,1110 1350,1710
to be more sophisticated| and

2286
01:18:23,900 --> 01:18:24,890
0,240 240,630 630,750 750,870 870,990
we cannot do it on

2287
01:18:24,890 --> 01:18:25,790
0,120 120,330 330,570 570,720 720,900
our own,| because that would

2288
01:18:25,790 --> 01:18:27,260
0,390 390,600 600,720 720,1020 1020,1470
definitely break {linearizability - -}.|

2289
01:18:28,450 --> 01:18:29,710
0,480 480,660 660,750 750,1050 1050,1260
Right, but if everything goes

2290
01:18:29,710 --> 01:18:31,390
0,90 90,210 210,690 930,1350 1440,1680
to the leader.| Then when

2291
01:18:31,390 --> 01:18:32,560
0,210 210,390 390,540 540,900 900,1170
you're doing {there -}, correct,|

2292
01:18:32,560 --> 01:18:33,610
0,540 540,660 660,840 840,930 930,1050
except you have to do

2293
01:18:33,610 --> 01:18:35,020
0,300 330,690 690,1020 1020,1140 1140,1410
this trick,| where you ask

2294
01:18:35,020 --> 01:18:37,210
0,90 90,180 180,570 570,1260 1770,2190
for an empty agreement, {}|

2295
01:18:37,210 --> 01:18:38,320
0,150 150,210 210,540 540,660 660,1110
at the beginning of every

2296
01:18:38,320 --> 01:18:39,820
0,510 540,1020
new term.|

2297
01:18:41,120 --> 01:18:41,900
0,240 240,300 300,450 450,630 630,780
Just to make sure that

2298
01:18:41,900 --> 01:18:42,650
0,150 150,420 420,540 540,690 690,750
you actually are up to

2299
01:18:42,650 --> 01:18:43,580
0,390
date.|

2300
01:18:45,710 --> 01:18:47,300
0,510 540,810 810,1050
Okay, thank you.|

2301
01:18:48,130 --> 01:18:50,050
0,180 180,540 540,990 1350,1770 1770,1920
Could you, {} quickly go

2302
01:18:50,050 --> 01:18:51,850
0,270 270,840 960,1260 1260,1590 1590,1800
over again,| {} when you're

2303
01:18:51,850 --> 01:18:52,900
0,270 270,330 330,480 480,930 930,1050
adding a new server at

2304
01:18:52,900 --> 01:18:54,100
0,90 90,720
the tail,|

2305
01:18:54,360 --> 01:18:55,560
0,450 480,690 690,960 960,1020 1020,1200
{} so just to make

2306
01:18:55,560 --> 01:18:57,540
0,390 390,450 450,1050 1050,1170 1170,1980
sure I understand,| so essentially

2307
01:18:57,990 --> 01:18:59,670
0,360 360,750 750,930 930,1410 1410,1680
it starts this process for

2308
01:18:59,670 --> 01:19:00,780
0,390 390,510 510,630 630,930 930,1110
copying all the data from

2309
01:19:00,780 --> 01:19:01,860
0,180 180,360 360,420 420,660 660,1080
{S2 -} to {S3 -}|

2310
01:19:02,430 --> 01:19:03,450
0,180 180,330 330,480 480,570 570,1020
and then if it receives

2311
01:19:03,450 --> 01:19:05,010
0,900 930,1110 1110,1260 1260,1350 1350,1560
requests for any of that

2312
01:19:05,010 --> 01:19:06,440
0,330 330,990
data,| while

2313
01:19:06,440 --> 01:19:08,180
0,420 630,780 780,1050 1050,1590 1590,1740
that is still happening,| then

2314
01:19:08,180 --> 01:19:09,290
0,180 180,360 360,480 480,690 690,1110
{S3 -} is going to

2315
01:19:09,770 --> 01:19:11,360
0,480 480,750 750,1050 1050,1230 1230,1590
ask {S2 -} for anything

2316
01:19:11,360 --> 01:19:12,710
0,150 150,240 240,510 510,870 870,1350
that it still has directly|

2317
01:19:12,710 --> 01:19:13,430
0,90 90,240 240,450 450,540 540,720
and it's going to get

2318
01:19:13,430 --> 01:19:15,080
0,60 60,150 150,270 270,900 1170,1650
it and then respond.| Yep.|

2319
01:19:15,600 --> 01:19:16,410
0,210 210,330 330,420 420,630 630,810
And then it keeps doing

2320
01:19:16,410 --> 01:19:18,120
0,210 210,690 690,810 810,1320 1320,1710
that until it gets data|

2321
01:19:18,120 --> 01:19:19,320
0,420 420,600 600,750 750,870 870,1200
that as to no longer

2322
01:19:19,320 --> 01:19:20,040
0,270 270,360 360,450 450,540 540,720
has| and then it just

2323
01:19:20,040 --> 01:19:22,140
0,240 240,570 600,1170 1500,1950 1950,2100
goes live essentially.| Yeah, or

2324
01:19:22,140 --> 01:19:23,310
0,120 120,210 210,300 300,630 630,1170
you could do slightly differently,|

2325
01:19:23,310 --> 01:19:24,330
0,90 90,210 210,360 360,540 540,1020
you know you could actually

2326
01:19:24,330 --> 01:19:26,730
0,360 360,540 540,840 840,1260 1650,2400
have {S3 -} could {}

2327
01:19:26,730 --> 01:19:29,610
0,510 510,1050 1050,1170 1170,1770 2070,2880
basically tell {S2 -} {},|

2328
01:19:31,820 --> 01:19:33,560
0,210 210,390 390,630 630,1170 1200,1740
{S3 -} can become the

2329
01:19:33,590 --> 01:19:35,630
0,600 630,1050 1050,1320 1320,1380 1380,2040
leader or sort of {the,tail}|

2330
01:19:35,660 --> 01:19:37,520
0,660 660,1020 1020,1320 1320,1710 1710,1860
and basically don't process any

2331
01:19:37,520 --> 01:19:40,070
0,1470 1530,2040 2040,2160 2160,2220 2220,2550
common operations from the client

2332
01:19:40,070 --> 01:19:41,510
0,240 240,510 510,720 720,1020 1020,1440
yet,| until it actually has

2333
01:19:41,540 --> 01:19:43,550
0,420 420,780 780,870 870,1260 1260,2010
has received the remaining operations

2334
01:19:43,610 --> 01:19:44,960
0,300 300,480 480,840
from {S2 -}.|

2335
01:19:47,140 --> 01:19:48,160
0,180 180,360 360,510 510,780 780,1020
Oh, so {in,that} case {S2

2336
01:19:48,160 --> 01:19:49,690
0,240 240,390 390,750 750,840 840,1530
-} is still the tail.|

2337
01:19:50,970 --> 01:19:53,490
0,900 900,1140 1140,1680 1680,1980 1980,2520
Yeah.| {So,S3 -} gets everything.|

2338
01:19:53,730 --> 01:19:54,740
0,450
Yeah.|

2339
01:19:56,910 --> 01:19:59,130
0,660 930,1260 1260,1620 1620,2070 2070,2220
Basically, the paper describes one

2340
01:19:59,130 --> 01:20:00,180
0,330 330,480 480,570 570,780 780,1050
particular way of doing it,|

2341
01:20:00,180 --> 01:20:00,960
0,90 90,270 270,450 450,510 510,780
you know there's a couple

2342
01:20:00,960 --> 01:20:02,240
0,180 180,240 240,480 480,660
ways of doing it.|

2343
01:20:04,000 --> 01:20:05,290
0,420 420,540 540,720 720,870 870,1290
But if you do that

2344
01:20:05,290 --> 01:20:06,280
0,420
then,|

2345
01:20:06,430 --> 01:20:08,440
0,510 510,990 1230,1590 1590,1890 1890,2010
{} like how long do

2346
01:20:08,440 --> 01:20:11,260
0,180 180,660 660,1200 1560,1980 1980,2820
you wait to get everything,|

2347
01:20:11,440 --> 01:20:13,140
0,750

2348
01:20:13,140 --> 01:20:14,070
0,120 120,330 330,330 330,780 780,930
I think I also had

2349
01:20:14,070 --> 01:20:15,180
0,90 90,270 270,690 690,810 810,1110
the same confusion as someone

2350
01:20:15,180 --> 01:20:16,500
0,390 390,510 510,720 720,1080 1080,1320
else.| You know, you know

2351
01:20:16,500 --> 01:20:17,700
0,90 90,330 330,720 720,900 900,1200
in what order the switch

2352
01:20:17,700 --> 01:20:19,590
0,60 60,450 480,990 990,1320 1320,1890
is happening, correct,| so example

2353
01:20:19,590 --> 01:20:21,720
0,210 210,1020 1050,1740 1740,1950 1950,2130
like {S3,so -} S2 let's

2354
01:20:21,720 --> 01:20:22,950
0,210 210,630 630,930 930,1230 1230,1230
say maybe has a {}

2355
01:20:22,950 --> 01:20:25,340
0,630 630,1170 1170,1380 1380,1890
big operations through hundreds,|

2356
01:20:25,460 --> 01:20:26,870
0,150 150,390 390,450 450,780 780,1410
you start to copy operations,|

2357
01:20:26,870 --> 01:20:28,700
0,330 330,990 990,1170 1170,1260 1260,1830
likely snapshots with a raft,|

2358
01:20:28,970 --> 01:20:30,320
0,150 150,420 420,510 510,810 810,1350
you start the copy operation,|

2359
01:20:30,320 --> 01:20:31,430
0,150 150,300 300,360 360,660 660,1110
so when the copy operation

2360
01:20:31,430 --> 01:20:32,510
0,120 120,450 450,630 630,930 930,1080
is done,| {S3,is -} up

2361
01:20:32,510 --> 01:20:34,160
0,360 360,660 660,1080
{to,data} until hundred,

2362
01:20:34,390 --> 01:20:35,920
0,510
right.|

2363
01:20:36,390 --> 01:20:37,710
0,570 570,630 630,750 750,1140 1140,1320
Then you know maybe {S2

2364
01:20:37,710 --> 01:20:39,240
0,150 150,480 480,900 930,1230 1230,1530
-} already has ten more

2365
01:20:39,240 --> 01:20:40,860
0,660 690,870 870,1020 1020,1290 1290,1620
operations,| so it has {101

2366
01:20:40,860 --> 01:20:42,660
0,450 450,750 750,1080 1080,1440 1440,1800
-} {102 -} and 103,

2367
01:20:42,900 --> 01:20:44,220
0,630
right,|

2368
01:20:44,220 --> 01:20:46,800
0,450 450,1260 1260,1860 1860,2190 2190,2580
and basically {} {S3 -}

2369
01:20:46,800 --> 01:20:48,240
0,390 390,480 480,990 990,1200 1200,1440
can you contact {S2 -},|

2370
01:20:48,240 --> 01:20:49,830
0,540 540,720 720,1050 1050,1230 1230,1590
say give me your remaining

2371
01:20:49,830 --> 01:20:51,210
0,690 690,840 840,990 990,1230 1230,1380
operations,| {and,S2 -} says, like

2372
01:20:51,210 --> 01:20:52,920
0,330 330,630 630,1050 1050,1290 1290,1710
well remaining operations {101 -}

2373
01:20:52,920 --> 01:20:54,380
0,240 240,450 450,600 600,930
through one to ten,|

2374
01:20:55,000 --> 01:20:56,770
0,900 900,1110 1110,1140 1140,1410 1410,1770
and as a side effect,|

2375
01:20:56,770 --> 01:20:58,390
0,60 60,1020 1050,1290 1290,1440 1440,1620
you know as we also

2376
01:20:58,390 --> 01:20:59,740
0,390 390,540 540,780 780,1020 1020,1350
tells {S2 -} like stop

2377
01:20:59,740 --> 01:21:01,020
0,240 240,330 330,720
being the tail,|

2378
01:21:01,540 --> 01:21:03,670
0,900 900,1200 1200,1470 1470,1710 1710,2130
and, {} {S2 -} response

2379
01:21:03,670 --> 01:21:05,740
0,120 120,330 330,1230 1470,1860 1860,2070
with those operations,| {} {S3

2380
01:21:05,740 --> 01:21:07,330
0,210 210,870 870,1110 1110,1230 1230,1590
-} applies,| there's {} operation

2381
01:21:07,330 --> 01:21:08,740
0,210 210,540 540,690 690,870 870,1410
{101 -} through one {to,ten},|

2382
01:21:08,890 --> 01:21:11,290
0,180 180,690 720,1200 1200,1650 1650,2400
and then tells client it

2383
01:21:11,290 --> 01:21:12,310
0,210 210,450 450,600 600,900 900,1020
means it is tail,| but

2384
01:21:12,310 --> 01:21:13,660
0,60 60,300 300,810 810,1020 1020,1350
it doesn't process any commands

2385
01:21:13,660 --> 01:21:15,190
0,150 150,510 510,840 1110,1320 1320,1530
from clients yet| or read

2386
01:21:15,190 --> 01:21:16,210
0,270 270,390 390,690 690,870 870,1020
operation from client yet,| until

2387
01:21:16,210 --> 01:21:17,770
0,330 330,600 720,1080 1080,1290 1290,1560
it actually process {101 -}

2388
01:21:17,770 --> 01:21:18,860
0,120 120,300 300,630
to {110 -}.|

2389
01:21:21,380 --> 01:21:23,540
0,600 750,1050 1050,1170 1170,1590 1830,2160
Okay, okay I see, {}

2390
01:21:23,540 --> 01:21:25,020
0,210 210,510
I see.|

2391
01:21:25,170 --> 01:21:26,480
0,450

2392
01:21:26,850 --> 01:21:27,780
0,270 270,450 450,660 660,780 780,930
Okay, I have {another -}

2393
01:21:27,780 --> 01:21:32,220
0,630 1500,1680 1680,2190 3780,4170 4170,4440
question,| oh sorry.| No, go

2394
01:21:32,220 --> 01:21:34,200
0,180 180,510 780,1410 1530,1800 1800,1980
ahead, {go,ahead}.| Okay, {} my

2395
01:21:34,200 --> 01:21:35,880
0,330 330,510 510,660 660,1110 1140,1680
question was a little similar

2396
01:21:35,880 --> 01:21:38,070
0,180 180,600 960,1320 1320,2040 2040,2190
to the {} extension| that

2397
01:21:38,070 --> 01:21:40,360
0,90 90,420 420,960 1200,1830
he talked about {}.|

2398
01:21:40,660 --> 01:21:42,640
0,210 210,840 1110,1260 1260,1470 1470,1980
I thought I thought about,|

2399
01:21:42,790 --> 01:21:43,660
0,210 210,420 420,570 570,690 690,870
could you could you do

2400
01:21:43,660 --> 01:21:45,400
0,210 210,840 1020,1500 1500,1650 1650,1740
a tree instead of a

2401
01:21:45,400 --> 01:21:47,540
0,780 900,1590
chain, so.|

2402
01:21:47,630 --> 01:21:49,820
0,510 1110,1650 1650,1830 1830,2040 2040,2190
{ -} I think there's

2403
01:21:49,820 --> 01:21:52,100
0,1680
the,|

2404
01:21:52,100 --> 01:21:53,390
0,510 630,930 930,1020 1020,1110 1110,1290
{} there {other -} data

2405
01:21:53,390 --> 01:21:55,250
0,330 330,900 930,1620 1620,1740 1740,1860
structures possible,| {} like {for

2406
01:21:55,250 --> 01:21:56,570
0,60 60,750 750,900 900,1020 1020,1320
-} example, you know number

2407
01:21:56,570 --> 01:21:58,340
0,60 60,540 540,840 840,1170 1170,1770
of people in email proposed|

2408
01:21:58,520 --> 01:21:59,510
0,210 210,300 300,390 390,810 810,990
that you could have {S1

2409
01:21:59,510 --> 01:22:00,680
0,510 630,840 840,930 930,1020 1020,1170
-},| then you could have

2410
01:22:00,680 --> 01:22:02,960
0,960 990,1230 1230,1680 1680,1890 1890,2280
like {S3 -} 4 5

2411
01:22:02,960 --> 01:22:04,070
0,120 120,240 240,690 690,1050 1050,1110
all the intermediate ones,| you

2412
01:22:04,070 --> 01:22:05,330
0,210 210,390 390,630 630,990 990,1260
know {S1 -} {talks,to} {them,in}

2413
01:22:05,330 --> 01:22:07,160
0,630 630,780 780,1170 1170,1350 1350,1830
parallel to all the intermediate

2414
01:22:07,160 --> 01:22:08,480
0,270 270,360 360,540 540,1020 1020,1320
ones| and the intermediate ones

2415
01:22:08,480 --> 01:22:10,520
0,390 390,630 630,960 960,1620 1650,2040
{} all to {} the

2416
01:22:10,790 --> 01:22:13,190
0,480 480,1020 1530,1890 1890,2250 2250,2400
{} tail,| {} is that

2417
01:22:13,190 --> 01:22:14,270
0,120 120,210 210,420 420,600 600,1080
what you mean with a

2418
01:22:14,270 --> 01:22:18,530
0,540 810,1530 1530,1740 3300,3570 3570,4260
tree?| { -} I meant

2419
01:22:18,560 --> 01:22:20,210
0,360 360,630 630,990 990,1170 1170,1650
more if there would be,|

2420
01:22:20,780 --> 01:22:21,940
0,600
like

2421
01:22:21,940 --> 01:22:23,470
0,60 60,450 450,660 660,1290 1290,1530
a number of leaves there

2422
01:22:23,470 --> 01:22:25,120
0,150 150,660 810,1050 1050,1290 1290,1650
would be at all roughly

2423
01:22:25,120 --> 01:22:26,710
0,120 120,540 540,1110 1140,1380 1380,1590
the same height,| so {like,a}

2424
01:22:26,710 --> 01:22:29,200
0,480 480,870 1080,1290 1290,1830 2250,2490
balanced tree,| and then the

2425
01:22:29,200 --> 01:22:30,520
0,300 300,420 420,660 660,1080 1200,1320
leaves will have like a

2426
01:22:30,520 --> 01:22:33,400
0,420 420,750 750,960 960,1320
chain going through them,|

2427
01:22:33,400 --> 01:22:35,860
0,660 750,1290 1350,1500 1500,2100 2100,2460
{} and I think the

2428
01:22:36,130 --> 01:22:38,650
0,390 390,1080 1080,1380 1380,1770 1800,2520
{linearizability -} can be broken

2429
01:22:38,650 --> 01:22:40,720
0,720 780,1020 1020,1140 1140,1530
here,| if you like,

2430
01:22:40,930 --> 01:22:42,940
0,450 690,930 930,1410 1410,1680 1680,2010
oh, if you'd think harder

2431
01:22:42,940 --> 01:22:45,100
0,270 270,420 420,810 1470,1590 1590,2160
about it,| but it would

2432
01:22:45,100 --> 01:22:46,240
0,150 150,210 210,420 420,810 810,1140
have the nice property that

2433
01:22:46,270 --> 01:22:48,000
0,270 270,690 720,1170
you wouldn't,| like,

2434
01:22:48,090 --> 01:22:49,950
0,240 240,480 480,720 720,1470 1470,1860
they now the propagation {can,delay}

2435
01:22:49,950 --> 01:22:52,380
0,210 210,300 300,690 960,2010 2040,2430
would be like [logarithmic]| instead

2436
01:22:52,380 --> 01:22:54,030
0,240 240,810 810,960 960,1470 1470,1650
of linear as here| and

2437
01:22:54,030 --> 01:22:54,840
0,120 120,300 300,480 480,660 660,810
you could read from all

2438
01:22:54,840 --> 01:22:56,880
0,90 90,540 540,870 1350,1800 1800,2040
the leaves.| Yeah, okay, reading

2439
01:22:56,880 --> 01:22:58,020
0,150 150,270 270,330 330,600 600,1140
from all the leaves {is,dangerous},

2440
01:22:58,020 --> 01:22:59,940
0,270 270,720 870,1500 1500,1650 1650,1920
right,| because {} they might

2441
01:22:59,940 --> 01:23:01,110
0,300 330,450 450,540 540,780 780,1170
have,| you know one client

2442
01:23:01,110 --> 01:23:02,760
0,120 120,210 210,510 510,780 780,1650
might have talked to a

2443
01:23:02,760 --> 01:23:04,800
0,360 360,690 690,1290 1320,1740 1740,2040
another leave earlier| and leaves

2444
01:23:04,800 --> 01:23:05,490
0,60 60,270 270,480 480,600 600,690
{} might not be in

2445
01:23:05,490 --> 01:23:06,340
0,420
sync,|

2446
01:23:06,770 --> 01:23:10,580
0,720 720,1380 1800,3060 3060,3300 3300,3810
{} so that sounds dangerous

2447
01:23:10,580 --> 01:23:12,110
0,120 120,660 660,1050 1050,1410 1410,1530
to me,| maybe your your

2448
01:23:12,110 --> 01:23:12,680
0,240 240,300 300,330 330,480 480,570
scheme is a little bit

2449
01:23:12,680 --> 01:23:14,870
0,120 120,690 690,840 840,1830 1830,2190
more sophisticated than I'm thinking,|

2450
01:23:15,470 --> 01:23:17,540
0,570 840,1320 1320,1410 1410,1500 1500,2070
the depth of the tree

2451
01:23:17,540 --> 01:23:18,500
0,180 180,270 270,510 510,600 600,960
or the depth of the

2452
01:23:18,500 --> 01:23:20,930
0,420 420,840 840,1440 1470,1980 1980,2430
chain really {} governed by

2453
01:23:20,930 --> 01:23:23,270
0,450 450,1110 1110,1410 1410,1920 1950,2340
the meantime between failure, right,|

2454
01:23:23,890 --> 01:23:25,780
0,420 420,900 900,1020 1020,1290 1290,1890
{} {if,you're} on the {},|

2455
01:23:26,020 --> 01:23:27,160
0,150 150,360 360,750 750,990 990,1140
if you typically run with

2456
01:23:27,160 --> 01:23:28,600
0,180 180,600 600,750 750,1140 1140,1440
3 server, {3,to,5 -} serves,|

2457
01:23:28,600 --> 01:23:29,740
0,210 210,390 390,540 540,840 840,1140
because that's good enough for

2458
01:23:29,740 --> 01:23:33,100
0,480 690,1350 1350,2340 2460,3120 3120,3360
your high availability,| then because

2459
01:23:33,100 --> 01:23:35,080
0,90 90,540 870,1410 1410,1530 1530,1980
you can recover from 4

2460
01:23:35,080 --> 01:23:36,730
0,660 660,1200 1200,1290 1290,1500 1500,1650
servers,| before the whole thing

2461
01:23:36,730 --> 01:23:40,210
0,120 120,660 1050,1740 1890,2730 2730,3480
is down,| {} then, {}

2462
01:23:40,240 --> 01:23:41,830
0,270 270,450 450,750 750,1080 1110,1590
that really covers the depth

2463
01:23:41,830 --> 01:23:43,080
0,150 150,270 270,810
of the chain,|

2464
01:23:43,260 --> 01:23:45,360
0,810 990,1290 1290,1530 1530,1770 1770,2100
{} and yeah we'll introduce

2465
01:23:45,360 --> 01:23:46,800
0,180 180,900
some latency.|

2466
01:23:49,770 --> 01:23:51,630
0,300 300,540 540,1200 1290,1650 1650,1860
Okay, {that,make,sence -}, thank you.|

2467
01:23:51,630 --> 01:23:53,280
0,510 510,720 720,1050 1050,1170 1170,1650
Chain will generally be short.|

2468
01:23:53,930 --> 01:23:55,850
0,840 840,1080 1080,1200 1200,1410 1410,1920
Okay okay, that makes sense,

2469
01:23:56,030 --> 01:23:57,260
0,750
thanks.|

2470
01:23:57,260 --> 01:23:58,280
0,150 150,480
You're welcome.|

2471
01:23:59,030 --> 01:24:00,080
0,180 180,330 330,480 480,720 720,1050
Is this the only case

2472
01:24:00,080 --> 01:24:01,310
0,270 270,360 360,750 750,1080 1080,1230
where the entire train would

2473
01:24:01,310 --> 01:24:02,580
0,180 180,720
go down,|

2474
01:24:02,580 --> 01:24:03,990
0,390 420,810 810,900 900,1350 1350,1410
if all the servers in

2475
01:24:03,990 --> 01:24:05,610
0,120 120,330 330,480 480,930 1200,1620
the chain went down.| Yeah.|

2476
01:24:07,370 --> 01:24:08,380
0,210 210,450
Thank you.|

2477
01:24:09,640 --> 01:24:12,340
0,540 930,1500 1500,1650 1650,2100 2100,2700
I also was curious how

2478
01:24:12,340 --> 01:24:14,050
0,270 270,660 660,750 750,1050 1050,1710
you maintain the strong consistency,|

2479
01:24:14,050 --> 01:24:16,510
0,480 1020,2040 2040,2220 2220,2370 2370,2460
{when,like} S1 {S2 -} and

2480
01:24:16,510 --> 01:24:18,250
0,120 120,330 330,480 480,1170 1440,1740
{S3 -} can all do

2481
01:24:18,250 --> 01:24:19,750
0,120 120,360 360,780 780,930 930,1500
the read in this slide.|

2482
01:24:21,340 --> 01:24:23,470
0,270 270,540 540,870 870,1230 1230,2130
You get strong consistency per

2483
01:24:23,470 --> 01:24:25,990
0,660 660,1470 1500,1770 1770,2040 2040,2520
{} {per,shard} or per object,|

2484
01:24:25,990 --> 01:24:26,860
0,90 90,180 180,360 360,600 600,870
you know that's assigned to

2485
01:24:26,860 --> 01:24:28,220
0,450 450,810
{the,chain}, right.|

2486
01:24:28,520 --> 01:24:31,010
0,300 300,390 390,660 660,1200 1260,2490
So if you read {}

2487
01:24:31,010 --> 01:24:32,990
0,240 240,480 480,870 870,1560 1770,1980
you write one object,| you

2488
01:24:32,990 --> 01:24:34,250
0,210 210,510 510,930 930,1080 1080,1260
write object one, you read

2489
01:24:34,250 --> 01:24:35,960
0,330 330,810 960,1110 1110,1290 1290,1710
object one,| all those operations

2490
01:24:35,960 --> 01:24:36,500
0,60 60,180 180,240 240,360 360,540
are going to go through

2491
01:24:36,500 --> 01:24:37,520
0,90 90,330 330,780 780,930 930,1020
the same chain| and so

2492
01:24:37,520 --> 01:24:38,870
0,120 120,210 210,450 450,1020 1020,1350
you get strong consistency for

2493
01:24:38,870 --> 01:24:40,520
0,300 300,720 720,1200
that particular object.|

2494
01:24:40,610 --> 01:24:42,140
0,630 630,900 900,1200 1290,1470 1470,1530
Oh, got it.| But it

2495
01:24:42,140 --> 01:24:42,860
0,90 90,240 240,330 330,420 420,720
may not be the case,|

2496
01:24:43,280 --> 01:24:44,420
0,420 420,570 570,660 660,1050 1050,1140
across all the objects we

2497
01:24:44,420 --> 01:24:46,850
0,150 150,390 390,1140 1350,2220 2220,2430
have strong consistency.| No, I

2498
01:24:46,850 --> 01:24:49,130
0,570 570,1020 1020,1620 1620,2190 2190,2280
don't, I will, let me

2499
01:24:49,130 --> 01:24:52,820
0,480 480,660 2220,3210
hesitate {that -}.|

2500
01:24:57,270 --> 01:24:58,200
0,210 210,360 360,630 630,690 690,930
Let me hesitate, I think

2501
01:24:58,200 --> 01:24:59,850
0,90 90,270 270,690 750,1410 1410,1650
you know that requires maybe

2502
01:24:59,850 --> 01:25:01,710
0,210 210,780 1140,1530 1530,1740 1740,1860
more machinery.| Well, what does

2503
01:25:01,710 --> 01:25:03,090
0,240 240,600 630,870 870,1260 1260,1380
that mean like across all

2504
01:25:03,090 --> 01:25:04,500
0,150 150,930
the objects

2505
01:25:04,500 --> 01:25:07,230
0,240 240,630 720,1890 2130,2430 2430,2730
getting stronger.| {I,think,the} you read

2506
01:25:07,230 --> 01:25:09,300
0,420 420,720 720,1230 1680,1890 1890,2070
write object one, you read

2507
01:25:09,300 --> 01:25:11,120
0,90 90,360 360,720 720,1290
or write object two,|

2508
01:25:11,150 --> 01:25:13,640
0,210 210,870 870,1740 1770,2160 2160,2490
{} and then some client

2509
01:25:13,640 --> 01:25:15,380
0,570 570,1170
{read,object} one,|

2510
01:25:15,620 --> 01:25:16,940
0,600 600,750 750,900 900,960 960,1320
Are you going to {}

2511
01:25:16,940 --> 01:25:17,940
0,360
yet.|

2512
01:25:18,210 --> 01:25:19,110
0,540 540,630 630,750 750,840 840,900
Basically, you know if you

2513
01:25:19,110 --> 01:25:19,920
0,90 90,150 150,420 420,480 480,810
have a client to read

2514
01:25:19,920 --> 01:25:21,330
0,330 330,810 810,1020 1020,1140 1140,1410
both objects,| are you are

2515
01:25:21,360 --> 01:25:22,950
0,600 600,690 690,900 900,1200 1200,1590
guaranteed to see total order

2516
01:25:22,950 --> 01:25:25,860
0,540 570,1080 1080,1350 1350,2250 2250,2910
and {} linearizability.| {Is,that} like

2517
01:25:25,860 --> 01:25:26,880
0,450
serializability?|

2518
01:25:27,030 --> 01:25:28,890
0,420 420,810 810,1020 1020,1410 1410,1860
{} {Serializability -} slightly different,|

2519
01:25:28,950 --> 01:25:30,780
0,540 630,1200 1200,1560 1560,1680 1680,1830
{you,know} maybe, let's not talk

2520
01:25:30,780 --> 01:25:32,280
0,210 210,360 360,1080 1080,1290 1290,1500
about {serializability -},| {we'll,come} back,

2521
01:25:32,280 --> 01:25:33,630
0,270 270,960 960,1230 1230,1320 1320,1350
{we'll,get} that later in a

2522
01:25:33,630 --> 01:25:36,510
0,210 210,600 1050,1860 2070,2430 2430,2880
couple weeks.| {} Yeah, and.|

2523
01:25:36,570 --> 01:25:38,640
0,510

2524
01:25:40,740 --> 01:25:42,360
0,120 120,540 540,870 870,1440 1440,1620
I [managed] to actually make

2525
01:25:42,360 --> 01:25:43,800
0,60 60,450 450,600 600,930 1140,1440
a commitment right now,| I

2526
01:25:43,800 --> 01:25:44,400
0,150 150,240 240,390 390,420 420,600
need to think a little

2527
01:25:44,400 --> 01:25:45,930
0,120 120,330 330,540 900,1410 1410,1530
bit about it.| Okay, that's

2528
01:25:45,930 --> 01:25:46,840
0,120 120,360
totally fair.|

2529
01:25:48,280 --> 01:25:50,170
0,300 300,420 420,780 780,930 930,1890
So the question is like|

2530
01:25:50,440 --> 01:25:52,090
0,210 210,510 540,750 750,990 990,1650
you know you have consistency

2531
01:25:52,090 --> 01:25:53,110
0,150 150,390 390,810 810,960 960,1020
or {linearizability -} for a

2532
01:25:53,110 --> 01:25:54,880
0,450 450,900 900,1170 1170,1290 1290,1770
single client reading and writing,|

2533
01:25:55,210 --> 01:25:57,310
0,390 390,690 690,1170 1200,1740 1740,2100
but not for multiple, on

2534
01:25:57,310 --> 01:25:59,530
0,360 360,1140 1320,1590 1590,1770 1770,2220
multiple objects.| You have even

2535
01:25:59,710 --> 01:26:01,930
0,450 450,1140 1170,1620 1620,1860 1860,2220
multiple clients talking to this,|

2536
01:26:01,930 --> 01:26:03,430
0,240 240,600 600,780 780,1050 1050,1500
you know are doing operations

2537
01:26:03,430 --> 01:26:04,900
0,60 60,120 120,510 510,1080 1080,1470
on the same object,| {have,strongly}

2538
01:26:04,930 --> 01:26:07,600
0,1320 1350,1650 1650,1770 1770,2130 2490,2670
linearizability {correct,in} this scheme,| the

2539
01:26:07,600 --> 01:26:09,730
0,360 360,810 870,1140 1140,1560 1560,2130
question is we have {linearizability

2540
01:26:09,730 --> 01:26:12,400
0,390 390,1230 1380,1890 1890,2310
-} across objects too.|

2541
01:26:13,410 --> 01:26:15,000
0,270 270,960 1020,1350 1350,1440 1440,1590
But {}, why is that

2542
01:26:15,000 --> 01:26:17,880
0,540 960,1170 1170,1560 1560,2130 2310,2880
important and honestly where like

2543
01:26:18,120 --> 01:26:19,380
0,210 210,330 330,450 450,570 570,1260
where that would be important

2544
01:26:19,530 --> 01:26:20,620
0,510
like,|

2545
01:26:21,600 --> 01:26:23,460
0,270 270,600 600,810 810,1290
because you, you gonna

2546
01:26:23,580 --> 01:26:24,820
0,660
like,

2547
01:26:25,150 --> 01:26:28,060
0,240 240,720 720,1530 1620,2460 2460,2910
you can't group operations right,|

2548
01:26:28,180 --> 01:26:30,250
0,270 270,450 450,600 600,870 870,2070
so like {} a write

2549
01:26:30,550 --> 01:26:31,690
0,300 450,540 540,690 690,870 870,1140
{and,a,write}.| I mean you read

2550
01:26:31,690 --> 01:26:33,370
0,360 360,1050 1050,1170 1170,1410 1410,1680
object one, you write object

2551
01:26:33,370 --> 01:26:34,510
0,180 180,300 300,480 480,810 810,1140
one, you read object one,|

2552
01:26:34,510 --> 01:26:35,710
0,210 210,420 420,810 810,1050 1050,1200
you read object two, you

2553
01:26:35,710 --> 01:26:39,130
0,210 210,570 570,1020 1320,2460 2460,3420
write object two,| {} and

2554
01:26:39,130 --> 01:26:40,520
0,150 150,270 270,810
you know the,

2555
01:26:40,850 --> 01:26:41,930
0,120 120,480 480,750 750,840 840,1080
the question is you know

2556
01:26:41,930 --> 01:26:43,280
0,330 330,750 750,1140 1140,1200 1200,1350
in {linearizability -},| you know

2557
01:26:43,280 --> 01:26:44,810
0,690 720,1290 1290,1380 1380,1470 1470,1530
those operations need to be

2558
01:26:44,810 --> 01:26:47,000
0,210 210,270 270,600 930,1650 1650,2190
{total -} order| and they

2559
01:26:47,000 --> 01:26:49,760
0,210 210,1170 1230,2130 2130,2250 2250,2760
need to preserve this property

2560
01:26:49,760 --> 01:26:51,560
0,570 600,960 960,1260
of real time.|

2561
01:26:52,740 --> 01:26:54,180
0,330 330,600 600,1050 1050,1170 1170,1440
And since you have different

2562
01:26:54,180 --> 01:26:56,010
0,360 360,510 510,720 720,1200 1200,1830
chains that might actually not

2563
01:26:56,010 --> 01:26:57,450
0,270 270,600 600,1170 1170,1320 1320,1440
happen,| but I don't want

2564
01:26:57,450 --> 01:26:59,460
0,60 60,330 330,720 750,1680 1680,2010
to commit to no statement

2565
01:26:59,460 --> 01:27:01,380
0,330 330,570 570,900 900,1440
about all across chains.|

2566
01:27:01,380 --> 01:27:02,220
0,60 60,150 150,420 420,510 510,840
You know with the chain

2567
01:27:02,220 --> 01:27:03,630
0,150 150,600 600,1020 1020,1170 1170,1410
is actually guaranteed to {linearizability

2568
01:27:03,630 --> 01:27:04,530
0,390 390,600 600,720 720,810 810,900
-},| even if you have

2569
01:27:04,530 --> 01:27:05,860
0,240 240,840
different objects.|

2570
01:27:08,290 --> 01:27:09,370
0,180 180,450 450,510 510,660 660,1080
There's something I don't understand

2571
01:27:09,370 --> 01:27:10,360
0,90 90,180 180,600 600,780 780,990
in the paper,| which is

2572
01:27:10,360 --> 01:27:11,620
0,240 240,660
the {}

2573
01:27:11,620 --> 01:27:15,310
0,420 420,1080 1080,1710 2490,2790 2790,3690
update propagation invariant,| where like

2574
01:27:15,790 --> 01:27:17,760
0,480 480,660 690,1380
sort of the,

2575
01:27:17,760 --> 01:27:19,950
0,450 1080,1200 1200,1500 1500,1950 1950,2190
for in this order of

2576
01:27:19,950 --> 01:27:22,830
0,240 240,870 1080,1620 1680,1980 1980,2880
the chain.| Yep.| The like

2577
01:27:22,950 --> 01:27:25,290
0,750 780,1170 1170,1770 1770,2160 2160,2340
commits are prefix of each

2578
01:27:25,290 --> 01:27:29,790
0,990 1860,2340 3630,3900 3900,4080 4080,4500
successors commits,| {} is that

2579
01:27:29,790 --> 01:27:31,980
0,630 630,1380 1380,1650 1650,1830 1830,2190
guaranteed after like a full

2580
01:27:31,980 --> 01:27:33,420
0,420 420,600 600,930 930,1290 1290,1440
pass has gone through the

2581
01:27:33,420 --> 01:27:35,490
0,450 1200,1350 1350,1500 1500,1800 1800,2070
chain.| Well, it's always true

2582
01:27:35,490 --> 01:27:36,420
0,210 210,420 420,690 690,810 810,930
right,| like if you go

2583
01:27:36,420 --> 01:27:38,070
0,390 390,630 630,810 810,1140 1140,1650
back through this picture here.|

2584
01:27:38,990 --> 01:27:40,480
0,930

2585
01:27:42,020 --> 01:27:43,310
0,150 150,600 600,750 750,960 960,1290
I think they make a

2586
01:27:43,310 --> 01:27:44,900
0,240 240,480 480,1080 1080,1290 1290,1590
very simple observation,| which is,

2587
01:27:44,900 --> 01:27:45,530
0,240 240,360 360,450 450,540 540,630
let's see if we can

2588
01:27:45,530 --> 01:27:47,180
0,270 270,450 450,600 600,1050
find a good picture.|

2589
01:27:47,960 --> 01:27:49,670
0,180 180,630 630,1110 1110,1350 1350,1710
I probably scribbled over everything,|

2590
01:27:49,670 --> 01:27:51,470
0,390 1020,1170 1170,1350 1350,1560 1560,1800
so it's gonna be maybe

2591
01:27:51,470 --> 01:27:53,450
0,150 150,270 270,780 1260,1620 1620,1980
not as clean,| {} basically

2592
01:27:53,450 --> 01:27:54,380
0,150 150,240 240,690 690,840 840,930
what they're saying like if

2593
01:27:54,380 --> 01:27:55,250
0,120 120,240 240,300 300,450 450,870
you look at this figure,

2594
01:27:55,250 --> 01:27:58,040
0,450 720,1440 1470,2310
correct,| that {}

2595
01:27:58,320 --> 01:27:59,310
0,240 240,540 540,810 810,930 930,990
{S3 -} always has a

2596
01:27:59,310 --> 01:28:00,360
0,390 390,510 510,690 690,930 930,1050
prefix of {S2 -} and

2597
01:28:00,360 --> 01:28:01,110
0,120 120,300 300,540 540,660 660,750
{S2 -} always has a

2598
01:28:01,110 --> 01:28:02,620
0,390 390,600 600,960
prefix of S1,|

2599
01:28:05,960 --> 01:28:06,890
0,240 240,510 510,630 630,810 810,930
and that's the only thing

2600
01:28:06,890 --> 01:28:08,840
0,120 120,480 480,1020 1020,1410 1410,1950
that basically that's {invariant,says}.|

2601
01:28:09,440 --> 01:28:10,840
0,750
Oh,

2602
01:28:11,170 --> 01:28:13,450
0,630 660,1020 1020,1170 1170,2010 2040,2280
so i and j, so

2603
01:28:13,450 --> 01:28:15,070
0,240 240,570 570,900 900,960 960,1620
the one out the successor

2604
01:28:15,070 --> 01:28:16,120
0,300 300,390 390,780 780,870 870,1050
has the prefix of the

2605
01:28:16,120 --> 01:28:17,890
0,510 540,1080 1290,1440 1440,1710 1710,1770
predecessor?| Yeah, and this is

2606
01:28:17,890 --> 01:28:19,630
0,390 390,930 930,1170 1170,1380 1380,1740
slightly confusing,| I just realized

2607
01:28:19,630 --> 01:28:21,580
0,120 120,390 390,1500 1500,1740 1740,1950
that later,| after somebody else

2608
01:28:21,580 --> 01:28:24,460
0,180 180,300 300,780 1140,1590 2280,2880
asked this question,| {} in

2609
01:28:24,490 --> 01:28:26,800
0,300 300,1140 1650,2010 2010,2190 2190,2310
the definition, the i and

2610
01:28:26,800 --> 01:28:28,390
0,270 270,630 630,750 900,1230 1230,1590
j is in two different

2611
01:28:28,390 --> 01:28:30,160
0,570 630,1050 1050,1260 1260,1500 1500,1770
ways,| well, not really different

2612
01:28:30,160 --> 01:28:31,630
0,270 270,570 570,690 690,750 750,1470
ways,| one is {} definition,|

2613
01:28:32,100 --> 01:28:34,740
0,630 630,990 990,1230 1230,1680 1680,2640
{} and {ones,is} actually the

2614
01:28:34,770 --> 01:28:37,920
0,690 1260,1920 1920,2460 2490,2790 2790,3150
invariant| {} and {} you're

2615
01:28:37,920 --> 01:28:38,970
0,180 180,270 270,330 330,510 510,1050
gonna be a little careful,|

2616
01:28:39,060 --> 01:28:43,230
0,1590 1590,1980 1980,2430 2460,3570 3570,4170
the role {of,i,and,j,in,the,chain -}.| {Go,around}.|

2617
01:28:43,260 --> 01:28:46,650
0,990 990,1050 1050,1230 1230,1770 2520,3390
{Yeah,exactly}.| {How,is} that possible.| Exactly.|

2618
01:28:47,140 --> 01:28:49,260
0,270 270,600 960,1140 1140,1530
Thank you.| You're welcome.|

2619
01:28:50,060 --> 01:28:53,740
0,1560 2010,3090
{I,was,oops}.| Yeah.|

2620
01:28:54,390 --> 01:28:55,500
0,270 270,420 420,600 600,750 750,1110
I was just gonna ask

2621
01:28:55,500 --> 01:28:57,480
0,630 630,1080 1080,1560 1590,1770 1770,1980
what happens when you have

2622
01:28:57,480 --> 01:28:58,950
0,270 270,630 630,1050 1050,1350 1350,1470
a network partition instead of

2623
01:28:58,950 --> 01:29:00,750
0,60 60,660 840,1410 1440,1650 1650,1800
{} crash,| {} so if

2624
01:29:00,750 --> 01:29:01,770
0,90 90,300 300,570 600,690 690,1020
you go to the crash

2625
01:29:01,770 --> 01:29:03,520
0,540 930,1440
slide, {}|

2626
01:29:03,610 --> 01:29:04,810
0,270 270,630 630,720 720,810 810,1200
what happens to the chain,|

2627
01:29:04,810 --> 01:29:06,100
0,150 150,390 390,450 450,810 810,1290
if there's a network partition,|

2628
01:29:06,100 --> 01:29:08,290
0,180 180,450 450,840 1170,1500 1500,2190
so maybe ask something like,

2629
01:29:08,410 --> 01:29:10,330
0,690 690,990 990,1380 1380,1560 1560,1920
like {S2 -} is actually

2630
01:29:10,330 --> 01:29:12,040
0,270 270,870 1050,1290 1290,1470 1470,1710
still alive,| but there's a

2631
01:29:12,100 --> 01:29:14,050
0,540 540,870 870,960 960,1560 1560,1950
partition between the configuration manager

2632
01:29:14,050 --> 01:29:15,640
0,300 450,840 840,990 990,1110 1110,1590
and {S2 -} or something,|

2633
01:29:15,880 --> 01:29:17,020
0,180 180,300 300,510 510,750 750,1140
and so now both S1

2634
01:29:17,020 --> 01:29:18,040
0,270 270,450 450,570 570,690 690,1020
and {S2 -} are pointing

2635
01:29:18,040 --> 01:29:19,160
0,300 300,660
to {S3 -}.|

2636
01:29:20,130 --> 01:29:23,220
0,540 540,990 990,1980 2010,2670 2670,3090
No, no, {} yeah yeah,|

2637
01:29:23,280 --> 01:29:25,050
0,390 420,990 990,1140 1140,1350 1350,1770
okay, there's gonna be some

2638
01:29:25,050 --> 01:29:27,390
0,960 960,1140 1140,1410 1410,1620 1620,2340
obviously,| when I I think

2639
01:29:27,390 --> 01:29:28,200
0,210 210,240 240,540 540,690 690,810
people are talking about this,|

2640
01:29:28,200 --> 01:29:29,040
0,180 180,240 240,540 540,690 690,840
but I presume that all

2641
01:29:29,040 --> 01:29:31,230
0,540 540,630 630,1020 1530,1920 1920,2190
configurations are numbered,| like view

2642
01:29:31,230 --> 01:29:33,660
0,570 870,1860 1860,2040 2040,2220 2220,2430
number and {S3 - -}

2643
01:29:33,660 --> 01:29:35,100
0,240 240,540 540,870 870,1050 1050,1440
will not accept any commands

2644
01:29:35,100 --> 01:29:36,690
0,150 150,330 330,780 780,1290 1320,1590
from {S2 -},| {} {if,the,view}

2645
01:29:36,690 --> 01:29:38,360
0,660 660,840 840,1320
numbers don't match.|

2646
01:29:39,560 --> 01:29:40,550
0,330 330,420 420,630 630,750 750,990
Oh, you got it, thank

2647
01:29:40,550 --> 01:29:41,380
0,240
you.|

2648
01:29:41,410 --> 01:29:43,090
0,210 210,750 750,1080 1080,1140 1140,1680
{} So related to that,

2649
01:29:43,090 --> 01:29:44,020
0,270 270,390 390,450 450,660 660,930
one thing I couldn't figure

2650
01:29:44,020 --> 01:29:45,310
0,120 120,270 270,540 540,750 750,1290
out is| even with like

2651
01:29:45,310 --> 01:29:47,230
0,600 600,930 930,990 990,1440 1680,1920
configuration numbers or something, {}|

2652
01:29:47,230 --> 01:29:48,310
0,450 450,540 540,660 660,870 870,1080
how do you make sure

2653
01:29:48,310 --> 01:29:49,090
0,120 120,240 240,390 390,690 690,780
that when you get rid

2654
01:29:49,090 --> 01:29:50,170
0,90 90,240 240,780 780,870 870,1080
of the tail and the

2655
01:29:50,170 --> 01:29:52,030
0,270 270,750 750,1200 1440,1650 1650,1860
third scenario drawn now when

2656
01:29:52,030 --> 01:29:52,900
0,90 90,180 180,300 300,390 390,870
you get through the tale

2657
01:29:52,900 --> 01:29:54,460
0,300 390,930 930,1020 1020,1440 1440,1560
that all the clients that

2658
01:29:54,460 --> 01:29:55,960
0,240 240,510 510,660 660,1080 1320,1500
might issue a read are

2659
01:29:55,960 --> 01:29:57,520
0,510 510,750 750,990 990,1260 1260,1560
aware that this old suffers

2660
01:29:57,520 --> 01:29:59,140
0,120 120,330 750,1140 1140,1410 1410,1620
no longer recording I think

2661
01:29:59,140 --> 01:30:00,700
0,480 660,1260 1260,1350 1350,1440 1440,1560
the way you would do

2662
01:30:00,700 --> 01:30:02,020
0,240 240,420 420,510 510,1200 1200,1320
is that the configuration when

2663
01:30:02,020 --> 01:30:03,370
0,60 60,330 330,750 750,810 810,1350
the client download the configuration

2664
01:30:03,370 --> 01:30:05,350
0,150 150,1260 1260,1620 1620,1740 1740,1980
from Xiamen manager, they also

2665
01:30:05,350 --> 01:30:07,030
0,300 300,570 570,1080 1320,1470 1470,1680
include the number and every

2666
01:30:07,030 --> 01:30:09,130
0,450 450,900 900,1170 1170,1740 1740,2100
operation includes the number and

2667
01:30:09,130 --> 01:30:11,830
0,450 450,1410 1410,1740 1740,1980 1980,2700
an espy will see hi.

2668
01:30:12,210 --> 01:30:13,350
0,210 210,300 300,450 450,600 600,1140
There's an old view number,

2669
01:30:13,470 --> 01:30:14,520
0,240 240,420 420,480 480,570 570,1050
don't talk to me about

2670
01:30:14,850 --> 01:30:16,590
0,180 180,180 180,810 810,1080 1080,1740
I I guess, um when

2671
01:30:16,590 --> 01:30:18,270
0,240 240,660 660,1050 1050,1140 1140,1680
the clients talk the configurations

2672
01:30:18,270 --> 01:30:19,440
0,120 120,210 210,420 420,750 750,1170
over to get you numbers

2673
01:30:19,440 --> 01:30:20,310
0,240 240,450 450,510 510,780 780,870
I'm going to start with

2674
01:30:20,310 --> 01:30:21,420
0,60 60,150 150,510 720,870 870,1110
is a client that has

2675
01:30:21,420 --> 01:30:22,770
0,60 60,360 360,510 510,990 1020,1350
an old you know, so

2676
01:30:22,770 --> 01:30:24,480
0,90 90,720 720,1320 1350,1530 1530,1710
for example the s two

2677
01:30:24,480 --> 01:30:25,680
0,120 120,270 270,660 660,900 900,1200
could just retire saying we

2678
01:30:25,680 --> 01:30:28,140
0,480 810,1830 1860,2100 2100,2280 2280,2460
try and climb then go

2679
01:30:28,140 --> 01:30:29,460
0,240 240,300 300,360 360,840 840,1320
back to the configuration server

2680
01:30:29,460 --> 01:30:30,690
0,180 180,570 570,660 660,780 780,1230
and reread to the state.

2681
01:30:32,380 --> 01:30:33,550
0,420 420,840 840,990 990,1110 1110,1170
Um I guess what I'm

2682
01:30:33,550 --> 01:30:34,360
0,150 150,300 300,360 360,510 510,810
worried about is like s

2683
01:30:34,360 --> 01:30:35,530
0,240 240,330 330,480 480,780 780,1170
three has been network partitioned

2684
01:30:35,530 --> 01:30:38,020
0,450 450,690 690,1560 2010,2220 2220,2490
away from zero from the

2685
01:30:38,020 --> 01:30:39,850
0,660 750,1050 1050,1200 1200,1290 1290,1830
coordinator and so the coordinator

2686
01:30:39,850 --> 01:30:40,690
0,240 240,360 360,480 480,630 630,840
gets rid of s three

2687
01:30:40,690 --> 01:30:41,770
0,120 120,210 210,570 570,660 660,1080
from the tail and increase

2688
01:30:41,770 --> 01:30:43,270
0,120 120,390 390,810 1080,1320 1320,1500
the version number, um, but

2689
01:30:43,270 --> 01:30:44,560
0,210 210,600 600,750 750,960 960,1290
some client out there doesn't

2690
01:30:44,560 --> 01:30:45,340
0,270 270,390 390,480 480,540 540,780
find out that the version

2691
01:30:45,340 --> 01:30:46,840
0,210 210,810 870,1050 1050,1290 1290,1500
numbers increase and still {thinks's

2692
01:30:46,840 --> 01:30:48,340
0,180 180,390 390,960 990,1440 1440,1500
-} three tail talks to

2693
01:30:48,340 --> 01:30:49,990
0,150 150,330 330,630 630,1110 1230,1650
s three doesn't read meanwhile

2694
01:30:49,990 --> 01:30:51,160
0,240 240,330 330,570 570,1020 1020,1170
people are doing right to

2695
01:30:51,160 --> 01:30:52,120
0,150 150,330 330,480 480,750 750,960
s one s two and

2696
01:30:52,480 --> 01:30:54,400
0,510 540,840 870,1050 1050,1590 1620,1920
um, they have a haven't

2697
01:30:54,400 --> 01:30:55,800
0,210 210,420 420,1020
seen that basically.

2698
01:30:55,800 --> 01:30:57,330
0,870 900,1080 1080,1140 1140,1470 1470,1530
Yeah, this is probably the

2699
01:30:57,330 --> 01:30:58,410
0,270 270,570 570,810 810,930 930,1080
reason why they would go

2700
01:30:58,410 --> 01:30:59,800
0,180 180,240 240,780
through the proxy.

2701
01:31:01,870 --> 01:31:03,360
0,270 270,810
I see.

2702
01:31:03,390 --> 01:31:07,140
0,1860
Okay.

2703
01:31:07,460 --> 01:31:08,750
0,330 330,450 450,600 600,1140 1140,1290
I have a question kind

2704
01:31:08,750 --> 01:31:10,160
0,60 60,300 300,570 570,690 690,1410
of going back to that

2705
01:31:10,520 --> 01:31:13,320
0,390 390,810 810,1230 1230,2010
like unanswered questions about.

2706
01:31:13,600 --> 01:31:15,400
0,210 210,270 270,420 420,780 780,1800
Kind of like cross object

2707
01:31:15,640 --> 01:31:18,220
0,180 180,330 330,480 480,1110 1350,2580
when your eye's ability I

2708
01:31:18,250 --> 01:31:19,700
0,420 420,930
guess like.

2709
01:31:20,440 --> 01:31:21,670
0,150 150,270 270,390 390,990 990,1230
Is that a whole other

2710
01:31:21,670 --> 01:31:22,570
0,210 210,300 300,660 660,810 810,900
can of worms that we

2711
01:31:22,570 --> 01:31:24,010
0,270 270,510 510,840 840,1260 1260,1440
haven't really talked about which

2712
01:31:24,010 --> 01:31:24,700
0,150 150,330 330,450 450,570 570,690
is like if you want

2713
01:31:24,700 --> 01:31:25,810
0,60 60,810 840,930 930,1020 1020,1110
to do I don't know

2714
01:31:25,810 --> 01:31:26,500
0,90 90,180 180,360 360,570 570,690
what the right term is

2715
01:31:26,500 --> 01:31:28,870
0,120 120,270 270,1590 1620,1830 1830,2370
but like transactions that like

2716
01:31:28,870 --> 01:31:31,780
0,570 570,1530 1800,2190 2190,2340 2340,2910
cross multiple pieces of state

2717
01:31:31,780 --> 01:31:33,300
0,150 150,300 300,840
like if you're.

2718
01:31:33,300 --> 01:31:34,860
0,180 180,240 240,570 570,780 990,1560
Trying to implement an operation

2719
01:31:34,860 --> 01:31:35,730
0,90 90,180 180,360 360,510 510,870
where it's like you're setting

2720
01:31:35,730 --> 01:31:36,570
0,150 150,240 240,480 480,600 600,840
a to one and b

2721
01:31:36,570 --> 01:31:37,740
0,540 540,690 690,810 810,990 990,1170
two and you should only

2722
01:31:37,740 --> 01:31:39,240
0,210 210,750 750,1230 1230,1320 1320,1500
see those together or not

2723
01:31:39,240 --> 01:31:40,650
0,150 150,420 420,540 570,1320 1320,1410
at all like ethnicity of

2724
01:31:40,650 --> 01:31:42,150
0,240 270,480 480,750 780,1200 1200,1500
that have we talked about

2725
01:31:42,150 --> 01:31:43,170
0,240 240,360 360,570 570,870 870,1020
that in any of the

2726
01:31:43,170 --> 01:31:45,210
0,180 180,330 330,570 570,930 1050,2040
things we've seen for nobody

2727
01:31:45,210 --> 01:31:47,310
0,180 180,240 240,450 450,990 1830,2100
within a couple weeks we're

2728
01:31:47,310 --> 01:31:47,850
0,120 120,180 180,270 270,360 360,540
going to be a big

2729
01:31:47,850 --> 01:31:49,440
0,600 720,1080 1080,1440 1440,1530 1530,1590
topic I basically have to

2730
01:31:49,440 --> 01:31:50,740
0,120 120,810
do transactions.

2731
01:31:50,740 --> 01:31:52,450
0,420 1050,1290 1290,1380 1380,1470 1470,1710
Okay, that's good to know,

2732
01:31:52,450 --> 01:31:53,740
0,690
thanks.

2733
01:31:54,980 --> 01:31:55,790
0,180 180,390 390,540 540,690 690,810
You mind going back to

2734
01:31:55,790 --> 01:31:57,820
0,120 120,240 240,750 750,1470
like the third slide.

2735
01:31:58,100 --> 01:31:59,080
0,480
Yep.

2736
01:32:00,050 --> 01:32:00,680
0,120 120,330 330,480 480,570 570,630
I can go to the

2737
01:32:00,680 --> 01:32:02,000
0,300 300,750
third slide.

2738
01:32:03,580 --> 01:32:05,620
0,690 840,1140 1140,1380 1380,1590 1590,2040
Um, maybe not fourth slide.

2739
01:32:09,110 --> 01:32:11,210
0,450 450,630 630,900 900,1320 1470,2100
Oh it's like sorry I'm

2740
01:32:12,410 --> 01:32:13,250
0,330 330,480 480,660 660,690 690,840
so I was a little

2741
01:32:13,250 --> 01:32:14,810
0,90 90,690 720,1080 1080,1230 1230,1560
bit confused when you mention

2742
01:32:14,810 --> 01:32:16,280
0,240 240,600 720,960 960,1200 1200,1470
like if lock holder failed

2743
01:32:16,280 --> 01:32:18,800
0,540 540,870 870,1290 1560,2010 2040,2520
intermediate stage stuff, um what

2744
01:32:18,800 --> 01:32:20,870
0,570 570,750 750,900 900,1440 1650,2070
exactly on this slide applies

2745
01:32:20,870 --> 01:32:21,800
0,120 120,300 300,600 600,750 750,930
to z locks and what

2746
01:32:21,800 --> 01:32:22,760
0,300 300,390 390,510 510,660 660,960
applies to the go locks

2747
01:32:22,760 --> 01:32:23,540
0,330
again.

2748
01:32:24,160 --> 01:32:26,230
0,600 600,1140 1140,1410 1410,1800 1800,2070
Um the these almost all

2749
01:32:26,230 --> 01:32:28,140
0,480 480,720 720,870 870,1410
statements about sea lochs.

2750
01:32:29,760 --> 01:32:31,230
0,510 510,750 750,840 840,1110 1110,1470
So is the first statement

2751
01:32:31,230 --> 01:32:32,100
0,150 150,240 240,360 360,570 570,870
that if the lock holder

2752
01:32:32,100 --> 01:32:33,900
0,630 630,840 840,990 990,1500 1500,1800
fails, then the intermediate c

2753
01:32:33,900 --> 01:32:35,400
0,330 360,750 750,1050 1050,1260 1260,1500
is not cleaned up, or

2754
01:32:35,400 --> 01:32:38,190
0,180 180,480 480,780 870,1620 1860,2790
is cleaned up no immediate

2755
01:32:38,190 --> 01:32:40,440
0,270 270,390 390,1080 1350,1890 1890,2250
state is visible but then

2756
01:32:40,440 --> 01:32:41,400
0,390 390,480 480,660 660,720 720,960
generally you have a leader

2757
01:32:41,400 --> 01:32:42,420
0,360 360,480 480,600 600,870 870,1020
election you could clean up

2758
01:32:42,420 --> 01:32:43,650
0,90 90,570 570,930 930,1110 1110,1230
the intermediate stage that was

2759
01:32:43,650 --> 01:32:45,080
0,240 240,480 480,960
just like um.

2760
01:32:46,660 --> 01:32:47,950
0,150 150,570 570,810 810,990 990,1290
The point o so with

2761
01:32:48,250 --> 01:32:49,480
0,240 240,450 450,840 840,960 960,1230
with go locks is that

2762
01:32:49,480 --> 01:32:50,590
0,270 270,600 600,690 690,930 930,1110
also not the case like

2763
01:32:50,590 --> 01:32:51,580
0,180 180,390 390,450 450,840 840,990
if there's a machine that's

2764
01:32:51,580 --> 01:32:52,960
0,240 240,330 330,510 510,900 1140,1380
holding a go lock that's

2765
01:32:52,960 --> 01:32:54,310
0,270 270,690 720,870 870,1200 1290,1350
doing stuff and then all

2766
01:32:54,700 --> 01:32:56,890
0,330 330,660 660,1320 1470,1860 1860,2190
of sudden dies isn't still

2767
01:32:56,890 --> 01:32:58,840
0,90 90,630 630,870 870,1440
the intermediate c visible.

2768
01:32:59,410 --> 01:33:00,940
0,450 450,720 720,1080 1080,1320 1320,1530
Okay I I think what

2769
01:33:00,940 --> 01:33:02,170
0,90 90,360 360,600 600,780 780,1230
I'm talking about go locks,

2770
01:33:02,170 --> 01:33:03,250
0,90 90,300 300,630 630,930 930,1080
you know is something that's

2771
01:33:03,250 --> 01:33:05,110
0,120 120,510 510,1020 1020,1410 1410,1860
a statement about multiple threats

2772
01:33:05,110 --> 01:33:06,280
0,300 300,420 420,480 480,720 720,1170
running on the same machine

2773
01:33:06,310 --> 01:33:08,890
0,390 690,990 990,1590 1650,2430 2460,2580
right and so if the

2774
01:33:08,890 --> 01:33:10,690
0,270 270,630 630,1260 1260,1500 1500,1800
goal walk disappears because machine

2775
01:33:10,690 --> 01:33:11,680
0,330 330,510 510,570 570,930 930,990
crashes all the threats are

2776
01:33:11,680 --> 01:33:13,280
0,150 150,480 480,780 780,1110
not machine crash, too.

2777
01:33:20,680 --> 01:33:22,440
0,510 840,1260
Right, but.

2778
01:33:22,840 --> 01:33:23,620
0,210 210,360 360,540 540,690 690,780
When you say that the

2779
01:33:23,620 --> 01:33:25,660
0,540 540,840 840,990 990,1620 1620,2040
intermediate state is visible to

2780
01:33:25,870 --> 01:33:27,340
0,360 360,870
other people.

2781
01:33:27,430 --> 01:33:28,780
0,420 420,630 630,990 990,1110 1110,1350
That's still true for gold

2782
01:33:28,780 --> 01:33:30,200
0,360 360,540 540,840
locks though right.

2783
01:33:30,640 --> 01:33:31,600
0,210 210,300 300,480 480,630 630,960
You know if they written

2784
01:33:31,600 --> 01:33:34,420
0,420 420,720 720,990 990,1590 1740,2820
persistent state to disk, a

2785
01:33:34,420 --> 01:33:35,710
0,420 420,630 630,780 780,1020 1020,1290
or into some shared file

2786
01:33:35,710 --> 01:33:36,820
0,390 390,540 540,780 780,840 840,1110
system like no the machine

2787
01:33:36,820 --> 01:33:37,630
0,90 90,390 390,480 480,720 720,810
is gone, the disc is

2788
01:33:37,630 --> 01:33:39,120
0,330 330,570 570,630 630,960
gone, everything is gone.

2789
01:33:40,220 --> 01:33:41,930
0,450 450,720 720,1170 1200,1500 1500,1710
Oh god, okay, so it's

2790
01:33:41,930 --> 01:33:43,070
0,180 180,330 330,420 420,900 930,1140
saying that the purse like

2791
01:33:43,070 --> 01:33:45,440
0,90 90,1050 1230,1470 1470,1980 1980,2370
the persistence like intermediate stays

2792
01:33:45,440 --> 01:33:47,930
0,540 570,1350 1350,1680 1680,2220 2220,2490
persistent zoo keeper intermediate state

2793
01:33:47,930 --> 01:33:49,280
0,150 150,240 240,690 720,960 960,1350
might be visible, we're gonna

2794
01:33:49,280 --> 01:33:50,810
0,450 450,990 990,1260 1260,1440 1440,1530
delete z guy might have

2795
01:33:50,810 --> 01:33:52,220
0,300 300,420 420,630 630,1110 1110,1410
created some more files and

2796
01:33:52,220 --> 01:33:53,940
0,390 390,540 540,900 900,1260
those are visible now.

2797
01:33:54,550 --> 01:33:56,320
0,480 570,720 720,1050 1290,1530 1530,1770
Okay I see, thank you

2798
01:33:56,740 --> 01:33:58,630
0,780 780,1020 1020,1410 1410,1650 1650,1890
so just follow that since

2799
01:33:58,630 --> 01:34:00,760
0,90 90,1260 1260,1680 1740,1920 1920,2130
the implication that if a

2800
01:34:00,760 --> 01:34:02,530
0,360 360,840 840,1170 1170,1650 1650,1770
goal routine ever dies while

2801
01:34:02,530 --> 01:34:03,980
0,270 270,390 390,990
holding the lock.

2802
01:34:04,100 --> 01:34:05,420
0,120 120,600 600,780 780,1140 1140,1320
The entire go program must

2803
01:34:05,420 --> 01:34:07,400
0,90 90,360 360,840
have died too.

2804
01:34:07,820 --> 01:34:08,690
0,150 150,270 270,570 570,660 660,870
And as you can never

2805
01:34:08,690 --> 01:34:09,800
0,150 150,210 210,480 480,870 870,1110
have a good routine die,

2806
01:34:09,800 --> 01:34:11,480
0,210 210,480 480,1080 1170,1410 1410,1680
holding along with and have

2807
01:34:11,480 --> 01:34:12,560
0,450 450,660 660,720 720,780 780,1080
other parts of the program

2808
01:34:12,560 --> 01:34:14,580
0,660 1440,1770
continuously, okay.

2809
01:34:15,070 --> 01:34:16,240
0,240 240,420 420,660 660,1050 1050,1170
The go routine crashes, the

2810
01:34:16,240 --> 01:34:17,780
0,420 420,990
application crashes.
