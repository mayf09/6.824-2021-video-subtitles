1
00:00:01,280 --> 00:00:03,860
0,390 390,1020 1050,1590 1770,2100 2100,2580
Okay, {} so good morning,

2
00:00:03,890 --> 00:00:05,690
0,270 270,960 960,1110 1110,1320 1320,1800
good afternoon or good evening

3
00:00:05,690 --> 00:00:07,520
0,240 240,630 630,780 780,1140 1680,1830
or wherever you are,| and

4
00:00:07,520 --> 00:00:08,480
0,180 180,360 360,540 540,840 840,960
I said the plan for

5
00:00:08,480 --> 00:00:09,980
0,480 750,900 900,990 990,1200 1200,1500
today is to talk about

6
00:00:09,980 --> 00:00:11,570
0,270 270,570 570,1080 1140,1380 1380,1590
the {Frangipani -},| {} this

7
00:00:11,570 --> 00:00:13,520
0,120 120,210 210,570 570,1080 1470,1950
is a paper from {}

8
00:00:13,550 --> 00:00:15,590
0,810 810,1410 1410,1530 1530,1710 1740,2040
1997,| so it's a bit

9
00:00:15,590 --> 00:00:16,780
0,120 120,210 210,510 510,1020
of an older paper,|

10
00:00:17,240 --> 00:00:18,500
0,330 330,450 450,990 990,1080 1080,1260
{} the context of this

11
00:00:18,500 --> 00:00:21,230
0,870 930,1410 1410,1740 1740,2010 2010,2730
paper is network file systems,|

12
00:00:29,510 --> 00:00:30,470
0,450 450,570 570,660 660,840 840,960
and you know you should

13
00:00:30,470 --> 00:00:31,910
0,150 150,420 420,810 810,1080 1080,1440
think about systems such as

14
00:00:31,910 --> 00:00:33,260
0,150 150,450 450,720 720,1080 1080,1350
you know {Athena -} {AFS

15
00:00:33,260 --> 00:00:34,820
0,450 750,900 900,1020 1020,1260 1260,1560
-}| {that,you,know} the file system

16
00:00:34,820 --> 00:00:38,000
0,90 90,660 960,1500 1500,2460 2490,3180
at Athena {} dropbox,| a

17
00:00:38,030 --> 00:00:39,650
0,510 510,900 900,1170 1170,1260 1260,1620
more modern version of this,|

18
00:00:40,040 --> 00:00:41,840
0,690 690,780 780,1200 1200,1470 1470,1800
but the general goal here

19
00:00:41,840 --> 00:00:43,010
0,120 120,210 210,600 600,840 840,1170
is| to basically share files

20
00:00:43,010 --> 00:00:44,750
0,510 540,810 810,1140 1140,1230 1230,1740
between a collection of users.|

21
00:00:45,520 --> 00:00:48,610
0,570 870,1260 1260,1530 1530,2340 2370,3090
{} {Frangipani -} itself {}

22
00:00:48,610 --> 00:00:49,600
0,180 180,240 240,360 360,600 600,990
you know it's not widely

23
00:00:49,600 --> 00:00:51,400
0,540 630,900 900,1200 1200,1500 1500,1800
used| or wasn't widely used

24
00:00:51,400 --> 00:00:53,410
0,330 330,420 420,720 720,1230 1410,2010
outside of the deck {}.|

25
00:00:53,410 --> 00:00:54,760
0,240 240,360 360,480 480,780 780,1350
And so the real focus

26
00:00:54,880 --> 00:00:56,110
0,450 570,750 750,960 960,1140 1140,1230
of the things you should

27
00:00:56,110 --> 00:00:56,890
0,180 180,300 300,360 360,510 510,780
get out of this paper

28
00:00:56,890 --> 00:01:00,910
0,570 840,1620 1680,2520 2550,3540 3540,4020
today are three ideas| and

29
00:01:00,910 --> 00:01:02,380
0,420 420,600 600,990 990,1200 1200,1470
ideas that actually will show

30
00:01:02,380 --> 00:01:03,520
0,210 240,540 540,660 660,990 990,1140
up over and over in

31
00:01:03,520 --> 00:01:04,570
0,90 90,570 570,660 660,840 840,1050
a couple of, next couple

32
00:01:04,570 --> 00:01:05,920
0,60 60,510 750,1200 1200,1260 1260,1350
of weeks.| First of all

33
00:01:05,920 --> 00:01:07,900
0,330 330,1080
cache coherence,|

34
00:01:08,800 --> 00:01:12,280
0,690 690,810 810,1080 1080,1890
protocols for cache coherence,|

35
00:01:13,310 --> 00:01:17,000
0,330 330,840 840,1290 1290,1860
{} second, distributed locking,

36
00:01:23,430 --> 00:01:26,580
0,270 270,540 540,1710 1950,2460 2460,3150
and third, distributed crash recovery.|

37
00:01:32,830 --> 00:01:33,970
0,270 270,510 510,660 660,900 900,1140
And these are gonna be

38
00:01:33,970 --> 00:01:35,200
0,210 210,570 570,660 660,810 810,1230
three ideas,| are gonna be

39
00:01:35,200 --> 00:01:36,310
0,150 150,600 600,780 780,930 930,1110
as {I,mentioned} show up in

40
00:01:36,310 --> 00:01:37,570
0,480 480,570 570,660 660,840 840,1260
the, in the next couple

41
00:01:37,570 --> 00:01:38,890
0,90 90,360 630,780 780,1260 1260,1320
of weeks,| in particular, we're

42
00:01:38,890 --> 00:01:40,540
0,120 120,510 540,1020 1050,1530 1530,1650
going to read,| {} {you,know}

43
00:01:40,540 --> 00:01:41,920
0,120 120,360 360,630 630,1080 1080,1380
we're starting next week to

44
00:01:41,920 --> 00:01:43,870
0,150 150,210 210,810 810,1290 1290,1950
sort of heavy-duty transaction systems|

45
00:01:44,140 --> 00:01:47,410
0,750 750,2100 2130,2670 2670,2730 2730,3270
and they build a lot

46
00:01:47,470 --> 00:01:49,450
0,780 810,1530 1530,1740 1740,1890 1890,1980
on {} given some of

47
00:01:49,450 --> 00:01:50,440
0,210 210,600 600,660 660,750 750,990
the techniques| or to use

48
00:01:50,440 --> 00:01:51,430
0,150 150,270 270,420 420,840 840,990
some of the techniques that

49
00:01:51,430 --> 00:01:52,750
0,390 390,510 510,780 780,1080 1080,1320
actually {} {Frangipani -} also

50
00:01:52,750 --> 00:01:53,380
0,510
uses.|

51
00:01:53,730 --> 00:01:55,110
0,150 150,540 570,840 840,1170 1170,1380
And so {Frangipani -} {is,sort,of}

52
00:01:55,110 --> 00:01:57,600
0,240 240,420 420,720 720,1410 1710,2490
a more gentle introduction to

53
00:01:57,630 --> 00:01:59,580
0,300 420,870 900,1380 1380,1800 1800,1950
these three topics,| before we

54
00:01:59,580 --> 00:02:01,740
0,210 210,300 300,1140 1140,1560 1560,2160
get to heavy-duty transaction systems.|

55
00:02:02,560 --> 00:02:03,820
0,330 570,840 840,990 990,1200 1200,1260
And {} the idea is

56
00:02:03,820 --> 00:02:05,230
0,360 360,510 510,870 870,1320 1320,1410
also {Frangipani's -} itself is

57
00:02:05,230 --> 00:02:07,300
0,90 90,420 420,900 1170,1740 1740,2070
an interesting design,| {} from

58
00:02:07,300 --> 00:02:09,850
0,600 600,960 960,1230 1230,1920 2100,2550
a distribute system perspective, {}|

59
00:02:09,850 --> 00:02:11,050
0,150 150,300 300,900 900,930 930,1200
it is {} a cool

60
00:02:11,050 --> 00:02:13,780
0,450 1020,1500 1500,2040 2250,2490 2490,2730
system.| Let me {} make

61
00:02:13,780 --> 00:02:16,240
0,210 210,660 660,1320 1350,2010 2100,2460
that point by {} sort

62
00:02:16,240 --> 00:02:18,430
0,150 150,780 780,1140 1140,1620 1620,2190
of {[trusting],sort,of} the traditional designs

63
00:02:18,430 --> 00:02:20,560
0,330 330,660 660,900 900,1320 1680,2130
for network file system,| so

64
00:02:20,590 --> 00:02:21,920
0,810
traditional

65
00:02:22,860 --> 00:02:24,600
0,570 630,720 720,1020 1020,1440 1440,1740
or the most common network

66
00:02:24,600 --> 00:02:26,010
0,240 240,540 540,990 990,1320 1320,1410
file system design,| since if

67
00:02:26,010 --> 00:02:28,230
0,120 120,300 300,630 630,1500 1950,2220
you think about like {

68
00:02:28,230 --> 00:02:30,360
0,510 540,690 690,930 930,1560 1560,2130
-} AFS on Athena,| if

69
00:02:30,510 --> 00:02:31,680
0,750 750,870 870,930 930,1110 1110,1170
you have a set of

70
00:02:31,680 --> 00:02:32,780
0,690
clients,|

71
00:02:33,710 --> 00:02:35,030
0,390 390,600 600,840 840,1050 1050,1320
{and,this} is a very simple

72
00:02:35,030 --> 00:02:36,500
0,510 1140,1200 1200,1260 1260,1410 1410,1470
picture of a set of

73
00:02:36,500 --> 00:02:37,940
0,600 600,690 690,810 810,1230 1230,1440
clients,| you know connected to

74
00:02:37,940 --> 00:02:40,310
0,240 240,930 1440,2040 2040,2100 2100,2370
some network,| represent the network

75
00:02:40,310 --> 00:02:41,570
0,300 300,390 390,660 660,900 900,1260
basically a single {wire -},|

76
00:02:41,720 --> 00:02:43,250
0,150 150,990 990,1200 1200,1440 1440,1530
{you,know} sharing a number of

77
00:02:43,250 --> 00:02:45,980
0,270 270,870 1890,2160 2160,2490 2490,2730
file servers| and {then,a} file

78
00:02:45,980 --> 00:02:48,380
0,540 570,810 810,990 990,2040
servers have their disk.|

79
00:02:52,740 --> 00:02:54,870
0,510 510,870 870,1200 1830,1980 1980,2130
And basically all the all

80
00:02:54,870 --> 00:02:57,240
0,60 60,840 1140,2070
the complexity {}

81
00:02:57,580 --> 00:02:59,020
0,420 420,900 900,1140 1140,1320 1320,1440
although,| okay, I'll get to

82
00:02:59,020 --> 00:03:01,000
0,480 480,1140 1140,1320 1320,1650 1650,1980
cache coherence in a detail

83
00:03:01,000 --> 00:03:03,580
0,90 90,120 120,450 930,1560 1920,2580
in a second,| {} the,

84
00:03:04,060 --> 00:03:05,500
0,150 150,240 240,780 780,900 900,1440
all the complexity in the

85
00:03:05,500 --> 00:03:07,510
0,390 390,480 480,1350 1350,1920 1920,2010
design is basically here, at

86
00:03:07,510 --> 00:03:09,790
0,60 60,330 330,780 1560,1920 1920,2280
the file servers,| file servers

87
00:03:09,790 --> 00:03:10,930
0,540 540,630 630,810 810,900 900,1140
implement you know the file

88
00:03:10,930 --> 00:03:12,970
0,270 270,930 930,1230 1230,1710 1710,2040
system operations,| open close read

89
00:03:12,970 --> 00:03:14,200
0,420 420,480 480,600 600,1080 1080,1230
write, you know stat on

90
00:03:14,200 --> 00:03:17,320
0,390 810,1170 1170,2280 2310,2940 2940,3120
everything| and they write things

91
00:03:17,320 --> 00:03:18,460
0,90 90,450 450,630 630,750 750,1140
to disk in the crash

92
00:03:18,460 --> 00:03:21,370
0,630 870,1560 1560,2100 2100,2460 2760,2910
{} resilient {or,resistant} way| and

93
00:03:21,370 --> 00:03:22,330
0,60 60,450 450,540 540,780 780,960
the clients are really sort

94
00:03:22,330 --> 00:03:24,010
0,90 90,510 810,960 960,1440 1500,1680
of dumb or simple,| they

95
00:03:24,010 --> 00:03:25,150
0,180 180,390 390,540 540,1020 1020,1140
didn't really do much,| {you,know}

96
00:03:25,150 --> 00:03:26,530
0,420 420,660 660,840 840,1260 1260,1380
perhaps do some caching as

97
00:03:26,530 --> 00:03:28,150
0,120 120,270 270,420 420,1050 1170,1620
they do in AFS, {}|

98
00:03:28,150 --> 00:03:29,170
0,210 210,450 450,570 570,840 840,1020
but you know most of

99
00:03:29,170 --> 00:03:31,330
0,420 420,900 930,1170 1170,1830 1830,2160
these is,| they're relaying file

100
00:03:31,330 --> 00:03:33,100
0,270 270,930 930,1170 1170,1620 1620,1770
system operations from client, from

101
00:03:33,100 --> 00:03:34,780
0,510 510,630 630,720 720,1200 1470,1680
programs that are running| like

102
00:03:34,780 --> 00:03:36,460
0,360 360,540 540,1050 1050,1560 1560,1680
whatever the [] on you're

103
00:03:36,460 --> 00:03:37,510
0,270 270,600 600,690 690,810 810,1050
client one| and it does

104
00:03:37,510 --> 00:03:38,980
0,270 270,780 990,1170 1170,1410 1410,1470
open close,| and most of

105
00:03:38,980 --> 00:03:40,180
0,90 90,150 150,450 450,720 720,1200
what the client does relaying

106
00:03:40,180 --> 00:03:41,800
0,180 180,690 690,810 810,1050 1050,1620
those operations to file servers.|

107
00:03:42,510 --> 00:03:43,500
0,180 180,450 450,750 750,900 900,990
And one reason that the

108
00:03:43,500 --> 00:03:45,630
0,450 450,780 810,1440 1440,1650 1650,2130
design is popular is| because

109
00:03:45,630 --> 00:03:46,950
0,210 210,450 450,870 900,1140 1140,1320
you know like [] from

110
00:03:46,950 --> 00:03:48,780
0,60 60,420 420,1110 1200,1650 1650,1830
{} security perspective,| {} it

111
00:03:48,780 --> 00:03:49,800
0,90 90,150 150,420 420,780 780,1020
is a nice design,| because

112
00:03:49,800 --> 00:03:52,170
0,300 300,600 960,1500 1650,2010 2010,2370
most of the file servers

113
00:03:52,170 --> 00:03:53,550
0,180 180,270 270,480 480,1110 1230,1380
have to be trusted,| but

114
00:03:53,550 --> 00:03:54,420
0,60 60,420 420,660 660,810 810,870
the clients don't have to

115
00:03:54,420 --> 00:03:55,380
0,120 120,630
be trusted.|

116
00:03:56,760 --> 00:03:57,690
0,240 240,570 570,630 630,690 690,930
And certainly in a setting

117
00:03:57,690 --> 00:03:59,370
0,180 180,720 720,990 990,1260 1260,1680
like MIT,| we're like machines

118
00:03:59,370 --> 00:04:00,360
0,90 90,240 240,360 360,900 900,990
are just in public| and

119
00:04:00,360 --> 00:04:01,620
0,240 240,540 540,780 780,1110 1110,1260
who knows who installs what

120
00:04:01,620 --> 00:04:02,550
0,150 150,210 210,600 600,750 750,930
kind of software on it,|

121
00:04:02,550 --> 00:04:04,590
0,450 720,1020 1020,1290 1290,1410 1410,2040
you know that is a

122
00:04:04,590 --> 00:04:07,350
0,420 420,960 1350,2370 2370,2490 2490,2760
nice property,| Frangipani {on,the,other,end -},

123
00:04:07,350 --> 00:04:08,700
0,120 120,180 180,630 630,930 930,1350
has a very different design

124
00:04:08,910 --> 00:04:10,860
0,300 300,540 540,810 810,1500 1500,1950
and much more decentralized design.|

125
00:04:14,300 --> 00:04:15,440
0,600 600,810 810,870 870,1080 1080,1140
{} And in {Frangipani -

126
00:04:15,440 --> 00:04:16,520
0,300 300,690 690,780 780,990 990,1080
-} actually a lot of

127
00:04:16,520 --> 00:04:19,220
0,360 360,660 660,1260 1500,2490 2490,2700
the file server,| {} it's

128
00:04:19,220 --> 00:04:20,570
0,450 450,660 660,930 930,1170 1170,1350
really there's actually no real

129
00:04:20,570 --> 00:04:21,680
0,270 270,660 660,750 750,990 990,1110
file server in this {}

130
00:04:21,680 --> 00:04:23,180
0,300 300,510 510,630 630,1200 1290,1500
literally sends the work, {}|

131
00:04:23,180 --> 00:04:25,190
0,330 480,870 900,1020 1020,1590 1590,2010
but the the clients basically

132
00:04:25,190 --> 00:04:27,380
0,690 1140,1620 1620,1710 1710,1950 1950,2190
implement run the file server

133
00:04:27,380 --> 00:04:28,360
0,210 210,810
code itself.|

134
00:04:28,790 --> 00:04:30,200
0,240 240,540 540,750 750,930 930,1410
So let's say with two

135
00:04:30,440 --> 00:04:32,360
0,810 1050,1530 1530,1770 1770,1830 1830,1920
clients and most of the

136
00:04:32,360 --> 00:04:34,430
0,240 240,1050 1080,1410 1410,1890 1890,2070
file system code itself,| like

137
00:04:34,430 --> 00:04:35,720
0,120 120,270 270,420 420,930 930,1290
the thing that actually has

138
00:04:35,720 --> 00:04:37,220
0,240 240,420 420,840 840,990 990,1500
{inode -} managers,| {inode -}

139
00:04:37,250 --> 00:04:39,020
0,270 270,840 840,930 930,1170 1170,1770
{} updates you know files,

140
00:04:39,110 --> 00:04:40,880
0,420 420,1020 1140,1290 1290,1380 1380,1770
creates directories,| all the code

141
00:04:40,880 --> 00:04:42,080
0,270 270,360 360,630 630,810 810,1200
instead of living on the

142
00:04:42,110 --> 00:04:43,520
0,240 240,810 840,1170 1170,1290 1290,1410
file server,| looks like it

143
00:04:43,520 --> 00:04:45,060
0,330 330,510 510,750 750,1380
lives on the clients.|

144
00:04:45,630 --> 00:04:46,950
0,420 570,750 750,960 960,1170 1170,1320
{You,know} the only thing that

145
00:04:46,950 --> 00:04:49,710
0,570 690,1440 1740,2220 2220,2490 2490,2760
really the the file server

146
00:04:49,710 --> 00:04:52,530
0,630 660,1440 1440,1620 1620,2130 2160,2820
share is a big virtual

147
00:04:52,530 --> 00:04:53,500
0,510
disk.|

148
00:04:53,690 --> 00:04:54,480
0,180

149
00:04:58,730 --> 00:04:59,930
0,150 150,240 240,390 390,1020 1020,1200
And if you will may

150
00:04:59,930 --> 00:05:01,100
0,120 120,180 180,390 390,1050 1050,1170
be a good image you

151
00:05:01,100 --> 00:05:02,090
0,180 180,270 270,450 450,900 900,990
have in your head| or

152
00:05:02,090 --> 00:05:03,140
0,150 150,570 570,810 810,900 900,1050
a conceptual image you have

153
00:05:03,140 --> 00:05:03,860
0,90 90,210 210,420 420,600 600,720
in your head| is that

154
00:05:03,860 --> 00:05:05,270
0,90 90,330 330,600 600,750 870,1410
the virtual disk is {basically,like}

155
00:05:05,270 --> 00:05:07,910
0,240 240,660 660,1230 1230,1830 1980,2640
a big ssd drive, {}|

156
00:05:07,910 --> 00:05:09,500
0,690 690,810 810,900 900,1170 1170,1590
and so the file servers,

157
00:05:09,500 --> 00:05:11,720
0,180 180,540 540,990 990,1530 1530,2220
there's basically share one ssd,

158
00:05:11,720 --> 00:05:14,390
0,90 90,870 1110,1500 1500,2040 2190,2670
you know one disk {}

159
00:05:14,390 --> 00:05:15,950
0,240 240,390 390,750 930,1440 1440,1560
with each other,| now of

160
00:05:15,950 --> 00:05:18,110
0,210 210,870 870,1230 1260,1830 1830,2160
course internally this virtual disk

161
00:05:18,110 --> 00:05:19,670
0,360 360,990 990,1260 1260,1290 1290,1560
is implemented using a system

162
00:05:19,670 --> 00:05:21,470
0,180 180,720 1080,1530 1530,1650 1650,1800
called Petal| and you know

163
00:05:21,470 --> 00:05:22,880
0,360 360,660 660,810 810,1140 1140,1410
consists actually of {} many

164
00:05:22,880 --> 00:05:26,180
0,930 1230,2190 2460,2880 2880,3180 3180,3300
machines,| {} and but you

165
00:05:26,180 --> 00:05:27,680
0,120 120,480 480,1050 1050,1140 1140,1500
know you know the machine

166
00:05:27,680 --> 00:05:29,090
0,540 540,600 600,720 720,930 930,1410
replicate you know disk blocks,|

167
00:05:29,090 --> 00:05:30,860
0,450 450,570 570,960 960,1620 1620,1770
there are patches internally to

168
00:05:30,860 --> 00:05:32,450
0,150 150,450 450,660 660,1440 1500,1590
make sure that like you

169
00:05:32,450 --> 00:05:33,680
0,240 240,750 750,870 870,1140 1140,1230
know operators can apply it

170
00:05:33,680 --> 00:05:34,970
0,60 60,150 150,390 390,930 1080,1290
in the right order| and

171
00:05:34,970 --> 00:05:35,780
0,120 120,210 210,330 330,420 420,810
all that kind of stuff,|

172
00:05:35,780 --> 00:05:37,640
0,210 210,450 450,690 690,1170 1170,1860
but from the outside perspective,|

173
00:05:37,790 --> 00:05:38,660
0,120 120,180 180,330 330,750 750,870
you know the interface is

174
00:05:38,660 --> 00:05:40,400
0,540 570,1020 1020,1170 1170,1260 1260,1740
really a read block,

175
00:05:40,700 --> 00:05:42,180
0,420 420,720 720,1200
or write block.|

176
00:05:42,420 --> 00:05:43,140
0,210 210,300 300,390 390,570 570,720
And so it just looks

177
00:05:43,140 --> 00:05:44,540
0,150 150,240 240,720 720,1170
like an ordinary disk.|

178
00:05:45,150 --> 00:05:46,920
0,630 750,1200 1200,1410 1410,1620 1620,1770
And, {} as over those

179
00:05:46,920 --> 00:05:48,000
0,330 330,420 420,750 750,870 870,1080
interesting in this,| you know

180
00:05:48,000 --> 00:05:49,650
0,420 420,600 600,1110 1110,1200 1200,1650
design you contracted to {design's

181
00:05:49,650 --> 00:05:50,610
0,180 240,630 630,690 690,840 840,960
-},| actually a lot of

182
00:05:50,610 --> 00:05:52,500
0,780 810,1050 1050,1230 1230,1740 1740,1890
complexity in this design is

183
00:05:52,500 --> 00:05:55,180
0,180 180,390 390,810 810,1200
on the client side.|

184
00:05:56,100 --> 00:05:57,360
0,540 540,690 690,750 750,960 960,1260
And you know one reason

185
00:05:57,360 --> 00:05:58,350
0,90 90,210 210,420 420,810 810,990
that you like that,| or

186
00:05:58,350 --> 00:05:59,940
0,510 840,1140 1140,1380 1380,1470 1470,1590
why is that,| you know

187
00:05:59,940 --> 00:06:01,560
0,180 180,300 300,990 990,1350 1350,1620
you can grow the file

188
00:06:01,560 --> 00:06:03,480
0,510 810,1170 1170,1560 1560,1680 1680,1920
system {} with the number

189
00:06:03,480 --> 00:06:04,740
0,60 60,630 630,780 780,870 870,1260
of workstations,| so if you

190
00:06:04,740 --> 00:06:06,210
0,330 330,450 450,720 720,810 810,1470
increase the number of clients,|

191
00:06:06,360 --> 00:06:07,890
0,390 390,750 750,930 930,1170 1170,1530
you basically get more CPU

192
00:06:07,890 --> 00:06:08,850
0,360 360,600 600,660 660,780 780,960
power,| because you get more

193
00:06:08,850 --> 00:06:10,020
0,510 510,780 780,840 840,990 990,1170
clients| and you know each

194
00:06:10,020 --> 00:06:10,980
0,90 90,330 330,660 660,780 780,960
of the clients can drive

195
00:06:10,980 --> 00:06:12,060
0,210 210,330 330,480 480,750 750,1080
on its own file system.|

196
00:06:12,590 --> 00:06:13,940
0,180 180,720 840,990 990,1260 1260,1350
And so a lot of

197
00:06:13,940 --> 00:06:15,710
0,360 360,630 630,990 990,1530 1530,1770
the really heavy-duty computation can

198
00:06:15,710 --> 00:06:16,370
0,180 180,270 270,480 480,570 570,660
all be done on the

199
00:06:16,370 --> 00:06:18,320
0,240 240,750 900,1020 1020,1260 1260,1950
client machines| and doesn't involve

200
00:06:18,350 --> 00:06:19,610
0,360 360,570 570,870 870,960 960,1260
any file server at all,|

201
00:06:19,760 --> 00:06:20,720
0,150 150,270 270,450 450,780 780,960
and it is true that

202
00:06:20,720 --> 00:06:21,980
0,480 480,690 690,930 930,1170 1170,1260
in the left side,| the

203
00:06:21,980 --> 00:06:23,480
0,360 360,780 780,1050 1050,1260 1260,1500
network traditional network file system

204
00:06:23,480 --> 00:06:25,220
0,630 930,1080 1080,1290 1290,1380 1380,1740
design| is often the case

205
00:06:25,220 --> 00:06:26,660
0,210 210,300 300,540 540,960 990,1440
that you know the performance

206
00:06:26,660 --> 00:06:28,790
0,570 570,1170 1170,1290 1290,1470 1470,2130
bottlenecks arise you know in

207
00:06:29,180 --> 00:06:31,490
0,660 1170,1470 1470,1560 1560,1770 1770,2310
the, in the file server,|

208
00:06:31,490 --> 00:06:32,540
0,300 300,390 390,630 630,720 720,1050
when the number of clients

209
00:06:32,540 --> 00:06:34,760
0,510 510,1200 1230,1560 1560,1680 1680,2220
actually {} becomes too large|

210
00:06:34,790 --> 00:06:35,870
0,330 330,600 600,660 660,840 840,1080
and often in that case

211
00:06:35,870 --> 00:06:36,920
0,90 90,570 600,750 750,990 990,1050
for example we split the

212
00:06:36,920 --> 00:06:38,870
0,270 270,810 840,1410 1410,1680 1680,1950
file system across different files

213
00:06:38,870 --> 00:06:39,540
0,180 180,540
{servers -}.|

214
00:06:40,900 --> 00:06:41,680
0,270 270,330 330,450 450,630 630,780
{Okay - -}, that's sort

215
00:06:41,680 --> 00:06:43,510
0,120 120,600 930,1260 1260,1590 1650,1830
of the,| {} so from

216
00:06:43,510 --> 00:06:44,860
0,150 150,660 660,780 780,1170 1170,1350
our perspective at least from

217
00:06:44,860 --> 00:06:46,630
0,660 690,1080 1080,1380 1380,1530 1530,1770
a distributed systems {design -

218
00:06:46,630 --> 00:06:48,160
0,390 600,960 960,1050 1050,1440 1440,1530
-},| {Frangipani - -} is

219
00:06:48,160 --> 00:06:49,480
0,360 360,630 630,930 930,1200 1200,1320
interesting,| because it's much more

220
00:06:49,480 --> 00:06:50,890
0,930 930,1080 1080,1230 1230,1320 1320,1410
decentralized,| than sort of the

221
00:06:50,890 --> 00:06:53,170
0,780 780,1440 1440,1650 1650,1920 1920,2280
traditional network file system design.|

222
00:06:56,190 --> 00:06:58,920
0,300 570,750 750,1500 1530,2370 2400,2730
And the reason they wanted

223
00:06:58,920 --> 00:07:01,260
0,60 60,840 870,1470 1470,1770 1770,2340
to explore {} this design

224
00:07:01,350 --> 00:07:02,100
0,120 120,180 180,390 390,480 480,750
has a lot to do

225
00:07:02,100 --> 00:07:03,420
0,180 180,240 240,510 510,840 840,1320
with the use case,| that

226
00:07:03,420 --> 00:07:04,830
0,180 180,690 690,990 990,1320 1320,1410
they imagine or that they

227
00:07:04,830 --> 00:07:05,940
0,150 150,570 570,840 840,960 960,1110
were targeting| and I want

228
00:07:05,940 --> 00:07:06,480
0,60 60,180 180,240 240,420 420,540
to say a little bit

229
00:07:06,480 --> 00:07:07,620
0,210 210,300 300,510 510,780 780,1140
about the use case,| because,

230
00:07:07,800 --> 00:07:08,640
0,450 450,570 570,660 660,690 690,840
{} there were a lot

231
00:07:08,640 --> 00:07:09,810
0,60 60,480 480,810 810,870 870,1170
of questions related to that

232
00:07:09,810 --> 00:07:11,800
0,300 300,630 630,1020 1020,1320
in {} email.| So,

233
00:07:13,340 --> 00:07:14,060
0,150 150,330 330,420 420,510 510,720
so what is the use

234
00:07:14,060 --> 00:07:16,010
0,510 930,1230 1230,1410 1410,1620 1620,1950
case,| {} the use case

235
00:07:16,010 --> 00:07:18,380
0,690 720,2010 2010,2070 2070,2280 2280,2370
is basically a number of

236
00:07:18,380 --> 00:07:20,460
0,660 840,960 960,1830
researchers and engineers,|

237
00:07:24,370 --> 00:07:26,880
0,630 630,720 720,840 840,1890
{} you know compiling,

238
00:07:29,490 --> 00:07:32,580
0,810 810,1560 1740,2190 2190,2880 2880,3090
compiling editing their programs or

239
00:07:32,580 --> 00:07:33,900
0,270 270,1080
writing documents.|

240
00:07:39,710 --> 00:07:41,360
0,210 210,360 360,600 600,1020 1020,1650
So it's really designed to

241
00:07:41,390 --> 00:07:43,520
0,450 450,720 720,1470 1500,1830 1830,2130
papers from a famous research

242
00:07:43,520 --> 00:07:45,980
0,390 390,1410 1410,1560 1560,2070 2070,2460
{lab -} {[] - -},|

243
00:07:46,430 --> 00:07:48,920
0,720 750,1170 1170,1800 1830,2130 2130,2490
and Thekkath like tens of

244
00:07:48,950 --> 00:07:50,390
0,390 390,750 750,1080 1080,1350 1350,1440
{} researcher like 50 to

245
00:07:50,390 --> 00:07:52,310
0,60 60,540 870,1530 1530,1680 1680,1920
{} 100| and they're really

246
00:07:52,310 --> 00:07:53,480
0,180 180,360 360,660 660,750 750,1170
what they're doing is designing

247
00:07:53,480 --> 00:07:55,040
0,90 90,360 360,1110 1110,1290 1290,1560
a file system for their

248
00:07:55,040 --> 00:07:58,520
0,210 210,630 1470,1680 1680,2580 2580,3480
use case,| so everybody is

249
00:07:58,520 --> 00:08:00,650
0,630 840,1260 1260,1530 1530,1650 1650,2130
trusted,| {} all the machines

250
00:08:00,650 --> 00:08:01,700
0,60 60,540 540,630 630,720 720,1050
are trusted, all the software

251
00:08:01,700 --> 00:08:03,500
0,270 270,1140 1470,1620 1620,1710 1710,1800
running trusted| and so the

252
00:08:03,500 --> 00:08:04,730
0,570 570,780 780,870 870,1080 1080,1230
security side of things is

253
00:08:04,730 --> 00:08:06,050
0,420 420,600 600,690 690,990 990,1320
really not an issue for

254
00:08:06,590 --> 00:08:08,600
0,720 720,1080 1080,1380 1380,1530 1530,2010
that,| all the these researchers

255
00:08:08,600 --> 00:08:10,730
0,30 30,930 930,930 930,1800 1800,2130
are heavy-duty {} {} computer

256
00:08:10,730 --> 00:08:12,800
0,510 840,1470 1470,1530 1530,1860 1860,2070
users| and you know and

257
00:08:12,800 --> 00:08:13,790
0,90 90,180 180,360 360,750 780,990
so they want to,| but

258
00:08:13,790 --> 00:08:14,990
0,540 540,690 690,960 960,1050 1050,1200
mostly they're working on their

259
00:08:14,990 --> 00:08:16,400
0,390 390,720 720,1110 1110,1230 1230,1410
own private files| and they're

260
00:08:16,400 --> 00:08:17,720
0,270 270,420 420,570 570,1170 1170,1320
writing their own programs, their

261
00:08:17,720 --> 00:08:20,390
0,330 330,900 900,990 990,1680 2070,2670
writing their own documents, {}|

262
00:08:20,390 --> 00:08:21,620
0,240 240,540 660,1020 1020,1170 1170,1230
and so [] want to

263
00:08:21,620 --> 00:08:22,850
0,390 390,510 510,600 600,1020 1020,1230
interact with the files with

264
00:08:22,850 --> 00:08:24,440
0,210 210,630 630,870 870,1320
high performance file system.|

265
00:08:24,780 --> 00:08:26,550
0,540 780,1260 1260,1320 1320,1440 1440,1770
Of course, you know they

266
00:08:26,550 --> 00:08:28,620
0,240 240,780 870,1590 1590,1920 1920,2070
might share,| otherwise sharing would

267
00:08:28,620 --> 00:08:32,820
0,210 210,720 840,1530 3930,4110 4110,4200
not be interesting,| so they

268
00:08:32,820 --> 00:08:34,410
0,330 330,780 780,1050 1050,1500 1500,1590
both potentially share files and

269
00:08:34,410 --> 00:08:35,720
0,690
directories.|

270
00:08:36,030 --> 00:08:37,500
0,570 630,750 750,990 990,1140 1140,1470
And it shows up in

271
00:08:37,500 --> 00:08:39,030
0,180 180,840 1140,1290 1290,1410 1410,1530
two ways| you know they

272
00:08:39,030 --> 00:08:40,680
0,270 270,570 570,930 930,1350 1350,1650
may work together, collaborate together

273
00:08:40,680 --> 00:08:42,150
0,300 300,540 540,600 600,990 990,1470
around writing a paper| like

274
00:08:42,210 --> 00:08:43,590
0,330 330,480 480,690 690,930 930,1380
paper that we're reading today,|

275
00:08:43,890 --> 00:08:45,720
0,390 390,540 540,1050 1050,1290 1290,1830
{} and so {} they

276
00:08:45,720 --> 00:08:46,950
0,180 180,300 300,660 660,900 900,1230
want have access to a

277
00:08:46,980 --> 00:08:49,140
0,420 420,1140 1260,1530 1530,1770 1770,2160
shared files| for the directory

278
00:08:49,140 --> 00:08:50,520
0,120 120,390 390,510 510,870 870,1380
that holds that particular paper,|

279
00:08:50,820 --> 00:08:52,890
0,570 570,840 840,1170 1170,1800 1800,2070
{} and so to user

280
00:08:52,890 --> 00:08:54,580
0,90 90,390 390,900
to user sharing,|

281
00:08:57,770 --> 00:08:58,520
0,150 150,270 270,420 420,480 480,750
and then there's a second

282
00:08:58,520 --> 00:08:59,570
0,210 210,270 270,720 720,960 960,1050
form of sharing,| like the

283
00:08:59,570 --> 00:09:00,860
0,270 270,600 600,810 810,1080 1080,1290
same user might log into

284
00:09:00,860 --> 00:09:02,560
0,360 360,1230
multiple workstations,|

285
00:09:10,740 --> 00:09:12,440
0,120 120,240 240,600 600,1260
more than one workstation,|

286
00:09:12,840 --> 00:09:14,340
0,270 270,420 420,810 810,1350 1350,1500
so again whatever, user one

287
00:09:14,340 --> 00:09:15,090
0,90 90,180 180,480 480,660 660,750
of the researchers goes to

288
00:09:15,090 --> 00:09:16,860
0,90 90,360 360,780 780,900 900,1770
the public library of []|

289
00:09:16,860 --> 00:09:18,300
0,360 390,750 750,1170 1170,1320 1320,1440
or their library and the

290
00:09:18,300 --> 00:09:20,070
0,270 270,690 750,1050 1050,1620 1620,1770
long general public workstation with

291
00:09:20,070 --> 00:09:21,450
0,570 930,1050 1050,1110 1110,1290 1290,1380
indexer| and it wants to

292
00:09:21,450 --> 00:09:22,050
0,120 120,270 270,360 360,540 540,600
be able to read or

293
00:09:22,050 --> 00:09:23,370
0,270 270,630 630,780 780,1050 1050,1320
write {} their files from

294
00:09:23,730 --> 00:09:24,700
0,210 210,480 480,690
that machine too.|

295
00:09:25,000 --> 00:09:26,260
0,330 330,540 540,600 600,810 810,1260
So that's {} use case|

296
00:09:26,710 --> 00:09:28,840
0,540 690,1110 1110,1590 1590,1860 1860,2130
{} and in this use

297
00:09:28,840 --> 00:09:29,890
0,270 270,480 480,660 660,960 960,1050
case has a number of

298
00:09:29,890 --> 00:09:33,280
0,780 900,1860 1860,2790
design {} implications,|

299
00:09:33,480 --> 00:09:35,010
0,480 510,630 630,750 750,1140 1140,1530
or you know design choices

300
00:09:35,010 --> 00:09:36,810
0,150 150,240 240,1050 1080,1680 1680,1800
that were motivated by a

301
00:09:36,810 --> 00:09:38,900
0,270 270,810
huge case.|

302
00:09:40,180 --> 00:09:42,220
0,300 300,450 450,990 1020,1560 1620,2040
{} And so the one

303
00:09:42,220 --> 00:09:43,990
0,90 90,180 180,840 840,1380 1470,1770
of the primary ones, {}|

304
00:09:43,990 --> 00:09:45,340
0,210 210,330 330,840 840,990 990,1350
that was motivated by this

305
00:09:45,340 --> 00:09:47,160
0,420 420,990 990,1470
use cases caching.|

306
00:09:51,560 --> 00:09:53,330
0,180 180,510 510,600 600,1230 1230,1770
So instead of leaving the

307
00:09:53,360 --> 00:09:54,470
0,300 300,450 450,780 780,990 990,1110
data for example all in

308
00:09:54,470 --> 00:09:55,460
0,390 390,510 510,750 750,930 930,990
Petal| and every read or

309
00:09:55,460 --> 00:09:56,990
0,240 240,690 690,900 900,1020 1020,1530
write operation goes through Petal,|

310
00:09:57,110 --> 00:09:58,220
0,360 360,450 450,660 660,720 720,1110
{} they want to arrange

311
00:09:58,220 --> 00:09:59,450
0,180 180,300 300,390 390,870 870,1230
it,| so the motive actually

312
00:09:59,450 --> 00:10:01,160
0,390 390,690 690,750 750,810 810,1710
actually happens in the workstations|

313
00:10:01,430 --> 00:10:03,200
0,180 180,390 390,900 900,1020 1020,1770
and so that the researchers

314
00:10:03,440 --> 00:10:04,550
0,210 210,360 360,660 660,990 990,1110
since they're mostly working on

315
00:10:04,550 --> 00:10:05,930
0,150 150,270 270,630 630,1170 1170,1380
their own private files,| it

316
00:10:05,930 --> 00:10:06,650
0,150 150,390 390,510 510,570 570,720
seems to make a lot

317
00:10:06,650 --> 00:10:07,430
0,90 90,450 450,570 570,720 720,780
of sense,| they're sort of

318
00:10:07,430 --> 00:10:08,780
0,450 450,720 720,1140 1140,1260 1260,1350
captured data locally on the

319
00:10:08,780 --> 00:10:10,880
0,810 1170,1470 1470,1860 1860,2010 2010,2100
workstation,| {} then as you

320
00:10:10,880 --> 00:10:12,050
0,180 180,270 270,480 480,900 900,1170
read or write files,| there's

321
00:10:12,050 --> 00:10:13,550
0,300 300,630 630,960 960,1320 1320,1500
basically no network traffic really

322
00:10:13,550 --> 00:10:15,830
0,840 1140,1740 1740,2070 2070,2160 2160,2280
necessary,| {} and you can

323
00:10:15,830 --> 00:10:17,630
0,270 420,720 750,1470 1470,1620 1620,1800
sort of write at high

324
00:10:17,630 --> 00:10:20,300
0,750 1050,1560 1560,1890 1890,2250 2250,2670
performance| and one reason one

325
00:10:20,300 --> 00:10:21,980
0,270 270,450 450,1020 1020,1440 1440,1680
way they avoid having a

326
00:10:21,980 --> 00:10:23,570
0,180 180,330 330,780 780,1020 1020,1590
lot of traffic to Petal|

327
00:10:23,690 --> 00:10:24,590
0,420 420,510 510,630 630,690 690,900
is to have a write

328
00:10:24,590 --> 00:10:28,070
0,360 360,1020 2700,3090 3090,3180 3180,3480
back cache instead of write

329
00:10:28,070 --> 00:10:30,140
0,600 660,990 990,1230 1230,1740 1740,2070
through,| so if operations happen

330
00:10:30,140 --> 00:10:30,980
0,270 270,450 450,570 570,780 780,840
actually did you stay in

331
00:10:30,980 --> 00:10:31,910
0,90 90,510 510,660 660,750 750,930
the cache| and at some

332
00:10:31,910 --> 00:10:34,010
0,240 240,600 600,720 720,1380 1650,2100
point later they percolated to

333
00:10:34,010 --> 00:10:34,880
0,330 330,420 420,570 570,690 690,870
Petal,| as {} we'll see

334
00:10:34,880 --> 00:10:37,940
0,90 90,150 150,480 1590,2190
in a second. {}|

335
00:10:38,180 --> 00:10:40,100
0,600 720,1230 1230,1500 1500,1650 1650,1920
So, combine that, like even

336
00:10:40,100 --> 00:10:41,690
0,360 360,780 780,1350 1350,1470 1470,1590
though they're mostly you know

337
00:10:41,690 --> 00:10:42,470
0,420 420,480 480,600 600,660 660,780
workloads are going to be

338
00:10:42,470 --> 00:10:44,000
0,210 210,300 300,870 990,1230 1230,1530
used for private,| {} where

339
00:10:44,000 --> 00:10:45,650
0,360 360,540 540,840 840,1350 1350,1650
they're not sharing going on,|

340
00:10:45,770 --> 00:10:46,880
0,90 90,300 300,750 750,930 930,1110
of course indicates they do

341
00:10:46,880 --> 00:10:48,110
0,570 720,900 900,1020 1020,1170 1170,1230
share,| {} they want to

342
00:10:48,110 --> 00:10:50,000
0,510 540,900 900,1650
have strong consistency,|

343
00:10:50,480 --> 00:10:52,760
0,450 450,810 810,1230 1230,1410 1410,2280
or sometimes called {you,know} coherence.|

344
00:11:00,870 --> 00:11:02,940
0,810 810,1170 1170,1470 1470,1620 1620,2070
{} And so the meaning

345
00:11:02,940 --> 00:11:06,090
0,270 270,960 960,1590 1590,2370 2670,3150
for example,| if a one

346
00:11:06,090 --> 00:11:07,590
0,450 450,690 690,780 780,1260 1260,1500
user writes a file,| then

347
00:11:07,590 --> 00:11:09,150
0,690 690,1050 1050,1380 1380,1410 1410,1560
{} another user, a lot

348
00:11:09,150 --> 00:11:10,830
0,90 90,330 330,870 1110,1590 1590,1680
of {workstation -} reached the

349
00:11:10,830 --> 00:11:12,720
0,540 540,840 840,1290 1290,1530 1530,1890
file,| we graded that user

350
00:11:12,720 --> 00:11:15,090
0,270 270,690 690,1050 1050,1650 1650,2370
actually saw the changes| that

351
00:11:15,090 --> 00:11:16,140
0,120 120,300 300,810 810,870 870,1050
the other workstation the other

352
00:11:16,140 --> 00:11:18,360
0,300 300,510 510,900 1530,2040 2040,2220
user has made| {} and

353
00:11:18,360 --> 00:11:20,310
0,210 210,360 360,750 750,1320 1320,1950
so they want {strong -}

354
00:11:20,310 --> 00:11:21,100
0,660
consistency.|

355
00:11:22,360 --> 00:11:23,980
0,600 750,930 930,1320 1320,1500 1500,1620
{} So, those are the

356
00:11:23,980 --> 00:11:26,470
0,930 930,1530 1530,1860 1860,2220 2220,2490
two {} design choices that

357
00:11:26,470 --> 00:11:28,840
0,270 270,1140 1140,1170 1170,1830 1830,2370
really drive {} this design|

358
00:11:29,260 --> 00:11:31,930
0,270 270,540 540,780 780,1290 1530,2670
as well as this basically

359
00:11:32,140 --> 00:11:33,080
0,720
{}

360
00:11:34,230 --> 00:11:36,100
0,1320
performance.|

361
00:11:42,120 --> 00:11:45,090
0,630 1440,1890 1890,2070 2070,2250 2250,2970
So it may be helpful

362
00:11:45,120 --> 00:11:45,960
0,300 300,450 450,480 480,690 690,840
to think a little bit

363
00:11:45,960 --> 00:11:47,100
0,240 240,480 480,750 750,930 930,1140
about| like what other use

364
00:11:47,100 --> 00:11:48,420
0,330 330,480 480,600 600,960 1200,1320
cases could you have {}

365
00:11:48,420 --> 00:11:49,500
0,210 210,450 450,870 870,960 960,1080
for file systems| and so

366
00:11:49,500 --> 00:11:51,000
0,390 390,930 930,1080 1080,1290 1290,1500
maybe one good one that

367
00:11:51,000 --> 00:11:51,990
0,90 90,300 300,330 330,570 570,990
we talked a lot about

368
00:11:52,290 --> 00:11:53,970
0,420 420,540 540,690 690,900 900,1680
is to think about GFS,|

369
00:11:54,360 --> 00:11:56,190
0,750 750,870 870,990 990,1290 1290,1830
{} you know would GFS

370
00:11:56,190 --> 00:11:57,990
0,510 510,930 930,1380 1380,1500 1500,1800
be a substitute for {Frangipani

371
00:11:57,990 --> 00:11:58,830
0,390 390,480 480,570 570,720 720,840
-} or the other way

372
00:11:58,830 --> 00:12:00,420
0,420 420,540 540,690 690,870 870,1590
around how do they contrast.|

373
00:12:00,870 --> 00:12:01,980
0,510 570,780 780,870 870,960 960,1110
And one way to think

374
00:12:01,980 --> 00:12:03,780
0,180 180,330 330,420 420,990 1020,1800
about this is| that GFS

375
00:12:03,780 --> 00:12:05,460
0,90 90,300 300,570 570,930 930,1680
is really file system designed

376
00:12:05,460 --> 00:12:07,620
0,90 90,300 300,630 630,1470 1800,2160
for {mapreduce -} applications| and

377
00:12:07,620 --> 00:12:08,850
0,360 360,510 510,570 570,840 840,1230
so it's a file system

378
00:12:08,850 --> 00:12:12,840
0,690 810,2340 2340,2910 2940,3390 3390,3990
where files are not cached,|

379
00:12:12,840 --> 00:12:14,100
0,300 300,690 690,780 780,1080 1080,1260
in fact the files tend

380
00:12:14,100 --> 00:12:14,850
0,60 60,180 180,360 360,630 630,750
to be so big,| that

381
00:12:14,850 --> 00:12:16,020
0,120 120,420 420,600 600,960 960,1170
they wouldn't even fit| in

382
00:12:16,020 --> 00:12:16,980
0,150 150,330 330,390 390,780 780,960
the type of cache that

383
00:12:16,980 --> 00:12:18,810
0,360 360,750 750,1140 1440,1620 1620,1830
we're talking about,| it's also

384
00:12:18,810 --> 00:12:20,490
0,300 300,480 480,570 570,990 990,1680
basically sort of read sequentially

385
00:12:20,490 --> 00:12:21,630
0,150 150,480 480,600 600,960 990,1140
from beginning to end,| and

386
00:12:21,630 --> 00:12:23,280
0,210 210,450 810,1020 1020,1560 1560,1650
that's it,| and maybe you

387
00:12:23,280 --> 00:12:25,170
0,120 120,270 270,810 810,1530 1530,1890
know some other {} computer

388
00:12:25,170 --> 00:12:26,400
0,180 180,330 330,480 480,870 870,1230
will read that file,| because

389
00:12:26,400 --> 00:12:27,690
0,120 120,330 330,540 540,810 810,1290
some other {mapreduce -} application

390
00:12:27,690 --> 00:12:28,420
0,240 240,450
running on.|

391
00:12:28,830 --> 00:12:30,210
0,270 270,540 540,750 750,930 930,1380
So think, you think about

392
00:12:30,210 --> 00:12:32,010
0,540 600,900 900,1140 1140,1470 1470,1800
GFS,| there's really no data

393
00:12:32,010 --> 00:12:33,180
0,360 360,570 570,810 810,870 870,1170
caching going on at all,|

394
00:12:33,210 --> 00:12:33,930
0,330 330,390 390,540 540,630 630,720
there's a little bit of

395
00:12:33,930 --> 00:12:35,310
0,300 300,510 510,750 750,1140 1170,1380
caching going on to keep

396
00:12:35,310 --> 00:12:38,100
0,390 390,600 960,1770 1770,1770 2430,2790
track of| where a chunk

397
00:12:38,100 --> 00:12:39,630
0,300 300,720 840,1170 1170,1350 1350,1530
servers were,| but there's actually

398
00:12:39,630 --> 00:12:40,860
0,210 210,630 630,690 690,990 990,1230
no caching of data going

399
00:12:40,860 --> 00:12:42,090
0,210 210,300 300,540 540,660 660,1230
on at all in GFS,|

400
00:12:42,240 --> 00:12:43,200
0,150 150,300 300,510 510,630 630,960
so there's also no cache

401
00:12:43,200 --> 00:12:45,300
0,570 570,990 990,1080 1080,1770 1980,2100
consistency probably in GFS| and

402
00:12:45,300 --> 00:12:46,170
0,120 120,390 390,480 480,780 780,870
so there's a type of

403
00:12:46,170 --> 00:12:47,760
0,600 600,720 720,780 780,930 930,1590
applications that they were targeting|

404
00:12:47,850 --> 00:12:49,020
0,180 180,360 360,720 720,930 930,1170
that just didn't make sense

405
00:12:49,020 --> 00:12:49,780
0,90 90,450
at all.|

406
00:12:50,080 --> 00:12:52,150
0,450 450,540 540,1230 1320,1860 1860,2070
Similarly in GFS,| GFS actually

407
00:12:52,150 --> 00:12:53,500
0,90 90,300 300,630 630,1110 1110,1350
it's not really a real

408
00:12:53,500 --> 00:12:54,520
0,300 300,600 600,690 690,750 750,1020
file system| in the sense

409
00:12:54,520 --> 00:12:55,990
0,90 90,570 600,1050 1050,1260 1260,1470
of the here was not

410
00:12:55,990 --> 00:12:57,790
0,390 390,480 480,780 780,1020 1020,1800
intended to run like VI,

411
00:12:57,880 --> 00:13:00,040
0,1110 1260,1650 1650,1830 1830,1950 1950,2160
GCC,| {} and so didn't

412
00:13:00,040 --> 00:13:01,870
0,660 660,1080 1080,1230 1230,1710 1710,1830
provide straight {sort,of} [positive] or

413
00:13:01,870 --> 00:13:04,840
0,270 270,1020 1050,2490 2520,2850 2850,2970
unique compatibility,| {in,Frangipani -}, you

414
00:13:04,840 --> 00:13:06,130
0,90 90,240 240,810 810,930 930,1290
can just run your standard

415
00:13:06,130 --> 00:13:08,260
0,240 240,1050 1350,1740 1740,1950 1950,2130
Unix applications| and things should

416
00:13:08,260 --> 00:13:10,390
0,210 210,540 690,1470 1500,1590 1590,2130
work out| and the applications

417
00:13:10,390 --> 00:13:12,070
0,600 900,1050 1050,1110 1110,1500 1500,1680
behave in the same way

418
00:13:12,070 --> 00:13:13,180
0,180 180,360 360,690 690,900 900,1110
as if there was not

419
00:13:13,180 --> 00:13:14,470
0,60 60,450 450,660 660,930 930,1290
a distributed file system,| basically

420
00:13:14,470 --> 00:13:15,480
0,300 300,570 570,900
single file system.|

421
00:13:16,990 --> 00:13:23,800
0,600 630,1230 1260,1920 1950,6300 6300,6810
Again in GFS, {there,is} {basically,a,little,bit,of}

422
00:13:23,800 --> 00:13:25,600
0,540 540,690 690,990 990,1290 1290,1800
library| you know actually application

423
00:13:25,600 --> 00:13:26,800
0,510 510,660 660,840 840,930 930,1200
used to read or write

424
00:13:26,800 --> 00:13:28,660
0,630 840,1080 1080,1500 1500,1710 1710,1860
files,| {} {in,GFS -}, but

425
00:13:28,660 --> 00:13:29,950
0,60 60,180 180,510 510,990 990,1290
it was not one hundred

426
00:13:29,950 --> 00:13:31,480
0,300 300,540 540,1110 1110,1200 1200,1530
percent duties compatible at all.|

427
00:13:32,640 --> 00:13:33,540
0,150 150,540 570,720 720,780 780,900
{} So let me give

428
00:13:33,540 --> 00:13:34,470
0,60 60,120 120,480 480,720 720,930
you a sense,| that we

429
00:13:34,470 --> 00:13:37,080
0,120 120,420 420,1230 1380,2220 2220,2610
know these workloads drives really

430
00:13:37,080 --> 00:13:38,340
0,120 120,600 600,720 720,870 870,1260
the design of these different

431
00:13:38,550 --> 00:13:39,930
0,600 600,720 720,840 840,1080 1080,1380
systems,| you know in case

432
00:13:39,930 --> 00:13:41,970
0,210 210,600 810,1140 1140,1440 1440,2040
{GFS -},| {mapreduce -} application

433
00:13:41,970 --> 00:13:43,770
0,150 150,480 480,540 540,1080 1290,1800
that drive the design, {}|

434
00:13:43,770 --> 00:13:45,390
0,330 330,630 630,1050 1080,1200 1200,1620
in case of you know

435
00:13:45,420 --> 00:13:46,440
0,180 180,570 570,720 720,810 810,1020
from Frangipani or the shared

436
00:13:46,440 --> 00:13:47,610
0,210 210,450 450,570 570,810 810,1170
file system is a collection

437
00:13:47,610 --> 00:13:49,590
0,60 60,540 570,1320 1470,1620 1620,1980
of users working on shared

438
00:13:49,590 --> 00:13:50,730
0,300 300,630 630,750 750,1020 1020,1140
file system,| but most of

439
00:13:50,730 --> 00:13:52,560
0,90 90,840 840,1290 1290,1560 1560,1830
the operations {you,know} their performing

440
00:13:52,650 --> 00:13:54,480
0,390 390,600 660,1170 1170,1380 1380,1830
probably just files day own|

441
00:13:54,540 --> 00:13:56,900
0,720 720,840 1470,1830 1830,2220
{} and performed locally.|

442
00:13:57,900 --> 00:13:59,070
0,240 240,420 420,720 720,900 900,1170
That makes sense in terms

443
00:13:59,070 --> 00:14:00,990
0,240 240,870 870,1050 1050,1650 1710,1920
of contrast in settings,| so

444
00:14:00,990 --> 00:14:01,710
0,120 120,300 300,540 540,660 660,720
you see actually there are

445
00:14:01,710 --> 00:14:02,640
0,180 180,270 270,600 600,870 870,930
quite a different number of

446
00:14:02,640 --> 00:14:04,680
0,270 270,630 630,1080 1320,1860 1860,2040
file systems around,| {like,zookeeper} yet

447
00:14:04,680 --> 00:14:06,330
0,300 300,510 510,630 960,1410 1410,1650
another sort of provides file

448
00:14:06,330 --> 00:14:07,380
0,270 270,660 660,750 750,840 840,1050
system interface,| but it's not

449
00:14:07,380 --> 00:14:08,670
0,180 180,270 270,510 510,930 930,1290
really a file system,| it's

450
00:14:08,670 --> 00:14:10,050
0,180 180,690 690,1200 1200,1290 1290,1380
like more intended as a

451
00:14:10,050 --> 00:14:11,550
0,510 510,870 870,960 960,1170 1170,1500
coordination service,| you wouldn't store

452
00:14:11,550 --> 00:14:13,380
0,210 210,840 1020,1440 1440,1650 1650,1830
big files {} in {zookeeper

453
00:14:13,380 --> 00:14:13,960
0,390
-}.|

454
00:14:16,130 --> 00:14:18,590
0,240 240,570 570,780 780,1320 1680,2460
Any questions about this {}

455
00:14:18,920 --> 00:14:19,960
0,630
setting?|

456
00:14:20,220 --> 00:14:21,560
0,480

457
00:14:21,780 --> 00:14:23,700
0,210 210,390 390,630 630,1530 1560,1920
{} Can you briefly repeat

458
00:14:23,700 --> 00:14:25,080
0,270 270,600 600,750 750,990 990,1380
why having the file server

459
00:14:25,080 --> 00:14:26,490
0,330 330,600 600,870 870,990 990,1410
code running on the client

460
00:14:26,490 --> 00:14:29,880
0,540 1290,2010 2010,2340 2340,3150
machine enhances {} scalability,|

461
00:14:30,110 --> 00:14:31,250
0,360 360,630 630,690 690,1050 1050,1140
versus having the client and

462
00:14:31,250 --> 00:14:32,810
0,90 90,270 270,780 1050,1380 1380,1560
the file server| being on

463
00:14:32,810 --> 00:14:34,490
0,270 270,750 930,1140 1140,1260 1260,1680
different machines or on different.|

464
00:14:34,490 --> 00:14:35,420
0,390

465
00:14:35,840 --> 00:14:36,680
0,210 210,360 360,420 420,720 720,840
Yeah, so, for example if

466
00:14:36,680 --> 00:14:37,880
0,600 600,750 750,810 810,960 960,1200
you'd like to go back

467
00:14:37,880 --> 00:14:39,650
0,90 90,390 420,870 870,1170 1170,1770
to this previous slide here,|

468
00:14:39,650 --> 00:14:40,610
0,150 150,270 270,600 600,690 690,960
on the left the network

469
00:14:40,610 --> 00:14:41,930
0,240 240,720 720,930 930,1050 1050,1320
file system go,| so there's

470
00:14:41,930 --> 00:14:43,820
0,240 240,420 420,630 630,1290 1440,1890
many many many clients,| let's

471
00:14:43,820 --> 00:14:45,470
0,300 300,480 480,720 720,1170 1200,1650
figure there's only one,| there's

472
00:14:45,470 --> 00:14:46,550
0,120 120,240 240,690 690,840 840,1080
let me simplify this picture

473
00:14:46,550 --> 00:14:48,350
0,90 90,120 120,480 870,1200 1230,1800
for a second| and ignore

474
00:14:48,350 --> 00:14:49,430
0,90 90,360 360,570 570,900 900,1080
the second file server, one

475
00:14:49,430 --> 00:14:50,720
0,270 270,540 540,810 810,990 990,1290
one file server,| so everybody

476
00:14:50,720 --> 00:14:51,770
0,90 90,330 330,420 420,810 900,1050
can share the files from

477
00:14:51,770 --> 00:14:53,060
0,120 120,360 360,750 900,1140 1140,1290
the file server,| then all

478
00:14:53,060 --> 00:14:54,290
0,210 210,630 630,750 750,840 840,1230
these clients will be handling

479
00:14:54,290 --> 00:14:55,640
0,120 120,390 390,720 720,990 990,1350
on that single file server,|

480
00:14:56,300 --> 00:14:57,200
0,270 270,450 450,690 690,840 840,900
and so {all,the} read or

481
00:14:57,200 --> 00:14:58,250
0,240 240,630 630,720 720,990 990,1050
write operations are going to

482
00:14:58,250 --> 00:14:58,970
0,90 90,300 300,360 360,450 450,720
be sent to the file

483
00:14:58,970 --> 00:15:00,980
0,510 510,600 600,840 840,1200 1440,2010
server,| the file server directory

484
00:15:00,980 --> 00:15:04,070
0,630 660,1530 1950,2130 2130,2460 2460,3090
lookout,| {} it opens files

485
00:15:04,070 --> 00:15:05,780
0,90 90,390 390,840 840,1470 1530,1710
and adjust security checks| and

486
00:15:05,780 --> 00:15:06,410
0,120 120,210 210,360 360,420 420,630
all that kind of stuff,|

487
00:15:06,410 --> 00:15:07,910
0,90 90,270 270,360 360,1080 1080,1500
so all the computation really

488
00:15:07,910 --> 00:15:09,590
0,600 630,720 720,1020 1020,1320 1320,1680
for the file system itself,|

489
00:15:09,590 --> 00:15:11,030
0,90 90,270 270,870 1080,1350 1350,1440
it's all happening on the

490
00:15:11,030 --> 00:15:12,800
0,240 240,480 480,990 1020,1410 1410,1770
file server itself in the

491
00:15:12,830 --> 00:15:14,510
0,570 570,840 840,1020 1020,1290 1290,1680
traditional network file system design,|

492
00:15:14,840 --> 00:15:15,710
0,240 240,300 300,510 510,780 780,870
in the {Frangipani - -},

493
00:15:15,710 --> 00:15:17,090
0,240 240,390 390,450 450,990 1320,1380
that's not the case,| in

494
00:15:17,090 --> 00:15:18,050
0,240 240,540 540,690 690,870 870,960
{Frangipani - -} all the

495
00:15:18,050 --> 00:15:19,670
0,210 210,450 450,990 990,1110 1110,1620
file system operations are executed

496
00:15:19,670 --> 00:15:20,820
0,150 150,240 240,1080
on the workstations.|

497
00:15:21,260 --> 00:15:22,820
0,210 210,450 450,750 750,1020 1020,1560
And so we have multiple

498
00:15:22,820 --> 00:15:24,350
0,750 750,840 840,1320 1320,1380 1380,1530
workstations| are basically you know

499
00:15:24,350 --> 00:15:26,150
0,240 240,960 960,1110 1110,1200 1200,1800
the workload that the {file,system}

500
00:15:26,150 --> 00:15:27,260
0,120 120,660 660,870 870,960 960,1110
can scale| or it can

501
00:15:27,260 --> 00:15:28,430
0,450 450,780 780,900 900,990 990,1170
support scales with the number

502
00:15:28,430 --> 00:15:29,540
0,90 90,870
of workstations.|

503
00:15:31,330 --> 00:15:32,230
0,210 210,420 420,570 570,690 690,900
I see, and then be

504
00:15:32,230 --> 00:15:34,600
0,270 270,1230 1260,1800 1800,2130 2130,2370
a traditional architecture,| so every

505
00:15:34,600 --> 00:15:37,240
0,180 180,510 510,1170 1170,1620 1950,2640
file server contains or stores,|

506
00:15:37,240 --> 00:15:38,740
0,330 330,540 540,660 660,1140 1140,1500
let's say a section of

507
00:15:38,800 --> 00:15:40,390
0,420 450,660 660,1050 1050,1290 1290,1590
the the entire file system

508
00:15:40,390 --> 00:15:41,680
0,210 210,450 450,840 840,1050 1050,1290
right,| so it so it's

509
00:15:41,680 --> 00:15:42,820
0,180 180,270 270,540 540,870 870,1140
not the case that {}

510
00:15:43,260 --> 00:15:44,880
0,300 300,540 540,780 780,1110 1110,1620
every single file server has

511
00:15:44,880 --> 00:15:46,110
0,330 330,690 690,780 780,870 870,1230
a copy of the entire

512
00:15:46,110 --> 00:15:47,790
0,450 840,1020 1020,1290 1290,1500 1500,1680
system,| is that it might

513
00:15:47,790 --> 00:15:51,270
0,120 120,570 600,1140 1170,1680 1860,3480
be partitioned across files.| {Yes,,that,might,be}

514
00:15:51,270 --> 00:15:52,620
0,630 630,840 840,1080 1080,1140 1140,1350
across,| {for,example} AFS you know

515
00:15:52,620 --> 00:15:55,650
0,420 420,600 600,870 870,1680 1860,3030
there are different volumes| and

516
00:15:55,680 --> 00:15:57,720
0,300 300,720 720,1320 1320,1560 1560,2040
file servers managed different volumes|

517
00:15:57,720 --> 00:15:58,740
0,90 90,180 180,480 480,750 750,1020
and the data of all

518
00:15:58,740 --> 00:16:00,510
0,390 390,840 840,1140 1140,1500 1500,1770
users MIT spread across different

519
00:16:00,510 --> 00:16:01,360
0,630
volumes.|

520
00:16:01,710 --> 00:16:02,910
0,210 210,390 390,480 480,1020 1050,1200
But all the data for

521
00:16:02,910 --> 00:16:03,870
0,210 210,720 720,780 780,900 900,960
one volumes are going to

522
00:16:03,870 --> 00:16:05,190
0,150 150,480 480,750 750,1140 1140,1320
be one file server,| and

523
00:16:05,190 --> 00:16:06,570
0,150 150,390 390,840 840,1200 1200,1380
so that file volume gets

524
00:16:06,570 --> 00:16:07,950
0,150 150,630 720,900 900,1050 1050,1380
hit head,| you know you're

525
00:16:07,950 --> 00:16:09,480
0,150 150,210 210,540 540,870 870,1530
going to get performance bottlenecks.|

526
00:16:10,000 --> 00:16:11,360
0,390 420,720 720,870 870,1050
Okay awesome, thank you.|

527
00:16:13,700 --> 00:16:14,810
0,270 270,450 450,780 780,960 960,1110
Any more questions about sort

528
00:16:14,810 --> 00:16:16,850
0,90 90,330 330,780 780,1260 1290,2040
of the setting here,| before

529
00:16:16,850 --> 00:16:18,040
0,210 210,510 510,870
we dive in

530
00:16:18,300 --> 00:16:20,220
0,420 420,690 690,1170 1170,1470 1470,1920
to {} more {Frangipani -}.|

531
00:16:25,660 --> 00:16:26,660
0,330 330,660
Okay good.

532
00:16:26,920 --> 00:16:29,410
0,510 840,1470 1470,1800 1800,2190 2190,2490
So now the design choices,

533
00:16:29,410 --> 00:16:31,270
0,120 120,570 600,1170 1170,1590 1590,1860
they made a immediately leads

534
00:16:31,270 --> 00:16:32,470
0,150 150,210 210,450 450,510 510,1200
to a number of challenges.

535
00:16:33,720 --> 00:16:34,500
0,150 150,210 210,540 570,720 720,780
So I wanna talk a

536
00:16:34,500 --> 00:16:35,850
0,180 180,300 300,510 510,690 690,1350
little bit about the challenges.

537
00:16:40,980 --> 00:16:44,370
0,600 600,1170 1350,2100 2160,2850 2850,3390
Um, and the main one

538
00:16:44,760 --> 00:16:46,530
0,120 120,540 540,990 990,1110 1110,1770
that drives almost of a

539
00:16:46,530 --> 00:16:48,330
0,240 240,360 360,450 450,1140 1290,1800
ton of the design is

540
00:16:48,330 --> 00:16:49,110
0,180 180,390 390,450 450,570 570,780
let's say you have one

541
00:16:49,110 --> 00:16:52,590
0,960 1620,2340 2340,2850 3060,3240 3240,3480
workstations workstation one in those

542
00:16:52,590 --> 00:16:54,750
0,360 780,1080 1080,1350 1350,1950 1950,2160
days, people had workstations and

543
00:16:54,750 --> 00:16:56,580
0,510 510,750 750,1050 1050,1590 1590,1830
laptops were actually not not

544
00:16:56,580 --> 00:16:58,860
0,330 330,900 900,1230 1560,1950 1980,2280
really existed, yet a today

545
00:16:58,860 --> 00:16:59,700
0,330 330,420 420,540 540,690 690,840
probably will be all kinds

546
00:16:59,700 --> 00:17:01,350
0,90 90,540 540,960 1260,1590 1590,1650
of laptops but there's a

547
00:17:01,350 --> 00:17:03,420
0,750 870,1320 1320,1560 1560,1860 1860,2070
workstation a and somebody or

548
00:17:03,420 --> 00:17:04,760
0,330 330,510 510,600 600,1200
whatever reach of files.

549
00:17:05,100 --> 00:17:07,080
0,330 330,630 630,750 750,1320 1830,1980
Read file APP whatever you

550
00:17:07,080 --> 00:17:08,730
0,450 480,750 750,840 840,1170 1170,1650
know maybe the great database

551
00:17:08,730 --> 00:17:10,350
0,120 120,180 180,420 420,870 1290,1620
with a great file, and

552
00:17:10,350 --> 00:17:12,330
0,600 750,1350 1350,1560 1560,1830 1830,1980
so basically, that means that

553
00:17:12,330 --> 00:17:13,950
0,210 210,570 570,810 810,900 900,1620
that file actually is cached

554
00:17:13,950 --> 00:17:15,840
0,450 450,570 570,930 960,1620
inside of the workstation.

555
00:17:16,340 --> 00:17:17,450
0,270 270,360 360,570 570,1020 1020,1110
And so the client you

556
00:17:17,450 --> 00:17:20,030
0,150 150,630 630,990 990,1440 1830,2580
know whatever program running VI,

557
00:17:20,030 --> 00:17:21,260
0,120 120,270 270,420 420,660 720,1230
you know get to update

558
00:17:21,260 --> 00:17:23,510
0,120 120,840 840,1110 1140,1770 2010,2250
and manipulate the file, and

559
00:17:23,510 --> 00:17:24,680
0,360 360,450 450,540 540,900 900,1170
then get up sometime later,

560
00:17:24,680 --> 00:17:25,550
0,120 120,420 420,540 540,660 660,870
the result will be written

561
00:17:25,550 --> 00:17:27,860
0,480 570,990 990,1710 1830,2310 2310,2310
back to {edit's -} a

562
00:17:27,860 --> 00:17:30,140
0,660 690,870 870,1350 1950,2160 2160,2280
disc like farewell and so

563
00:17:30,140 --> 00:17:32,210
0,210 210,690 690,870 870,1650 1680,2070
the challenges that are basically

564
00:17:32,210 --> 00:17:33,500
0,300 300,420 420,690 690,840 840,1290
around this model at freefall,

565
00:17:33,980 --> 00:17:36,650
0,690 720,1440 1650,1980 1980,2340 2340,2670
um, one, um, somebody else

566
00:17:36,650 --> 00:17:37,980
0,90 90,570 570,1080
a workstation two.

567
00:17:38,750 --> 00:17:39,620
0,330 330,480 480,600 600,810 810,870
Maybe it's all going to

568
00:17:39,620 --> 00:17:40,730
0,240 240,360 360,570 570,690 690,1110
do a kind of f

569
00:17:41,870 --> 00:17:43,880
0,510 510,600 600,990 990,1380 1680,2010
get the file f and

570
00:17:43,880 --> 00:17:44,960
0,60 60,360 360,840 840,990 990,1080
of course it should be

571
00:17:44,960 --> 00:17:46,280
0,60 60,390 390,600 600,720 720,1320
the case that you know

572
00:17:46,280 --> 00:17:48,380
0,180 180,480 690,1440 1440,1950 1950,2100
at least normally expected, we

573
00:17:48,380 --> 00:17:49,580
0,150 150,240 240,720 720,960 960,1200
have a traditional unit file

574
00:17:49,580 --> 00:17:51,290
0,510 780,1170 1170,1290 1290,1560 1560,1710
system that you know you

575
00:17:51,290 --> 00:17:52,490
0,150 150,300 300,420 420,780 780,1200
will see the last right

576
00:17:52,730 --> 00:17:53,990
0,150 150,360 360,720 720,1050 1080,1260
through that particular f so

577
00:17:53,990 --> 00:17:55,070
0,270 270,600 600,750 750,960 960,1080
even though the right might

578
00:17:55,070 --> 00:17:55,880
0,90 90,390 390,510 510,540 540,810
have happened at a different

579
00:17:55,880 --> 00:17:57,950
0,750 990,1410 1410,1650 1650,1800 1800,2070
workstation, um, when the second

580
00:17:57,950 --> 00:17:59,930
0,780 780,960 960,1050 1050,1530 1680,1980
workstation reads the file, um,

581
00:17:59,930 --> 00:18:01,310
0,660 660,810 810,960 960,1050 1050,1380
we would like to see

582
00:18:01,310 --> 00:18:03,590
0,1020 1020,1290 1290,1530 1530,1800 2130,2280
that data show up, and

583
00:18:03,590 --> 00:18:04,700
0,120 120,180 180,300 300,780 810,1110
this is what they were

584
00:18:04,700 --> 00:18:06,500
0,120 120,180 180,420 480,1230 1590,1800
going to be broccoli, this

585
00:18:06,500 --> 00:18:07,700
0,390 390,630 630,810 810,1080 1080,1200
broccoli comes to cash to

586
00:18:07,700 --> 00:18:08,440
0,210 210,510
hear us.

587
00:18:10,800 --> 00:18:12,720
0,300 300,540 540,900 900,1470 1470,1920
And other words synonyms for

588
00:18:12,720 --> 00:18:15,450
0,570 570,810 810,1080 1080,2130 2280,2730
coherence are cash persistency, which

589
00:18:15,450 --> 00:18:16,740
0,120 120,270 270,360 360,750 750,1290
is like the tournament, we've

590
00:18:16,740 --> 00:18:18,900
0,240 240,900 1500,1740 1740,1860 1860,2160
seen more in the previous

591
00:18:18,900 --> 00:18:20,490
0,480 720,1020 1020,1260 1260,1470 1470,1590
papers, um, but in the

592
00:18:20,490 --> 00:18:21,660
0,180 180,420 780,1020 1020,1110 1110,1170
sort of out of the

593
00:18:21,660 --> 00:18:23,370
0,300 300,780 780,1080 1080,1410 1410,1710
computer architecture world, actually the

594
00:18:23,370 --> 00:18:25,530
0,120 120,480 480,900 900,1320 1320,2160
the term coherence comes a

595
00:18:26,190 --> 00:18:27,940
0,210 210,360 360,750 780,1620
comes from that world.

596
00:18:28,410 --> 00:18:29,280
0,270 270,480 480,630 630,750 750,870
And so you can think

597
00:18:29,280 --> 00:18:30,940
0,240 240,360 360,1050 1050,1440
about their personal lives.

598
00:18:32,660 --> 00:18:34,670
0,390 390,1170 1200,1320 1320,1620 1620,2010
A to the second problem

599
00:18:34,670 --> 00:18:36,590
0,210 210,330 330,540 540,930 1230,1920
that you know you, um

600
00:18:36,710 --> 00:18:38,180
0,480 480,600 600,690 690,1260 1260,1470
that's going to occur and

601
00:18:38,180 --> 00:18:39,020
0,150 150,300 300,360 360,600 600,840
we need to deal with

602
00:18:39,020 --> 00:18:40,340
0,300 300,600 690,960 960,1110 1110,1320
is that let's say that

603
00:18:40,340 --> 00:18:42,060
0,540 540,1140
workstation one.

604
00:18:42,770 --> 00:18:44,870
0,330 330,840 840,1410 1590,1980 1980,2100
In workstation to both want

605
00:18:44,870 --> 00:18:45,950
0,60 60,300 300,360 360,930 930,1080
to create a file in

606
00:18:45,950 --> 00:18:48,350
0,600 600,870 870,1350 1350,1710 1830,2400
the shared directory so years

607
00:18:49,010 --> 00:18:50,660
0,600 600,810 810,1110 1110,1170 1170,1650
workstation one creates a file

608
00:18:50,690 --> 00:18:52,220
0,510 510,630 630,720 720,1110 1110,1530
f in the directory d

609
00:18:52,310 --> 00:18:54,500
0,900 1110,1530 1530,1800 1800,2100 2100,2190
workstation, two also creates a

610
00:18:54,500 --> 00:18:56,870
0,330 330,1080 1260,1770 1770,1980 1980,2370
file seiji and a directory

611
00:18:56,870 --> 00:18:57,420
0,360
d.

612
00:18:57,910 --> 00:18:58,930
0,330 420,630 630,750 750,900 900,1020
And now we want to

613
00:18:58,930 --> 00:19:00,550
0,330 330,780 780,930 930,1200 1200,1620
be arranged at least at

614
00:19:00,550 --> 00:19:02,350
0,450 450,660 660,900 900,1290 1320,1800
workstation, one makes the changes

615
00:19:02,350 --> 00:19:03,460
0,90 90,210 210,630 630,840 840,1110
and then workstation to makes

616
00:19:03,460 --> 00:19:05,260
0,60 60,480 870,1260 1260,1500 1500,1800
the changes like BOE file

617
00:19:05,260 --> 00:19:06,580
0,450 510,750 750,900 900,1050 1050,1320
severe and that like one

618
00:19:06,580 --> 00:19:09,040
0,270 270,510 510,1170 1470,2160 2160,2460
file doesn't overwrite essay, the

619
00:19:09,040 --> 00:19:12,220
0,780 780,1770 1800,1920 1920,2820 2820,3180
directory of the other or

620
00:19:12,250 --> 00:19:13,510
0,300 300,540 540,870 870,1200 1200,1260
this glow right directly in

621
00:19:13,510 --> 00:19:14,620
0,60 60,270 270,480 480,810 810,1110
a way that actually other

622
00:19:14,620 --> 00:19:15,920
0,390 390,930
files disappeared.

623
00:19:16,350 --> 00:19:17,100
0,210 210,390 390,570 570,660 660,750
So this has to do

624
00:19:17,100 --> 00:19:18,450
0,330 330,570 570,900 900,1110 1110,1350
the second topic, you really

625
00:19:18,450 --> 00:19:19,900
0,210 210,270 270,420 420,750
ought to Miss it.

626
00:19:22,980 --> 00:19:24,930
0,420 420,1140 1140,1440 1440,1530 1530,1950
These operations creating a file,

627
00:19:24,930 --> 00:19:25,590
0,90 90,270 270,420 420,510 510,660
we really have to be

628
00:19:25,590 --> 00:19:26,790
0,840 840,900 900,990 990,1140 1140,1200
has to be sort of

629
00:19:26,790 --> 00:19:28,260
0,60 60,450 450,1020 1020,1260 1260,1470
an atomic operation, so they

630
00:19:28,260 --> 00:19:29,400
0,210 210,390 390,870 870,1050 1050,1140
don't get interleaved, then we

631
00:19:29,400 --> 00:19:31,000
0,150 180,840 840,1350
get wrong results.

632
00:19:32,300 --> 00:19:33,500
0,120 120,210 210,300 300,600 600,1200
And then the final problem,

633
00:19:33,890 --> 00:19:35,120
0,390 390,900 900,1020 1020,1170 1170,1230
um that we need to

634
00:19:35,120 --> 00:19:37,040
0,210 210,420 420,660 660,1140 1260,1920
deal with is that um

635
00:19:37,040 --> 00:19:38,900
0,60 60,270 270,780 780,1290
I'm gonna workstation one.

636
00:19:40,060 --> 00:19:42,670
0,120 120,390 390,1170 1200,1890 1890,2610
You might crash while doing

637
00:19:42,820 --> 00:19:43,930
0,240 240,330 330,480 480,870 870,1110
one of these complex file

638
00:19:43,930 --> 00:19:45,220
0,270 270,1080
system operations.

639
00:19:50,160 --> 00:19:51,120
0,180 180,480 480,720 720,870 870,960
And so it has to

640
00:19:51,120 --> 00:19:52,290
0,120 120,660 660,720 720,900 900,1170
be story, you know how

641
00:19:52,290 --> 00:19:54,390
0,450 450,720 720,1020 1020,1440 1440,2100
actually the file system recovers.

642
00:19:55,140 --> 00:19:56,250
0,300 300,510 510,690 690,840 840,1110
And so this is really

643
00:19:56,250 --> 00:19:57,660
0,60 60,360 360,600 600,870 870,1410
a story about crash recovery.

644
00:20:01,990 --> 00:20:02,950
0,150 150,240 240,690 690,870 870,960
So, for example like in

645
00:20:02,950 --> 00:20:04,240
0,120 120,390 390,660 660,960 960,1290
this first case where like

646
00:20:04,270 --> 00:20:05,980
0,450 450,1050 1050,1260 1260,1350 1350,1710
a workstation makes a file

647
00:20:05,980 --> 00:20:07,960
0,180 180,720 720,1260 1440,1740 1740,1980
and directory d there's actually

648
00:20:07,960 --> 00:20:09,310
0,30 30,450 450,1080 1080,1140 1140,1350
a complex operation, you know

649
00:20:09,310 --> 00:20:10,180
0,120 120,480 480,690 690,780 780,870
the director needs to be

650
00:20:10,180 --> 00:20:11,590
0,750 750,870 870,1020 1020,1200 1200,1410
modified, and I know needs

651
00:20:11,590 --> 00:20:12,730
0,90 90,210 210,810 810,1050 1050,1140
to be allocated and it

652
00:20:12,730 --> 00:20:14,650
0,180 180,240 240,360 360,1170 1380,1920
needs to be initialized a

653
00:20:14,650 --> 00:20:15,460
0,120 120,240 240,330 330,600 600,810
and then the unknown number

654
00:20:15,460 --> 00:20:16,450
0,210 210,270 270,420 420,660 660,990
needs to be written into

655
00:20:16,450 --> 00:20:18,010
0,90 90,660 750,900 900,1050 1050,1560
the directory, so there's multiple

656
00:20:18,010 --> 00:20:19,120
0,150 150,210 210,450 450,690 690,1110
sort of file system operations

657
00:20:19,120 --> 00:20:20,050
0,390 390,480 480,630 630,750 750,930
involved in it and we

658
00:20:20,050 --> 00:20:20,830
0,270 270,330 330,420 420,510 510,780
wanted to be the case

659
00:20:20,830 --> 00:20:21,910
0,210 210,540 540,600 600,870 870,1080
that if the file system

660
00:20:21,910 --> 00:20:23,800
0,480 480,870 870,1200 1200,1410 1410,1890
crashes between any of these

661
00:20:24,040 --> 00:20:25,630
0,960 1050,1260 1260,1350 1350,1530 1530,1590
steps in this sort of

662
00:20:25,630 --> 00:20:27,340
0,330 330,570 570,810 810,1410 1500,1710
complex file system operation, there

663
00:20:27,340 --> 00:20:28,150
0,180 180,300 300,390 390,690 690,810
better be the case that

664
00:20:28,150 --> 00:20:29,140
0,90 90,330 330,570 570,690 690,990
the file system was published

665
00:20:29,140 --> 00:20:29,720
0,510
correctly.

666
00:20:30,170 --> 00:20:30,890
0,240 240,420 420,480 480,540 540,720
And what do you mean,

667
00:20:30,890 --> 00:20:32,240
0,90 90,300 300,600 600,1200 1200,1350
we fall somewhat correctly at

668
00:20:32,240 --> 00:20:33,830
0,210 210,480 480,900 900,1140 1140,1590
least its internal data structures

669
00:20:33,830 --> 00:20:35,090
0,90 90,600 900,1110 1110,1200 1200,1260
are correct and so for

670
00:20:35,090 --> 00:20:36,080
0,330 330,600 600,720 720,840 840,990
example the I know does

671
00:20:36,080 --> 00:20:37,160
0,180 180,540 540,780 780,840 840,1080
not last because it doesn't

672
00:20:37,160 --> 00:20:38,270
0,210 210,330 330,450 450,510 510,1110
show up in the directory,

673
00:20:38,570 --> 00:20:40,430
0,690 690,1200 1230,1470 1470,1620 1620,1860
etc etc or like even

674
00:20:40,430 --> 00:20:41,540
0,150 150,570 570,690 690,780 780,1110
the holes of the internal

675
00:20:41,540 --> 00:20:42,900
0,450 450,510 510,1140
structures are persistent.

676
00:20:43,640 --> 00:20:44,450
0,180 180,360 360,420 420,510 510,810
So this is the topic

677
00:20:44,450 --> 00:20:46,460
0,90 90,390 390,930 1770,1920 1920,2010
of corruption coverage and so

678
00:20:46,460 --> 00:20:47,750
0,300 300,750 750,1020 1020,1080 1080,1290
panel basically were in front

679
00:20:47,750 --> 00:20:49,070
0,90 90,210 210,510 510,720 720,1320
of a need to address

680
00:20:49,100 --> 00:20:52,010
0,420 420,750 1110,1800 1800,2250 2250,2910
all these problems and my

681
00:20:52,040 --> 00:20:54,710
0,330 330,540 540,990 1320,2040 2130,2670
clients just go a walk

682
00:20:54,710 --> 00:20:55,910
0,180 180,570 600,810 810,1050 1050,1200
through in a one by

683
00:20:55,910 --> 00:20:57,890
0,570 570,1140 1140,1500 1500,1650 1650,1980
one, and discuss how French

684
00:20:57,890 --> 00:20:59,200
0,420 420,900 900,1050
bonnie addresses them.

685
00:21:00,520 --> 00:21:01,630
0,390 390,690 690,840 840,900 900,1110
Any questions about the top

686
00:21:01,630 --> 00:21:02,980
0,210 210,1080
level challenges.

687
00:21:09,820 --> 00:21:11,900
0,420 420,990 990,1200 1200,1770
Yeah lets you perceive.

688
00:21:12,030 --> 00:21:12,900
0,300 300,360 360,600 600,750 750,870
So the first thing is

689
00:21:12,900 --> 00:21:15,510
0,300 300,960 1290,1530 1530,1770 1770,2610
caching image or cache consistency.

690
00:21:27,740 --> 00:21:29,120
0,570 570,1080
And, um.

691
00:21:29,790 --> 00:21:32,610
0,330 330,960 1080,1860 1980,2670 2670,2820
So the key aspect in

692
00:21:32,610 --> 00:21:35,280
0,330 330,840 840,1290 1290,2340 2460,2670
the solution that a friend

693
00:21:35,280 --> 00:21:36,690
0,60 60,270 270,840 840,1260 1260,1410
of mine uses actually a

694
00:21:36,690 --> 00:21:37,960
0,240 240,540 540,990
lock server somewhere.

695
00:21:38,580 --> 00:21:40,360
0,1110
Zhu.

696
00:21:40,670 --> 00:21:43,100
0,360 360,450 450,660 660,1320
And the lock server.

697
00:21:43,790 --> 00:21:47,810
0,780 780,840 840,1620 2220,2790 2790,4020
Basically a table and for

698
00:21:47,840 --> 00:21:49,340
0,270 270,660 660,930 930,1320 1320,1500
every file and actually I

699
00:21:49,340 --> 00:21:50,390
0,240 240,570 570,690 690,840 840,1050
note number but for every

700
00:21:50,390 --> 00:21:51,220
0,570
file.

701
00:21:51,760 --> 00:21:53,710
0,1110 1110,1410 1410,1530 1530,1860 1860,1950
Hua has to walk at

702
00:21:53,710 --> 00:21:54,850
0,150 150,660 660,840 840,900 900,1140
this particular point of time

703
00:21:54,850 --> 00:21:56,140
0,150 150,360 360,480 480,930
so who's the owner.

704
00:21:58,070 --> 00:21:58,850
0,300 300,390 390,600 600,690 690,780
So we might have to

705
00:21:58,850 --> 00:22:00,140
0,300 300,630 660,810 810,930 930,1290
file f and it basically

706
00:22:00,140 --> 00:22:01,370
0,330 330,420 420,570 570,900 900,1230
says you know works and

707
00:22:01,370 --> 00:22:03,200
0,90 90,570 1110,1380 1380,1530 1530,1830
for which the web server

708
00:22:03,200 --> 00:22:04,070
0,150 150,210 210,540 540,630 630,870
has a record of the

709
00:22:04,070 --> 00:22:05,840
0,480 480,840 840,1080 1080,1230 1230,1770
workstation, one owns that particular

710
00:22:05,840 --> 00:22:08,480
0,450 1200,1800 1800,2280 2280,2340 2340,2640
walk, um, and the locks

711
00:22:08,480 --> 00:22:10,220
0,120 120,180 180,870 930,1200 1200,1740
are for itself a is

712
00:22:10,220 --> 00:22:13,580
0,150 150,1020 1050,1830 1830,2430 3150,3360
a distributed a surface, um,

713
00:22:13,580 --> 00:22:14,690
0,240 240,360 360,630 630,780 780,1110
you can almost think about

714
00:22:14,690 --> 00:22:16,280
0,480 480,900 900,1020 1020,1200 1200,1590
it almost like zoo keeper,

715
00:22:16,310 --> 00:22:19,040
0,870 870,1110 1560,2160 2160,2310 2310,2730
yeah it's um, it provides

716
00:22:19,040 --> 00:22:21,410
0,150 150,660 660,1020 1020,1710 1800,2370
are acquired losing blocks, um,

717
00:22:21,410 --> 00:22:23,300
0,330 330,570 570,1260 1260,1530 1530,1890
it's fault tolerant, um, in

718
00:22:23,300 --> 00:22:24,650
0,60 60,330 330,600 600,1140 1170,1350
the case of a from

719
00:22:24,650 --> 00:22:26,060
0,360 360,600 600,840 840,930 930,1410
Japan either use a mop

720
00:22:26,060 --> 00:22:29,000
0,480 510,1050 1050,1860 2190,2670 2670,2940
axis based implementation, um, and

721
00:22:29,000 --> 00:22:30,530
0,150 150,390 420,840 840,1170 1170,1530
what is spread across multiple

722
00:22:30,530 --> 00:22:33,080
0,660 720,1260 1260,1590 1590,1770 1770,2550
machines a highly full tolerance,

723
00:22:33,230 --> 00:22:34,900
0,1110 1110,1590
etc, etc.

724
00:22:36,390 --> 00:22:39,540
0,270 270,540 540,1200 1290,2010 2310,3150
So that's the the the

725
00:22:39,630 --> 00:22:41,550
0,540 570,990 1230,1410 1410,1710 1710,1920
luxury verb and it turns

726
00:22:41,550 --> 00:22:42,420
0,90 90,210 210,300 300,540 540,870
out that the board station

727
00:22:42,420 --> 00:22:44,070
0,210 210,570 570,900 900,990 990,1650
should also keep a table

728
00:22:44,310 --> 00:22:45,680
0,870
for.

729
00:22:46,040 --> 00:22:47,960
0,300 300,930 1380,1590 1590,1710 1710,1920
Their locks, so I use

730
00:22:47,960 --> 00:22:50,060
0,480 480,990 1230,1860 1860,1950 1950,2100
workstation one and you know

731
00:22:50,060 --> 00:22:51,050
0,90 90,300 300,720 750,870 870,990
it might be you know

732
00:22:51,050 --> 00:22:52,700
0,180 180,450 450,870 870,1050 1050,1650
let's say workstation one cache

733
00:22:52,700 --> 00:22:55,180
0,390 420,1140 1140,1290 1290,1740
file f and g.

734
00:22:55,920 --> 00:22:57,420
0,270 270,630 630,1080 1080,1410 1410,1500
Yeah, maybe ages cached by

735
00:22:57,420 --> 00:23:00,510
0,810 1380,2190 2190,2820 2820,2970 2970,3090
workstation workstation wages may be

736
00:23:00,510 --> 00:23:02,160
0,330 330,390 390,870 870,1350
cached by workstation two.

737
00:23:02,700 --> 00:23:04,590
0,540 780,930 930,1320 1320,1440 1440,1890
Um, and then the workstation

738
00:23:04,590 --> 00:23:06,270
0,300 300,750 750,840 840,1140 1140,1680
one has a similar table

739
00:23:06,450 --> 00:23:08,550
0,480 480,1020 1050,1500 1500,1830 1830,2100
and that list for every

740
00:23:08,550 --> 00:23:09,990
0,600 600,720 720,900 900,1260 1260,1440
file for every lock that

741
00:23:09,990 --> 00:23:12,210
0,720 750,1290 1290,1470 1470,1740 1740,2220
holds where it's either busy

742
00:23:12,210 --> 00:23:15,060
0,240 240,720 2160,2490 2490,2700 2700,2850
or idle, so it may

743
00:23:15,060 --> 00:23:17,520
0,180 180,480 510,600 600,1890 1920,2460
be f you know lock

744
00:23:17,520 --> 00:23:18,960
0,330 330,450 450,990 1170,1320 1320,1440
status is busy and it

745
00:23:18,960 --> 00:23:20,340
0,270 270,600 600,810 810,1170 1170,1380
really means that actually the

746
00:23:20,340 --> 00:23:21,720
0,240 240,510 510,660 660,900 900,1380
file server is just operating

747
00:23:21,720 --> 00:23:22,770
0,90 90,270 270,660 690,870 870,1050
on that file, so it's

748
00:23:22,770 --> 00:23:26,280
0,630 630,960 960,1110 1110,1530 2190,3510
actively using that {file's -}

749
00:23:26,280 --> 00:23:28,230
0,180 180,480 480,960 990,1590 1590,1950
heirs, second state namely, let's

750
00:23:28,230 --> 00:23:29,220
0,120 120,270 270,420 420,840 840,990
say we have 5G which

751
00:23:29,220 --> 00:23:30,660
0,210 210,480 480,840 1050,1200 1200,1440
also cash there and maybe

752
00:23:30,660 --> 00:23:32,310
0,180 180,300 300,810 810,990 990,1650
g is actually a interstate

753
00:23:32,310 --> 00:23:34,350
0,570 570,750 750,1260 1620,1800 1800,2040
zike all idle, um that

754
00:23:34,350 --> 00:23:35,910
0,330 330,690 690,900 900,1440 1440,1560
means actually the g at

755
00:23:35,910 --> 00:23:36,780
0,180 180,390 390,480 480,660 660,870
that point is not being

756
00:23:36,780 --> 00:23:39,360
0,750 750,930 930,930 2070,2400 2400,2580
modified and um were not

757
00:23:39,360 --> 00:23:41,370
0,420 630,1170 1170,1740 1740,1890 1890,2010
being worked on by the

758
00:23:41,370 --> 00:23:42,750
0,330 330,540 540,720 720,1020 1020,1380
files for that particular instant

759
00:23:42,750 --> 00:23:44,490
0,450 720,1020 1020,1200 1200,1350 1350,1740
time, um, but it's basically

760
00:23:44,490 --> 00:23:45,330
0,240 240,390 390,510 510,780 780,840
a what they call a

761
00:23:45,330 --> 00:23:46,280
0,360 360,720
sticky lock.

762
00:23:47,480 --> 00:23:48,980
0,300 300,570 570,1140 1170,1290 1290,1500
So that if you know

763
00:23:48,980 --> 00:23:50,060
0,180 180,450 450,780 780,900 900,1080
the file server at some

764
00:23:50,060 --> 00:23:51,770
0,240 240,960 960,1080 1080,1320 1320,1710
point soon, it's gonna use

765
00:23:51,770 --> 00:23:53,300
0,450 450,870 1020,1170 1170,1290 1290,1530
energy again, it can actually

766
00:23:53,300 --> 00:23:54,470
0,180 180,510 510,780 780,990 990,1170
do so without actually having

767
00:23:54,470 --> 00:23:56,090
0,60 60,570 570,690 690,1290 1410,1620
to communicate with pedal or

768
00:23:56,090 --> 00:23:57,560
0,420 420,540 540,1020 1020,1140 1140,1470
reload, it's cash or anything

769
00:23:57,560 --> 00:23:59,060
0,330 330,420 420,720 720,1110 1170,1500
like that at all, because

770
00:23:59,060 --> 00:24:00,110
0,90 90,330 330,390 390,720 720,1050
it has a sticky lock,

771
00:24:00,110 --> 00:24:01,490
0,150 150,660 660,780 780,1110 1110,1380
it knows that nobody else

772
00:24:01,490 --> 00:24:02,690
0,210 210,390 390,840 840,990 990,1200
actually has required no other

773
00:24:02,690 --> 00:24:04,040
0,210 210,540 540,660 660,1260 1260,1350
word spacing as required to

774
00:24:04,040 --> 00:24:05,180
0,270 270,330 330,420 420,930
walk in the meantime.

775
00:24:06,060 --> 00:24:07,890
0,360 360,690 780,1260 1260,1440 1440,1830
Um, so that's the sticky

776
00:24:07,890 --> 00:24:09,600
0,450 870,1320 1320,1410 1410,1620 1620,1710
lock and it turns out

777
00:24:09,600 --> 00:24:13,320
0,330 450,1500 1650,2490 2970,3570 3600,3720
that the the um, you

778
00:24:13,320 --> 00:24:14,610
0,60 60,270 270,660 660,930 930,1290
know, these are two building

779
00:24:14,610 --> 00:24:15,930
0,450 450,810 810,930 930,1110 1110,1320
blocks that are then being

780
00:24:15,930 --> 00:24:17,250
0,420 420,570 570,840 840,990 990,1320
used to what they call

781
00:24:17,250 --> 00:24:18,930
0,570 570,780 780,1170 1170,1260 1260,1680
what's a what is called

782
00:24:18,930 --> 00:24:21,390
0,630 840,1350 1350,1680 1680,2160 2160,2460
a cache coherence protocol and

783
00:24:21,540 --> 00:24:22,800
0,210 210,300 300,810 810,1110 1110,1260
set of messages, we're set

784
00:24:22,800 --> 00:24:23,640
0,90 90,420 420,540 540,600 600,840
of rules that are being

785
00:24:23,640 --> 00:24:25,440
0,540 720,960 960,1380 1380,1530 1530,1800
fond to actually, um get

786
00:24:25,440 --> 00:24:27,900
0,240 240,960 1380,1950 1950,2070 2070,2460
cache consistency and the basic

787
00:24:27,900 --> 00:24:30,030
0,330 330,510 510,900 1200,1980 1980,2130
rule is that, um, you

788
00:24:30,030 --> 00:24:32,310
0,300 510,1110 1110,1440 1440,1770 1770,2280
know guiding rule issue to

789
00:24:32,670 --> 00:24:33,740
0,360 360,450 450,990
cash a file.

790
00:24:38,890 --> 00:24:40,390
0,420 420,720 720,990 990,1410 1410,1500
You first must acquire to

791
00:24:40,390 --> 00:24:41,640
0,450
walk.

792
00:24:43,670 --> 00:24:45,710
0,210 210,390 390,1050 1050,1770 1770,2040
You'll see that rules a

793
00:24:45,710 --> 00:24:48,740
0,1320 1320,1500 1500,1740 1740,2190 2430,3030
steppingstone for actually getting a

794
00:24:48,800 --> 00:24:51,050
0,240 240,1320 1320,1410 1410,1710 1710,2250
cache consistency of capri heroes.

795
00:24:52,260 --> 00:24:53,010
0,150 150,450 450,510 510,660 660,750
I'm going to make a

796
00:24:53,010 --> 00:24:56,130
0,690 690,1560 1650,2550 2550,2970 2970,3120
smaller simplification, um in the

797
00:24:56,130 --> 00:24:57,240
0,330 330,420 420,840 840,990 990,1110
paper, they describe their own

798
00:24:57,240 --> 00:24:59,370
0,390 390,780 780,1080 1080,1710 1710,2130
walks basically being exclusive or

799
00:24:59,370 --> 00:25:00,660
0,240 240,390 390,690 690,780 780,1290
a we write our walks,

800
00:25:00,780 --> 00:25:01,740
0,390 390,510 510,630 630,690 690,960
I'm just going to assume

801
00:25:01,740 --> 00:25:02,700
0,510 540,660 660,840 840,900 900,960
for the rest of the

802
00:25:02,700 --> 00:25:04,020
0,420 420,510 510,1050 1080,1140 1140,1320
lecture, the exclusive it doesn't

803
00:25:04,020 --> 00:25:05,160
0,150 150,480 510,690 690,1050 1050,1140
really matter but there's an

804
00:25:05,160 --> 00:25:07,710
0,660 660,900 900,1050 1050,1650 1800,2550
optimization based on multiple workstations

805
00:25:07,710 --> 00:25:09,240
0,120 120,480 480,660 660,930 930,1530
can have a file cache

806
00:25:09,300 --> 00:25:10,600
0,270 270,630 630,1170
in reno remote.

807
00:25:12,530 --> 00:25:14,090
0,300 300,750 1050,1200 1200,1440 1440,1560
Okay, so with that, let

808
00:25:14,090 --> 00:25:14,660
0,90 90,240 240,300 300,450 450,570
me talk a little bit

809
00:25:14,660 --> 00:25:16,670
0,270 270,780 900,1530 1530,1830 1830,2010
about now let's catch out

810
00:25:16,670 --> 00:25:19,440
0,90 90,750
the protocol.

811
00:25:19,710 --> 00:25:21,500
0,360 360,600 600,810 810,1530
That French by users.

812
00:25:22,010 --> 00:25:23,810
0,540 720,960 960,1320 1320,1410 1410,1800
Um, and again we're gonna

813
00:25:23,870 --> 00:25:26,360
0,330 330,960 960,1200 1200,1500 1500,2490
cache coherence or cache {consistency's

814
00:25:26,600 --> 00:25:29,780
0,1530 1530,1950 1950,2460 2460,2970 2970,3180
-} ago Leslie for even

815
00:25:29,780 --> 00:25:31,340
0,120 120,240 240,480 480,810 810,1560
though the file systems distributed

816
00:25:31,580 --> 00:25:32,930
0,240 240,450 450,900 900,1110 1110,1350
a to behave like a

817
00:25:32,930 --> 00:25:34,550
0,600 600,900 900,1290 1290,1470 1470,1620
single file system so you

818
00:25:34,550 --> 00:25:36,050
0,210 210,330 330,540 540,840 840,1500
only have one file server,

819
00:25:36,050 --> 00:25:37,280
0,270 270,510 510,600 600,1020 1020,1230
you want to basically the

820
00:25:37,280 --> 00:25:39,290
0,630 750,1440 1440,1530 1530,1620 1620,2010
same results will be returned

821
00:25:39,290 --> 00:25:40,610
0,120 120,240 240,690 690,930 930,1320
by the distributed file system

822
00:25:41,000 --> 00:25:41,750
0,210 210,300 300,510 510,690 690,750
so you can't cut the

823
00:25:41,750 --> 00:25:42,830
0,330 330,510 510,630 630,1020 1020,1080
difference whether it's stupid or

824
00:25:42,830 --> 00:25:45,200
0,360 930,1440 1590,1830 1830,2070 2070,2370
not, and so this is

825
00:25:45,200 --> 00:25:46,250
0,60 60,180 180,450 450,660 660,1050
how you remind me of

826
00:25:46,250 --> 00:25:47,540
0,300 300,540 540,960 960,1170 1170,1290
likely arise ability, so in

827
00:25:47,540 --> 00:25:49,100
0,330 330,390 390,780 780,1290 1380,1560
fact you know I I

828
00:25:49,100 --> 00:25:50,540
0,300 300,570 570,960 960,1170 1170,1440
believe actually what front upon

829
00:25:50,540 --> 00:25:53,120
0,780 1290,1830 1830,2100 2100,2430 2430,2580
Ye a shoot for it's

830
00:25:53,120 --> 00:25:54,320
0,300 300,600 600,780 780,990 990,1200
actually Lunar eyes abul file

831
00:25:54,320 --> 00:25:55,360
0,360 360,960
system operations.

832
00:25:56,200 --> 00:25:57,760
0,540 630,1200 1260,1380 1380,1500 1500,1560
Okay, so we got the

833
00:25:57,760 --> 00:25:58,960
0,300 300,780
walks over.

834
00:26:00,790 --> 00:26:02,380
0,330 330,540 540,690 690,1110 1110,1590
Um, we got workstation one.

835
00:26:04,200 --> 00:26:06,480
0,360 360,510 510,960 960,1260
And there's workstation two.

836
00:26:07,600 --> 00:26:09,400
0,630 660,1140 1140,1290 1290,1530 1530,1800
And, um, there are four

837
00:26:09,400 --> 00:26:11,050
0,540 540,750 750,930 930,1380 1380,1650
messages that are important here,

838
00:26:11,050 --> 00:26:13,090
0,270 270,960 960,1470 1470,1560 1560,2040
there's a requesting a lock

839
00:26:13,390 --> 00:26:16,000
0,780 780,870 870,1380 1710,2160 2160,2610
granting a lock and revoking,

840
00:26:16,000 --> 00:26:17,800
0,90 90,600 630,1110 1110,1350 1350,1800
a lock and actually releasing

841
00:26:17,800 --> 00:26:18,460
0,90 90,330 330,420 420,600 600,660
the lock, so those are

842
00:26:18,460 --> 00:26:20,170
0,60 60,330 330,780 780,900 900,1710
the four messages, the flyer

843
00:26:20,170 --> 00:26:21,790
0,510 510,720 720,810 810,1050 1050,1620
between back and forth between

844
00:26:22,000 --> 00:26:24,190
0,720 720,870 870,1440 1440,1560 1560,2190
workstations and luxury and luxury

845
00:26:24,190 --> 00:26:26,470
0,120 120,300 300,1080 1620,2070 2100,2280
and other workstations, so let's

846
00:26:26,470 --> 00:26:27,640
0,450 450,570 570,810 810,990 990,1170
look at this let's say

847
00:26:27,640 --> 00:26:30,370
0,420 420,690 690,1410 2190,2580 2580,2730
locks or has nobody has

848
00:26:30,370 --> 00:26:31,660
0,180 180,480 480,600 600,900 900,1290
any locks at any time

849
00:26:31,660 --> 00:26:33,220
0,150 150,420 420,630 630,750 750,1560
so let's draw some timelines

850
00:26:33,910 --> 00:26:36,100
0,450 450,960 960,1290 1290,1560 1560,2190
and workstation, one wants to

851
00:26:36,130 --> 00:26:37,500
0,1200
request.

852
00:26:38,080 --> 00:26:40,210
0,390 390,480 480,840 840,1380 1440,2130
Once they reach write a

853
00:26:40,210 --> 00:26:42,220
0,360 360,720 1020,1170 1170,1680 1680,2010
file, if you visually sends

854
00:26:42,220 --> 00:26:43,570
0,240 240,630 630,780 780,840 840,1350
a request for a walk,

855
00:26:43,600 --> 00:26:44,650
0,150 150,390 390,510 510,720 720,1050
go to the lock server

856
00:26:44,650 --> 00:26:45,760
0,180 180,510 510,870
for file f.

857
00:26:46,580 --> 00:26:48,530
0,630 630,1170 1350,1620 1620,1830 1830,1950
We're saying but can't do

858
00:26:48,530 --> 00:26:49,520
0,330 330,540 540,630 630,780 780,990
anything really at this point

859
00:26:49,520 --> 00:26:51,170
0,330 600,1020 1020,1200 1200,1410 1410,1650
yet, um, the lock server,

860
00:26:51,170 --> 00:26:52,910
0,240 240,660 660,870 870,990 990,1740
no checks, if it's stable

861
00:26:53,180 --> 00:26:54,530
0,300 300,540 540,690 690,930 930,1350
and sees that f actually

862
00:26:54,530 --> 00:26:55,790
0,180 180,570 570,750 750,870 870,1260
is not used by anybody

863
00:26:55,790 --> 00:26:57,500
0,90 90,540 540,780 780,1200 1200,1710
at all, at least workstation

864
00:26:57,500 --> 00:26:59,360
0,420 420,660 660,930 930,1230 1230,1860
one as the walk owner

865
00:26:59,420 --> 00:27:01,670
0,300 300,630 630,930 930,1440 1470,2250
sends basically invested batch granting.

866
00:27:03,780 --> 00:27:05,220
0,120 120,450 450,630 630,1110
The walk for f.

867
00:27:06,160 --> 00:27:08,110
0,150 150,210 210,360 360,900 1200,1950
So at this point workstation

868
00:27:08,110 --> 00:27:09,940
0,690 930,1320 1320,1410 1410,1710 1710,1830
one required to walk for

869
00:27:09,940 --> 00:27:11,050
0,300 330,660 660,750 750,870 870,1110
f now it can actually

870
00:27:11,050 --> 00:27:12,100
0,240 240,360 360,720 720,930 930,1050
read or write where now

871
00:27:12,100 --> 00:27:13,270
0,120 120,210 210,450 450,840 840,1170
we can actually reach the

872
00:27:13,270 --> 00:27:15,220
0,330 330,480 480,990
file from pedals.

873
00:27:18,660 --> 00:27:20,970
0,630 840,1260 1260,1380 1380,1650 1650,2310
Um, actually can make modifications

874
00:27:20,970 --> 00:27:22,140
0,120 120,270 270,690 780,990 990,1170
to it to know those

875
00:27:22,140 --> 00:27:24,630
0,660 660,960 1020,1350 1350,1890 1980,2490
qualifications should stay local nothing

876
00:27:24,630 --> 00:27:26,040
0,180 180,510 510,690 690,990 990,1410
really happens is a write

877
00:27:26,130 --> 00:27:27,510
0,630 630,900 900,1080 1080,1140 1140,1380
back cache, not a right

878
00:27:27,510 --> 00:27:28,340
0,150 150,660
foot catch.

879
00:27:28,600 --> 00:27:29,560
0,150 150,240 240,330 330,720 720,960
And so it just stays

880
00:27:29,560 --> 00:27:31,240
0,480 480,720 720,810 810,1620 1620,1680
happily on the on the

881
00:27:31,240 --> 00:27:32,280
0,330 330,750
client side.

882
00:27:32,640 --> 00:27:33,750
0,300 300,420 420,630 630,720 720,1110
Um, in fact the workspace

883
00:27:33,750 --> 00:27:35,370
0,90 90,180 180,600 840,1530 1530,1620
you can even release the

884
00:27:35,370 --> 00:27:36,690
0,480 510,600 600,720 720,1170 1170,1320
lock, you know year in

885
00:27:36,690 --> 00:27:38,280
0,450 750,960 960,1110 1110,1440 1440,1590
Michigan go from D.C. to

886
00:27:38,280 --> 00:27:39,140
0,540
idle.

887
00:27:42,370 --> 00:27:44,170
0,270 270,450 450,660 660,1200 1410,1800
And so it actually, um

888
00:27:44,170 --> 00:27:45,190
0,240 240,420 420,510 510,720 720,1020
would need to walk again,

889
00:27:45,190 --> 00:27:46,420
0,60 60,390 390,600 600,930 930,1230
for example once right after

890
00:27:46,420 --> 00:27:48,160
0,540 540,1020 1020,1200 1200,1410 1410,1740
right again, we can actually

891
00:27:48,160 --> 00:27:49,510
0,150 150,240 240,630 630,990 990,1350
do the complete local without

892
00:27:49,510 --> 00:27:51,490
0,240 240,930 1080,1650 1650,1740 1740,1980
any interaction with the watch

893
00:27:51,490 --> 00:27:52,180
0,420
server.

894
00:27:52,710 --> 00:27:54,420
0,180 180,240 240,540 540,1140 1140,1710
There's a slight simplification here,

895
00:27:54,420 --> 00:27:55,230
0,300 300,480 480,690 690,750 750,810
there's we'll see in a

896
00:27:55,230 --> 00:27:56,880
0,420 450,690 690,900 1140,1470 1470,1650
second that the lock has

897
00:27:56,880 --> 00:27:58,260
0,390 390,930 930,1110 1110,1230 1230,1380
least associated with it, so

898
00:27:58,260 --> 00:27:59,040
0,60 60,360 360,450 450,630 630,780
the client at least has

899
00:27:59,040 --> 00:28:00,660
0,90 90,510 510,600 600,870 870,1620
to refresh the least periodically,

900
00:28:00,750 --> 00:28:02,220
0,240 240,300 300,540 540,660 660,1470
but it doesn't have to

901
00:28:02,250 --> 00:28:04,800
0,1140 1260,1590 1590,2010 2010,2220 2220,2550
reread the file f from

902
00:28:04,800 --> 00:28:05,720
0,300 300,690
actually pedal.

903
00:28:06,120 --> 00:28:07,500
0,210 210,300 300,510 510,750 750,1380
If the lease has expired.

904
00:28:08,880 --> 00:28:10,320
0,330 330,690 810,990 990,1260 1260,1440
Okay, so the instant case

905
00:28:10,320 --> 00:28:11,490
0,60 60,240 240,630 630,870 870,1170
of course happens like what

906
00:28:11,490 --> 00:28:13,860
0,270 270,840 840,1410 1620,2130 2130,2370
if workstation two wants to

907
00:28:13,860 --> 00:28:15,780
0,480 510,900 900,1050 1050,1530 1530,1920
read a the file f

908
00:28:15,930 --> 00:28:17,010
0,450 660,780 780,840 840,990 990,1080
so you know what will

909
00:28:17,010 --> 00:28:18,270
0,270 270,480 480,480 480,1020 1020,1260
happen with a workstation to

910
00:28:18,270 --> 00:28:19,200
0,180 180,270 270,510 510,630 630,930
want to read and basically

911
00:28:19,200 --> 00:28:19,830
0,120 120,210 210,330 330,390 390,630
it will do the same

912
00:28:19,830 --> 00:28:21,540
0,180 180,270 270,600 630,1170 1320,1710
thing, it will send a

913
00:28:21,540 --> 00:28:24,240
0,930 930,1110 1110,1380 1380,1980 2250,2700
acquirer group quest message request

914
00:28:24,240 --> 00:28:26,310
0,390 390,780 1080,1650 1650,1800 1800,2070
message to watcher for saying

915
00:28:26,310 --> 00:28:27,140
0,90 90,300 300,690
I want f.

916
00:28:27,790 --> 00:28:28,660
0,120 120,180 180,330 330,540 540,870
And the way it works

917
00:28:28,660 --> 00:28:30,070
0,150 150,480 600,840 840,1020 1020,1410
is that the lock server

918
00:28:30,070 --> 00:28:31,900
0,540 660,1230 1230,1320 1320,1470 1470,1830
actually looks at this table

919
00:28:31,900 --> 00:28:33,400
0,270 270,510 510,840 840,930 930,1500
sees the f is actually

920
00:28:33,400 --> 00:28:35,380
0,570 570,1140 1170,1380 1380,1560 1560,1980
owned by which stage one

921
00:28:35,530 --> 00:28:36,340
0,180 180,330 330,570 570,750 750,810
and then we'll send the

922
00:28:36,340 --> 00:28:37,660
0,480 480,1080
revoke message.

923
00:28:37,890 --> 00:28:40,950
0,510 510,1140 1140,1650 1920,2640 2640,3060
Two workstation one asking yeah

924
00:28:40,950 --> 00:28:43,860
0,450 480,900 900,1380 1560,2010 2400,2910
the lock back, so f.

925
00:28:44,520 --> 00:28:46,180
0,390 390,510 510,720 720,1350
And at this point.

926
00:28:46,490 --> 00:28:47,750
0,630 630,960 960,1080 1080,1110 1110,1260
Pedal actually do a little

927
00:28:47,750 --> 00:28:49,040
0,180 180,390 390,510 510,780 990,1290
bit more of a front

928
00:28:49,040 --> 00:28:50,030
0,270 270,630 630,780 780,930 930,990
bonnie actually little bit of

929
00:28:50,030 --> 00:28:51,740
0,420 600,1290 1290,1440 1440,1620 1620,1710
work because we have to

930
00:28:51,740 --> 00:28:53,240
0,150 150,540 540,660 660,1170 1170,1500
make sure the workstation to

931
00:28:53,240 --> 00:28:55,370
0,570 570,690 690,1290 1380,1680 1680,2130
observes the rights that workstation

932
00:28:55,370 --> 00:28:56,510
0,210 210,330 330,660 870,1050 1050,1140
one is done and so

933
00:28:56,510 --> 00:28:57,290
0,90 90,240 240,480 480,570 570,780
the way that is done

934
00:28:57,290 --> 00:28:58,580
0,90 90,210 210,540 540,870 870,1290
is that basically this instant

935
00:28:58,580 --> 00:28:59,660
0,120 120,720
of time.

936
00:29:00,700 --> 00:29:01,740
0,690
I'm.

937
00:29:02,180 --> 00:29:03,500
0,150 150,540 540,780 780,1050 1050,1320
The workstation one writes actually

938
00:29:03,500 --> 00:29:05,120
0,450 480,630 630,720 720,1020 1020,1620
f. you know two pedals

939
00:29:06,020 --> 00:29:06,590
0,180 180,300 300,450 450,510 510,570
and we'll see in a

940
00:29:06,590 --> 00:29:08,030
0,450 450,690 690,1050 1050,1350 1350,1440
second, actually writing f two

941
00:29:08,030 --> 00:29:09,740
0,360 360,780 780,900 900,1200 1200,1710
panels actually a slightly complicated

942
00:29:09,740 --> 00:29:11,300
0,570 570,750 750,1350 1350,1440 1440,1560
operations more sophisticated than I'm

943
00:29:11,300 --> 00:29:11,990
0,150 150,420 420,510 510,630 630,690
just making it out to

944
00:29:11,990 --> 00:29:13,220
0,360 480,720 720,840 840,1020 1020,1230
be, but just think about

945
00:29:13,220 --> 00:29:14,630
0,120 120,390 390,540 540,990 1230,1410
it at this point, we're

946
00:29:14,630 --> 00:29:16,280
0,270 270,690 750,870 870,1200 1200,1650
session one is basically flushing,

947
00:29:16,280 --> 00:29:17,780
0,120 120,510 510,870 870,960 960,1500
it states related to f

948
00:29:17,810 --> 00:29:18,940
0,240 240,450 450,930
now to pedal.

949
00:29:19,580 --> 00:29:21,290
0,510 510,690 690,1050 1050,1500 1500,1710
Once that actually completed, so

950
00:29:21,290 --> 00:29:22,910
0,240 240,540 540,900 900,1020 1020,1620
like once pedals are acknowledged

951
00:29:22,910 --> 00:29:24,080
0,120 120,390 390,540 540,840 840,1170
that actually it actually has

952
00:29:24,080 --> 00:29:25,460
0,360 360,420 420,510 510,990 1170,1380
received all the data and

953
00:29:25,460 --> 00:29:26,840
0,300 300,540 540,570 570,870 870,1380
actually sends a message back

954
00:29:26,960 --> 00:29:28,200
0,510 510,930
releasing f.

955
00:29:32,100 --> 00:29:33,540
0,480 480,600 600,690 690,990 990,1440
And you know once luxury

956
00:29:33,540 --> 00:29:34,830
0,240 240,360 360,750 750,870 870,1290
gets the release of f

957
00:29:34,860 --> 00:29:35,820
0,90 90,180 180,330 330,450 450,960
you know that can update

958
00:29:35,820 --> 00:29:37,530
0,330 330,990 990,1230 1230,1650 1650,1710
its stable and allocate the

959
00:29:37,530 --> 00:29:40,200
0,330 330,420 420,1230 1380,1980 2160,2670
lock, the workstation two and

960
00:29:40,200 --> 00:29:43,350
0,510 510,660 660,870 870,1500 2700,3150
sends you a grant for

961
00:29:43,350 --> 00:29:44,500
0,360 390,540 540,900
f two two.

962
00:29:45,070 --> 00:29:45,980
0,390
Oops.

963
00:29:52,420 --> 00:29:54,130
0,150 150,210 210,360 360,840 870,1710
And at this point a

964
00:29:54,160 --> 00:29:56,200
0,510 510,900 900,1440 1440,1860 1860,2040
workstation to requires lock and

965
00:29:56,200 --> 00:29:58,030
0,270 270,540 540,690 690,990 990,1830
now it can actually read

966
00:29:58,030 --> 00:29:59,560
0,120 120,240 240,1050 1050,1320 1350,1530
all the information from the

967
00:29:59,560 --> 00:30:01,150
0,270 270,480 480,960 1140,1410 1410,1590
file f pedal at that

968
00:30:01,150 --> 00:30:02,800
0,240 240,360 360,510 510,1380 1410,1650
point it is guaranteed that

969
00:30:02,800 --> 00:30:04,630
0,180 180,660 690,870 870,1230 1230,1830
we'll see the latest changes

970
00:30:04,870 --> 00:30:07,060
0,630 930,1440 1440,1590 1590,1920 1920,2190
to a the file f

971
00:30:07,060 --> 00:30:09,490
0,690 810,1260 1260,1620 1620,2010 2010,2430
because the previous owner must

972
00:30:09,490 --> 00:30:11,020
0,180 180,750 840,930 930,1440 1440,1530
have flushed the state you

973
00:30:11,020 --> 00:30:14,020
0,120 120,480 480,1050 1380,2070 2280,3000
know to the um pedal

974
00:30:14,110 --> 00:30:15,820
0,810 810,900 900,1260 1260,1620 1620,1710
before it actually released the

975
00:30:15,820 --> 00:30:16,690
0,300 300,420 420,570 570,630 630,870
walk and gave it back

976
00:30:16,690 --> 00:30:17,860
0,60 60,240 240,360 360,840 1020,1170
to the web server and

977
00:30:17,860 --> 00:30:19,360
0,540 540,750 750,870 870,1410 1410,1500
workstation two is guaranteed to

978
00:30:19,360 --> 00:30:21,010
0,480 480,960 960,1140 1140,1560 1560,1650
actually observe those changes and

979
00:30:21,010 --> 00:30:22,120
0,90 90,330 330,570 570,750 750,1110
so here's where our strong

980
00:30:22,120 --> 00:30:24,220
0,510 510,780 780,990 1500,1890 1890,2100
persistency comes in these strong

981
00:30:24,220 --> 00:30:26,290
0,420 420,540 540,1320 1320,1590 1590,2070
persistence or tight to the

982
00:30:26,380 --> 00:30:27,500
0,450 450,1050
walk management.

983
00:30:29,860 --> 00:30:31,460
0,210 210,480 480,690 690,990
Any questions about this.

984
00:30:34,410 --> 00:30:36,030
0,180 180,540 540,960 960,1080 1080,1620
Um, well there's a question,

985
00:30:36,720 --> 00:30:38,060
0,810
okay.

986
00:30:39,860 --> 00:30:40,940
0,240 240,510 510,690 690,810 810,1080
Um, we need to write

987
00:30:40,940 --> 00:30:42,320
0,660 660,990 990,1050 1050,1140 1140,1380
one question in the chat,

988
00:30:42,320 --> 00:30:43,670
0,150 150,480 480,840 840,930 930,1350
let me address the first

989
00:30:43,910 --> 00:30:45,110
0,330 330,630 630,780 780,900 900,1200
um, we need to write

990
00:30:45,110 --> 00:30:46,430
0,90 90,390 390,630 630,1020 1020,1320
to pedal when releasing both

991
00:30:46,430 --> 00:30:47,870
0,270 270,390 390,600 600,1050 1170,1440
read and write locks, why

992
00:30:47,870 --> 00:30:48,860
0,90 90,300 300,420 420,540 540,990
do we need to write

993
00:30:48,860 --> 00:30:49,970
0,90 90,420 420,720 720,1020 1020,1110
to pedal when releasing a

994
00:30:49,970 --> 00:30:53,120
0,180 180,570 960,1590 1710,2490 2490,3150
read lock, um, let's ignore

995
00:30:53,120 --> 00:30:55,100
0,330 330,600 600,960 960,1470 1470,1980
a weed right z distinction

996
00:30:55,100 --> 00:30:57,470
0,540 540,840 1140,1680 1680,2100 2100,2370
between right exclusive locks and

997
00:30:57,470 --> 00:30:59,810
0,180 180,390 390,930 1170,1920 1920,2340
read write locks, um in

998
00:30:59,810 --> 00:31:00,580
0,600
the.

999
00:31:00,760 --> 00:31:02,650
0,720 1050,1380 1380,1530 1530,1770 1770,1890
Um, and just focus on

1000
00:31:02,650 --> 00:31:04,480
0,420 420,870 900,1020 1020,1380 1380,1830
exclusive watch you know read

1001
00:31:04,480 --> 00:31:05,800
0,60 60,300 300,780 780,1230 1230,1320
the whole {re-reading -} is

1002
00:31:05,800 --> 00:31:06,880
0,150 150,210 210,600 600,840 840,1080
just a small APP as

1003
00:31:06,880 --> 00:31:08,410
0,60 60,420 420,510 510,900 900,1530
it happens an important optimization,

1004
00:31:08,590 --> 00:31:09,610
0,420 420,540 540,600 600,810 810,1020
um, but it doesn't really

1005
00:31:09,610 --> 00:31:12,580
0,600 600,1560 1560,2010 2010,2310 2310,2970
change z designer system dramatically.

1006
00:31:17,180 --> 00:31:18,360
0,180 180,330 330,870
Any other questions.

1007
00:31:19,150 --> 00:31:20,680
0,270 270,450 450,750 750,900 900,1530
So this sort of design

1008
00:31:20,680 --> 00:31:22,450
0,210 210,510 510,960 990,1620 1620,1770
would be really inefficient, if

1009
00:31:22,450 --> 00:31:23,470
0,120 120,360 360,540 540,690 690,1020
we have like two different

1010
00:31:23,470 --> 00:31:25,180
0,690 690,810 810,930 930,1200 1200,1710
workstations that are both modifying

1011
00:31:25,180 --> 00:31:27,010
0,60 60,360 360,960 1170,1590 1650,1830
the same file, yeah you

1012
00:31:27,010 --> 00:31:28,660
0,390 390,570 570,690 690,1050 1050,1650
just get like cash bouncing

1013
00:31:28,690 --> 00:31:30,190
0,240 240,360 360,840 870,1380 1380,1500
back and forth, yeah you

1014
00:31:30,190 --> 00:31:31,570
0,300 300,510 510,780 780,1080 1080,1380
maybe if you're too bored

1015
00:31:31,570 --> 00:31:33,340
0,390 390,450 450,900 900,1290 1290,1770
stations are two different engineers,

1016
00:31:33,340 --> 00:31:34,780
0,540 540,750 750,900 900,1320 1320,1440
indexer would be banging on

1017
00:31:34,780 --> 00:31:35,740
0,90 90,330 330,780 780,840 840,960
the same file, you know

1018
00:31:35,740 --> 00:31:36,760
0,300 330,600 600,720 720,840 840,1020
the file would go back

1019
00:31:36,760 --> 00:31:37,360
0,90 90,480
and forth.

1020
00:31:38,290 --> 00:31:40,750
0,750 750,1860 1860,2010 2010,2250 2250,2460
Um, and so is not

1021
00:31:40,750 --> 00:31:41,680
0,180 180,600 600,720 720,840 840,930
really suitable so you can

1022
00:31:41,680 --> 00:31:43,030
0,300 300,720 720,840 840,1230 1230,1350
see here, the influence of

1023
00:31:43,030 --> 00:31:45,400
0,240 240,690 1530,2070 2070,2220 2220,2370
like the workload that they're

1024
00:31:45,400 --> 00:31:47,020
0,450 450,780 870,1380 1380,1500 1500,1620
designing for, um, you know

1025
00:31:47,020 --> 00:31:48,160
0,180 180,390 390,840 840,990 990,1140
they're really assumption is that

1026
00:31:48,160 --> 00:31:50,170
0,600 810,1200 1200,1620 1620,1710 1710,2010
basically most engineers are working

1027
00:31:50,170 --> 00:31:52,420
0,120 120,300 300,630 630,1290 1530,2250
on their private files and

1028
00:31:52,420 --> 00:31:52,900
0,60 60,240 240,390 390,450 450,480
you know once in a

1029
00:31:52,900 --> 00:31:54,190
0,210 210,450 450,750 750,1140 1140,1290
while, they'll share files, but

1030
00:31:54,190 --> 00:31:55,300
0,60 60,240 240,480 480,720 720,1110
they were probably not banging

1031
00:31:55,300 --> 00:31:56,350
0,120 120,180 180,420 420,690 690,1050
on the same shared file.

1032
00:32:02,980 --> 00:32:04,240
0,330 330,510 510,720 720,1020 1020,1260
We're not using gift, but

1033
00:32:04,240 --> 00:32:05,170
0,90 90,180 180,570 570,780 780,930
you could imagine if they

1034
00:32:05,170 --> 00:32:06,250
0,120 120,210 210,540 540,870 870,1080
have a share your code

1035
00:32:06,250 --> 00:32:07,630
0,720 720,900 900,990 990,1230 1230,1380
repositories, are you check out

1036
00:32:07,630 --> 00:32:08,830
0,150 150,270 270,600 600,690 690,1200
your own copy of the

1037
00:32:08,860 --> 00:32:10,780
0,210 210,810 810,1080 1080,1740 1740,1920
code repository called modifications and

1038
00:32:10,780 --> 00:32:11,830
0,150 150,360 360,420 420,660 660,1050
some point to write back.

1039
00:32:14,850 --> 00:32:15,810
0,240 240,480 480,660 660,750 750,960
I'm sorry, just to make

1040
00:32:15,810 --> 00:32:16,980
0,180 180,240 240,600 750,900 900,1170
sure you say you can

1041
00:32:16,980 --> 00:32:19,020
0,450 450,570 570,1170 1200,1530 1530,2040
release the lock 'em while

1042
00:32:19,020 --> 00:32:20,280
0,120 120,570 570,900 900,990 990,1260
you still have the file

1043
00:32:20,280 --> 00:32:21,700
0,60 60,330 360,1140
in the cache.

1044
00:32:23,040 --> 00:32:25,440
0,750 750,1140 1170,2100
You can a.

1045
00:32:25,730 --> 00:32:26,840
0,300 300,720 720,930 930,1050 1050,1110
Okay so I'm going to

1046
00:32:26,840 --> 00:32:27,890
0,90 90,330 330,630 630,810 810,1050
be very careful with when

1047
00:32:27,890 --> 00:32:28,820
0,30 30,300 300,450 450,840 840,930
I met with releasing the

1048
00:32:28,820 --> 00:32:30,380
0,270 270,780 840,1020 1020,1260 1260,1560
walk, there is not releasing

1049
00:32:30,380 --> 00:32:31,520
0,120 120,210 210,330 330,570 570,1140
it to the walk server

1050
00:32:31,670 --> 00:32:32,900
0,330 330,540 540,1050 1050,1110 1110,1230
a but locally you know

1051
00:32:32,900 --> 00:32:34,460
0,510 510,600 600,1020 1020,1230 1230,1560
changing the status from busy

1052
00:32:34,460 --> 00:32:35,220
0,120 120,510
to idle.

1053
00:32:37,020 --> 00:32:37,980
0,300 300,480 480,600 600,720 720,960
As soon as you know

1054
00:32:37,980 --> 00:32:39,240
0,330 330,600 600,1080 1080,1170 1170,1260
the lucky sticky you know

1055
00:32:39,240 --> 00:32:40,410
0,90 90,330 330,600 600,690 690,1170
it still sits at workstation

1056
00:32:40,410 --> 00:32:41,640
0,330 330,450 450,750 750,990 990,1230
one and watch server still

1057
00:32:41,640 --> 00:32:43,230
0,450 450,840 840,1050 1050,1320 1320,1590
things actually work station one

1058
00:32:43,230 --> 00:32:44,220
0,210 210,330 330,720
has to walk.

1059
00:32:48,850 --> 00:32:50,280
0,270 270,510 510,630 630,1110
Not answering your question.

1060
00:32:51,330 --> 00:32:53,500
0,450 480,750 750,990 990,1410
Yeah yeah, thank you.

1061
00:32:54,600 --> 00:32:56,260
0,210 210,330 330,780 780,1290
So what happens, um.

1062
00:32:56,510 --> 00:32:58,250
0,300 300,420 420,960 960,1380 1500,1740
If the request from a

1063
00:32:58,250 --> 00:33:01,190
0,570 570,1050 1350,2160 2160,2280 2280,2940
two comes awhile to busy.

1064
00:33:01,930 --> 00:33:03,010
0,390 390,540 540,870 870,1020 1020,1080
Yes, good question, what do

1065
00:33:03,010 --> 00:33:04,200
0,60 60,330 330,810
you think happens.

1066
00:33:10,100 --> 00:33:11,180
0,180 180,270 270,450 450,780 780,1080
Does it just reject them.

1067
00:33:11,880 --> 00:33:13,290
0,600 600,810 810,1080 1080,1260 1260,1410
No, that's I think it

1068
00:33:13,290 --> 00:33:14,640
0,210 210,510 510,660 660,870 870,1350
doesn't reject it just waits

1069
00:33:14,880 --> 00:33:16,530
0,120 120,390 390,1140 1170,1440 1440,1650
and waits until a work

1070
00:33:16,530 --> 00:33:19,170
0,270 270,840 960,1170 1170,1680 1740,2640
session, one is done modifying

1071
00:33:19,170 --> 00:33:20,550
0,90 90,450 450,660 660,960 960,1380
the file f word executing

1072
00:33:20,550 --> 00:33:22,440
0,150 150,420 420,690 690,1290 1680,1890
its file system operation, and

1073
00:33:22,440 --> 00:33:25,140
0,540 690,1170 1170,1530 1770,2430 2430,2700
then um the frangipani code

1074
00:33:25,140 --> 00:33:27,480
0,390 510,1230 1230,1710 1710,1830 1830,2340
will release locally, the walk

1075
00:33:27,750 --> 00:33:29,010
0,330 330,630 630,810 810,1110 1110,1260
will see that someone is

1076
00:33:29,010 --> 00:33:30,630
0,330 330,630 630,810 1200,1440 1440,1620
waiting for it and so

1077
00:33:30,630 --> 00:33:32,250
0,510 510,750 750,840 840,1320 1320,1620
doesn't change it into a

1078
00:33:32,250 --> 00:33:33,870
0,540 600,840 840,1020 1020,1260 1260,1620
busy but actually starts flushing

1079
00:33:33,870 --> 00:33:35,520
0,180 180,240 240,840 840,1260 1260,1650
all the operations to paddle

1080
00:33:35,520 --> 00:33:36,750
0,120 120,390 390,750 750,840 840,1230
and then releases the lock.

1081
00:33:38,530 --> 00:33:39,880
0,180 180,330 330,540 540,870 870,1350
So this comes actually nicely

1082
00:33:39,880 --> 00:33:41,260
0,90 90,180 180,480 480,870 900,1380
to the second point a

1083
00:33:41,260 --> 00:33:42,610
0,180 180,270 270,390 390,990 990,1350
which is this automation point,

1084
00:33:42,640 --> 00:33:43,630
0,180 180,420 420,630 630,840 840,990
so maybe that will make

1085
00:33:43,630 --> 00:33:44,880
0,90 90,270 270,690
it more clear.

1086
00:33:45,330 --> 00:33:46,020
0,240 240,300 300,480 480,510 510,690
Let me talk a little

1087
00:33:46,020 --> 00:33:47,220
0,150 150,390 390,840 840,1020 1020,1200
bit about ethnicity because they're

1088
00:33:47,220 --> 00:33:49,620
0,570 630,1290 1290,1380 1380,1740 1740,2400
also usually the same walks

1089
00:33:49,740 --> 00:33:52,830
0,780 930,1890 1920,2640 2640,2850 2850,3090
to achieve atomic file system

1090
00:33:52,830 --> 00:33:53,780
0,720
operations.

1091
00:33:56,260 --> 00:34:03,100
0,960 960,1110 1110,1260 1260,2190 4770,6840
Yeah you should watch Zhou

1092
00:34:03,130 --> 00:34:04,120
0,750
Xiao.

1093
00:34:04,200 --> 00:34:06,180
0,870 900,1350 1350,1440 1440,1650 1650,1980
When presumably you do create

1094
00:34:06,180 --> 00:34:07,830
0,600 600,810 810,960 960,1560 1560,1650
operation like you execute the

1095
00:34:07,830 --> 00:34:10,110
0,330 330,600 600,870 870,1560 2130,2280
create file system operation or

1096
00:34:10,110 --> 00:34:12,040
0,420 420,750 750,1350
whatever create f.

1097
00:34:12,850 --> 00:34:13,870
0,210 210,420 420,570 570,690 690,1020
Yeah, what are the usual

1098
00:34:13,870 --> 00:34:14,900
0,630
arguments.

1099
00:34:15,150 --> 00:34:16,800
0,270 270,570 570,660 660,900 900,1650
And there's of course internally

1100
00:34:16,800 --> 00:34:18,270
0,210 210,330 330,660 690,1260 1260,1470
even though the application makes

1101
00:34:18,270 --> 00:34:19,440
0,150 150,450 450,690 690,930 930,1170
this create file system, called

1102
00:34:19,440 --> 00:34:21,150
0,90 90,540 540,780 780,990 990,1710
this internally actually has multiple

1103
00:34:21,630 --> 00:34:24,120
0,750 750,960 960,1200 1200,1980 2280,2490
a file system modifications in

1104
00:34:24,120 --> 00:34:25,980
0,510 510,780 780,1050 1110,1680 1680,1860
example you the directory needs

1105
00:34:25,980 --> 00:34:27,780
0,90 90,180 180,1020 1080,1500 1500,1800
to be modified actually be

1106
00:34:27,810 --> 00:34:28,980
0,330 330,450 450,600 630,930 930,1170
good in a slightly different

1107
00:34:28,980 --> 00:34:30,780
0,450 540,810 810,960 960,1320 1350,1800
order, we need to allocate

1108
00:34:30,780 --> 00:34:31,980
0,90 90,240 240,840 900,1080 1080,1200
an I note you know

1109
00:34:31,980 --> 00:34:33,380
0,270 270,1140
for f.

1110
00:34:34,260 --> 00:34:35,460
0,330 330,390 390,930 930,1080 1080,1200
Need to initialize that I

1111
00:34:35,460 --> 00:34:38,550
0,510 1500,2130 2130,2280 2280,2400 2400,3090
note right, the I note.

1112
00:34:39,790 --> 00:34:40,960
0,150 150,510 510,600 600,810 810,1170
And then we're gonna update

1113
00:34:40,960 --> 00:34:42,020
0,60 60,750
the directory.

1114
00:34:44,150 --> 00:34:46,460
0,300 300,360 360,1110 1380,1770 1770,2310
Update the directory to happen,

1115
00:34:46,490 --> 00:34:48,500
0,240 240,330 330,810 810,1290 1290,2010
add an entry basically forgoes

1116
00:34:48,500 --> 00:34:50,270
0,90 90,510 510,1170 1290,1440 1440,1770
a cheapo f. and whatever

1117
00:34:50,270 --> 00:34:52,430
0,150 150,390 390,960 1500,1650 1650,2160
I node number was allocated

1118
00:34:52,430 --> 00:34:53,100
0,450
ref.

1119
00:34:53,980 --> 00:34:55,120
0,30 30,660 660,870 870,960 960,1140
A typical way in which

1120
00:34:55,120 --> 00:34:56,650
0,90 90,330 330,570 570,930 930,1530
a unix file system implements

1121
00:34:56,650 --> 00:34:58,210
0,540 1080,1230 1230,1320 1320,1410 1410,1560
files and so we need

1122
00:34:58,210 --> 00:34:59,770
0,60 60,570 570,720 720,870 870,1560
to arrange that these operations

1123
00:34:59,770 --> 00:35:02,770
0,690 690,1080 1080,1380 1800,2790 2790,3000
happen atomic Lee, yeah because

1124
00:35:02,770 --> 00:35:03,460
0,90 90,300 300,450 450,540 540,690
we don't want to sort

1125
00:35:03,460 --> 00:35:05,080
0,90 90,630 630,1050 1050,1170 1170,1620
of intermediate results be visible

1126
00:35:05,080 --> 00:35:06,400
0,120 120,570 570,1140 1140,1230 1230,1320
to other workstations in the

1127
00:35:06,400 --> 00:35:07,990
0,240 240,420 420,780 780,990 990,1590
way that happens is using

1128
00:35:08,020 --> 00:35:10,570
0,390 390,840 840,990 990,1500 1920,2550
by acquiring those locks acquired

1129
00:35:10,570 --> 00:35:11,240
0,540
lock.

1130
00:35:13,440 --> 00:35:14,910
0,300 300,780 810,990 990,1350 1350,1470
Now for this particular I

1131
00:35:14,910 --> 00:35:16,140
0,450 450,540 540,630 630,720 720,1230
note you know, for example

1132
00:35:16,140 --> 00:35:17,460
0,330 330,570 570,720 720,1080 1080,1320
later I know ten so

1133
00:35:17,460 --> 00:35:18,300
0,150 150,390 390,450 450,750 750,840
you're quite a walk for

1134
00:35:18,300 --> 00:35:19,740
0,360 390,510 510,630 630,870 930,1440
f I'm just gonna use

1135
00:35:19,770 --> 00:35:22,170
0,360 360,750 1440,2010 2010,2160 2160,2400
efforts to lock I think,

1136
00:35:22,170 --> 00:35:23,700
0,180 180,1140 1140,1290 1290,1440 1440,1530
but yeah it's gonna be

1137
00:35:23,700 --> 00:35:24,600
0,270 270,480 480,600 600,810 810,900
an number and then at

1138
00:35:24,600 --> 00:35:26,850
0,120 120,390 390,630 630,1290 1830,2250
some point it releases file

1139
00:35:26,850 --> 00:35:28,230
0,270 270,360 360,600 600,1050 1050,1380
system at thank plantation self

1140
00:35:28,230 --> 00:35:29,580
0,420 420,540 540,960
releases the walk.

1141
00:35:30,360 --> 00:35:31,860
0,120 120,390 390,810 810,1410 1410,1500
And again this releases a

1142
00:35:31,860 --> 00:35:33,570
0,390 390,690 690,1290 1290,1470 1470,1710
local release operation, it doesn't

1143
00:35:33,570 --> 00:35:36,720
0,390 390,750 750,1380 1710,2550 2580,3150
really mean immediately a releasing

1144
00:35:36,720 --> 00:35:37,500
0,60 60,360 360,480 480,600 600,780
it back to the web

1145
00:35:37,500 --> 00:35:39,240
0,420 420,900 900,1290 1290,1380 1380,1740
server just changing the status

1146
00:35:39,240 --> 00:35:40,590
0,150 150,450 450,840 900,1350 1350,1350
from bc to A I

1147
00:35:40,590 --> 00:35:41,320
0,480
don't.

1148
00:35:42,220 --> 00:35:44,080
0,150 150,540 630,1170 1170,1350 1350,1860
And so, um, so if

1149
00:35:44,110 --> 00:35:45,070
0,210 210,390 390,720 720,900 900,960
at any particular point in

1150
00:35:45,070 --> 00:35:46,870
0,570 630,1110 1110,1230 1230,1410 1410,1800
time as we just ask

1151
00:35:46,870 --> 00:35:47,770
0,90 90,210 210,450 450,510 510,900
you know there's a request

1152
00:35:47,770 --> 00:35:51,670
0,240 240,450 450,1020 1290,2070 2670,3900
coming in for a revoke

1153
00:35:51,820 --> 00:35:52,880
0,810
block.

1154
00:35:55,860 --> 00:35:58,470
0,540 540,960 1080,1740 1770,2490 2490,2610
No gap that request is

1155
00:35:58,470 --> 00:36:00,780
0,210 210,450 450,630 630,1260 1380,2310
not actually being served into

1156
00:36:00,870 --> 00:36:02,160
0,300 300,630 630,960 960,1050 1050,1290
the file system, the local

1157
00:36:02,160 --> 00:36:03,900
0,210 210,600 600,840 840,1200 1200,1740
front, finally file system workstation

1158
00:36:03,900 --> 00:36:04,760
0,420
one.

1159
00:36:04,970 --> 00:36:06,920
0,480 480,1200 1230,1530 1530,1620 1620,1950
Um has called the local

1160
00:36:06,920 --> 00:36:08,100
0,300 300,870
release operation.

1161
00:36:08,300 --> 00:36:09,410
0,180 180,450 450,570 570,960 960,1110
And then it sees that

1162
00:36:09,410 --> 00:36:10,610
0,240 240,300 300,600 600,900 900,1200
when the doctor local release

1163
00:36:10,610 --> 00:36:12,050
0,480 480,570 570,960 960,1200 1200,1440
operation, it sees that there's

1164
00:36:12,050 --> 00:36:14,360
0,420 420,810 810,1290 1320,1770 1770,2310
um a revoke a weighting

1165
00:36:14,600 --> 00:36:15,830
0,180 180,270 270,450 450,960 1080,1230
so at this point it's

1166
00:36:15,830 --> 00:36:18,110
0,120 120,180 180,990 1500,1920 1920,2280
going to flush its cache

1167
00:36:18,110 --> 00:36:19,020
0,540
state.

1168
00:36:21,730 --> 00:36:23,590
0,540 540,990 990,1080 1080,1230 1230,1860
Scratch state, you know to

1169
00:36:23,680 --> 00:36:25,160
0,570
pedal.

1170
00:36:26,180 --> 00:36:27,260
0,240 240,510 510,630 630,900 900,1080
And ones that actually have

1171
00:36:27,260 --> 00:36:28,400
0,270 270,600 600,840 840,1050 1050,1140
a faucet cache state to

1172
00:36:28,400 --> 00:36:31,040
0,570 690,1080 1080,1350 1350,2040 2070,2640
peddle a it will grant

1173
00:36:31,040 --> 00:36:33,260
0,450 450,1050 1290,1680 1740,2130 2130,2220
basically revoke or accept the

1174
00:36:33,260 --> 00:36:35,210
0,540 660,1200 1200,1440 1440,1770 1770,1950
revoke and send back a

1175
00:36:35,210 --> 00:36:36,260
0,300 300,390 390,540 540,690 690,1050
release due to a server,

1176
00:36:36,260 --> 00:36:37,310
0,120 120,480 480,540 540,750 750,1050
so then the law can

1177
00:36:37,310 --> 00:36:39,770
0,300 300,750 990,1680 1680,2340 2340,2460
there be assigned to a

1178
00:36:39,770 --> 00:36:40,760
0,450 450,720
workstation two.

1179
00:36:43,590 --> 00:36:44,540
0,150 150,300 300,600
That makes sense.

1180
00:36:48,620 --> 00:36:50,450
0,330 330,810 1080,1380 1380,1650 1650,1830
Um, so just make sure

1181
00:36:50,450 --> 00:36:51,830
0,210 210,480 480,660 660,960 960,1380
so in this great operation,

1182
00:36:51,830 --> 00:36:52,880
0,150 150,300 300,420 420,510 510,1050
here we have to modify

1183
00:36:52,880 --> 00:36:54,980
0,450 450,600 600,990 1050,1500 1530,2100
the I node for eso.

1184
00:36:55,490 --> 00:36:56,450
0,360 360,510 510,600 600,900 900,960
We have to modify the

1185
00:36:56,450 --> 00:36:57,440
0,150 150,300 300,540 540,780 780,990
an ode for f and

1186
00:36:57,440 --> 00:36:58,370
0,120 120,240 240,450 450,540 540,930
I know for the directory

1187
00:36:58,370 --> 00:36:59,570
0,120 120,450 450,870 870,1110 1110,1200
that contains ep because we

1188
00:36:59,570 --> 00:37:01,130
0,180 180,450 480,870 870,960 960,1560
have to update the references

1189
00:37:01,340 --> 00:37:02,690
0,180 180,600 600,840 840,1050 1050,1350
and so that means that

1190
00:37:02,690 --> 00:37:05,210
0,1170 1170,1230 1260,1830 1830,2220 2220,2520
a is like technically speaking

1191
00:37:05,210 --> 00:37:07,020
0,150 150,480 480,870 870,1530
we're actually holding two.

1192
00:37:07,260 --> 00:37:09,060
0,330 330,1020 1020,1470 1470,1620 1620,1800
Um locks, and we have

1193
00:37:09,060 --> 00:37:10,020
0,120 120,450 450,660 660,780 780,960
to release both of them

1194
00:37:10,020 --> 00:37:11,010
0,270 270,390 390,750 750,900 900,990
before we reply back to

1195
00:37:11,010 --> 00:37:15,390
0,180 1170,3840 3840,4020 4020,4170 4170,4380
the zen about this read

1196
00:37:15,390 --> 00:37:16,230
0,60 60,300 300,390 390,540 540,840
the paper and then really

1197
00:37:16,230 --> 00:37:17,310
0,180 180,360 360,540 540,870 870,1080
talk about this issue, but

1198
00:37:17,310 --> 00:37:18,540
0,450 450,630 630,840 840,900 900,1230
basically they sort of have.

1199
00:37:19,210 --> 00:37:20,770
0,480 480,960 960,1110 1110,1380 1380,1560
Not very of course great

1200
00:37:20,770 --> 00:37:22,270
0,330 330,480 480,660 660,990 990,1500
blocks, but also very fine-grained

1201
00:37:22,270 --> 00:37:24,070
0,600 600,900 900,1350 1350,1470 1470,1800
block garage blocks, they basically

1202
00:37:24,070 --> 00:37:26,140
0,150 150,180 180,1440 1440,1590 1590,2070
have a locker I note

1203
00:37:26,440 --> 00:37:27,490
0,360 360,450 450,600 600,690 690,1050
and you know the directors

1204
00:37:27,490 --> 00:37:28,450
0,120 120,240 240,540 540,870 870,960
and I note files, and

1205
00:37:28,450 --> 00:37:30,070
0,150 150,600 870,1350 1350,1560 1560,1620
I note a and in

1206
00:37:30,070 --> 00:37:30,940
0,210 210,270 270,570 570,630 630,870
fact the director is nothing

1207
00:37:30,940 --> 00:37:32,170
0,210 210,300 300,390 390,720 720,1230
else than a file with

1208
00:37:32,380 --> 00:37:34,400
0,840 930,1080 1080,1770
specific a format.

1209
00:37:34,580 --> 00:37:36,290
0,630 810,1110 1110,1320 1320,1470 1470,1710
Format, um, and so we

1210
00:37:36,290 --> 00:37:37,910
0,300 300,600 600,990 990,1320 1320,1620
really create f we actually

1211
00:37:37,910 --> 00:37:39,920
0,210 210,360 360,930 1020,1500 1500,2010
have to allocate first allocate

1212
00:37:39,920 --> 00:37:41,600
0,60 60,540 750,1140 1170,1620 1620,1680
the walk were required to

1213
00:37:41,600 --> 00:37:42,920
0,270 270,360 360,420 420,810 810,1320
walk in the directory d

1214
00:37:43,160 --> 00:37:44,750
0,210 210,660 660,810 810,1080 1080,1590
and then you would allocate

1215
00:37:44,750 --> 00:37:46,070
0,270 270,600 600,990 990,1050 1050,1320
their or required to walk

1216
00:37:46,070 --> 00:37:48,800
0,390 390,1470 1530,1620 1620,2160 2190,2730
on a high note a

1217
00:37:48,920 --> 00:37:49,840
0,450 450,810
four f.

1218
00:37:49,950 --> 00:37:50,940
0,270 270,450 450,600 600,840 840,990
And so do hold to

1219
00:37:50,940 --> 00:37:51,740
0,540
watch.

1220
00:37:52,060 --> 00:37:53,860
0,390 390,540 540,1020 1050,1680 1680,1800
And as you probably have

1221
00:37:53,860 --> 00:37:55,300
0,420 420,480 480,870 870,1170 1170,1440
noticed you know of course

1222
00:37:55,300 --> 00:37:55,990
0,90 90,330 330,390 390,510 510,690
you soon as you have

1223
00:37:55,990 --> 00:37:57,340
0,150 150,480 480,810 810,1110 1110,1350
to acquire multiple locks there's

1224
00:37:57,340 --> 00:37:59,650
0,390 750,1350 1350,1650 1650,1740 1740,2310
a potential risk of deadlock,

1225
00:37:59,650 --> 00:38:02,260
0,360 360,690 690,930 930,1440 1920,2610
if one board station allocates

1226
00:38:02,260 --> 00:38:03,580
0,270 270,360 360,420 420,720 720,1320
locks in a different order,

1227
00:38:03,580 --> 00:38:04,720
0,90 90,180 180,330 330,540 540,1140
you can add a deadlock,

1228
00:38:04,990 --> 00:38:06,940
0,390 390,690 690,1080 1080,1380 1380,1950
so from Japan follows rules

1229
00:38:06,940 --> 00:38:08,620
0,90 90,540 540,810 810,1260 1260,1680
that visibly all watcher audit

1230
00:38:08,620 --> 00:38:09,940
0,150 150,210 210,570 570,1050 1140,1320
in a particular way be

1231
00:38:09,940 --> 00:38:11,920
0,540 540,600 600,930 930,1710 1710,1980
required to watch a fixed

1232
00:38:11,920 --> 00:38:12,420
0,360
order.

1233
00:38:14,370 --> 00:38:15,510
0,150 150,270 270,450 450,630 900,1140
I say thank you I

1234
00:38:15,510 --> 00:38:16,590
0,150 150,210 210,450 450,810 810,1080
think the blocks awarded by

1235
00:38:16,590 --> 00:38:17,940
0,300 300,570 570,720 720,870 870,1350
walk number I know number.

1236
00:38:21,480 --> 00:38:22,620
0,210 210,330 330,480 480,870
So it makes sense.

1237
00:38:23,840 --> 00:38:24,620
0,180 180,300 300,480 480,540 540,780
Yeah, so there's a bunch

1238
00:38:24,620 --> 00:38:25,900
0,210 210,660 660,960
more complexity there.

1239
00:38:29,180 --> 00:38:31,020
0,480 510,900 930,1500
Okay, so the.

1240
00:38:31,660 --> 00:38:33,670
0,120 120,240 240,840 1110,1500 1500,2010
You know, so having discussed

1241
00:38:33,670 --> 00:38:34,900
0,300 300,450 450,660 660,1170 1170,1230
data and other ethnicity of

1242
00:38:34,900 --> 00:38:36,400
0,240 240,480 480,1020 1020,1080 1080,1500
file system operations at least

1243
00:38:36,400 --> 00:38:38,350
0,330 330,870 1260,1410 1410,1710 1710,1950
during crashes, you know if

1244
00:38:38,350 --> 00:38:39,670
0,150 150,300 300,840 990,1200 1200,1320
there's no crashes no at

1245
00:38:39,670 --> 00:38:40,960
0,180 180,330 330,870 870,990 990,1290
least it's guaranteed that these

1246
00:38:40,960 --> 00:38:43,570
0,630 630,1440 1440,1800 1800,2340 2340,2610
um operations happen automatically because

1247
00:38:43,570 --> 00:38:45,310
0,90 90,510 510,1140 1140,1470 1470,1740
the wax ensure automate it,

1248
00:38:45,760 --> 00:38:47,080
0,150 150,690 750,990 990,1230 1230,1320
of course it could be

1249
00:38:47,080 --> 00:38:48,190
0,90 90,480 480,720 720,900 900,1110
the case that like we're

1250
00:38:48,190 --> 00:38:50,530
0,660 690,1020 1020,1230 1230,1620 2040,2340
unlucky right and so um

1251
00:38:50,530 --> 00:38:52,780
0,150 150,780 780,1110 1110,1650 1650,2250
the workstation, one crashes right

1252
00:38:52,780 --> 00:38:53,530
0,150 150,210 210,480 480,570 570,750
in the middle of these

1253
00:38:53,530 --> 00:38:55,360
0,570 570,660 660,1050 1050,1260 1260,1830
operations, for example as allocated

1254
00:38:55,360 --> 00:38:56,980
0,720 720,840 840,990 990,1380 1500,1620
allocated the I note it

1255
00:38:56,980 --> 00:38:58,000
0,210 210,330 330,540 540,930 930,1020
actually has not updated the

1256
00:38:58,000 --> 00:38:58,780
0,420 420,720
directory yet.

1257
00:38:59,540 --> 00:39:01,520
0,420 630,1320 1440,1800 1800,1890 1890,1980
And, um, let's say the

1258
00:39:01,520 --> 00:39:02,840
0,270 270,600 600,960
crash happens here.

1259
00:39:04,270 --> 00:39:05,900
0,420 420,510 510,690 690,1320
Um, you know and.

1260
00:39:06,160 --> 00:39:06,910
0,150 150,210 210,390 390,450 450,750
If we don't do anything

1261
00:39:06,910 --> 00:39:08,110
0,450 450,690 690,930 930,1080 1080,1200
special like what about us,

1262
00:39:08,110 --> 00:39:09,130
0,60 60,570 570,690 690,810 810,1020
the concern that we might

1263
00:39:09,130 --> 00:39:09,920
0,450
have.

1264
00:39:17,100 --> 00:39:18,870
0,240 240,390 390,600 600,1080 1290,1770
Okay, let me a concern,

1265
00:39:18,870 --> 00:39:20,010
0,120 120,330 330,660 690,960 960,1140
we might have you know

1266
00:39:20,010 --> 00:39:21,720
0,210 210,810 810,960 960,1500 1500,1710
some files, this operation next

1267
00:39:21,720 --> 00:39:23,070
0,180 180,390 390,930 930,1230 1230,1350
is only partially apply to

1268
00:39:23,070 --> 00:39:23,840
0,450
pedal.

1269
00:39:24,220 --> 00:39:25,750
0,600 600,1110 1110,1230 1230,1380 1380,1530
Um, and you know that

1270
00:39:25,750 --> 00:39:27,070
0,270 270,390 390,960 1020,1200 1200,1320
becomes more clear if we

1271
00:39:27,070 --> 00:39:29,110
0,240 240,450 450,930 960,1380 1410,2040
actually think about the scenario

1272
00:39:29,110 --> 00:39:30,340
0,270 270,510 510,930 930,1020 1020,1230
what actually happens in this

1273
00:39:30,340 --> 00:39:32,890
0,360 360,840 840,1050 1050,1830 2070,2550
particular state like when the

1274
00:39:32,920 --> 00:39:34,540
0,690 720,840 840,930 930,1350 1350,1620
state of the cast actually

1275
00:39:34,540 --> 00:39:36,400
0,630 780,1170 1170,1620
flushed to pedal.

1276
00:39:36,650 --> 00:39:37,430
0,270 270,390 390,570 570,660 660,780
And so this is the

1277
00:39:37,430 --> 00:39:38,960
0,330 330,390 390,690 690,1230
topic of crash recovery.

1278
00:39:50,240 --> 00:39:51,170
0,120 120,360 360,540 540,690 690,930
It turns out that actually

1279
00:39:51,170 --> 00:39:53,720
0,330 330,420 420,780 780,1260 1290,2550
updating the state in a

1280
00:39:54,140 --> 00:39:56,780
0,930 930,1380 1380,1980 2010,2310 2310,2640
dating Justin pedal also follows

1281
00:39:56,780 --> 00:39:59,120
0,330 330,540 540,930 930,1500 1950,2340
actually pretty careful protocol, and

1282
00:39:59,120 --> 00:40:00,950
0,180 180,600 600,810 810,1290 1290,1830
this protocol, some size typically

1283
00:40:00,950 --> 00:40:02,440
0,240 240,450 450,600 600,1020
called {re-head -} logging.

1284
00:40:21,570 --> 00:40:22,320
0,210 210,360 360,480 480,660 660,750
And this is a you

1285
00:40:22,320 --> 00:40:23,190
0,90 90,420 420,510 510,750 750,870
know probably the term we've

1286
00:40:23,190 --> 00:40:24,840
0,270 270,840 840,1230 1230,1470 1470,1650
already seen a and you've

1287
00:40:24,840 --> 00:40:27,120
0,270 270,630 630,1590 1830,2250 2250,2280
seen probably 63 a um,

1288
00:40:27,120 --> 00:40:28,500
0,600 600,900 900,1020 1020,1110 1110,1380
and, um, you know pedal

1289
00:40:28,500 --> 00:40:29,730
0,390 390,630 630,750 750,930 930,1230
user two is a very

1290
00:40:29,730 --> 00:40:31,020
0,300 300,840 870,990 990,1170 1170,1290
common technique, and it will

1291
00:40:31,020 --> 00:40:32,310
0,240 240,450 450,570 570,870 870,1290
also play a big important

1292
00:40:32,310 --> 00:40:34,260
0,330 330,870 990,1530 1530,1830 1830,1950
role in subsequent papers that

1293
00:40:34,260 --> 00:40:36,030
0,120 120,450 660,870 870,1260 1320,1770
will see and so a

1294
00:40:36,030 --> 00:40:37,020
0,270 270,330 330,570 570,600 600,990
panel is actually a nice

1295
00:40:37,020 --> 00:40:39,330
0,870 870,1260 1260,1590 1680,1920 1920,2310
reintroduction to um this idea

1296
00:40:39,330 --> 00:40:41,490
0,210 210,720 750,1020 1020,1410 1980,2160
of a writing blogging and

1297
00:40:41,490 --> 00:40:42,240
0,60 60,300 300,420 420,540 540,750
a way to think about

1298
00:40:42,240 --> 00:40:45,210
0,300 300,540 540,630 630,1110 2250,2970
right, yeah I'm gonna pedals

1299
00:40:45,210 --> 00:40:46,110
0,360 360,420 420,630 630,690 690,900
designed to write a letter

1300
00:40:46,110 --> 00:40:47,790
0,480 630,1170 1170,1290 1290,1500 1500,1680
hogging use of right ahead,

1301
00:40:47,790 --> 00:40:49,200
0,270 270,390 390,600 600,1050 1050,1410
log is very similar to

1302
00:40:49,200 --> 00:40:50,340
0,300 300,480 480,660 660,870 870,1140
any other right ahead logging

1303
00:40:50,340 --> 00:40:51,930
0,450 780,930 930,1290 1410,1500 1500,1590
scheme and so you know

1304
00:40:51,930 --> 00:40:52,560
0,90 90,210 210,300 300,420 420,630
the way to think about

1305
00:40:52,560 --> 00:40:53,700
0,90 90,240 240,870 870,960 960,1140
it as follows, you know

1306
00:40:53,700 --> 00:40:55,260
0,120 120,360 360,570 570,1050 1080,1560
we have our disk virtual

1307
00:40:55,260 --> 00:40:55,680
0,360
disk.

1308
00:40:56,390 --> 00:40:57,320
0,120 120,300 300,480 480,660 660,930
I mean, just think about

1309
00:40:57,320 --> 00:40:59,510
0,270 270,480 480,660 660,930 1500,2190
this as like a long

1310
00:40:59,510 --> 00:41:01,310
0,330 390,780 780,1050 1050,1140 1140,1800
general long array of blocks.

1311
00:41:01,900 --> 00:41:03,670
0,480 480,960 960,1230 1230,1500 1500,1770
And what they've done is

1312
00:41:03,670 --> 00:41:05,320
0,300 300,390 390,900 990,1500 1500,1650
part of the disc is

1313
00:41:05,320 --> 00:41:08,260
0,780 780,900 900,960 960,1530 2820,2940
reserved as a law in

1314
00:41:08,260 --> 00:41:09,370
0,330 330,630 630,810 810,1050 1050,1110
fact in the case of

1315
00:41:09,370 --> 00:41:10,600
0,510 540,720 720,750 750,1080 1080,1230
pedal there's a lot per

1316
00:41:10,600 --> 00:41:12,220
0,510 540,750 750,960 960,1290 1290,1620
server but let's for now

1317
00:41:12,220 --> 00:41:13,480
0,270 270,510 510,870 870,1110 1110,1260
let's just assume there's like

1318
00:41:13,480 --> 00:41:15,070
0,210 210,480 480,960 1290,1470 1470,1590
one single log and then

1319
00:41:15,070 --> 00:41:16,280
0,150 150,240 240,480 480,960
there's the file system.

1320
00:41:17,060 --> 00:41:18,200
0,420 420,750 750,960 960,1050 1050,1140
So there's part of the

1321
00:41:18,200 --> 00:41:19,970
0,300 300,570 570,1020 1020,1170 1170,1770
disc is reserved for logging

1322
00:41:19,970 --> 00:41:20,720
0,150 150,330 330,390 390,480 480,750
or part of the disc

1323
00:41:20,720 --> 00:41:21,800
0,150 150,360 360,660 660,990 990,1080
is the file system and

1324
00:41:21,800 --> 00:41:23,090
0,90 90,330 330,600 600,960 960,1290
the file system contains five

1325
00:41:23,090 --> 00:41:24,260
0,600
notes.

1326
00:41:24,560 --> 00:41:25,670
0,120 120,510 510,720 720,870 870,1110
You know, and some data

1327
00:41:25,670 --> 00:41:27,640
0,630 630,960 960,1620
block, etc, etc.

1328
00:41:28,120 --> 00:41:29,920
0,570 690,900 900,1200 1200,1380 1380,1800
And the rule is that

1329
00:41:30,130 --> 00:41:32,020
0,690 720,990 990,1530 1530,1620 1620,1890
when you update the state

1330
00:41:32,020 --> 00:41:32,980
0,120 120,660
and pedal.

1331
00:41:33,160 --> 00:41:34,360
0,240 240,510 510,660 660,750 750,1200
The first thing you do

1332
00:41:34,450 --> 00:41:36,940
0,150 150,420 420,870 1200,1740 1740,2490
is actually your first log

1333
00:41:36,940 --> 00:41:37,600
0,360
date.

1334
00:41:43,840 --> 00:41:45,190
0,210 210,690 720,1140 1140,1260 1260,1350
So when a if we

1335
00:41:45,190 --> 00:41:46,270
0,90 90,300 300,600 600,720 720,1080
go back to the previous

1336
00:41:46,270 --> 00:41:49,030
0,630 750,1620 1620,2130 2130,2250 2250,2760
picture, and after the point

1337
00:41:49,030 --> 00:41:51,020
0,120 120,120
that um.

1338
00:41:51,580 --> 00:41:53,620
0,660 660,750 750,1230 1230,1740 1950,2040
Frangipani on workstation one I

1339
00:41:53,620 --> 00:41:54,610
0,300 300,390 390,570 570,900 900,990
wanted to give back the

1340
00:41:54,610 --> 00:41:55,930
0,420 420,570 570,750 750,870 870,1320
walk you to the lecturer

1341
00:41:55,930 --> 00:41:57,460
0,180 180,780 780,960 960,1230 1230,1530
it first has to write

1342
00:41:57,460 --> 00:41:58,600
0,150 150,630 630,720 720,870 870,1140
its state you know to

1343
00:41:58,600 --> 00:41:59,650
0,420 420,540 540,720 720,960 960,1050
pedal and that goes in

1344
00:41:59,650 --> 00:42:01,390
0,150 150,720 930,1170 1170,1440 1440,1740
two steps, the first step

1345
00:42:01,390 --> 00:42:03,910
0,330 390,900 900,1440 1440,2430 2430,2520
is walk the update the

1346
00:42:03,910 --> 00:42:05,170
0,540 540,630 630,720 720,1200 1200,1260
description of the update, you

1347
00:42:05,170 --> 00:42:07,120
0,120 120,780 780,1020 1050,1680 1800,1950
know to a log to

1348
00:42:07,120 --> 00:42:08,890
0,330 330,810 810,900 900,1170 1170,1770
block persons a year example

1349
00:42:09,070 --> 00:42:10,540
0,330 330,510 510,570 570,1110
we'll get a record.

1350
00:42:10,910 --> 00:42:12,980
0,480 480,1050 1050,1140 1140,1320 1320,2070
That's absolutely, you know create

1351
00:42:13,010 --> 00:42:15,200
0,540 540,1230 1230,1380 1380,1710 1710,2190
basic describes the create operation

1352
00:42:15,200 --> 00:42:16,970
0,360 360,540 540,750 750,1230 1590,1770
so that will have you

1353
00:42:16,970 --> 00:42:18,620
0,120 120,450 450,900 900,1140 1140,1650
know whatever allocate an oat.

1354
00:42:19,690 --> 00:42:21,130
0,150 150,330 330,810 810,1200 1200,1440
I know number whatever new

1355
00:42:21,130 --> 00:42:22,420
0,510 510,630 630,1050 1050,1170 1170,1290
basically the result that would

1356
00:42:22,420 --> 00:42:23,560
0,90 90,450 450,570 570,660 660,1140
have happened if you allocated

1357
00:42:23,560 --> 00:42:26,260
0,420 420,900 900,1440 1470,2040 2040,2700
an omer and directory changed.

1358
00:42:30,900 --> 00:42:31,650
0,270 270,420 420,540 540,600 600,750
It will be a little

1359
00:42:31,650 --> 00:42:32,370
0,120 120,240 240,600 600,660 660,720
bit more specific in a

1360
00:42:32,370 --> 00:42:33,240
0,270 270,450 450,630 630,750 750,870
second but that's sort of

1361
00:42:33,240 --> 00:42:35,490
0,510 660,840 840,1260 1260,2010 2040,2250
the the update contains the

1362
00:42:35,490 --> 00:42:36,720
0,300 300,660 660,900 900,1020 1020,1230
model cases need to be

1363
00:42:36,780 --> 00:42:38,340
0,300 300,390 390,900 1020,1380 1380,1560
made to happen to the

1364
00:42:38,340 --> 00:42:40,710
0,270 270,540 540,1110 1170,1770 1770,2370
file system blocks eventually a

1365
00:42:40,740 --> 00:42:43,230
0,720 720,810 810,1320 1800,2010 2010,2490
reflect the change to first

1366
00:42:43,260 --> 00:42:45,270
0,540 540,600 600,840 840,1680 1710,2010
walk to the um, first

1367
00:42:45,270 --> 00:42:46,980
0,300 300,390 390,930 1170,1320 1320,1710
login to update and then

1368
00:42:46,980 --> 00:42:48,570
0,300 300,420 420,540 540,1500 1500,1590
once you have updated the

1369
00:42:48,570 --> 00:42:49,260
0,540
blog.

1370
00:42:49,610 --> 00:42:51,740
0,540 540,1260 1290,1380 1380,1680 1680,2130
Then, we the second operation

1371
00:42:51,740 --> 00:42:53,720
0,120 120,630 660,1080 1080,1680 1740,1980
of the client executes the

1372
00:42:53,720 --> 00:42:55,790
0,420 420,990 1020,1200 1200,1470 1470,2070
workstation executes is actually installing

1373
00:42:55,790 --> 00:42:57,620
0,90 90,600
the update.

1374
00:43:01,870 --> 00:43:02,960
0,780
I'm.

1375
00:43:03,370 --> 00:43:06,040
0,630 840,1380 1440,2040 2040,2040 2040,2670
And, {um's -} a reason

1376
00:43:06,160 --> 00:43:07,300
0,210 210,360 360,570 570,960 960,1140
you know for doing sort

1377
00:43:07,300 --> 00:43:09,070
0,60 60,210 210,810 930,1230 1230,1770
of two steps is that

1378
00:43:09,160 --> 00:43:11,080
0,210 210,330 330,990 1020,1590 1590,1920
you know once you've logged

1379
00:43:11,080 --> 00:43:13,450
0,150 150,300 300,960 1320,2070 2100,2370
all your changes, then a

1380
00:43:13,450 --> 00:43:14,920
0,150 150,540 540,990 990,1080 1080,1470
it's completely safe to update

1381
00:43:14,920 --> 00:43:15,940
0,60 60,360 360,660 660,900 900,1020
the data watch because they

1382
00:43:15,940 --> 00:43:17,830
0,600 600,750 750,930 930,1230 1230,1890
always will end up and

1383
00:43:18,100 --> 00:43:19,240
0,300 300,360 360,780 780,870 870,1140
update the fossils and workers

1384
00:43:19,240 --> 00:43:20,200
0,120 120,510 510,630 630,810 810,960
should always will end up

1385
00:43:20,200 --> 00:43:22,570
0,90 90,150 150,600 600,1110 1710,2370
in a consistent state a

1386
00:43:22,870 --> 00:43:24,010
0,510 510,720 720,870 870,990 990,1140
and the way to see

1387
00:43:24,010 --> 00:43:25,930
0,180 180,300 300,1020 1050,1320 1320,1920
this is basically let's assume

1388
00:43:25,930 --> 00:43:26,760
0,90 90,210 210,660
you know the.

1389
00:43:27,130 --> 00:43:28,720
0,390 390,960 960,1110 1110,1290 1290,1590
Coin workstation that was actually

1390
00:43:28,720 --> 00:43:30,400
0,390 390,540 540,720 720,1140 1140,1680
flushing it's day to peddle

1391
00:43:31,330 --> 00:43:33,160
0,600 600,1140 1140,1560
crashes right here.

1392
00:43:34,840 --> 00:43:35,900
0,750
AH.

1393
00:43:36,870 --> 00:43:37,920
0,150 150,300 300,780
Is that okay.

1394
00:43:43,900 --> 00:43:45,820
0,480 480,930 930,1260 1260,1740 1740,1920
Yes, because since everything is

1395
00:43:45,820 --> 00:43:47,950
0,450 450,990 1380,1710 1710,1950 1950,2130
locked, they a what was

1396
00:43:47,950 --> 00:43:50,890
0,90 90,420 420,660 900,1710 1740,2940
it called the demon recovery

1397
00:43:50,890 --> 00:43:53,770
0,690 900,2280 2280,2400 2400,2700 2700,2880
service yeah the demon just

1398
00:43:53,770 --> 00:43:55,930
0,570 600,780 780,1080 1080,1770 1890,2160
gonna go back to there's

1399
00:43:55,930 --> 00:43:56,800
0,150 150,270 270,330 330,660 660,870
gonna be a demon when

1400
00:43:56,800 --> 00:43:57,910
0,150 150,210 210,570 570,780 780,1110
there's a crash there's basically

1401
00:43:57,910 --> 00:43:59,170
0,420 420,690 690,810 810,960 960,1260
demon sees if there's anything

1402
00:43:59,170 --> 00:44:00,040
0,120 120,210 210,600 600,690 690,870
in the log, if there's

1403
00:44:00,040 --> 00:44:00,940
0,240 240,300 300,390 390,690 690,900
anything in the log just

1404
00:44:00,940 --> 00:44:02,170
0,480 480,570 570,660 660,930 930,1230
applies to the file system.

1405
00:44:03,830 --> 00:44:06,380
0,420 480,1980 1980,2250 2250,2400 2400,2550
And why actually do this

1406
00:44:06,380 --> 00:44:07,340
0,90 90,270 270,570 570,780 780,960
in the way, why not

1407
00:44:07,340 --> 00:44:08,750
0,180 180,450 450,900 900,1110 1110,1410
just write immediately or update

1408
00:44:08,750 --> 00:44:09,660
0,60 60,300 300,630
the file system.

1409
00:44:14,950 --> 00:44:16,060
0,390 390,480 480,660 660,1020 1020,1110
Because we can crash in

1410
00:44:16,060 --> 00:44:17,200
0,60 60,390 390,510 510,780 780,1140
the middle of that date

1411
00:44:17,200 --> 00:44:18,280
0,90 90,180 180,390 390,810 900,1080
and we don't know what

1412
00:44:18,280 --> 00:44:20,110
0,150 150,420 420,690 690,1290 1320,1830
we've done, we can't yeah

1413
00:44:20,110 --> 00:44:21,940
0,450 450,690 690,900 900,1530 1530,1830
exactly correct, so we're serving,

1414
00:44:21,940 --> 00:44:23,290
0,180 180,270 270,600 600,1260 1260,1350
there's our previous example, you

1415
00:44:23,290 --> 00:44:25,960
0,360 1050,1590 1590,1800 1800,2190 2190,2670
know allocating I notice Julie

1416
00:44:25,960 --> 00:44:26,740
0,60 60,210 210,300 300,540 540,780
you know to making some

1417
00:44:26,740 --> 00:44:28,690
0,300 300,900 1110,1410 1410,1680 1680,1950
change somewhere like onto an

1418
00:44:28,690 --> 00:44:30,700
0,180 180,630 1020,1470 1470,1710 1710,2010
eight block and actually adding

1419
00:44:30,700 --> 00:44:33,280
0,90 90,810 810,1530 1740,2340 2340,2580
the directory to a or

1420
00:44:33,280 --> 00:44:34,720
0,300 300,390 390,750 750,1080 1080,1440
adding the file after a

1421
00:44:34,720 --> 00:44:36,850
0,300 300,720 870,1350 1350,1740 1740,2130
particular directory updates, directory block

1422
00:44:36,850 --> 00:44:38,710
0,240 240,510 510,1110 1470,1680 1680,1860
data block somewhere, so these

1423
00:44:38,710 --> 00:44:40,060
0,60 60,210 210,570 570,1080 1110,1350
are two separate rights right

1424
00:44:40,060 --> 00:44:41,140
0,90 90,420 420,870 870,960 960,1080
to separate disks and they're

1425
00:44:41,140 --> 00:44:42,280
0,210 210,630 630,840 840,990 990,1140
not atomic so we would

1426
00:44:42,280 --> 00:44:43,300
0,300 300,600 600,810 810,900 900,1020
crash between one of the

1427
00:44:43,300 --> 00:44:44,590
0,480 660,870 870,960 960,1170 1170,1290
two then we might have

1428
00:44:44,590 --> 00:44:45,700
0,480 480,570 570,720 720,990 990,1110
allocated the I node but

1429
00:44:45,700 --> 00:44:46,840
0,210 210,390 390,570 570,630 630,1140
not stuck in the directory.

1430
00:44:47,540 --> 00:44:49,550
0,300 300,630 630,1290 1290,1560 1560,2010
Then basically what will happen

1431
00:44:49,550 --> 00:44:50,930
0,120 120,360 360,690 690,780 780,1380
if we crash and recover

1432
00:44:50,960 --> 00:44:52,340
0,450 450,690 690,810 810,930 930,1380
basically lose the eye note

1433
00:44:52,970 --> 00:44:54,170
0,450 450,720 720,840 840,1140 1140,1200
unless we could scan the

1434
00:44:54,170 --> 00:44:55,160
0,180 180,450 450,570 570,780 780,990
whole this but that's very

1435
00:44:55,160 --> 00:44:55,980
0,600
expensive.

1436
00:44:57,380 --> 00:44:58,220
0,120 120,330 330,450 450,720 720,840
And so they said what

1437
00:44:58,220 --> 00:44:59,540
0,120 120,540 540,780 780,960 960,1320
we're doing is we're basically

1438
00:44:59,540 --> 00:45:01,340
0,420 420,510 510,780 780,1290 1290,1800
logging the two changes first

1439
00:45:01,340 --> 00:45:04,100
0,1080 1110,1560 1560,2010 2010,2490 2490,2760
we're logging records describing both

1440
00:45:04,100 --> 00:45:06,680
0,480 480,960 1320,1560 1560,2070 2100,2580
changes first and then apply

1441
00:45:06,680 --> 00:45:07,520
0,90 90,660
the changes.

1442
00:45:08,800 --> 00:45:09,430
0,180 180,330 330,480 480,570 570,630
Um, so how do we

1443
00:45:09,430 --> 00:45:10,960
0,240 240,330 330,960 960,1050 1050,1530
ensure the operation is atomic,

1444
00:45:11,080 --> 00:45:12,070
0,270 270,420 420,720 720,900 900,990
so the first log to

1445
00:45:12,070 --> 00:45:12,780
0,390
update.

1446
00:45:13,140 --> 00:45:14,520
0,120 120,300 300,510 510,960 1110,1380
The first blog update yeah

1447
00:45:14,520 --> 00:45:16,560
0,150 150,600 660,930 930,1380 1590,2040
that's interesting, so the paper

1448
00:45:16,560 --> 00:45:18,120
0,270 270,360 360,630 630,1200 1200,1560
cutting a hundred percent correspond

1449
00:45:18,120 --> 00:45:19,290
0,180 180,420 600,900 900,930 930,1170
this but there's a couple

1450
00:45:19,290 --> 00:45:21,030
0,150 150,210 210,450 450,690 960,1740
ways of doing {it's -}

1451
00:45:21,030 --> 00:45:22,890
0,240 240,660 660,1260 1260,1860 1860,1860
a mention that every a

1452
00:45:23,910 --> 00:45:25,560
0,420 420,660 660,990 990,1260 1260,1650
log record has a check.

1453
00:45:26,380 --> 00:45:28,750
0,690 690,1290 1290,1470 1470,1620 1620,2370
And, um, so they used

1454
00:45:28,750 --> 00:45:29,800
0,390 390,510 510,750 750,870 870,1050
checking to see if there's

1455
00:45:29,800 --> 00:45:32,110
0,570 750,1350 1530,1680 1680,1950 1950,2310
actually before the reader log

1456
00:45:32,110 --> 00:45:33,490
0,300 300,570 570,810 810,1080 1080,1380
record, they read log record,

1457
00:45:33,490 --> 00:45:34,840
0,120 120,390 390,450 450,990 1080,1350
we compute a checksum just

1458
00:45:34,840 --> 00:45:35,440
0,60 60,210 210,390 390,540 540,600
to make sure that the

1459
00:45:35,440 --> 00:45:36,840
0,270 270,540 540,630 630,1140
whole record is complete.

1460
00:45:38,620 --> 00:45:40,030
0,210 210,420 480,690 690,840 900,1410
I say thank you another

1461
00:45:40,030 --> 00:45:40,720
0,120 120,210 210,420 420,540 540,690
way of doing it, which

1462
00:45:40,720 --> 00:45:41,440
0,120 120,240 240,510 510,660 660,720
is a couple way of

1463
00:45:41,440 --> 00:45:42,370
0,180 180,270 270,390 390,540 540,930
doing it as you write,

1464
00:45:42,370 --> 00:45:43,510
0,90 90,180 180,180 180,480 480,1140
you know a couple blocks

1465
00:45:43,750 --> 00:45:44,800
0,270 270,450 450,840 840,960 960,1050
like one two and then

1466
00:45:44,800 --> 00:45:45,820
0,120 120,270 270,300 300,600 600,1020
you write a commit record.

1467
00:45:46,620 --> 00:45:48,300
0,690 690,780 780,1230 1230,1380 1380,1680
And the assumption is that

1468
00:45:48,300 --> 00:45:49,650
0,210 210,300 300,720 720,1200 1230,1350
running a single block a

1469
00:45:49,650 --> 00:45:51,720
0,300 300,1410 1410,1860 1860,1980 1980,2070
single 512 sector is an

1470
00:45:51,720 --> 00:45:53,430
0,390 390,900 900,1110 1110,1410 1410,1710
atomic operation so either happens

1471
00:45:53,430 --> 00:45:54,720
0,60 60,120 120,360 360,690 1080,1290
or it doesn't happen so

1472
00:45:54,720 --> 00:45:55,560
0,60 60,150 150,270 270,510 510,840
you need to commit {records's

1473
00:45:55,560 --> 00:45:57,180
0,390 420,750 750,840 840,1320 1410,1620
-} rights are done where

1474
00:45:57,180 --> 00:45:58,770
0,210 210,270 270,450 450,780 1170,1590
rights are not done and

1475
00:45:58,770 --> 00:45:59,400
0,120 120,240 240,330 330,510 510,630
so you can just look

1476
00:45:59,400 --> 00:46:00,420
0,60 60,120 120,390 390,750 750,1020
at the commit record, and

1477
00:46:00,420 --> 00:46:02,100
0,120 120,210 210,450 450,870 870,1680
if the commit records is

1478
00:46:02,100 --> 00:46:03,930
0,390 390,900 930,1110 1110,1200 1200,1830
not there, then you know

1479
00:46:03,930 --> 00:46:05,970
0,510 540,1080 1080,1200 1200,1650 1650,2040
the operation is not completely

1480
00:46:05,970 --> 00:46:07,350
0,390 390,720 870,1050 1050,1110 1110,1380
recorded yet and you shouldn't

1481
00:46:07,350 --> 00:46:08,360
0,330 330,540 540,660 660,870
execute any of it.

1482
00:46:10,000 --> 00:46:11,470
0,150 150,420 510,810 810,1230 1230,1470
I see, and also to

1483
00:46:11,470 --> 00:46:13,630
0,690 690,750 750,870 870,1380 1380,2160
double-check on the previous slide,

1484
00:46:13,630 --> 00:46:15,370
0,210 210,390 390,780 780,1230 1230,1740
if the crash happens before

1485
00:46:15,370 --> 00:46:17,680
0,360 480,900 900,1260 1260,1710 1830,2310
we flush things to pedal,

1486
00:46:17,980 --> 00:46:18,850
0,360 360,540 540,630 630,780 780,870
then this is not a

1487
00:46:18,850 --> 00:46:20,830
0,390 390,600 600,1080 1080,1890 1890,1980
problem right because if the

1488
00:46:20,830 --> 00:46:22,390
0,480 480,960 960,1170 1170,1260 1260,1560
workstation crashes well the cash

1489
00:46:22,390 --> 00:46:23,590
0,240 240,360 360,420 420,1020 1020,1200
goes with the workstation but

1490
00:46:23,590 --> 00:46:25,030
0,300 300,450 450,1080 1080,1320 1320,1440
there's no ecosystem state for

1491
00:46:25,030 --> 00:46:27,400
0,120 120,330 330,840 1080,1650 2040,2370
any other workstation describe data

1492
00:46:27,400 --> 00:46:30,280
0,90 90,180 180,660 1350,2490 2550,2880
would be lost if it's

1493
00:46:30,280 --> 00:46:31,390
0,270 270,450 450,540 540,690 690,1110
not written to the battles

1494
00:46:31,390 --> 00:46:33,250
0,270 270,360 360,480 480,1470 1470,1860
won't be any visibility problem.

1495
00:46:33,670 --> 00:46:34,600
0,180 180,300 300,750 750,840 840,930
So it's really you know

1496
00:46:34,600 --> 00:46:36,580
0,90 90,630 840,1170 1170,1590 1590,1980
the crash crash here, Greg.

1497
00:46:37,480 --> 00:46:38,710
0,150 150,360 360,540 540,720 720,1230
Now, one doesn't really matter

1498
00:46:38,740 --> 00:46:40,030
0,90 90,270 270,810 960,1140 1140,1290
in some ways the one

1499
00:46:40,030 --> 00:46:40,960
0,90 90,360 360,690 690,810 810,930
that actually matters is the

1500
00:46:40,960 --> 00:46:42,790
0,360 360,780 780,960 960,1260 1260,1830
crash during this flush operation.

1501
00:46:43,790 --> 00:46:45,260
0,690 780,990 990,1170
Mhm, thank you.

1502
00:46:51,140 --> 00:46:52,940
0,450 480,930 1020,1590 1590,1680 1680,1800
Okay, so um, you know

1503
00:46:52,940 --> 00:46:54,920
0,210 210,540 540,1320 1380,1620 1620,1980
there's one subtly, um in

1504
00:46:54,920 --> 00:46:56,240
0,240 240,300 300,720 720,930 930,1320
France a pony which will

1505
00:46:56,240 --> 00:46:57,140
0,210 210,450 450,540 540,600 600,900
talk about in a second

1506
00:46:57,140 --> 00:46:58,610
0,30 30,180 180,300 300,450 480,1470
a little bit more detail

1507
00:46:58,610 --> 00:47:00,620
0,480 480,840 930,1320 1320,1740 1740,2010
namely that influence pony there's

1508
00:47:00,620 --> 00:47:01,220
0,300
a.

1509
00:47:03,320 --> 00:47:04,740
0,270 270,990
A lock.

1510
00:47:05,030 --> 00:47:06,380
0,480 480,1050
Poor sugar.

1511
00:47:07,300 --> 00:47:09,100
0,240 240,390 390,480 480,1230
That's sort of unusual.

1512
00:47:09,410 --> 00:47:10,730
0,660 660,900 900,1050 1050,1260 1260,1320
And, um, we'll see in

1513
00:47:10,730 --> 00:47:11,930
0,30 30,510 540,720 720,930 930,1200
a second you know how

1514
00:47:11,930 --> 00:47:13,400
0,360 390,900 900,990 990,1230 1230,1470
the one that actually creates

1515
00:47:13,400 --> 00:47:15,650
0,120 120,780 810,1440 1740,2040 2040,2250
some problems, um, and so

1516
00:47:15,650 --> 00:47:17,900
0,780 780,960 960,1710 1710,1770 1770,2250
we'll see, there's a small

1517
00:47:17,900 --> 00:47:19,160
0,510 510,600 600,690 690,1140 1140,1260
extension to the protocol to

1518
00:47:19,160 --> 00:47:20,210
0,360 360,600 600,780 780,900 900,1050
actually, um make this all

1519
00:47:20,210 --> 00:47:20,960
0,240 240,480
work out.

1520
00:47:22,600 --> 00:47:24,190
0,390 420,720 720,1230 1260,1500 1500,1590
Okay, let me say a

1521
00:47:24,190 --> 00:47:25,360
0,180 180,330 330,570 570,960 960,1170
little bit about legacy, what

1522
00:47:25,360 --> 00:47:26,050
0,120 120,240 240,420 420,480 480,690
is in one of those

1523
00:47:26,050 --> 00:47:27,160
0,300 300,840
log records.

1524
00:47:32,570 --> 00:47:33,230
0,120 120,330 330,480 480,540 540,660
It turns out to be

1525
00:47:33,230 --> 00:47:36,320
0,540 540,1200 1230,2100 2130,2730 2760,3090
important for um, the crash

1526
00:47:36,320 --> 00:47:39,350
0,630 900,1980 1980,2250 2250,2430 2430,3030
recovery particularly because we have

1527
00:47:39,410 --> 00:47:41,390
0,240 240,660 660,990 990,1560 1650,1980
from Chinese multiple logs per

1528
00:47:41,390 --> 00:47:42,140
0,510
server.

1529
00:47:43,000 --> 00:47:44,260
0,150 150,360 360,720 720,930 930,1260
So every blog has a.

1530
00:47:44,810 --> 00:47:46,940
0,480 750,1110 1110,1470 1470,2040 2040,2130
So you're log, basically you

1531
00:47:46,940 --> 00:47:48,170
0,150 150,360 360,720 720,870 870,1230
know their records in it,

1532
00:47:48,500 --> 00:47:49,580
0,270 270,390 390,600 600,660 660,1080
um, they have a sequence

1533
00:47:49,580 --> 00:47:50,420
0,540
number.

1534
00:47:51,060 --> 00:47:53,970
0,300 300,900 1470,1830 1830,2400 2430,2910
Yeah whatever number two one

1535
00:47:53,970 --> 00:47:55,770
0,570 930,1350 1350,1470 1470,1590 1590,1800
two and you know what

1536
00:47:55,770 --> 00:47:56,460
0,120 120,210 210,300 300,390 390,690
the end of the log

1537
00:47:56,460 --> 00:47:57,870
0,270 270,630 630,840 840,1080 1080,1410
is if the next sequence

1538
00:47:57,870 --> 00:47:58,950
0,270 270,390 390,570 570,810 810,1080
number is not high, one

1539
00:47:58,950 --> 00:48:00,620
0,420 420,810 900,1470
hired in Yorkshire.

1540
00:48:01,220 --> 00:48:02,390
0,420 420,600 600,900 900,1050 1050,1170
So there's another way they

1541
00:48:02,390 --> 00:48:04,220
0,330 330,420 420,750 990,1680 1680,1830
Mark it up basically in

1542
00:48:04,220 --> 00:48:06,680
0,210 210,300 300,750 990,1980 2160,2460
one of these records is

1543
00:48:06,680 --> 00:48:08,940
0,1080 1080,1200 1200,1830
array of updates.

1544
00:48:12,930 --> 00:48:14,520
0,390 390,990 990,1080 1080,1320 1320,1590
Not describe the file system

1545
00:48:14,520 --> 00:48:16,440
0,630 1020,1260 1260,1410 1410,1530 1530,1920
operation, and so it contains

1546
00:48:16,440 --> 00:48:17,600
0,90 90,390 390,870
the block murmur.

1547
00:48:18,120 --> 00:48:19,350
0,210 210,390 390,480 480,570 570,1230
That needs to be updated

1548
00:48:19,380 --> 00:48:20,460
0,210 210,570 570,660 660,810 810,1080
to example in our case

1549
00:48:20,460 --> 00:48:22,350
0,120 120,330 330,810 870,1380 1380,1890
that would usually be a

1550
00:48:22,740 --> 00:48:24,060
0,300 300,630 630,810 810,960 960,1320
um, the I know number,

1551
00:48:24,060 --> 00:48:25,110
0,90 90,330 330,510 510,900 900,1050
the block that contains the

1552
00:48:25,110 --> 00:48:26,190
0,90 90,480 480,840 840,990 990,1080
I notes that would be

1553
00:48:26,190 --> 00:48:28,700
0,660 900,1200 1200,1500 1500,2010
navigated a version number.

1554
00:48:29,010 --> 00:48:30,210
0,300 300,420 420,630 630,1020 1020,1200
Because in that record we've

1555
00:48:30,210 --> 00:48:31,740
0,210 210,720 930,1260 1260,1440 1440,1530
seen second why that is

1556
00:48:31,740 --> 00:48:33,330
0,600 750,900 900,1230 1230,1350 1350,1590
important and basically the new

1557
00:48:33,330 --> 00:48:35,910
0,630 1530,1710 1710,1830 1830,2130 2130,2580
bites for the block number.

1558
00:48:37,840 --> 00:48:38,950
0,240 240,510 510,750 750,1050 1050,1110
And so, for example in

1559
00:48:38,950 --> 00:48:40,150
0,60 60,300 300,390 390,930 930,1200
the case of creating a

1560
00:48:40,150 --> 00:48:42,490
0,540 540,960 960,1410 2040,2190 2190,2340
file creating f it's gonna

1561
00:48:42,490 --> 00:48:43,960
0,300 300,510 510,1200
be you too.

1562
00:48:44,190 --> 00:48:45,990
0,510 510,960 960,1050 1050,1200 1200,1800
Um entries in this array,

1563
00:48:46,260 --> 00:48:47,700
0,420 420,1080
two entries.

1564
00:48:49,140 --> 00:48:51,540
0,360 360,1170 1260,1740 1740,2220 2220,2400
One describing the update to

1565
00:48:51,540 --> 00:48:53,730
0,180 180,480 480,990 990,1320 1320,2190
the idle block one describing

1566
00:48:53,910 --> 00:48:56,190
0,210 210,630 630,840 840,1380 1620,2280
new update to the directory

1567
00:48:56,190 --> 00:48:57,120
0,300 300,360 360,600 600,840 840,930
block the data block of

1568
00:48:57,120 --> 00:48:58,000
0,90 90,600
the directory.

1569
00:48:58,500 --> 00:48:59,620
0,1020
God.

1570
00:49:05,140 --> 00:49:06,340
0,150 150,330 330,690 690,870 870,1200
And so basically what happens

1571
00:49:06,340 --> 00:49:07,690
0,180 180,810 810,990 990,1140 1140,1350
on replication just to like

1572
00:49:07,690 --> 00:49:10,270
0,330 870,1020 1020,1500 1500,2190 2190,2580
make this abundantly clear when

1573
00:49:10,270 --> 00:49:11,830
0,180 180,600 600,780 780,1290 1290,1560
a request to quote block

1574
00:49:11,830 --> 00:49:13,450
0,210 210,600 900,1020 1020,1140 1140,1620
comes in you know the

1575
00:49:13,780 --> 00:49:15,190
0,510 510,630 630,780 780,1230 1230,1410
first thing that happens is

1576
00:49:15,190 --> 00:49:16,680
0,420 420,510 510,1080
for the log.

1577
00:49:18,810 --> 00:49:20,360
0,390 390,960
To pedal.

1578
00:49:20,750 --> 00:49:22,400
0,300 300,480 480,570 570,1050 1230,1650
Once that is done, send

1579
00:49:22,400 --> 00:49:23,750
0,270 330,930 930,1050 1050,1260 1260,1350
the updates were sent the

1580
00:49:23,750 --> 00:49:25,400
0,660 750,900 900,1260 1260,1560 1560,1650
blocks, the updated blocks to

1581
00:49:25,400 --> 00:49:26,200
0,510
pedal.

1582
00:49:34,660 --> 00:49:36,190
0,210 210,690 690,1020 1020,1110 1110,1530
And then release the lock.

1583
00:49:41,790 --> 00:49:43,440
0,330 330,480 480,960 960,1380 1440,1650
And this ensures that you

1584
00:49:43,440 --> 00:49:44,400
0,90 90,330 330,570 570,810 810,960
know there's a couple things

1585
00:49:44,400 --> 00:49:45,450
0,120 120,180 180,360 360,870 870,1050
that we need to think

1586
00:49:45,450 --> 00:49:47,790
0,420 690,1770 1770,1830 1980,2190 2190,2340
about, um, if if there's

1587
00:49:47,790 --> 00:49:48,810
0,150 150,510 510,600 600,660 660,1020
no crashes in the middle

1588
00:49:48,810 --> 00:49:49,770
0,300 300,390 390,480 480,690 690,960
then you know this is

1589
00:49:49,770 --> 00:49:53,070
0,810 810,1170 1620,2040 2040,2670 2790,3300
always as previously described really

1590
00:49:53,070 --> 00:49:54,750
0,60 60,210 210,570 570,1230 1230,1680
you know interesting cases when

1591
00:49:54,750 --> 00:49:57,600
0,540 570,1080 1080,1740 1830,2550 2550,2850
a crash happens right after

1592
00:49:57,600 --> 00:49:58,920
0,330 330,420 420,690 690,780 780,1320
forcing the log to P

1593
00:49:59,040 --> 00:50:01,110
0,390 390,840 840,1320 1320,1680 1680,2070
A book before updating pedal.

1594
00:50:02,550 --> 00:50:03,240
0,150 150,300 300,450 450,480 480,690
So let's talk a little

1595
00:50:03,240 --> 00:50:04,320
0,120 120,330 330,750
bit about that.

1596
00:50:06,670 --> 00:50:07,540
0,390 390,540 540,630 630,690 690,870
Sorry, what do you mean

1597
00:50:07,540 --> 00:50:09,120
0,270 270,630 630,1350
by new bites.

1598
00:50:09,730 --> 00:50:11,320
0,420 420,780 840,1020 1020,1170 1170,1590
A good let me eat.

1599
00:50:13,070 --> 00:50:14,450
0,150 150,660 900,1110 1110,1260 1260,1380
Go back so weve been

1600
00:50:14,450 --> 00:50:16,310
0,120 120,750 750,1200 1200,1560 1560,1860
a mean changes to I

1601
00:50:16,310 --> 00:50:17,960
0,240 240,810 810,1020 1020,1530 1530,1650
know blocks of example the

1602
00:50:17,960 --> 00:50:20,300
0,150 150,330 330,870 1200,2190 2190,2340
I know block, um, you

1603
00:50:20,300 --> 00:50:21,980
0,120 120,660 660,1230 1230,1590 1590,1680
know maybe you're dating, you

1604
00:50:21,980 --> 00:50:22,940
0,210 210,600 600,780 780,870 870,960
know some part of the

1605
00:50:22,940 --> 00:50:23,840
0,120 120,330 330,510 510,630 630,900
I know then you serve

1606
00:50:23,840 --> 00:50:27,050
0,300 300,2130 2160,2550 2550,2760 2760,3210
right z bikes have changed

1607
00:50:27,050 --> 00:50:29,090
0,450 750,1320 1320,1680 1680,1800 1800,2040
like bytes zero to five

1608
00:50:29,090 --> 00:50:30,410
0,120 120,540 540,630 630,900 900,1320
and twelve the following value.

1609
00:50:30,740 --> 00:50:32,150
0,330 330,540 540,930 1020,1290 1290,1410
Or by future ten to

1610
00:50:32,150 --> 00:50:33,410
0,510 510,810 810,900 900,1080 1080,1260
twenty half of all new

1611
00:50:33,410 --> 00:50:34,180
0,450
value.

1612
00:50:36,200 --> 00:50:37,670
0,300 300,510 510,840 840,1290 1290,1470
But can those changes be

1613
00:50:37,670 --> 00:50:38,840
0,420 480,720 720,870 870,1080 1080,1170
like because each one of

1614
00:50:38,840 --> 00:50:40,160
0,300 300,780 780,930 930,1050 1050,1320
these blocks is at most

1615
00:50:40,160 --> 00:50:43,880
0,990 990,1350 1920,2670 2670,2820 2820,3720
512 bytes, but the modifications

1616
00:50:43,880 --> 00:50:44,510
0,120 120,240 240,420 420,510 510,630
that you make can be

1617
00:50:44,510 --> 00:50:47,030
0,300 300,570 570,1050 1050,1440 1650,2520
a lot larger than 512

1618
00:50:47,030 --> 00:50:48,650
0,720 810,1200 1200,1380 1380,1500 1500,1620
bytes, um, there's gonna be

1619
00:50:48,650 --> 00:50:50,330
0,90 90,360 360,480 480,900 900,1680
a record for every a

1620
00:50:50,330 --> 00:50:50,960
0,450
block.

1621
00:50:51,980 --> 00:50:52,970
0,360 360,480 480,750 750,900 900,990
So, in fact in the

1622
00:50:52,970 --> 00:50:54,320
0,270 270,420 420,630 630,870 870,1350
okay so a couple points.

1623
00:50:55,110 --> 00:50:56,780
0,570 600,840 840,930 930,1380
A first of all.

1624
00:50:57,000 --> 00:50:59,220
0,570 840,1530 1530,1830 1830,2100 2100,2220
A data rights actually are

1625
00:50:59,220 --> 00:51:00,420
0,300 300,510 510,690 690,810 810,1200
not going through the lock,

1626
00:51:00,450 --> 00:51:01,470
0,120 120,420 420,480 480,810 810,1020
so there's an important point,

1627
00:51:01,470 --> 00:51:02,250
0,120 120,360 360,420 420,690 690,780
so thank you, thank you

1628
00:51:02,250 --> 00:51:03,690
0,120 120,390 390,510 510,900 1230,1440
for asking that question, so

1629
00:51:03,690 --> 00:51:04,920
0,330 330,450 450,600 600,690 690,1230
when you write a file,

1630
00:51:05,190 --> 00:51:07,230
0,420 420,810 810,870 870,1410 1410,2040
um, in the application miracles

1631
00:51:07,230 --> 00:51:08,580
0,300 300,660 660,990 990,1200 1200,1350
right file f and a

1632
00:51:08,580 --> 00:51:10,020
0,150 150,330 330,420 420,870 1140,1440
whole bunch of data, all

1633
00:51:10,020 --> 00:51:11,340
0,240 240,480 480,720 720,900 900,1320
that data actually does not

1634
00:51:11,340 --> 00:51:12,460
0,180 180,390 390,480 480,930
go through the lock.

1635
00:51:12,670 --> 00:51:14,020
0,360 360,660 660,810 810,1020 1020,1350
Um that just goes straight

1636
00:51:14,020 --> 00:51:15,250
0,90 90,540 570,840 840,1080 1080,1230
to pedal like once you

1637
00:51:15,250 --> 00:51:17,440
0,630 660,1290 1320,1860
flush the state.

1638
00:51:17,680 --> 00:51:19,600
0,360 390,690 690,1260 1260,1800 1800,1920
A the only changes that

1639
00:51:19,600 --> 00:51:20,590
0,150 150,360 360,450 450,870 870,990
go through the log are

1640
00:51:20,590 --> 00:51:23,230
0,360 360,1110 1200,1920 1950,2160 2160,2640
mega update changes so meta

1641
00:51:23,260 --> 00:51:25,240
0,360 360,1050
data changes.

1642
00:51:26,100 --> 00:51:28,110
0,180 180,660 900,1530 1530,1860 1860,2010
And what metadata means is

1643
00:51:28,110 --> 00:51:30,160
0,330 330,780 780,1170 1170,1770
really information about files.

1644
00:51:30,640 --> 00:51:32,440
0,480 480,690 690,900 900,1290 1380,1800
So I know it's direct

1645
00:51:32,440 --> 00:51:33,700
0,480 510,720 720,870 870,930 930,1260
reach, that kind of stuff

1646
00:51:33,700 --> 00:51:35,020
0,210 210,450 450,660 660,780 780,1320
that actually goes through block.

1647
00:51:35,660 --> 00:51:38,330
0,360 360,780 1020,1830 1950,2160 2160,2670
And so a the description

1648
00:51:38,330 --> 00:51:39,500
0,150 150,270 270,540 540,660 660,1170
that you see in here

1649
00:51:39,500 --> 00:51:40,460
0,120 120,570 570,630 630,780 780,960
is really you know the

1650
00:51:40,460 --> 00:51:42,260
0,480 480,600 600,750 750,1260 1260,1800
updates through the metadata blocks

1651
00:51:42,290 --> 00:51:43,970
0,210 210,300 300,570 570,990 1320,1680
off the file system, so

1652
00:51:43,970 --> 00:51:46,280
0,180 180,780 960,1530 1530,1890 1890,2310
I note and directory data.

1653
00:51:48,300 --> 00:51:50,460
0,480 480,780 810,1500 1500,1740 1740,2160
And the application level data

1654
00:51:50,490 --> 00:51:52,020
0,660 660,780 780,1110 1110,1410 1410,1530
like the file blocks that

1655
00:51:52,020 --> 00:51:54,120
0,210 210,810 810,870 870,1380 1740,2100
actually constitute a file, and

1656
00:51:54,120 --> 00:51:55,650
0,330 330,690 690,1140 1140,1470 1470,1530
that actually those blocks are

1657
00:51:55,650 --> 00:51:56,910
0,180 180,390 390,840 840,930 930,1260
just written straight to pedal

1658
00:51:56,910 --> 00:51:57,600
0,120 120,300 300,480 480,660 660,690
and they'll go for a

1659
00:51:57,600 --> 00:51:58,300
0,480
walk.

1660
00:51:59,620 --> 00:52:01,270
0,180 180,270 270,630 630,780 780,1650
So it's interesting to contemplate

1661
00:52:01,270 --> 00:52:02,320
0,270 270,330 330,450 450,960 960,1050
what is the implications of

1662
00:52:02,320 --> 00:52:04,270
0,360 570,930 930,1080 1080,1440 1440,1950
that like that design choice.

1663
00:52:07,130 --> 00:52:08,630
0,240 240,360 360,1080 1110,1230 1230,1500
What's the downside of not

1664
00:52:08,630 --> 00:52:10,200
0,210 210,570 570,720 720,1290
running everything through dialogue.

1665
00:52:12,330 --> 00:52:13,220
0,630
First.

1666
00:52:17,130 --> 00:52:18,420
0,300 300,690 690,780 780,930 930,1290
The place is a day

1667
00:52:18,420 --> 00:52:20,120
0,150 150,360 360,450 450,1260
they can be lost.

1668
00:52:20,840 --> 00:52:22,360
0,270 270,570 570,870 870,1200
Very good last year.

1669
00:52:23,010 --> 00:52:24,360
0,210 210,420 420,600 600,840 870,1350
What other sort of scenarios

1670
00:52:24,360 --> 00:52:25,440
0,90 90,510 510,630 630,810 810,1080
are possible so let's say

1671
00:52:25,440 --> 00:52:27,030
0,120 120,300 300,960 990,1290 1290,1590
you know the file consists

1672
00:52:27,030 --> 00:52:29,130
0,90 90,300 300,900 1260,1950 1950,2100
of ten blocks, um, we're

1673
00:52:29,130 --> 00:52:30,780
0,510 510,840 870,1080 1080,1560 1560,1650
starting the ten blocks you

1674
00:52:30,780 --> 00:52:32,430
0,180 180,630 630,870 870,1350 1350,1650
know what's in what states

1675
00:52:32,430 --> 00:52:33,690
0,210 210,570 570,810 810,960 960,1260
can file actually end up.

1676
00:52:36,910 --> 00:52:39,490
0,420 420,1380 1740,2160 2160,2400 2400,2580
Being consistent, yeah well yeah

1677
00:52:39,490 --> 00:52:40,570
0,480 480,600 600,810 810,990 990,1080
inconsistent could have some of

1678
00:52:40,570 --> 00:52:41,440
0,90 90,480 480,660 660,780 780,870
the rights, none of the

1679
00:52:41,440 --> 00:52:42,820
0,390 390,600 600,750 750,1110 1110,1380
rights all of them, you

1680
00:52:42,820 --> 00:52:44,120
0,270 270,600 600,1020
know swat correct.

1681
00:52:44,680 --> 00:52:45,730
0,180 180,300 300,510 510,900 900,1050
But does not guarantee that

1682
00:52:45,730 --> 00:52:46,510
0,180 180,360 360,420 420,570 570,780
all ten of them will

1683
00:52:46,510 --> 00:52:47,700
0,90 90,420 420,900
be applied together.

1684
00:52:48,470 --> 00:52:50,120
0,360 390,570 570,870 900,1410 1470,1650
Um, this is so this

1685
00:52:50,120 --> 00:52:51,290
0,120 120,630 630,810 810,930 930,1170
is important when you have

1686
00:52:51,290 --> 00:52:53,200
0,510 780,990 990,1230 1230,1560
like like this like.

1687
00:52:53,370 --> 00:52:56,540
0,420 420,540 540,1320 1350,2190
Need for atomic write.

1688
00:52:56,980 --> 00:52:58,000
0,690
I'm.

1689
00:52:58,350 --> 00:53:00,060
0,510 690,990 990,1320 1320,1470 1470,1710
Yeah, like if you didn't

1690
00:53:00,060 --> 00:53:02,910
0,270 300,1620 1620,2040 2220,2580 2580,2850
need autonomous it, um, with

1691
00:53:02,910 --> 00:53:04,980
0,300 300,810 900,1110 1110,1470 1770,2070
this like could we get

1692
00:53:04,980 --> 00:53:05,820
0,180 180,330 330,570 570,720 720,840
rid of that of the

1693
00:53:05,820 --> 00:53:06,620
0,540
log.

1694
00:53:07,500 --> 00:53:09,810
0,660 660,1260 1320,1470 1470,1710 1890,2310
Um do I think so,

1695
00:53:09,810 --> 00:53:11,040
0,120 120,540 540,600 600,930 930,1230
how about a question, second

1696
00:53:11,040 --> 00:53:11,760
0,150 150,360 360,510 510,630 630,720
let's first talk about the

1697
00:53:11,760 --> 00:53:13,380
0,600 600,900 900,1410 1410,1530 1530,1620
applications and then we'll come

1698
00:53:13,380 --> 00:53:16,720
0,510 900,1650 1800,2400 2430,3060
back to so, um.

1699
00:53:16,830 --> 00:53:20,420
0,540 660,1260 1470,2250 2550,3270
Okay, um there um.

1700
00:53:21,480 --> 00:53:23,260
0,720
Damn.

1701
00:53:23,460 --> 00:53:25,140
0,330 360,510 510,1080 1080,1410 1410,1680
So the applications can really

1702
00:53:25,140 --> 00:53:26,280
0,450 450,540 540,660 660,840 840,1140
write, you know their data

1703
00:53:26,280 --> 00:53:27,930
0,600 630,930 930,1170 1170,1410 1410,1650
typically a four log because

1704
00:53:27,930 --> 00:53:28,950
0,300 300,510 510,600 600,780 780,1020
the data is now written

1705
00:53:28,950 --> 00:53:31,050
0,270 270,1110 1110,1650 1680,1920 1920,2100
for walker and so now

1706
00:53:31,050 --> 00:53:31,890
0,210 210,360 360,630 630,720 720,840
written to walk and then

1707
00:53:31,890 --> 00:53:33,900
0,360 390,810 1350,1530 1530,1680 1680,2010
apply so so that means

1708
00:53:33,900 --> 00:53:34,980
0,180 180,240 240,570 570,990 990,1080
that for example if an

1709
00:53:34,980 --> 00:53:36,000
0,480 480,600 600,840 840,960 960,1020
application you want on the

1710
00:53:36,000 --> 00:53:37,440
0,360 360,600 600,1230
misery of a.

1711
00:53:37,640 --> 00:53:39,410
0,270 270,420 420,1050 1110,1410 1410,1770
Of your rights into particular

1712
00:53:39,410 --> 00:53:40,280
0,390 390,540 540,660 660,810 810,870
file, then you have to

1713
00:53:40,280 --> 00:53:42,230
0,330 330,510 510,780 810,1410 1830,1950
arrange that for yourself and

1714
00:53:42,230 --> 00:53:42,980
0,150 150,390 390,600 600,690 690,750
this actually turns out to

1715
00:53:42,980 --> 00:53:43,760
0,120 120,180 180,450 450,540 540,780
be the case on most

1716
00:53:43,760 --> 00:53:45,920
0,240 240,660 660,780 780,1350 1740,2160
unique fossils in anyway, so

1717
00:53:45,920 --> 00:53:47,060
0,150 150,360 360,600 600,810 810,1140
in that way from Japan,

1718
00:53:47,060 --> 00:53:48,140
0,90 90,330 330,540 540,990 990,1080
it doesn't really change the

1719
00:53:48,140 --> 00:53:50,570
0,510 840,1560 1830,2040 2040,2250 2250,2430
game, you know you write

1720
00:53:50,570 --> 00:53:51,350
0,60 60,390 390,450 450,510 510,780
a file in the unix

1721
00:53:51,350 --> 00:53:53,120
0,270 270,810 990,1440 1440,1530 1530,1770
file system, um you write

1722
00:53:53,120 --> 00:53:54,680
0,150 150,570 600,960 960,1350 1350,1560
like a vm image, it's

1723
00:53:54,680 --> 00:53:56,510
0,240 240,1020 1020,1230 1230,1320 1320,1830
not guaranteed like the whole

1724
00:53:56,540 --> 00:53:58,130
0,510 510,600 600,930 930,1530 1530,1590
image is written consistently in

1725
00:53:58,130 --> 00:53:59,300
0,270 270,570 570,990 990,1080 1080,1170
one single shot, you know

1726
00:53:59,300 --> 00:54:01,400
0,180 180,510 510,780 780,1170 1530,2100
to the file system, um,

1727
00:54:01,610 --> 00:54:03,050
0,330 330,570 570,720 720,810 810,1440
even when they're a crash.

1728
00:54:03,470 --> 00:54:04,550
0,180 180,270 270,630 630,960 960,1080
So the typical way you

1729
00:54:04,550 --> 00:54:06,590
0,510 570,1110 1110,1440 1440,1560 1560,2040
know people solve this problem,

1730
00:54:06,590 --> 00:54:08,510
0,510 510,720 720,1440 1440,1620 1620,1920
a in applications is that

1731
00:54:08,750 --> 00:54:09,740
0,150 150,390 390,540 540,600 600,990
it first right a temporary

1732
00:54:09,740 --> 00:54:10,880
0,480 510,720 720,1020 1020,1110 1110,1140
file, write everything in a

1733
00:54:10,880 --> 00:54:12,200
0,360 360,870 930,1080 1080,1200 1200,1320
temporary file and then do

1734
00:54:12,200 --> 00:54:14,030
0,90 90,510 510,990 1380,1710 1710,1830
an atomic rename into the

1735
00:54:14,030 --> 00:54:15,240
0,510 510,870
destination file.

1736
00:54:15,720 --> 00:54:17,370
0,360 360,660 660,900 900,1290 1290,1650
So French pony basically relies

1737
00:54:17,370 --> 00:54:20,550
0,600 600,690 690,780 780,1470 1740,3180
exactly on the same, um

1738
00:54:20,580 --> 00:54:21,840
0,330 330,600 630,1020 1020,1200 1200,1260
set up a sort of

1739
00:54:21,840 --> 00:54:23,760
0,450 450,780 780,960 960,1230 1440,1920
normal units would do like

1740
00:54:23,760 --> 00:54:24,660
0,210 210,450 450,690 690,840 840,900
friends finding different change the

1741
00:54:24,660 --> 00:54:25,800
0,270 270,360 360,450 450,540 540,1140
game and this is why

1742
00:54:26,220 --> 00:54:28,890
0,60 60,60 1020,1770 1770,1950 1950,2670
as a rights of files

1743
00:54:28,920 --> 00:54:30,690
0,180 180,390 390,660 660,1410 1470,1770
are actually not logged through

1744
00:54:30,690 --> 00:54:31,500
0,120 120,600
the law.

1745
00:54:31,960 --> 00:54:32,890
0,150 150,390 390,480 480,570 570,930
And what is the advantage

1746
00:54:32,890 --> 00:54:33,940
0,90 90,270 270,660 660,810 810,1050
of not logging, so please

1747
00:54:33,940 --> 00:54:35,560
0,240 240,300 300,870 900,1170 1170,1620
there's a downside right because

1748
00:54:35,950 --> 00:54:37,000
0,150 150,390 390,660 660,780 780,1050
you can't do a file

1749
00:54:37,000 --> 00:54:38,050
0,180 180,540 540,690 690,960 960,1050
writes atomic Lee using the

1750
00:54:38,050 --> 00:54:39,010
0,390 390,510 510,630 630,780 780,960
log you have to have

1751
00:54:39,010 --> 00:54:40,600
0,180 180,390 390,810 810,1260 1290,1590
your own plan for new

1752
00:54:40,600 --> 00:54:42,700
0,240 240,720 960,1320 1320,1440 1440,2100
autumn, it bothers the advantage.

1753
00:54:45,780 --> 00:54:48,210
0,510 960,1440 1440,1920 1950,2340 2340,2430
Our performance because metadata is

1754
00:54:48,210 --> 00:54:49,080
0,180 180,450 450,690 690,750 750,870
very small compared to the

1755
00:54:49,080 --> 00:54:51,240
0,600 630,960 960,1320 1530,1920 1920,2160
actual user data, yeah, and

1756
00:54:51,240 --> 00:54:53,670
0,510 720,1230 1410,1530 1530,1830 2040,2430
also memory as well yeah

1757
00:54:53,670 --> 00:54:55,800
0,390 390,570 570,750 750,1590 1770,2130
exactly, so do the like

1758
00:54:55,800 --> 00:54:57,420
0,390 390,540 540,780 780,1110 1110,1620
if you write a gigantic

1759
00:54:57,420 --> 00:54:59,400
0,390 390,810 1020,1260 1260,1680 1680,1980
file correct saying gigabyte file

1760
00:54:59,400 --> 00:55:00,120
0,150 150,330 330,540 540,600 600,720
that really means you have

1761
00:55:00,120 --> 00:55:01,770
0,90 90,270 270,390 390,870 1230,1650
to write two gigabytes first

1762
00:55:01,770 --> 00:55:03,000
0,150 150,390 390,810 810,1140 1140,1230
you're right gigabyte through the

1763
00:55:03,000 --> 00:55:03,750
0,300 300,390 390,570 570,720 720,750
log and then write a

1764
00:55:03,750 --> 00:55:04,770
0,450 450,510 510,690 690,870 870,1020
gigabyte, you know through the

1765
00:55:04,770 --> 00:55:06,150
0,420 780,900 900,960 960,1230 1230,1380
disc and so basically this

1766
00:55:06,150 --> 00:55:07,860
0,330 330,570 570,1020 1020,1290 1290,1710
cuts their performance in a

1767
00:55:07,890 --> 00:55:09,930
0,390 390,1020 1500,1710 1710,1830 1830,2040
pretty dramatically and so which

1768
00:55:09,930 --> 00:55:10,890
0,60 60,390 390,540 540,660 660,960
is why I you know

1769
00:55:10,920 --> 00:55:12,990
0,720 720,810 810,1080 1080,1890 1920,2070
typically the user data is

1770
00:55:12,990 --> 00:55:14,040
0,240 240,420 420,540 540,990
not written for boudoir.

1771
00:55:15,500 --> 00:55:17,060
0,450 600,870 870,990 990,1200 1200,1560
Um, yeah it's very important

1772
00:55:17,060 --> 00:55:18,020
0,330 330,420 420,630 630,870 870,960
portion of come back to

1773
00:55:18,020 --> 00:55:19,040
0,120 120,420 420,750 750,840 840,1020
this earlier question is very

1774
00:55:19,040 --> 00:55:20,690
0,330 330,480 480,690 840,1380 1380,1650
important that the internal file

1775
00:55:20,690 --> 00:55:23,000
0,270 270,960 990,1530 1560,1800 1800,2310
system structures are kept consistent

1776
00:55:23,000 --> 00:55:25,070
0,180 180,480 480,930 930,1650 1650,2070
where you're not you're not

1777
00:55:25,070 --> 00:55:28,580
0,570 960,1830 2070,2340 2340,2790 2850,3510
a inconsistent and so, um,

1778
00:55:28,610 --> 00:55:30,770
0,660 660,930 930,1410 1410,1800 1800,2160
therefore, the metadata updates all

1779
00:55:30,770 --> 00:55:32,780
0,150 150,330 330,900 1290,1560 1560,2010
go through blog, so basically

1780
00:55:32,780 --> 00:55:33,350
0,90 90,240 240,360 360,480 480,570
you know like when you

1781
00:55:33,350 --> 00:55:34,190
0,180 180,240 240,630 630,690 690,840
create the file you need

1782
00:55:34,190 --> 00:55:35,180
0,60 60,300 300,390 390,630 630,990
to update the ideal block

1783
00:55:35,180 --> 00:55:35,960
0,120 120,210 210,360 360,450 450,780
and you need to update

1784
00:55:35,960 --> 00:55:37,940
0,60 60,390 390,720 750,1140 1200,1980
the directory block that's guaranteed

1785
00:55:37,940 --> 00:55:38,840
0,60 60,330 330,810
to happen together.

1786
00:55:42,490 --> 00:55:44,470
0,330 330,630 630,810 810,1290 1320,1980
I'm so would the data

1787
00:55:44,500 --> 00:55:46,390
0,480 480,870 870,1050 1050,1530 1530,1890
block date go between step

1788
00:55:46,390 --> 00:55:47,520
0,150 150,330 330,780
two and three.

1789
00:55:48,300 --> 00:55:51,570
0,1380 1830,2220 2580,2910 2910,3150 3150,3270
Yeah I think they just

1790
00:55:51,570 --> 00:55:52,800
0,120 120,210 210,450 450,810 810,1230
send them out probably they

1791
00:55:52,800 --> 00:55:55,020
0,450 450,1170 1170,1800 1800,1950 1950,2220
probably after one they probably

1792
00:55:55,020 --> 00:55:56,340
0,300 300,480 480,720 720,1110 1110,1320
sent the data blocks in

1793
00:55:56,340 --> 00:55:57,960
0,600 600,990 990,1350
parallel to a.

1794
00:55:58,170 --> 00:56:00,120
0,720 720,1200 1200,1530 1530,1740 1740,1950
Um, yeah start, step two

1795
00:56:00,120 --> 00:56:01,590
0,300 300,600 600,1020 1020,1230 1230,1470
is straight to at all.

1796
00:56:02,500 --> 00:56:03,920
0,390 390,660 660,1110
FIFA system area.

1797
00:56:13,770 --> 00:56:14,640
0,570
Okay.

1798
00:56:15,620 --> 00:56:17,480
0,630 930,1140 1140,1350 1350,1800 1800,1860
So I I had a

1799
00:56:17,480 --> 00:56:19,460
0,510 540,720 720,1050 1080,1620
question I think, um.

1800
00:56:19,910 --> 00:56:21,290
0,120 120,210 210,570 570,1110 1110,1380
I don't remember exactly how

1801
00:56:21,290 --> 00:56:22,640
0,270 270,420 420,810 810,1200 1200,1350
big the log was but

1802
00:56:22,640 --> 00:56:24,680
0,90 90,600 630,870 1080,1590 1590,2040
I believe it could span

1803
00:56:24,680 --> 00:56:26,100
0,210 210,390 390,1110
like two blocks.

1804
00:56:26,810 --> 00:56:32,090
0,1170 1170,1680 1680,2100 2100,2640 4260,5280
Eyes large multiple records, yeah

1805
00:56:32,480 --> 00:56:34,760
0,720 720,960 960,1290 1590,2160 2160,2280
yeah that's right up to

1806
00:56:34,760 --> 00:56:36,350
0,180 180,630 630,780 780,1200 1200,1590
two terabytes, so what happens

1807
00:56:36,350 --> 00:56:37,380
0,150 150,420 420,780
if we um.

1808
00:56:38,060 --> 00:56:39,400
0,150 150,300 300,900
If we send.

1809
00:56:39,940 --> 00:56:42,280
0,720 990,1200 1200,1560 1560,2070 2070,2340
Like a lot like part

1810
00:56:42,280 --> 00:56:43,030
0,90 90,150 150,480 480,600 600,750
of a log and then

1811
00:56:43,030 --> 00:56:44,740
0,90 90,720 720,1200 1200,1320 1320,1710
it crashes as you're sending

1812
00:56:44,740 --> 00:56:46,180
0,390 390,900 900,1020 1020,1260 1260,1440
log when we get like

1813
00:56:46,180 --> 00:56:47,710
0,270 450,690 690,1020 1020,1200 1200,1530
a an issue with like

1814
00:56:48,460 --> 00:56:51,730
0,150 150,300 300,360 360,930 960,3270
I don't know exactly you,

1815
00:56:51,790 --> 00:56:54,280
0,390 390,600 870,1500 1740,2190 2250,2490
thank you, um, so there's

1816
00:56:54,280 --> 00:56:55,060
0,60 60,240 240,300 300,660 660,780
a bunch of crashes that

1817
00:56:55,060 --> 00:56:56,500
0,120 120,450 450,780 780,990 990,1440
could happen right, like so

1818
00:56:56,740 --> 00:56:58,000
0,630 630,990
um so.

1819
00:56:58,580 --> 00:56:59,870
0,150 150,240 240,570 570,960 960,1290
If we crash we considered

1820
00:56:59,870 --> 00:57:00,650
0,30 30,210 210,270 270,600 600,780
a bunch of cases like

1821
00:57:00,650 --> 00:57:01,970
0,90 90,270 270,360 360,690 690,1320
we run a crash before

1822
00:57:01,970 --> 00:57:03,200
0,300 300,390 390,510 510,930
running to the walk.

1823
00:57:10,440 --> 00:57:11,340
0,60
Yeah.

1824
00:57:11,530 --> 00:57:12,940
0,210 210,450 450,570 570,720 720,1410
So what, in that case

1825
00:57:13,120 --> 00:57:14,420
0,300 300,450 450,990
what's the outcome.

1826
00:57:18,910 --> 00:57:22,150
0,630 1020,1800 1800,2310 2340,2610 2610,3240
Hmm, its last yeah last.

1827
00:57:25,060 --> 00:57:27,490
0,540 540,1140 1530,2070 2070,2160 2160,2430
So, um, then we go

1828
00:57:27,490 --> 00:57:29,110
0,120 120,180 180,840 840,1140 1140,1620
through a scenario like we

1829
00:57:29,140 --> 00:57:30,760
0,420 420,840 840,1140 1140,1230 1230,1620
crash after writing the walk.

1830
00:57:39,550 --> 00:57:40,700
0,210 210,420 420,840
What happens there.

1831
00:57:42,180 --> 00:57:43,950
0,120 120,390 390,720 720,1200 1200,1770
It's actually slightly complicated scenario.

1832
00:57:44,620 --> 00:57:46,420
0,330 330,630 630,930 930,1320 1320,1800
What is this, after writing

1833
00:57:46,420 --> 00:57:47,650
0,180 180,300 300,600 600,900 900,1230
like the log to a

1834
00:57:47,680 --> 00:57:49,800
0,600
pedal.

1835
00:57:50,500 --> 00:57:52,450
0,300 300,420 420,960 1080,1500 1500,1950
Then the demon steps then

1836
00:57:52,540 --> 00:57:53,650
0,270 270,480 480,540 540,810 810,1110
yes then the demon steps

1837
00:57:53,650 --> 00:57:54,460
0,360 360,450 450,600 600,720 720,810
it's a little bit of

1838
00:57:54,460 --> 00:57:56,260
0,60 60,510 510,870 900,1260 1260,1800
a complicated story correct because

1839
00:57:56,620 --> 00:57:58,510
0,150 150,330 330,1260 1290,1740 1740,1890
you know how, how does

1840
00:57:58,510 --> 00:57:59,830
0,150 150,240 240,840 840,1050 1050,1320
this all discovered what actually

1841
00:57:59,830 --> 00:58:00,540
0,540
happens.

1842
00:58:01,480 --> 00:58:02,500
0,150 150,510 510,660 660,930 930,1020
So presumably what happens if

1843
00:58:02,500 --> 00:58:03,760
0,270 270,600 600,840 840,930 930,1260
somebody else wants the law

1844
00:58:03,760 --> 00:58:04,870
0,150 150,270 270,570 570,1050 1050,1110
and the law correct on

1845
00:58:04,870 --> 00:58:06,370
0,120 120,720 750,1140 1140,1260 1260,1500
this file that you know

1846
00:58:06,370 --> 00:58:08,560
0,420 420,630 660,1080 1080,1560 1560,2190
that the crashed workstation holds.

1847
00:58:10,050 --> 00:58:11,100
0,420 420,540 540,600 600,870 870,1050
And you know here's where

1848
00:58:11,100 --> 00:58:13,770
0,360 360,630 630,1170 1170,1770 2190,2670
leases coming important for every

1849
00:58:13,770 --> 00:58:15,200
0,330 330,510 510,630 630,1170
lock has at least.

1850
00:58:15,400 --> 00:58:16,690
0,390 390,570 570,660 660,1050 1050,1290
And what the workshop will

1851
00:58:16,690 --> 00:58:18,520
0,510 660,1230 1230,1410 1410,1560 1560,1830
do a it will not

1852
00:58:18,520 --> 00:58:20,800
0,600 630,990 1320,1740 1740,2100 2100,2280
grant you the watcher will

1853
00:58:20,800 --> 00:58:22,240
0,420 420,540 540,990 990,1230 1230,1440
ask and workstation one, please

1854
00:58:22,240 --> 00:58:24,220
0,180 180,690 690,1410 1440,1710 1710,1980
give me your loc eff

1855
00:58:24,220 --> 00:58:26,200
0,450 780,1230 1230,1380 1380,1890 1890,1980
back works as one who

1856
00:58:26,200 --> 00:58:27,760
0,180 180,600 600,840 840,930 930,1560
doesn't respond because it's crashed

1857
00:58:28,090 --> 00:58:31,210
0,810 810,1140 1140,1470 1470,2100 2280,3120
and um what the lottery

1858
00:58:31,210 --> 00:58:32,470
0,450 480,690 690,930 930,1140 1140,1260
does it waits until the

1859
00:58:32,470 --> 00:58:33,850
0,240 240,810 810,930 930,990 990,1380
lease expires on the clock.

1860
00:58:36,800 --> 00:58:37,910
0,270 270,600 600,750 750,840 840,1110
And why does it wait

1861
00:58:37,910 --> 00:58:39,170
0,210 210,270 270,660 660,960 960,1260
until the water, the leases

1862
00:58:39,170 --> 00:58:40,160
0,660
expired.

1863
00:58:44,180 --> 00:58:45,140
0,150 150,330 330,690 690,810 810,960
I I think I think

1864
00:58:45,140 --> 00:58:46,970
0,120 120,360 360,810 810,1200 1350,1830
in this case, the um.

1865
00:58:47,730 --> 00:58:49,640
0,960 1080,1590
The um.

1866
00:58:50,060 --> 00:58:52,340
0,960 1470,1980
Server per.

1867
00:58:52,570 --> 00:58:53,950
0,210 210,270 270,570 570,690 690,1380
Yeah the server that crashed

1868
00:58:53,980 --> 00:58:55,480
0,270 270,570 570,1200
like also knows.

1869
00:58:55,740 --> 00:58:57,600
0,480 510,690 690,1020 1020,1260 1500,1860
Um, it didn't like renew

1870
00:58:57,600 --> 00:58:58,590
0,210 210,510 510,690 690,810 810,990
its lease so it can

1871
00:58:58,590 --> 00:59:00,090
0,240 240,450 450,570 570,1170 1170,1500
clean up by its own

1872
00:59:00,570 --> 00:59:03,690
0,300 300,660 660,2310 2310,2820 2820,3120
yeah cleanups Xie fundamental problem

1873
00:59:03,690 --> 00:59:04,590
0,180 180,330 330,450 450,690 690,900
here that we're actually trying

1874
00:59:04,590 --> 00:59:05,820
0,60 60,390 390,630 630,780 780,1230
to challenge almost like the

1875
00:59:05,820 --> 00:59:07,440
0,630 630,810 810,990 990,1200 1200,1620
scenario that we've seen over

1876
00:59:07,440 --> 00:59:08,790
0,120 120,450 450,540 540,990 990,1350
and over in previous lecture

1877
00:59:08,790 --> 00:59:10,290
0,240 240,510 510,840 840,900 900,1500
stuff, there's always a challenge.

1878
00:59:11,070 --> 00:59:13,590
0,480 480,1170 1320,1530 1530,2010 2010,2520
Credit partition, no repetition exactly

1879
00:59:15,060 --> 00:59:17,280
0,450 450,540 540,600 600,1260 1680,2220
could be the case that

1880
00:59:17,280 --> 00:59:18,930
0,150 150,600 660,1080 1080,1530 1530,1650
you know actually workstation one

1881
00:59:18,930 --> 00:59:20,670
0,150 150,390 390,990 1350,1650 1650,1740
did not crash, but the

1882
00:59:20,670 --> 00:59:23,100
0,510 510,810 810,1500 1500,1740 1740,2430
luxury can talk to a

1883
00:59:23,220 --> 00:59:24,600
0,750 750,960 960,1020 1020,1080 1080,1380
workstation because of the network

1884
00:59:24,600 --> 00:59:25,860
0,450 660,840 840,930 930,1170 1170,1260
petition, but the law in

1885
00:59:25,860 --> 00:59:26,490
0,90 90,360 360,480 480,540 540,630
the works is you can

1886
00:59:26,490 --> 00:59:27,440
0,210 210,300 300,750
talk to pedal.

1887
00:59:28,100 --> 00:59:29,120
0,240 240,360 360,510 510,810 810,1020
And so it might still

1888
00:59:29,120 --> 00:59:31,880
0,720 720,1140 1140,1680 1710,2160 2340,2760
may make changes right but

1889
00:59:31,880 --> 00:59:33,140
0,330 330,420 420,960 960,1080 1080,1260
whatever we guaranteed as you

1890
00:59:33,140 --> 00:59:34,280
0,180 180,450 450,810 810,1080 1080,1140
just pointed out once the

1891
00:59:34,280 --> 00:59:36,440
0,210 210,780 780,1200 1200,1560 1560,2160
lease expires workstation will definitely

1892
00:59:36,440 --> 00:59:37,840
0,240 240,420 420,600 600,1230
not make any changes.

1893
00:59:38,830 --> 00:59:39,880
0,360 360,450 450,540 540,750 750,1050
Okay, it is not allowed

1894
00:59:39,880 --> 00:59:41,290
0,120 360,660 660,750 750,1320 1320,1410
to follow the protocol is

1895
00:59:41,290 --> 00:59:42,070
0,180 180,390 390,450 450,600 600,780
not allowed to make any

1896
00:59:42,070 --> 00:59:43,100
0,300 300,720
changes anymore.

1897
00:59:44,340 --> 00:59:45,750
0,240 240,360 360,540 540,750 750,1410
And so this is a

1898
00:59:45,750 --> 00:59:47,490
0,210 210,300 300,690 690,1200 1200,1740
why the watcher waits until

1899
00:59:47,490 --> 00:59:48,660
0,90 90,300 300,930 930,1110 1110,1170
the lease expires now at

1900
00:59:48,660 --> 00:59:49,500
0,180 180,450 450,540 540,750 750,840
that point and knows for

1901
00:59:49,500 --> 00:59:51,030
0,450 450,630 630,1080 1080,1470 1470,1530
sure that nobody holds a

1902
00:59:51,030 --> 00:59:52,860
0,240 240,840 1170,1380 1380,1650 1650,1830
lock anymore or couldn't hold

1903
00:59:52,860 --> 00:59:53,970
0,60 60,300 300,390 390,750 750,1110
the lock if nobody's writing

1904
00:59:53,970 --> 00:59:55,380
0,90 90,360 360,990 1170,1290 1290,1410
to pedal anymore and so

1905
00:59:55,380 --> 00:59:56,700
0,60 60,210 210,630 630,930 930,1320
at this point it will

1906
00:59:56,700 --> 00:59:58,260
0,390 390,570 570,720 720,990 1020,1560
ask one of the remaining

1907
00:59:58,260 --> 01:00:00,690
0,690 690,1140 1350,1920 1920,2280 2280,2430
workstations to um, basically what

1908
01:00:00,690 --> 01:00:02,440
0,120 120,390 390,930 930,1530
they call the demon.

1909
01:00:06,020 --> 01:00:09,830
0,630 630,1110 1920,2910 2910,3300 3300,3810
Recovery demon, the recovery demon.

1910
01:00:10,720 --> 01:00:12,250
0,150 150,210 210,600 600,870 870,1530
And the recovery demon basically

1911
01:00:12,340 --> 01:00:14,680
0,300 300,1110 1140,1710 1710,1920 1920,2340
will apply a will read

1912
01:00:14,680 --> 01:00:16,210
0,300 300,420 420,870 870,990 990,1530
the the log the workstation

1913
01:00:16,210 --> 01:00:18,520
0,480 930,1260 1260,1710 1740,1950 1950,2310
one each log and basically

1914
01:00:18,520 --> 01:00:19,810
0,300 300,390 390,960 960,1110 1110,1290
apply the operations that are

1915
01:00:19,810 --> 01:00:20,700
0,60 60,240 240,660
in that log.

1916
01:00:22,200 --> 01:00:23,080
0,600
Okay.

1917
01:00:25,110 --> 01:00:27,090
0,420 420,600 600,750 750,1050 1320,1980
Um, you know the way

1918
01:00:27,090 --> 01:00:28,080
0,90 90,210 210,390 390,480 480,990
to think about the demon

1919
01:00:28,230 --> 01:00:29,460
0,450 450,660 660,990 990,1050 1050,1230
a it's sort of like

1920
01:00:29,460 --> 01:00:31,680
0,450 480,690 690,900 930,1830 1830,2220
a this is terminology, it's

1921
01:00:31,680 --> 01:00:33,240
0,360 360,570 570,600 600,1290 1320,1560
typically just a surface or

1922
01:00:33,240 --> 01:00:35,070
0,30 30,780 930,1290 1290,1470 1470,1830
a server, a or server

1923
01:00:35,070 --> 01:00:36,900
0,750 840,1140 1140,1320 1320,1650 1650,1830
process, um that basically does

1924
01:00:36,900 --> 01:00:39,240
0,180 180,300 300,1320 1320,1440 1440,2340
sort of housecleaning or hausa

1925
01:00:39,270 --> 01:00:41,130
0,420 420,1020 1020,1230 1230,1710 1710,1860
cleaning tasks and those kind

1926
01:00:41,130 --> 01:00:42,420
0,60 60,570 570,720 720,930 930,1290
of services that are not

1927
01:00:42,420 --> 01:00:45,030
0,210 210,630 630,960 1050,1980 2190,2610
really used a continuously other

1928
01:00:45,030 --> 01:00:46,140
0,390 390,1020
optical demons.

1929
01:00:48,950 --> 01:00:49,850
0,210 210,450 450,510 510,780 780,900
So once the demon is

1930
01:00:49,850 --> 01:00:51,530
0,390 420,720 720,1050 1050,1560 1590,1680
done then actually block you

1931
01:00:51,530 --> 01:00:53,090
0,120 120,300 300,870 1050,1350 1350,1560
know can be walked over

1932
01:00:53,090 --> 01:00:55,070
0,210 210,780 780,1560 1560,1770 1770,1980
can resign walker we're going

1933
01:00:55,070 --> 01:00:56,210
0,90 90,360 360,810 810,900 900,1140
to walk somebody to another

1934
01:00:56,210 --> 01:00:57,100
0,570
workstation.

1935
01:00:58,820 --> 01:00:59,540
0,150 150,330 330,450 450,540 540,720
Um, but just to double

1936
01:00:59,540 --> 01:01:01,400
0,210 210,540 540,540 1080,1410 1710,1860
check so, um, um, if

1937
01:01:01,400 --> 01:01:02,720
0,120 120,330 330,750 870,1230 1230,1320
you crash after writing the

1938
01:01:02,720 --> 01:01:03,860
0,270 270,390 390,540 540,750 750,1140
log then you'll get you're

1939
01:01:03,860 --> 01:01:04,700
0,120 120,180 180,330 330,390 390,840
going to have a consistent

1940
01:01:04,700 --> 01:01:05,540
0,240 240,330 330,420 420,630 630,840
stage when it comes to

1941
01:01:05,600 --> 01:01:06,920
0,180 180,630 630,840 870,1050 1050,1320
the metadata, but the user

1942
01:01:06,920 --> 01:01:07,790
0,120 120,300 300,630 630,720 720,870
is not guaranteed to have

1943
01:01:07,790 --> 01:01:09,230
0,360 420,840 840,930 930,1200 1200,1440
finished writing the user data,

1944
01:01:09,860 --> 01:01:11,900
0,1200 1200,1560 1560,1740 1740,1830 1830,2040
no guarantees about the user

1945
01:01:11,900 --> 01:01:12,440
0,300
data.

1946
01:01:13,060 --> 01:01:14,620
0,210 210,420 420,750 750,960 960,1560
So the only thing the

1947
01:01:14,620 --> 01:01:16,330
0,120 120,750 750,960 960,1380 1380,1710
the guarantees that like really

1948
01:01:16,330 --> 01:01:18,820
0,120 120,480 480,1380 1560,2010 2010,2490
the logging system helps achieving

1949
01:01:18,820 --> 01:01:20,200
0,180 180,510 510,1110 1110,1290 1290,1380
is basically consistency of the

1950
01:01:20,200 --> 01:01:22,300
0,630 630,930 930,1200 1200,1500 1500,2100
internal file system data structures.

1951
01:01:23,830 --> 01:01:25,220
0,420 600,870 870,1080
Okay, sounds good.

1952
01:01:27,120 --> 01:01:28,350
0,270 270,330 330,720 720,1020 1020,1230
Which is important correct because

1953
01:01:28,350 --> 01:01:29,430
0,90 90,210 210,330 330,540 540,1080
it would be pretty bad

1954
01:01:29,460 --> 01:01:30,660
0,270 270,600 600,780 780,1020 1020,1200
file internal file system data

1955
01:01:30,660 --> 01:01:31,940
0,360 360,420 420,690 690,990
structures are messed up.

1956
01:01:32,110 --> 01:01:33,250
0,150 150,450 450,810 810,960 960,1140
You know, everybody might lose

1957
01:01:33,250 --> 01:01:34,140
0,120 120,480
their data.

1958
01:01:37,420 --> 01:01:39,520
0,330 330,840 870,1560 1590,1800 1800,2100
Okay, so then there's another

1959
01:01:39,520 --> 01:01:40,580
0,300 300,840
instant case.

1960
01:01:40,900 --> 01:01:43,330
0,900 1350,1740 1740,1830 1830,2190 2190,2430
Um, what can happen okay,

1961
01:01:43,330 --> 01:01:44,860
0,360 360,750 750,1020 1020,1080 1080,1530
so writing ought to be

1962
01:01:44,890 --> 01:01:46,240
0,360 360,750 750,1110 1110,1230 1230,1350
a what happens if we

1963
01:01:46,240 --> 01:01:48,060
0,510 510,1170
crash during.

1964
01:01:51,110 --> 01:01:52,740
0,420 420,540 540,960
Writing the law.

1965
01:02:05,250 --> 01:02:06,780
0,240 240,450 450,690 690,870 870,1530
Is this what you mentioned

1966
01:02:06,780 --> 01:02:08,760
0,450 450,780 780,1320 1320,1650 1650,1980
before that their check sums

1967
01:02:08,760 --> 01:02:09,750
0,150 150,270 270,450 450,690 690,990
and we can check whether

1968
01:02:09,750 --> 01:02:10,770
0,120 120,360 360,480 480,930 930,1020
it was a complete or

1969
01:02:10,770 --> 01:02:15,270
0,420 480,2220 2250,2970 2970,3330 3360,4500
not a good point, so

1970
01:02:15,420 --> 01:02:16,620
0,300 300,570 570,660 660,810 810,1200
what happens in this case,

1971
01:02:16,620 --> 01:02:18,090
0,360 360,540 540,630 630,1200 1200,1470
there's not a prefix might

1972
01:02:18,120 --> 01:02:19,760
0,180 180,480 510,750 750,1050
end up in the.

1973
01:02:20,850 --> 01:02:21,990
0,120 120,570 570,780 780,930 930,1140
The prefix my end, open

1974
01:02:21,990 --> 01:02:23,120
0,90 90,480 480,720
the log, right.

1975
01:02:24,500 --> 01:02:26,480
0,540 900,1260 1260,1410 1410,1560 1560,1980
Um, but each of the

1976
01:02:26,870 --> 01:02:29,480
0,600 600,780 780,1140 1140,1890 1890,2610
prediction might contain multiple a

1977
01:02:29,540 --> 01:02:31,550
0,690 690,960 960,1080 1080,1410 1410,2010
log records with multiple operations,

1978
01:02:31,550 --> 01:02:32,870
0,420 420,510 510,660 660,990 990,1320
greatly you know whatever sequence

1979
01:02:32,870 --> 01:02:34,280
0,210 210,600 600,780 780,990 990,1410
number one six number two

1980
01:02:34,280 --> 01:02:37,370
0,270 300,1080 1080,1620 2160,2790 2940,3090
the multiple records, um, if

1981
01:02:37,370 --> 01:02:38,720
0,210 210,630 630,930 930,1260 1260,1350
we crash during one of

1982
01:02:38,720 --> 01:02:40,280
0,420 420,780 780,1350 1350,1440 1440,1560
these records updates you know

1983
01:02:40,280 --> 01:02:42,050
0,480 480,480 480,1200 1200,1530 1530,1770
then, um the checksum zone

1984
01:02:42,050 --> 01:02:43,460
0,450 450,630 630,870 870,1020 1020,1410
checkout and so will basically

1985
01:02:43,460 --> 01:02:45,110
0,480 510,600 600,1200 1200,1440 1440,1650
stop you know the the

1986
01:02:45,110 --> 01:02:46,220
0,330 330,600 600,690 690,1050 1050,1110
recovery team will stop at

1987
01:02:46,220 --> 01:02:46,980
0,210 210,570
that record.

1988
01:02:47,190 --> 01:02:48,420
0,210 210,450 450,660 660,930 930,1230
So what will be in

1989
01:02:48,420 --> 01:02:49,740
0,120 120,480 480,630 630,930 930,1320
the log will be, um,

1990
01:02:49,980 --> 01:02:51,990
0,390 390,780 780,1290 1290,1830 1860,2010
ah, um, correct prefix of

1991
01:02:51,990 --> 01:02:54,060
0,120 120,900 1080,1350 1350,1410 1410,2070
the operations, so for example

1992
01:02:54,060 --> 01:02:55,320
0,60 60,240 240,480 480,1140 1140,1260
you know the creator of

1993
01:02:55,320 --> 01:02:57,180
0,720 720,990 990,1200 1200,1320 1320,1860
file f is in there

1994
01:02:57,210 --> 01:02:58,650
0,270 270,360 360,660 660,1140 1140,1440
maybe to create file g's

1995
01:02:58,650 --> 01:03:00,210
0,180 180,660 690,990 990,1080 1080,1560
in there but the creative

1996
01:03:00,210 --> 01:03:01,560
0,510 540,870 870,1020 1020,1260 1260,1350
file h is not in

1997
01:03:01,560 --> 01:03:02,040
0,270
there.

1998
01:03:02,190 --> 01:03:03,900
0,270 270,480 480,600 600,1290 1290,1710
Um, but each individual record

1999
01:03:03,930 --> 01:03:05,490
0,210 210,630 630,900 900,1440 1470,1560
that describes one atomic you

2000
01:03:05,490 --> 01:03:07,200
0,150 150,360 360,600 600,1350 1560,1710
know file system operation, you

2001
01:03:07,200 --> 01:03:08,400
0,90 90,630 630,750 750,1080 1080,1200
know is in there and

2002
01:03:08,400 --> 01:03:09,240
0,90 90,570
is complete.

2003
01:03:09,910 --> 01:03:11,350
0,210 210,570 660,960 960,1110 1110,1440
And so what will happen

2004
01:03:11,350 --> 01:03:12,460
0,120 120,240 240,660 660,810 810,1110
is that basically we apply

2005
01:03:12,460 --> 01:03:14,800
0,60 60,750 780,1080 1080,1710 1740,2340
the prefix of the operations

2006
01:03:14,800 --> 01:03:16,570
0,90 90,180 180,720 720,1080 1080,1770
at the workstation is a

2007
01:03:16,600 --> 01:03:18,340
0,540 660,840 840,930 930,1290 1290,1740
doing and we basically lose

2008
01:03:18,340 --> 01:03:19,510
0,180 180,330 330,450 450,570 570,1170
the end of the prefix

2009
01:03:19,870 --> 01:03:20,800
0,180 180,300 300,420 420,570 570,930
or the end of a

2010
01:03:20,800 --> 01:03:22,960
0,150 150,540 540,750 750,1140 1440,2160
its updates but no undesirable

2011
01:03:22,960 --> 01:03:24,460
0,180 180,360 360,690 690,1050 1050,1500
but we're totally okay because.

2012
01:03:24,950 --> 01:03:26,150
0,420 450,840 840,930 930,1020 1020,1200
Yeah yeah in the other

2013
01:03:26,150 --> 01:03:27,200
0,240 240,360 360,510 510,630 630,1050
case we might have lost

2014
01:03:27,200 --> 01:03:28,480
0,180 180,480 480,600 600,1050
in all of this.

2015
01:03:31,210 --> 01:03:32,350
0,300 300,420 420,510 510,750 750,1140
But in the first case,

2016
01:03:32,920 --> 01:03:33,820
0,270 270,450 450,570 570,630 630,900
um, we were a class

2017
01:03:33,820 --> 01:03:34,690
0,300 300,360 360,630 630,720 720,870
before the one we would

2018
01:03:34,690 --> 01:03:35,860
0,150 150,450 450,570 570,930
have nothing on this.

2019
01:03:40,660 --> 01:03:42,180
0,120 120,300 300,420 420,750
Does that make sense.

2020
01:03:46,760 --> 01:03:49,640
0,390 390,720 720,1260 1440,2220 2550,2880
Okay, there's one um one

2021
01:03:49,640 --> 01:03:51,950
0,150 150,450 450,1020 1050,2070 2100,2310
more tricky case, um, you

2022
01:03:51,950 --> 01:03:52,880
0,90 90,180 180,330 330,390 390,930
know we need to consider

2023
01:03:53,210 --> 01:03:53,930
0,240 240,330 330,480 480,630 630,720
a and that has to

2024
01:03:53,930 --> 01:03:54,860
0,120 120,330 330,390 390,720 720,930
do with the fact that

2025
01:03:54,860 --> 01:03:56,420
0,480 480,780 780,960 960,1050 1050,1560
actually paddle has a walk

2026
01:03:56,420 --> 01:03:58,190
0,120 120,600 600,810 810,1410 1590,1770
for server or log per

2027
01:03:58,190 --> 01:03:59,160
0,510
server.

2028
01:03:59,570 --> 01:04:00,380
0,180 180,420 420,600 600,630 630,810
So I talked a little

2029
01:04:00,380 --> 01:04:01,670
0,120 120,300 300,870 960,1170 1170,1290
bit about that, and these

2030
01:04:01,670 --> 01:04:03,290
0,90 90,390 390,660 660,990 1020,1620
are related to the question

2031
01:04:03,500 --> 01:04:04,790
0,150 150,210 210,780 810,930 930,1290
in a post you know

2032
01:04:05,240 --> 01:04:06,440
0,270 270,360 360,900
for the reading.

2033
01:04:06,760 --> 01:04:07,600
0,210 210,330 330,390 390,600 600,840
And this is about many

2034
01:04:07,600 --> 01:04:09,460
0,600 960,1410 1410,1560 1560,1710 1710,1860
logs and so let's say

2035
01:04:09,460 --> 01:04:11,600
0,180 180,660 690,1920
we have workstations.

2036
01:04:12,160 --> 01:04:13,330
0,180 180,330 330,480 480,570 570,1170
Each with their own blog.

2037
01:04:13,920 --> 01:04:15,720
0,180 180,420 420,870 870,1290 1290,1800
So you've workstation, one workstation

2038
01:04:15,720 --> 01:04:18,380
0,600 960,1620 1620,2130
to workstation free.

2039
01:04:19,480 --> 01:04:21,070
0,570 570,1020 1020,1320 1320,1440 1440,1590
And workstation, one at some

2040
01:04:21,070 --> 01:04:23,320
0,330 330,540 540,630 630,1410 2010,2250
point goes or delete a

2041
01:04:23,320 --> 01:04:24,490
0,360 360,600 600,780 780,1080 1080,1170
file, if that happened to

2042
01:04:24,490 --> 01:04:26,180
0,660 660,1320
exist before.

2043
01:04:27,480 --> 01:04:30,630
0,810 810,1560 1860,2400 2400,2940 2970,3150
Then a workstation to does

2044
01:04:30,630 --> 01:04:32,120
0,120 120,810
it create.

2045
01:04:33,270 --> 01:04:35,880
0,300 300,840 870,1110 1110,1980 2190,2610
F D N F and

2046
01:04:35,880 --> 01:04:37,020
0,120 120,300 300,660 660,1050 1050,1140
but that create remember has

2047
01:04:37,020 --> 01:04:38,130
0,270 270,390 390,510 510,660 660,1110
written to his own log

2048
01:04:38,190 --> 01:04:41,160
0,960 960,1560 1860,2100 2100,2580 2580,2970
exists, delete is written to

2049
01:04:41,160 --> 01:04:42,840
0,150 150,600 600,720 720,1230 1230,1680
the log of workstation one

2050
01:04:43,020 --> 01:04:44,250
0,270 270,630 630,750 750,1050 1050,1230
this Korean is written to

2051
01:04:44,250 --> 01:04:45,840
0,90 90,540 540,750 750,1260 1260,1590
the log of workstation two.

2052
01:04:46,990 --> 01:04:48,880
0,420 420,630 630,1230
Now let's say.

2053
01:04:49,420 --> 01:04:51,100
0,270 270,600 600,720 720,930 930,1680
A workday you want crash.

2054
01:04:52,950 --> 01:04:55,920
0,750 780,1890 2040,2280 2280,2520 2520,2970
In a and then workstation

2055
01:04:55,920 --> 01:04:57,390
0,510 570,690 690,810 810,1380 1380,1470
free, you know basically you

2056
01:04:57,390 --> 01:04:59,100
0,210 210,390 390,810 810,1110 1110,1710
know the recovery daemon runs.

2057
01:05:07,600 --> 01:05:09,430
0,90 90,240 240,870 900,1530 1530,1830
You know for workstation one.

2058
01:05:14,700 --> 01:05:15,960
0,570 570,720 720,810 810,930 930,1260
And you know the best

2059
01:05:15,960 --> 01:05:17,730
0,420 420,870 870,1230 1230,1410 1410,1770
possible outcome correctly that would

2060
01:05:17,730 --> 01:05:19,640
0,420 420,900 900,1020 1020,1620
delay replay the delete.

2061
01:05:19,960 --> 01:05:22,210
0,180 180,390 390,1170 1260,1590 1590,2250
Which would overwrite the changes,

2062
01:05:22,210 --> 01:05:24,040
0,60 60,690 690,900 900,1230 1500,1830
um that works is to

2063
01:05:24,040 --> 01:05:25,020
0,270 270,690
make pedal.

2064
01:05:26,180 --> 01:05:27,470
0,180 180,270 270,510 510,600 600,1290
Right, so that's the context

2065
01:05:28,130 --> 01:05:29,180
0,450 450,540 540,810 810,900 900,1050
and the question is how

2066
01:05:29,180 --> 01:05:30,710
0,240 240,780 810,1230 1230,1290 1290,1530
is fixed and I think

2067
01:05:30,710 --> 01:05:31,760
0,390 390,690 720,900 900,960 960,1050
this the way I would

2068
01:05:31,760 --> 01:05:32,630
0,150 150,210 210,510 510,720 720,870
like to address this is

2069
01:05:32,630 --> 01:05:34,190
0,180 180,780 780,960 960,1350 1350,1560
by actually having you spend

2070
01:05:34,190 --> 01:05:34,850
0,30 30,240 240,510 510,600 600,660
a couple minutes in the

2071
01:05:34,850 --> 01:05:36,620
0,390 390,840 1110,1440 1440,1620 1620,1770
breakout room debate this with

2072
01:05:36,620 --> 01:05:37,640
0,120 120,480 480,660 660,810 810,1020
each other or any other

2073
01:05:37,640 --> 01:05:39,980
0,390 390,480 930,1740 1740,1890 1890,2340
aspect of pedal, if you

2074
01:05:40,010 --> 01:05:40,720
0,240 240,420
want to.

2075
01:05:42,020 --> 01:05:43,300
0,270 270,1110
That so.

2076
01:05:43,880 --> 01:05:44,800
0,480
Yeah.

2077
01:05:45,040 --> 01:05:46,930
0,390 390,900 930,1320 1320,1680 1680,1890
Lily or anybody else, any

2078
01:05:46,930 --> 01:05:49,060
0,360 360,750 750,1020 1410,1800 1830,2130
other ts so you send

2079
01:05:49,060 --> 01:05:50,020
0,180 180,240 240,300 300,570 570,960
people to a greater group.

2080
01:06:02,130 --> 01:06:03,210
0,210 210,240 240,390 390,600 600,1080
Should I do it or

2081
01:06:03,240 --> 01:06:05,130
0,150 150,210 210,510 1110,1470 1470,1890
it'll be great okay cool.

2082
01:06:06,210 --> 01:06:07,400
0,690
Right.

2083
01:06:12,110 --> 01:06:13,880
0,690 720,1140 1140,1320 1320,1410 1410,1770
I'll close them in about

2084
01:06:13,880 --> 01:06:16,020
0,180 180,630
five minutes.

2085
01:06:16,370 --> 01:06:17,120
0,390
OH.

2086
01:11:44,020 --> 01:11:45,280
0,510
Poop.

2087
01:11:53,050 --> 01:11:53,940
0,660
Cat.

2088
01:12:04,230 --> 01:12:05,080
0,630
Oops.

2089
01:12:12,740 --> 01:12:13,580
0,510
Woof.

2090
01:12:13,970 --> 01:12:14,680
0,510
Okay.

2091
01:12:16,070 --> 01:12:16,760
0,60
Yeah.

2092
01:12:22,020 --> 01:12:23,140
0,270 270,840
Already back.

2093
01:12:28,360 --> 01:12:29,500
0,870
Okay.

2094
01:12:32,010 --> 01:12:33,780
0,240 240,420 420,630 630,1080 1560,1770
Okay, so just a just

2095
01:12:33,780 --> 01:12:36,900
0,420 450,1170 1170,1950 2100,2880 2880,3120
a quickly a summarized, so

2096
01:12:36,900 --> 01:12:39,030
0,90 90,210 210,390 390,1320 1620,2130
we have three workstations, workstation

2097
01:12:39,030 --> 01:12:40,350
0,360 360,450 450,600 600,840 840,1320
one at some point deleted

2098
01:12:40,350 --> 01:12:42,270
0,510 870,1410 1410,1710 1710,1830 1830,1920
the file that's in the

2099
01:12:42,270 --> 01:12:44,910
0,750 930,1650 1650,2130 2130,2460 2460,2640
log a workstation to at

2100
01:12:44,910 --> 01:12:47,190
0,120 120,330 330,750 750,1200 1200,2280
some point later created a

2101
01:12:47,250 --> 01:12:48,540
0,390 390,630 630,900 930,1140 1140,1290
creative file, if it is

2102
01:12:48,540 --> 01:12:50,340
0,150 150,270 270,690 1080,1500 1500,1800
in his blog and then

2103
01:12:50,340 --> 01:12:52,170
0,330 330,930 930,1140 1140,1590 1590,1830
one crashes and workstation three

2104
01:12:52,170 --> 01:12:53,730
0,240 240,600 600,960 960,1320 1320,1560
extra runs recovery demon on

2105
01:12:53,730 --> 01:12:54,900
0,90 90,510 510,660 660,960 960,1170
the log of which stays

2106
01:12:54,900 --> 01:12:55,620
0,480
one.

2107
01:12:55,840 --> 01:12:56,740
0,360 360,450 450,660 660,840 840,900
And of course would be

2108
01:12:56,740 --> 01:12:58,300
0,30 30,630 630,780 780,1140 1170,1560
a disaster, if the delete

2109
01:12:58,300 --> 01:13:00,010
0,120 120,270 270,930 1110,1650 1650,1710
would be replayed because a

2110
01:13:00,010 --> 01:13:01,180
0,300 300,570 570,720 720,1020 1020,1170
later grade has happened on

2111
01:13:01,180 --> 01:13:02,290
0,240 240,750 750,840 840,990 990,1110
another workstation but it's in

2112
01:13:02,290 --> 01:13:04,120
0,270 270,660 690,1200 1230,1620 1620,1830
another law so demon doesn't

2113
01:13:04,120 --> 01:13:05,350
0,150 150,390 600,870 870,960 960,1230
know why, how is this

2114
01:13:05,380 --> 01:13:06,680
0,510 510,1050
problem solved.

2115
01:13:07,670 --> 01:13:09,950
0,240 240,420 420,810 1050,1710 1710,2280
Or has this potential disaster

2116
01:13:09,950 --> 01:13:10,820
0,540
avoided.

2117
01:13:14,590 --> 01:13:17,620
0,720 810,1170 1170,1500 1500,2220 2460,3030
We said version numbers yeah.

2118
01:13:19,300 --> 01:13:20,170
0,330 330,450 450,600 600,780 780,870
Yes, you could use a

2119
01:13:20,170 --> 01:13:20,740
0,180 180,270 270,450 450,510 510,570
little bit more if you

2120
01:13:20,740 --> 01:13:21,500
0,150 150,450
want to.

2121
01:13:21,820 --> 01:13:24,910
0,510 540,1140 1230,1950 2010,2580 2790,3090
Sure, um, so like it's

2122
01:13:24,910 --> 01:13:26,560
0,720 720,1200 1200,1320 1320,1530 1530,1650
guaranteed because we had the

2123
01:13:26,560 --> 01:13:29,380
0,390 390,600 600,930 1020,2550 2580,2820
lock that the operations have

2124
01:13:29,380 --> 01:13:33,250
0,330 330,990 1020,1890 2220,2730 3420,3870
already completed for a server

2125
01:13:33,250 --> 01:13:37,630
0,510 1680,2430 2430,3180 3360,3900 3930,4380
one and so the like

2126
01:13:37,630 --> 01:13:39,370
0,390 540,1080 1080,1410 1410,1620 1620,1740
the version number for the

2127
01:13:39,370 --> 01:13:41,470
0,600 690,990 990,1590 1590,1890 1890,2100
log is written in a

2128
01:13:41,470 --> 01:13:43,180
0,210 210,660 960,1260 1260,1350 1350,1710
and pedal like the last

2129
01:13:43,180 --> 01:13:45,580
0,570 570,720 720,1080 1110,1620 1890,2400
operation and so the recovery

2130
01:13:45,580 --> 01:13:47,830
0,270 270,510 510,660 660,1200 1410,2250
demon won't do anything previous

2131
01:13:47,860 --> 01:13:48,480
0,150 150,480
to the.

2132
01:13:49,070 --> 01:13:51,500
0,270 270,600 600,870 870,1350 1710,2430
A current version number, yeah

2133
01:13:51,500 --> 01:13:53,450
0,210 210,870 870,1380 1380,1620 1620,1950
that's yeah absolutely right, so

2134
01:13:53,450 --> 01:13:54,980
0,510 510,1110 1110,1290 1290,1410 1410,1530
just summarize so we have

2135
01:13:54,980 --> 01:13:55,880
0,600
to.

2136
01:13:56,130 --> 01:13:58,050
0,420 420,750 750,1140 1140,1410 1440,1920
Logs could actually have a

2137
01:13:58,050 --> 01:13:59,520
0,660 660,1050 1050,1170 1170,1350 1350,1470
importance and we have some

2138
01:13:59,520 --> 01:14:00,860
0,240 240,540 540,1020
file system state.

2139
01:14:01,250 --> 01:14:02,720
0,480 480,660 660,840 840,1050 1050,1470
That's in the pad alright,

2140
01:14:02,720 --> 01:14:03,620
0,150 150,330 330,420 420,510 510,900
so these are the logs

2141
01:14:03,620 --> 01:14:04,610
0,120 120,390 390,630 630,690 690,990
and then here's the actual

2142
01:14:04,610 --> 01:14:05,620
0,270 270,660
file system.

2143
01:14:07,740 --> 01:14:09,390
0,540 540,780 780,1140 1140,1530 1530,1650
And a here was you

2144
01:14:09,390 --> 01:14:10,470
0,120 120,390 390,570 570,720 720,1080
know like this is director

2145
01:14:10,470 --> 01:14:12,900
0,720 720,1110 1110,1290 1890,2220 2220,2430
edu know and dr. Li

2146
01:14:12,900 --> 01:14:14,010
0,120 120,720 720,780 780,840 840,1110
was modified in the file

2147
01:14:14,010 --> 01:14:15,660
0,480 480,660 660,1140 1140,1380 1380,1650
ethnos and deleted that has

2148
01:14:15,660 --> 01:14:17,700
0,60 60,330 330,870 870,1470 1500,2040
a large number I say

2149
01:14:17,790 --> 01:14:18,860
0,540
ten.

2150
01:14:19,920 --> 01:14:21,990
0,1110 1170,1290 1290,1350 1350,1440 1440,2070
And this is a workstation

2151
01:14:21,990 --> 01:14:23,670
0,690 690,1080 1080,1440 1440,1560 1560,1680
to and here is a

2152
01:14:23,670 --> 01:14:24,520
0,540
D.

2153
01:14:24,730 --> 01:14:27,250
0,300 300,780 780,2070 2070,2370 2370,2520
Those deleting zdf MD, and

2154
01:14:27,250 --> 01:14:28,540
0,120 120,600 600,930 930,1170 1170,1290
you're creating FM d and

2155
01:14:28,540 --> 01:14:29,680
0,390 390,630 630,840 840,990 990,1140
what log number will be

2156
01:14:29,680 --> 01:14:32,400
0,90 90,480 480,1500 1860,2460
in this a entry.

2157
01:14:34,420 --> 01:14:35,800
0,480 480,720 720,1110
Version number four.

2158
01:14:37,840 --> 01:14:42,760
0,1980 3240,3960 3960,4290 4290,4740 4740,4920
{1111,,yep} basically totally ordered and

2159
01:14:42,760 --> 01:14:44,680
0,540 540,990 990,1500 1500,1590 1590,1920
locking protocols ensured they totally

2160
01:14:44,680 --> 01:14:45,420
0,390
ordered.

2161
01:14:45,620 --> 01:14:47,060
0,360 360,660 660,990 1230,1380 1380,1440
And on the in the

2162
01:14:47,060 --> 01:14:48,590
0,270 270,720 720,990 990,1080 1080,1530
file system with the metadata

2163
01:14:48,590 --> 01:14:49,940
0,480 510,750 750,840 840,1260 1260,1350
blocks like for example if

2164
01:14:49,940 --> 01:14:50,720
0,90 90,210 210,420 420,690 690,780
the I node block for

2165
01:14:50,720 --> 01:14:51,460
0,480
f.

2166
01:14:52,290 --> 01:14:53,220
0,180 180,360 360,570 570,750 750,930
A I don't have one

2167
01:14:53,220 --> 01:14:54,480
0,270 270,840 900,1080 1080,1200 1200,1260
version number is going to

2168
01:14:54,480 --> 01:14:55,700
0,150 150,360 360,450 450,960
be on the disc.

2169
01:14:55,890 --> 01:14:57,020
0,240 240,330 330,840
Or you pedal.

2170
01:15:04,490 --> 01:15:05,400
0,600
Eleven.

2171
01:15:06,000 --> 01:15:06,870
0,300 300,390 390,450 450,720 720,870
Yeah, in the case that

2172
01:15:06,870 --> 01:15:08,580
0,330 330,600 600,1140 1140,1290 1290,1710
actually the operation was applied

2173
01:15:08,580 --> 01:15:09,720
0,270 270,360 360,750 750,1050 1050,1140
to the fossils will be

2174
01:15:09,720 --> 01:15:10,960
0,510 510,810
eleventh birthday.

2175
01:15:11,540 --> 01:15:13,910
0,390 390,690 690,1260 1260,1680 1710,2370
And so when the demon.

2176
01:15:14,440 --> 01:15:16,690
0,720 750,780 810,1620 1830,2100 2100,2250
We are a what role

2177
01:15:16,690 --> 01:15:18,140
0,180 180,270 270,570 570,1170
does the deme follow.

2178
01:15:20,520 --> 01:15:22,740
0,480 480,1290 1290,1860
Never replace a.

2179
01:15:22,930 --> 01:15:24,640
0,420 420,600 600,840 840,1050 1050,1710
Something that's already been applied,

2180
01:15:25,180 --> 01:15:26,380
0,270 270,420 420,660 660,1050 1050,1200
yeah I just decided it's

2181
01:15:26,380 --> 01:15:27,220
0,480
white.

2182
01:15:28,520 --> 01:15:30,620
0,360 360,690 690,990 990,1410 1800,2100
Like getting version number version

2183
01:15:30,620 --> 01:15:31,520
0,240 270,480 480,600 600,780 780,900
number right, so if the

2184
01:15:31,520 --> 01:15:33,200
0,300 300,510 510,660 660,1050 1050,1680
version of and only replies

2185
01:15:33,200 --> 01:15:34,670
0,90 90,600 600,900 900,1170 1170,1470
an entry if the version

2186
01:15:34,670 --> 01:15:35,900
0,300 300,420 420,540 540,870 870,1230
number in the log record.

2187
01:15:37,160 --> 01:15:39,040
0,360 360,990 990,1530
Lock version number.

2188
01:15:39,380 --> 01:15:41,000
0,450 450,1140 1140,1350 1350,1440 1440,1620
Is higher than the I

2189
01:15:41,000 --> 01:15:43,340
0,360 360,810 810,1470 1560,1950 1950,2340
note whether metadata version number.

2190
01:15:45,980 --> 01:15:47,680
0,210 210,510 510,1020
You didn't reply.

2191
01:15:48,450 --> 01:15:49,340
0,480
Whatever.

2192
01:15:49,970 --> 01:15:50,930
0,210 210,270 270,420 420,870 870,960
So in this case, you

2193
01:15:50,930 --> 01:15:52,460
0,330 330,600 630,1080 1080,1410 1410,1530
know the recovery demon will

2194
01:15:52,460 --> 01:15:54,470
0,210 210,1020 1200,1590 1590,1890 1890,2010
see the version number in

2195
01:15:54,470 --> 01:15:55,610
0,240 240,540 540,750 750,870 870,1140
the log record is ten

2196
01:15:55,610 --> 01:15:57,080
0,240 240,300 300,780 780,930 930,1470
which is smaller than eleven

2197
01:15:57,380 --> 01:15:59,030
0,210 210,570 570,900 900,1110 1110,1650
were equals eleven doesn't matter

2198
01:15:59,120 --> 01:16:00,050
0,180 180,300 300,360 360,570 570,930
and so it won't replay

2199
01:16:00,050 --> 01:16:00,890
0,240 240,330 330,420 420,570 570,840
it, and so this problem

2200
01:16:00,890 --> 01:16:01,780
0,270 270,630
cannot appear.

2201
01:16:02,380 --> 01:16:04,060
0,270 270,450 450,570 570,900 900,1680
So does the ten necessarily

2202
01:16:04,060 --> 01:16:06,220
0,360 390,810 810,1590 1590,1890 1890,2160
not does it okay such

2203
01:16:06,220 --> 01:16:07,480
0,180 180,390 390,630 630,1050 1080,1260
that like that n is

2204
01:16:07,480 --> 01:16:09,490
0,240 240,450 450,600 600,1290 1320,2010
not on the ws workspace,

2205
01:16:09,490 --> 01:16:10,780
0,540 540,1020
choose log.

2206
01:16:11,850 --> 01:16:14,140
0,1290 1290,1470 1470,1620 1620,1980
Yeah it's not there.

2207
01:16:14,520 --> 01:16:15,660
0,210 210,480 480,690 690,810 810,1140
So like in the word

2208
01:16:15,660 --> 01:16:16,740
0,240 240,300 300,480 480,720 720,1080
because the work station to

2209
01:16:16,740 --> 01:16:19,890
0,1050 1080,1590 1590,2010 2010,2880 2970,3150
a road actually the I

2210
01:16:19,890 --> 01:16:22,410
0,270 270,870 1620,1950 1950,2310 2310,2520
node after march one so

2211
01:16:22,410 --> 01:16:24,600
0,210 210,990 990,1350 1350,1710 1710,2190
its version number one eleven

2212
01:16:24,780 --> 01:16:25,740
0,420 420,600 600,660 660,750 750,960
basically what you do to

2213
01:16:25,740 --> 01:16:27,990
0,360 360,480 480,990 1320,1890 1920,2250
prepare and update the version

2214
01:16:27,990 --> 01:16:29,190
0,300 300,420 420,510 510,810 810,1200
number in the update directly

2215
01:16:29,190 --> 01:16:30,900
0,90 90,780 810,1530
is always one.

2216
01:16:31,270 --> 01:16:32,680
0,690 720,840 840,930 930,1020 1020,1410
Plush you know the current

2217
01:16:32,680 --> 01:16:33,520
0,270 270,510 510,600 600,720 720,840
version number in the I

2218
01:16:33,520 --> 01:16:34,200
0,420
note.

2219
01:16:37,960 --> 01:16:38,980
0,390 420,570 570,660 660,750 750,1020
Okay, this is a small

2220
01:16:38,980 --> 01:16:40,090
0,330 330,450 450,780 780,900 900,1110
question, but what does the

2221
01:16:40,090 --> 01:16:43,540
0,210 210,540 540,810 810,1650 2730,3450
d stand for inch directory,

2222
01:16:45,220 --> 01:16:46,270
0,480 480,600 600,900 900,990 990,1050
creating a file in the

2223
01:16:46,270 --> 01:16:47,590
0,360 360,660 660,810 810,1230 1230,1320
directory d, we're deleting a

2224
01:16:47,590 --> 01:16:48,730
0,300 300,480 480,540 540,900 900,1140
file from the directory d.

2225
01:16:49,860 --> 01:16:51,420
0,300 300,390 390,780 780,960 960,1560
And the update must include

2226
01:16:51,420 --> 01:16:52,950
0,90 90,720 720,930 930,1380 1380,1530
you know some information about

2227
01:16:52,950 --> 01:16:53,760
0,60 60,480
the director.

2228
01:16:57,440 --> 01:16:59,540
0,540 780,1260 1560,1830 1830,1950 1950,2100
Okay, I'm sorry I had

2229
01:16:59,540 --> 01:17:00,980
0,60 60,210 210,690 720,1230 1260,1440
a quick question, so are

2230
01:17:00,980 --> 01:17:02,870
0,360 390,840 840,1290 1290,1500 1530,1890
their version numbers like always

2231
01:17:02,870 --> 01:17:04,100
0,390 390,540 540,630 630,1170 1170,1230
tied to the specific I

2232
01:17:04,100 --> 01:17:06,500
0,330 330,510 510,720 720,1260 1740,2400
note that's being edited, yes.

2233
01:17:07,000 --> 01:17:07,800
0,510
Okay.

2234
01:17:08,520 --> 01:17:10,320
0,780 780,1020 1020,1410 1410,1650 1650,1800
Absolutely, the diversion number for

2235
01:17:10,320 --> 01:17:11,670
0,270 270,750 780,1050 1050,1200 1200,1350
every update right like there's

2236
01:17:11,670 --> 01:17:12,990
0,30 30,300 300,600 600,810 810,1320
a version number for directory,

2237
01:17:12,990 --> 01:17:13,800
0,150 150,180 180,450 450,690 690,810
there's a version number for

2238
01:17:13,800 --> 01:17:14,970
0,60 60,390 390,690 690,870 870,1170
the file, I'm like showing

2239
01:17:14,970 --> 01:17:15,930
0,90 90,240 240,360 360,690 690,960
a little bit wrong here.

2240
01:17:16,290 --> 01:17:17,070
0,300 300,390 390,480 480,540 540,780
Like if you go back

2241
01:17:17,070 --> 01:17:18,340
0,90 90,180 180,480 480,990
to the log record.

2242
01:17:18,830 --> 01:17:21,410
0,870 1260,1680 1680,2100 2100,2280 2280,2580
Um here, basically there's array

2243
01:17:21,410 --> 01:17:23,180
0,90 90,690 690,930 930,1200 1200,1770
of updates and every update

2244
01:17:23,240 --> 01:17:24,260
0,150 150,240 240,720 720,870 870,1020
in the array, you can

2245
01:17:24,260 --> 01:17:25,550
0,240 240,540 540,780 780,1080 1080,1290
teach block number version number

2246
01:17:25,550 --> 01:17:26,540
0,90 90,150 150,300 300,780
in the new bias.

2247
01:17:28,590 --> 01:17:29,700
0,570
Thanks.

2248
01:17:32,440 --> 01:17:34,000
0,240 240,630 630,750 750,1020 1020,1560
Okay so you're stepping back

2249
01:17:34,210 --> 01:17:35,560
0,240 240,570 570,750 750,900 900,1350
and closing off the discussion

2250
01:17:35,560 --> 01:17:37,080
0,90 90,840
of newspaper.

2251
01:17:38,320 --> 01:17:39,250
0,210 210,420 420,510 510,690 690,930
It's probably the first paper

2252
01:17:39,250 --> 01:17:41,140
0,150 150,660 960,1350 1350,1500 1500,1890
that we've read that basically

2253
01:17:41,140 --> 01:17:42,310
0,60 60,300 300,360 360,660 660,1170
in order, the system itself

2254
01:17:42,310 --> 01:17:43,120
0,120 120,330 330,390 390,720 720,810
is not the one you

2255
01:17:43,120 --> 01:17:43,810
0,150 150,300 300,450 450,630 630,690
know it's not going to

2256
01:17:43,810 --> 01:17:45,010
0,60 60,510 510,810 810,900 900,1200
be dominant juice, and therefore

2257
01:17:45,010 --> 01:17:45,970
0,120 120,360 360,660 660,750 750,960
it's really interesting to talk

2258
01:17:45,970 --> 01:17:48,880
0,450 660,1290 1290,2280 2310,2820 2820,2910
about, um, but what is

2259
01:17:48,880 --> 01:17:50,050
0,300 300,540 540,660 660,1020 1020,1170
interesting about this system is

2260
01:17:50,050 --> 01:17:51,700
0,150 150,630 630,780 780,1050 1350,1650
the ideas in it and

2261
01:17:51,700 --> 01:17:54,120
0,450 480,780 780,1110 1110,1860
so cache coherence protocol.

2262
01:17:56,270 --> 01:17:57,940
0,300 300,570 570,1410
More cash assistance.

2263
01:17:58,180 --> 01:18:00,100
0,540 540,1260
C protocol.

2264
01:18:03,320 --> 01:18:05,020
0,240 240,720 720,1290
A distributed walking.

2265
01:18:07,280 --> 01:18:09,860
0,510 510,1110 1170,1830 1830,2160
Lock servers liza 's.

2266
01:18:11,000 --> 01:18:14,930
0,480 480,1230 1710,2670 2670,3120 3150,3930
A granting requiring a revoking.

2267
01:18:15,620 --> 01:18:18,580
0,780 810,1710 1710,2280
And distributed recovery.

2268
01:18:18,980 --> 01:18:20,930
0,360 360,660 660,1140 1140,1710 1710,1950
Where one workstation crashes, but

2269
01:18:20,930 --> 01:18:23,420
0,360 360,660 660,810 810,1410 1710,2490
like demon on another workstation

2270
01:18:23,420 --> 01:18:25,730
0,270 270,480 480,540 540,1260 1800,2310
actually does the recovery and

2271
01:18:25,730 --> 01:18:27,320
0,480 480,840 840,1170 1170,1320 1320,1590
what particularly interesting is that

2272
01:18:27,470 --> 01:18:28,850
0,210 210,510 510,660 660,900 900,1380
what's interesting is the interaction

2273
01:18:28,850 --> 01:18:30,260
0,240 240,300 300,600 600,1260
between the three pieces.

2274
01:18:32,140 --> 01:18:33,980
0,240 240,450 450,1230
Then they interact.

2275
01:18:35,180 --> 01:18:36,260
0,390 390,600 600,690 690,990 990,1080
And what we'll see in

2276
01:18:36,260 --> 01:18:37,490
0,90 90,480 480,570 570,690 690,1230
the next you know couple

2277
01:18:37,490 --> 01:18:39,200
0,150 150,690 810,1170 1170,1380 1380,1710
of papers a that tweet

2278
01:18:39,200 --> 01:18:40,550
0,360 360,930 930,1020 1020,1110 1110,1350
particularly not on the first

2279
01:18:40,550 --> 01:18:42,500
0,180 180,390 390,780 1320,1710 1710,1950
day but the papers after

2280
01:18:42,500 --> 01:18:43,610
0,300 480,690 690,870 870,1020 1020,1110
that which we're going to

2281
01:18:43,610 --> 01:18:44,330
0,240 240,510 510,600 600,660 660,720
talk about some of the

2282
01:18:44,330 --> 01:18:46,130
0,240 240,840 840,960 960,1230 1230,1800
heavy duty a pretty involved

2283
01:18:46,130 --> 01:18:48,110
0,510 510,1050 1230,1560 1560,1770 1770,1980
transaction systems will see these

2284
01:18:48,110 --> 01:18:49,430
0,180 180,600 600,810 810,960 960,1320
three topics that come up

2285
01:18:49,760 --> 01:18:52,040
0,990 1020,1440 1650,1860 1860,1980 1980,2280
a to and so hopefully

2286
01:18:52,040 --> 01:18:53,330
0,120 120,270 270,510 510,870 870,1290
this will help you in

2287
01:18:53,330 --> 01:18:54,980
0,210 210,750 750,1230 1230,1500 1500,1650
reading newspapers understand actually what

2288
01:18:54,980 --> 01:18:56,930
0,420 420,930 1290,1740 1740,1830 1830,1950
Kashmir exist, what's you know

2289
01:18:56,930 --> 01:18:59,780
0,270 270,780 780,1140 1140,1830 2070,2850
crash recovery is and, um,

2290
01:18:59,780 --> 01:19:01,020
0,120 120,240 240,660 660,1140
you know distributed lock.

2291
01:19:02,160 --> 01:19:03,990
0,480 480,720 720,1110 1110,1410 1410,1830
Um, and yeah probably point

2292
01:19:03,990 --> 01:19:06,150
0,570 570,1050 1050,1110 1110,1530 1740,2160
it's interesting to make is

2293
01:19:06,150 --> 01:19:07,830
0,300 300,390 390,1140 1170,1590 1590,1680
that you know pedal is

2294
01:19:07,830 --> 01:19:10,200
0,210 210,750 750,1230 1770,2250 2250,2370
really good for useful for

2295
01:19:10,200 --> 01:19:12,030
0,90 90,720 720,1170 1170,1470 1470,1830
the particular setting, they designed

2296
01:19:12,030 --> 01:19:12,740
0,120 120,450
it for.

2297
01:19:16,110 --> 01:19:18,240
0,570 570,660 660,1260 1740,2040 2040,2130
There's the performance part of

2298
01:19:18,240 --> 01:19:19,080
0,60 60,390 390,600 600,780 780,840
the papers, but hard to

2299
01:19:19,080 --> 01:19:20,220
0,450 450,720 720,870 870,1020 1020,1140
understand because it's like from

2300
01:19:20,220 --> 01:19:22,290
0,450 450,1500 1500,1740 1740,1890 1890,2070
{1999,a -} but I give

2301
01:19:22,290 --> 01:19:23,280
0,30 30,210 210,270 270,360 360,990
a look at the graph

2302
01:19:23,490 --> 01:19:25,800
0,210 210,450 450,690 690,1020 1500,2310
you'll see that the file

2303
01:19:25,800 --> 01:19:27,540
0,270 270,900 900,1170 1170,1650 1650,1740
system, basically a workload can

2304
01:19:27,540 --> 01:19:28,560
0,480 480,630 630,720 720,960 960,1020
increase with the number of

2305
01:19:28,560 --> 01:19:30,540
0,780 930,1350 1350,1470 1470,1650 1650,1980
workstations, you know that's exactly

2306
01:19:30,540 --> 01:19:33,330
0,270 270,450 450,750 750,1200 1470,2790
what we're shooting for and

2307
01:19:33,570 --> 01:19:34,950
0,330 330,570 570,810 810,990 990,1380
and they achieve that goal,

2308
01:19:35,550 --> 01:19:36,690
0,360 390,750 750,870 870,1020 1020,1140
a anyway I hope you

2309
01:19:36,690 --> 01:19:38,220
0,180 180,510 510,810 810,1320 1320,1530
find this design interesting sort

2310
01:19:38,220 --> 01:19:39,510
0,60 60,330 330,450 450,810 810,1290
of not your usual design

2311
01:19:39,510 --> 01:19:40,500
0,180 180,510 510,600 600,900 900,990
and so I hopefully will

2312
01:19:40,500 --> 01:19:41,440
0,210 210,420 420,810
have thought provoking.

2313
01:19:42,340 --> 01:19:44,350
0,630 750,1020 1020,1290 1290,1470 1470,2010
And with that I'll stop

2314
01:19:44,650 --> 01:19:46,000
0,180 180,630 630,720 720,900 930,1350
of course you know stick

2315
01:19:46,000 --> 01:19:46,570
0,240 240,300 300,390 390,510 510,570
around if you want to

2316
01:19:46,570 --> 01:19:48,610
0,210 210,330 330,930 1260,1620 1620,2040
ask more questions and otherwise

2317
01:19:48,610 --> 01:19:49,420
0,60 60,210 210,330 330,570 570,810
I'll see you first aid.

2318
01:19:53,400 --> 01:19:54,630
0,450 510,720 720,1050 1080,1200 1200,1230
Um, can I can I

2319
01:19:54,630 --> 01:19:56,850
0,300 300,420 420,1110 1110,1410 1680,2220
ask two questions, so, um,

2320
01:19:57,000 --> 01:19:58,350
0,240 240,510 510,810 810,1050 1050,1350
my first question was just

2321
01:19:58,350 --> 01:20:00,660
0,210 210,930 960,1380 1410,1770 1770,2310
in general the cache coherence

2322
01:20:00,660 --> 01:20:02,120
0,540 540,1260
protocol here.

2323
01:20:02,330 --> 01:20:04,310
0,360 360,630 630,1170 1170,1590 1590,1980
It's not half one file

2324
01:20:04,310 --> 01:20:05,140
0,600
cache.

2325
01:20:05,900 --> 01:20:08,420
0,210 210,360 360,1260 1290,1920 2040,2520
In two places right, no

2326
01:20:08,840 --> 01:20:10,730
0,660 960,1380 1380,1530 1530,1650 1650,1890
okay, um, and my other

2327
01:20:10,730 --> 01:20:13,280
0,360 360,540 540,840 840,1320 1560,2550
question was about the zehr

2328
01:20:13,280 --> 01:20:14,960
0,660 720,1410
was um.

2329
01:20:15,110 --> 01:20:17,270
0,270 270,930 930,1260 1260,1470 1470,2160
A page with the log

2330
01:20:17,420 --> 01:20:18,890
0,480 480,900 930,1110 1110,1350 1350,1470
I'm in you have the

2331
01:20:18,890 --> 01:20:22,520
0,660 690,2070 2070,2730 2910,3420 3450,3630
log records there yep let

2332
01:20:22,520 --> 01:20:24,080
0,90 90,180 180,420 420,780 1020,1560
me go back here, yeah

2333
01:20:24,080 --> 01:20:26,680
0,540 570,1200 1590,2400
yeah I'm Alice.

2334
01:20:26,970 --> 01:20:28,140
0,120 120,270 270,750 750,960 960,1170
I was wondering you said

2335
01:20:28,140 --> 01:20:29,520
0,360 390,1110
that each.

2336
01:20:30,060 --> 01:20:31,140
0,330 330,780
Each like.

2337
01:20:31,610 --> 01:20:34,340
0,150 150,900 930,1500 1500,2430
A record is atomic.

2338
01:20:35,170 --> 01:20:36,310
0,390 390,600 600,900 900,1080 1080,1140
But each record has a

2339
01:20:36,310 --> 01:20:38,920
0,360 360,480 480,1440 1650,2040 2040,2610
number of updates too right

2340
01:20:38,950 --> 01:20:41,650
0,600 630,1440 1440,2400 2400,2490 2490,2700
yes, um again I think

2341
01:20:41,650 --> 01:20:42,760
0,120 120,360 360,660 660,930 930,1110
the paper slightly vague here

2342
01:20:42,760 --> 01:20:43,810
0,180 180,510 510,660 660,720 720,1050
what exactly what it does

2343
01:20:43,840 --> 01:20:44,770
0,300 300,360 360,660 660,840 840,930
either it always fits in

2344
01:20:44,770 --> 01:20:46,060
0,630 630,1110
512 bytes.

2345
01:20:46,390 --> 01:20:47,710
0,360 360,540 540,630 630,870 870,1320
And then the single sector

2346
01:20:47,710 --> 01:20:50,380
0,690 690,1020 1020,1500 1500,2100 2100,2670
five twelve bikers is a

2347
01:20:50,380 --> 01:20:53,050
0,540 600,1170 1170,1560 1560,2340 2400,2670
atomic or they um, use

2348
01:20:53,050 --> 01:20:54,400
0,210 210,660 660,1110
this checksum trick.

2349
01:20:54,570 --> 01:20:56,550
0,600 810,1290 1290,1470 1470,1650 1650,1980
So, um, you read to

2350
01:20:56,550 --> 01:21:00,150
0,510 510,780 780,2010 2100,2670 3060,3600
five tribal beiser sectors {re-compute

2351
01:21:00,150 --> 01:21:01,800
0,630 630,1080 1080,1200 1200,1560 1560,1650
-} checksum and compare it

2352
01:21:01,800 --> 01:21:03,300
0,150 150,240 240,660 660,1020 1020,1500
with the checksum stored it's

2353
01:21:03,300 --> 01:21:04,680
0,450 450,840 870,1140 1140,1320 1320,1380
right then it must be

2354
01:21:04,680 --> 01:21:05,700
0,60 60,390 390,780
a complete record.

2355
01:21:07,390 --> 01:21:08,830
0,420 420,720 720,930 930,1050 1050,1440
Okay okay so if it's

2356
01:21:08,830 --> 01:21:09,970
0,450 450,600 600,810 810,930 930,1140
shorter than good, if it's

2357
01:21:09,970 --> 01:21:10,840
0,240 240,480 510,660 660,780 780,870
not then you do the

2358
01:21:10,840 --> 01:21:13,000
0,390 390,630 630,750 750,1140 1560,2160
trick, okay I see yeah

2359
01:21:13,000 --> 01:21:14,140
0,60 60,240 240,420 420,840 840,1140
I'm not sure whether Dr

2360
01:21:14,140 --> 01:21:16,380
0,90 90,420 1140,1980
we do, okay.

2361
01:21:16,660 --> 01:21:18,310
0,480 540,900 900,990 990,1140 1140,1650
Okay, thank you so much,

2362
01:21:18,310 --> 01:21:19,860
0,210 210,630
you're welcome.

2363
01:21:22,090 --> 01:21:23,560
0,210 210,420 420,1230
Any more questions.

2364
01:21:29,260 --> 01:21:31,510
0,390 390,600 600,690 690,1110 1320,2250
Um, if you go back

2365
01:21:31,540 --> 01:21:34,570
0,180 180,870 1020,1470 1470,2520 2520,3030
or forward three slides, yep.

2366
01:21:35,210 --> 01:21:36,580
0,420 450,570 570,1110
Here, it was.

2367
01:21:36,910 --> 01:21:38,080
0,270 270,270 270,780 780,1050 1050,1170
Oh, um, maybe back one

2368
01:21:38,080 --> 01:21:39,580
0,510 540,840 840,930 930,1290 1290,1500
slide, there's a section where

2369
01:21:39,580 --> 01:21:41,040
0,180 180,480 480,750 750,1140
you talked about how.

2370
01:21:41,330 --> 01:21:42,080
0,450
IF.

2371
01:21:42,320 --> 01:21:44,420
0,450 960,1380 1380,1800 1800,2010 2010,2100
A crash happens during the

2372
01:21:44,420 --> 01:21:45,320
0,330 330,420 420,510 510,810 810,900
middle of a right and

2373
01:21:45,320 --> 01:21:46,460
0,90 90,240 240,390 390,690 690,1140
we get like yeah prefix

2374
01:21:46,460 --> 01:21:48,290
0,90 90,180 180,720 1140,1440 1440,1830
in the log log that's

2375
01:21:48,290 --> 01:21:49,370
0,210 210,540 540,630 630,990 990,1080
like okay or something do

2376
01:21:49,370 --> 01:21:50,630
0,90 90,270 270,750 750,930 930,1260
you mind repeating what you

2377
01:21:50,630 --> 01:21:52,670
0,300 300,690 960,1470 1470,1650 1650,2040
meant there yeah okay so

2378
01:21:52,670 --> 01:21:54,860
0,780 1110,1590 1620,1860 1860,1980 1980,2190
um, so let's go back

2379
01:21:54,860 --> 01:21:55,760
0,90 90,270 270,510 510,810 810,900
to this last picture I

2380
01:21:55,760 --> 01:21:58,940
0,180 180,660 1680,2460 2640,3000 3000,3180
just shoot blah here, so

2381
01:21:58,940 --> 01:22:01,940
0,390 390,600 600,870 870,1230 1530,3000
we have our so yeah.

2382
01:22:02,480 --> 01:22:03,560
0,270 270,510 510,840 840,990 990,1080
Work stage one could have

2383
01:22:03,560 --> 01:22:05,030
0,450 450,780 780,990 990,1230 1230,1470
executed many, many file system

2384
01:22:05,030 --> 01:22:06,920
0,480 480,840 1350,1590 1590,1800 1800,1890
operations, great, each one of

2385
01:22:06,920 --> 01:22:08,930
0,960 960,1410 1410,1710 1710,1920 1920,2010
them described by one of

2386
01:22:08,930 --> 01:22:10,160
0,150 150,510 510,780 780,900 900,1230
these lock by an entry

2387
01:22:10,160 --> 01:22:11,690
0,60 60,150 150,540 1050,1320 1320,1530
in the wok, so like

2388
01:22:11,690 --> 01:22:12,980
0,120 120,510 510,990 990,1080 1080,1290
the first entry it might

2389
01:22:12,980 --> 01:22:14,150
0,120 120,420 420,660 660,960 960,1170
be creating file F A

2390
01:22:14,150 --> 01:22:15,260
0,300 300,660 660,750 750,840 840,1110
second entry in the log

2391
01:22:15,260 --> 01:22:16,700
0,240 240,420 420,720 720,1320 1320,1440
might be crane 5G you

2392
01:22:16,700 --> 01:22:17,660
0,150 150,480 480,540 540,780 780,960
know whatever the third one

2393
01:22:17,660 --> 01:22:19,550
0,180 180,720 720,1140 1140,1530 1530,1890
my creating deleting file f.

2394
01:22:20,140 --> 01:22:21,130
0,210 210,420 420,600 600,750 750,990
And so there's a whole

2395
01:22:21,130 --> 01:22:23,140
0,360 360,450 450,960 960,1200 1200,2010
sequence of operations because remember

2396
01:22:23,170 --> 01:22:24,910
0,150 150,630 630,810 810,1080 1080,1740
the workspace just keeps executing

2397
01:22:24,910 --> 01:22:28,060
0,480 510,720 720,960 960,1710 2190,3150
a file system operations, um,

2398
01:22:28,060 --> 01:22:29,320
0,150 150,360 360,510 510,810 810,1260
as long as animals walks

2399
01:22:29,320 --> 01:22:30,610
0,180 180,630 630,930 930,1170 1170,1290
and nobody else wants to

2400
01:22:30,610 --> 01:22:31,340
0,570
watch.

2401
01:22:31,590 --> 01:22:32,820
0,300 300,480 480,690 690,1080 1080,1230
And so the work could

2402
01:22:32,820 --> 01:22:34,680
0,360 360,960 990,1410 1410,1470 1470,1860
be a contained a whole

2403
01:22:34,680 --> 01:22:37,020
0,690 720,990 990,1320 1320,1590 1590,2340
bunch of file system operations

2404
01:22:37,110 --> 01:22:38,370
0,270 270,420 420,720 720,990 990,1260
now for each file system

2405
01:22:38,370 --> 01:22:39,870
0,450 450,570 570,660 660,1140 1140,1500
operation for each individual one,

2406
01:22:39,900 --> 01:22:41,160
0,240 240,300 300,600 600,1050
there's a log record.

2407
01:22:42,180 --> 01:22:43,890
0,630 750,870 870,1200 1200,1620 1620,1710
And the log records, you

2408
01:22:43,890 --> 01:22:46,080
0,420 480,1200 1200,1590 1590,2010 2010,2190
know eyes, the atomic file

2409
01:22:46,080 --> 01:22:47,580
0,240 240,720 720,1290 1290,1410 1410,1500
system operations description of the

2410
01:22:47,580 --> 01:22:48,480
0,420 420,570 570,720 720,780 780,900
changes that need to be

2411
01:22:48,480 --> 01:22:49,560
0,270 270,360 360,480 480,720 720,1080
made to the actual files

2412
01:22:49,560 --> 01:22:52,260
0,120 120,660 840,1320 1320,2070 2100,2700
to watch to a reflect

2413
01:22:52,290 --> 01:22:54,020
0,480 480,690 690,930 930,1470
that file system operation.

2414
01:22:54,590 --> 01:22:55,700
0,240 240,360 360,510 510,660 660,1110
And so what could happen,

2415
01:22:55,700 --> 01:22:58,490
0,270 270,570 570,960 1200,2010 2130,2790
right is that a revolt

2416
01:22:58,490 --> 01:23:00,950
0,300 300,570 570,1020 1140,1920 1950,2460
message comes in the workstation,

2417
01:23:00,950 --> 01:23:02,660
0,300 300,630 630,960 960,1140 1140,1710
one starts writing its log,

2418
01:23:02,690 --> 01:23:04,310
0,90 90,210 210,900 900,1080 1080,1620
you know to a pedal

2419
01:23:04,550 --> 01:23:05,630
0,360 360,480 480,690 690,930 930,1080
but it just doesn't get

2420
01:23:05,630 --> 01:23:06,380
0,60 60,360 360,540 540,630 630,750
the whole way to the

2421
01:23:06,380 --> 01:23:07,430
0,270 270,420 420,600 600,930 930,1050
end, it just happens to

2422
01:23:07,430 --> 01:23:08,330
0,390 390,540 540,780 780,840 840,900
crash like somewhere in the

2423
01:23:08,330 --> 01:23:10,850
0,330 360,660 660,1230 1530,1980 2370,2520
middle like anywhere right in

2424
01:23:10,850 --> 01:23:13,130
0,360 360,960 960,1380 1380,2040 2040,2280
that case, the prefix of

2425
01:23:13,130 --> 01:23:14,930
0,330 360,900 900,1440 1470,1650 1650,1800
the workstation Wang is on

2426
01:23:14,930 --> 01:23:15,600
0,90 90,600
the desk.

2427
01:23:16,870 --> 01:23:18,040
0,240 240,420 420,870
We're in pedal.

2428
01:23:18,530 --> 01:23:19,970
0,540 540,900 900,1050 1050,1320 1320,1440
Um, and that means that

2429
01:23:19,970 --> 01:23:21,470
0,360 360,480 480,930 930,1200 1200,1500
basically the last couple files

2430
01:23:21,470 --> 01:23:22,940
0,180 180,660 660,720 720,960 960,1470
from operation or just watched.

2431
01:23:27,370 --> 01:23:29,200
0,270 270,570 570,960 990,1560 1560,1830
And only the prefix will

2432
01:23:29,200 --> 01:23:30,240
0,150 150,690
be replaced.

2433
01:23:31,300 --> 01:23:32,170
0,240 240,480 480,600 600,720 720,870
I see and we're just

2434
01:23:32,170 --> 01:23:33,790
0,210 210,450 450,930 1170,1380 1380,1620
saying that's okay, yeah we're

2435
01:23:33,790 --> 01:23:35,020
0,360 360,540 540,930
accepting that outcome.

2436
01:23:35,690 --> 01:23:36,920
0,270 270,390 390,600 600,810 900,1230
Got it, thank you because

2437
01:23:36,920 --> 01:23:37,940
0,120 120,330 330,720 720,810 810,1020
we're already accepted to that

2438
01:23:37,940 --> 01:23:39,470
0,270 270,840 870,1260 1260,1380 1380,1530
outcome earlier because it could

2439
01:23:39,470 --> 01:23:40,940
0,570 570,690 690,870 870,1230 1230,1470
indicate that we've got the

2440
01:23:40,940 --> 01:23:43,400
0,210 210,480 480,810 1530,1920 1920,2460
file system crashed right before

2441
01:23:43,400 --> 01:23:44,270
0,180 180,390 390,660 660,720 720,870
or right after you got

2442
01:23:44,270 --> 01:23:45,380
0,90 90,510 510,840 840,990 990,1110
the revoke message but it

2443
01:23:45,380 --> 01:23:46,490
0,180 180,360 360,570 570,840 840,1110
actually didn't write any log

2444
01:23:46,490 --> 01:23:48,640
0,480 540,780 780,1440 1500,1920
entries get to pedal.

2445
01:23:56,790 --> 01:23:58,020
0,240 240,390 390,930
Any more questions.

2446
01:23:58,500 --> 01:23:59,180
0,390
.

2447
01:24:01,880 --> 01:24:03,800
0,180 180,420 420,690 690,1260 1260,1920
I have a completely unrelated

2448
01:24:03,830 --> 01:24:06,980
0,750 1590,2310 2370,2790 2790,3030 3030,3150
question, a two eight to

2449
01:24:06,980 --> 01:24:09,080
0,450 450,1110 1290,1560 1560,1710 1710,2100
four but I was wondering

2450
01:24:09,080 --> 01:24:11,450
0,240 240,360 360,840 1110,1740 1770,2370
if you knew a anything

2451
01:24:11,450 --> 01:24:12,980
0,630 630,900 900,1170 1170,1260 1260,1530
about a six eight five

2452
01:24:12,980 --> 01:24:14,810
0,540 570,870 870,1050 1050,1320 1320,1830
eight a for next semester

2453
01:24:14,810 --> 01:24:16,220
0,90 90,300 300,720 720,1290 1290,1410
I saw professor salvage is

2454
01:24:16,220 --> 01:24:18,020
0,120 120,180 180,360 360,960 1320,1800
going to be teaching a

2455
01:24:18,080 --> 01:24:20,720
0,630 630,1080 1080,1380 1380,2130 2130,2640
six eso eight sixty yeah

2456
01:24:20,720 --> 01:24:22,250
0,150 150,330 330,870 900,1170 1170,1530
I think we're a weak

2457
01:24:22,250 --> 01:24:23,960
0,240 240,420 420,540 540,930 930,1710
current plan does not offer

2458
01:24:23,960 --> 01:24:25,640
0,150 150,390 390,570 570,930 930,1680
a five eight in the.

2459
01:24:26,240 --> 01:24:29,510
0,840 1200,1950 1980,2370 2370,2520 2520,3270
Fall, um but we're hoping

2460
01:24:29,510 --> 01:24:30,710
0,570 570,930 930,1020 1020,1140 1140,1200
to offer it in the

2461
01:24:30,710 --> 01:24:31,440
0,390
spring.

2462
01:24:31,790 --> 01:24:33,380
0,510 540,1050 1110,1410 1410,1500 1500,1590
Okay, awesome, um do you

2463
01:24:33,380 --> 01:24:35,870
0,120 120,510 600,960 960,1260 1740,2490
know what {660 - -}

2464
01:24:35,900 --> 01:24:37,190
0,360 360,540 540,720 720,1020 1020,1290
S I I couldn't find

2465
01:24:37,190 --> 01:24:42,410
0,240 240,840 840,2430 2430,4230 4950,5220
much information for yeah that's

2466
01:24:42,410 --> 01:24:43,910
0,60 60,180 180,600 810,1350 1350,1500
a good question, um, it's

2467
01:24:43,910 --> 01:24:47,210
0,450 450,540 540,900 900,2220 2220,3300
intended to be a undergraduate

2468
01:24:47,210 --> 01:24:47,820
0,480
class.

2469
01:24:48,380 --> 01:24:49,260
0,660
Okay.

2470
01:24:49,560 --> 01:24:50,740
0,480 510,870
Okay, let's.

2471
01:24:51,320 --> 01:24:52,820
0,300 300,480 480,750 750,930 930,1500
So at six eight five

2472
01:24:52,820 --> 01:24:54,890
0,570 600,870 870,1140 1140,1410 1410,2070
six eight five eight but,

2473
01:24:55,100 --> 01:24:57,800
0,510 750,1590 1920,2280 2280,2490 2490,2700
um undergrad, you know sort

2474
01:24:57,800 --> 01:25:00,470
0,90 90,270 270,1470 2190,2610 2610,2670
of like a maybe an

2475
01:25:00,470 --> 01:25:01,580
0,390 390,480 480,750 750,960 960,1110
intro to both six eight

2476
01:25:01,580 --> 01:25:02,780
0,210 210,570 570,840 840,990 990,1200
five seven six eight five

2477
01:25:02,780 --> 01:25:03,300
0,270
eight.

2478
01:25:04,960 --> 01:25:06,180
0,660
Okay.

2479
01:25:06,540 --> 01:25:07,860
0,300 300,390 390,1020
What's the number.

2480
01:25:08,070 --> 01:25:09,540
0,300 300,450 450,600 600,1170 1170,1470
A it's an experimental number,

2481
01:25:09,540 --> 01:25:10,620
0,90 90,240 240,300 300,450 450,1080
it's one of these experimental

2482
01:25:10,620 --> 01:25:11,880
0,420 420,480 480,720 720,930 930,1260
because the clause doesn't exist

2483
01:25:11,880 --> 01:25:13,560
0,510 930,1140 1140,1260 1260,1380 1380,1680
yet and will be offered

2484
01:25:13,560 --> 01:25:14,490
0,420 420,540 540,660 660,750 750,930
for you know the goal

2485
01:25:14,490 --> 01:25:15,120
0,90 90,150 150,420 420,510 510,630
is to offer it for

2486
01:25:15,120 --> 01:25:15,810
0,60 60,360 360,540 540,600 600,690
the first time in the

2487
01:25:15,810 --> 01:25:16,440
0,390
fall.

2488
01:25:17,530 --> 01:25:19,500
0,840 1080,1680
Okay, I'm.

2489
01:25:20,060 --> 01:25:21,380
0,420 420,630 630,900 900,1110 1110,1320
So, is it gonna be

2490
01:25:21,380 --> 01:25:23,690
0,510 510,990 990,1230 1230,1650 2100,2310
mostly content from like is

2491
01:25:23,690 --> 01:25:25,070
0,150 150,390 390,570 570,840 990,1380
eight five eight gonna keep

2492
01:25:25,070 --> 01:25:26,600
0,180 180,630 630,1140 1140,1380 1380,1530
its original form, or is

2493
01:25:26,600 --> 01:25:29,570
0,240 330,1410 2130,2640 2640,2880 2880,2970
it eyes you're asking me

2494
01:25:29,570 --> 01:25:31,580
0,390 390,420 420,750 750,1110 1110,2010
questions I don't sorry yeah

2495
01:25:31,610 --> 01:25:36,200
0,2400 2430,2850 2850,3960 3960,4200 4200,4590
I think z people involved

2496
01:25:36,200 --> 01:25:37,760
0,180 180,900 900,1110 1110,1470 1470,1560
in a in designing the

2497
01:25:37,760 --> 01:25:38,960
0,330 330,780 810,1050 1050,1170 1170,1200
class are people that are

2498
01:25:38,960 --> 01:25:40,010
0,300 300,390 390,510 510,720 720,1050
involved in a five seven

2499
01:25:40,010 --> 01:25:40,880
0,180 180,240 240,510 510,810 810,870
and the people involved in

2500
01:25:40,880 --> 01:25:42,230
0,90 90,300 300,720 720,1140 1140,1350
a fight, yeah I'm not

2501
01:25:42,230 --> 01:25:43,080
0,240 240,750
actually involved.

2502
01:25:43,280 --> 01:25:44,900
0,540 570,810 810,1080 1080,1350 1350,1620
Okay, yet another reason but

2503
01:25:45,140 --> 01:25:47,300
0,720 990,1530 1530,1860 1860,2070 2070,2160
um and they're trying to

2504
01:25:47,300 --> 01:25:48,110
0,180 180,300 300,390 390,450 450,810
work out with the curriculum

2505
01:25:48,110 --> 01:25:49,040
0,360 360,450 450,570 570,630 630,930
exactly it's going to be

2506
01:25:49,040 --> 01:25:49,820
0,150 150,330 330,420 420,690 690,780
and then of course he's

2507
01:25:49,820 --> 01:25:50,930
0,120 120,180 180,330 330,540 540,1110
going to have some calculations

2508
01:25:50,930 --> 01:25:52,010
0,300 300,390 390,630 630,960 960,1080
four eight five eight eight

2509
01:25:52,010 --> 01:25:52,740
0,180 180,450
five seven.

2510
01:25:53,580 --> 01:25:55,380
0,570 780,1170 1170,1500
Okay, sounds good.

2511
01:25:55,630 --> 01:25:56,650
0,270 270,540 540,660 660,840 840,1020
But if I ate any

2512
01:25:56,650 --> 01:25:57,610
0,390 390,510 510,660 660,840 840,960
traction, I'm not gonna go

2513
01:25:57,610 --> 01:25:59,740
0,390 930,1320 1320,1800
away, that's the.

2514
01:26:01,960 --> 01:26:04,360
0,630 870,1020 1020,1170 1170,1440 2130,2400
Thanks, you want to have

2515
01:26:04,360 --> 01:26:06,040
0,450 660,1410 1410,1530 1530,1620 1620,1680
a question I don't know

2516
01:26:06,040 --> 01:26:07,150
0,120 120,390 390,480 480,690 690,1110
how quick it is, but

2517
01:26:07,630 --> 01:26:09,190
0,540 540,750 750,870 870,1410 1410,1560
um in the paper, at

2518
01:26:09,190 --> 01:26:11,470
0,180 180,420 420,750 1050,1650 1650,2280
the end of page, um,

2519
01:26:12,190 --> 01:26:14,320
0,840 840,990 990,1260 1260,1620 1620,2130
like right before section seven

2520
01:26:14,470 --> 01:26:16,540
0,420 420,750 750,1230 1230,1320 1320,2070
they talk about a case

2521
01:26:16,660 --> 01:26:18,240
0,300 300,840 840,1410
a failure where.

2522
01:26:18,520 --> 01:26:19,990
0,480 480,750 750,960 960,1140 1140,1470
Um with like the lease

2523
01:26:19,990 --> 01:26:21,760
0,780 780,1140 1140,1230 1230,1560 1560,1770
expiring and the server, not

2524
01:26:21,760 --> 01:26:24,040
0,180 180,870 1080,1530 1650,1950 1950,2280
really crashing yeah, and then

2525
01:26:24,040 --> 01:26:26,700
0,330 330,900 930,1590 1650,2400
talk about like um.

2526
01:26:26,970 --> 01:26:28,560
0,570 570,840 840,1110 1110,1320 1320,1590
Basically that there's no real

2527
01:26:28,560 --> 01:26:32,520
0,510 990,2700 2700,3660 3660,3750 3750,3960
{solution's -} heirs or real

2528
01:26:32,520 --> 01:26:36,440
0,510 510,2010 2520,2880 2880,3600
solution in human intervention.

2529
01:26:36,730 --> 01:26:37,960
0,420 420,690 720,930 930,1080 1080,1230
Yeah okay so I think

2530
01:26:37,960 --> 01:26:38,680
0,60 60,330 330,570 570,630 630,720
the problem here in the

2531
01:26:38,680 --> 01:26:39,850
0,570 570,780 780,870 870,1080 1080,1170
alienation of the theme of

2532
01:26:39,850 --> 01:26:40,690
0,90 90,330 330,540 540,690 690,840
the paper works like a

2533
01:26:40,690 --> 01:26:42,430
0,480 480,690 690,1290 1290,1410 1410,1740
pedal and frangipani are designed

2534
01:26:42,430 --> 01:26:44,470
0,780 1170,1500 1500,1650 1650,1980 1980,2040
independently and that has a

2535
01:26:44,470 --> 01:26:46,330
0,150 150,210 210,450 450,1200 1470,1860
lot of nice properties, um,

2536
01:26:46,330 --> 01:26:46,990
0,150 150,300 300,390 390,570 570,660
and this is going to

2537
01:26:46,990 --> 01:26:48,250
0,180 180,420 420,660 660,1050 1050,1260
wear one one place where

2538
01:26:48,250 --> 01:26:49,480
0,90 90,240 240,300 300,600 600,1230
it would be very helpful,

2539
01:26:49,480 --> 01:26:50,770
0,420 420,660 660,870 870,1140 1140,1290
hopefully that your pedal has

2540
01:26:50,770 --> 01:26:52,870
0,150 150,810 1080,1170 1170,1500 1500,2100
some support to help frangipani

2541
01:26:52,870 --> 01:26:53,500
0,90 90,450
a walk.

2542
01:26:53,760 --> 01:26:55,500
0,660 750,1020 1020,1410 1410,1530 1530,1740
And that support would be

2543
01:26:55,500 --> 01:26:56,610
0,270 270,480 480,540 540,780 780,1110
actually half a time, stamp

2544
01:26:56,610 --> 01:26:58,110
0,150 150,300 300,870 900,1080 1080,1500
on the right to pedal

2545
01:26:58,110 --> 01:26:59,310
0,120 120,390 420,690 690,810 810,1200
so that people could see

2546
01:26:59,310 --> 01:27:00,270
0,180 180,240 240,570 570,870 870,960
when I write actually is

2547
01:27:00,270 --> 01:27:02,100
0,300 360,990 990,1440
out basically tool.

2548
01:27:04,010 --> 01:27:04,920
0,630
Okay.

2549
01:27:05,120 --> 01:27:06,290
0,210 210,510 510,660 660,810 810,1170
So unless you do that

2550
01:27:06,290 --> 01:27:07,310
0,120 120,330 330,450 450,720 720,1020
you need to like fiddle

2551
01:27:07,310 --> 01:27:08,720
0,390 390,510 510,690 690,780 780,1410
around with like the margin.

2552
01:27:10,790 --> 01:27:11,700
0,630
Okay.

2553
01:27:11,920 --> 01:27:13,810
0,150 150,330 330,780 780,1230 1230,1890
And what happens if a.

2554
01:27:14,610 --> 01:27:18,060
0,1290 1530,1950 1980,2280 2280,2940 2940,3450
Like that error occurs like.

2555
01:27:18,760 --> 01:27:19,750
0,480 480,540 540,660 660,930 930,990
Outside of the bounds of

2556
01:27:19,750 --> 01:27:21,370
0,60 60,600 990,1230 1230,1500 1500,1620
the margin a it'll be

2557
01:27:21,370 --> 01:27:24,670
0,240 240,660 1230,3000 3000,3120 3120,3300
that's cool, basically you get

2558
01:27:24,670 --> 01:27:26,200
0,90 90,570 570,1050 1050,1200 1200,1530
an older brides you show

2559
01:27:26,200 --> 01:27:28,810
0,210 210,360 360,720 1140,2130 2220,2610
up in the basically somebody

2560
01:27:28,810 --> 01:27:29,740
0,210 210,360 360,450 450,690 690,930
else might have that point

2561
01:27:29,740 --> 01:27:30,700
0,240 240,330 330,720 750,870 870,960
gotten the lock on the

2562
01:27:30,700 --> 01:27:32,170
0,360 360,720 720,1050 1050,1320 1320,1470
file correctly started writing to

2563
01:27:32,170 --> 01:27:33,280
0,240 300,600 600,780 780,900 900,1110
it and then there's old

2564
01:27:33,280 --> 01:27:34,660
0,240 240,480 480,720 720,810 810,1380
right shows up and basically

2565
01:27:34,690 --> 01:27:35,770
0,240 240,330 330,720 720,870 870,1080
zoom, we overwrite some part

2566
01:27:35,770 --> 01:27:36,180
0,60 60,210
of it.

2567
01:27:37,210 --> 01:27:38,100
0,630
Okay.

2568
01:27:38,870 --> 01:27:40,460
0,240 240,360 360,600 600,1290
So we'll break consistency.

2569
01:27:42,460 --> 01:27:44,700
0,360 360,630 630,930
So, thank you.

2570
01:27:49,280 --> 01:27:50,280
0,750
Okay.

2571
01:27:51,740 --> 01:27:53,120
0,300 300,420 420,720 720,1080
Because we'll stop that.

2572
01:27:55,370 --> 01:27:56,360
0,690
Haha.
