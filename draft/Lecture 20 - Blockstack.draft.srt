1
00:00:00,120 --> 00:00:01,560
0,270 270,450 450,720
Okay, thank you.|
好的谢谢。|

2
00:00:01,820 --> 00:00:03,560
0,210 210,420 420,930 1200,1530 1530,1740
Okay, so {} that's, good
好的，那就是，下午好，早上好，晚上好，晚安，无论你在哪里，

3
00:00:03,560 --> 00:00:05,390
0,600 630,840 840,1260 1290,1530 1530,1830
afternoon, good morning, good evening,

4
00:00:05,390 --> 00:00:06,410
0,150 150,330 330,540 540,660 660,1020
good night, wherever you are,|
|

5
00:00:06,530 --> 00:00:08,720
0,480 1080,1320 1320,1530 1530,1680 1680,2190
{} and I guess welcome
我想欢迎来到本学期的最后一周，

6
00:00:08,720 --> 00:00:09,770
0,120 120,330 360,750 750,960 960,1050
to the last week of

7
00:00:09,770 --> 00:00:11,600
0,90 90,810 1110,1320 1320,1650 1650,1830
the semester,| so there's two
|所以今天还有两次班会，

8
00:00:11,600 --> 00:00:13,670
0,240 240,540 540,1050 1350,1860 1860,2070
more class meetings today,| which
|我们将要讨论的是块堆栈

9
00:00:13,670 --> 00:00:14,750
0,180 180,330 330,390 390,810 810,1080
we're gonna be talking about

10
00:00:14,750 --> 00:00:17,330
0,240 240,690 1230,1680 1680,1920 1920,2580
{Blockstack -}| and on Thursday
|周四我们收到一份来自不同项目的报告，

11
00:00:17,330 --> 00:00:19,880
0,630 630,1500 1950,2220 2220,2400 2400,2550
{} we {} we get

12
00:00:19,880 --> 00:00:21,350
0,60 60,450 450,810 810,1110 1140,1470
a report from a different

13
00:00:21,350 --> 00:00:22,490
0,450 450,780 780,870 870,1050 1050,1140
projects,| from the number of
|来自6.824年度项目组的数量。

14
00:00:22,490 --> 00:00:24,290
0,90 90,420 420,750 750,1500 1530,1800
the project groups in {6.824

15
00:00:24,290 --> 00:00:24,940
0,120 120,210 210,510
- - -}.|
|

16
00:00:25,590 --> 00:00:27,000
0,120 120,510 600,990 990,1290 1290,1410
And so, {} today is
因此，今天基本上是最后一篇论文讨论。

17
00:00:27,000 --> 00:00:29,670
0,420 420,870 900,1530 1560,1950 1950,2670
basically the last paper discussion.|
|

18
00:00:29,790 --> 00:00:30,720
0,630

19
00:00:30,950 --> 00:00:33,560
0,1860 1860,1950 1950,2040 2040,2370 2370,2610
{} So the topic is,
所以主题是，你知道这个系统，

20
00:00:33,560 --> 00:00:34,880
0,570 600,720 720,840 840,990 990,1320
{} you know the system,|
|

21
00:00:34,880 --> 00:00:37,700
0,570 1500,1770 1770,1980 1980,2460 2640,2820
that we're assigned for, assigned
分配给我们的，分配给我们读取的，这是块堆栈，

22
00:00:37,700 --> 00:00:39,020
0,90 90,420 420,660 660,990 990,1320
for reading, which is blockstack,|
|

23
00:00:39,940 --> 00:00:41,080
0,180 180,480 480,630 630,900 900,1140
and really {blockstack -} that
而真正代表的是块堆栈

24
00:00:41,110 --> 00:00:44,500
0,1170 1380,2070 2070,2160 2160,2880 2940,3390
represents is| an approach to
|一种构建分散应用程序的方法，

25
00:00:44,500 --> 00:00:47,620
0,600 600,1890
building decentralized

26
00:00:49,160 --> 00:00:55,130
0,1050 4410,4920 4920,5130 5130,5820 5820,5970
applications,| and with decentralized, what
|而对于去中心化，我们这里的意思是，

27
00:00:55,130 --> 00:00:56,840
0,120 120,390 390,810 810,1110 1110,1710
we mean here is that,|
|

28
00:00:57,110 --> 00:00:59,420
0,570 570,840 840,1350 1350,1950 2100,2310
{} unlike conceptualized websites, this
与概念化的网站不同，这个网站拥有数据

29
00:00:59,420 --> 00:01:01,130
0,600 600,840 840,930 930,1260 1260,1710
website owns the data| and
|和分散的应用，应用，系统以一种方式设置，

30
00:01:01,130 --> 00:01:04,430
0,600 600,1170 1170,1950 1950,2280 2880,3300
decentralized application, application, the system

31
00:01:04,430 --> 00:01:05,000
0,90 90,270 270,390 390,480 480,570
is set up in a

32
00:01:05,000 --> 00:01:06,170
0,300 300,480 480,570 570,900 900,1170
way,| that the users actually
|用户实际上控制的是数据而不是网站。

33
00:01:06,170 --> 00:01:07,610
0,180 180,780 780,990 990,1080 1080,1440
keep control over the data

34
00:01:07,940 --> 00:01:09,280
0,420 420,600 600,660 660,1260
and not the website.|
|

35
00:01:09,750 --> 00:01:10,860
0,330 330,510 510,840 840,1020 1020,1110
So this form sort of
这是最后一个趋势，这是关于分散化分布式系统的三节课的最后一课，

36
00:01:10,860 --> 00:01:12,750
0,660 660,1020 1020,1170 1170,1230 1230,1890
a trend in the last

37
00:01:12,750 --> 00:01:14,460
0,120 120,390 390,690 690,1320 1320,1710
is the final lecture series

38
00:01:14,460 --> 00:01:16,770
0,90 90,270 270,690 690,1260 1260,2310
of three lectures on decentralized

39
00:01:16,770 --> 00:01:18,690
0,450 450,1020 1020,1290 1290,1560 1560,1920
distributed systems,| we talk about
|我们谈到日志，签名或签名日志是构建这种分散的日志存储系统的一种方式，

40
00:01:19,230 --> 00:01:21,930
0,1230 1230,1620 1620,2250 2250,2430 2430,2700
logs and signing or sign

41
00:01:21,930 --> 00:01:22,920
0,330 330,420 420,540 540,810 810,990
log is a way of

42
00:01:22,920 --> 00:01:24,960
0,660 660,1200 1200,1560 1560,1740 1740,2040
constructing this decentralized log storage

43
00:01:24,960 --> 00:01:27,090
0,630 690,1260 1260,1470 1470,1650 1650,2130
systems,| {} we saw Bitcoin
|我们将比特币视为一个例子，

44
00:01:27,090 --> 00:01:28,470
0,150 150,600 600,990 990,1320 1320,1380
to see {} as an

45
00:01:28,470 --> 00:01:29,970
0,480 480,540 540,1080 1200,1410 1410,1500
example of,| how you can
|如何在委托参与者或拜占庭参与者的去中心化系统中达成共识，

46
00:01:29,970 --> 00:01:32,370
0,780 780,1590 1680,2010 2010,2250 2250,2400
achieve consensus {} in {}

47
00:01:32,370 --> 00:01:34,080
0,390 390,540 540,990 990,1170 1170,1710
{decentralized -} systems with entrusted

48
00:01:34,080 --> 00:01:36,420
0,330 510,1140 1140,1260 1260,1680 1680,2340
to participants or byzantine participants,|
|

49
00:01:36,750 --> 00:01:38,430
0,270 270,390 390,1050 1050,1410 1410,1680
and so today we're taking
所以今天我们又向前迈进了一步

50
00:01:38,430 --> 00:01:39,480
0,240 240,480 480,720 720,930 930,1050
one more step up| and
|并实际了解如何实际构建完整的应用程序

51
00:01:39,480 --> 00:01:40,590
0,330 330,510 510,660 660,1020 1020,1110
actually look at how you

52
00:01:40,590 --> 00:01:42,810
0,120 120,390 390,900 1140,1500 1500,2220
can actually build complete applications|
|

53
00:01:42,870 --> 00:01:45,240
0,420 420,600 600,1020 1050,1980 2010,2370
other than just crypto currency
而不仅仅是加密货币应用。

54
00:01:45,240 --> 00:01:46,000
0,690
applications.|
|

55
00:01:47,010 --> 00:01:48,240
0,120 120,630 630,1050 1050,1170 1170,1230
The decentralized application has a
去中心化应用有很长的历史，

56
00:01:48,240 --> 00:01:52,140
0,210 210,720 1020,1560 1560,2070 2070,3900
long history,| {} in the
|在2000年90年代末，

57
00:01:52,140 --> 00:01:53,580
0,660 660,1110 1110,1230 1230,1350 1350,1440
{2000,,late} 90s,| there was a
|围绕点对点应用程序有很多事情要做，

58
00:01:53,580 --> 00:01:55,680
0,330 570,660 660,840 840,1290 1320,2100
lot to do around peer-to-peer

59
00:01:55,680 --> 00:01:58,290
0,870 1410,1890 1890,2190 2190,2490 2490,2610
applications,| {} which had a
|它有一个分散的架构，纳普斯特，

60
00:01:58,290 --> 00:02:01,650
0,390 390,570 570,1380 1410,2130 2430,3360
{decentralized -} architecture, Napster, {}|
|

61
00:02:01,650 --> 00:02:03,480
0,120 120,210 210,570 570,1350 1410,1830
you know, more recently, {}
你知道，最近，你可能对密钥库很熟悉，

62
00:02:03,480 --> 00:02:04,830
0,210 240,600 600,990 990,1140 1140,1350
you're probably familiar with {keybase

63
00:02:04,830 --> 00:02:06,690
0,570 960,1230 1230,1500 1500,1770 1770,1860
-},| {} which has a
|它有一个分散的设计或坚固的你知道的，当然还有积木堆栈，

64
00:02:06,690 --> 00:02:09,330
0,360 360,600 600,1290 1380,2220 2220,2640
{decentralized -} design {} or

65
00:02:09,330 --> 00:02:11,790
0,570 690,1500 1500,1920 1950,2250 2250,2460
solid { -} you know

66
00:02:11,790 --> 00:02:13,350
0,300 300,420 420,630 630,1050 1320,1560
and of course Blockstack,| so
|因此，你知道，在这个分散应用程序的领域中，有相当多的活动。

67
00:02:13,350 --> 00:02:14,970
0,360 570,960 960,1440 1440,1470 1470,1620
there's {you,know} quite a bit

68
00:02:14,970 --> 00:02:16,650
0,90 90,750 750,930 930,1230 1230,1680
of activity in this {}

69
00:02:16,650 --> 00:02:18,380
0,300 300,390 390,960 960,1650
space of decentralized applications.|
|

70
00:02:19,200 --> 00:02:21,690
0,450 780,1320 1320,1440 1440,2070 2070,2490
{} {The,blockstack} is interesting {}
从去中心化应用的角度来看，块堆栈很有趣，

71
00:02:21,720 --> 00:02:23,430
0,720 750,960 960,1050 1050,1470 1470,1710
from from the perspective of

72
00:02:23,790 --> 00:02:26,550
0,510 510,1140 1440,1620 1620,2070 2070,2760
decentralized applications,| but also {}
|但也是一种非货币使用比特币的例子，非货币使用区块链，比特币区块链。

73
00:02:26,580 --> 00:02:27,750
0,150 150,210 210,810 810,870 870,1170
is an example of {sort,of,a}

74
00:02:27,750 --> 00:02:30,060
0,360 360,870 870,1380 1410,2010 2010,2310
{non-currency -} use {non-money -}

75
00:02:30,060 --> 00:02:35,940
0,510 1620,2910 3390,4470 4830,5520 5520,5880
use of Bitcoin {of,the,,blockchain}, {the,Bitcoin}

76
00:02:35,940 --> 00:02:37,040
0,570
blockchain.|
|

77
00:02:38,940 --> 00:02:41,550
0,510 540,1140 1170,1920 2010,2280 2400,2610

78
00:02:41,820 --> 00:02:42,260
0,210

79
00:02:44,990 --> 00:02:46,880
0,450 450,660 660,840 840,1350 1410,1890
{} And we'll see, {}
我们会看到，你知道[]有很多有趣的方面，但这篇论文关注的关键是命名，

80
00:02:46,880 --> 00:02:47,420
0,120 120,210 210,390 390,510 510,540
you know there are a

81
00:02:47,420 --> 00:02:49,040
0,330 330,480 480,1140 1140,1560 1560,1620
number of aspects that are

82
00:02:49,040 --> 00:02:50,180
0,390 390,540 540,780 780,930 930,1140
interesting to {[] - -},

83
00:02:50,180 --> 00:02:51,470
0,150 150,540 540,840 840,1140 1140,1290
but the key thing that

84
00:02:51,470 --> 00:02:53,270
0,300 300,570 570,960 960,1290 1590,1800
the paper focuses on is

85
00:02:53,270 --> 00:02:55,430
0,540 540,870 870,1380 1560,1980 1980,2160
actually {} naming,| {} how
|如何在某种程度上构建一个分布式分散命名系统。

86
00:02:55,430 --> 00:02:57,140
0,210 210,360 360,420 420,960 1140,1710
to sort of build a

87
00:02:57,140 --> 00:02:59,840
0,780 870,1620 1620,1920 1920,2490
distributed decentralized naming system.|
|

88
00:03:00,080 --> 00:03:01,220
0,570 570,750 750,810 810,1020 1020,1140
{} And of course the
当然，命名系统也被广泛使用，

89
00:03:01,220 --> 00:03:02,450
0,300 300,690 690,810 810,1080 1080,1230
naming systems are {widely -}

90
00:03:02,450 --> 00:03:03,500
0,360 360,450 450,750 750,960 960,1050
used,| you know think of
|你知道吗，想想域名系统，

91
00:03:03,500 --> 00:03:06,950
0,780 780,1290 1500,2220 2220,2490 2490,3450
DNS,| {} think about where
|想想你在哪里认识克贝罗斯，

92
00:03:06,980 --> 00:03:08,000
0,150 150,270 270,510 510,900 900,1020
you know {Kerberos -},| you
|你知道市面上有很多不同的命名系统，你知道它们被广泛使用，

93
00:03:08,000 --> 00:03:09,410
0,210 210,570 900,1140 1140,1230 1230,1410
know there's tons and tons

94
00:03:09,410 --> 00:03:11,210
0,60 60,1050 1050,1320 1320,1650 1650,1800
of different naming systems out

95
00:03:11,210 --> 00:03:11,990
0,330 330,390 390,450 450,690 690,780
there {you,know -} {widely -}

96
00:03:11,990 --> 00:03:13,130
0,360 570,720 720,870 870,960 960,1140
used,| and this is just
|这是一种不同的设计，其中最有趣的部分是，

97
00:03:13,130 --> 00:03:14,330
0,90 90,420 420,810 810,1140 1140,1200
a different design where the

98
00:03:14,330 --> 00:03:15,410
0,330 330,660 660,900 900,960 960,1080
most interesting part of it,|
|

99
00:03:15,410 --> 00:03:17,540
0,360 360,630 630,810 810,1680
again is it's decentralized.|
再说一次，它是分散化的。|

100
00:03:22,180 --> 00:03:23,290
0,210 210,480 480,900 900,1020 1020,1110
Now, this lecture is a
现在，这堂课与之前的课或许多之前的课有一点不同，

101
00:03:23,290 --> 00:03:25,330
0,270 270,570 690,1290 1290,1590 1590,2040
little bit different than the

102
00:03:25,660 --> 00:03:26,890
0,540 540,900 900,990 990,1170 1170,1230
preceding lectures or many of

103
00:03:26,890 --> 00:03:28,270
0,90 90,390 390,810 810,1110 1110,1380
the preceding lectures,| many preceding
|前面的很多课都有点味道，

104
00:03:28,270 --> 00:03:29,200
0,450 450,660 660,720 720,840 840,930
lecture sort of have to

105
00:03:29,200 --> 00:03:30,250
0,270 270,570 570,810 810,870 870,1050
{flavor -},| here's a hard
|这是一个棘手的技术问题，这是解决该特定问题的解决方案

106
00:03:30,250 --> 00:03:32,230
0,360 360,870 960,1350 1350,1500 1500,1980
technical problem, here's the solution

107
00:03:32,230 --> 00:03:33,520
0,90 90,360 360,480 480,810 810,1290
to solve that particular problem|
|

108
00:03:34,000 --> 00:03:35,890
0,660 660,840 840,1680 1680,1800 1800,1890
and {} here we are
现在我们的处境略有不同，

109
00:03:35,890 --> 00:03:37,210
0,60 60,90 90,420 510,810 810,1320
in a {slightly,sort,of} different position,|
|

110
00:03:37,390 --> 00:03:39,040
0,780 810,1140 1140,1170 1170,1350 1350,1650
{} there's a hard technical
有一个棘手的技术问题，我们必须构建分散的应用程序，

111
00:03:39,040 --> 00:03:39,880
0,330 330,480 480,630 630,780 780,840
problem, that we have to

112
00:03:39,880 --> 00:03:42,100
0,210 210,690 690,1440 1680,2040 2040,2220
build decentralized applications,| {} but
|但是，你知道百分百清楚的是，构建分散的应用程序完全是正确的

113
00:03:42,100 --> 00:03:43,600
0,120 120,510 510,660 660,1380 1410,1500
it's not, you know a

114
00:03:43,600 --> 00:03:45,400
0,240 240,450 450,870 870,1050 1050,1800
hundred percent clear, there's exactly

115
00:03:45,400 --> 00:03:46,060
0,90 90,270 270,420 420,480 480,660
the right thing to do

116
00:03:46,060 --> 00:03:47,470
0,120 120,330 330,660 660,1200 1200,1410
to build decentralized applications| and
|而且非常[耐人寻味]，

117
00:03:47,470 --> 00:03:50,110
0,120 120,630 630,1230 1740,2280 2430,2640
is extremely [intriguing],| and it's
|目前还不清楚区块堆栈是否就是这样做的正确解决方案，

118
00:03:50,110 --> 00:03:51,550
0,240 240,510 510,870 900,1140 1140,1440
not clear like {Blockstack,is -}

119
00:03:51,550 --> 00:03:52,840
0,300 300,540 540,810 810,1200 1200,1290
just the right solution to

120
00:03:52,840 --> 00:03:54,760
0,150 150,780 1470,1680 1680,1800 1800,1920
do so,| and so it's
|因此，它更具实验性，

121
00:03:54,760 --> 00:03:57,610
0,210 210,960 990,1920 1980,2310 2370,2850
much more experimental,| {} Blockstack
|区块堆栈确实有一个用户社区

122
00:03:57,610 --> 00:03:59,230
0,240 240,510 510,870 900,1320 1320,1620
does actually have a user

123
00:03:59,230 --> 00:04:01,870
0,570 570,1260 1410,1710 1950,2250 2250,2640
community| and but it's not
|但这还不是压倒性的成功

124
00:04:01,870 --> 00:04:03,610
0,240 240,420 420,1080 1080,1650 1650,1740
yet an overwhelming success| and
|并证明这是一条正确的道路。

125
00:04:03,610 --> 00:04:05,560
0,660 690,1320 1320,1440 1440,1590 1590,1950
a demonstration that this is

126
00:04:05,560 --> 00:04:06,520
0,270 270,450 450,570 570,630 630,960
a right way to go.|
|

127
00:04:06,550 --> 00:04:09,400
0,330 540,750 750,1020 1020,1590 1770,2850
So in that sense, {}
因此，从某种意义上说，这是一篇更发人深省的论文，

128
00:04:09,790 --> 00:04:11,740
0,300 300,720 750,1440 1530,1890 1890,1950
this is a paper in

129
00:04:11,740 --> 00:04:13,420
0,120 120,420 420,660 660,990 990,1680
some sense more thought provoking,|
|

130
00:04:13,690 --> 00:04:15,910
0,360 360,630 630,1230 1230,1830 1830,2220
than giving actually a definite
而不是对一个特定的技术问题给出明确的答案，

131
00:04:15,910 --> 00:04:17,590
0,660 720,870 870,930 930,1320 1320,1680
answer to a particular technical

132
00:04:17,590 --> 00:04:19,690
0,420 540,720 720,1020 1290,1830 1860,2100
problem,| and so, {} some
|所以，在某些方面，你知道这是更重要的话题，

133
00:04:19,690 --> 00:04:20,620
0,420 420,510 510,630 630,810 810,930
ways you know this is

134
00:04:20,620 --> 00:04:22,240
0,450 450,540 540,1140
more of {}

135
00:04:22,960 --> 00:04:24,550
0,420 420,630 630,990 990,1050 1050,1590
topic,| is sort of lends
|在某种程度上是在参与一场关于这种设计的不同观点的更大辩论。

136
00:04:24,700 --> 00:04:26,110
0,330 330,450 450,570 570,840 840,1410
self to a larger debate

137
00:04:26,140 --> 00:04:28,210
0,660 660,810 810,1230 1230,1650 1650,2070
about you know different views

138
00:04:28,210 --> 00:04:29,440
0,210 210,570 570,780 780,960 1050,1230
on this kind of, kind

139
00:04:29,440 --> 00:04:31,960
0,90 90,570 1050,1470 1680,2340 2340,2520
of design.| So {} when
|所以在讲课的时候，

140
00:04:31,960 --> 00:04:33,160
0,210 210,600 600,870 870,990 990,1200
during lecture,| if we get
|如果我们有，更愿意找到，有相当多的讨论不同的方面，

141
00:04:33,160 --> 00:04:35,740
0,1050 1620,1920 1920,2220 2220,2310 2310,2580
to be, preferred to find

142
00:04:35,740 --> 00:04:37,330
0,300 300,930 960,1320 1320,1560 1560,1590
actually, to have quite a

143
00:04:37,330 --> 00:04:39,100
0,120 120,180 180,720 840,1530 1530,1770
bit of discussion {} different

144
00:04:39,100 --> 00:04:40,060
0,360 360,600 600,690 690,810 810,960
aspects,| and I don't think
|我认为不会有一个正确的答案。

145
00:04:40,060 --> 00:04:40,930
0,150 150,270 270,330 330,540 540,870
there's going to be one

146
00:04:40,930 --> 00:04:41,680
0,240 240,600
right answer.|
|

147
00:04:43,120 --> 00:04:45,310
0,180 180,540 540,1320 1320,1830 2040,2190
And so anytime you have
所以，任何时候你有关于

148
00:04:45,310 --> 00:04:47,110
0,480 480,810 810,1350 1350,1560 1560,1800
a question about| or what
|或者你对这些分散的应用程序设计的一个特定方面有什么看法，

149
00:04:47,800 --> 00:04:48,520
0,180 180,240 240,390 390,420 420,720
are you about a particular

150
00:04:48,520 --> 00:04:50,080
0,330 330,600 600,780 780,1350 1350,1560
aspect of these decentralized app

151
00:04:50,080 --> 00:04:51,880
0,480 480,570 570,1140 1290,1590 1590,1800
designs,| you know speak up.|
|你知道的，大声点。|

152
00:04:54,460 --> 00:04:57,220
0,480 690,1200 1410,1650 1650,1950 1950,2760
Okay, {} so maybe before
好的，也许在讨论去中心化的应用程序之前，

153
00:04:57,280 --> 00:04:59,380
0,870 870,1080 1080,1470 1500,1860 1860,2100
a you know talking about

154
00:04:59,380 --> 00:05:00,340
0,180 180,270 270,510 510,810 810,960
{decentralized - -} apps,| {you,know}
|你知道，只是快速回顾一下，你知道实际上是什么样的常见范式

155
00:05:00,340 --> 00:05:02,050
0,270 450,780 780,1320 1440,1530 1530,1710
just quickly revisit you know

156
00:05:02,050 --> 00:05:02,740
0,210 210,360 360,570 570,630 630,690
actually what sort of an

157
00:05:02,740 --> 00:05:04,300
0,360 360,930 930,1080 1080,1350 1350,1560
common paradigm| to actually build
|要真正建网站，或者建网络应用，对，

158
00:05:04,300 --> 00:05:05,950
0,510 510,660 660,870 870,1080 1080,1650
websites or build web applications,

159
00:05:05,950 --> 00:05:07,300
0,150 150,300 300,390 390,870 1080,1350
right,| that is really using
|这实际上是在使用集中式网站，

160
00:05:07,300 --> 00:05:08,480
0,990
centralized

161
00:05:08,840 --> 00:05:10,000
0,780
websites,|
|

162
00:05:13,170 --> 00:05:14,310
0,390 390,540 540,900 900,1050 1050,1140
sites may itself might be
站点本身可能分布在世界各地的多个数据中心，

163
00:05:14,310 --> 00:05:15,990
0,510 510,810 810,1140 1140,1410 1410,1680
distributed across multiple data centers

164
00:05:15,990 --> 00:05:17,550
0,330 330,420 420,900 1080,1440 1440,1560
across the world,| but the
|但网站的设计架构是集中式的，

165
00:05:17,550 --> 00:05:19,560
0,600 600,690 690,780 780,1170 1170,2010
architecture of the design {the,site,is}

166
00:05:19,560 --> 00:05:21,520
0,600 600,930 930,1080 1080,1500
centralized,| where we have,
|在我们有的地方，你知道这是你典型的网站，

167
00:05:21,810 --> 00:05:24,240
0,390 420,720 720,1050 1470,1770 1770,2430
{you,know} here's your typical website,|
|

168
00:05:24,750 --> 00:05:26,430
0,330 330,870 870,1020 1020,1620 1620,1680
it has some applications in
它在代码中有一些应用，

169
00:05:26,430 --> 00:05:30,150
0,60 60,660 660,750 750,900 2310,3720
the code,| {whatever,you} know Gmail,
|无论你知道Gmail，无论是推特还是Facebook，

170
00:05:30,150 --> 00:05:33,000
0,270 270,690 690,1320 1620,2100 2100,2850
whatever Twitter Facebook,| {} and
|它在数据库上运行，

171
00:05:33,000 --> 00:05:35,220
0,240 240,540 540,1110 1110,1740 1740,2220
{} that operates on a

172
00:05:35,220 --> 00:05:36,340
0,660
database,|
|

173
00:05:36,600 --> 00:05:38,700
0,510 510,960 960,1590 1590,1800 1800,2100
{} that contains {you,know} user
其中包含您知道的用户数据。

174
00:05:38,700 --> 00:05:40,020
0,480
data.|
|

175
00:05:42,890 --> 00:05:44,420
0,360 360,450 450,660 660,1020 1200,1530
Then we might actually get
那么我们实际上可能会让用户坐在Web浏览器和U1、U2、

176
00:05:44,420 --> 00:05:48,170
0,510 510,1380 1470,2370 3210,3540 3540,3750
users interacting with sitting by

177
00:05:48,170 --> 00:05:50,600
0,120 120,450 450,1200 1200,1860 2100,2430
a web browser and {U1

178
00:05:50,600 --> 00:05:53,540
0,300 300,1110 1440,1950 1950,2130 2130,2940
-}, U2,| {} they interact
|他们通过应用程序与网站进行交互，

179
00:05:53,540 --> 00:05:54,830
0,270 270,600 600,1110 1110,1230 1230,1290
through the application with the

180
00:05:54,830 --> 00:05:56,510
0,570 570,630 630,780 780,1290 1320,1680
website,| you know they create
|你知道他们创建数据，他们存储在数据库中，

181
00:05:56,510 --> 00:05:58,040
0,390 390,930 930,1350 1350,1440 1440,1530
data, they stored in the

182
00:05:58,040 --> 00:06:00,320
0,780 1020,1500 1500,1890 1890,2130 2130,2280
database,| other users {may,view} the
|其他用户可以查看数据

183
00:06:00,320 --> 00:06:02,720
0,1020 1080,1320 1320,1380 1380,1860 1860,2400
data| and the application displays
|应用程序基本上将这些数据显示在Web浏览器内部。

184
00:06:02,720 --> 00:06:04,730
0,690 690,900 900,1200 1200,1650 1650,2010
basically that data to {}

185
00:06:04,940 --> 00:06:06,290
0,540 540,630 630,840 840,990 990,1350
inside of the web browser.|
|

186
00:06:06,940 --> 00:06:07,840
0,390 390,450 450,540 540,660 660,900
And you know the data
你知道，数据可能是博客帖子、推文、广场帖子、照片、

187
00:06:07,840 --> 00:06:09,910
0,210 210,600 840,1020 1020,1380 1380,2070
might be a blog posts,

188
00:06:11,670 --> 00:06:12,820
0,780
tweets,

189
00:06:16,560 --> 00:06:21,600
0,540 540,1110 1140,2340 4140,4710 4710,5040
Piazza posts, photos,| perhaps even
|也许甚至更敏感的医疗记录，医疗记录，等等。

190
00:06:21,600 --> 00:06:23,670
0,420 420,750 750,930 930,1590 1590,2070
more sort of sensitive medical

191
00:06:23,670 --> 00:06:25,340
0,390 390,720 720,1410
records, medical records,

192
00:06:27,050 --> 00:06:29,420
0,210 210,570
{etc -}.|
|

193
00:06:29,910 --> 00:06:31,500
0,150 150,630 630,870 870,1470 1470,1590
And basically {you,know,the} application we're
基本上，你知道我们在网站上运行的应用程序

194
00:06:31,500 --> 00:06:32,610
0,240 240,330 330,390 390,780 780,1110
running on the site| to
|为了转换来自所有不同用户的数据，

195
00:06:32,610 --> 00:06:34,350
0,840 840,1170 1170,1440 1440,1590 1590,1740
transform that data from all

196
00:06:34,350 --> 00:06:36,570
0,90 90,390 390,930 1050,1740 1740,2220
the different users,| {} into
|变成了一些有趣的东西，

197
00:06:36,570 --> 00:06:37,740
0,300 300,420 420,810 810,1020 1020,1170
something that {interesting,to} look at,|
|

198
00:06:37,740 --> 00:06:39,210
0,480 480,570 570,840 840,1380 1380,1470
where {} basically integrating for
其中基本上集成了例如许多用户的时间线

199
00:06:39,210 --> 00:06:41,460
0,480 480,540 570,1350 1350,1680 1770,2250
example the timeline of many

200
00:06:41,460 --> 00:06:42,960
0,450 450,780 780,840 840,1080 1080,1500
users| into a single timeline
|放入呈现给用户的单个时间线中，

201
00:06:42,960 --> 00:06:45,090
0,300 300,390 390,510 510,1080 1500,2130
present to the user, {}|
|

202
00:06:45,090 --> 00:06:45,900
0,90 90,240 240,390 390,720 720,810
you know we're going to
你知道我们要在推特上

203
00:06:45,900 --> 00:06:47,310
0,540 540,660 660,840 840,1080 1080,1410
tweets| you know do ups
|你知道，做Up和下载，等等。

204
00:06:47,310 --> 00:06:49,340
0,90 90,870 870,1380 1380,1890
and downloads, etc, etc.|
|

205
00:06:50,070 --> 00:06:52,500
0,570 870,1560 1710,1830 1830,1890 1890,2430
{} And you know one
你知道，这个设计的一个显著特点是，

206
00:06:52,500 --> 00:06:55,050
0,390 390,1110 1110,1770 1800,2310 2310,2550
{sort,of} distinguishing feature of this

207
00:06:55,320 --> 00:06:57,240
0,480 480,630 630,930 1110,1320 1320,1920
design is that,| the application
|数据的应用被捆绑在一起，

208
00:06:57,240 --> 00:06:58,410
0,60 60,150 150,450 450,450 450,1170
of the data are bundled,|
|

209
00:06:58,410 --> 00:06:59,910
0,330 330,480 480,720 720,810 810,1500
they are only the control
它们只是对应用程序站点的控制，

210
00:06:59,910 --> 00:07:01,830
0,150 150,480 480,1140 1140,1530 1530,1920
of the application site,| whether
|无论是脸书、推特、谷歌还是任何网站

211
00:07:01,830 --> 00:07:03,510
0,270 300,780 780,1170 1170,1440 1440,1680
it's Facebook Twitter or Google

212
00:07:03,510 --> 00:07:05,190
0,150 150,480 540,1110 1110,1290 1290,1680
or any website| and really
|实际上是用户之间的界面，或者用户和网站之间的分界线

213
00:07:05,280 --> 00:07:06,780
0,180 180,570 570,870 870,930 930,1500
the interface between the user

214
00:07:06,780 --> 00:07:08,280
0,90 90,420 420,900 900,1230 1230,1500
or the dividing line between

215
00:07:08,280 --> 00:07:09,320
0,90 90,660
the user

216
00:07:09,590 --> 00:07:11,540
0,750 780,960 960,1080 1080,1620 1620,1950
and {} the website| is
|基本上就是你知道的html或用户界面。

217
00:07:11,540 --> 00:07:13,040
0,510 510,600 600,870 870,1350 1350,1500
basically you know html or

218
00:07:13,040 --> 00:07:14,120
0,660
{the,UI}.|
|

219
00:07:17,580 --> 00:07:19,200
0,180 180,270 270,780 780,1020 1020,1620
And the application basically computes
这个应用程序基本上是计算用户将要看到的任何内容

220
00:07:19,200 --> 00:07:20,730
0,90 90,180 180,960 960,960 1170,1530
you know whatever a user

221
00:07:20,730 --> 00:07:21,450
0,120 120,180 180,480 480,570 570,720
going to see| and that's
|它将显示在浏览器内部，

222
00:07:21,450 --> 00:07:22,620
0,120 120,180 180,300 300,810 810,1170
going to be displayed inside

223
00:07:22,620 --> 00:07:23,970
0,60 60,510 900,1050 1050,1260 1260,1350
the browser,| of course, the
|当然，应用程序实际上可能在浏览器内部运行，您知道的，

224
00:07:23,970 --> 00:07:25,650
0,510 510,810 810,1080 1080,1380 1380,1680
application might actually run inside

225
00:07:25,650 --> 00:07:26,970
0,90 90,150 150,750 840,1230 1230,1320
of the browser, {} you

226
00:07:26,970 --> 00:07:28,650
0,120 120,930 930,1200 1200,1380 1380,1680
know javascript,| but actually not
|但实际上与这个特定的讨论并不相关，

227
00:07:28,650 --> 00:07:30,360
0,420 630,1110 1110,1200 1200,1350 1350,1710
really pertinent to this particular

228
00:07:30,360 --> 00:07:32,130
0,600 870,1350 1350,1590 1590,1680 1680,1770
discussion,| {} you know it's
|你知道，它仍然是应用程序在网站的控制之下，

229
00:07:32,130 --> 00:07:33,900
0,480 480,630 630,1380 1380,1590 1590,1770
still the application is under

230
00:07:33,900 --> 00:07:35,100
0,360 360,450 450,510 510,1140 1140,1200
control of the website,| you
|你知道这个网站的程序员编写的应用程序

231
00:07:35,100 --> 00:07:36,240
0,270 270,570 570,1020 1020,1080 1080,1140
know the programmers of the

232
00:07:36,240 --> 00:07:38,280
0,360 360,570 570,660 660,1320 1590,2040
website write the application| and
|并且该应用程序基本上是从Web浏览器内部操作DOM字段。

233
00:07:38,280 --> 00:07:40,170
0,90 90,570 570,1140 1140,1800 1800,1890
the application basically manipulates the

234
00:07:40,170 --> 00:07:41,880
0,480 510,1050 1050,1290 1290,1650 1650,1710
dom fields from inside of

235
00:07:41,880 --> 00:07:42,620
0,90 90,240 240,660
the web browser.|
|

236
00:07:43,270 --> 00:07:44,140
0,150 150,300 300,480 480,630 630,870
And so from the user
因此从用户的角度来看，

237
00:07:44,140 --> 00:07:46,810
0,180 180,240 240,660 900,1140 1140,2670
point of view,| {} interaction,
|交互，界面，你知道，网站和浏览器之间的定义界面仍然是一种html。

238
00:07:46,810 --> 00:07:48,070
0,90 90,720 720,810 810,930 930,1260
{} interface, you know between

239
00:07:48,070 --> 00:07:50,440
0,90 90,450 450,840 840,1440 1590,2370
the defining interface between website

240
00:07:50,440 --> 00:07:53,770
0,270 270,1200 1770,2520 2700,2910 2910,3330
and {} and the browser

241
00:07:53,770 --> 00:07:55,160
0,270 270,450 450,510 510,1170
still sort of html.|
|

242
00:07:57,720 --> 00:07:58,530
0,180 180,300 300,600 600,750 750,810
And so this kind of
所以这种公正的设计显然是压倒性的成功，

243
00:07:58,530 --> 00:08:00,930
0,600 600,930 930,1350 1350,1530 1530,2400
just design clearly is overwhelmingly

244
00:08:00,930 --> 00:08:03,990
0,630 870,1050 1050,1770 1920,2460 2490,3060
successful,| {} {you,know} most websites
|你可能知道大多数网站，

245
00:08:03,990 --> 00:08:05,880
0,450 450,840 840,1170 1200,1620 1620,1890
{} probably,| that's probably all
|这可能是你可能使用的所有网站都在某种程度上遵循这种特殊的设计。

246
00:08:05,880 --> 00:08:06,870
0,90 90,180 180,570 570,690 690,990
of the websites you probably

247
00:08:06,870 --> 00:08:08,640
0,270 270,780 840,1290 1290,1350 1350,1770
use are sort of following

248
00:08:08,640 --> 00:08:10,040
0,180 180,690 690,1140
this particular design.|
|

249
00:08:10,570 --> 00:08:13,030
0,600 810,1230 1230,1560 1560,1980 1980,2460
{} And one reason for
你知道这个非常成功的设计的一个原因是，

250
00:08:13,030 --> 00:08:14,560
0,210 210,450 450,660 660,1050 1050,1530
{you,know} this very successful {design,is},|
|

251
00:08:14,560 --> 00:08:15,130
0,120 120,270 270,300 300,450 450,570
we'll talk a little bit
我们稍后会再谈一谈，

252
00:08:15,130 --> 00:08:16,480
0,120 120,480 480,660 780,1290 1290,1350
more later is,| because of
|由于应用和数据以及来自用户的数据之间的紧密集成，

253
00:08:16,480 --> 00:08:17,860
0,90 90,390 390,990 990,1290 1290,1380
the tight integration between the

254
00:08:17,860 --> 00:08:19,150
0,600 600,690 690,750 750,1020 1020,1290
application and the data and

255
00:08:19,150 --> 00:08:20,290
0,60 60,330 330,480 480,570 720,1140
the data from the user,|
|

256
00:08:20,290 --> 00:08:21,400
0,120 120,240 240,690 690,840 840,1110
so the application is easy
因此，该应用程序可以轻松访问来自不同用户的所有用户数据

257
00:08:21,400 --> 00:08:23,320
0,360 360,480 480,870 870,960 960,1920
access to all the user

258
00:08:23,320 --> 00:08:24,760
0,420 450,630 630,930 930,1290 1290,1440
data from different users| and
|并融合在一起，创造出创造性和趣味性的方式。

259
00:08:24,760 --> 00:08:26,050
0,540 540,600 600,810 810,1200 1200,1290
integrated to make creative and

260
00:08:26,050 --> 00:08:29,050
0,330 330,810 1440,2280 2400,2640 2640,3000
interesting ways.| But there are
|但你知道它并不是完全完美的，

261
00:08:29,050 --> 00:08:30,730
0,120 120,750 750,900 900,1230 1260,1680
you know it's not completely

262
00:08:30,730 --> 00:08:32,410
0,540 570,660 660,750 750,960 960,1680
perfect,| you know this designing
|你知道这种设计的东西，你可能会希望自己能稍微做得更好。

263
00:08:32,410 --> 00:08:34,600
0,510 1170,1650 1650,1710 1710,2010 2010,2190
{} sort of things that

264
00:08:34,600 --> 00:08:35,710
0,150 150,450 450,570 570,780 780,1110
you might you might wish

265
00:08:35,710 --> 00:08:36,850
0,180 180,390 390,480 480,810 810,1140
you could be slightly better.|
|

266
00:08:37,650 --> 00:08:40,020
0,600 600,930 930,1290 1290,1800 1800,2370
{} And {in,some,sense}, decentralized applications
在某种意义上，去中心化的应用程序是对这些事情的一种回应，

267
00:08:40,020 --> 00:08:41,250
0,180 180,600 600,750 750,810 810,1230
is a is a response

268
00:08:41,250 --> 00:08:42,480
0,60 60,870 870,990 990,1050 1050,1230
to those sort of things,|
|

269
00:08:42,480 --> 00:08:43,890
0,180 180,600 870,1110 1110,1290 1290,1410
that are it might be
也就是说，这可能是100%可取的。

270
00:08:43,890 --> 00:08:45,340
0,360 360,600 600,1170
{100%,desirable - -}.|
|

271
00:08:45,860 --> 00:08:47,150
0,180 180,300 300,420 420,840 960,1290
And so for one, there's
因此，首先，有一个非常简单的观察，

272
00:08:47,150 --> 00:08:49,250
0,150 150,420 420,690 690,1470 1530,2100
a very simple observation, {}|
|

273
00:08:49,250 --> 00:08:50,780
0,570 570,900 900,1110 1110,1320 1320,1530
you can really not create
您真的不能创建另一个应用程序，

274
00:08:50,780 --> 00:08:53,570
0,270 270,840 1170,1350 1350,2370 2400,2790
another application,| so the site
|因此，网站实际上决定了应用程序的外观，

275
00:08:53,570 --> 00:08:54,740
0,390 390,660 660,780 780,930 930,1170
decides actually how the app

276
00:08:54,740 --> 00:08:55,850
0,240 240,600 600,690 690,930 930,1110
looks like,| you know that's
|你知道这就是你会得到的用户界面，

277
00:08:55,850 --> 00:08:56,840
0,240 240,480 480,660 660,810 810,990
the {UI -} you're gonna

278
00:08:56,840 --> 00:08:57,340
0,300
get,|
|

279
00:08:57,560 --> 00:08:58,700
0,480 480,720 720,900 900,990 990,1140
{} and which is sort
而这与，

280
00:08:58,700 --> 00:09:01,610
0,60 60,360 360,960 1140,2130 2160,2910
of very different than, {}|
|

281
00:09:01,700 --> 00:09:04,130
0,600 600,1080 1080,1230 1230,2340 2340,2430
let's see, {} on your
让我们看看，例如，在您的笔记本电脑上运行的应用程序上，

282
00:09:04,130 --> 00:09:05,360
0,210 210,660 660,750 750,900 900,1230
running application to your laptop,

283
00:09:05,360 --> 00:09:06,320
0,150 150,570 570,630 630,810 810,960
for example,| you want to
|你想修改，编辑一个文本文件，

284
00:09:06,350 --> 00:09:08,450
0,660 690,1020 1020,1350 1350,1620 1620,2100
modify, edit a text file,|
|

285
00:09:08,600 --> 00:09:09,410
0,180 180,300 300,450 450,510 510,810
but you get to choose
但您可以选择要使用的浏览器或编辑器，

286
00:09:09,410 --> 00:09:10,790
0,210 210,690 690,960 960,1260 1260,1380
which browser or editor you're

287
00:09:10,790 --> 00:09:11,750
0,150 150,480 480,600 600,810 810,960
gonna use,| you know what
|你知道你要给Emacs取什么名字吗，你知道Vim，

288
00:09:11,750 --> 00:09:13,010
0,90 90,210 210,360 360,660 690,1260
are you gonna name emacs,

289
00:09:13,010 --> 00:09:13,910
0,90 90,210 210,690 690,780 780,900
you know vim,| you know
|你知道各种各样的文化战争，关于哪一个比另一个更好，

290
00:09:13,910 --> 00:09:15,590
0,180 180,600 840,1230 1230,1470 1470,1680
{all,kinds,of -} culture wars about

291
00:09:15,590 --> 00:09:16,310
0,180 180,300 300,390 390,600 600,720
which one is better than

292
00:09:16,310 --> 00:09:17,630
0,90 90,480 660,1050 1050,1170 1170,1320
the other,| but you get
|但你有权选择你想要使用的那个。

293
00:09:17,630 --> 00:09:19,250
0,90 90,510 1050,1170 1170,1440 1440,1620
an option to choose which

294
00:09:19,250 --> 00:09:20,120
0,210 210,270 270,450 450,510 510,870
one you want to use.|
|

295
00:09:20,450 --> 00:09:21,260
0,150 150,240 240,360 360,720 720,810
And in this case, you
在这种情况下，你知道情况并非如此，

296
00:09:21,260 --> 00:09:21,920
0,120 120,300 300,450 450,600 600,660
know that's just not the

297
00:09:21,920 --> 00:09:26,180
0,330 330,1170 1170,1380 1380,2190 3810,4260
case,| you're using Gmail,| Gmail
|你使用的是Gmail，|Gmail不是最好的例子，

298
00:09:26,180 --> 00:09:26,990
0,90 90,210 210,270 270,420 420,810
is not the best example,|
|

299
00:09:26,990 --> 00:09:27,920
0,120 120,540 540,630 630,690 690,930
but Twitter, you know Twitter
但是推特，你知道推特将决定应用程序的实际外观。

300
00:09:27,920 --> 00:09:28,790
0,60 60,180 180,240 240,600 600,870
is going to decide actually

301
00:09:28,790 --> 00:09:29,660
0,120 120,240 240,660 660,720 720,870
how the application is going

302
00:09:29,660 --> 00:09:30,180
0,60 60,240 240,450
to look like.|
|

303
00:09:31,420 --> 00:09:32,260
0,120 120,330 330,420 420,720 720,840
The reason why Gmail might
Gmail可能不是最好的例子的原因是，

304
00:09:32,260 --> 00:09:33,100
0,150 150,240 240,300 300,510 510,840
not be the best example

305
00:09:33,100 --> 00:09:33,820
0,120 120,330 330,420 420,510 510,720
is,| because you can actually
|因为你实际上可以下载你的电子邮件也许你知道通过IMAP

306
00:09:33,820 --> 00:09:35,110
0,420 420,540 540,810 810,1170 1170,1290
download your email maybe you

307
00:09:35,110 --> 00:09:36,490
0,150 150,480 480,720 720,1110 1110,1380
know through {IMAP -}| and
|然后运行自己的电子邮件程序，

308
00:09:36,490 --> 00:09:38,560
0,180 180,360 360,540 540,900 1560,2070
then run your own email

309
00:09:38,560 --> 00:09:40,210
0,480 780,1230 1230,1380 1380,1470 1470,1650
program,| {} but for many
|但对于许多网站来说，你知道用户应用程序数据非常受控制，

310
00:09:40,210 --> 00:09:41,830
0,420 420,570 570,1050 1050,1230 1230,1620
websites {you,know} the {user -}

311
00:09:41,830 --> 00:09:43,120
0,420 420,600 600,810 810,1170 1170,1290
application data very control,| that
|你无法控制它。

312
00:09:43,120 --> 00:09:44,290
0,240 240,420 420,600 600,960 960,1170
you have no control over

313
00:09:44,290 --> 00:09:44,640
0,120
it.|
|

314
00:09:45,770 --> 00:09:46,880
0,810

315
00:09:47,040 --> 00:09:48,360
0,180 180,540 540,720 720,1080 1080,1320
The website {you,know} may change
你所知道的网站可能会改变谁可以查看哪些数据的规则，

316
00:09:48,360 --> 00:09:49,650
0,90 90,600 600,930 930,1170 1170,1290
the rules on who can

317
00:09:49,650 --> 00:09:52,290
0,600 600,1410 1440,2070 2070,2340 2340,2640
see { -} what data,|
|

318
00:09:52,470 --> 00:09:53,820
0,570 570,750 750,960 960,1200 1200,1350
and it might actually do
实际上，它可能并没有真正告诉你，

319
00:09:53,820 --> 00:09:55,200
0,420 420,600 600,900 900,1050 1140,1380
without really telling you,| and
|所以你可以完全控制谁，谁能看到你的数据，

320
00:09:55,200 --> 00:09:56,700
0,150 150,510 510,720 720,990 990,1500
so you have full control

321
00:09:56,700 --> 00:09:58,740
0,240 240,540 540,1320 1380,1830 1830,2040
over actually who, who sees

322
00:09:58,740 --> 00:10:00,270
0,90 90,510 720,1230 1230,1380 1380,1530
your data,| furthermore, the {website
|此外，网站实际上可能会使用它，

323
00:10:00,270 --> 00:10:01,260
0,180 180,270 270,450 450,750 750,990
-} {} actually might use

324
00:10:01,260 --> 00:10:02,970
0,270 270,510 510,690 690,990 990,1710
it,| {you,know} your data to
|你知道你的数据可以产生收入，

325
00:10:02,970 --> 00:10:05,160
0,510 540,1050 1050,1530 1530,1830 1830,2190
{} generate revenue,| whatever decide
|无论决定实际显示哪些广告，

326
00:10:05,160 --> 00:10:07,620
0,210 210,450 450,780 780,1380 1650,2460
which ads actually display, {}|
|

327
00:10:07,620 --> 00:10:09,900
0,870 900,1380 1380,1500 1500,1800 1800,2280
and, {} {you,know} basically snooping
而且，你知道，基本上就是窥探你的数据，对吧，

328
00:10:09,900 --> 00:10:12,030
0,240 240,420 420,840 870,1320 1860,2130
over your data, right,| or
|或者在更糟糕的情况下，可能是一个糟糕的员工，

329
00:10:12,030 --> 00:10:13,950
0,270 270,660 660,1320 1320,1680 1680,1920
{in,the,worse} case, maybe a bad

330
00:10:13,950 --> 00:10:15,780
0,480 480,630 630,1230 1350,1590 1590,1830
employee,| it actually it just
|它实际上只是窥探你的数据。

331
00:10:15,780 --> 00:10:16,700
0,210 210,420 420,510 510,840
snoop over your data.|
|

332
00:10:17,300 --> 00:10:18,200
0,210 210,360 360,630 630,780 780,900
And that's really sort of
这在某种程度上是你无法控制的，

333
00:10:18,200 --> 00:10:19,280
0,390 390,450 450,570 570,930 930,1080
outside of your control,| there's
|你真的无能为力，

334
00:10:19,280 --> 00:10:20,120
0,210 210,540 540,600 600,690 690,840
nothing really you can do

335
00:10:20,120 --> 00:10:21,170
0,300 300,630 630,780 780,960 960,1050
about it,| you gave the
|你把数据给了网站，现在是他们的了。

336
00:10:21,170 --> 00:10:22,820
0,330 330,420 420,870 1140,1350 1350,1650
website the data, it's theirs

337
00:10:22,820 --> 00:10:23,500
0,270
now.|
|

338
00:10:24,230 --> 00:10:26,030
0,480 630,750 750,930 930,1320 1350,1800
And so this is sort
所以这是一种痛点，

339
00:10:26,030 --> 00:10:29,840
0,540 1080,1590 1590,1800 1800,2730 3120,3810
of sort of {pain,points}, {}|
|

340
00:10:29,840 --> 00:10:30,890
0,90 90,510 510,690 690,840 840,1050
you know it makes people
你知道这会让人想知道，

341
00:10:30,890 --> 00:10:31,880
0,390 390,450 450,720 720,840 840,990
wonder,| you know is a
|你知道，这是一种设计系统的方式，它真的不是，不遵循这种模式，

342
00:10:31,880 --> 00:10:34,760
0,300 300,870 1140,1740 1740,2430 2640,2880
way of designing systems that

343
00:10:34,760 --> 00:10:36,290
0,210 210,450 450,960 960,1320 1320,1530
are really not, { -}

344
00:10:36,320 --> 00:10:38,390
0,330 330,510 510,840 870,1650 1650,2070
don't follow this paradigm,| but
|但遵循这种去中心化应用程序的范例。

345
00:10:38,390 --> 00:10:39,980
0,210 210,330 330,870 870,990 990,1590
follow this paradigm of decentralized

346
00:10:39,980 --> 00:10:40,840
0,660
applications.|
|

347
00:10:47,520 --> 00:10:48,460
0,570

348
00:10:50,370 --> 00:10:51,880
0,720

349
00:10:54,110 --> 00:10:55,340
0,690

350
00:10:55,970 --> 00:10:57,860
0,120 120,450 450,810 810,1410 1410,1890
And so in in this
所以在这个世界观中，

351
00:10:57,890 --> 00:11:01,370
0,1530 1740,2610 2610,2850 2850,3120 3120,3480
{world,view},| we're {still,in} our Internet
|我们仍然在我们的互联网和云中，

352
00:11:01,370 --> 00:11:03,530
0,90 90,690 720,1740 1740,2040 2040,2160
the cloud,| but we have
|但我们有存储提供商，

353
00:11:03,530 --> 00:11:04,780
0,300 300,390 390,990
storage {providers -},|
|

354
00:11:05,850 --> 00:11:08,670
0,240 240,510 510,1020 1020,1740 1770,2820
and storage providers are basically
存储提供商基本上不是什么真正复杂的词，

355
00:11:08,670 --> 00:11:12,540
0,480 480,1170 1170,1800 2670,3420 3420,3870
nothing really {} sophisticated word,|
|

356
00:11:12,840 --> 00:11:13,950
0,210 210,420 420,660 660,870 870,1110
{they,don't -} really rung app
它们并不真正运行应用程序代码，它们只是纯粹地提供存储，

357
00:11:13,950 --> 00:11:15,750
0,450 690,1020 1020,1170 1170,1410 1410,1800
code, {} they just purely

358
00:11:15,750 --> 00:11:18,180
0,360 360,960 1050,1590 1590,1890 2010,2430
provide storage,| ways of maybe
|也许它就像Google Drive或其他什么东西，或者Amazon S3，

359
00:11:18,180 --> 00:11:19,830
0,180 180,600 600,870 870,1440 1440,1650
it's like Google drive or

360
00:11:19,830 --> 00:11:22,740
0,570 810,1470 1500,2160 2160,2370 2370,2910
whatever or Amazon {S3 -},|
|

361
00:11:22,860 --> 00:11:24,180
0,510 510,900 900,1020 1020,1200 1200,1320
but basically they're sort of
但基本上他们都是笨蛋，你知道，大持有者，

362
00:11:24,180 --> 00:11:26,280
0,540 630,810 810,990 990,1770 1800,2100
dumb you know {} big

363
00:11:26,280 --> 00:11:27,100
0,480
holders,|
|

364
00:11:27,730 --> 00:11:29,320
0,480 570,840 840,930 930,1470 1470,1590
the {data -} maybe you
数据可能是用户想要加密的数据，

365
00:11:29,320 --> 00:11:30,190
0,180 180,360 360,480 480,720 720,870
know {users -} probably want

366
00:11:30,190 --> 00:11:31,660
0,90 90,420 420,810 930,1320 1320,1470
to encrypt data,| but this
|但这才是我们的真正目标，

367
00:11:31,660 --> 00:11:32,950
0,60 60,480 480,690 690,990 990,1290
is what the real goal

368
00:11:32,950 --> 00:11:33,760
0,270 270,360 360,480 480,570 570,810
here is that,| the {user
|用户决定您知道数据所在的存储位置

369
00:11:33,760 --> 00:11:34,630
0,60 60,150 150,720 720,810 810,870
-} {decides -} you know

370
00:11:34,630 --> 00:11:36,040
0,240 240,510 510,1050 1080,1350 1350,1410
which store for where the

371
00:11:36,040 --> 00:11:37,600
0,270 270,780 1080,1260 1260,1350 1350,1560
data lives| and it keeps
|并且它使它们处于用户的控制之下，

372
00:11:37,600 --> 00:11:38,380
0,120 120,270 270,600 600,690 690,780
them under control of the

373
00:11:38,380 --> 00:11:38,980
0,390
user,|
|

374
00:11:39,360 --> 00:11:41,550
0,240 240,600 600,900 900,1710 1950,2190
so whatever {you,know} {storage,provider},| {S3
所以不管你知道什么存储提供商，|S3可能会让您了解用户1的数据，

375
00:11:41,550 --> 00:11:42,510
0,120 120,270 270,480 480,810 810,960
- -} might have {you,know}

376
00:11:42,510 --> 00:11:44,040
0,330 330,570 570,1080
user one data,|
|

377
00:11:44,740 --> 00:11:46,120
0,870

378
00:11:46,970 --> 00:11:48,230
0,240 240,360 360,600 600,1050 1050,1260
{} another store provider might
另一商店提供商可能实际上具有U2的数据，

379
00:11:48,230 --> 00:11:49,850
0,270 270,450 450,720 720,1230 1230,1620
actually have {U2's,data -},| or
|或者你知道日期代表U2的商店，

380
00:11:50,000 --> 00:11:51,320
0,480 480,570 570,750 750,1230 1230,1320
stores you know date on

381
00:11:51,320 --> 00:11:52,820
0,300 300,660 660,750 750,990 990,1500
{behalf -} of {U2 -},|
|

382
00:11:53,090 --> 00:11:54,500
0,450 450,660 660,780 780,1260 1260,1410
{U2 -} and {S3 -}
U2和S3实际上可以对其进行加密，

383
00:11:54,500 --> 00:11:55,700
0,150 150,420 420,810 810,960 960,1200
may actually encrypt it {},|
|

384
00:11:55,700 --> 00:11:56,780
0,150 150,300 300,360 360,660 660,1080
so that the storage provider
使得存储提供商实际上不能读取它，

385
00:11:56,780 --> 00:11:57,860
0,150 150,420 420,630 630,810 810,1080
can actually not read it,|
|

386
00:12:00,170 --> 00:12:01,400
0,210 210,690 690,870 870,1110 1110,1230
and control like who can
并控制着谁可以真正解密，

387
00:12:01,400 --> 00:12:03,200
0,480 480,840 840,1260 1260,1350 1350,1800
actually {} decrypt,| the data
|数据，然后你就知道应用程序实际上是在用户自己的控制之下。

388
00:12:03,680 --> 00:12:05,600
0,810 810,1350 1380,1500 1500,1590 1590,1920
and then you know the

389
00:12:05,600 --> 00:12:08,000
0,660 660,1260 1320,1620 1620,1770 1770,2400
applications really are in control

390
00:12:08,000 --> 00:12:10,790
0,150 150,660 690,1470 1470,2250 2520,2790
of the user themselves.| So
|所以你知道这里的用户，U1工作站或笔记本电脑，

391
00:12:10,790 --> 00:12:12,760
0,570 570,1230 1230,1740
{you,know,might} user here,

392
00:12:13,070 --> 00:12:14,480
0,270 270,420 420,780 780,840 840,1410
{} {U1 -} {} workstation

393
00:12:14,480 --> 00:12:16,340
0,120 120,960 1140,1470 1470,1680 1680,1860
or laptop,| it runs in
|它在应用程序中运行，

394
00:12:16,340 --> 00:12:18,300
0,60 60,960
an application,|
|

395
00:12:18,600 --> 00:12:20,240
0,600 600,1080
and {you,know}
你知道这是U2，

396
00:12:20,640 --> 00:12:22,120
0,270 270,450 450,990
here's {U2 -},|
|

397
00:12:22,640 --> 00:12:23,930
0,150 150,480 480,540 540,840 840,1290
{there's -} also another application
也有另一个应用程序可能实际上正在查看相同的数据，

398
00:12:23,930 --> 00:12:25,160
0,150 150,720 720,990 990,1110 1110,1230
may actually looking at maybe

399
00:12:25,160 --> 00:12:26,240
0,210 210,420 420,720 720,900 900,1080
the same data,| but like
|但就像应用程序的一个略有不同的版本一样，

400
00:12:26,240 --> 00:12:27,470
0,60 60,390 390,810 810,1170 1170,1230
a slightly different version of

401
00:12:27,470 --> 00:12:29,480
0,90 90,600 600,870 870,1200 1200,2010
the application,| whatever one photo
|无论一个照片查看者和另一个照片查看者，

402
00:12:29,510 --> 00:12:31,160
0,600 600,720 720,990 990,1260 1260,1650
viewer and another photo viewer,|
|

403
00:12:32,080 --> 00:12:34,390
0,570 630,1200 1200,1530 1530,2250 2250,2310
and basically to construct you
基本上，为了构建你知道实际显示给用户的是什么，

404
00:12:34,390 --> 00:12:36,190
0,540 540,840 840,960 960,1380 1380,1800
knows what is actually shown

405
00:12:36,190 --> 00:12:37,360
0,120 120,210 210,750 900,1080 1080,1170
to the user,| that the
|这个应用程序将从不同的用户那里获取数据，

406
00:12:37,360 --> 00:12:40,210
0,630 630,780 780,1530 1620,2400 2730,2850
application will fetches data you

407
00:12:40,210 --> 00:12:41,140
0,120 120,570 570,690 690,840 840,930
know {from -} different {users

408
00:12:41,140 --> 00:12:42,250
0,330 330,420 420,570 570,990 990,1110
-},| {} for example if
|例如，如果U2与U1共享照片，

409
00:12:42,250 --> 00:12:44,650
0,240 240,840 1170,1530 1530,1590 1590,2400
{U2 -} share the photos

410
00:12:44,680 --> 00:12:47,260
0,540 540,660 660,1230 1440,2010 2010,2580
with {U1 -},| {} then
|然后集成照片U1至U2的应用程序，

411
00:12:47,260 --> 00:12:49,210
0,90 90,720 720,840 840,1650 1680,1950
the applications to integrate the

412
00:12:49,300 --> 00:12:50,860
0,570 570,720 720,930 930,1080 1080,1560
photos {U1 -} {to,U2 -},|
|

413
00:12:50,980 --> 00:12:53,860
0,480 480,720 720,1590 1590,2070 2070,2880
{} by extracting or retrieving
通过提取或检索来自不同存储提供商的照片。

414
00:12:54,010 --> 00:12:54,920
0,720
the,

415
00:12:54,970 --> 00:12:56,560
0,330 330,420 420,750 750,1140 1140,1590
{} the photos from the

416
00:12:56,680 --> 00:12:58,280
0,540 540,750 750,1350
different storage providers.|
|

417
00:12:58,660 --> 00:12:59,740
0,180 180,540 540,780 780,930 930,1080
And here really what the
在这里，用户之间的分界线是什么

418
00:12:59,740 --> 00:13:01,240
0,180 180,240 240,810 810,1200 1200,1500
sort of dividing line is

419
00:13:01,240 --> 00:13:05,620
0,390 390,1050 1380,2280 2280,3570 3690,4380
between users| {} and the
|而分界线实际上是这样的，

420
00:13:05,620 --> 00:13:07,480
0,330 330,540 540,780 870,1560 1560,1860
dividing line is is really

421
00:13:07,480 --> 00:13:08,380
0,690
this,|
|

422
00:13:09,830 --> 00:13:11,090
0,360 360,510 510,840 840,1020 1020,1260
there's {sort,of,a} dividing line between
在应用程序和存储之间有一条分界线

423
00:13:11,090 --> 00:13:12,530
0,90 90,720 720,930 930,1320 1320,1440
the application and storage| and
|因此有一个存储API，

424
00:13:12,530 --> 00:13:14,630
0,210 210,570 570,840 870,1290 1290,2100
so there's a storage API,|
|

425
00:13:15,770 --> 00:13:17,930
0,120 120,600 600,1170 1170,1890 1890,2160
you have {sort,of,the} uniform,| because
你有一种制服，|因为有许多不同的应用程序将使用相同的存储[]，

426
00:13:17,930 --> 00:13:19,430
0,180 180,210 210,600 600,870 870,1500
there are many different applications

427
00:13:19,430 --> 00:13:20,030
0,60 60,180 180,270 270,510 510,600
are going to use the

428
00:13:20,030 --> 00:13:21,200
0,270 270,600 600,690 690,1110 1110,1170
same storage {[] -},| you
|你知道也许它创建的这个应用程序的待办事项列表，

429
00:13:21,200 --> 00:13:22,520
0,120 120,450 450,570 570,1230 1230,1320
know maybe this application it

430
00:13:22,520 --> 00:13:24,830
0,300 300,600 600,1110 1500,2040 2040,2310
creates todo list,| {} maybe
|可能是一张照片清单，

431
00:13:24,830 --> 00:13:25,970
0,150 150,210 210,600 600,930 930,1140
it's a photo list,| maybe
|也许这是推特上的克隆

432
00:13:25,970 --> 00:13:28,490
0,180 180,1140 1170,1770 1770,2310 2310,2520
it's a Twitter clone,| this
|这将检索来自不同用户的推文，并将它们整合在一起并呈现给用户。

433
00:13:28,490 --> 00:13:30,470
0,690 690,1080 1080,1230 1230,1500 1500,1980
retrives tweets from different users

434
00:13:30,470 --> 00:13:32,120
0,150 150,540 540,870 1170,1320 1320,1650
and integrates them and present

435
00:13:32,120 --> 00:13:33,140
0,180 180,300 300,390 390,900
them to the user.|
|

436
00:13:33,580 --> 00:13:35,620
0,600 900,1410 1410,1650 1650,1830 1830,2040
{} And {} it's really
它实际上就是那种单一存储API

437
00:13:35,620 --> 00:13:36,640
0,120 120,240 240,300 300,660 660,1020
that sort of single storage

438
00:13:36,640 --> 00:13:40,420
0,840 870,2190 2190,2280 3150,3480 3480,3780
{API -}| and {} that
|这实际上提供了应用程序和数据之间的分界线，

439
00:13:40,420 --> 00:13:41,980
0,270 270,870 870,1050 1050,1170 1170,1560
actually provides {you,know} the dividing

440
00:13:41,980 --> 00:13:44,920
0,480 480,1260 1320,1860 1860,2010 2010,2940
line between {} the applications

441
00:13:44,920 --> 00:13:46,100
0,450 450,540 540,900
and the data,|
|

442
00:13:46,550 --> 00:13:47,600
0,120 120,330 330,450 450,720 720,1050
of course, that storage API
当然，存储API必须是非常通用的，可以支持多个应用程序，

443
00:13:47,600 --> 00:13:48,380
0,150 150,210 210,300 300,540 540,780
has to be quite general

444
00:13:48,380 --> 00:13:50,180
0,330 330,510 510,810 810,1110 1110,1800
purpose can support multiple applications,|
|

445
00:13:50,210 --> 00:13:51,470
0,360 360,570 570,750 750,840 840,1260
but also has to allow
而且还必须允许在不同、不同用户和不同应用之间共享，

446
00:13:51,470 --> 00:13:54,110
0,450 450,1200 1290,2100 2100,2400 2400,2640
sharing between different, between different

447
00:13:54,110 --> 00:13:55,790
0,270 270,390 390,600 600,1380 1500,1680
users and different applications,| the
|模或权限。

448
00:13:55,790 --> 00:13:57,800
0,600 600,780 780,900 900,1470
modulo or the permissions.|
|

449
00:13:59,210 --> 00:14:01,430
0,690 810,1200 1230,1680 1680,2010 2010,2220
And so let's say you
假设你想要建立一种你知道的待办事项列表，

450
00:14:01,430 --> 00:14:05,090
0,300 300,840 870,1860 2130,2820 3240,3660
wanted to build {} {sort,of}

451
00:14:05,090 --> 00:14:07,080
0,120 120,750 750,1290
{you,know} todo list,|
|

452
00:14:12,560 --> 00:14:14,540
0,540 540,1350 1350,1620 1620,1800 1800,1980
then {you,know} between {U1 -}
那么你知道在U1和U2之间，

453
00:14:14,540 --> 00:14:16,340
0,90 90,390 390,720 720,1170 1170,1800
and {U2 -},| then {}
|那么我们从U1的角度来看，

454
00:14:16,340 --> 00:14:17,840
0,510 780,1140 1140,1200 1200,1380 1380,1500
let's look at this from

455
00:14:17,840 --> 00:14:19,010
0,90 90,540 540,600 600,810 810,1170
the perspective of {U1 -},|
|

456
00:14:19,250 --> 00:14:20,180
0,120 120,240 240,690 690,810 810,930
you know probably there would
你知道，可能会有一些操作或一些共享操作

457
00:14:20,180 --> 00:14:22,310
0,210 210,390 390,570 570,1170 1260,2130
be some {operation -} or

458
00:14:22,310 --> 00:14:23,630
0,180 180,510 510,930 930,1050 1050,1320
some sharing operations| and {U2
|U2，U1，说你们是我的待办事项清单上的名字，

459
00:14:23,630 --> 00:14:24,650
0,240 240,450 450,660 660,870 870,1020
-}, {U1 -}, saying like

460
00:14:24,650 --> 00:14:26,810
0,270 270,840 1290,1530 1530,1680 1680,2160
yeah you're {} the names

461
00:14:26,810 --> 00:14:28,340
0,180 180,540 570,750 750,1050 1050,1530
of the my todo list,|
|

462
00:14:28,640 --> 00:14:30,560
0,660 750,1380 1380,1500 1500,1620 1620,1920
{} and you know user
你知道，用户1可以下载U2的待办事项列表，

463
00:14:30,560 --> 00:14:32,120
0,360 360,540 540,720 720,1440 1440,1560
1 can then download you

464
00:14:32,120 --> 00:14:33,620
0,120 120,570 600,960 960,1200 1200,1500
know the {U2's - -}

465
00:14:33,620 --> 00:14:35,870
0,330 360,630 630,1110 1410,1950 1950,2250
{} todo list,| {} maybe
|也许可以检查一下文件上的签名，以验证数据是否真的是U2写的

466
00:14:35,870 --> 00:14:37,550
0,330 330,450 450,600 600,810 810,1680
check you know the signature

467
00:14:37,550 --> 00:14:38,780
0,570 570,630 630,990 990,1140 1140,1230
on the {file -} to

468
00:14:38,780 --> 00:14:40,280
0,450 450,570 570,810 810,930 930,1500
verify the data was indeed

469
00:14:40,310 --> 00:14:42,380
0,540 540,780 780,1050 1050,1500 1920,2070
written by {U2 -}| and
|然后你知道，整合你知道，我们有自己的待办事项清单

470
00:14:42,380 --> 00:14:43,850
0,330 330,480 480,1230 1230,1320 1320,1470
then {you,know} integrate you know

471
00:14:43,850 --> 00:14:45,110
0,540 570,840 840,990 990,1110 1110,1260
that {} we have it's

472
00:14:45,110 --> 00:14:47,540
0,540 570,1290 1320,1620 1620,1950 1950,2430
own {} todo list| and
|并且呈现包含U1和U2的待办事项的U1或共享待办事项列表。

473
00:14:47,540 --> 00:14:49,430
0,360 360,450 450,720 720,1110 1260,1890
present the {U1 -} or

474
00:14:49,430 --> 00:14:50,780
0,300 300,540 540,840 840,990 990,1350
share todo list that contains

475
00:14:50,780 --> 00:14:52,190
0,300 300,540 540,990 990,1290 1290,1410
both {U1's -} and {U2's

476
00:14:52,190 --> 00:14:53,630
0,150 150,720 720,810 810,930 930,1440
- -} {todo -} items.|
|

477
00:14:54,950 --> 00:14:56,040
0,780

478
00:14:56,420 --> 00:14:57,470
0,240 240,330 330,660 660,750 750,1050
Sort of sort of the
在某种程度上，实际上是为应用程序构建分散的体系结构。

479
00:14:57,470 --> 00:15:00,350
0,690 840,1680 1710,2310 2310,2400 2400,2880
general {} view of actually

480
00:15:00,350 --> 00:15:04,190
0,840 840,1620 2280,3120 3120,3660 3660,3840
buildings {} decentralized architecture for

481
00:15:04,190 --> 00:15:05,200
0,780
applications.|
|

482
00:15:07,010 --> 00:15:08,420
0,240 240,540 540,690 690,1110
Any questions so far?|
到目前为止还有什么问题吗？|

483
00:15:21,330 --> 00:15:23,580
0,210 210,840 1410,1890 1890,2130 2130,2250
Okay, so so far, we've
好的，到目前为止，我们希望已经收到了集中化方法的主要痛点之一，

484
00:15:23,580 --> 00:15:25,230
0,300 300,930 930,1020 1020,1170 1170,1650
hopefully received you know this

485
00:15:25,230 --> 00:15:27,030
0,660 660,810 810,900 900,1170 1290,1800
addresses one of the major

486
00:15:27,030 --> 00:15:28,920
0,90 90,330 480,1140 1140,1590 1620,1890
you know {pain,point} for the

487
00:15:29,430 --> 00:15:30,960
0,540 540,1110 1140,1290 1290,1410 1410,1530
centralized approach,| that {basically -
|基本上，你所知道的用户仍然控制着数据，

488
00:15:30,960 --> 00:15:32,250
0,60 60,180 180,780 780,900 900,1290
-} the users {you,know,still,in -}

489
00:15:32,250 --> 00:15:33,750
0,390 390,450 450,540 540,900 1050,1500
control of the data, {}|
|

490
00:15:33,750 --> 00:15:34,980
0,180 180,390 390,660 660,1110 1110,1230
it's not owned by a
它不再属于某个特定的站点

491
00:15:34,980 --> 00:15:36,570
0,330 330,600 600,1080 1080,1230 1230,1590
particular site anymore| and users
|用户决定谁、哪些应用程序和谁实际获得数据访问权限。

492
00:15:36,570 --> 00:15:39,540
0,90 90,570 600,1950 1950,2310 2310,2970
{decide -} who, which applications

493
00:15:39,540 --> 00:15:40,920
0,120 120,360 360,660 660,1140 1140,1380
and who actually get access

494
00:15:40,920 --> 00:15:42,990
0,120 120,450 1200,1470 1470,1740 1740,2070
to data.| I know those
|我知道这些都是理想的房产，

495
00:15:42,990 --> 00:15:45,820
0,270 270,1020 1020,1860 2130,2730
are desirable {} property,|
|

496
00:15:46,330 --> 00:15:48,100
0,540 600,1080 1080,1170 1170,1320 1320,1770
{} but you know the
但你知道，整个设计也面临着一系列独特的挑战

497
00:15:48,100 --> 00:15:49,300
0,150 150,330 330,780 780,960 960,1200
this whole design is also

498
00:15:49,300 --> 00:15:50,260
0,180 180,450 450,720 720,870 870,960
with its unique set of

499
00:15:50,260 --> 00:15:52,000
0,600 720,1020 1020,1140 1140,1350 1350,1740
challenges| and so let me
|所以让我把它们中的一些

500
00:15:52,000 --> 00:15:52,930
0,180 180,300 300,480 480,600 600,930
lay out some of them|
|

501
00:15:53,170 --> 00:15:54,160
0,270 270,450 450,810 810,930 930,990
and we'll focus on a
我们将在块堆栈的上下文中重点介绍其中的几个。

502
00:15:54,160 --> 00:15:54,790
0,240 240,330 330,510 510,570 570,630
few of them in the

503
00:15:54,790 --> 00:15:56,260
0,390 390,510 510,720 720,810 810,1470
context of {blockstack - -}.|
|

504
00:16:01,010 --> 00:16:01,910
0,300 300,420 420,600 600,720 720,900
And so there's sort of
所以有两大类的挑战，

505
00:16:01,910 --> 00:16:03,920
0,630 630,960 960,1320 1320,1920 1920,2010
two [] broad categories of

506
00:16:03,920 --> 00:16:05,990
0,600 810,1620 1620,1740 1740,2010 2010,2070
challenges,| {one,sort,of -} on the
|商业网站上的一种，收入模式是什么，

507
00:16:05,990 --> 00:16:07,760
0,360 360,780 1200,1590 1590,1680 1680,1770
business site, what is the

508
00:16:07,760 --> 00:16:11,870
0,330 330,750 2940,3210 3210,3480 3480,4110
revenue model,| {you,know} one will
|你知道有人会让这些应用程序真正被采用

509
00:16:13,100 --> 00:16:14,630
0,420 420,570 570,1080 1080,1320 1320,1530
get these applications actually being

510
00:16:14,630 --> 00:16:16,160
0,630 630,1140 1140,1230 1230,1350 1350,1530
adopted| and you know pay
|你知道，付钱让人们实际开发应用程序，

511
00:16:16,160 --> 00:16:17,450
0,240 240,570 570,690 690,930 930,1290
people money to actually develop

512
00:16:17,450 --> 00:16:20,660
0,90 90,990 1260,2250 2250,3000 3000,3210
the applications,| {} and so
|所以它们实际上变得非常好

513
00:16:20,660 --> 00:16:22,400
0,180 180,600 600,990 990,1230 1230,1740
they actually become really good|
|

514
00:16:22,400 --> 00:16:26,270
0,2190 2850,3270 3270,3420 3420,3780 3780,3870
and people are excited by
人们通过使用它们而感到兴奋，

515
00:16:26,270 --> 00:16:26,840
0,270 270,450
using them,|
|

516
00:16:27,320 --> 00:16:29,270
0,240 240,510 540,900 900,1050 1050,1950
{} I'm not really gonna
我真的不想谈这个，

517
00:16:29,330 --> 00:16:30,590
0,360 360,570 570,720 720,840 840,1260
talk about that at all,|
|

518
00:16:31,280 --> 00:16:32,750
0,750 750,1110 1110,1200 1200,1320 1320,1470
but instead you know what
但相反，你知道我最关注的是技术挑战。

519
00:16:32,750 --> 00:16:33,890
0,330 330,600 600,720 720,780 780,1140
{I,most} focus on the technical

520
00:16:33,890 --> 00:16:35,220
0,510
challenges.|
|

521
00:16:43,460 --> 00:16:45,590
0,150 150,630 630,1170 1440,1800 1800,2130
And there's several of them,|
他们中有几个人，|

522
00:16:46,160 --> 00:16:48,560
0,570 570,1440 1440,1980 1980,2220 2220,2400
{} one is going to
我们先回过头来看看这张照片，

523
00:16:48,560 --> 00:16:49,820
0,120 120,360 360,450 450,780 900,1260
go back to this picture

524
00:16:49,820 --> 00:16:51,650
0,210 210,870 1020,1590 1590,1710 1710,1830
here before,| {} you know
|您知道关键接口的存储API类型

525
00:16:51,650 --> 00:16:52,970
0,240 240,600 600,1020 1020,1230 1230,1320
the storage API sort of

526
00:16:52,970 --> 00:16:56,240
0,630 660,1440 1560,2190 2190,2580 2910,3270
the key interface| and {}
|而且你知道接口是最小的

527
00:16:56,240 --> 00:16:57,230
0,120 120,240 240,780 780,870 870,990
you know interfaces to be

528
00:16:57,230 --> 00:16:58,220
0,600 600,690 690,750 750,900 900,990
minimal| and it has to
|而且它必须是足够通用的，

529
00:16:58,220 --> 00:17:00,290
0,420 420,1080 1080,1380 1380,1650 1650,2070
be {} general purpose enough,|
|

530
00:17:00,560 --> 00:17:02,750
0,630 660,1020 1020,1470 1470,1710 1710,2190
{} but {in,typically} it's actually,
但在通常情况下，它实际上是，你知道它与这里的API不是一回事，

531
00:17:02,750 --> 00:17:03,380
0,90 90,180 180,330 330,540 540,630
you know it's not the

532
00:17:03,380 --> 00:17:05,210
0,360 360,780 780,990 990,1350 1350,1830
same thing as the API

533
00:17:05,210 --> 00:17:06,640
0,270 360,660 660,1170
that sits here,|
|

534
00:17:07,030 --> 00:17:08,100
0,750

535
00:17:08,310 --> 00:17:09,720
0,450 450,510 510,1200 1200,1350 1350,1410
between the application and the
在应用程序和数据库之间。

536
00:17:09,720 --> 00:17:10,720
0,840
database.|
|

537
00:17:11,000 --> 00:17:13,100
0,570 630,1230 1230,1350 1350,1770 1770,2100
So let's do that, {hold,on,a}
所以让我们这样做，等一下。

538
00:17:13,100 --> 00:17:13,840
0,420
second.|
|

539
00:17:25,630 --> 00:17:26,520
0,600

540
00:17:39,500 --> 00:17:40,500
0,450

541
00:17:41,280 --> 00:17:43,020
0,210 210,540 540,1110 1110,1380 1380,1740
Okay, hopefully every {can,seen} screen
好的，希望每个人都能再次看到棋盘的屏幕，很好。

542
00:17:43,020 --> 00:17:45,340
0,480 600,840 840,1230 1380,1830
of board again, good.|
|

543
00:17:45,930 --> 00:17:47,080
0,660

544
00:17:48,000 --> 00:17:49,830
0,660 900,1200 1200,1350 1350,1770 1770,1830
The, {so,there's} a couple of
所以，有几个挑战，

545
00:17:49,830 --> 00:17:51,390
0,900 900,1050 1050,1320 1320,1530 1530,1560
challenges,| you know what I
|你知道我要指出的是，

546
00:17:51,390 --> 00:17:52,170
0,120 120,240 240,420 420,630 630,780
was going to point out

547
00:17:52,170 --> 00:17:54,240
0,90 90,360 360,780 780,1470 1740,2070
is,| that storage API is
|该存储API通常不那么强大，

548
00:17:54,240 --> 00:17:56,520
0,360 360,600 600,720 720,1470 1650,2280
typically not as powerful,| where
|在文件系统API不如SQL强大的情况下，

549
00:17:56,520 --> 00:17:58,290
0,180 180,420 420,720 720,1320 1320,1770
that file system API is

550
00:17:58,290 --> 00:18:00,180
0,210 210,330 330,840 840,1320 1320,1890
not as powerful as SQL,|
|

551
00:18:01,740 --> 00:18:04,440
0,540 540,1440 1530,1980 1980,2550 2580,2700
{} and {} {futhermore -
此外，你知道，并不是所有的数据都像在一个地方方便地使用，

552
00:18:04,440 --> 00:18:05,940
0,600 810,960 960,1020 1020,1350 1350,1500
-}, you know, not all

553
00:18:05,940 --> 00:18:06,960
0,90 90,480 480,660 660,750 750,1020
the data sort of all

554
00:18:06,960 --> 00:18:08,490
0,510 510,660 660,1350 1350,1440 1440,1530
uses like handy in a

555
00:18:08,490 --> 00:18:10,230
0,360 360,840 840,1140 1140,1260 1260,1740
single place,| you can run
|您可以在上运行任意查询，

556
00:18:10,230 --> 00:18:12,450
0,750 750,1140 1140,1560 1680,1800 1800,2220
arbitrary queries on,| to integrate
|以任何特定于应用程序的方式集成它。

557
00:18:12,450 --> 00:18:14,610
0,120 120,450 870,1320 1320,1770 1770,2160
it in whatever application specific

558
00:18:14,610 --> 00:18:15,260
0,480
manners.|
|

559
00:18:15,840 --> 00:18:17,040
0,240 240,630 720,960 960,1110 1110,1200
Yeah, so that's sort of
是的，所以这是一种挑战，

560
00:18:17,040 --> 00:18:20,310
0,540 540,990 990,1560 1980,2520 2520,3270
a challenge,| that applications rely
|应用程序依赖于能够对所有用户数据运行任意查询的能力，

561
00:18:20,310 --> 00:18:21,750
0,90 90,150 150,780 990,1230 1230,1440
on the power of being

562
00:18:21,750 --> 00:18:23,340
0,180 180,270 270,450 450,1140 1140,1590
able to run arbitrary queries

563
00:18:23,340 --> 00:18:24,480
0,270 270,480 480,540 540,810 810,1140
over all the user data,|
|

564
00:18:24,480 --> 00:18:25,890
0,180 180,270 270,450 450,960 960,1410
that is in decentralized application
即在去中心化应用中将更难实现，

565
00:18:25,890 --> 00:18:26,790
0,210 210,270 270,510 510,570 570,900
will be harder to achieve,|
|

566
00:18:26,790 --> 00:18:27,990
0,240 240,330 330,570 570,720 810,1200
because the data is spread
因为数据可能分散在可能不同的存储服务器上。

567
00:18:27,990 --> 00:18:30,030
0,420 420,1020 1020,1350 1350,1770 1770,2040
out over maybe maybe different

568
00:18:30,030 --> 00:18:30,960
0,300 300,750
storage servers.|
|

569
00:18:31,780 --> 00:18:33,100
0,300 300,540 540,750 750,1200 1200,1320
{} There's also features that
还有一些功能可能更难实现，

570
00:18:33,100 --> 00:18:34,270
0,120 120,180 180,420 420,510 510,1170
might be harder to implement,|
|

571
00:18:34,600 --> 00:18:36,550
0,720 750,900 900,960 960,1590 1770,1950
{} like for example if
例如，如果您想要像eBay这样的工具，

572
00:18:36,550 --> 00:18:39,160
0,60 60,240 240,480 480,1560 1680,2610
you want {implement,like -} ebay,|
|

573
00:18:39,190 --> 00:18:42,490
0,2010 2220,2700 2700,3030 3030,3210 3210,3300
then {} usually have to
然后通常要提交某种出价，

574
00:18:42,490 --> 00:18:45,190
0,300 300,540 540,900 900,2250 2280,2700
submit sort of {} bids,|
|

575
00:18:45,190 --> 00:18:46,060
0,210 210,300 300,420 420,570 570,870
but you know we want
但你知道我们想马上下载那些标书，

576
00:18:46,060 --> 00:18:47,680
0,180 180,600 600,780 780,990 990,1620
{} {to,download} those bids immediately,|
|

577
00:18:47,950 --> 00:18:48,700
0,330 330,450 450,600 600,660 660,750
so there has to be,|
所以必须要有，|

578
00:18:48,700 --> 00:18:51,130
0,240 240,570 570,1170 1620,2190 2190,2430
so so trusted aspect to
因此，可信的方面实际上整合了这些出价

579
00:18:51,130 --> 00:18:52,540
0,210 210,420 420,840 840,1050 1050,1410
that actually integrates these bids|
|

580
00:18:52,540 --> 00:18:53,650
0,240 240,420 420,840 840,930 930,1110
and then decides you know
然后决定你实际上知道谁是赢家，

581
00:18:53,650 --> 00:18:54,660
0,240 240,420 420,510 510,870
actually who's the winner,|
|

582
00:18:55,160 --> 00:18:58,880
0,780 780,1230 1230,1380 1380,2220 3090,3720
without disclosing those beforehand {}.|
而不会事先透露这些信息。|

583
00:18:59,030 --> 00:19:03,020
0,540 540,780 780,2310 2730,3720 3720,3990
Similarly, there's a challenges around
同样，管理方面也存在挑战，

584
00:19:03,020 --> 00:19:06,110
0,720 870,1530 1530,2190 2190,2550 2550,3090
management,| {} typically these decentralized
|通常，这些分散的应用程序涉及加密密钥。

585
00:19:06,110 --> 00:19:08,270
0,660 660,810 810,1140 1140,1560 1560,2160
applications, {you,know} {involve -} {}

586
00:19:08,360 --> 00:19:09,860
0,390 390,930
crypto keys.|
|

587
00:19:11,230 --> 00:19:12,220
0,300 300,570 570,720 720,900 900,990
And so, there has to
因此，你知道这通常是一种[]情景，

588
00:19:12,220 --> 00:19:13,570
0,120 120,300 300,390 390,930 1200,1350
be sort of {} you

589
00:19:13,570 --> 00:19:15,130
0,360 360,600 600,1200 1200,1290 1290,1560
know that's often a []

590
00:19:15,130 --> 00:19:17,170
0,720 990,1290 1290,1560 1560,1860 1860,2040
scenario,| some user loses their
|一些用户丢失了他们私钥

591
00:19:17,170 --> 00:19:18,600
0,360 360,630 630,720 720,1170
private key| and then
|然后你知道你不能再用你的，不能再得到你的数据了，

592
00:19:18,820 --> 00:19:19,690
0,120 120,270 270,420 420,630 630,870
You know you can't use

593
00:19:19,690 --> 00:19:21,070
0,420 450,840 840,990 990,1170 1170,1380
your, can't get your data

594
00:19:21,070 --> 00:19:23,800
0,480 900,1350 1350,1950 1950,2400 2400,2730
anymore,| {} and or somebody
|或者有人真的偷了你的私钥

595
00:19:23,800 --> 00:19:25,180
0,210 210,510 510,660 660,1170 1170,1380
actually steals your {private,key}| and
|然后他们就可以获取你的数据。

596
00:19:25,180 --> 00:19:26,710
0,720 750,960 960,1110 1110,1380 1380,1530
then they can get your

597
00:19:26,710 --> 00:19:27,360
0,330
data.|
|

598
00:19:27,940 --> 00:19:29,740
0,420 720,960 960,1080 1080,1440 1440,1800
{} So there's a series
所以有一系列的技术挑战，

599
00:19:29,740 --> 00:19:31,690
0,270 270,900 900,1290 1290,1740 1740,1950
of {} technical challenge,| {you,know}
|你知道，要让这件事真正奏效，

600
00:19:31,690 --> 00:19:33,670
0,150 150,930 930,1080 1080,1560 1560,1980
to make this actually work,|
|

601
00:19:33,910 --> 00:19:35,050
0,330 330,450 450,630 630,720 720,1140
{} and one of them,
其中一个，剩下的一个，也是这节课的主题，就是命名。

602
00:19:35,260 --> 00:19:36,520
0,90 90,570 570,900 900,1080 1080,1260
the one remaining one which

603
00:19:36,520 --> 00:19:37,660
0,270 270,660 660,750 750,1080 1080,1140
is mostly the topic of

604
00:19:37,660 --> 00:19:39,380
0,180 180,720 780,930 930,1350
this lecture is naming.|
|

605
00:19:42,740 --> 00:19:45,620
0,600 1110,1410 1410,1830 1830,2430 2430,2880
{} So {sort,of} broader challenges
因此，更广泛的挑战基本上就是对任何类型的分散式应用程序基础架构的挑战

606
00:19:45,620 --> 00:19:47,360
0,120 120,450 450,900 1140,1530 1530,1740
are basically {I,think,you,know} challenge for

607
00:19:47,360 --> 00:19:48,680
0,240 240,390 390,480 480,840 840,1320
any sort of {decentralized -}

608
00:19:48,710 --> 00:19:51,680
0,720 720,1530 1740,1920 1920,2250 2250,2970
application infrastructure| and certainly also
|当然在块堆栈的上下文中也是如此，

609
00:19:51,680 --> 00:19:53,180
0,210 210,270 270,810 810,1050 1050,1500
in the context of {}

610
00:19:53,210 --> 00:19:54,890
0,300 300,690 990,1410 1410,1620 1620,1680
{blockstack -},| but in the
|但在块堆栈的情况下，

611
00:19:54,890 --> 00:19:56,570
0,180 180,270 270,810 840,1200 1200,1680
case of blockstack,| {we're,gone} mostly
|我们大部分时间都离开了，你知道的，我们会看到名字的重要性

612
00:19:56,570 --> 00:19:58,490
0,270 270,540 540,960 960,1440 1470,1920
{you,know,we'll} see actually the importance

613
00:19:58,490 --> 00:20:00,020
0,120 120,630 780,930 930,1140 1140,1530
of names| and why naming
|以及为什么命名实际上是一个挑战。

614
00:20:00,020 --> 00:20:02,330
0,480 480,660 660,1320 1320,1680 1680,2310
actually is are a challenge.|
|

615
00:20:03,380 --> 00:20:05,030
0,210 210,330 330,1020 1140,1170 1200,1650
Okay, so before {} continue,
好的，在继续之前，我只想在这里停一下，

616
00:20:05,030 --> 00:20:06,140
0,90 90,240 240,360 360,660 690,1110
I just want to stop

617
00:20:06,140 --> 00:20:06,890
0,240 240,300 300,360 360,630 630,750
here for a second,| just
|只是给那些想问任何问题的人

618
00:20:06,890 --> 00:20:08,390
0,300 690,960 960,1170 1170,1290 1290,1500
{sort,of,give} people trying to ask

619
00:20:08,390 --> 00:20:10,670
0,150 150,660 660,1080 1080,1380 1620,2280
any questions| to {} contrast
|为了对比这两种不同的构建应用程序的方式，

620
00:20:10,670 --> 00:20:12,020
0,210 210,270 270,480 480,960 960,1350
sort of these two different

621
00:20:12,020 --> 00:20:14,630
0,390 390,510 510,1260 1260,2280 2280,2610
ways of building applications,| whether
|无论是像传统模式那样的集中化，

622
00:20:14,630 --> 00:20:16,790
0,210 270,1080 1080,1530 1530,1650 1650,2160
it's centralized as {in,sort,of} traditional

623
00:20:16,790 --> 00:20:17,840
0,330 330,480 480,690 690,930 930,1050
model,| that we're probably all
|我们可能都很熟悉，

624
00:20:17,840 --> 00:20:19,550
0,360 360,690 1110,1230 1230,1470 1470,1710
familiar with,| you know or
|或者这种去中心化的模式。

625
00:20:19,550 --> 00:20:22,120
0,210 210,900 900,1350 1590,2310
this decentralized model {}.|
|

626
00:20:22,890 --> 00:20:24,180
0,210 210,450 450,660 660,900 900,1290
So what's the {} challenge
那么，竞标到底有什么挑战呢？

627
00:20:24,180 --> 00:20:25,640
0,480 480,630 630,1200
exactly with bids?|
|

628
00:20:26,600 --> 00:20:27,620
0,210 210,360 360,450 450,540 540,1020
So which is the challenge?|
那么，挑战是什么呢？|

629
00:20:28,230 --> 00:20:29,440
0,240 240,870
With bids.|
通过出价。|

630
00:20:30,200 --> 00:20:32,570
0,510 570,1380 1380,1560 1560,1680 1680,2370
Oh, {} you know you
哦，你知道你需要一个，

631
00:20:33,260 --> 00:20:34,670
0,390 390,660 660,1200 1200,1350 1350,1410
need an,| application needs to
|应用程序需要能够访问用户出价，

632
00:20:34,670 --> 00:20:35,780
0,150 150,480 480,750 750,840 840,1110
have access to the user

633
00:20:35,780 --> 00:20:37,880
0,510 750,1320 1320,1530 1530,1710 1710,2100
bids,| {} but shouldn't disclose
|但不应该将它们透露给其他应用程序，对

634
00:20:37,880 --> 00:20:39,470
0,240 240,540 540,630 630,840 840,1590
them, right, to other applications|
|

635
00:20:39,500 --> 00:20:41,150
0,510 510,660 660,810 810,1170 1170,1650
and so that means that,|
这就意味着，|

636
00:20:41,540 --> 00:20:44,360
0,480 480,1890 1920,2490 2490,2640 2640,2820
{} the application that looks
这个应用程序看起来像是一个新的，

637
00:20:44,360 --> 00:20:45,980
0,180 180,240 240,420 420,960 1170,1620
like a new one,| I'm
|我提交了一点，

638
00:20:45,980 --> 00:20:47,900
0,300 300,360 360,750 1020,1680 1680,1920
submitting a bit,| {} I
|我被U2咬到了，

639
00:20:47,900 --> 00:20:49,220
0,240 240,600 600,930 1020,1200 1200,1320
get {U2's,bit -},| but my
|但我的申请并不是立即关闭U2的比特，

640
00:20:49,220 --> 00:20:50,600
0,450 450,720 720,900 900,1020 1020,1380
application isn't really to close

641
00:20:50,600 --> 00:20:51,920
0,450 450,630 630,990 990,1080 1080,1320
{U2's,bit -} immediately to me,|
|

642
00:20:51,920 --> 00:20:53,240
0,360 360,570 570,810 810,900 900,1320
because it wouldn't be fair,|
因为这不公平，|

643
00:20:53,790 --> 00:20:55,110
0,660 660,960 960,1080 1080,1200 1200,1320
{} and so how would
那么你将如何做到这一点，

644
00:20:55,110 --> 00:20:56,010
0,90 90,210 210,420 420,630 630,900
you do that,| so you
|所以你只需与受信任的一方或任何协议一起表演，

645
00:20:56,010 --> 00:20:57,360
0,240 240,870 870,990 990,1020 1020,1350
just perform with a trusted

646
00:20:57,360 --> 00:20:59,310
0,450 450,630 630,990 990,1290 1380,1950
party or whatever some protocol,|
|

647
00:20:59,310 --> 00:21:00,300
0,180 180,360 360,540 540,660 660,990
that actually makes that happen.|
这实际上是让这一切发生的。|

648
00:21:03,700 --> 00:21:04,500
0,270 270,510
Thank you.|
谢谢。|

649
00:21:06,840 --> 00:21:07,950
0,240 240,330 330,720 720,900 900,1110
If the application runs your
如果应用程序在您的工作站上运行您的模型，

650
00:21:07,950 --> 00:21:09,090
0,390 390,540 540,660 660,990 990,1140
models on your workstation,| you
|你可以修改作品，修改应用程序，对吧。

651
00:21:09,090 --> 00:21:10,050
0,90 90,420 420,510 510,780 780,960
can modify the work, the

652
00:21:10,050 --> 00:21:11,220
0,480 540,870
application, right.|
|

653
00:21:14,080 --> 00:21:15,340
0,300 300,660 660,780 780,870 870,1260
{} Sorry, in the previous
对不起，在上一张幻灯片中，我想您也提到了，

654
00:21:15,340 --> 00:21:16,420
0,300 300,390 390,600 600,720 720,1080
slide, I think you mentioned

655
00:21:16,420 --> 00:21:18,080
0,180 180,630 810,1410
{also -}, {}|
|

656
00:21:18,490 --> 00:21:20,290
0,420 420,720 720,960 960,1440 1440,1800
app one being different from,|
App One不同于，|

657
00:21:20,320 --> 00:21:21,940
0,660 720,960 960,1140 1140,1410 1410,1620
like the two apps being
就像这两款应用是不同的，

658
00:21:21,940 --> 00:21:23,960
0,660 1200,1740
different, {}|
|

659
00:21:24,150 --> 00:21:25,770
0,180 180,240 240,540 540,930 930,1620
what do you mean exactly.|
你到底是什么意思。|

660
00:21:25,920 --> 00:21:27,480
0,390 390,750 750,990 990,1380 1380,1560
Well, example, you just made
嗯，举个例子，你刚才的比喻非常[干脆]，

661
00:21:27,480 --> 00:21:28,590
0,60 60,450 450,510 510,720 720,1110
the analogy is very [crisp],|
|

662
00:21:28,590 --> 00:21:29,670
0,180 180,330 330,480 480,630 630,1080
because this could be vim,
因为这可能是vim，这可能是emacs

663
00:21:30,670 --> 00:21:32,380
0,210 210,330 330,450 450,840 1230,1710
this could be emacs| and
|U1和U2可以决定使用哪些应用程序来实际修改它们的数据，

664
00:21:32,380 --> 00:21:33,820
0,150 150,540 540,930 930,1080 1080,1440
{U1 -} U2 {get,to} decide

665
00:21:33,820 --> 00:21:34,780
0,210 210,660 660,720 720,840 840,960
which applications are going to

666
00:21:34,780 --> 00:21:36,520
0,270 270,390 390,660 660,1200 1200,1740
use to actually modify their

667
00:21:36,580 --> 00:21:39,640
0,660 690,990 1770,2310 2310,2790 2790,3060
data, right,| {} and {you,know}
|你知道，今天是一个集中化的模式

668
00:21:39,640 --> 00:21:41,380
0,480 480,690 690,810 810,1230 1230,1740
today is a centralized model|
|

669
00:21:41,440 --> 00:21:42,880
0,150 150,360 360,540 540,870 870,1440
and others not really possible,|
还有一些是不可能的，|

670
00:21:42,910 --> 00:21:43,900
0,120 120,210 210,360 360,630 630,990
you know you can't have
你知道你基本上不可能有两个推特应用程序，

671
00:21:43,930 --> 00:21:45,910
0,330 330,660 660,1050 1050,1590 1590,1980
basically two Twitter apps,| where
|U1是与Twitter应用程序交互的一种方式

672
00:21:45,910 --> 00:21:46,750
0,120 120,330 330,570 570,750 750,840
{U1 -} one way of

673
00:21:46,750 --> 00:21:47,800
0,480 480,570 570,630 630,930 930,1050
interacting with the Twitter app|
|

674
00:21:47,800 --> 00:21:48,700
0,90 90,300 300,480 480,690 690,900
and somebody else likes them,
其他人喜欢它们，用不同的方式来做，

675
00:21:48,700 --> 00:21:49,390
0,150 150,270 270,360 360,420 420,690
do it in a different

676
00:21:49,390 --> 00:21:49,760
0,180
way,|
|

677
00:21:50,970 --> 00:21:52,290
0,240 240,450 450,570 570,840 840,1320
that's just do Twitter app.|
这就是推特应用程序。|

678
00:21:53,230 --> 00:21:54,660
0,210 210,480 480,750 750,1080
I see, thank you.|
我明白了，谢谢你。|

679
00:21:54,960 --> 00:21:57,150
0,180 180,1260 1260,1740 1740,1800 1800,2190
I I had a question
我我有一个问题是关于去中心化的LIKE模型的设计，

680
00:21:57,150 --> 00:21:58,500
0,210 210,630 630,780 780,1230 1230,1350
just about the design of

681
00:21:58,500 --> 00:22:01,080
0,90 90,960 1200,1800 1800,2310 2400,2580
the decentralized like model,| is
|这个应用程序有必要像这样，

682
00:22:01,080 --> 00:22:02,400
0,300 300,840 840,960 960,1080 1080,1320
it necessary for the app

683
00:22:02,400 --> 00:22:04,320
0,120 120,300 300,1200 1290,1500 1500,1920
to be like,| a client
|一个客户端，或者你知道，

684
00:22:04,320 --> 00:22:05,580
0,270 270,360 360,750 780,900 900,1260
side or could you know,|
|

685
00:22:05,640 --> 00:22:06,540
0,180 180,300 300,450 450,690 690,900
could you have like these
你能像这些集中在互联网上的应用程序一样标志。

686
00:22:06,540 --> 00:22:08,610
0,180 180,270 270,870 870,1650 1830,2070
like the centralized apps on

687
00:22:08,610 --> 00:22:12,210
0,450 810,1590 1620,2010 2040,2610 2730,3600
the Internet {} sign.| You
|你可以有原则，互联网就像一个关键问题，

688
00:22:12,210 --> 00:22:13,290
0,90 90,270 270,630 630,720 720,1080
can have principle, the Internet

689
00:22:13,290 --> 00:22:14,820
0,180 180,330 330,930 930,1320 1320,1530
like a key issue,| it
|它不一定要在用户的工作站上运行，也不需要在任何地方运行，

690
00:22:14,820 --> 00:22:15,720
0,210 210,420 420,570 570,660 660,900
doesn't really have to run

691
00:22:15,720 --> 00:22:17,760
0,90 90,150 150,420 420,1230 1950,2040
on the user's workstation, to

692
00:22:17,760 --> 00:22:19,050
0,210 210,720 780,1020 1020,1140 1140,1290
run anywhere,| but it is
|但这只是用户的控制。

693
00:22:19,050 --> 00:22:20,200
0,150 150,240 240,540 540,1050
only the users control.|
|

694
00:22:21,170 --> 00:22:22,160
0,90 90,300 300,420 420,720 720,990
Of course, if somebody writes
当然，如果有人写的话，

695
00:22:22,160 --> 00:22:23,390
0,240 390,750 750,930 930,990 990,1230
it,| {} but the user
|但用户可以决定运行哪款应用程序来处理哪些数据。

696
00:22:23,390 --> 00:22:24,350
0,180 180,240 240,570 570,780 780,960
gets to decide which app

697
00:22:24,350 --> 00:22:25,940
0,90 90,390 450,930 930,1230 1230,1590
to run over what data.|
|

698
00:22:26,830 --> 00:22:28,900
0,480 810,1020 1020,1530 1590,1920 1920,2070
Right, so the so so
对，所以这里最重要的是，

699
00:22:28,900 --> 00:22:30,130
0,90 90,510 510,660 660,990 990,1230
the important thing here is,|
|

700
00:22:30,130 --> 00:22:32,020
0,210 210,570 810,930 930,1140 1140,1890
is that you know app
就是你知道APP选择了你，你就应该选择APP

701
00:22:32,020 --> 00:22:33,760
0,270 270,1080 1080,1230 1230,1410 1410,1740
choose you, you should choose

702
00:22:33,760 --> 00:22:35,440
0,150 150,390 390,780 870,1530 1530,1680
the app| and importantly the
|重要的是，这款应用程序可以访问任何存储提供商。

703
00:22:35,440 --> 00:22:36,670
0,270 270,450 450,810 810,990 990,1230
app has access to any

704
00:22:36,670 --> 00:22:38,560
0,390 390,1110
storage provider.|
|

705
00:22:40,100 --> 00:22:41,160
0,510
Thanks.|
谢谢。|

706
00:22:46,130 --> 00:22:47,760
0,390 420,600 600,780 780,1320
Okay, any other questions?|
好的，还有其他问题吗？|

707
00:22:52,240 --> 00:22:54,560
0,600 690,1200 1230,1410 1410,2040
Okay, {} so names,|
好的，那么名字，|

708
00:22:54,810 --> 00:22:56,130
0,480 480,930 930,1020 1020,1260 1260,1320
so this is getting a
因此，这在块堆栈中变得更多了。

709
00:22:56,130 --> 00:22:57,090
0,150 150,270 270,480 480,690 690,960
little bit more into {blockstack

710
00:22:57,090 --> 00:22:58,040
0,450
-}.|
|

711
00:23:08,070 --> 00:23:10,020
0,270 270,1470 1470,1590 1590,1680 1680,1950
And then let me sort
然后让我来做一些布局，比如这些名字所扮演的角色，

712
00:23:10,020 --> 00:23:11,850
0,450 450,900 900,1260 1260,1500 1530,1830
of layout like the role

713
00:23:11,850 --> 00:23:13,290
0,90 90,360 360,780 1050,1380 1380,1440
the names play,| first of
|首先，你必须列出待办事项清单

714
00:23:13,290 --> 00:23:14,490
0,240 240,660 660,900 900,990 990,1200
all, you have {todo -}

715
00:23:14,490 --> 00:23:15,150
0,270 270,390 390,450 450,600 600,660
list| and you want to
|你想和别人分享它，

716
00:23:15,150 --> 00:23:16,290
0,240 240,360 360,540 540,810 810,1140
share it with somebody else,|
|

717
00:23:16,290 --> 00:23:17,070
0,210 210,420 420,510 510,600 600,780
{you,know} have to be able
您知道，您必须能够命名要与其共享的用户

718
00:23:17,070 --> 00:23:18,000
0,90 90,330 330,480 480,810 810,930
to name that user for

719
00:23:18,000 --> 00:23:20,040
0,330 330,390 390,780 1650,1830 1830,2040
whom you're sharing| and so
|因此有一种从名称到用户的映射，

720
00:23:20,040 --> 00:23:21,000
0,180 180,270 270,450 450,510 510,960
there's a sort of mapping

721
00:23:21,000 --> 00:23:23,080
0,210 210,540 540,630 630,1170
from name to user,|
|

722
00:23:24,040 --> 00:23:25,460
0,300 300,360 360,720 720,1170
that's an important role,|
这是一个重要的角色，|

723
00:23:25,900 --> 00:23:28,030
0,360 360,870 870,1200 1200,1560 1560,2130
there's a mapping for name
存在从名称到数据位置的映射。

724
00:23:28,240 --> 00:23:30,020
0,300 300,870 870,960 960,1470
to location of data.|
|

725
00:23:35,990 --> 00:23:36,950
0,180 180,300 300,420 420,720 720,960
So if my todo list
所以如果我分享我的待办事项列表应用程序，

726
00:23:36,950 --> 00:23:38,570
0,540 540,690 690,870 870,1440 1470,1620
app I I share,| you
|您知道用户1和用户2的待办事项列表，

727
00:23:38,570 --> 00:23:40,280
0,330 570,840 840,1170 1170,1410 1410,1710
know todo list of user

728
00:23:40,280 --> 00:23:42,350
0,300 300,480 480,750 750,1320 1470,2070
one with user two, {}|
|

729
00:23:42,350 --> 00:23:44,420
0,450 450,960 990,1680 1680,1770 1770,2070
and then, {} you know
然后，您知道什么实际检索用户1想要用户2的数据，

730
00:23:44,420 --> 00:23:46,040
0,210 210,510 510,1080 1080,1260 1260,1620
what actually retrieve user one

731
00:23:46,040 --> 00:23:48,110
0,450 450,630 630,810 810,1380 1410,2070
want {user,two's - -} data,|
|

732
00:23:48,320 --> 00:23:49,070
0,180 180,330 330,540 540,630 630,750
{} there needs to be
需要有一种将用户实际命名为待办事项列表的方法

733
00:23:49,070 --> 00:23:50,450
0,90 90,300 300,420 420,660 660,1380
a way of actually naming

734
00:23:50,450 --> 00:23:52,730
0,390 390,600 600,1590 1620,1890 1890,2280
users to {} todo list|
|

735
00:23:52,970 --> 00:23:54,280
0,120 120,360 360,840 840,1140
and actually retrieving it.|
并且真的把它找回来了。|

736
00:23:55,000 --> 00:23:56,080
0,180 180,510 510,570 570,690 690,1080
And then you know there's
然后你知道有一种方法，

737
00:23:56,080 --> 00:23:56,800
0,150 150,330 330,450 450,660 660,720
a certain way,| there's a
|有一个名称到公钥映射，

738
00:23:56,800 --> 00:24:00,220
0,510 690,1140 1830,2130 2130,2790 2820,3420
name to public key {}

739
00:24:00,640 --> 00:24:02,530
0,930 1350,1470 1470,1590 1590,1800 1800,1890
mapping,| you know when I
|你知道，当我成功检索到用户2的数据时，

740
00:24:02,530 --> 00:24:04,570
0,510 540,660 660,930 930,1440 1440,2040
do you know successfully retrieve

741
00:24:04,600 --> 00:24:06,820
0,840 840,1260 1260,1410 1410,1680 1680,2220
{} {user -} two's data,|
|

742
00:24:07,000 --> 00:24:08,020
0,390 390,570 570,840 840,960 960,1020
{} {you,know} probably want to
您可能想要验证它，实际上是由用户2编写的，

743
00:24:08,020 --> 00:24:09,490
0,390 390,540 540,780 780,960 960,1470
verify it, actually was written

744
00:24:09,490 --> 00:24:11,410
0,510 510,780 780,1200 1440,1710 1710,1920
by user two,| and so
|因此可能是用户2的公钥来验证检索到的数据的完整性，

745
00:24:11,410 --> 00:24:13,360
0,300 300,750 750,1080 1080,1410 1410,1950
probably user two's public key

746
00:24:13,390 --> 00:24:15,220
0,390 390,510 510,1170 1170,1320 1320,1830
{} to verify the integrity

747
00:24:15,220 --> 00:24:16,840
0,90 90,210 210,540 540,1170 1200,1620
of the data retrieved,| because
|因为存储提供商可能不受信任，因此可能不受信任

748
00:24:16,840 --> 00:24:18,100
0,90 90,390 390,480 480,960 960,1260
the storage {providers -} might

749
00:24:18,100 --> 00:24:21,910
0,420 930,1410 1410,2070 2520,3390 3510,3810
be, {can,then,be} untrusted| and that
|这就要求我能够以可靠的方式确定实际使用Two的公钥是什么。

750
00:24:21,910 --> 00:24:23,590
0,480 480,690 690,780 780,990 990,1680
requires that I can establish

751
00:24:23,590 --> 00:24:25,930
0,1140 1140,1470 1470,1830 1830,2010 2010,2340
what actually use two's public

752
00:24:25,930 --> 00:24:27,460
0,300 300,540 540,930 930,1110 1110,1530
key is in a reliable

753
00:24:27,460 --> 00:24:27,880
0,360
manner.|
|

754
00:24:29,380 --> 00:24:32,200
0,600 1020,1560 1560,2130 2160,2640 2640,2820
And so, {} you should
因此，在这些分散的应用程序的每一步中，你都应该考虑到，

755
00:24:32,200 --> 00:24:33,790
0,150 150,570 570,690 690,930 930,1590
think about in every step

756
00:24:33,850 --> 00:24:36,700
0,630 630,1260 1260,1770 1770,2580 2700,2850
of these decentralized applications,| you
|你知道，这个名字起着至关重要的作用。

757
00:24:36,700 --> 00:24:38,050
0,180 180,270 270,930 1020,1290 1290,1350
know the name plays a

758
00:24:38,050 --> 00:24:39,080
0,360 360,810
crucial role.|
|

759
00:24:39,710 --> 00:24:41,840
0,540 780,1260 1260,1470 1470,1770 1770,2130
And, {} and the common
以及通用名称，因为您知道从名称到关键字的映射，

760
00:24:41,840 --> 00:24:43,310
0,390 390,600 600,690 690,1110 1110,1470
name given the particular for

761
00:24:43,310 --> 00:24:46,010
0,210 210,780 1110,1740 1740,2160 2160,2700
{you,know} the mapping from names

762
00:24:46,010 --> 00:24:46,820
0,90 90,450 450,630 630,720 720,810
to keys,| which is a
|其中一个至关重要的密钥就是公钥基础设施。

763
00:24:46,820 --> 00:24:49,670
0,840 840,1260 1500,1770 1770,2310 2430,2850
crucial keys is to be

764
00:24:49,670 --> 00:24:52,020
0,330 330,600 600,780 780,1410
called public key infrastructure.|
|

765
00:25:02,250 --> 00:25:03,540
0,360 360,960
And {that,is}
你知道，建设任何公钥基础设施实际上都是相当具有挑战性的，

766
00:25:03,860 --> 00:25:05,330
0,180 180,270 270,600 600,1020 1020,1470
you know building actually {}

767
00:25:05,330 --> 00:25:07,280
0,420 420,750 750,1350 1350,1710 1710,1950
any {public,key} infrastructure is quite

768
00:25:07,280 --> 00:25:09,260
0,630 810,1470 1470,1530 1530,1830 1830,1980
challenging,| {} you know you
|你知道你可能对DNSSEC很熟悉，

769
00:25:09,260 --> 00:25:10,580
0,180 180,300 300,750 750,960 960,1320
might be familiar like {DNSSec

770
00:25:10,580 --> 00:25:12,320
0,480 510,930 930,1350 1350,1380 1380,1740
-},| there's are a particular
|当然，在万维网上有一种特殊的方式，

771
00:25:12,320 --> 00:25:13,190
0,300 300,420 420,720 720,780 780,870
way of course on the

772
00:25:13,190 --> 00:25:14,660
0,180 180,330 330,570 570,1020 1020,1470
world wide web has, {}|
|

773
00:25:14,870 --> 00:25:16,580
0,720 720,1020 1020,1170 1170,1380 1380,1710
certificate has a whole public
证书具有完整的公钥基础设施，

774
00:25:16,580 --> 00:25:18,770
0,210 210,1050 1170,1530 1530,1860 1860,2190
key infrastructure,| {} {Kerberos -}
|Kerberos您知道公钥基础设施的一个示例

775
00:25:18,770 --> 00:25:19,910
0,150 150,390 390,570 570,1020 1020,1140
you know an example of

776
00:25:19,910 --> 00:25:23,600
0,1470 1500,1950 1950,2490 2850,3270 3270,3690
{} {public,key} infrastructure| and in
|在某些方面，你知道这份文件，

777
00:25:23,600 --> 00:25:24,470
0,150 150,330 330,450 450,690 690,870
some ways with you know

778
00:25:24,470 --> 00:25:26,000
0,300 300,750 750,1230 1260,1410 1410,1530
this papers,| {[] -} is
|[]是您将获得另一个公共基础设施，

779
00:25:26,000 --> 00:25:27,590
0,150 150,360 360,600 600,1140 1170,1590
you will get another public

780
00:25:27,590 --> 00:25:30,500
0,810 840,1230 1230,1410 1440,2010 2010,2910
infrastructure,| that is completely decentralized.|
|这是完全分散的。|

781
00:25:36,490 --> 00:25:39,460
0,570 570,1080 1080,1380 1380,1860 2370,2970
And that's sort of a
这是一个关键的方面，你知道In块堆栈中的这种命名方案有多有趣，

782
00:25:39,850 --> 00:25:43,630
0,780 810,2010 2010,3270 3270,3600 3600,3780
key {aspect,you,know,what -} interesting about

783
00:25:43,630 --> 00:25:45,490
0,120 120,450 450,1020 1020,1560 1560,1860
this naming scheme in a

784
00:25:45,730 --> 00:25:47,290
0,390 390,600 600,870 870,1290 1320,1560
in {} {blockstack -},| that's
|这实际上提供了去中心化的公钥基础设施。

785
00:25:47,290 --> 00:25:48,820
0,270 270,660 660,870 900,1350 1350,1530
actually provides {} {decentralized -}

786
00:25:48,820 --> 00:25:50,000
0,300 300,960
{public,key} infrastructure.|
|

787
00:25:51,060 --> 00:25:52,230
0,360 360,480 480,660 660,840 840,1170
Let me try to explain
让我试着解释一下为什么这是具有挑战性的，

788
00:25:52,230 --> 00:25:53,550
0,60 60,240 240,390 390,960 960,1320
a little bit why this

789
00:25:53,550 --> 00:25:54,640
0,120 120,750
is challenging,|
|

790
00:25:55,690 --> 00:25:57,220
0,510 510,990
{} so,
因此，论文在几个地方提到了这一点

791
00:25:59,510 --> 00:26:00,620
0,90 90,360 360,720 720,900 900,1110
the paper refers to this

792
00:26:00,620 --> 00:26:02,240
0,90 90,180 180,450 450,1140 1380,1620
in a couple places| and
|他说，就像你知道的，你有三个方面想要，

793
00:26:02,240 --> 00:26:03,290
0,210 210,360 360,600 600,840 840,1050
says {like,you,know} there's, {} there's

794
00:26:03,290 --> 00:26:04,700
0,210 210,690 690,840 840,960 960,1410
three aspects that you want,|
|

795
00:26:04,760 --> 00:26:06,590
0,360 360,630 630,1290 1320,1710 1710,1830
{} if you want a
如果您希望命名基础设施有一个通用的用途，

796
00:26:06,590 --> 00:26:07,760
0,240 240,570 570,780 780,1050 1050,1170
general purpose for naming {infrastructure

797
00:26:07,760 --> 00:26:09,140
0,540 810,1110 1110,1230 1230,1290 1290,1380
-},| you want to be
|你想要有唯一的名字，

798
00:26:09,140 --> 00:26:10,610
0,240 240,330 330,540 540,840 840,1470
able to have unique names,|
|

799
00:26:11,470 --> 00:26:13,930
0,330 1380,1740 1740,1980 1980,2280 2280,2460
{you,know} have a unique name
你知道，每个用户都有一个唯一的名字，

800
00:26:13,930 --> 00:26:15,120
0,120 120,330 330,870
for every user,|
|

801
00:26:17,700 --> 00:26:18,960
0,210 210,360 360,480 480,600 600,1260
so that you can identify
这样你就可以识别你认识的那个[约翰]或那个特定的乔，

802
00:26:18,960 --> 00:26:20,850
0,120 120,480 660,1110 1110,1590 1590,1890
you know the particular [John]

803
00:26:20,850 --> 00:26:22,320
0,360 360,750 750,1020 1020,1140 1140,1470
or particular Joe,| you're talking
|你说的是人类或人类可读的名字，

804
00:26:22,320 --> 00:26:24,160
0,420 900,1530
about about

805
00:26:24,960 --> 00:26:27,330
0,690 720,1320 1350,1800 1800,1950 1950,2370
{ -} human or {}

806
00:26:27,750 --> 00:26:29,860
0,540 690,1170 1170,1770
human readable names,|
|

807
00:26:32,970 --> 00:26:34,350
0,150 150,390 390,630 630,750 750,1380
so it's easy to remember.|
所以很容易记住。|

808
00:26:34,620 --> 00:26:37,170
0,870 1110,1770 1770,1860 1860,2010 2010,2550
And then in this case,
在这种情况下，块堆栈也想要去中心化。

809
00:26:37,470 --> 00:26:39,570
0,750 750,1290 1290,1560 1560,1830 1830,2100
{what -} {blockstack -} also

810
00:26:39,570 --> 00:26:43,040
0,420 720,1470 1470,2490
wants is decentralized.|
|

811
00:26:46,840 --> 00:26:47,830
0,390 390,480 480,630 630,720 720,990
And you know the paper
你知道，这篇论文的观点是，

812
00:26:47,830 --> 00:26:49,630
0,480 480,540 540,870 870,1200 1200,1800
{sort,of,makes} the point that, {}|
|

813
00:26:49,630 --> 00:26:51,760
0,240 270,1050 1050,1470 1500,1590 1590,2130
it's easy to can get
很容易就能得到三个中的两个，

814
00:26:51,760 --> 00:26:52,540
0,120 120,240 240,330 330,630 630,780
two of the three,| it's
|很难把三个都拿到手

815
00:26:52,540 --> 00:26:54,040
0,210 210,540 540,600 600,780 780,1500
very difficult to get to

816
00:26:54,130 --> 00:26:55,360
0,360 360,540 540,600 600,990 990,1230
all three of them| and
|你知道，也许，

817
00:26:55,360 --> 00:26:56,740
0,90 90,240 240,750 780,1230 1230,1380
you know maybe,| let's look
|让我们来看看几个命名系统，

818
00:26:56,740 --> 00:26:57,760
0,90 90,120 120,330 330,600 600,1020
at a couple naming systems,|
|

819
00:26:57,760 --> 00:26:59,440
0,90 90,570 570,810 810,1350 1530,1680
to see which two they
看看他们到底得到了哪两个，

820
00:26:59,440 --> 00:27:00,910
0,240 240,630 870,1140 1140,1290 1290,1470
do get,| so let's think
|让我们来考虑一下电子邮件地址。

821
00:27:00,910 --> 00:27:02,540
0,300 300,510 510,810 810,1290
about like email addresses.|
|

822
00:27:03,480 --> 00:27:04,540
0,210 210,420 420,690

823
00:27:13,120 --> 00:27:14,410
0,210 210,510 510,900 900,1020 1020,1290
Okay, email addresses, are they
好的，电子邮件地址，它们是唯一的名字吗？

824
00:27:14,410 --> 00:27:15,240
0,570
{}

825
00:27:16,430 --> 00:27:17,680
0,150 150,240 240,360 360,810
{unique - -} names?|
|

826
00:27:22,140 --> 00:27:23,970
0,630 990,1230 1230,1380 1380,1470 1470,1830
Yes.| Are they {} human
是。|它们是人类可读的吗？

827
00:27:23,970 --> 00:27:24,840
0,570
readable?|
|

828
00:27:25,350 --> 00:27:28,770
0,330 330,840 1260,1470 1470,2370 2790,3420
Yeah.| {Are,they} {} decentralized?| No.|
嗯。|它们是分散的吗？|不是的。|

829
00:27:28,980 --> 00:27:30,480
0,390 420,570 570,1050 1050,1320 1320,1500
No, so users get two
不，所以用户会得到两个这样的人，对吗，

830
00:27:30,480 --> 00:27:31,590
0,90 90,360 360,660 660,990 990,1110
of these guys, correct,| but
|但不是第三个。

831
00:27:31,590 --> 00:27:32,740
0,210 210,300 300,540 540,810
not the third one.|
|

832
00:27:33,260 --> 00:27:35,840
0,720 750,1380 1440,1860 1890,2280 2280,2580
How about {} random public
随机公钥怎么样，

833
00:27:35,840 --> 00:27:37,520
0,510 720,960 960,1410 1410,1590 1590,1680
keys,| or maybe like if
|或者可能就像报纸使用文件内容的散列来实际获得[工作]的名称一样，

834
00:27:37,520 --> 00:27:39,320
0,90 90,990 1020,1290 1290,1590 1590,1800
the paper uses hash of

835
00:27:39,320 --> 00:27:40,730
0,90 90,390 390,960 960,1140 1140,1410
the file contents to actually

836
00:27:40,730 --> 00:27:41,870
0,150 150,180 180,570 570,900 900,1140
get a name, correct, for

837
00:27:41,870 --> 00:27:44,210
0,390 930,1320 1320,1470 1470,2010 2010,2340
the [working],| so basically okay
|所以基本上可以，所以随机的公钥，

838
00:27:44,330 --> 00:27:47,660
0,270 270,930 1500,1860 1860,2310
so random public keys,|
|

839
00:27:48,060 --> 00:27:49,560
0,210 210,630 630,930 930,1260 1260,1500
which means public keys get
这意味着公钥是随机的，

840
00:27:49,560 --> 00:27:50,520
0,570
random,|
|

841
00:27:55,180 --> 00:27:57,160
0,300 300,990 990,1320 1320,1440 1440,1980
so {public,keys}, are they unique?|
那么公钥，它们是唯一的吗？|

842
00:27:59,290 --> 00:28:01,900
0,660 720,1470 1500,1890 1890,2490 2490,2610
Yep.| Yeah.| Yep, {} are
是啊。|嗯。|是的，它们是人类可读的吗？

843
00:28:01,900 --> 00:28:04,540
0,210 210,510 510,1080 1380,2010 2040,2640
they human readable?| No.| No,
|不是的。|不，他们是分散的吗？

844
00:28:04,540 --> 00:28:07,510
0,90 90,1080 1440,2070 2100,2640 2640,2970
{are,they} decentralized?| Yes.| Yeah yeah,
|是。|是的，是的，你可以以一种独特的、完全分散的方式产生它们的高概率。

845
00:28:07,540 --> 00:28:09,370
0,210 210,480 510,960 960,1530 1530,1830
you can generate them high

846
00:28:09,370 --> 00:28:10,930
0,810 810,900 900,960 960,1290 1290,1560
probability in a unique manner

847
00:28:10,930 --> 00:28:12,500
0,360 360,1110
completely decentralized.|
|

848
00:28:13,860 --> 00:28:15,120
0,480 510,570 570,840 840,1140 1140,1260
So in fact, you should
所以事实上，你应该在实验3中用这些职员ID做更多的实验，

849
00:28:15,120 --> 00:28:16,500
0,240 300,660 660,810 810,1170 1170,1380
have done that more in

850
00:28:16,500 --> 00:28:17,730
0,300 300,510 510,690 690,900 900,1230
lab 3 with these clerk

851
00:28:17,730 --> 00:28:19,650
0,660 690,1110 1260,1650 1650,1740 1740,1920
ids,| so here we got
|所以我们要在这里，拿到三个中的两个，

852
00:28:19,650 --> 00:28:20,970
0,300 630,990 990,1140 1140,1230 1230,1320
to, get two of the

853
00:28:20,970 --> 00:28:22,110
0,420 450,600 600,780 780,900 900,1140
three,| but not the human
|但不是人类可读的那个。

854
00:28:22,110 --> 00:28:24,000
0,300 300,600 900,1500 1500,1710 1710,1890
readable one.| Let's see, can
|让我们来看看，我们真的能让人类变得可读和分散吗？

855
00:28:24,000 --> 00:28:25,320
0,150 150,360 360,510 510,840 840,1320
we actually get human readable

856
00:28:25,320 --> 00:28:26,680
0,240 240,1050
and decentralized?|
|

857
00:28:27,920 --> 00:28:28,520
0,180 180,240 240,450 450,510 510,600
Can you think of an
你能想出一个例子吗？

858
00:28:28,520 --> 00:28:29,500
0,660
example?|
|

859
00:28:34,800 --> 00:28:36,600
0,150 150,270 270,510 510,1230 1530,1800
Is it like a peer
这是不是像点对点文件共享？

860
00:28:36,600 --> 00:28:38,060
0,60 60,330 330,600 600,1140
to peer file sharing?|
|

861
00:28:39,360 --> 00:28:41,790
0,1530 1530,1590 1590,1860 1860,2310 2310,2430
Yeah.| It was unique, the
嗯。|这些文件是独一无二的，但它们是人类可读的，而且是分散的。

862
00:28:41,790 --> 00:28:43,500
0,720 750,870 870,990 990,1230 1230,1710
files, but they're human readable

863
00:28:43,500 --> 00:28:46,020
0,180 180,1170 1380,1650 1650,1890 1890,2520
and decentralized.| Yeah, think simpler,
|是的，想得简单一点，你知道，想想你的手机，

864
00:28:46,170 --> 00:28:48,270
0,1110 1140,1590 1620,1830 1830,2010 2010,2100
you know, think about your

865
00:28:48,270 --> 00:28:48,980
0,480
phone,|
|

866
00:28:54,170 --> 00:28:55,400
0,270 270,660 660,750 750,930 930,1230
the exam for me always
对我来说，考试总是很好的，

867
00:28:55,400 --> 00:28:56,060
0,120 120,210 210,360 360,540 540,660
is a good one,| it
|看起来像是你的联系人名单，

868
00:28:56,060 --> 00:28:57,260
0,210 210,330 330,420 420,810 810,1200
looks like your contact list,|
|

869
00:29:02,370 --> 00:29:03,480
0,480 480,690 690,960 960,1020 1020,1110
{} the names of your
你知道，你的联系人的名字是人类可读的，

870
00:29:03,480 --> 00:29:06,030
0,420 420,780 780,1380 1530,1950 1950,2550
contact human readable {you,know} implies,|
|

871
00:29:06,030 --> 00:29:07,440
0,90 90,570 600,810 810,930 930,1410
you know you could have
你知道你可以拥有约翰，

872
00:29:07,890 --> 00:29:10,500
0,570 570,1080 1110,1290 1290,1560 2400,2610
{} John,| you know the
|你知道John One电话号码的条目吗？

873
00:29:10,500 --> 00:29:11,460
0,240 240,360 360,540 540,750 750,960
entry for John one phone

874
00:29:11,460 --> 00:29:12,450
0,300 300,390 390,510 510,630 630,990
number| and I can have
|我可以有另一个电话号码或者我的约翰条目，

875
00:29:12,450 --> 00:29:14,280
0,960 960,1230 1230,1380 1380,1710 1710,1830
{} another phone number or

876
00:29:14,280 --> 00:29:15,870
0,180 180,480 480,960 1260,1470 1470,1590
my John entry,| {} they're
|他们可能是不同的人，

877
00:29:15,870 --> 00:29:17,910
0,270 270,510 510,1050 1230,1950 1950,2040
probably different people,| but you
|但你知道我可以以分散的方式挑选名字，

878
00:29:17,910 --> 00:29:19,380
0,960 960,1050 1050,1200 1200,1380 1380,1470
know I can pick the

879
00:29:19,380 --> 00:29:21,060
0,510 510,600 600,690 690,1290 1290,1680
names in {} decentralized manner,|
|

880
00:29:21,640 --> 00:29:23,350
0,420 420,540 540,840 840,1560 1560,1710
and they're certainly readable,| {are,they}
而且它们当然是可读的，|它们是独一无二的吗？

881
00:29:23,350 --> 00:29:24,220
0,570
unique?|
|

882
00:29:27,340 --> 00:29:29,500
0,480 510,930 1260,1560 1560,1710 1710,2160
No, correct,| this is like
不，正确，|这就像你有了你的名单，

883
00:29:29,800 --> 00:29:31,120
0,480 480,660 660,870 870,1200 1200,1320
you have your list of

884
00:29:31,120 --> 00:29:32,080
0,360 360,480 480,600 600,750 750,960
names,| I have my list
|我有我的名单

885
00:29:32,080 --> 00:29:32,950
0,90 90,420 420,570 570,690 690,870
of names| and they may
|它们实际上可能会重叠

886
00:29:32,950 --> 00:29:34,480
0,300 300,840 840,1020 1050,1320 1320,1530
actually overlap| and still talk
|还在谈论不同的人。

887
00:29:34,480 --> 00:29:35,480
0,150 150,390 390,750
about different people.|
|

888
00:29:36,600 --> 00:29:37,620
0,120 120,420 420,570 570,660 660,1020
So here's sort of what
所以这是报纸试图得到的东西，实际上是三个中的两个，

889
00:29:37,620 --> 00:29:38,760
0,60 60,330 330,510 510,570 570,1140
the papers trying to get

890
00:29:38,760 --> 00:29:40,440
0,540 810,1110 1110,1350 1350,1530 1530,1680
at actually getting two out

891
00:29:40,440 --> 00:29:42,030
0,90 90,570 780,1170 1170,1500 1500,1590
of three,| {} you know
|你知道，这很常见，或者实际上很容易，

892
00:29:42,030 --> 00:29:44,250
0,240 240,600 600,1170 1380,1980 1980,2220
it's quite common or actually

893
00:29:44,250 --> 00:29:46,110
0,510 570,930 930,1140 1140,1380 1380,1860
easy,| {} but after getting
|但在三个都拿到之后，很难做到。

894
00:29:46,110 --> 00:29:47,040
0,420 420,600 600,660 660,870 870,930
all three of them is

895
00:29:47,040 --> 00:29:47,700
0,390
hard.|
|

896
00:29:49,010 --> 00:29:53,390
0,1320 2490,2790 3900,4050 4050,4290 4290,4380
And in the paper, so
在报纸上，所以它就像，

897
00:29:53,390 --> 00:29:55,220
0,90 90,420 420,780 810,1200 1200,1830
it's like,| well, we actually,
|实际上，我们实现了这三个目标，

898
00:29:55,370 --> 00:29:56,240
0,180 180,510 510,660 660,810 810,870
we achieve all three of

899
00:29:56,240 --> 00:29:57,530
0,180 510,870 870,960 960,1140 1140,1290
them,| then we get the
|然后我们得到唯一的名称，用户可读的和分散的。

900
00:29:57,530 --> 00:29:59,240
0,270 270,630 630,930 930,1410 1410,1710
unique names, user readable and

901
00:29:59,240 --> 00:30:00,560
0,780
decentralized.|
|

902
00:30:01,670 --> 00:30:02,810
0,300 300,570 570,750 750,870 870,1140
{} And in the way,
而且在某种程度上，他们得到的基本上是利用区块链。

903
00:30:02,810 --> 00:30:03,770
0,90 90,240 240,480 480,720 720,960
in some ways they they

904
00:30:03,770 --> 00:30:07,040
0,210 210,660 690,1200 1260,2220 2220,3270
get this is basically exploited

905
00:30:07,070 --> 00:30:09,680
0,1140 1440,2280
{} blockchain.|
|

906
00:30:10,330 --> 00:30:12,020
0,1080

907
00:30:12,880 --> 00:30:13,900
0,750

908
00:30:15,100 --> 00:30:17,180
0,240 240,570 570,750 750,1410
So {blockstack -} approach,|
所以块堆栈方法，|

909
00:30:27,450 --> 00:30:29,730
0,720 720,1020 1020,1320 1320,1560 1560,2280
{} and really [] they
而且确实[]他们是公平的，

910
00:30:29,760 --> 00:30:31,290
0,210 210,690 720,1140 1170,1320 1320,1530
be fair,| { -} it's
|这真的不是块，块块堆栈方法，真正的命名代码方法，

911
00:30:31,290 --> 00:30:33,090
0,210 210,420 420,750 750,1590 1590,1800
really not block, block {blockstack

912
00:30:33,090 --> 00:30:34,680
0,210 210,570 570,750 750,1020 1020,1590
-} approaches, really {namecoins -}

913
00:30:36,570 --> 00:30:39,180
0,780 780,960 960,1380 1380,2280
approach,| {that,they} {sort,of} adopted.|
|在某种程度上是他们收养的。|

914
00:30:39,730 --> 00:30:41,230
0,540 660,1020 1020,1230 1230,1320 1320,1500
The basic idea is very
基本的想法很简单，

915
00:30:41,230 --> 00:30:43,300
0,570 600,1530 1560,1860 1860,1980 1980,2070
simple,| {} we're going to
|我们将利用比特币区块堆栈的存在，以及比特币区块链

916
00:30:43,300 --> 00:30:44,920
0,150 150,510 510,690 690,1170 1170,1620
take advantage of the existence

917
00:30:44,920 --> 00:30:46,330
0,150 150,300 300,690 690,960 960,1410
of the Bitcoin {blockstack -},

918
00:30:46,480 --> 00:30:49,600
0,210 210,480 690,1440 1800,2970 2970,3120
with {} Bitcoin blockchain| and
|当然，你也可以使用任何其他的区块链，

919
00:30:49,600 --> 00:30:50,230
0,90 90,270 270,360 360,480 480,630
of course you can use

920
00:30:50,230 --> 00:30:52,030
0,180 180,720 720,1260 1260,1440 1440,1800
any other blockchain,| but like
|但就像只是为了具体，

921
00:30:52,030 --> 00:30:53,590
0,150 150,270 270,570 570,960 1230,1560
just for {concreteness -},| we're
|我们要考虑一下比特币的问题。

922
00:30:53,590 --> 00:30:54,910
0,120 120,330 330,510 510,750 750,1320
going to think about the

923
00:30:54,940 --> 00:30:56,920
0,330 330,660 1140,1350 1350,1620 1620,1980
Bitcoin one.| And so here
|所以我们有了我们的链条，

924
00:30:56,920 --> 00:30:58,380
0,90 90,300 300,570 570,1200
we got our chain,|
|

925
00:30:59,710 --> 00:31:02,770
0,270 270,450 450,1320 2070,2340 2340,3060
you know {transactions,that} in Bitcoin,|
你知道在比特币中的交易，|

926
00:31:03,890 --> 00:31:05,990
0,780 810,1380 1380,1500 1500,1680 1710,2100
and {} you know grows
你知道，随着时间的推移，

927
00:31:05,990 --> 00:31:07,820
0,180 180,810 870,1170 1170,1290 1290,1830
over time,| you know miners
|你知道矿工增加了新的交易

928
00:31:07,820 --> 00:31:09,680
0,180 180,300 300,1110 1440,1770 1770,1860
add new transactions| and the
|我们基本上要创建命名系统，

929
00:31:09,680 --> 00:31:11,540
0,330 330,570 570,1140 1140,1500 1500,1860
way we're gonna {} basically

930
00:31:11,540 --> 00:31:12,800
0,270 270,300 300,600 600,990 990,1260
create {} naming system,| is
|我们将只发布不同类型的交易，

931
00:31:12,800 --> 00:31:14,690
0,120 120,240 240,330 330,720 900,1890
we're going to just post

932
00:31:14,720 --> 00:31:16,730
0,870 870,1110 1110,1410 1410,1680 1680,2010
transactions that sort of different

933
00:31:16,730 --> 00:31:18,470
0,420 420,870 870,1200 1200,1650 1650,1740
type,| they basically claim a
|他们基本上都是自称一个名字。

934
00:31:18,470 --> 00:31:19,020
0,360
name.|
|

935
00:31:19,350 --> 00:31:20,580
0,510 510,630 630,690 690,1140 1140,1230
And so, for example you
因此，例如，你知道我们实际上可能有特殊的交易，

936
00:31:20,580 --> 00:31:21,930
0,150 150,270 270,480 480,870 870,1350
know we might actually have

937
00:31:22,470 --> 00:31:24,480
0,900 900,1770
special transactions,|
|

938
00:31:24,760 --> 00:31:27,040
0,720 750,1200 1200,1530 1530,2040 2040,2280
{} because every transaction actually
因为比特币中的每一笔交易都有一个元数据字段，

939
00:31:27,040 --> 00:31:28,240
0,210 210,480 480,750 780,1050 1050,1200
turns out in {} {Bitcoin

940
00:31:28,240 --> 00:31:29,740
0,300 300,600 600,720 720,1200 1200,1500
-} has a metadata field,|
|

941
00:31:29,740 --> 00:31:30,730
0,120 120,270 270,390 390,690 690,990
that you can basically stick
您基本上可以将任何内容粘贴到元数据字段中

942
00:31:30,730 --> 00:31:31,930
0,360 360,450 450,510 510,990 990,1200
anything in the metadata fields

943
00:31:31,930 --> 00:31:33,520
0,60 60,450 750,1320 1320,1440 1440,1590
you want| and so what
|所以我们要坚持的是一个名字记录。

944
00:31:33,520 --> 00:31:34,180
0,60 60,180 180,240 240,480 480,660
we're going to stick in

945
00:31:34,180 --> 00:31:36,130
0,420 420,1050 1050,1380 1380,1590 1590,1950
there is a name record.|
|

946
00:31:36,650 --> 00:31:37,280
0,210 210,300 300,420 420,540 540,630
So we're gonna have some
所以我们要做一些交易

947
00:31:37,280 --> 00:31:38,600
0,630 630,750 750,930 930,1200 1200,1320
transaction| and then we're going
|然后我们将在那里录下名字记录，

948
00:31:38,600 --> 00:31:39,380
0,90 90,210 210,270 270,510 510,780
to take a name record

949
00:31:39,380 --> 00:31:41,040
0,120 120,390
in there,|
|

950
00:31:41,510 --> 00:31:42,590
0,270 270,420 420,480 480,900 900,1080
you'll see a little in
你会在第二个中看到一点，

951
00:31:42,590 --> 00:31:43,550
0,120 120,360 360,480 480,900 900,960
the second,| but exactly the
|但这张主唱片的具体细节是，

952
00:31:43,550 --> 00:31:44,660
0,390 390,450 450,630 630,840 840,1110
details of this main record

953
00:31:44,660 --> 00:31:46,160
0,300 570,1020 1020,1140 1140,1230 1230,1500
is,| but in the case
|但在块堆栈的情况下，

954
00:31:46,160 --> 00:31:47,090
0,90 90,630 630,690 690,810 810,930
of blockstack,| you know it's
|你知道它基本上是一个像6.824这样的名字，

955
00:31:47,090 --> 00:31:50,000
0,570 570,1020 1020,1590 1620,2070 2580,2910
basically a name like {6.824

956
00:31:50,000 --> 00:31:51,080
0,150 150,210 210,780
- - -},|
|

957
00:31:51,900 --> 00:31:53,550
0,240 240,870 870,1200 1200,1380 1380,1650
and then maybe {as,we} see
然后，也许正如我们稍后看到的，区域文件的散列。

958
00:31:53,550 --> 00:31:54,660
0,210 210,570 570,690 690,990 990,1110
{} later, a hash of

959
00:31:54,660 --> 00:31:55,680
0,60 60,330 330,720
the zone file.|
|

960
00:31:56,190 --> 00:31:58,230
0,600 990,1590 1620,1800 1800,1950 1950,2040
{} And you know the
你知道，在这个方案中的基本规则是，

961
00:31:58,230 --> 00:31:59,400
0,330 330,660 660,870 870,1050 1050,1170
basic rule in the in

962
00:31:59,400 --> 00:32:00,240
0,120 120,600 600,660 660,780 780,840
this scheme is going to

963
00:32:00,240 --> 00:32:03,900
0,180 180,630 1020,1860 2010,2760 2970,3660
be that,| {} the first
|第一个，第一个用户，名字记录基本上赢了，对。

964
00:32:03,900 --> 00:32:04,880
0,630
one,

965
00:32:05,120 --> 00:32:07,880
0,120 120,540 540,1320 2190,2520 2520,2760
the first user, first name

966
00:32:07,880 --> 00:32:09,360
0,330 330,660 660,1230
record basically wins,

967
00:32:14,310 --> 00:32:15,240
0,240 240,330 330,600 600,780 780,930
right.| So there might be
|所以可能会有第二个你知道的其他人以6.824这个名字创造的，

968
00:32:15,240 --> 00:32:16,290
0,90 90,420 420,690 690,780 780,1050
a second {you,know} {} somebody

969
00:32:16,290 --> 00:32:17,400
0,240 240,600 600,810 810,900 900,1110
else creates in the name

970
00:32:17,400 --> 00:32:20,670
0,720 720,1260 1410,2190 2190,2880 2880,3270
6.824 later,| {} but because
|但因为你知道6.824在比特币区块链中出现的时间较晚，

971
00:32:20,670 --> 00:32:21,570
0,90 90,210 210,420 420,690 690,900
you know the {6.824 -

972
00:32:21,570 --> 00:32:23,520
0,240 240,420 420,510 510,1050 1350,1950
- - - -} {}

973
00:32:24,290 --> 00:32:25,850
0,540 600,1020 1020,1110 1110,1380 1380,1560
{shows,up} later in log in

974
00:32:25,850 --> 00:32:29,330
0,450 660,1530 1800,2280 2280,3090 3150,3480
the Bitcoin {} blockchain,| we're
|我们基本上会忽略这一点，

975
00:32:29,330 --> 00:32:31,010
0,240 240,720 720,1080 1080,1260 1260,1680
gonna basically ignore that one,|
|

976
00:32:31,520 --> 00:32:33,350
0,510 510,780 780,1440 1470,1590 1590,1830
and you only you know
只有你知道，你认为6.824的有效姓名记录，

977
00:32:34,120 --> 00:32:36,730
0,930 960,1290 1290,1590 1590,2220 2220,2610
{} consider that valid name

978
00:32:36,730 --> 00:32:38,200
0,390 390,720 720,930 930,1140 1140,1470
record for {6.824 - -},|
|

979
00:32:39,220 --> 00:32:40,390
0,180 180,300 300,930 930,1020 1020,1170
and this completely you know
而这完全是基于这样一个事实，

980
00:32:40,390 --> 00:32:41,920
0,300 300,690 690,1140 1140,1230 1230,1530
plays off on the fact,|
|

981
00:32:41,920 --> 00:32:45,460
0,120 120,390 390,1140 1470,2370 2580,3540
that there's basically a blockchain
区块链基本上记录了所有发生过的操作，

982
00:32:45,460 --> 00:32:47,290
0,540 540,690 690,1440 1440,1560 1560,1830
is a log of all

983
00:32:47,290 --> 00:32:49,330
0,150 150,780 780,960 960,1410 1770,2040
the operations ever happened, {}|
|

984
00:32:49,330 --> 00:32:51,310
0,300 300,420 420,930 930,1260 1260,1980
they're in order, they're consensus
它们是有序的，它们是以什么顺序发生的共识

985
00:32:51,310 --> 00:32:52,660
0,210 210,450 450,660 660,810 810,1350
in what order they happened|
|

986
00:32:53,050 --> 00:32:54,850
0,660 660,930 930,1050 1050,1620 1620,1800
and so from that, we've
因此，我们基本上已经被构建了，如果你愿意的话，就像一个数据库，

987
00:32:54,850 --> 00:32:57,340
0,120 120,720 720,1140 1140,1800 2370,2490
been basically {} construct, if

988
00:32:57,340 --> 00:32:58,450
0,120 120,390 390,540 540,600 600,1110
you will, like a database,|
|

989
00:32:58,480 --> 00:32:59,620
0,390 390,780 780,900 900,1050 1050,1140
a database with all the
一个按顺序列出所有名字的数据库，

990
00:32:59,620 --> 00:33:00,520
0,270 270,330 330,390 390,750 780,900
names in the order,| you
|你知道，只要从一开始就通过区块链，

991
00:33:00,520 --> 00:33:01,360
0,90 90,300 300,480 480,750 750,840
know just go through the

992
00:33:01,360 --> 00:33:02,830
0,450 450,570 570,840 840,930 930,1470
blockchain from beginning of time,|
|

993
00:33:03,070 --> 00:33:06,370
0,630 630,960 990,1470 1560,2730 2760,3300
find the valid {} transactions,
查找有效交易记录，命名交易记录

994
00:33:06,370 --> 00:33:08,110
0,210 210,870 1170,1380 1380,1560 1560,1740
name transactions| and use that
|并使用它来构建具有所有、所有有效名称的数据库。

995
00:33:08,110 --> 00:33:08,840
0,90 90,660
to construct

996
00:33:09,070 --> 00:33:11,500
0,840 840,1350 1350,1470 1470,1650 1650,2430
{} database with all the,

997
00:33:11,650 --> 00:33:13,690
0,630 660,1080 1080,1170 1170,1560 1560,2040
{} with all {the,valid} names.|
|

998
00:33:14,220 --> 00:33:16,110
0,360 360,510 510,990 1020,1740 1740,1890
In some ways, a number
在某些方面，一些人似乎指出了这一点，

999
00:33:16,110 --> 00:33:17,070
0,210 210,270 270,540 540,720 720,960
number of people sort of

1000
00:33:17,100 --> 00:33:18,510
0,420 420,540 540,840 840,1140 1200,1410
pointed this out,| like isn't
|这不正是我们一直在做的实验3吗，

1001
00:33:18,510 --> 00:33:19,590
0,120 120,630 630,780 780,930 930,1080
this exactly what we've been

1002
00:33:19,590 --> 00:33:21,570
0,510 510,720 720,1320 1350,1620 1620,1980
doing lab 3,| {} where
|你知道我们有木筏一样的原木，提供给原木，

1003
00:33:21,570 --> 00:33:22,740
0,90 90,210 210,330 330,480 480,1170
you know we have log

1004
00:33:22,740 --> 00:33:24,690
0,480 660,930 930,1020 1020,1470 1740,1950
{like,raft}, provides to log, {}|
|

1005
00:33:24,690 --> 00:33:25,710
0,210 210,450 450,570 570,630 630,1020
we stick up {operations -}
我们把行动记录在日志里，

1006
00:33:25,710 --> 00:33:26,490
0,120 120,180 180,540 540,630 630,780
in the log,| you know
|你知道我们在经营你知道我们的行动

1007
00:33:26,490 --> 00:33:28,950
0,900 1200,1890 1920,2100 2100,2250 2250,2460
we run you know the

1008
00:33:28,950 --> 00:33:32,130
0,900 1170,1860 1860,2340 2340,2610 2610,3180
operations| and {} that constructs
|这构建了你所知道的国家，

1009
00:33:32,130 --> 00:33:33,510
0,90 90,210 210,330 330,810 840,1380
you know the state,| where
|其中，本例中的状态将是命名数据库

1010
00:33:33,510 --> 00:33:34,260
0,60 60,300 300,360 360,510 510,750
the state in this case

1011
00:33:34,260 --> 00:33:35,670
0,150 150,390 390,510 510,810 810,1410
would be a naming database|
|

1012
00:33:35,850 --> 00:33:37,110
0,270 270,840 840,960 960,1080 1080,1260
and there's you know, I
你知道，我认为这就是那种风格，

1013
00:33:37,110 --> 00:33:38,250
0,150 150,270 270,870 870,990 990,1140
think it's exactly that kind

1014
00:33:38,250 --> 00:33:39,750
0,60 60,660 840,1260 1260,1440 1440,1500
of style,| {} in the
|在相同的想法中，除了这里的微小区别，

1015
00:33:39,750 --> 00:33:41,430
0,330 330,720 720,1260 1260,1320 1320,1680
same idea except the small

1016
00:33:41,430 --> 00:33:43,620
0,450 450,1410 1410,1620 1620,1800 1800,2190
differences here,| not using graph
|不是用图形来获得共识，

1017
00:33:43,620 --> 00:33:45,060
0,90 90,300 300,390 390,930 930,1440
to get the consensus,| {we're,again}
|我们再次使用比特币或中本聪，或者达成中本聪共识，真正实现一个区块链。

1018
00:33:45,060 --> 00:33:47,550
0,390 600,930 930,1650 1680,2310 2310,2490
using {} Bitcoin {} or

1019
00:33:47,550 --> 00:33:49,080
0,930 930,960 960,1050 1050,1260 1260,1530
Nakamoto or to get to

1020
00:33:49,110 --> 00:33:51,090
0,630 630,1050 1050,1140 1140,1410 1410,1980
Nakamoto consensus to actually achieve

1021
00:33:51,480 --> 00:33:53,880
0,540 540,1020 1020,1500 1500,1770 1770,2400
{} one single {} blockchain.|
|

1022
00:33:54,560 --> 00:33:55,910
0,510 540,720 720,810 810,1260 1260,1350
{} But in spirit, you
但在精神上，你知道，是的，你知道这非常相似。

1023
00:33:55,910 --> 00:33:58,040
0,120 120,600 600,690 690,810 810,2130
know, yes you know it's

1024
00:33:58,040 --> 00:33:59,060
0,240 240,720
very similar.|
|

1025
00:34:01,660 --> 00:34:03,910
0,540 600,1200 1530,1710 1710,2070 2070,2250
Okay, {} so let's think
好的，让我们想一想，

1026
00:34:03,910 --> 00:34:04,900
0,30 30,240 240,390 390,660 660,990
a little bit about it,|
|

1027
00:34:04,900 --> 00:34:06,880
0,930 930,1140 1140,1470 1470,1890 1890,1980
{} in our free {}
在我们的免费物业中，

1028
00:34:06,880 --> 00:34:08,140
0,630 630,750 750,960 960,1200 1200,1260
properties,| you know first of
|你知道，首先，你知道，我们确实有独特的名字。

1029
00:34:08,140 --> 00:34:10,570
0,480 630,1470 1590,1800 1800,2160 2190,2430
all, {} you know, do

1030
00:34:10,570 --> 00:34:11,800
0,90 90,300 300,1050
we do {get,unique,names}.|
|

1031
00:34:18,010 --> 00:34:19,540
0,630 870,1260 1260,1380 1380,1470 1470,1530
Yes.| Yeah, we got to
是。|是的，我们有独特的名字，对吧，

1032
00:34:19,540 --> 00:34:20,620
0,240 240,510 510,810 810,930 930,1080
unique names, correct,| {because -
|因为谁先赢谁就赢。

1033
00:34:20,620 --> 00:34:21,730
0,120 120,210 210,450 450,660 660,1110
-} the first one wins.|
|

1034
00:34:24,730 --> 00:34:27,300
0,600 600,1530 1530,2340
{} {Is,it} decentralized?|
它是去中心化的吗？|

1035
00:34:28,860 --> 00:34:32,130
0,420 930,1380 1380,2190 2190,2460 2460,3270
Yes.| Yeah, decentralized by {sort,of}
是。|是的，按比特币的方式去中心化，

1036
00:34:32,160 --> 00:34:35,280
0,540 540,630 630,1020
{} {Bitcoin,right -},|
|

1037
00:34:36,580 --> 00:34:38,230
0,330 330,480 480,1260 1440,1590 1590,1650
and the consensus and the
共识和日志基本上确保了，

1038
00:34:38,230 --> 00:34:39,700
0,420 420,780 780,1050 1050,1320 1320,1470
log basically makes sure that,|
|

1039
00:34:39,700 --> 00:34:40,840
0,90 90,210 210,390 390,900 900,1140
we can actually identify what
我们实际上可以确定名字是什么，

1040
00:34:40,840 --> 00:34:42,460
0,360 510,1020 1020,1290 1290,1470 1470,1620
the first name is,| so
|这样我们就可以选择一个唯一的名字。

1041
00:34:42,460 --> 00:34:43,150
0,120 120,210 210,300 300,540 540,690
that we can actually pick

1042
00:34:43,150 --> 00:34:44,060
0,60 60,360 360,660
a unique name.|
|

1043
00:34:45,080 --> 00:34:46,740
0,150 150,540 540,1050
{Is,it} human readable?|
它是人类可读的吗？|

1044
00:34:47,720 --> 00:34:48,740
0,300 300,690
Can be.|
是可以的。|

1045
00:34:49,370 --> 00:34:51,660
0,180 180,600 600,1470
Yeah, exactly, yeah,|
是的，就是这样，是的，|

1046
00:34:53,160 --> 00:34:55,650
0,480 480,630 630,1260 1290,2070 2130,2490
certainly my stream {} {6.824
当然，我的流6.824希望用户可读。

1047
00:34:55,650 --> 00:34:56,970
0,270 270,780 780,1080 1080,1260 1260,1320
-} hopefully user {readable -

1048
00:34:56,970 --> 00:34:57,660
0,360
-}.|
|

1049
00:35:00,180 --> 00:35:01,340
0,810

1050
00:35:02,170 --> 00:35:03,070
0,300 300,390 390,450 450,690 690,900
Okay, so it seems like
好的，所以它看起来像是第一次带来你知道的[套房]，

1051
00:35:03,070 --> 00:35:04,270
0,240 240,360 360,420 420,780 780,1200
it's sort of {} first

1052
00:35:04,300 --> 00:35:06,730
0,990 1020,1440 1440,1530 1530,2070 2070,2430
{} brought you know [suite],|
|

1053
00:35:06,730 --> 00:35:08,950
0,510 1050,1290 1290,1530 1530,1800 1800,2220
where it looks like indeed
看起来你确实知道我们有三处房产，对吧，

1054
00:35:08,950 --> 00:35:09,700
0,90 90,210 210,330 330,600 600,750
you know we got the

1055
00:35:09,700 --> 00:35:10,960
0,240 240,660 660,960
three properties, right,|
|

1056
00:35:11,310 --> 00:35:12,240
0,270 270,540 540,630 630,810 810,930
user {readable - -}, we've
用户可读，我们有独特性，我们必须去中心化。

1057
00:35:12,240 --> 00:35:13,410
0,150 150,210 210,750 750,960 960,1170
got the uniqueness, we gotta

1058
00:35:13,410 --> 00:35:14,620
0,660
decentralized.|
|

1059
00:35:14,950 --> 00:35:15,910
0,180 180,180 180,390 390,510 510,960
And I think {that,really} named
我认为真正命名的硬币是最早的命名系统

1060
00:35:15,910 --> 00:35:16,720
0,360 360,510 510,630 630,720 720,810
coin was sort of the

1061
00:35:16,720 --> 00:35:20,770
0,630 720,1650 1650,2940 2970,3960 3960,4050
first naming system| demonstrated that
|证明了这是可以通过这种方式实现的。

1062
00:35:20,770 --> 00:35:21,760
0,120 120,510 510,780 780,900 900,990
could be that could be

1063
00:35:21,760 --> 00:35:23,040
0,420 420,510 510,690 690,1020
achieved in this way.|
|

1064
00:35:23,460 --> 00:35:25,860
0,720 1020,1320 1320,1650 1650,2010 2010,2400
Now, it's not completely perfect,
现在，它并不是完全完美的，对吧，

1065
00:35:25,860 --> 00:35:28,770
0,390 870,1860 1860,1950 1950,2610 2640,2910
right,| like for example even
|例如，即使我们有一些唯一的名称和用户可读的，

1066
00:35:28,770 --> 00:35:29,580
0,330 330,450 450,600 600,750 750,810
though we got sort of

1067
00:35:29,580 --> 00:35:31,500
0,330 330,810 810,930 930,1080 1080,1920
unique names and user readable,|
|

1068
00:35:31,590 --> 00:35:33,060
0,270 270,480 480,1050 1050,1320 1320,1470
{we,don't} really know like what
我们真的不知道6.824到底是什么意思，对吧，

1069
00:35:33,060 --> 00:35:34,170
0,180 180,300 300,390 390,870 870,1110
{6.824 - - -} really

1070
00:35:34,170 --> 00:35:35,940
0,330 330,750 1200,1440 1440,1650 1650,1770
means, correct,| see {6.824 -
|见6.824和6.824指的是什么，

1071
00:35:35,940 --> 00:35:37,590
0,90 90,660 780,930 930,1500 1500,1650
- -} and what does

1072
00:35:37,590 --> 00:35:38,610
0,240 240,390 390,480 480,750 750,1020
{6.824 - - -} refer

1073
00:35:38,610 --> 00:35:40,110
0,180 180,360 360,570 570,780 1110,1500
to,| is like a {}
|就像一个零件号，

1074
00:35:40,110 --> 00:35:41,160
0,60 60,420 420,840 840,960 960,1050
a part number,| or is
|或者它是班级号或其他什么，

1075
00:35:41,160 --> 00:35:43,020
0,90 90,150 150,540 540,1200 1200,1860
it a class number or

1076
00:35:43,050 --> 00:35:44,670
0,750 750,870 870,1020 1020,1260 1260,1620
anything,| we don't really know
|我们真的不知道其他翻译的名字，

1077
00:35:44,670 --> 00:35:46,020
0,420 420,780 780,1080 1080,1230 1230,1350
other interpret names,| but you
|但你知道它们仍然是人类可读的，

1078
00:35:46,020 --> 00:35:47,520
0,240 270,390 390,780 840,1230 1230,1500
know they still {human,readable -},|
|

1079
00:35:47,520 --> 00:35:48,780
0,150 150,300 300,750 750,1140 1140,1260
its not completely perfect,| it's
它不是完全完美的，|它不是唯一地识别世界上的某个用户，对吧，

1080
00:35:48,780 --> 00:35:51,540
0,300 300,990 990,1440 1440,1890 2130,2760
not identifying uniquely some user

1081
00:35:51,540 --> 00:35:53,760
0,90 90,180 180,510 540,840 1560,2220
in the world, right,| and
|甚至就像你做的任何事情一样，这并不能真正唯一地识别一个人，对吧，

1082
00:35:53,760 --> 00:35:54,900
0,210 210,480 480,870 870,990 990,1140
even like whatever you were

1083
00:35:54,900 --> 00:35:56,670
0,360 360,1020 1020,1140 1140,1380 1380,1770
done [] that doesn't really

1084
00:35:56,670 --> 00:35:59,700
0,420 420,1200 1470,1920 1920,2640 2670,3030
uniquely identify {} one person,

1085
00:35:59,730 --> 00:36:00,840
0,240 240,390 390,870 870,990 990,1110
right,| so whenever you see
|所以当你看到名字的时候，

1086
00:36:00,840 --> 00:36:02,640
0,90 90,540 540,1050 1050,1320 1320,1800
a name,| there's still the
|仍然有一个问题，比如它到底是谁。

1087
00:36:02,880 --> 00:36:04,320
0,630 630,750 750,1050 1140,1350 1350,1440
issue of like who it

1088
00:36:04,320 --> 00:36:05,320
0,240 240,570 570,930
actually really is.|
|

1089
00:36:06,270 --> 00:36:07,240
0,690

1090
00:36:07,540 --> 00:36:09,190
0,120 120,660 930,1350 1350,1530 1530,1650
And also, {} there's sort
此外，还有一个类似的相关问题，

1091
00:36:09,190 --> 00:36:11,140
0,90 90,150 150,1200 1410,1590 1590,1950
of a similar you know

1092
00:36:11,260 --> 00:36:12,730
0,600 600,870 870,1050 1050,1200 1200,1470
related issue,| why it's not
|为什么它不是完全完美的，

1093
00:36:12,730 --> 00:36:14,530
0,360 360,900 900,1320 1380,1680 1680,1800
completely perfect,| {} which is
|这就像，

1094
00:36:14,530 --> 00:36:16,660
0,390 750,1410 1650,1950 1950,2040 2040,2130
like,| how, how do you
|怎么，你怎么找到某人的名字，

1095
00:36:16,660 --> 00:36:18,880
0,300 300,690 690,1050 1290,1890 1890,2220
find somebody's name,| {} and
|你知道你如何找到你知道的名字，

1096
00:36:18,880 --> 00:36:20,230
0,60 60,1080 1080,1170 1170,1260 1260,1350
you know how do you

1097
00:36:20,230 --> 00:36:21,430
0,240 240,720 720,810 810,900 900,1200
find actually you know what

1098
00:36:21,430 --> 00:36:24,310
0,390 390,660 690,2040 2370,2790 2790,2880
[] name,| {how,do} and how
|您如何以及如何找到它，

1099
00:36:24,310 --> 00:36:26,110
0,960 990,1290 1290,1470 1470,1770 1770,1800
do you find that,| how
|您如何知道哪条记录实际与哪个特定用户匹配，

1100
00:36:26,110 --> 00:36:27,520
0,300 300,450 450,690 690,1080 1080,1410
do you know which record

1101
00:36:27,520 --> 00:36:28,870
0,240 240,480 480,600 600,990 990,1350
actually goes with, which particular

1102
00:36:28,870 --> 00:36:32,770
0,330 360,660 1050,1950 2370,3000 3000,3900
user,| so although although the
|所以虽然这个系统很酷，

1103
00:36:32,770 --> 00:36:34,450
0,300 300,480 480,1020 1050,1320 1320,1680
system is {} quite cool,|
|

1104
00:36:34,450 --> 00:36:36,310
0,240 240,570 570,1050 1080,1620 1620,1860
because {it,has} these {decentralized -}
因为它有这些分散的、独特的和人类可读的方面，

1105
00:36:36,310 --> 00:36:38,110
0,270 270,420 420,600 600,1350 1350,1800
unique and human readable aspects

1106
00:36:38,110 --> 00:36:39,520
0,150 150,330 630,870 870,990 990,1410
to it,| {you,know,it's} not completely
|你知道这并不是完全完美的，

1107
00:36:39,520 --> 00:36:41,140
0,450 450,840 840,1110 1110,1230 1230,1620
perfect,| and these are generally
|这些通常是通用命名系统的问题，

1108
00:36:41,140 --> 00:36:43,150
0,270 270,810 840,1200 1200,1470 1470,2010
issues with general naming systems,|
|

1109
00:36:43,270 --> 00:36:44,920
0,450 450,810 810,1020 1020,1320 1320,1650
but certainly true here too,|
但在这里也是如此，|

1110
00:36:45,220 --> 00:36:45,970
0,150 150,270 270,420 420,480 480,750
so it's not the case
所以不是这样的，

1111
00:36:45,970 --> 00:36:47,200
0,180 180,300 300,450 450,720 990,1230
that,| you know we know
|你知道我们知道我们应该解决所有的命名问题，

1112
00:36:47,200 --> 00:36:48,190
0,180 180,330 330,420 420,780 780,990
we should have solved all

1113
00:36:48,190 --> 00:36:50,260
0,330 330,1050 1170,1650 1650,1770 1770,2070
naming problems,| {} in one
|一气呵成，

1114
00:36:50,260 --> 00:36:52,390
0,720 720,1170 1170,1650 1650,1800 1800,2130
single swoop,| we do have
|我们确实有很好的立足点可以合作，

1115
00:36:52,390 --> 00:36:54,760
0,420 420,960 990,1650 1650,1980 1980,2370
a good good standing position

1116
00:36:54,760 --> 00:36:56,110
0,330 330,540 540,840 840,1080 1080,1350
to {} work with,| but
|但这并不是完全百分之百的成功。

1117
00:36:56,110 --> 00:36:57,820
0,360 360,840 1050,1440 1440,1680 1680,1710
it's not { - -}

1118
00:36:57,820 --> 00:36:58,960
0,300 300,540 540,780 780,1080
completely hundred percent hit.|
|

1119
00:37:01,900 --> 00:37:05,380
0,480 960,1860 1860,2400 2700,3150 3150,3480
So question, so {namecoin -},
所以问题，所以Namecoin，他们所做的基本上是将这条记录添加到LIKE交易中

1120
00:37:05,380 --> 00:37:06,460
0,180 180,300 300,570 570,750 750,1080
all they did was add

1121
00:37:06,460 --> 00:37:08,830
0,450 450,690 690,1320 1320,1800 1800,2370
essentially this record to the

1122
00:37:09,010 --> 00:37:09,960
0,240 240,690
the like

1123
00:37:10,570 --> 00:37:14,230
0,480 510,1320 1590,2760 2760,2850 3420,3660
{} transaction| Well, {} I
|嗯，我想我们做得更多了，对吧，

1124
00:37:14,230 --> 00:37:14,830
0,210 210,270 270,420 420,450 450,600
think we did a little

1125
00:37:14,830 --> 00:37:15,820
0,120 120,330 330,660 660,900 900,990
bit more, {} correct,| they
|他们运行自己的区块链，

1126
00:37:15,820 --> 00:37:17,120
0,180 180,330 330,450 450,990
run their own blockchain,|
|

1127
00:37:17,390 --> 00:37:20,510
0,570 570,1200 1200,1260 1260,1890 2250,3120
{} independent of Bitcoin| and
独立于比特币|并在那里纯粹为许多人使用区块链，

1128
00:37:20,510 --> 00:37:23,540
0,60 60,1830 1860,2340 2340,2820 2820,3030
{ -} used blockchain there

1129
00:37:23,540 --> 00:37:24,900
0,510 510,660 660,1080
purely for many,|
|

1130
00:37:25,360 --> 00:37:26,530
0,360 360,690 690,780 780,930 930,1170
{} and they had also
他们还制定了一系列规则，

1131
00:37:26,530 --> 00:37:27,550
0,30 30,210 210,300 300,720 720,1020
a bunch of rules about,|
|

1132
00:37:27,550 --> 00:37:30,220
0,1260 1290,1440 1440,1620 1620,2190 2550,2670
like how much money how
比如，你要付多少钱才能得到一个特定的名字

1133
00:37:30,220 --> 00:37:31,270
0,360 360,690 690,840 840,960 960,1050
many namecoins you have to

1134
00:37:31,270 --> 00:37:31,900
0,210 210,330 330,390 390,570 570,630
pay you to get a

1135
00:37:31,900 --> 00:37:33,550
0,330 330,780 780,1140 1140,1470 1470,1650
particular name| and {} there's
|而且还有各种各样的其他扩展，

1136
00:37:33,550 --> 00:37:35,170
0,120 120,300 300,360 360,750 810,1620
all kinds of other extensions,|
|

1137
00:37:35,530 --> 00:37:37,180
0,300 300,540 540,660 660,1080 1080,1650
{} that I really discussed
我真正讨论过的东西都被提到了，

1138
00:37:37,210 --> 00:37:39,340
0,690 690,960 960,1080 1080,1590 1710,2130
{} yet were mentioned, {}|
|

1139
00:37:39,340 --> 00:37:40,690
0,150 150,390 390,570 570,780 810,1350
but they sort of followed
但他们在某种程度上遵循了这种特殊的方法，

1140
00:37:40,690 --> 00:37:41,860
0,120 120,480 480,1020
this particular approach,|
|

1141
00:37:42,140 --> 00:37:43,190
0,360 360,450 450,540 540,870 870,1050
and were the first to
我们是第一个这样做的人，

1142
00:37:43,190 --> 00:37:43,940
0,120 120,390
do so,|
|

1143
00:37:46,630 --> 00:37:48,280
0,240 240,510 510,930 930,1170 1170,1650
in many pragmatic {issues -
在论文涉及的许多务实问题中，

1144
00:37:48,310 --> 00:37:49,780
0,540 540,540 540,810 810,1140 1140,1470
-} {} paper touches on,|
|

1145
00:37:49,930 --> 00:37:51,040
0,300 300,480 480,690 690,990 990,1110
when I haven't mentioned at
当我还没有提到的时候。

1146
00:37:51,040 --> 00:37:51,840
0,180 180,510
all yet.|
|

1147
00:37:56,060 --> 00:37:57,240
0,210 210,360 360,930
Any other questions?|
还有其他问题吗？|

1148
00:38:04,300 --> 00:38:05,830
0,510 630,780 780,960 960,1290 1290,1530
Okay, so let's actually dive
好的，让我们稍微深入到一些实际问题上，

1149
00:38:05,830 --> 00:38:07,000
0,90 90,150 150,420 420,780 840,1170
in a little bit on

1150
00:38:07,000 --> 00:38:08,890
0,480 510,720 720,870 930,1260 1290,1890
the sort of the practical

1151
00:38:08,890 --> 00:38:10,930
0,540 840,1380 1380,1590 1590,1680 1680,2040
issues,| although there's a slightly
|尽管性质略有不同，

1152
00:38:10,930 --> 00:38:12,190
0,240 240,720 720,960 960,1170 1170,1260
different nature,| we want to
|我们想要我们刚刚谈到这件事真的是由，

1153
00:38:12,190 --> 00:38:13,270
0,90 90,270 270,510 510,810 810,1080
we just talked about it

1154
00:38:13,270 --> 00:38:14,860
0,330 330,510 510,870
really is {by,the},|
|

1155
00:38:15,940 --> 00:38:18,640
0,270 270,390 390,720 720,1410 1920,2700
how to actually implement {}
如何通过利用比特币来实际实施去中心化的应用程序和命名系统。

1156
00:38:18,670 --> 00:38:20,650
0,630 630,780 780,1380 1440,1650 1650,1980
{decentralized -} apps {} and

1157
00:38:20,650 --> 00:38:23,890
0,390 390,930 1230,1980 2010,2400 2400,3240
naming system, {} by leveraging

1158
00:38:23,890 --> 00:38:25,000
0,390 390,870
{} Bitcoin.|
|

1159
00:38:42,020 --> 00:38:43,490
0,360 360,840 840,930 930,1170 1170,1470
And there's a bunch of,
有一堆，一堆非常简短的务实问题，

1160
00:38:43,550 --> 00:38:46,130
0,870 1320,1770 1770,1860 1860,2250 2280,2580
a bunch of very short

1161
00:38:46,130 --> 00:38:48,560
0,420 570,1170 1170,1650 1860,2280 2280,2430
just pragmatic issues,| {} there
|你可以输入的数据量是有限制的，

1162
00:38:48,560 --> 00:38:49,700
0,120 120,780 780,900 900,960 960,1140
are limits on the amount

1163
00:38:49,700 --> 00:38:50,510
0,90 90,360 360,510 510,600 600,810
of data, you can put

1164
00:38:50,510 --> 00:38:51,220
0,120 120,450
in {},|
|

1165
00:38:53,840 --> 00:38:56,420
0,210 210,750 1350,2280 2310,2520 2520,2580
on data size in a
关于事务中的数据大小。

1166
00:38:56,420 --> 00:38:58,680
0,570
transaction.|
|

1167
00:38:59,120 --> 00:39:00,350
0,270 270,570 570,810 810,960 960,1230
So, although maybe it's perfectly
所以，尽管也许有个名字是很好的，

1168
00:39:00,350 --> 00:39:02,270
0,270 270,390 390,600 600,1290 1290,1920
fine to have a name,|
|

1169
00:39:02,300 --> 00:39:04,850
0,300 300,720 720,1470 1470,1920 1920,2550
{} value binding into the,
价值绑定进入，进入，进入比特币交易

1170
00:39:05,150 --> 00:39:07,850
0,630 630,1680 1770,2190 2190,2520 2520,2700
{} into the, into the

1171
00:39:07,850 --> 00:39:09,440
0,150 150,810 1050,1230 1230,1320 1320,1590
bitcoin transaction| and we can't
|我们不能把我们的待办事项清单放在那笔交易中

1172
00:39:09,440 --> 00:39:11,090
0,360 360,480 480,780 780,1230 1260,1650
put our todo list inside

1173
00:39:11,090 --> 00:39:12,350
0,90 90,240 240,840 840,990 990,1260
of that transaction| and so
|所以你知道我们得有个计划，

1174
00:39:12,350 --> 00:39:13,070
0,180 180,330 330,450 450,540 540,720
{you,know} we've got to have

1175
00:39:13,070 --> 00:39:14,780
0,210 210,780 1080,1410 1410,1560 1560,1710
some plan,| {} if we're
|如果我们真的要这样做的话。

1176
00:39:14,780 --> 00:39:16,970
0,240 240,390 390,990 1020,1770 2040,2190
actually how that part is

1177
00:39:16,970 --> 00:39:17,960
0,120 120,210 210,450 450,810
going to work out.|
|

1178
00:39:18,590 --> 00:39:20,220
0,390 390,510 510,780 780,1350
It has slow writes,|
它的写入速度很慢，|

1179
00:39:21,570 --> 00:39:22,710
0,120 120,300 300,570 570,660 660,1140
we know from the last
我们从上一节课上得知，

1180
00:39:22,710 --> 00:39:24,330
0,510 690,870 870,1050 1050,1110 1110,1620
lecture,| it takes a while
|实际上，权利或事务的传播需要一段时间

1181
00:39:24,540 --> 00:39:26,490
0,420 420,660 660,1230 1230,1530 1530,1950
for right actually {} or

1182
00:39:26,520 --> 00:39:29,460
0,480 480,600 600,1290 1620,2460 2490,2940
transactions to propagate| and before
|在他们决定保持稳定之前，

1183
00:39:29,460 --> 00:39:30,930
0,540 570,900 900,960 960,1230 1230,1470
they decided to be {}

1184
00:39:30,930 --> 00:39:32,490
0,210 210,690 690,810 810,1140 1140,1560
really stable,| it cannot be
|它不能再分叉了，

1185
00:39:32,520 --> 00:39:34,320
0,360 360,750 750,930 930,1560 1680,1800
{} forked off anymore,| you
|你知道我们谈论的可能是链条后面的四五六个街区，

1186
00:39:34,320 --> 00:39:35,160
0,120 120,240 240,450 450,540 540,840
know we might be talking

1187
00:39:35,160 --> 00:39:36,090
0,240 240,480 480,570 570,690 690,930
about like you know four

1188
00:39:36,090 --> 00:39:38,550
0,210 210,720 810,2010 2010,2280 2280,2460
five six blocks later {in,the}

1189
00:39:38,550 --> 00:39:39,720
0,600 600,660 660,840 840,1020 1020,1170
chain,| you know and your
|你知道，你的街区10分钟，

1190
00:39:39,720 --> 00:39:41,130
0,330 330,540 540,930 930,1320 1320,1410
blocks ten minutes,| so you
|所以你知道一小时后，对吧，

1191
00:39:41,130 --> 00:39:42,270
0,120 120,240 240,450 450,750 780,1140
know an hour later, right,|
|

1192
00:39:42,810 --> 00:39:43,800
0,240 240,420 420,510 510,810 810,990
{} and so it's really
所以这真的不是很酷，

1193
00:39:43,800 --> 00:39:44,820
0,210 210,330 330,630 630,750 750,1020
not so cool,| if we're
|如果我们也将待办事项列表放在区块链内部，

1194
00:39:44,820 --> 00:39:46,680
0,690 720,1020 1020,1320 1320,1710 1710,1860
{stick,our} todo list inside of

1195
00:39:46,680 --> 00:39:49,410
0,360 750,1590 1590,2130 2130,2370 2370,2730
the blockchain too,| {} because
|因为你知道我修改我的区块，我的链，我修改我的待办事项列表，

1196
00:39:49,410 --> 00:39:50,520
0,90 90,300 300,450 450,990 990,1110
you know I modify my

1197
00:39:50,520 --> 00:39:52,080
0,540 540,690 690,1110 1110,1200 1200,1560
block, my chain, I modify

1198
00:39:52,080 --> 00:39:53,070
0,120 120,420 420,720 720,780 780,990
my todo list,| you know
|你知道，大概一个小时后，也许真的观察到了它，

1199
00:39:53,070 --> 00:39:54,090
0,210 210,270 270,480 480,690 690,1020
like an hour later, maybe

1200
00:39:54,090 --> 00:39:55,500
0,240 240,600 600,690 690,1020 1260,1410
actually observe it,| so that
|所以这看起来不太好，

1201
00:39:55,500 --> 00:39:56,400
0,180 180,330 330,450 450,690 690,900
seems not so good,| and
|你想要更积极的应用程序，

1202
00:39:56,400 --> 00:39:57,450
0,210 210,360 360,420 420,630 630,1050
you want to go to

1203
00:39:57,540 --> 00:39:59,520
0,390 390,780 780,1410 1410,1800 1800,1980
more aggressive applications,| where there's
|在那里有更多的数据被操纵，

1204
00:39:59,520 --> 00:40:01,470
0,240 240,420 420,660 660,960 960,1950
much more data that's manipulated,|
|

1205
00:40:01,710 --> 00:40:04,560
0,150 150,330 330,960 960,1920 1920,2850
you know certainly a problem,|
你当然知道一个问题，|

1206
00:40:04,800 --> 00:40:06,930
0,480 480,900 930,1080 1080,1770 1770,2130
{} in a similar, {in,addition}
在类似的，另外都是慢的，对，

1207
00:40:06,930 --> 00:40:07,830
0,30 30,300 300,540 540,600 600,900
are slow, right,| so there's
|因此也存在低吞吐量、低带宽、

1208
00:40:07,830 --> 00:40:09,870
0,210 210,900 900,1290 1290,1530 1530,2040
also low throughput, low bandwidth,|
|

1209
00:40:15,650 --> 00:40:16,700
0,300 300,390 390,510 510,840 840,1050
in the [], there's only
在[]中，每秒只有几笔交易，对吧，

1210
00:40:16,700 --> 00:40:18,760
0,60 60,240 240,930
a few transactions

1211
00:40:19,650 --> 00:40:20,820
0,120 120,480 480,870 870,1050 1050,1170
per second, correct,| so we're
|所以我们要写很多你知道的文件，

1212
00:40:20,820 --> 00:40:21,450
0,150 150,330 330,390 390,540 540,630
gonna do a lot of

1213
00:40:21,450 --> 00:40:23,550
0,330 330,540 540,750 750,1320 1350,2100
writes {you,know} to file, {}|
|

1214
00:40:23,550 --> 00:40:24,720
0,330 330,480 480,870 870,1050 1050,1170
and many times we're {also
很多时候，我们也是，

1215
00:40:24,720 --> 00:40:26,160
0,180 180,390 390,660 660,990 990,1440
-},| we're going running to
|我们将通过区块链运行文件操作，

1216
00:40:26,340 --> 00:40:29,220
0,720 1230,1680 1680,2130 2130,2460 2490,2880
the file operations through blockchain,|
|

1217
00:40:29,220 --> 00:40:30,960
0,390 660,990 990,1200 1200,1650 1650,1740
so, {} so clearly you
所以，很明显，你知道我们必须要有一点，

1218
00:40:30,960 --> 00:40:32,160
0,780 780,900 900,1020 1020,1080 1080,1200
know we've got to be

1219
00:40:32,160 --> 00:40:33,210
0,90 90,450 450,780 780,870 870,1050
a {little,bit},| if we want
|如果我们想真正为分散的应用程序构建通用的基础设施

1220
00:40:33,210 --> 00:40:34,230
0,60 60,330 330,630 630,750 750,1020
to really build a general

1221
00:40:34,230 --> 00:40:37,560
0,780 1080,1470 1470,2070 2070,2760 2820,3330
purpose {} infrastructure for {}

1222
00:40:38,070 --> 00:40:39,900
0,390 390,720 720,1290 1290,1710 1710,1830
{} decentralized applications| going to
|这将是一个更完整的故事，

1223
00:40:39,900 --> 00:40:41,760
0,240 240,750 750,930 930,1440 1440,1860
be a more complete story,|
|

1224
00:40:41,760 --> 00:40:42,840
0,180 180,510 510,870 870,960 960,1080
that actually allows us to
这实际上允许我们得到像快速写入一样的东西，

1225
00:40:42,840 --> 00:40:45,150
0,300 300,720 900,1470 1470,1800 1800,2310
get like {} fast writes,|
|

1226
00:40:45,150 --> 00:40:46,380
0,90 90,180 180,420 420,780 780,1230
you know high bandwidth rates,|
你知道高带宽速率，|

1227
00:40:46,380 --> 00:40:48,810
0,480 480,1350 1350,1560 1560,2160 2160,2430
{} and gets around and
而且基本上不会在区块链中运行所有东西。

1228
00:40:48,840 --> 00:40:50,370
0,540 540,840 840,1050 1050,1410 1410,1530
basically not running everything in

1229
00:40:50,370 --> 00:40:51,600
0,60 60,480
the blockchain.|
|

1230
00:40:51,660 --> 00:40:52,680
0,240 240,510 510,690 690,870 870,1020
The paper also talks about
这篇论文还讨论了另一个最后的问题，分类账，不断增长的分类账，

1231
00:40:52,680 --> 00:40:54,720
0,180 180,360 360,690 690,1080 1080,2040
one other final problem, {the,ledger},

1232
00:40:54,720 --> 00:40:56,320
0,240 240,540 540,1110
ever growing ledger,|
|

1233
00:40:56,600 --> 00:40:59,120
0,630 930,1740 1740,1920 1920,2220 2220,2520
{ -} I'm {not,actually} spend
事实上，我根本不会花太多时间来谈论这一点，

1234
00:40:59,120 --> 00:41:00,560
0,150 150,720 720,960 960,1260 1260,1440
much time about talking about

1235
00:41:00,560 --> 00:41:02,180
0,150 150,270 270,600 810,1440 1440,1620
that at all,| but it's
|但如果你想像报纸上[报道]那样做，它也会发出问题，

1236
00:41:02,180 --> 00:41:03,200
0,180 180,240 240,480 480,900 930,1020
going to also issue if

1237
00:41:03,200 --> 00:41:04,550
0,90 90,300 300,360 360,840 1200,1350
you want to do as

1238
00:41:04,550 --> 00:41:05,660
0,330 330,630 630,690 690,750 750,1110
{} [report] in the paper,|
|

1239
00:41:05,660 --> 00:41:06,440
0,180 180,330 330,450 450,510 510,780
you are going to boot
您将启动一个块堆栈节点，

1240
00:41:06,440 --> 00:41:08,720
0,270 270,630 660,1080 1080,1530 1740,2280
up a blockstack node, {}|
|

1241
00:41:08,720 --> 00:41:09,590
0,150 150,240 240,420 420,660 660,870
if you do sort of
如果你采用传统的比特币风格，

1242
00:41:09,590 --> 00:41:12,020
0,510 690,1170 1170,1650 1650,2040 2040,2430
a traditional Bitcoin style,| where
|在那里你要逐一检查所有的交通交易，

1243
00:41:12,110 --> 00:41:13,130
0,330 330,480 480,690 690,900 900,1020
you're gonna run through all

1244
00:41:13,130 --> 00:41:14,180
0,60 60,420 420,600 600,870 870,1050
the traffic {transactions -} one

1245
00:41:14,180 --> 00:41:15,290
0,120 120,570 630,840 840,960 960,1110
by one,| that will take
|这将需要一段时间，才能真正建立起完整的命名记录。

1246
00:41:15,290 --> 00:41:16,550
0,60 60,420 420,780 780,870 870,1260
a while, before you actually

1247
00:41:16,550 --> 00:41:17,780
0,300 300,420 420,570 570,930 930,1230
build up a complete naming

1248
00:41:17,780 --> 00:41:18,380
0,450
record.|
|

1249
00:41:18,910 --> 00:41:19,780
0,210 210,570 570,630 630,690 690,870
In particular, in the case
特别是，在块堆栈的情况下有点恼人，

1250
00:41:19,780 --> 00:41:21,340
0,60 60,600 600,840 840,1200 1200,1560
of blockstack {is,a,little,bit} annoying,| because
|因为区块链中的一个交易与区块堆栈完全无关，对吧，

1251
00:41:21,580 --> 00:41:22,840
0,210 210,300 300,390 390,1110 1110,1260
one of the transactions that

1252
00:41:22,840 --> 00:41:24,100
0,270 270,540 540,780 780,1170 1170,1260
are in the blockchain are

1253
00:41:24,100 --> 00:41:25,720
0,360 360,930 930,1020 1020,1290 1290,1620
completely irrelevant to {blockstacks -},

1254
00:41:25,720 --> 00:41:27,520
0,210 210,510 810,1080 1080,1350 1350,1800
right,| there {} there whatever
|在那里，无论是什么实际上都有一个完全不同的目的，

1255
00:41:27,520 --> 00:41:28,810
0,150 150,420 420,510 510,1020 1020,1290
is actually a completely different

1256
00:41:28,810 --> 00:41:30,430
0,510 690,1050 1050,1260 1260,1350 1350,1620
purpose,| {} and have nothing
|与区块堆栈方法无关，

1257
00:41:30,430 --> 00:41:31,810
0,60 60,270 270,570 570,990 1020,1380
to do with {} {blockstack

1258
00:41:31,810 --> 00:41:34,150
0,450 780,1710 1710,1890 1890,2070 2070,2340
-} approach,| you know {blockstack
|你知道，区块堆栈，如果你重新--字面上说，我们使用比特币区块链作为你的基础，

1259
00:41:34,150 --> 00:41:35,500
0,240 240,510 510,660 660,810 810,1350
-}, if you {re-literally -}

1260
00:41:35,500 --> 00:41:37,300
0,180 180,660 960,1260 1260,1440 1440,1800
we're using {} the Bitcoin

1261
00:41:37,300 --> 00:41:39,010
0,600 600,720 720,900 900,1290 1290,1710
blockchain as your fundamental thing,|
|

1262
00:41:39,010 --> 00:41:39,640
0,150 150,270 270,390 390,480 480,630
you would have to go
你必须通过一名翻译，

1263
00:41:39,640 --> 00:41:41,200
0,300 300,540 540,1020 1020,1290 1290,1560
through an interpreter,| entered and
|进入，看看哪些实际要申请。

1264
00:41:41,200 --> 00:41:42,250
0,210 210,390 390,600 600,900 900,1050
see which ones actually going

1265
00:41:42,250 --> 00:41:42,860
0,90 90,480
to apply.|
|

1266
00:41:45,100 --> 00:41:45,880
0,330 330,450 450,600 600,720 720,780
Okay, so we're going to
好的，我们将更多地关注前几个挑战，

1267
00:41:45,880 --> 00:41:46,900
0,270 270,630 630,750 750,900 900,1020
focus more on some of

1268
00:41:46,900 --> 00:41:49,690
0,750 810,1140 1140,1770 1770,1860 2220,2790
these first couple of challenges,|
|

1269
00:41:49,690 --> 00:41:51,070
0,180 180,360 360,720 900,1020 1020,1380
which is like you know
这就像你知道，我们基本上想做的是最大限度地减少区块链的使用，

1270
00:41:51,100 --> 00:41:52,390
0,510 510,690 690,840 840,1050 1050,1290
basically what we wanna do

1271
00:41:52,390 --> 00:41:55,180
0,150 150,1320 1320,1440 1440,1830 1830,2790
is minimized the use of

1272
00:41:55,210 --> 00:41:58,930
0,780 1110,2310 2310,2460 2460,3510 3540,3720
blockchain,| {you,know} so we get
|你知道，所以我们知道你的表现如何写作或[体面的]带宽。

1273
00:41:58,930 --> 00:42:00,700
0,150 150,480 480,960 960,1320 1320,1770
how you performance writes or

1274
00:42:00,700 --> 00:42:02,160
0,540 540,840 840,1350
{} [decent] bandwidth.|
|

1275
00:42:05,160 --> 00:42:06,100
0,120 120,210 210,330 330,690
Does that make sense?|
这说得通吗？|

1276
00:42:11,370 --> 00:42:12,510
0,300 300,510 510,690 690,990 990,1140
Good, that's what gets you
很好，这就是文章的核心所在，

1277
00:42:12,510 --> 00:42:13,280
0,480
the

1278
00:42:13,620 --> 00:42:16,110
0,600 600,1290 1470,2100 2100,2340 2340,2490
core {of,the,paper},| {} which is
|这就像，我们会调出图表，

1279
00:42:16,110 --> 00:42:17,380
0,210 210,870
like, {}

1280
00:42:17,890 --> 00:42:19,540
0,390 390,690 690,840 840,990 990,1650
we'll pull up the diagram,|
|

1281
00:42:19,540 --> 00:42:20,440
0,210 210,330 330,450 450,780 780,900
so we can look at
这样我们就能看到它了，

1282
00:42:20,440 --> 00:42:21,180
0,240
it,|
|

1283
00:42:23,320 --> 00:42:24,960
0,240 240,540 540,690 690,1320
that's basically this diagram.|
这基本上就是这张图。|

1284
00:42:25,380 --> 00:42:26,790
0,360 360,510 510,690 690,750 750,1410
And that sort of description
这是对一般方法的描述，

1285
00:42:26,790 --> 00:42:29,160
0,120 120,240 240,540 540,1140 1170,2370
of the general approach, {}|
|

1286
00:42:29,610 --> 00:42:30,960
0,240 240,360 360,660 660,1170 1170,1350
{} the paper takes to
这篇论文旨在应对这些挑战，

1287
00:42:30,960 --> 00:42:32,940
0,630 630,960 960,1500 1500,1710 1710,1980
address the challenges,| that I
|我刚刚在上一块黑板上展示了。

1288
00:42:32,940 --> 00:42:33,660
0,180 180,360 360,540 540,630 630,720
just laid out on the

1289
00:42:33,660 --> 00:42:35,040
0,570 600,1140
previous board.|
|

1290
00:42:39,050 --> 00:42:39,830
0,240 240,390 390,510 510,570 570,780
Okay, so this is a
好的，这是一幅复杂的图景

1291
00:42:39,830 --> 00:42:41,480
0,420 420,930 990,1260 1260,1380 1380,1650
complicated picture| and so let's
|所以让我们一层一层地去

1292
00:42:41,510 --> 00:42:43,370
0,750 750,930 930,1230 1230,1350 1350,1860
go for layer by layer|
|

1293
00:42:43,370 --> 00:42:44,720
0,120 120,300 300,390 390,900 900,1350
and try to understand actually
试着去了解事物是如何运作的。

1294
00:42:44,720 --> 00:42:45,940
0,390 390,630 630,990
how things work.|
|

1295
00:42:50,440 --> 00:42:52,180
0,360 360,510 510,810 840,1440
So at the bottom,
所以在底部，这是你知道的比特币链条。

1296
00:42:53,100 --> 00:42:54,480
0,270 270,510 510,960
here is the,

1297
00:42:55,220 --> 00:42:56,870
0,330 330,510 510,600 600,1080 1080,1650
{you,know} is the Bitcoin chain.|
|

1298
00:43:02,040 --> 00:43:04,980
0,720 720,1440 1680,2160 2160,2670 2700,2940
And in in the Bitcoin
在比特币链条中，有很多交易

1299
00:43:04,980 --> 00:43:05,940
0,330 330,690 690,720 720,900 900,960
chain, there's a lot of

1300
00:43:05,940 --> 00:43:08,070
0,720 780,1560 1590,1770 1770,1860 1860,2130
transactions| and many of these
|而这些交易中的许多与区块堆栈完全没有任何关系，对吧，

1301
00:43:08,070 --> 00:43:09,120
0,240 240,360 360,780 780,960 960,1050
transactions have absolutely nothing to

1302
00:43:09,120 --> 00:43:12,090
0,210 210,810 810,1560 1890,2520 2520,2970
do with {} {blockstack -},

1303
00:43:12,810 --> 00:43:14,280
0,270 270,510 510,810 810,1050 1050,1470
right,| {write,down} {blockstack -} here.|
|在这里写下块堆栈。|

1304
00:43:18,680 --> 00:43:20,510
0,600 600,930 930,990 990,1410 1410,1830
{} And the blockstck transactions
区块交易在某种程度上是位于区块链中的特定区块，

1305
00:43:20,510 --> 00:43:21,710
0,120 120,450 450,570 570,900 900,1200
are sort of sitting in

1306
00:43:21,710 --> 00:43:23,660
0,150 150,390 390,660 990,1530 1530,1950
you know a particular blocks

1307
00:43:23,660 --> 00:43:24,660
0,120 120,180 180,720
in the blockchain,|
|

1308
00:43:25,700 --> 00:43:28,010
0,930 1170,1590 1590,1770 1770,2100 2100,2310
and, {} then there's a
然后，还有第二层，实际上是区块堆栈节点，

1309
00:43:28,010 --> 00:43:29,060
0,270 270,540 540,660 660,960 960,1050
second layer, which really is

1310
00:43:29,060 --> 00:43:30,530
0,120 120,390 390,630 630,1110 1260,1470
the {blockstack -} nodes,| that
|基本上阅读了所有这些交易，

1311
00:43:30,530 --> 00:43:33,650
0,390 390,840 840,1230 1230,1710 1920,3120
basically read all these transactions,|
|

1312
00:43:33,770 --> 00:43:34,970
0,450 450,720 720,810 810,1110 1110,1200
fish out the ones that
找出那些实际上与块堆栈相关的代码，

1313
00:43:34,970 --> 00:43:36,800
0,30 30,450 450,810 810,1260 1260,1830
are actually related to {}

1314
00:43:36,830 --> 00:43:40,400
0,240 240,660 870,1980 2070,2700 2700,3570
{blockstack -},| interpret those operations
|解释这些操作，您就可以构建一个带有名称的区块堆栈数据库

1315
00:43:40,670 --> 00:43:42,470
0,540 540,660 660,960 960,1230 1230,1800
and you build up a

1316
00:43:42,470 --> 00:43:44,300
0,330 330,480 480,1020 1020,1230 1230,1830
{blockstack -} database with names|
|

1317
00:43:44,330 --> 00:43:45,770
0,720 720,930 930,1140 1140,1350 1350,1440
to {} what turns out
结果是区域文件散列。

1318
00:43:45,770 --> 00:43:47,150
0,60 60,180 180,540 540,870 870,1380
to be zone file hashes.|
|

1319
00:43:47,720 --> 00:43:48,860
0,480 540,750 750,900 900,960 960,1140
So we look at these
所以我们来看看这些操作，

1320
00:43:48,860 --> 00:43:50,240
0,690 690,930 930,990 990,1230 1230,1380
operations,| when the ones in
|当里面的人，

1321
00:43:50,240 --> 00:43:52,460
0,420 420,720 840,1080 1080,1620 1620,2220
there,| so in every Bitcoin
|所以在我前面提到的每一笔比特币交易中，

1322
00:43:52,460 --> 00:43:54,230
0,810 810,1170 1170,1560 1560,1680 1680,1770
transactions {as,I,mentioned} early,| you can
|你可以有一些元数据，

1323
00:43:54,230 --> 00:43:56,030
0,120 120,240 240,930 960,1680 1680,1800
have some metadata,| that's in
|这是在所谓的操作下划线返回字段中

1324
00:43:56,030 --> 00:43:56,930
0,120 120,330 330,540 540,630 630,900
the what's called the OP

1325
00:43:56,930 --> 00:43:58,940
0,480 480,840 840,1290 1590,1890 1890,2010
underscore return field| and in
|并在下划线回车字段中，

1326
00:43:58,940 --> 00:44:00,410
0,150 150,780 780,840 840,1110 1110,1470
the {underscore - -} return

1327
00:44:00,410 --> 00:44:04,460
0,450 720,1020 1020,1380 1380,2250 2970,4050
field,| {} there's basically a
|基本上有一个名字，比如x加上区域文件的散列，

1328
00:44:04,460 --> 00:44:05,300
0,660
name,

1329
00:44:05,610 --> 00:44:08,220
0,300 300,870 900,1530 1650,2370 2370,2610
say x {} plus you

1330
00:44:08,220 --> 00:44:09,870
0,270 270,510 510,1110 1140,1320 1320,1650
know the hash of zone

1331
00:44:09,870 --> 00:44:10,800
0,390
file,|
|

1332
00:44:15,980 --> 00:44:17,330
0,480 480,720 720,870 870,930 930,1350
and that's sort of the
这是某种绑定，也就是比特币中的a

1333
00:44:17,480 --> 00:44:19,760
0,750 750,1020 1020,1350 1350,1680 1680,2280
binding, that's it's a in

1334
00:44:19,790 --> 00:44:21,680
0,90 90,570 570,840 870,1530 1530,1890
a Bitcoin| and basically blockstack
|基本上是块堆栈，它使用比特币基本上使从名称到区域文件的绑定是唯一的，

1335
00:44:21,680 --> 00:44:23,780
0,240 240,990 990,1470 1500,1980 1980,2100
that uses {} Bitcoin to

1336
00:44:23,780 --> 00:44:25,160
0,360 360,570 570,810 810,1230 1230,1380
basically make that binding from

1337
00:44:25,160 --> 00:44:26,570
0,420 420,630 630,1020 1020,1170 1170,1410
hand from name to {}

1338
00:44:26,570 --> 00:44:30,890
0,300 300,840 1110,1320 1320,1920 2130,4320
zone file {} unique, {}|
|

1339
00:44:30,890 --> 00:44:33,440
0,1170 1560,1740 1740,1920 1920,1980 1980,2550
and {} in a decentralized
并以一种分散的方式。

1340
00:44:33,440 --> 00:44:33,960
0,360
manner.|
|

1341
00:44:34,550 --> 00:44:36,980
0,510 540,1620 1620,1770 1770,1920 1920,2430
So as, you know, like
所以，你知道，就像在实验室3或任何其他类型的记录系统中一样，

1342
00:44:36,980 --> 00:44:38,090
0,90 90,360 360,600 600,990 990,1110
in lab 3 or in

1343
00:44:38,090 --> 00:44:39,320
0,240 240,510 510,720 720,840 840,1230
any other sort of logging

1344
00:44:39,320 --> 00:44:43,670
0,630 840,1590 1620,2250 3030,3900 3900,4350
system,| {} the blockstack nodes
|块堆栈节点解释这些特定的名称事务，

1345
00:44:43,670 --> 00:44:47,510
0,480 480,900 1320,2160 2160,2880 2910,3840
interpret these particular {} name

1346
00:44:47,540 --> 00:44:49,670
0,840 870,1260 1260,1380 1380,1650 1650,2130
transactions,| look at OP field,
|看看运算域，看到这个运算域，

1347
00:44:49,910 --> 00:44:51,800
0,840 930,1350 1350,1560 1560,1710 1710,1890
{} see that this op

1348
00:44:51,800 --> 00:44:52,760
0,300 300,450 450,510 510,840 840,960
field,| is for example to
|例如创建一个特定的名称

1349
00:44:52,760 --> 00:44:54,530
0,330 330,390 390,810 810,1320 1410,1770
create a particular name| and
|基本上存储在数据库中，

1350
00:44:54,530 --> 00:44:56,360
0,360 360,810 810,1020 1020,1110 1110,1830
basically store in the database,|
|

1351
00:44:56,360 --> 00:45:00,740
0,1890 2190,3120 3120,3360 3360,3780 3780,4380
the binding from name x
您知道的从名称x到区域文件散列的绑定。

1352
00:45:00,740 --> 00:45:01,670
0,90 90,180 180,540 540,660 660,930
you know to the hash

1353
00:45:01,670 --> 00:45:02,520
0,120 120,180 180,420 420,780
of the zone file.|
|

1354
00:45:03,480 --> 00:45:05,100
0,390 690,1080 1080,1140 1140,1500 1500,1620
And once a while as
偶尔，就像我们在第二章中看到的，

1355
00:45:05,100 --> 00:45:06,750
0,150 150,360 360,990 1020,1500 1500,1650
we've seen {in,the,second},| usually want
|通常想要更新区域文件，

1356
00:45:06,750 --> 00:45:08,250
0,60 60,390 390,720 720,1200 1320,1500
to update zone file,| so
|因此，您可能会看到相同的多个交易，

1357
00:45:08,250 --> 00:45:10,140
0,120 120,300 300,660 660,1230 1230,1890
you might see multiple transactions

1358
00:45:10,140 --> 00:45:12,990
0,240 240,930 1140,1620 1620,2340 2340,2850
for {the,same},| {} user updating
|用户更新基本上是对他自己的文件进行散列。

1359
00:45:12,990 --> 00:45:13,980
0,360 360,600 600,660 660,810 810,990
basically hash of his own

1360
00:45:13,980 --> 00:45:14,540
0,360
file.|
|

1361
00:45:15,240 --> 00:45:16,380
0,150 150,570 690,930 930,1080 1080,1140
Of course, we want to
当然，我们希望最大限度地减少这些变化，

1362
00:45:16,380 --> 00:45:18,270
0,600 600,690 690,840 840,1290 1290,1890
minimize you know these {}

1363
00:45:18,300 --> 00:45:20,430
0,540 540,870 870,1290 1290,1650 1650,2130
changes,| because every change to
|因为每一次更改都需要，需要修改，所以我们发布了比特币交易，

1364
00:45:20,430 --> 00:45:23,730
0,390 750,1170 1170,1950 1980,2850 2880,3300
the, would require, {} would

1365
00:45:23,730 --> 00:45:25,620
0,300 300,930 930,1200 1200,1800 1800,1890
require modification, we're posting a

1366
00:45:25,620 --> 00:45:27,810
0,330 330,990 1170,1800 1800,2100 2100,2190
Bitcoin transaction,| {} and you
|你们知道，在上一张幻灯片中，由于许多原因，这是缓慢的，

1367
00:45:27,810 --> 00:45:29,010
0,150 150,480 510,750 750,1020 1020,1200
know for many reasons on

1368
00:45:29,010 --> 00:45:30,150
0,60 60,330 330,540 540,690 690,1140
the previous slide, that's slow,|
|

1369
00:45:30,150 --> 00:45:30,870
0,120 120,300 300,480 480,570 570,720
which would like to try
它想要尽量避免它，

1370
00:45:30,870 --> 00:45:32,010
0,90 90,390 390,570 660,870 870,1140
to avoid it,| {futhermore -},
|而且，这要花一点钱，

1371
00:45:32,010 --> 00:45:32,790
0,150 150,300 300,540 540,600 600,780
it will cost a little

1372
00:45:32,790 --> 00:45:33,500
0,120 120,180 180,510
bit of [money],|
|

1373
00:45:33,710 --> 00:45:34,880
0,480 480,540 540,750 750,1020 1020,1170
{} I mean there's these
我的意思是，这些交易需要一个过程。

1374
00:45:34,880 --> 00:45:36,230
0,720 720,900 900,990 990,1260 1260,1350
transactions need to be a

1375
00:45:36,230 --> 00:45:37,080
0,630
process.|
|

1376
00:45:38,400 --> 00:45:39,760
0,150 150,510 510,1050
And so, {
所以，所以基本的计划，

1377
00:45:40,210 --> 00:45:41,200
0,660
-}

1378
00:45:42,100 --> 00:45:44,110
0,420 1080,1290 1290,1560 1560,1860 1860,2010
so the basic plan,| so
|所以这个节点层虚拟链层，

1379
00:45:44,110 --> 00:45:47,050
0,780 780,1020 1020,1380 1380,1980 2340,2940
this this node layer virtual

1380
00:45:47,050 --> 00:45:48,310
0,300 300,540 540,840 840,1110 1110,1260
chain layer,| basically built this
|基本上建立了从名称到哈希区文件的映射数据库，

1381
00:45:48,310 --> 00:45:50,920
0,720 930,1170 1170,1650 1650,2160 2160,2610
database of mapping from name

1382
00:45:50,920 --> 00:45:53,380
0,240 240,570 570,810 810,1350 1890,2460
to hash zone file, {}|
|

1383
00:45:53,380 --> 00:45:54,550
0,330 330,420 420,600 600,840 840,1170
{you,know} of course also filters
当然，您还可以过滤掉所有无效的交易

1384
00:45:54,550 --> 00:45:56,560
0,180 180,360 360,1290 1440,1890 1890,2010
out all the transactions that

1385
00:45:56,560 --> 00:45:58,060
0,150 150,750 780,1140 1140,1440 1440,1500
are invalid| or like you
|或者就像你知道的，在第一个之后会有新的x被创造出来。

1386
00:45:58,060 --> 00:45:59,530
0,210 240,630 630,1110 1110,1260 1260,1470
know new x are being

1387
00:45:59,530 --> 00:46:00,940
0,390 390,690 690,780 780,1050 1050,1410
created after the first one.|
|

1388
00:46:01,540 --> 00:46:04,660
0,480 480,690 690,1200 1410,2130 2640,3120
{} And then, {} using
然后，使用区域文件中的散列，

1389
00:46:04,660 --> 00:46:05,650
0,90 90,510 510,630 630,720 720,990
the hash at the zone

1390
00:46:05,650 --> 00:46:07,090
0,510 510,600 600,750 750,1350 1350,1440
file,| you know which we
|你知道我们拿到的是哪一个，

1391
00:46:07,090 --> 00:46:10,270
0,450 780,1170 1170,1380 1380,2130 2160,3180
got,| {} it locates, an
|如果找到，则应用程序可以定位区域文件

1392
00:46:10,270 --> 00:46:13,090
0,570 570,750 750,1410 1590,2280 2400,2820
application could locate the zone

1393
00:46:13,090 --> 00:46:14,290
0,450 450,690 690,750 750,960 960,1200
file| and the zone file
|并且区域文件可以来自任何地方

1394
00:46:14,290 --> 00:46:16,390
0,120 120,390 390,510 510,1170 1350,2100
can come from anywhere| and
|因为我们必须对区域文件进行哈希运算，

1395
00:46:16,390 --> 00:46:17,200
0,210 210,360 360,480 480,540 540,810
because we have to hash

1396
00:46:17,200 --> 00:46:18,520
0,120 120,180 180,450 450,990 1080,1320
with the zone file,| when
|当我们检索声称是区域文件的文件时，

1397
00:46:18,520 --> 00:46:19,630
0,120 120,570 570,690 690,990 990,1110
we retrieve a file that

1398
00:46:19,630 --> 00:46:20,440
0,270 270,360 360,450 450,510 510,810
claims to be the zone

1399
00:46:20,440 --> 00:46:21,610
0,450 450,570 570,720 720,840 840,1170
file,| we can {re-compute -}
|我们可以重新计算散列，

1400
00:46:21,610 --> 00:46:22,810
0,60 60,660 720,870 870,960 960,1200
the hash,| if the hash
|如果散列与我们通过比特币交互获得的散列相同，

1401
00:46:22,810 --> 00:46:24,190
0,120 120,780 780,990 990,1050 1050,1380
is identical to the one

1402
00:46:24,190 --> 00:46:26,260
0,180 180,540 540,930 930,1590 1590,2070
that we got through interactive

1403
00:46:26,260 --> 00:46:27,670
0,120 120,750 870,1110 1110,1200 1200,1410
through Bitcoin,| then we know
|那么我们就可以肯定地知道，这就是与x对应的区域文件。

1404
00:46:27,670 --> 00:46:28,630
0,90 90,450 450,600 600,810 810,960
for sure, {} that is

1405
00:46:28,630 --> 00:46:30,760
0,660 840,1290 1290,1650 1650,1800 1800,2130
the zone file that goes

1406
00:46:30,760 --> 00:46:31,460
0,240 240,630
with x.|
|

1407
00:46:33,370 --> 00:46:34,330
0,270 270,450 450,660 660,780 780,960
So okay, what is that
所以好的，区域文件里的是什么，

1408
00:46:34,330 --> 00:46:37,240
0,480 510,1110 1110,1380 1380,2130 2430,2910
in a zone files,| well
|在区域文件中是针对另一个表的，

1409
00:46:37,240 --> 00:46:39,280
0,690 690,990 990,1410 1410,1680 1680,2040
in zone file is {}

1410
00:46:39,280 --> 00:46:41,230
0,570 570,840 840,1110 1110,1740 1770,1950
for yet another table,| if
|如果需要将名称映射到URI，

1411
00:46:41,230 --> 00:46:43,420
0,120 120,600 630,930 930,1410 1410,2190
you will involve mapping names

1412
00:46:43,540 --> 00:46:45,340
0,540 540,900 900,1260 1290,1560 1560,1800
to {URIs -},| so {for,example}
|例如，您可能有一个区域文件，

1413
00:46:45,340 --> 00:46:46,570
0,60 60,420 420,840 840,1110 1110,1230
you {might -} have a

1414
00:46:46,570 --> 00:46:48,610
0,210 210,570 570,810 810,1440 1590,2040
zone file,| which has like
|它有可能是一款待办事项应用程序，

1415
00:46:48,610 --> 00:46:50,080
0,330 330,480 480,600 600,930 930,1470
maybe for a todo app,|
|

1416
00:46:50,470 --> 00:46:51,790
0,240 240,300 300,660 660,780 780,1320
that's an entry {todo -},|
这是一项待办事项，|

1417
00:46:52,640 --> 00:46:54,740
0,570 570,990 990,1440 1440,1950 1950,2100
and thit points to a
它指向一个URI，

1418
00:46:54,740 --> 00:46:55,880
0,630
URI,|
|

1419
00:46:56,500 --> 00:46:57,760
0,420 420,660 660,930 930,1050 1050,1260
{} we're actually the data
我们的数据实际上是一份待办事项清单。

1420
00:46:57,760 --> 00:46:59,710
0,120 120,660 660,1410 1440,1560 1560,1950
is located for a todo

1421
00:46:59,710 --> 00:47:00,400
0,420
list.|
|

1422
00:47:00,930 --> 00:47:03,030
0,720 1020,1410 1410,1890 1890,2010 2010,2100
{} And there's sort of
有两种类型的区域文件

1423
00:47:03,030 --> 00:47:04,950
0,450 450,1020 1020,1170 1170,1410 1410,1920
two types of zone files|
|

1424
00:47:04,950 --> 00:47:05,850
0,90 90,330 330,450 450,660 660,900
and one is what's called
一个是所谓的是可变的，一个是不变的，

1425
00:47:05,850 --> 00:47:08,700
0,720 720,840 840,1050 1050,1710 2280,2850
{is,mutable} and one {is,immutable},| {the,mutable}
|可变密钥具有URI和公钥，

1426
00:47:08,700 --> 00:47:10,380
0,210 210,450 450,990 990,1260
ones have URI plus

1427
00:47:10,900 --> 00:47:11,980
0,120 120,420 420,750
a public key,|
|

1428
00:47:15,280 --> 00:47:17,230
0,480 480,1050 1080,1470 1470,1890 1890,1950
so, {} and this is
所以，这是公钥，是实际验证的密钥

1429
00:47:17,230 --> 00:47:18,550
0,270 270,600 600,810 810,990 990,1320
public key is the key

1430
00:47:18,550 --> 00:47:21,190
0,120 120,420 420,1230 1500,2220 2220,2640
to actually validate| {} whether
|该文件是否由用户x写入，

1431
00:47:21,520 --> 00:47:23,290
0,840 840,1140 1140,1410 1410,1530 1530,1770
whether the file was written

1432
00:47:23,290 --> 00:47:24,340
0,210 210,270 270,600 600,840 840,1050
by the user x,| so
|所以基本上用户x通过这个区域文件发布他或她自己的公钥，

1433
00:47:24,340 --> 00:47:25,420
0,300 300,390 390,660 660,990 990,1080
basically the user x you

1434
00:47:25,420 --> 00:47:27,400
0,120 120,570 570,1170 1170,1500 1500,1980
know publishes {through,this} zone file,

1435
00:47:27,400 --> 00:47:28,690
0,60 60,360 360,690 690,990 990,1290
{} public key for him

1436
00:47:28,690 --> 00:47:31,180
0,90 90,720 1140,1650 1650,2010 2010,2490
or herself,| and later on,
|稍后，当用户2想要查找用户x时，

1437
00:47:31,300 --> 00:47:33,250
0,360 360,930 960,1350 1350,1740 1740,1950
{} when user two want

1438
00:47:33,250 --> 00:47:34,270
0,60 60,270 270,390 390,630 630,1020
to look up user x,|
|

1439
00:47:34,270 --> 00:47:35,110
0,90 90,240 240,480 480,570 570,840
you know gets the hash
你知道在区域文件中得到散列，

1440
00:47:35,110 --> 00:47:36,910
0,90 90,180 180,480 480,1050 1260,1800
at the zone file,| {the,hash}
|散列查找区域文件，再次检查区域文件，

1441
00:47:36,940 --> 00:47:38,680
0,390 390,660 660,960 960,1410 1440,1740
finds the zone file, double

1442
00:47:38,680 --> 00:47:39,940
0,300 300,420 420,510 510,810 810,1260
checks that the zone file,|
|

1443
00:47:39,940 --> 00:47:41,500
0,90 90,990 1020,1350 1350,1440 1440,1560
you know hash is to
你知道哈希值是正确的，

1444
00:47:41,500 --> 00:47:43,480
0,120 120,300 300,930 960,1410 1410,1980
the right value,| looks inside
|查看区域文件内部，

1445
00:47:43,480 --> 00:47:46,540
0,1290 1380,1770 1770,2310 2340,2820 2820,3060
the zone file,| finds the
|查找您知道的x的公钥

1446
00:47:46,540 --> 00:47:47,470
0,120 120,210 210,330 330,600 600,930
you know the public key

1447
00:47:47,470 --> 00:47:50,620
0,390 660,1260 1320,2040 2040,2310 2310,3150
of x| and the URI
|以及您所知道的待办事项文件的URI，

1448
00:47:50,620 --> 00:47:51,970
0,150 150,270 270,930 960,1050 1050,1350
you know for the todo

1449
00:47:51,970 --> 00:47:54,160
0,630 810,1290 1290,1560 1560,1650 1650,2190
file,| {} usually the URI
|通常是获取实际待办事项文件的URI，

1450
00:47:54,160 --> 00:47:56,110
0,60 60,780 810,1230 1230,1470 1470,1950
to fetch {} the actual

1451
00:47:56,110 --> 00:47:58,120
0,90 90,270 270,930 1080,1470 1470,2010
{todo -} file,| {} check
|用公钥检查撤退文件上的签名，

1452
00:47:58,150 --> 00:47:59,260
0,90 90,180 180,330 330,960 960,1110
you know the signature on

1453
00:47:59,260 --> 00:48:00,310
0,120 120,510 510,840 840,960 960,1050
the retreat file with the

1454
00:48:00,310 --> 00:48:01,870
0,270 270,750 930,1260 1260,1410 1410,1560
public key,| and it all
|一切都被证实了，

1455
00:48:01,870 --> 00:48:03,310
0,240 240,570 570,750 750,1170 1170,1440
checks out,| then basically user
|然后基本上用户知道什么，

1456
00:48:03,310 --> 00:48:04,990
0,420 420,900 900,1470 1470,1560 1560,1680
what to knows,| you know
|你知道我有你知道的用户x区域文件。

1457
00:48:04,990 --> 00:48:06,970
0,330 330,810 810,900 900,1350 1530,1980
I got you know user

1458
00:48:06,970 --> 00:48:09,720
0,510 690,2310 2310,2670
x zone file.|
|

1459
00:48:10,390 --> 00:48:11,050
0,150 150,300 300,390 390,540 540,660
And then it might be
然后它可能也像此区域文件中的其他名称一样，

1460
00:48:11,050 --> 00:48:13,030
0,420 420,570 570,1140 1320,1860 1860,1980
also like other names in

1461
00:48:13,030 --> 00:48:14,590
0,180 180,420 420,720 720,840 840,1560
this zone file,| like whatever
|喜欢任何用户访问推文等，

1462
00:48:14,590 --> 00:48:18,610
0,420 420,900 1020,1620 1620,2340 2970,4020
users to access tweets, etc,|
|

1463
00:48:18,610 --> 00:48:20,170
0,660 660,1050 1170,1350 1350,1440 1440,1560
timeline what you know for
时间表你所知道的每一项申请都可能是一个条目

1464
00:48:20,170 --> 00:48:21,640
0,210 210,810 810,930 930,1350 1350,1470
every application is probably an

1465
00:48:21,640 --> 00:48:23,050
0,480 480,810 810,870 870,1020 1020,1410
entry| and you know probably
|你知道，应用程序可能会达成一致，比如一个名称用于特定的应用程序。

1466
00:48:23,050 --> 00:48:24,850
0,90 90,870 990,1290 1290,1650 1650,1800
the applications sort agree on

1467
00:48:24,850 --> 00:48:25,900
0,240 240,510 510,750 750,840 840,1050
like one name to use

1468
00:48:25,900 --> 00:48:27,220
0,150 150,210 210,570 570,1140
for a particular application.|
|

1469
00:48:29,240 --> 00:48:31,040
0,480 660,930 930,1140 1140,1260 1260,1800
{} So don't we lose
因此，我们不会失去这样的数据不变性保证，

1470
00:48:31,040 --> 00:48:33,440
0,330 330,690 690,1170 1230,1800 1800,2400
the like data immutability guarantees,|
|

1471
00:48:33,440 --> 00:48:34,670
0,360 420,600 600,930 930,1020 1020,1230
where it's possible this data
这些数据可能会被删除，

1472
00:48:34,670 --> 00:48:35,660
0,120 120,210 210,630 630,750 750,990
could be deleted,| and then
|然后你就不会有散列的数据，可能会丢失。

1473
00:48:36,220 --> 00:48:37,120
0,240 240,420 420,540 540,630 630,900
you wouldn't have the hash

1474
00:48:37,120 --> 00:48:38,320
0,90 90,270 270,510 510,630 630,1200
of data, could be lost.|
|

1475
00:48:38,860 --> 00:48:39,700
0,180 180,300 300,480 480,660 660,840
So what do you mean
你说区域文件丢失是什么意思？

1476
00:48:39,700 --> 00:48:41,260
0,240 240,870 870,1110 1110,1410 1410,1560
like the zone file get

1477
00:48:41,260 --> 00:48:42,020
0,450
lost?|
|

1478
00:48:42,580 --> 00:48:44,020
0,300 300,540 570,840 1260,1380 1380,1440
Right, like like with the
对，就像链一样，你不能丢失数据，

1479
00:48:44,020 --> 00:48:45,310
0,330 330,450 450,720 720,900 900,1290
chain, you can't lose data,|
|

1480
00:48:45,340 --> 00:48:46,330
0,210 210,330 330,420 420,810 810,990
because it'll be replicated enough
因为它会被复制到足够多的地方，

1481
00:48:46,330 --> 00:48:47,560
0,330 330,480 480,840 840,1020 1020,1230
places,| but here that's not
|但在这里，这不是如何保证的。

1482
00:48:47,620 --> 00:48:49,600
0,210 210,300 300,660 660,1230 1230,1980
how to guarantee.| {} So,
|因此，结果是区域文件也被广泛复制，

1483
00:48:49,600 --> 00:48:50,620
0,210 210,270 270,570 570,840 840,1020
turns out zone files also

1484
00:48:50,620 --> 00:48:52,870
0,420 420,990 1020,1410 1410,2040 2040,2250
replicated widely,| on basically there's
|基本上，在块堆栈Take[]中有一个过程，复制了每个人的区域文件。

1485
00:48:52,870 --> 00:48:53,740
0,90 90,420 420,480 480,600 600,870
a course in a blockstack

1486
00:48:53,740 --> 00:48:55,360
0,180 180,480 480,690 690,1260 1260,1620
take [] all replicated a

1487
00:48:55,390 --> 00:48:56,840
0,330 330,570 570,690 690,1230
zone files of everybody.|
|

1488
00:48:57,010 --> 00:48:59,770
0,660 660,1200 1200,1470 1470,1920 1950,2760
{} And {} in zone
在区域文件系统中，

1489
00:48:59,770 --> 00:49:01,300
0,420 420,810 810,1110 1110,1320 1320,1530
{file,system},| reasonable small like for
|合理的小，例如对于千字节或该顺序的东西，

1490
00:49:01,300 --> 00:49:03,070
0,780 870,1410 1410,1470 1470,1710 1710,1770
{} kilobyte or something in

1491
00:49:03,070 --> 00:49:04,300
0,150 150,630 840,1020 1020,1110 1110,1230
that order,| and so they
|所以它们可以被复制到任何地方，好的，

1492
00:49:04,300 --> 00:49:06,130
0,90 90,180 180,600 600,1050 1320,1830
can be replicated everywhere, okay,|
|

1493
00:49:06,460 --> 00:49:09,160
0,630 660,1050 1050,1500 1530,1980 1980,2700
then for the todo list,
然后对于待办事项列表、待办事项文件URI、

1494
00:49:09,520 --> 00:49:11,860
0,360 360,780 780,1350 1560,2070 2070,2340
todo file URI,| {} the
|基本思想是，您可以将相同的数据存储在多个提供程序中，

1495
00:49:11,860 --> 00:49:13,360
0,330 330,810 810,900 900,1140 1140,1500
basic idea is that you

1496
00:49:13,360 --> 00:49:15,520
0,300 300,870 870,1260 1260,1830 1830,2160
might store the same data

1497
00:49:15,520 --> 00:49:17,290
0,0 0,690 690,1110 1110,1620 1620,1770
{} at multiple providers,| for
|例如，您可能希望将其复制到S3，

1498
00:49:17,290 --> 00:49:18,280
0,450 450,540 540,750 750,930 930,990
example you might want to

1499
00:49:18,280 --> 00:49:20,380
0,510 600,1260 1260,1380 1380,1560 1560,2100
have replicated it {S3 -},|
|

1500
00:49:20,710 --> 00:49:22,240
0,330 330,690 690,1050 1050,1260 1260,1530
and maybe you also stick
也许你也会把它放在谷歌硬盘上，

1501
00:49:22,240 --> 00:49:23,700
0,90 90,150 150,420 420,870
it in Google drive,|
|

1502
00:49:25,060 --> 00:49:28,270
0,600 870,1620 1740,2340 2340,2850 2850,3210
and {} one reason that
而实际上拥有存储服务器的区块堆栈的一个原因是，

1503
00:49:28,270 --> 00:49:30,160
0,210 210,540 540,720 720,1230 1230,1890
actually blockstack that has storage

1504
00:49:30,310 --> 00:49:32,230
0,540 540,900 990,1350 1350,1590 1590,1920
servers is,| not because actually
|不是因为它们实际上存储数据，

1505
00:49:32,230 --> 00:49:33,760
0,150 150,390 390,930 960,1170 1170,1530
they store data,| but basically
|但基本上为所有这些不同的存储提供商提供统一的API。

1506
00:49:33,760 --> 00:49:35,650
0,450 450,1110 1110,1590 1590,1740 1740,1890
providing uniform API to all

1507
00:49:35,650 --> 00:49:37,320
0,150 150,450 450,780 780,1410
these different storage providers.|
|

1508
00:49:43,890 --> 00:49:44,800
0,180 180,600
{Okay,so} there.|
好了，就是这样。|

1509
00:49:46,010 --> 00:49:46,980
0,150 150,240 240,360 360,720
Does that make sense?|
这说得通吗？|

1510
00:49:50,330 --> 00:49:52,670
0,330 330,480 480,870 870,1230 1320,2340
Okay so there's a {}
好的，有两种方式的区域文件，

1511
00:49:52,670 --> 00:49:54,380
0,270 270,540 540,630 630,930 930,1710
zone files in two ways,|
|

1512
00:49:54,380 --> 00:49:55,910
0,60 60,420 420,990 1140,1410 1410,1530
{} there's another which are
还有一种称为不可变存储

1513
00:49:55,910 --> 00:49:57,680
0,270 270,720 720,1200 1200,1530 1530,1770
called immutable storage| and that
|它实际上包含URI、名称、URI、公钥和文件数据的散列。

1514
00:49:57,680 --> 00:49:59,920
0,270 270,900 900,1200 1200,1950
actually contains the URI,

1515
00:50:00,860 --> 00:50:02,140
0,960
name,

1516
00:50:03,170 --> 00:50:05,760
0,300 300,1020 1290,2190
{URI -}, {}

1517
00:50:06,260 --> 00:50:07,660
0,960
{public,key},

1518
00:50:10,280 --> 00:50:10,940
0,150 150,210 210,450 450,570 570,660
and the hash of the

1519
00:50:10,940 --> 00:50:11,840
0,450
data

1520
00:50:13,820 --> 00:50:15,080
0,240 240,780
{of,the} file.|
|

1521
00:50:16,680 --> 00:50:18,390
0,240 240,420 420,510 510,840 840,1710
So you can basically verify,|
所以你基本上可以核实，|

1522
00:50:18,420 --> 00:50:19,380
0,90 90,240 240,420 420,600 600,960
you know, is this indeed
你知道，这真的是文件的最新版本吗，

1523
00:50:19,380 --> 00:50:21,240
0,90 90,390 390,750 750,900 900,1860
the latest version of the

1524
00:50:21,330 --> 00:50:23,910
0,600 960,1710 1710,1830 1830,2010 2010,2580
file,| because in this scheme,
|因为在这个方案中，你可以更新，

1525
00:50:24,240 --> 00:50:25,320
0,210 210,360 360,480 480,990 990,1080
you get to update,| you
|你知道x可以更新文件，

1526
00:50:25,320 --> 00:50:26,460
0,300 300,570 570,720 720,1050 1050,1140
know x can update the

1527
00:50:26,460 --> 00:50:27,480
0,300 300,450 450,570 570,900 900,1020
file,| but it's hard to
|但很难说，

1528
00:50:27,480 --> 00:50:29,010
0,510 630,960 960,1200 1200,1290 1290,1530
tell,| {} for {} user
|对于用户2来说，无论这实际上是最新版本，

1529
00:50:29,010 --> 00:50:30,270
0,210 210,750 750,930 930,1020 1020,1260
two whether that is actually

1530
00:50:30,270 --> 00:50:32,040
0,90 90,330 330,900 1230,1530 1530,1770
the latest version,| the paper
|这篇论文提到，您可能想要在其中添加版本号，

1531
00:50:32,040 --> 00:50:33,630
0,420 420,600 600,900 900,1200 1230,1590
mentions that there you probably

1532
00:50:33,630 --> 00:50:34,620
0,180 180,300 300,600 600,870 870,990
want to version numbers in

1533
00:50:34,620 --> 00:50:36,120
0,240 510,1110 1110,1170 1170,1290 1290,1500
it,| but if you really
|但如果你真的想保证是某个名字的最新版本，

1534
00:50:36,120 --> 00:50:36,990
0,150 150,210 210,600 600,690 690,870
want to guarantee to be

1535
00:50:36,990 --> 00:50:37,950
0,180 180,330 330,390 390,840 840,960
sort of {} {latest,version} for

1536
00:50:37,950 --> 00:50:40,050
0,60 60,390 390,870 1080,1650 1650,2100
a particular name,| {} if
|如果您使用的是不可变存储，

1537
00:50:40,050 --> 00:50:41,370
0,150 150,360 360,750 750,1230 1230,1320
you're using immutable storage,| you
|您知道，不变的存储包含文件的散列

1538
00:50:41,370 --> 00:50:42,810
0,180 180,630 810,990 990,1140 1140,1440
know then, {} the immutable

1539
00:50:42,810 --> 00:50:43,860
0,300 300,630 630,690 690,960 960,1050
storage contains the hash of

1540
00:50:43,860 --> 00:50:46,350
0,90 90,630 930,1560 1560,1950 1950,2490
the file| and that uniquely
|并且其唯一地标识该特定文件的特定版本。

1541
00:50:46,350 --> 00:50:48,000
0,540 540,570 570,990 990,1500 1500,1650
identifies a particular version of

1542
00:50:48,000 --> 00:50:49,060
0,150 150,600 630,990
that particular file.|
|

1543
00:50:49,640 --> 00:50:50,900
0,180 180,420 420,990 990,1170 1170,1260
That does mean, like if
这确实意味着，如果你更新这份记录，

1544
00:50:50,900 --> 00:50:53,520
0,180 180,840 870,1590 1620,2220
you update this record,|
|

1545
00:50:54,010 --> 00:50:55,690
0,570 570,570 570,1290 1290,1440 1440,1680
then, {} that really means
然后，这实际上意味着您要更新区域文件，

1546
00:50:55,690 --> 00:50:57,100
0,180 180,510 510,600 600,900 900,1410
you update the zone file,|
|

1547
00:50:57,370 --> 00:50:58,270
0,210 210,390 390,660 660,750 750,900
so that means you have
这意味着你必须在比特币链中重新发布或重新创建一个日志条目，

1548
00:50:58,270 --> 00:51:00,220
0,90 90,930 960,1380 1380,1530 1530,1950
to republish or {re-create -}

1549
00:51:00,220 --> 00:51:01,990
0,330 330,720 720,1200 1230,1530 1530,1770
a log entry in the

1550
00:51:01,990 --> 00:51:04,150
0,390 390,990 1080,1950 1950,2040 2040,2160
Bitcoin chain,| mapping you know
|将您知道的x映射到一个新的a哈希哈希区文件。

1551
00:51:04,150 --> 00:51:05,680
0,300 300,570 570,690 690,1200 1200,1530
x to a new a

1552
00:51:05,680 --> 00:51:07,720
0,630 720,1020 1020,1290 1290,1830
hash {} hash {zone,file}.|
|

1553
00:51:11,420 --> 00:51:12,170
0,180 180,300 300,510 510,600 600,750
Okay, so this is the
好的，这就是这个系统的总体情况，

1554
00:51:12,170 --> 00:51:15,380
0,420 420,870 990,1680 1680,1920 1920,3210
overall picture {} for {}

1555
00:51:15,830 --> 00:51:17,480
0,180 180,270 270,750 1020,1530 1530,1650
for the system,| and as
|正如你所看到的，你知道一些特别的事情，就像你过去经常做的那样，

1556
00:51:17,480 --> 00:51:18,620
0,90 90,180 180,510 510,570 570,1140
you can see you know

1557
00:51:18,650 --> 00:51:20,360
0,390 420,990 990,1200 1200,1410 1410,1710
{} particular like you used

1558
00:51:20,360 --> 00:51:22,220
0,60 60,270 270,480 480,870 1200,1860
{todo -} list site, {}|
|

1559
00:51:23,070 --> 00:51:24,840
0,270 270,390 390,1350 1350,1620 1620,1770
{you,know} the user x can
您知道用户x实际上可以更新它的待办事项列表

1560
00:51:24,840 --> 00:51:28,320
0,510 510,1230 1260,1620 1620,2040 2040,3480
actually update {} it's {}

1561
00:51:28,320 --> 00:51:29,880
0,330 330,900 900,1020 1020,1140 1140,1560
is {} {todo -} list|
|

1562
00:51:30,150 --> 00:51:31,890
0,660 660,1020 1020,1290 1290,1380 1380,1740
without actually having to publish
实际上不必在比特币链中发布新的记录，

1563
00:51:31,890 --> 00:51:34,590
0,90 90,810 870,1530 1530,1860 1860,2700
a new record in the

1564
00:51:34,620 --> 00:51:36,210
0,150 150,210 210,570 570,960 1440,1590
in the Bitcoin chain,| in
|事实上，比特币链条中唯一真正需要创造的东西就是你知道x的名字，

1565
00:51:36,210 --> 00:51:37,440
0,480 480,540 540,780 780,960 960,1230
fact the only thing that

1566
00:51:37,440 --> 00:51:38,460
0,210 210,420 420,510 510,660 660,1020
really has to be created

1567
00:51:38,460 --> 00:51:39,600
0,60 60,150 150,450 450,780 780,1140
in the Bitcoin chain is

1568
00:51:39,750 --> 00:51:41,340
0,570 570,630 630,750 750,1110 1110,1590
just you know x's name,|
|

1569
00:51:41,610 --> 00:51:42,930
0,420 420,870 870,1050 1050,1110 1110,1320
{} and x of course
当然，x可能还有很多其他的名字，

1570
00:51:42,930 --> 00:51:43,980
0,210 210,360 360,570 570,720 720,1050
might have many other names,|
|

1571
00:51:43,980 --> 00:51:44,610
0,150 150,240 240,480 480,570 570,630
that are sitting in the
它们位于区域文件中，

1572
00:51:44,610 --> 00:51:47,580
0,270 270,840 1020,1710 1710,2490 2490,2970
zone files,| {} in {},
|在，但是你知道，这个系统并不依赖于区块链上的每个操作，

1573
00:51:47,580 --> 00:51:49,170
0,390 390,690 690,1110 1200,1350 1350,1590
and {} but you know

1574
00:51:49,170 --> 00:51:50,740
0,450 630,1080
the the,

1575
00:51:51,910 --> 00:51:53,890
0,330 330,600 600,900 900,1440 1440,1980
this system doesn't rely on

1576
00:51:53,920 --> 00:51:55,420
0,330 330,480 480,690 690,1230 1230,1500
{} for every operation on

1577
00:51:55,420 --> 00:51:57,220
0,480 570,840 840,900 900,1500
the, on the blockchain,|
|

1578
00:51:57,750 --> 00:51:59,970
0,510 510,720 720,1530 1590,1890 1890,2220
which gets around gets around
它绕过了许多这样的问题，如低速率、低带宽、

1579
00:51:59,970 --> 00:52:00,870
0,30 30,210 210,270 270,420 420,900
a lot of these problems

1580
00:52:00,870 --> 00:52:03,030
0,210 390,900 900,1560 1620,1860 1860,2160
of slow rates, low {bandwidth

1581
00:52:03,030 --> 00:52:04,830
0,480 780,1200 1200,1440 1440,1530 1530,1800
-},| {} and the limits
|以及对交易记录中实际出现的数据的限制，

1582
00:52:04,830 --> 00:52:05,740
0,120 120,570
of that,

1583
00:52:06,500 --> 00:52:08,090
0,240 240,540 540,810 810,870 870,1590
and limits on the on

1584
00:52:08,090 --> 00:52:09,320
0,90 90,330 330,540 540,780 780,1230
the data that actually appear

1585
00:52:09,320 --> 00:52:10,490
0,240 240,330 330,720 720,990 990,1170
in a transaction record,| because
|因为唯一的数据真的必须出现，

1586
00:52:10,490 --> 00:52:11,360
0,90 90,270 270,480 480,690 690,870
the only data really has

1587
00:52:11,360 --> 00:52:13,070
0,60 60,570 630,930 930,1320 1320,1710
to appear,| this instruction record
|此指令记录是此名称阻止区域文件的散列。

1588
00:52:13,310 --> 00:52:14,720
0,120 120,300 300,900 930,1320 1320,1410
is this name blocks the

1589
00:52:14,720 --> 00:52:15,770
0,270 270,390 390,450 450,690 690,1050
hash of the zone file.|
|

1590
00:52:19,990 --> 00:52:21,370
0,450 480,750 750,960 960,1170 1170,1380
Sorry, {} how can we
对不起，如果你只有散列，我们怎么找不到文件？

1591
00:52:21,370 --> 00:52:22,540
0,360 360,540 540,690 690,1020 1020,1170
find there's no file, if

1592
00:52:22,540 --> 00:52:23,830
0,120 120,270 270,480 480,600 600,1290
you only have the hash.|
|

1593
00:52:24,310 --> 00:52:25,150
0,240 240,360 360,390 390,600 600,840
{} It's a very good
这是一个非常好的问题，

1594
00:52:25,180 --> 00:52:26,770
0,630 660,780 780,930 930,1110 1110,1590
question,| we don't really care,
|我们并不真的在乎它来自哪里，

1595
00:52:27,220 --> 00:52:28,600
0,540 540,840 840,900 900,1110 1110,1380
{} where it comes from,|
|

1596
00:52:28,600 --> 00:52:29,650
0,210 210,510 540,840 840,930 930,1050
and so you know they
所以你知道他们把这叫做路由层，

1597
00:52:29,650 --> 00:52:31,060
0,210 210,360 360,480 480,780 780,1410
call this the routing layer,|
|

1598
00:52:31,690 --> 00:52:33,040
0,660 660,780 780,960 960,1050 1050,1350
basically you tell the layer
基本上，你告诉层级作家，

1599
00:52:33,040 --> 00:52:34,540
0,420 450,870 900,1050 1050,1320 1320,1500
writer,| hey I'm looking for
|嘿，我在找一个具有以下散列的文件，

1600
00:52:34,540 --> 00:52:35,740
0,90 90,660 750,930 930,1140 1140,1200
a file that has the

1601
00:52:35,740 --> 00:52:36,800
0,300 300,930
following hash,|
|

1602
00:52:38,000 --> 00:52:40,130
0,510 510,840 840,1260 1290,1620 1620,2130
and then the writing layer
然后写字层必须制作该文件

1603
00:52:40,520 --> 00:52:41,540
0,270 270,480 480,570 570,870 870,1020
{} has to produce that

1604
00:52:41,540 --> 00:52:42,830
0,450 450,780 780,900 900,1020 1020,1290
file| and you can check
|您可以通过重新计算散列来检查您是否获得了正确的文件

1605
00:52:42,830 --> 00:52:43,520
0,180 180,270 270,390 390,480 480,690
whether you got the right

1606
00:52:43,520 --> 00:52:45,050
0,570 600,930 930,1080 1080,1440 1440,1530
file by {re-computing -} the

1607
00:52:45,050 --> 00:52:46,310
0,330 330,450 450,600 600,870 870,1260
hash| and see you match
|看你能不能找到你要的那个。

1608
00:52:46,310 --> 00:52:47,300
0,60 60,330 330,450 450,630 630,990
the one that you're asking

1609
00:52:47,300 --> 00:52:47,840
0,300
for.|
|

1610
00:52:58,400 --> 00:52:59,690
0,210 210,360 360,720 720,930 930,1290
Any other questions about this?|
对此还有其他问题吗？|

1611
00:53:05,210 --> 00:53:07,250
0,270 270,600 600,990 990,1080 1080,2040
So sorry, just to clarify
很抱歉，只是为了澄清此文件存储或区域文件中的操作

1612
00:53:07,310 --> 00:53:10,280
0,1320 1320,1680 1680,2010 2040,2460 2460,2970
operations within this file storage

1613
00:53:10,280 --> 00:53:11,510
0,180 180,360 360,690 690,1110 1110,1230
or the zone files| is
|但仍然受到底层区块链的限制，对吗？

1614
00:53:11,510 --> 00:53:12,890
0,270 270,660 660,810 810,930 930,1380
still limited by the underlying

1615
00:53:12,890 --> 00:53:14,580
0,630 630,930 960,1440
blockchain though, right?|
|

1616
00:53:14,970 --> 00:53:17,610
0,630 630,1290 1590,2040 2040,2100 2100,2640
{ -} Yes or no,
是还是不是，你在想什么？

1617
00:53:17,610 --> 00:53:18,840
0,480 480,660 660,720 720,840 840,1230
{} what are you thinking?|
|

1618
00:53:21,860 --> 00:53:24,620
0,360 360,600 600,1110 1110,1560 1560,2760
Or just like because modifications
或者只是因为对文件的修改或更改将需要新的哈希

1619
00:53:24,620 --> 00:53:25,910
0,180 180,720 720,870 870,1170 1170,1290
or changes to like the

1620
00:53:25,910 --> 00:53:27,260
0,450 450,540 540,810 810,1170 1170,1350
file will need a new

1621
00:53:27,260 --> 00:53:28,700
0,390 390,570 570,930 930,1020 1020,1440
hash| and therefore a new
|并且因此在区块链内形成新的日志条目，

1622
00:53:28,730 --> 00:53:30,590
0,540 540,870 870,1110 1110,1170 1170,1860
log entry within the blockchain,|
|

1623
00:53:30,710 --> 00:53:32,090
0,270 270,420 420,690 690,930 930,1380
so you still have to
所以你仍然需要等待报价被接受，

1624
00:53:32,150 --> 00:53:33,650
0,450 450,600 600,990 1020,1170 1170,1500
wait for that to be

1625
00:53:33,680 --> 00:53:35,210
0,240 240,510 510,1200 1230,1410 1410,1530
quote unquote accepted,| which is
|大概是一个小时，对吧。

1626
00:53:35,210 --> 00:53:36,420
0,120 120,240 240,660 660,1020
like an hour, right.|
|

1627
00:53:36,760 --> 00:53:38,920
0,420 450,1140 1140,1620 1620,1980 1980,2160
Yeah, although, absolutely true,| so
是的，尽管，绝对是真的，|因此，当您对区域文件进行更改时，

1628
00:53:38,920 --> 00:53:39,850
0,210 210,390 390,540 540,630 630,930
when you make a change

1629
00:53:39,850 --> 00:53:42,280
0,90 90,150 150,420 420,990 1020,2430
to the zone file,| that
|它必须通过TXN，

1630
00:53:42,280 --> 00:53:43,360
0,180 180,270 270,480 480,780 780,1080
has to run through the

1631
00:53:43,360 --> 00:53:45,310
0,300 300,630 900,1110 1110,1590 1590,1950
{txn -},| for example updating
|例如更新待办事项列表，

1632
00:53:45,310 --> 00:53:47,470
0,420 420,870 1140,1590 1590,1890 1890,2160
todo list,| {} wouldn't have
|不需要比特币交易，

1633
00:53:47,470 --> 00:53:49,930
0,480 480,1140 1140,1620 1650,1980 1980,2460
to require a Bitcoin transaction,|
|

1634
00:53:53,550 --> 00:53:54,750
0,330 330,450 450,600 600,840 840,1200
{you,don't - -} really update
您实际上根本没有更新区域文件，

1635
00:53:54,750 --> 00:53:55,770
0,60 60,330 330,600 600,690 690,1020
the zone file at all,|
|

1636
00:53:55,800 --> 00:53:57,390
0,120 120,270 270,540 540,990 1140,1590
you know you're just updating
您知道您只是在更新待办事项列表文件

1637
00:53:57,390 --> 00:53:58,980
0,420 420,600 600,1080 1080,1500 1500,1590
todo list file| and the
|而区域文件只包含要执行的操作的名称

1638
00:53:58,980 --> 00:54:00,120
0,240 240,510 510,690 690,1050 1050,1140
zone file only contains the

1639
00:54:00,120 --> 00:54:02,100
0,480 480,630 630,1050 1290,1710 1710,1980
name to do| and {URI
|和URI加上公钥，

1640
00:54:02,100 --> 00:54:03,270
0,420 450,660 660,720 720,960 960,1170
-} plus the public key,|
|

1641
00:54:03,270 --> 00:54:04,260
0,150 150,240 240,450 450,780 780,990
but you're not updating any
但你没有更新其中的任何一条。

1642
00:54:04,260 --> 00:54:04,940
0,510
{of,those}.|
|

1643
00:54:08,290 --> 00:54:10,360
0,330 330,630 630,960 1020,1590 1890,2070
I see, but doesn't don't
我明白了，但是我们不是也存储文件的散列吗，

1644
00:54:10,360 --> 00:54:11,560
0,120 120,510 510,750 750,870 870,1200
we store also the hash

1645
00:54:11,560 --> 00:54:12,640
0,120 120,240 240,660 690,930 930,1080
of the file,| so if
|所以如果我们改变内容。

1646
00:54:12,640 --> 00:54:14,230
0,90 90,450 450,540 540,1230 1350,1590
we change the content.| That's
|这只是两个案例，

1647
00:54:14,230 --> 00:54:15,730
0,600 600,810 810,900 900,1140 1140,1500
only there are two cases,|
|

1648
00:54:15,730 --> 00:54:17,680
0,450 600,960 960,1110 1110,1530 1530,1950
for there's a mutable storage
因为有可变的存储和不变的存储。

1649
00:54:17,680 --> 00:54:19,300
0,240 240,840 840,1440
and immutable storage.|
|

1650
00:54:19,900 --> 00:54:23,080
0,720 720,1200 1200,1620 1620,2280 2310,3180
And, {} what they propose
而且，他们提出的是，像存储一样的不变存储，你不更新，

1651
00:54:23,080 --> 00:54:24,490
0,120 120,330 330,570 570,1080 1080,1410
is that were immutable storage

1652
00:54:24,490 --> 00:54:25,810
0,180 180,450 450,600 600,780 780,1320
like storage, you don't update,|
|

1653
00:54:25,810 --> 00:54:26,560
0,180 180,300 300,480 480,690 690,750
you can actually stick the
你实际上可以把文件的散列放在那里，

1654
00:54:26,560 --> 00:54:27,340
0,210 210,300 300,390 390,660 660,780
hash of the file in

1655
00:54:27,340 --> 00:54:29,350
0,330 330,1170 1170,1290 1290,1650 1650,2010
there,| but for mutable storage,
|但对于可变存储，您知道这将会看到大量写入，

1656
00:54:29,350 --> 00:54:29,980
0,90 90,180 180,420 420,570 570,630
you know that's going to

1657
00:54:29,980 --> 00:54:31,450
0,270 270,330 330,510 510,750 750,1470
see a lot of writes,|
|

1658
00:54:31,540 --> 00:54:32,760
0,330 330,570 570,660 660,990
you shouldn't do that,
你不应该那样做，你应该用这把钥匙。

1659
00:54:32,930 --> 00:54:34,070
0,240 240,420 420,570 570,810 810,1140
you should use this key.|
|

1660
00:54:36,860 --> 00:54:38,150
0,210 210,570 570,720 720,1020 1050,1290
I see, and then how
我明白了，那么如何使用可变存储来验证您正在获取正确的数据呢？

1661
00:54:38,150 --> 00:54:39,440
0,90 90,210 210,690 690,780 780,1290
is it possible to validate

1662
00:54:39,440 --> 00:54:40,790
0,180 180,600 600,1080 1080,1230 1230,1350
with mutable storage that you're

1663
00:54:40,790 --> 00:54:41,990
0,300 300,390 390,570 570,810 810,1200
getting the right data, then.|
|

1664
00:54:42,200 --> 00:54:43,760
0,270 270,450 450,600 600,1110 1110,1560
Yeah, so there's actually a
是的，所以实际上有一个非常好的问题，

1665
00:54:43,760 --> 00:54:45,620
0,270 270,390 390,780 780,1410 1440,1860
very good question,| {} well,
|好，你可以验证你是否真的得到了，是否真的是由x产生的，

1666
00:54:46,070 --> 00:54:47,180
0,180 180,270 270,660 660,900 900,1110
you can validate whether you

1667
00:54:47,180 --> 00:54:48,320
0,270 270,600 600,780 780,1050 1050,1140
actually obtain and actually was

1668
00:54:48,320 --> 00:54:49,820
0,360 360,510 510,990 1020,1380 1380,1500
produced by x,| because you
|因为你必须拔出x的钥匙

1669
00:54:49,820 --> 00:54:50,450
0,120 120,180 180,330 330,420 420,630
have to pull the key

1670
00:54:50,450 --> 00:54:51,350
0,210 210,390 390,570 570,750 750,900
for x| and you can
|您可以验证TODO文件上的签名是否确实，

1671
00:54:51,350 --> 00:54:53,150
0,510 510,840 840,1110 1110,1200 1200,1800
verify whether actually the signature

1672
00:54:53,150 --> 00:54:55,130
0,180 180,360 360,660 660,1170 1290,1980
on the todo file,| indeed
|确实用x的公钥进行了验证，

1673
00:54:55,130 --> 00:54:56,780
0,270 270,510 510,690 690,1320 1350,1650
checks out with the public

1674
00:54:56,780 --> 00:54:58,190
0,600 930,1080 1080,1140 1140,1200 1200,1410
{key,of,x},| so you at least
|所以你至少知道是x写的，对吧，

1675
00:54:58,190 --> 00:54:59,210
0,180 180,450 450,570 570,720 720,1020
know that x has written

1676
00:54:59,210 --> 00:54:59,580
0,240
it,

1677
00:54:59,980 --> 00:55:01,210
0,390 420,570 570,720 720,930 930,1230
right,| you may not know
|您可能不知道这个最新版本

1678
00:55:01,210 --> 00:55:03,310
0,210 210,510 510,810 810,1200 1200,2100
this most recent version| and
|所以报纸上会详细地谈到这些，

1679
00:55:03,310 --> 00:55:05,380
0,120 120,210 210,690 690,1710 1770,2070
so the papers are going

1680
00:55:05,380 --> 00:55:06,070
0,60 60,210 210,390 390,540 540,690
to talk about these are

1681
00:55:06,070 --> 00:55:06,880
0,60 60,240 240,300 300,720 720,810
you know in detail,| the
|在基本系统中，我们可能必须在其中插入版本号

1682
00:55:06,880 --> 00:55:08,080
0,240 240,570 570,750 750,1050 1050,1200
basic system, we probably have

1683
00:55:08,080 --> 00:55:09,130
0,90 90,300 300,570 570,900 900,1050
to stick version numbers in

1684
00:55:09,130 --> 00:55:10,540
0,390 390,750 960,1110 1110,1260 1260,1410
it| and so at least
|因此，至少您可以检测到一点回滚[中断]，

1685
00:55:10,540 --> 00:55:12,310
0,60 60,270 270,720 750,1110 1110,1770
you can {} detect rollback

1686
00:55:12,520 --> 00:55:14,560
0,750 780,1260 1260,1620 1620,1950 1950,2040
a little [break],| actually I
|其实我也不知道该怎么做，

1687
00:55:14,560 --> 00:55:15,580
0,90 90,150 150,330 330,660 660,1020
don't know how to {}

1688
00:55:15,640 --> 00:55:16,900
0,180 180,300 300,720 720,1050
how to actually {},|
|

1689
00:55:18,880 --> 00:55:19,690
0,120 120,300 300,480 480,540 540,810
you can't really be sure
你不能确定你真的得到了最新的版本。

1690
00:55:19,690 --> 00:55:20,320
0,90 90,210 210,390 390,540 540,630
that you actually got the

1691
00:55:20,320 --> 00:55:21,180
0,240 240,540
latest version.|
|

1692
00:55:21,990 --> 00:55:23,820
0,210 210,360 360,660 660,930 930,1830
But to where the modifications
而是对可变存储的修改进入的位置。

1693
00:55:23,820 --> 00:55:25,230
0,180 180,240 240,660 660,1110 1110,1410
to a mutable storage coming

1694
00:55:25,230 --> 00:55:26,020
0,480
into.|
|

1695
00:55:26,700 --> 00:55:27,840
0,360 360,600 600,660 660,840 840,1140
{} Your {todo -} file
你的待办事项文件在这里，就像这里，就像待办事项文件一样，

1696
00:55:27,840 --> 00:55:29,670
0,210 210,600 630,840 840,1500 1560,1830
is here, like in here,

1697
00:55:29,670 --> 00:55:31,280
0,150 150,360 360,900
like todo file,|
|

1698
00:55:32,020 --> 00:55:33,700
0,660 660,870 870,1020 1020,1080 1080,1680
and, {} if an application
而且，如果应用程序写入待办事项列表应用程序，想要更新待办事项文件，

1699
00:55:33,700 --> 00:55:35,200
0,210 210,480 480,750 750,1320 1320,1500
write todo list application, want

1700
00:55:35,200 --> 00:55:36,340
0,90 90,450 450,540 540,780 780,1140
to update {todo -} file,|
|

1701
00:55:36,340 --> 00:55:37,030
0,60 60,270 270,420 420,600 600,690
{} just goes ahead and
只管去做就行了。

1702
00:55:37,030 --> 00:55:37,720
0,180 180,330
does it.|
|

1703
00:55:38,020 --> 00:55:40,390
0,1050 1050,1590 1590,1890 1890,2040 2040,2370
And, {} and then signs
然后使用公钥对其进行签名

1704
00:55:40,390 --> 00:55:42,010
0,300 330,960 960,1020 1020,1290 1290,1620
it using the public key|
|

1705
00:55:42,010 --> 00:55:43,690
0,180 180,480 480,600 600,1110 1110,1680
and sticks it in {}
并将其插入，并坚持给定的URI。

1706
00:55:43,690 --> 00:55:44,640
0,630
the,

1707
00:55:44,960 --> 00:55:45,940
0,660
{}

1708
00:55:46,460 --> 00:55:48,290
0,450 450,750 750,1170 1170,1680 1680,1830
and sticks in for {}

1709
00:55:48,290 --> 00:55:49,580
0,420 420,540 540,720 720,960
{the,given} {URI - -}.|
|

1710
00:55:50,400 --> 00:55:51,150
0,150 150,270 270,420 420,540 540,750
And would that be done
并且这是否也通过路由层来完成，

1711
00:55:51,150 --> 00:55:53,580
0,240 240,750 990,1740 1800,2280 2280,2430
through the routing layer as

1712
00:55:53,580 --> 00:55:54,780
0,270 270,450 450,660 720,1020 1020,1200
well,| because you want to
|因为你想找出储藏室的什么地方。

1713
00:55:54,870 --> 00:55:56,880
0,420 420,990 1050,1200 1200,1290 1290,2010
find where in the storage.|
|

1714
00:55:57,120 --> 00:55:58,290
0,210 210,420 420,660 660,960 960,1170
Yeah, so user two will
是的，所以用户2将正确检索访问分区文件，

1715
00:55:58,290 --> 00:56:00,750
0,720 750,1320 1320,1800 1800,2070 2070,2460
retrieve {} access zone file

1716
00:56:00,750 --> 00:56:01,340
0,360
right,|
|

1717
00:56:01,680 --> 00:56:03,030
0,510 510,750 750,840 840,1050 1050,1350
and once it {has,access -}
一旦它在节点中有访问区文件，

1718
00:56:03,030 --> 00:56:04,860
0,210 210,690 690,840 840,1230 1230,1830
zone file in node,| where
|文件、待办事项文件所在的位置，

1719
00:56:04,890 --> 00:56:06,960
0,780 900,1260 1260,1620 1620,1710 1710,2070
{} the file, the todo

1720
00:56:06,960 --> 00:56:08,010
0,300 300,480 480,780 780,960 960,1050
file is,| because there's the
|因为URI位于他自己的文件中。

1721
00:56:08,010 --> 00:56:09,510
0,690 750,1050 1050,1170 1170,1320 1320,1500
URI sits in his own

1722
00:56:09,510 --> 00:56:10,580
0,390
file.|
|

1723
00:56:12,610 --> 00:56:14,560
0,270 270,870 1170,1440 1440,1590 1590,1950
So again, they could retrieve
所以再一次，他们可以取回它并检查签名。

1724
00:56:14,560 --> 00:56:16,630
0,300 300,810 1140,1800 1800,2010 2010,2070
it and a check the

1725
00:56:16,630 --> 00:56:17,760
0,540
signature.|
|

1726
00:56:18,220 --> 00:56:19,210
0,360 360,480 480,630 630,870 870,990
About the {URI - -}
关于URI是否存在，它仅当区域文件中的每个名称都有URI时，或者。

1727
00:56:19,210 --> 00:56:20,650
0,270 270,630 900,1140 1140,1320 1320,1440
are there, it is it

1728
00:56:20,650 --> 00:56:22,240
0,210 210,450 450,600 600,750 750,1590
only when {URI,per - -}

1729
00:56:23,050 --> 00:56:24,640
0,180 180,930 930,1170 1170,1260 1260,1590
{} name in the zone

1730
00:56:24,640 --> 00:56:27,520
0,510 540,1470 2160,2190 2190,2430 2430,2880
file, or.| I don't know,
|我不知道，不清楚它到底是怎么工作的，

1731
00:56:27,640 --> 00:56:29,980
0,1080 1080,1770 1770,2100 2100,2220 2220,2340
{} unclear exactly how it

1732
00:56:29,980 --> 00:56:32,590
0,510 570,1350 1710,2010 2010,2280 2280,2610
works,| I'm sorry I'm not
|对不起，我不是你知道的，我需要检查一下源代码

1733
00:56:32,590 --> 00:56:33,340
0,90 90,240 240,330 330,690 690,750
you know, I need to

1734
00:56:33,340 --> 00:56:34,210
0,210 210,330 330,390 390,600 600,870
check out the source code|
|

1735
00:56:34,210 --> 00:56:36,040
0,300 300,660 660,780 780,1110 1200,1830
and look at the specific
并查看特定格式的区域文件。

1736
00:56:36,040 --> 00:56:37,620
0,480 480,930 930,1440
format zone files.|
|

1737
00:56:42,440 --> 00:56:44,570
0,420 510,1140 1140,1440 1440,2010 2010,2130
{} Since we're publishing the
由于我们将公钥与区域文件中的所有其余数据一起发布，

1738
00:56:44,570 --> 00:56:47,420
0,390 390,930 1350,2220 2340,2640 2640,2850
public key together with all

1739
00:56:47,420 --> 00:56:48,440
0,120 120,360 360,480 480,570 570,1020
the rest of the data

1740
00:56:48,470 --> 00:56:49,580
0,150 150,240 240,540 540,840 840,1110
in the zone file,| doesn't
|并不意味着我可以编造一个私钥，

1741
00:56:49,580 --> 00:56:51,680
0,210 210,300 300,720 1050,1620 1800,2100
mean I could just make

1742
00:56:51,680 --> 00:56:54,160
0,690 750,870 870,1710 1710,2160
up a private key,|
|

1743
00:56:54,290 --> 00:56:56,810
0,390 390,750 900,1680 1680,2070 2070,2520
make like matching public key
就像匹配公钥一样，只需在其中插入一些东西，然后说我是用户，

1744
00:56:57,170 --> 00:56:58,490
0,150 150,510 510,780 780,1200 1200,1320
and just stick something in

1745
00:56:58,490 --> 00:57:00,320
0,330 330,450 450,870 900,1200 1200,1830
there and say I'm user,|
|

1746
00:57:01,240 --> 00:57:03,400
0,540 600,1320 1320,1920
{} because, {}
因为，因为它们确实提供公钥，

1747
00:57:03,600 --> 00:57:05,250
0,510 510,630 630,750 750,1260 1260,1650
because they do provide public

1748
00:57:05,250 --> 00:57:06,690
0,180 180,600 930,1140 1140,1170 1170,1440
key,| so can I not
|所以我能不能不撒谎。

1749
00:57:06,690 --> 00:57:08,180
0,420 450,1080
just lie.|
|

1750
00:57:08,520 --> 00:57:09,900
0,150 150,270 270,570 570,1200 1200,1380
Well, you can't falsify the
嗯，你不能篡改区域文件，对吧，

1751
00:57:09,900 --> 00:57:11,200
0,270 270,570 570,960
zone file, correct,|
|

1752
00:57:11,410 --> 00:57:13,240
0,360 360,720 720,1050 1050,1680 1710,1830
because the zone file, the
因为区域文件、区域文件的散列必须与区块链中的散列匹配，

1753
00:57:13,240 --> 00:57:14,260
0,270 270,390 390,450 450,720 720,1020
hash of the zone file

1754
00:57:14,260 --> 00:57:15,670
0,330 330,870 870,960 960,1290 1290,1410
must match the hash that

1755
00:57:15,670 --> 00:57:16,980
0,210 210,300 300,360 360,930
sits in the blockchain,|
|

1756
00:57:23,890 --> 00:57:25,420
0,300 300,720 720,1230
so only the
因此，只有实际进入区块链的版本才会记录将x映射到该哈希区文件，

1757
00:57:27,080 --> 00:57:28,580
0,570 570,720 720,1080 1080,1410 1410,1500
version that actually entered the

1758
00:57:28,580 --> 00:57:31,160
0,690 690,1260 1500,2070 2070,2490 2490,2580
blockchain record mapping x you

1759
00:57:31,160 --> 00:57:32,450
0,120 120,240 240,420 420,960 960,1290
know to that hash zone

1760
00:57:32,450 --> 00:57:33,950
0,450 510,810 810,1050 1050,1350 1350,1500
file,| only that person could
|只有那个人才能产生那个区域文件。

1761
00:57:33,950 --> 00:57:36,240
0,150 150,780 780,1350 1350,1980
have {produce,that} zone files.|
|

1762
00:57:37,690 --> 00:57:39,880
0,180 180,780 810,1410 1410,1980
I see, thank you.|
我明白了，谢谢你。|

1763
00:57:45,060 --> 00:57:46,020
0,630
Okay?|
好吧?|

1764
00:57:46,620 --> 00:57:47,940
0,480 480,630 630,930 930,1020 1020,1320
Well, so this is basically
嗯，所以这基本上是一幅大图景

1765
00:57:47,940 --> 00:57:49,200
0,90 90,240 240,720 750,1200 1200,1260
the big picture| and if
|如果你得到了这个，如果你得到了这个角色，

1766
00:57:49,200 --> 00:57:50,910
0,90 90,240 240,630 630,1230 1230,1710
you got this, {} if

1767
00:57:50,910 --> 00:57:52,050
0,60 60,180 180,390 390,780 780,1140
you got this part,| then
|然后，作为其他一些细节和重要的，

1768
00:57:52,050 --> 00:57:53,580
0,150 150,510 720,1200 1200,1410 1410,1530
as the {rest,of} sort of

1769
00:57:53,580 --> 00:57:56,880
0,690 720,1410 1710,2940 2940,3060 3060,3300
details and important,| but maybe
|但或许不那么重要的是，要理解这一关键事情。

1770
00:57:56,880 --> 00:57:59,040
0,210 210,660 660,1680 1680,1950 1950,2160
less important this key thing

1771
00:57:59,040 --> 00:57:59,840
0,90 90,540
to understand.|
|

1772
00:58:01,740 --> 00:58:03,260
0,480 510,1230
Okay, {}
好吧，有几件事我想再说一遍，

1773
00:58:03,970 --> 00:58:04,690
0,270 270,330 330,510 510,660 660,720
there's a couple things I

1774
00:58:04,690 --> 00:58:05,680
0,120 120,180 180,300 300,720 720,990
want to go over,| I
|我特别想更多地谈一谈名称创造，

1775
00:58:05,680 --> 00:58:06,940
0,420 420,600 600,930 990,1200 1200,1260
particularly want to talk a

1776
00:58:06,940 --> 00:58:07,810
0,150 150,300 300,480 480,690 690,870
little bit more about name

1777
00:58:07,810 --> 00:58:08,860
0,480 480,690 690,810 810,840 840,1050
creation,| because there's a couple
|因为有几个小细节，实际上很有趣。

1778
00:58:08,860 --> 00:58:10,150
0,180 180,810 810,930 930,990 990,1290
little details, that are actually

1779
00:58:10,150 --> 00:58:11,000
0,570
interesting.|
|

1780
00:58:19,260 --> 00:58:20,340
0,180 180,390 390,540 540,750 750,1080
So {turns,out} {} name creation
事实证明，命名实际上有两个部分，

1781
00:58:20,340 --> 00:58:23,640
0,270 270,510 510,1260 1260,2220 2460,3300
actually has two { -}

1782
00:58:24,480 --> 00:58:26,010
0,360 360,840 930,1200 1200,1350 1350,1530
part {to,it},| {} the first
|首先，用户当然需要一些比特币，因为你需要支付，

1783
00:58:26,010 --> 00:58:26,700
0,60 60,180 180,240 240,480 480,690
of all the user needs

1784
00:58:26,700 --> 00:58:28,020
0,60 60,300 300,510 510,810 810,1320
to have {of,course} some Bitcoins,

1785
00:58:28,020 --> 00:58:29,440
0,210 210,300 300,450 450,870
because you gotta pay,|
|

1786
00:58:31,590 --> 00:58:32,320
0,510

1787
00:58:37,450 --> 00:58:38,260
0,90 90,420 420,540 540,720 720,810
the reason you have to
你必须拥有一些比特币的原因是，

1788
00:58:38,260 --> 00:58:39,550
0,120 120,210 210,660 660,1200 1200,1290
have some Bitcoins,| because you
|因为你必须说服其中一个矿工真正将你的交易纳入比特币账簿。

1789
00:58:39,550 --> 00:58:41,680
0,330 660,1260 1290,1680 1680,1980 1980,2130
gotta convince {} one of

1790
00:58:41,680 --> 00:58:43,570
0,660 690,1140 1140,1230 1230,1530 1530,1890
the miners to actually include

1791
00:58:43,570 --> 00:58:45,370
0,180 180,780 780,990 990,1350 1380,1800
your transaction in the Bitcoin

1792
00:58:45,370 --> 00:58:46,340
0,660
ledger.|
|

1793
00:58:46,600 --> 00:58:47,140
0,120 120,180 180,240 240,420 420,540
And so it turns out
所以你创建的每个名字都有两笔交易，

1794
00:58:47,140 --> 00:58:49,330
0,210 210,480 480,780 780,1560 1590,2190
there are two transactions for

1795
00:58:49,330 --> 00:58:51,130
0,540 660,1020 1020,1140 1140,1260 1260,1800
every name that you create,|
|

1796
00:58:55,130 --> 00:58:57,170
0,300 300,630 630,1050 1080,1620 1620,2040
and one is a basically
一种基本上是预购交易，

1797
00:58:57,170 --> 00:59:01,600
0,120 120,1470 1590,2370
a preorder transaction,|
|

1798
00:59:02,300 --> 00:59:03,800
0,210 210,300 300,420 420,810 810,1500
and in the preorder transaction,|
并且在预购交易中，|

1799
00:59:03,890 --> 00:59:04,970
0,210 210,360 360,630 630,960 960,1080
you don't really list the
你不会真的把名字列出来，

1800
00:59:04,970 --> 00:59:06,560
0,450 450,660 660,1140 1140,1320 1320,1590
name,| but actually the hash
|但实际上这个名字的散列，

1801
00:59:06,560 --> 00:59:07,700
0,120 120,210 210,570
of the name,|
|

1802
00:59:11,730 --> 00:59:12,780
0,330 330,660 660,720 720,990 990,1050
so, anybody who receives the
所以，任何收到预购交易的人，都不知道名字是什么，

1803
00:59:12,780 --> 00:59:14,310
0,660 660,720 720,1170 1170,1410 1410,1530
preorder {} transaction, doesn't know

1804
00:59:14,310 --> 00:59:15,270
0,120 120,210 210,450 450,720 720,960
what the name is,| but
|但你知道，他不知道这个名字的哈希是什么。

1805
00:59:15,270 --> 00:59:16,650
0,120 120,660 690,1140 1140,1230 1230,1380
you know doesn't know what

1806
00:59:16,650 --> 00:59:17,400
0,60 60,300 300,390 390,480 480,750
the hash with the name

1807
00:59:17,400 --> 00:59:17,960
0,360
is.|
|

1808
00:59:18,080 --> 00:59:20,030
0,270 270,390 390,600 600,690 690,1950
And then there's the second
然后是第二个真正注册姓名的交易，

1809
00:59:20,030 --> 00:59:21,860
0,360 360,720 720,1260 1260,1380 1380,1830
transaction really registers the name,|
|

1810
00:59:24,280 --> 00:59:26,920
0,810 1050,1500 1500,2100 2100,2490 2490,2640
and that basically contains the
这基本上包含了实际的名字，

1811
00:59:26,920 --> 00:59:28,100
0,360 360,810
actual name,|
|

1812
00:59:28,890 --> 00:59:30,660
0,330 330,930 930,1170 1170,1440 1440,1770
{} which we first published
我们首先发布了散列，区域文件的散列。

1813
00:59:30,660 --> 00:59:32,490
0,90 90,480 480,1410 1410,1680 1680,1830
the hash, the hash of

1814
00:59:32,490 --> 00:59:34,140
0,60 60,300 300,720
the zone file.|
|

1815
00:59:41,380 --> 00:59:44,800
0,720 750,1350 1650,2010 2010,2670 2670,3420
And so why, why, why
那么为什么，为什么，为什么要这样做，

1816
00:59:44,800 --> 00:59:45,760
0,180 180,330 330,660 660,840 840,960
is this done,| this is
|这实际上是一只Namecoin人做的事情

1817
00:59:45,760 --> 00:59:47,320
0,360 360,660 660,840 840,1230 1260,1560
actually something that a {namecoin,did

1818
00:59:47,320 --> 00:59:49,660
0,360 360,1500 1500,2010 2010,2160 2160,2340
-},| {and,they} adopted from {namecoin
|他们是从Namecoin领养的，

1819
00:59:49,660 --> 00:59:50,800
0,270 270,450 450,900 900,1020 1020,1140
-} here,| why do it
|为什么要这样做呢？

1820
00:59:50,800 --> 00:59:51,580
0,90 90,240 240,540
in this way.|
|

1821
00:59:54,240 --> 00:59:55,860
0,450 450,630 630,720 720,1260 1260,1620
Because if you directly announce
因为如果你直接宣布名字，

1822
00:59:55,860 --> 00:59:57,150
0,120 120,480 480,690 690,1080 1080,1290
the name,| then someone else
|然后其他人可以抚养你，并尝试在你之前注册这个名字。

1823
00:59:57,150 --> 00:59:59,490
0,300 300,720 720,1080 1080,1680 1740,2340
can raise you and try

1824
00:59:59,490 --> 01:00:01,770
0,630 960,1470 1470,1650 1650,1890 1890,2280
to register that name before

1825
01:00:01,770 --> 01:00:03,390
0,240 540,1170 1170,1350 1350,1440 1440,1620
you.| Yeah, this is a
|是的，这是一个常见的问题从前面开始的问题。

1826
01:00:03,390 --> 01:00:04,830
0,240 240,690 690,900 900,1140 1140,1440
common problems go from front

1827
01:00:04,830 --> 01:00:07,740
0,570 1590,2130
problem {}.|
|

1828
01:00:09,310 --> 01:00:10,510
0,450 480,630 630,720 720,900 900,1200
Oops, there we go again,
哦，又来了，抱歉。

1829
01:00:10,510 --> 01:00:12,540
0,540
sorry.|
|

1830
01:00:26,120 --> 01:00:26,800
0,240

1831
01:00:28,680 --> 01:00:29,940
0,900

1832
01:00:33,790 --> 01:00:36,910
0,330 330,780 780,1380 2220,2550 2550,3120
So {front,runner} problem {} exactly
所以领跑者问题准确地描述了，

1833
01:00:36,910 --> 01:00:38,710
0,660 660,900 900,1080 1080,1410 1410,1800
describe,| {} let's say you're
|假设您正在尝试注册google.com

1834
01:00:38,710 --> 01:00:40,090
0,210 210,270 270,930 930,1170 1170,1380
trying to register {google.com -

1835
01:00:40,090 --> 01:00:42,940
0,480 810,1710 1740,2310 2310,2640 2640,2850
-}| and {} somebody sees
|如果有人看到你这么做，

1836
01:00:42,940 --> 01:00:44,020
0,150 150,360 360,810 810,870 870,1080
you doing that,| of course
|你当然会提交一笔交易，对吗，

1837
01:00:44,020 --> 01:00:45,340
0,60 60,360 360,510 510,1020 1020,1320
you submit a transaction, correct,|
|

1838
01:00:45,340 --> 01:00:46,510
0,180 180,240 240,330 330,840 840,1170
not in the blockchain yet,|
还没有进入区块链，|

1839
01:00:46,750 --> 01:00:48,130
0,270 300,810 810,840 840,1200 1200,1380
for example a minor might
例如，未成年人实际上可能是

1840
01:00:48,130 --> 01:00:49,780
0,270 270,600 600,930 990,1350 1350,1650
actually either| or somebody else
|或者其他真正坐在比特币网络中的人

1841
01:00:49,780 --> 01:00:51,370
0,120 120,390 390,630 630,720 720,1590
that actually sits in the

1842
01:00:51,400 --> 01:00:53,440
0,480 480,990 1320,1440 1440,1680 1680,2040
Bitcoin network| and decide how
|并决定你将如何领先，并试图获得我的交易

1843
01:00:53,440 --> 01:00:54,250
0,120 120,300 300,360 360,510 510,810
you're going to run ahead

1844
01:00:54,250 --> 01:00:54,940
0,90 90,300 300,360 360,510 510,690
and trying to get my

1845
01:00:54,940 --> 01:00:57,520
0,540 540,630 630,1170 1170,2040 2070,2580
transaction| to claiming {you,know} {google.com
|声称你知道谷歌在你之前就进入了比特币

1846
01:00:57,520 --> 01:00:59,860
0,240 240,1140 1170,1560 1560,1920 1950,2340
- -} into the Bitcoin

1847
01:00:59,860 --> 01:01:01,630
0,270 270,690 930,1290 1290,1590 1590,1770
before you| and now then
|现在我拥有Google.com

1848
01:01:01,630 --> 01:01:03,610
0,570 600,1020 1020,1170 1170,1500 1740,1980
{I,own} {google.com - -}| and
|因此，为了避免这个问题，

1849
01:01:03,610 --> 01:01:05,380
0,180 180,660 690,1020 1020,1140 1140,1770
so to avoid that problem,|
|

1850
01:01:05,560 --> 01:01:06,910
0,450 450,570 570,840 840,1110 1110,1350
{} you first actually have
你首先必须将散列输入比特币链中，

1851
01:01:06,910 --> 01:01:08,290
0,210 210,480 480,570 570,1020 1020,1380
to enter the hash into

1852
01:01:08,290 --> 01:01:10,390
0,90 90,510 510,1080 1350,1650 1650,2100
the Bitcoin chain,| {} then
|然后你等待一段时间以确保，

1853
01:01:10,390 --> 01:01:11,830
0,150 150,480 480,630 630,1200 1200,1440
you wait a while to

1854
01:01:11,890 --> 01:01:13,280
0,240 240,510 510,750 750,1260
make sure that the,|
|

1855
01:01:13,650 --> 01:01:15,180
0,300 300,600 600,900 900,1260 1260,1530
{} that that record sits
这一记录位于比特币区块链中，

1856
01:01:15,180 --> 01:01:17,940
0,120 120,510 540,1650 1680,2430 2580,2760
in the Bitcoin blockchain,| now
|现在你有六个或十个街区

1857
01:01:17,940 --> 01:01:19,830
0,300 300,450 450,780 780,1380 1560,1890
you have six whatever ten

1858
01:01:19,830 --> 01:01:21,540
0,480 660,870 870,1200 1200,1530 1530,1710
blocks| and then after that
|然后，你肯定会喜欢你[烧掉]区块链中的名字，

1859
01:01:21,540 --> 01:01:23,940
0,120 120,660 660,930 930,1950 1950,2400
you sure like you [burn]

1860
01:01:23,940 --> 01:01:25,590
0,60 60,510 510,690 690,1140 1470,1650
the name in the, as

1861
01:01:25,590 --> 01:01:27,390
0,120 120,540 540,780 780,1110 1140,1800
they call in the blockchain,|
|

1862
01:01:27,630 --> 01:01:28,830
0,570 570,720 720,900 900,990 990,1200
at that point you actually
在这一点上，您实际上进行了名称的实际注册。

1863
01:01:28,830 --> 01:01:30,210
0,90 90,240 240,510 510,1110 1110,1380
do the actual registration {of,the,name}.|
|

1864
01:01:31,770 --> 01:01:32,880
0,150 150,270 270,330 330,750 750,1110
I've got a question regarding
关于这一点，我有一个问题。

1865
01:01:32,880 --> 01:01:33,540
0,360
that.|
|

1866
01:01:35,070 --> 01:01:36,780
0,300 300,510 510,1020 1200,1590 1590,1710
So what, what,| why is
所以，什么，什么，|为什么攻击者不可能使用google.com的哈希进行内部预计算

1867
01:01:36,780 --> 01:01:37,800
0,60 60,300 300,810 810,930 930,1020
it not possible for an

1868
01:01:37,800 --> 01:01:39,690
0,480 480,630 630,1110 1230,1470 1470,1890
attacker to sake pre compute

1869
01:01:39,690 --> 01:01:40,830
0,480 480,630 630,720 720,1020 1020,1140
internal with the hash of

1870
01:01:40,830 --> 01:01:42,690
0,270 270,510 510,1020 1050,1230 1230,1860
{google.com - -}| and then
|然后纵观区块链

1871
01:01:42,720 --> 01:01:43,920
0,540 540,690 690,780 780,1020 1020,1200
look through the {blockchain -}|
|

1872
01:01:43,920 --> 01:01:45,030
0,120 120,330 330,480 480,780 780,1110
and see if someone posted
看看有没有人发布了谷歌的哈希。

1873
01:01:45,030 --> 01:01:46,500
0,60 60,270 270,390 390,840 1050,1470
a hash of google.| Yeah,
|是的，是的，绝对是，

1874
01:01:46,500 --> 01:01:48,690
0,570 570,1080 1080,1380 1380,1650 1650,2190
yeah absolutely,| yeah, so absolutely,
|是的，所以绝对的，你知道有比这个稍微复杂一点的，

1875
01:01:48,690 --> 01:01:49,920
0,90 90,210 210,510 510,1080 1080,1230
you know there's slightly more

1876
01:01:49,920 --> 01:01:51,330
0,540 540,660 660,990 990,1140 1140,1410
sophisticated than this,| you know
|你知道，就是纯粹的杂碎，

1877
01:01:51,330 --> 01:01:52,830
0,210 210,660 660,990 990,1320 1320,1500
just purely hash,| there's only
|只有一堆其他的争论会涉及到，

1878
01:01:52,830 --> 01:01:53,640
0,30 30,210 210,270 270,450 450,810
a bunch of other arguments

1879
01:01:53,640 --> 01:01:54,630
0,120 120,240 240,510 510,630 630,990
that go into,| it including
|它包括一个现时词或其他东西，

1880
01:01:54,630 --> 01:01:55,620
0,60 60,390 390,480 480,780
a nonce or something,|
|

1881
01:01:58,330 --> 01:01:59,230
0,420 420,510 510,720 720,840 840,900
otherwise, you could make a
否则，你可以编一本词典，对吧。

1882
01:01:59,230 --> 01:02:01,300
0,480 480,840
dictionary, right.|
|

1883
01:02:06,870 --> 01:02:07,590
0,180 180,300 300,510 510,630 630,720
In some ways, this is
在某些方面，这真的不是他们的发明，

1884
01:02:07,590 --> 01:02:09,120
0,390 390,600 600,960 960,1410 1410,1530
really not their invention,| but
|但就像我之前说的，它来自于一个名字点。

1885
01:02:09,120 --> 01:02:11,370
0,1230 1620,1710 1710,1950 1950,2190 2190,2250
as I said before, it

1886
01:02:11,370 --> 01:02:12,460
0,180 180,300 300,450 450,780
came out of {

1887
01:02:13,790 --> 01:02:15,020
0,570 570,690 690,960 960,1110 1110,1230
- -} came out of

1888
01:02:15,020 --> 01:02:16,700
0,450 570,1020 1020,1350
a name point.|
|

1889
01:02:22,880 --> 01:02:25,040
0,450 450,990 1140,1350 1350,1980 1980,2160
Okay, {} so let's you
好的，让我们回到协作应用程序，

1890
01:02:25,040 --> 01:02:26,930
0,120 120,240 240,570 570,1080 1080,1890
know go back to {}

1891
01:02:27,020 --> 01:02:28,880
0,780 780,900 900,990 990,1440 1440,1860
the sort of collaborative apps,|
|

1892
01:02:28,880 --> 01:02:31,100
0,420 720,1620
for collaborative,
适用于协作性、协作性分散的应用程序。

1893
01:02:34,550 --> 01:02:38,960
0,360 570,1470 1920,2580 2580,3540
{} collaborative decentralized applications.|
|

1894
01:02:46,130 --> 01:02:47,160
0,660

1895
01:02:47,430 --> 01:02:48,570
0,450 450,690 690,780 780,1020 1020,1140
So just go back to
以我们的待办事项清单为例，

1896
01:02:48,570 --> 01:02:49,410
0,120 120,390 390,600 600,720 720,840
our todo list as an

1897
01:02:49,410 --> 01:02:51,330
0,660 990,1500 1500,1680 1680,1830 1830,1920
example,| {} and just to
|我只是想让你知道它到底是怎么工作的，

1898
01:02:51,330 --> 01:02:52,350
0,420 420,510 510,690 690,900 900,1020
see you know how it

1899
01:02:52,350 --> 01:02:54,270
0,240 240,390 390,870 900,990 990,1920
really would work,| you know
|你知道，所以再次勾勒出来，它是如何工作的，

1900
01:02:54,270 --> 01:02:55,380
0,420 420,540 540,720 720,900 900,1110
{so,sketch} out again, how it

1901
01:02:55,380 --> 01:02:57,780
0,360 360,780 1170,1560 1560,1800 1800,2400
would work,| {} so basically
|所以基本上有两个用户，正确的，运行的，你知道待办事项列表应用程序，

1902
01:02:57,780 --> 01:02:59,760
0,150 150,330 330,750 750,1230 1290,1980
with two users, correct, running,

1903
01:02:59,760 --> 01:03:01,020
0,240 240,510 510,750 750,1020 1020,1260
you know the todo list

1904
01:03:01,020 --> 01:03:01,680
0,450
app,|
|

1905
01:03:06,030 --> 01:03:08,700
0,210 210,390 390,900 930,2370
here {U1 -} {here,U2},|
这里是U1这里是U2|

1906
01:03:14,110 --> 01:03:16,240
0,540 540,660 660,1020 1020,1710 1920,2130
and they basically exchanged some
他们基本上互相交换了一些信息，

1907
01:03:16,240 --> 01:03:17,890
0,420 420,570 570,660 660,1050 1170,1650
information with each other,| basically
|从某种意义上说，U1已经知道了U2的名字

1908
01:03:17,890 --> 01:03:19,330
0,330 330,780 780,870 870,1080 1080,1440
saying are in some way,

1909
01:03:19,330 --> 01:03:20,800
0,270 270,600 600,810 810,1080 1080,1470
{U1 -} has learned about

1910
01:03:20,800 --> 01:03:21,970
0,300 300,390 390,690 690,870 870,1170
{U2's -} name| and U2
|U2也知道了U1的名字。

1911
01:03:21,970 --> 01:03:23,020
0,120 120,360 360,630 630,750 750,1050
has learned about {U1's -}

1912
01:03:23,020 --> 01:03:23,700
0,390
name.|
|

1913
01:03:25,120 --> 01:03:26,710
0,150 150,360 360,600 600,840 990,1590
And then sort of that
然后，当然，这一步必须要发生，

1914
01:03:26,710 --> 01:03:27,460
0,270 270,330 330,540 540,660 660,750
step, of course has to

1915
01:03:27,460 --> 01:03:28,480
0,330 330,450 450,600 600,720 720,1020
happen,| it has to happen
|它必须安全地发生，

1916
01:03:28,480 --> 01:03:29,950
0,870 870,990 990,1050 1050,1290 1290,1470
securely,| in the sense that
|在U1确实需要知道实际上是U2的名字的意义上，

1917
01:03:29,950 --> 01:03:31,090
0,330 330,570 570,720 720,810 810,1140
U1 really need to know

1918
01:03:31,090 --> 01:03:32,890
0,270 270,660 660,780 780,1230 1230,1800
that actually is {U2's,name -},|
|

1919
01:03:33,190 --> 01:03:34,100
0,630
{then,they,can},
然后他们可以，U1，U1可以查询U2的名字，

1920
01:03:34,500 --> 01:03:37,830
0,240 240,390 390,870 1200,2610 2820,3330
{U1 - -}, {U1 -}

1921
01:03:37,830 --> 01:03:39,570
0,60 60,330 330,510 510,1020 1050,1740
can look up U2's name,|
|

1922
01:03:42,900 --> 01:03:44,070
0,180 180,390 390,510 510,750 750,1170
{you,know} get his own file
你知道，去找他自己的档案吧，

1923
01:03:44,070 --> 01:03:45,180
0,150 150,660
for that,|
|

1924
01:03:47,470 --> 01:03:49,060
0,360 360,480 480,1020 1020,1320 1320,1590
find the entry for say
在区域文件中找到待办事项列表条目，

1925
01:03:49,060 --> 01:03:50,320
0,210 210,540 540,930 930,1140 1140,1260
the todo list in the

1926
01:03:50,320 --> 01:03:51,520
0,210 210,780
zone file,|
|

1927
01:03:54,220 --> 01:03:55,690
0,600 600,750 750,1080 1080,1260 1260,1470
{} {you,know} zone file also
你知道区域文件也包含你知道的公钥，

1928
01:03:55,690 --> 01:03:57,400
0,450 450,870 870,1050 1050,1350 1350,1710
contains {you,know} the public key,|
|

1929
01:04:00,550 --> 01:04:01,780
0,270 270,660 660,840 840,960 960,1230
and this might be not
这可能不像你所知道的U2可能有许多公钥、私钥，

1930
01:04:01,780 --> 01:04:02,560
0,210 210,270 270,420 420,600 600,780
like you know {U2 -}

1931
01:04:02,560 --> 01:04:04,270
0,390 390,570 570,960 960,1230 1230,1710
might have many public keys,

1932
01:04:04,300 --> 01:04:06,310
0,660 660,1110 1140,1620 1620,1710 1710,2010
private keys,| because you probably
|因为您可能不想拥有一个主私钥，

1933
01:04:06,310 --> 01:04:07,450
0,300 300,450 450,510 510,840 840,1140
don't want to have one

1934
01:04:07,450 --> 01:04:08,710
0,510 510,840 840,1080 1080,1200 1200,1260
master private key,| that you
|你什么都用的东西，

1935
01:04:08,710 --> 01:04:09,850
0,210 210,360 360,810 810,1050 1050,1140
use for everything,| because if
|因为如果你使用那个主私钥

1936
01:04:09,850 --> 01:04:11,260
0,150 150,360 360,480 480,720 720,1410
you use that one master

1937
01:04:11,410 --> 01:04:12,850
0,360 360,570 570,720 720,990 990,1440
private key| or somebody still
|或者你身体状况还不好的人，

1938
01:04:12,880 --> 01:04:14,650
0,360 360,420 420,660 660,1200 1500,1770
you're in bad shape,| so
|因此，通常我认为在区块链中，

1939
01:04:14,650 --> 01:04:15,550
0,300 300,390 390,540 540,720 720,900
typically I think in a

1940
01:04:15,550 --> 01:04:16,870
0,360 360,630 630,750 750,1020 1020,1320
block in {} {blockchain},| there
|每个应用程序都应该有一个私钥。

1941
01:04:16,870 --> 01:04:18,850
0,120 120,240 240,540 1200,1800 1800,1980
should have a private key

1942
01:04:18,850 --> 01:04:19,980
0,180 180,930
per application.|
|

1943
01:04:20,560 --> 01:04:22,360
0,480 480,720 720,900 900,1380 1650,1800
{} So you know {U1
因此您知道，U1基本上在区域文件中保留了用户姓名查找，

1944
01:04:22,360 --> 01:04:24,670
0,300 300,750 750,1380 1380,1740 1740,2310
-} basically kept us name

1945
01:04:24,700 --> 01:04:25,870
0,390 390,510 510,630 630,810 810,1170
looks up in zone file,|
|

1946
01:04:25,870 --> 01:04:27,460
0,240 240,480 480,840 840,1110 1110,1590
but todo list public key
而是列出您通过块堆栈文件系统知道的公钥和URI，

1947
01:04:27,790 --> 01:04:29,960
0,510 510,870 870,1590
{} and URI

1948
01:04:31,420 --> 01:04:33,310
0,90 90,210 210,450 450,1170 1290,1890
you know through the {blockstack

1949
01:04:33,310 --> 01:04:35,470
0,270 270,600 600,1230 1380,1740 1740,2160
-} file system,| which tracks
|它跟踪不同的存储提供商

1950
01:04:35,470 --> 01:04:37,480
0,450 450,750 750,1050 1050,1440 1440,2010
away the different storage providers|
|

1951
01:04:37,480 --> 01:04:39,070
0,300 300,570 570,1260 1320,1440 1440,1590
and actually retrieve you know
并实际检索您知道的实际名称、实际文件

1952
01:04:39,070 --> 01:04:41,260
0,330 330,630 630,1200 1440,2040 2040,2190
the actual name, {} the

1953
01:04:41,260 --> 01:04:42,400
0,240 240,810
actual file,|
|

1954
01:04:43,990 --> 01:04:45,040
0,180 180,480 480,570 570,960 960,1050
{you,know} check the signature on
你知道，检查文件上的签名，

1955
01:04:45,040 --> 01:04:46,240
0,90 90,600 600,810 810,1110 1110,1200
the file,| maybe version {numbers
|也许是版本号

1956
01:04:46,240 --> 01:04:48,610
0,630 690,1080 1080,1650 1830,2160 2160,2370
-}| {} and {} and
|然后基本上用它来构建U2中的待办事项列表

1957
01:04:48,610 --> 01:04:49,960
0,270 270,900 900,1080 1080,1290 1290,1350
then basically use that to

1958
01:04:49,960 --> 01:04:51,940
0,690 690,810 810,990 990,1530 1560,1980
construct you know the todo

1959
01:04:51,940 --> 01:04:54,520
0,450 750,1410 1410,1740 1740,2280 2280,2580
list {} from U2| and
|并与U1的

1960
01:04:54,520 --> 01:04:55,720
0,300 300,450 450,570 570,720 720,1200
worked out with {U1's -}|
|

1961
01:04:55,720 --> 01:04:56,770
0,90 90,570 570,630 630,750 750,1050
and similarly you know you
同样，你知道U2和U1的名字基本上是一模一样的，

1962
01:04:56,800 --> 01:04:58,120
0,390 390,720 720,840 840,1260 1260,1320
basically U2 is exactly the

1963
01:04:58,120 --> 01:04:59,290
0,240 240,540 540,870 870,960 960,1170
same way thing you know

1964
01:04:59,290 --> 01:05:00,760
0,210 210,360 360,690 690,1140
as {U1's -} name,|
|

1965
01:05:02,120 --> 01:05:04,160
0,390 390,750 750,960 960,1410 1410,2040
and [boom] goes off and
然后[砰]的一声，U1的待办事项清单在这里

1966
01:05:04,190 --> 01:05:06,350
0,630 630,780 780,960 960,1020 1020,2160
{} here which do {U1

1967
01:05:06,350 --> 01:05:08,180
0,270 270,1020 1050,1290 1290,1590 1590,1830
-} {todo -} list| and
|您知道，通过这种方式，他们可以拥有一个协作应用程序

1968
01:05:08,180 --> 01:05:09,020
0,90 90,240 240,420 420,660 660,840
you know that way they

1969
01:05:09,020 --> 01:05:11,870
0,510 870,1290 1290,1350 1350,2070 2070,2850
can have a collaborative {}

1970
01:05:12,020 --> 01:05:14,210
0,1020 1260,1680 1680,1830 1830,1890 1890,2190
application| and so for example
|因此，例如当U2更新其文件时，

1971
01:05:14,210 --> 01:05:16,400
0,270 270,420 420,630 630,1380 1530,2190
when {U2 -} updates {}

1972
01:05:16,400 --> 01:05:18,560
0,240 240,870 870,1590 1590,1590 2100,2160
its file,| then, {} you
|然后，你知道，U1的应用程序，你知道，定期去检索新的，检索待办事项列表

1973
01:05:18,560 --> 01:05:20,030
0,90 90,750 750,900 900,1140 1140,1470
know periodically {U1's -} app

1974
01:05:20,030 --> 01:05:21,860
0,60 60,420 600,1110 1110,1500 1500,1830
you know {} goes and

1975
01:05:21,860 --> 01:05:24,140
0,480 480,570 570,1170 1170,1680 1710,2280
retrieves the new, {} retrieves

1976
01:05:24,140 --> 01:05:25,640
0,570 570,840 840,1170 1170,1350 1350,1500
a todo list| and just
|看看有没有什么最新消息。

1977
01:05:25,640 --> 01:05:26,330
0,150 150,360 360,510 510,540 540,690
see if there are any

1978
01:05:26,330 --> 01:05:26,980
0,570
updates.|
|

1979
01:05:30,870 --> 01:05:31,500
0,120 120,270 270,390 390,450 450,630
Does this sort of makes
这有什么意义吗？

1980
01:05:31,500 --> 01:05:32,160
0,390
sense?|
|

1981
01:05:34,670 --> 01:05:35,780
0,240 240,450 450,810 810,930 930,1110
You see here, I think
你看这里，我认为这是分散应用程序的中心点之一，

1982
01:05:35,780 --> 01:05:37,220
0,240 240,390 390,570 570,690 690,1440
there's like one of these

1983
01:05:37,220 --> 01:05:38,450
0,360 360,660 660,810 810,930 930,1230
central points of {decentralized -}

1984
01:05:38,450 --> 01:05:41,480
0,810 1110,1470 1470,1830 1830,2580 2580,3030
applications,| {} is this applications
|这是一种完全不同的应用程序或构建方式

1985
01:05:41,480 --> 01:05:43,280
0,120 120,660 660,960 960,1590 1590,1800
or building you're quite a

1986
01:05:43,310 --> 01:05:45,290
0,450 450,780 780,1110 1110,1680 1710,1980
different way,| than the ones
|而不是我们很早就谈到的，对吧，

1987
01:05:45,290 --> 01:05:46,100
0,90 90,180 180,390 390,570 570,810
that we're talking about very

1988
01:05:46,100 --> 01:05:47,210
0,330 330,570 570,870 870,1050 1050,1110
early on, correct,| if we
|如果我们回到这张集中式站点的照片，

1989
01:05:47,210 --> 01:05:48,410
0,120 120,420 420,480 480,660 660,1200
go back to this picture

1990
01:05:48,710 --> 01:05:49,880
0,150 150,240 240,1050
of the centralized

1991
01:05:50,120 --> 01:05:52,790
0,330 330,870 1020,1350 1350,1890 1890,2670
{} site,| that we're building
|我们正在数据库中构建一个待办事项列表应用程序，对吗

1992
01:05:52,790 --> 01:05:54,740
0,450 480,750 750,930 930,1470 1470,1950
a todo list application, correct,

1993
01:05:54,740 --> 01:05:56,720
0,150 150,240 240,1140 1350,1830 1830,1980
in the database| or the
|或者U1的待办事项列表和U2的待办事项列表。

1994
01:05:56,720 --> 01:05:58,600
0,780 810,1110 1110,1650
U1's todo list,

1995
01:06:02,320 --> 01:06:03,460
0,360 360,510 510,810 810,930 930,1140
and {U2's -} {todo -}

1996
01:06:03,460 --> 01:06:04,240
0,480
list.|
|

1997
01:06:08,440 --> 01:06:09,820
0,330 330,750 750,840 840,1080 1080,1380
And yeah you know like
是的，你知道，就像待办事项列表应用程序，

1998
01:06:09,820 --> 01:06:11,290
0,90 90,420 420,630 630,1050 1350,1470
the todo list app,| you
|您知道，基本上您知道使用一个简单的SQL查询来检索其他内容待办事项列表

1999
01:06:11,290 --> 01:06:12,580
0,180 180,570 570,660 660,900 900,1290
know basically you know retrieve

2000
01:06:12,580 --> 01:06:14,950
0,450 450,1170 1170,1830 1830,2070 2100,2370
these other {the,content} {todo -}

2001
01:06:14,950 --> 01:06:16,150
0,300 300,450 450,480 480,780 780,1200
list with a simple SQL

2002
01:06:16,150 --> 01:06:17,860
0,540 810,1260 1260,1350 1350,1620 1620,1710
query| and you put them
|然后你把它们放在一起，实际呈现给用户，

2003
01:06:17,860 --> 01:06:19,210
0,450 450,750 750,1140 1140,1230 1230,1350
together, actually presented to the

2004
01:06:19,210 --> 01:06:21,040
0,360 780,960 960,1230 1230,1470 1470,1830
user,| when we see that
|当我们看到在这个分散的方案中

2005
01:06:21,040 --> 01:06:23,350
0,90 90,450 450,1440 1440,2010 2160,2310
in this decentralized scheme| and
|这涉及到更多的机制

2006
01:06:23,350 --> 01:06:24,070
0,60 60,240 240,510 510,600 600,720
it was quite a bit

2007
01:06:24,070 --> 01:06:25,750
0,360 360,900 900,1350 1350,1440 1440,1680
more mechanism involved| to actually
|才能真正实现这一点

2008
01:06:25,750 --> 01:06:27,850
0,150 150,270 270,810 1050,1800 1800,2100
make this happen| and {}
|而在节目中，

2009
01:06:27,850 --> 01:06:28,690
0,120 120,180 180,540 540,600 600,840
in the program,| it doesn't
|它实际上没有与集中式案例相同的[]SQL接口。

2010
01:06:28,690 --> 01:06:31,060
0,240 240,540 540,870 870,1710 1830,2370
really have the same {}

2011
01:06:31,060 --> 01:06:35,140
0,1260 1260,1770 1770,2340 2340,3990 4020,4080
[] SQL interface as the

2012
01:06:35,140 --> 01:06:36,040
0,420 420,840
centralized case.|
|

2013
01:06:36,840 --> 01:06:37,680
0,150 150,150 150,390 390,510 510,840
So I think this is
所以我认为这可能是这些分散应用程序的症结之一，

2014
01:06:38,160 --> 01:06:39,390
0,450 450,810 810,990 990,1170 1170,1230
{} one of sort of

2015
01:06:39,390 --> 01:06:41,100
0,330 330,870 870,1260 1260,1620 1620,1710
maybe the sticking points with

2016
01:06:41,100 --> 01:06:43,140
0,180 180,780 780,1500 1530,1860 1860,2040
these decentralized applications,| how can
|如何才能使它们像分散版本一样容易编写。

2017
01:06:43,140 --> 01:06:44,100
0,90 90,300 300,450 450,660 660,960
you make them as easy

2018
01:06:44,100 --> 01:06:46,440
0,150 150,630 630,1170 1230,1770 1770,2340
to write as decentralized versions.|
|

2019
01:06:52,490 --> 01:06:53,240
0,210 210,330 330,360 360,540 540,750
Okay, so I want to
好的，这一次我想留点时间，

2020
01:06:53,240 --> 01:06:54,350
0,300 300,600 600,840 840,960 960,1110
leave some time this time

2021
01:06:54,350 --> 01:06:55,430
0,240 240,450 450,540 540,660 660,1080
around,| instead of new breakout
|而不是新的突破室，

2022
01:06:55,430 --> 01:06:58,040
0,420 450,900 900,1380 1380,1830 1830,2610
rooms,| {} usually sometime around
|通常是在某个时间提问或讨论，

2023
01:06:58,070 --> 01:07:00,230
0,300 300,840 990,1440 1440,1530 1530,2160
time for questions or discussion,|
|

2024
01:07:00,440 --> 01:07:01,040
0,210 210,360 360,480 480,540 540,600
but since this is a
但由于这是一种更发人深省的练习，

2025
01:07:01,040 --> 01:07:03,350
0,180 180,330 330,630 630,780 780,2310
little bit more of {}

2026
01:07:03,830 --> 01:07:06,230
0,240 240,930 930,1380 1380,1950 1950,2400
thought provoking type exercise,| then
|然后是一个练习，这是一个棘手的技术问题，

2027
01:07:06,530 --> 01:07:08,630
0,210 210,840 840,1320 1320,1710 1740,2100
{} an exercise in, well

2028
01:07:08,630 --> 01:07:10,100
0,390 390,660 660,810 810,1110 1110,1470
here's a hard technical problem,|
|

2029
01:07:10,100 --> 01:07:11,630
0,270 270,360 360,570 570,1140 1140,1530
here's the right solution,| here's
以下是正确的解决方案，|以下是了解正确解决方案，

2030
01:07:11,630 --> 01:07:12,680
0,240 240,300 300,510 510,930 930,1050
learn the right solution,| and
|然后使用它。

2031
01:07:12,680 --> 01:07:13,380
0,150 150,330 330,540
then use it.|
|

2032
01:07:13,980 --> 01:07:15,750
0,300 300,690 900,1530 1530,1620 1620,1770
{} So, {} you know,
所以，你知道，只是想听听人们的意见或问题

2033
01:07:15,750 --> 01:07:17,460
0,300 570,810 810,900 900,1470 1470,1710
just want to hear people's

2034
01:07:17,460 --> 01:07:20,100
0,510 510,1170 1260,1860 1860,2310 2400,2640
opinion or questions| about any
|关于这些分散应用程序与集中式应用程序的任何方面，

2035
01:07:20,100 --> 01:07:22,260
0,420 420,540 540,960 960,1620 1620,2160
aspect of these decentralized applications

2036
01:07:22,260 --> 01:07:24,480
0,720 720,1470 1470,1890 1890,2100 2100,2220
versus centralized,| then or the
|然后是区块堆栈的特定设计或任何其他问题

2037
01:07:24,480 --> 01:07:25,920
0,330 330,660 660,750 750,1050 1050,1440
particular design for {blockstack -}

2038
01:07:25,920 --> 01:07:26,880
0,210 210,360 360,720
or any other

2039
01:07:27,220 --> 01:07:28,720
0,480 480,690 690,1170 1170,1290 1290,1500
issue| and we can debate
|我们可以一起辩论。

2040
01:07:28,720 --> 01:07:29,740
0,90 90,540
it together.|
|

2041
01:07:32,280 --> 01:07:34,200
0,180 180,360 360,630 630,1290 1440,1920
Wait, so what's the main
等等，那么最大的困难是什么，

2042
01:07:34,200 --> 01:07:36,600
0,990 990,1470 1470,1950 1980,2310 2310,2400
difficulty in,| {} instead of
|而不是像使用文件系统API一样使用关系数据库。

2043
01:07:36,600 --> 01:07:39,090
0,270 270,420 420,990 1260,2070 2070,2490
using like a file system

2044
01:07:39,090 --> 01:07:40,530
0,420 420,570 570,840 840,1050 1050,1440
API to use like a

2045
01:07:40,740 --> 01:07:42,140
0,480 480,1200
relational database.|
|

2046
01:07:42,740 --> 01:07:43,490
0,210 210,300 300,390 390,510 510,750
Well, how do you write,
那么，你怎么写，你怎么呈现全球关系数据库。

2047
01:07:43,490 --> 01:07:44,990
0,480 480,810 810,900 900,1140 1140,1500
{} how do you present

2048
01:07:44,990 --> 01:07:47,990
0,90 90,930 1020,1890 1920,2340 2340,3000
the worldwide {} relational database.|
|

2049
01:07:48,920 --> 01:07:51,800
0,240 240,750 1140,1500 1500,2160 2730,2880
All these user files, all
所有这些用户文件，所有这些文件将是不同的用户

2050
01:07:51,800 --> 01:07:52,670
0,150 150,450 450,540 540,600 600,870
these files will be different

2051
01:07:52,670 --> 01:07:53,600
0,330 330,480 480,570 570,720 720,930
users| live in all kinds
|生活在各种不同的存储提供商中，

2052
01:07:53,600 --> 01:07:56,990
0,60 60,1230 1230,1530 1530,2190 2610,3390
of different storage providers, {}|
|

2053
01:07:56,990 --> 01:07:59,000
0,930 960,1530 1530,1680 1680,1800 1800,2010
and, {} you know you
而且，你知道你不能做任何事，

2054
01:07:59,000 --> 01:08:01,160
0,270 270,510 510,870 870,1440 1740,2160
can't like do whatever, {}|
|

2055
01:08:01,160 --> 01:08:03,440
0,150 150,360 360,510 510,1170 1290,2280
you can't do select across
您不能在所有存储提供商之间进行选择，这太疯狂了，

2056
01:08:03,440 --> 01:08:05,000
0,120 120,210 210,510 510,1110 1110,1560
all the {storage -} providers,

2057
01:08:05,000 --> 01:08:06,040
0,390 390,870
{that,be} crazy,|
|

2058
01:08:07,850 --> 01:08:09,020
0,150 150,330 330,540 540,960 960,1170
you couldn't also download all
你也不能把所有的用户数据下载到你的计算机上，

2059
01:08:09,020 --> 01:08:10,460
0,300 300,660 660,1110 1140,1260 1260,1440
the user data to your

2060
01:08:10,460 --> 01:08:11,480
0,450 450,660 660,810 810,930 930,1020
computer,| because that would be
|因为那太贵了。

2061
01:08:11,480 --> 01:08:12,540
0,120 120,750
too expensive.|
|

2062
01:08:12,960 --> 01:08:14,640
0,240 240,450 450,720 720,1350
What about like, {}
比方说，比如关联数据数据库。

2063
01:08:14,780 --> 01:08:19,700
0,840 1320,1560 1560,1860 1860,2550 2580,4920
like a linked data database.|
|

2064
01:08:20,120 --> 01:08:26,330
0,1200 1200,5130 5130,5550 5550,5940 5940,6210
{I,think} {this,is} intresting researcher, actually
我觉得这是一个有趣的研究人员，其实是要去追求的，对吧，

2065
01:08:26,330 --> 01:08:28,460
0,600 630,1050 1080,1320 1320,1710 1860,2130
to pursue, right,| but you
|但你实际上可以构建一种可伸缩的数据库基础设施，

2066
01:08:28,460 --> 01:08:29,720
0,180 180,480 480,1020
could actually built

2067
01:08:29,940 --> 01:08:32,070
0,450 450,630 630,780 780,1440 1620,2130
{} sort of {} scalable

2068
01:08:32,070 --> 01:08:34,650
0,600 600,1680 1680,2040 2040,2400 2400,2580
database infrastructure,| where users still
|其中用户仍然再次控制具有不同位置的他们自己的数据

2069
01:08:34,650 --> 01:08:35,820
0,330 330,480 480,600 600,870 870,1170
control their own data having

2070
01:08:35,820 --> 01:08:37,590
0,270 270,750 750,1020 1020,1290 1290,1770
different locations again| and provide
|并提供一种关系型数据类型接口，

2071
01:08:37,590 --> 01:08:38,730
0,150 150,330 330,480 480,870 870,1140
a sort of relational data

2072
01:08:38,730 --> 01:08:39,880
0,270 270,930
type interface,|
|

2073
01:08:41,250 --> 01:08:42,570
0,420 420,720 720,960 960,1230 1230,1320
certainly blocks {} {blockstack -}
当然，块块堆栈不能提供给您。

2074
01:08:42,570 --> 01:08:43,590
0,150 150,240 240,390 390,720 720,1020
doesn't {offer -} to you.|
|

2075
01:08:48,190 --> 01:08:49,660
0,270 270,510 510,870 870,1110 1110,1470
Yes, another question is, {}|
是的，另一个问题是，|

2076
01:08:49,750 --> 01:08:50,800
0,210 210,390 390,450 450,540 540,1050
like what are the benefits
比如，这种去中心化的PKI与信任的PKI相比有什么好处，

2077
01:08:50,800 --> 01:08:53,320
0,120 120,690 690,1470 1470,2040 2040,2520
of this decentralized PKI versus

2078
01:08:53,320 --> 01:08:55,180
0,210 210,630 1020,1260 1260,1380 1380,1860
like a web of trust

2079
01:08:55,180 --> 01:08:56,260
0,300 300,570 570,780 780,870 870,1080
{PKI -},| which I guess
|我想这也是分散的。

2080
01:08:56,260 --> 01:09:01,420
0,90 90,420 420,1200 1260,2010 2010,5160
is also decentralized.| Yeah, {so,other},
|是的，所以其他的，也许是这里的一些要点，对吧，

2081
01:09:01,420 --> 01:09:02,560
0,30 60,480 480,600 600,900 900,1140
{} maybe some points here,

2082
01:09:02,560 --> 01:09:04,900
0,360 630,1260 1560,1740 1740,1860 1860,2340
correct,| {} you know there's
|你知道还有其他信任公钥基础设施的网络，信任公钥基础设施的网络，

2083
01:09:04,900 --> 01:09:06,670
0,1020 1020,1200 1200,1410 1410,1470 1470,1770
other {} web of trust

2084
01:09:06,670 --> 01:09:08,170
0,150 150,480 480,780 780,870 870,1500
{PKI -}, web of trust

2085
01:09:09,570 --> 01:09:10,940
0,1170
{}

2086
01:09:11,390 --> 01:09:14,210
0,810 810,1320 1710,2250 2430,2670 2670,2820
{PKIs -},| {} you know,
|你知道，我是说我最熟悉的是Keybase，

2087
01:09:14,210 --> 01:09:15,200
0,90 90,600 600,660 660,840 840,990
I mean the one I'm

2088
01:09:15,200 --> 01:09:17,270
0,180 180,600 600,810 810,1110 1110,2070
most familiar with is {}

2089
01:09:17,540 --> 01:09:18,720
0,390 390,900
is {}

2090
01:09:19,580 --> 01:09:21,600
0,660 870,1260 1260,1770
{} {keybase -},|
|

2091
01:09:24,970 --> 01:09:25,780
0,90 90,300 300,390 390,570 570,810
I think we should mention
我想我们应该在几个小时前提一下，

2092
01:09:25,780 --> 01:09:26,770
0,30 30,210 210,270 270,390 390,990
a couple of hours before,|
|

2093
01:09:26,860 --> 01:09:29,380
0,600 600,990 1020,1530 1530,1650 1650,2520
{} and, {} you know
你知道，Keybase实际上我们还没有详细讨论过这个问题，

2094
01:09:29,500 --> 01:09:31,300
0,360 360,900 900,1410 1410,1590 1590,1800
keybase actually we haven't talked

2095
01:09:31,300 --> 01:09:32,410
0,60 60,390 390,450 450,690 690,1110
to this in great detail,|
|

2096
01:09:32,410 --> 01:09:33,670
0,180 450,810 810,1080 1080,1170 1170,1260
but, {} one of the
但是，同样挑战这类系统的一件事是，

2097
01:09:33,670 --> 01:09:35,110
0,240 240,450 450,750 750,1290 1290,1440
things that's also challenging these

2098
01:09:35,110 --> 01:09:36,190
0,180 180,270 270,690 690,900 900,1080
kind of systems,| is like
|就像你如何表示用户组，

2099
01:09:36,190 --> 01:09:37,300
0,150 150,240 240,420 420,840 840,1110
how do you represent groups

2100
01:09:37,300 --> 01:09:38,980
0,120 120,660 1050,1380 1380,1560 1560,1680
of users,| {like,we} [shot] a
|就像我们在周日的报纸上拍摄的那样，

2101
01:09:38,980 --> 01:09:39,820
0,210 210,390 390,480 480,570 570,840
little bit in the Sunday

2102
01:09:39,820 --> 01:09:41,920
0,600 780,1410 1410,1710 1710,1980 1980,2100
paper,| {} we're gonna have
|我们会有团体名称，

2103
01:09:41,920 --> 01:09:43,180
0,210 210,840 840,990 990,1050 1050,1260
group names,| all the keys
|组名的所有密钥

2104
01:09:43,180 --> 01:09:44,410
0,150 150,210 210,420 420,870 870,1230
for the group names| and
|以及如何创建和管理它们，以及如何真正地将它们插入其中，

2105
01:09:44,410 --> 01:09:45,280
0,180 180,270 270,540 540,690 690,870
how to create them and

2106
01:09:45,280 --> 01:09:46,630
0,300 300,510 510,630 630,1020 1050,1350
manage them and actually stick

2107
01:09:46,630 --> 01:09:47,650
0,120 120,390 390,630 630,720 720,1020
them in,| how do you
|您如何将这些合并到记录链中，即姓名记录

2108
01:09:47,950 --> 01:09:49,930
0,600 600,900 900,1170 1170,1740 1740,1980
incorporate those in a in

2109
01:09:49,930 --> 01:09:52,540
0,630 840,1320 1320,1470 1470,2010 2100,2610
the chain of records, name

2110
01:09:52,540 --> 01:09:54,160
0,450 630,930 930,1110 1110,1260 1260,1620
records| {} and {keybase,is -}
|而Keybase真的是一个为此而战的故事。

2111
01:09:54,160 --> 01:09:55,990
0,450 450,1110 1110,1410 1410,1530 1530,1830
really really fought out story

2112
01:09:55,990 --> 01:09:56,420
0,90 90,360
for that.|
|

2113
01:09:56,860 --> 01:09:59,380
0,1320 1320,1740 1860,2040 2040,2250 2250,2520
{} And you know actually
你知道，实际上非常令人印象深刻的可能是你知道真相，

2114
01:09:59,380 --> 01:10:00,850
0,120 120,330 330,900 930,1380 1380,1470
a very impressive probably you

2115
01:10:00,850 --> 01:10:01,980
0,210 210,390 390,900
know the truth,|
|

2116
01:10:02,220 --> 01:10:04,620
0,330 330,1080 1080,1110 1140,1530 1530,2400
I probably I probably considered
我可能我可能被认为是最好的去中心化的PKI。

2117
01:10:04,620 --> 01:10:06,600
0,90 90,600 690,1080 1080,1320 1350,1980
the best sort of {decentralized

2118
01:10:06,600 --> 01:10:07,830
0,360 360,420 420,510 510,1020 1020,1230
-} you know PKI out

2119
01:10:07,830 --> 01:10:08,400
0,300
there.|
|

2120
01:10:09,150 --> 01:10:10,170
0,270 270,330 330,600 600,870 870,1020
And the most thought out,|
最深思熟虑的是，|

2121
01:10:10,170 --> 01:10:11,130
0,120 120,390 390,600 600,840 840,960
they're probably most {widely -}
它们可能是使用最广泛的。

2122
01:10:11,130 --> 01:10:11,880
0,510
used.|
|

2123
01:10:18,440 --> 01:10:19,550
0,180 180,270 270,540 540,690 690,1110
So are there any benefits
那么像块堆栈方法这样做有什么好处吗，

2124
01:10:19,550 --> 01:10:20,660
0,120 120,360 360,690 750,930 930,1110
of doing it of like

2125
01:10:20,660 --> 01:10:21,980
0,330 330,810 810,1170 1170,1230 1230,1320
{blockstack -} method,| or is
|或者它只是更具可扩展性。

2126
01:10:21,980 --> 01:10:23,930
0,90 90,360 360,480 480,1170 1530,1950
it just more extensible. {}|
|

2127
01:10:23,930 --> 01:10:24,770
0,270 270,450 450,540 540,630 630,840
Well, one of the things
嗯，实际上阻碍[差距]纠正的一件事是，

2128
01:10:24,770 --> 01:10:26,090
0,120 120,510 510,840 840,1020 1020,1320
that actually blocks that [gap]

2129
01:10:26,090 --> 01:10:27,650
0,420 420,810 810,990 990,1410 1410,1560
correct is,| {} is this
|这是独特性吗，

2130
01:10:27,650 --> 01:10:30,140
0,720 810,1770 1770,2070 2070,2280 2280,2490
uniqueness properties,| because the web
|因为信任的网络，基本上没有一个全球命名系统，

2131
01:10:30,140 --> 01:10:31,340
0,60 60,450 450,600 600,990 990,1200
of trust, there's basically not

2132
01:10:31,340 --> 01:10:32,810
0,90 90,510 510,870 870,1380 1380,1470
a global naming system,| you
|你知道就像你知道这就像我的待办事项清单或者联系人清单，

2133
01:10:32,810 --> 01:10:33,950
0,210 210,450 450,510 510,810 930,1140
know like you know it

2134
01:10:33,950 --> 01:10:35,120
0,240 240,420 420,600 600,930 930,1170
is like my todo list

2135
01:10:35,120 --> 01:10:36,760
0,60 60,240 240,930 930,1380
or my contact list,|
|

2136
01:10:36,950 --> 01:10:38,990
0,720 720,1320 1320,1440 1440,1560 1560,2040
{} and you know whatever
不管我说谁，你都知道，

2137
01:10:38,990 --> 01:10:41,030
0,300 300,300 300,1110 1800,1950 1950,2040
who I name,| if I
|如果我对某个特定的公钥有一个名字John，那就是我的John

2138
01:10:41,030 --> 01:10:42,260
0,120 120,150 150,360 360,810 810,1230
have a name John for

2139
01:10:42,260 --> 01:10:43,460
0,180 180,480 480,750 750,990 990,1200
some particular public key, that

2140
01:10:43,460 --> 01:10:45,290
0,120 120,330 330,810 1110,1830 1830,1830
is my John| and {}
|如果我打发约翰去见你，就像弦上的约翰

2141
01:10:45,290 --> 01:10:46,640
0,720 720,780 780,990 990,1260 1260,1350
if I sent John to

2142
01:10:46,640 --> 01:10:49,010
0,240 240,330 330,810 1260,1800 1800,2370
you is like string John|
|

2143
01:10:49,010 --> 01:10:50,540
0,150 150,270 270,570 570,900 900,1530
and it probably resolve different
而且它在你的联系人列表中的解析方式可能与我的不同。

2144
01:10:50,540 --> 01:10:53,570
0,510 510,1140 1410,2310 2310,2820 2820,3030
differently {in,your} {} {contact,list} than

2145
01:10:53,570 --> 01:10:54,160
0,390
mine.|
|

2146
01:10:55,280 --> 01:10:56,930
0,210 210,300 300,690 960,1350 1350,1650
So, in fact, {} {so,keybase
所以，事实上，密钥库更多是去中心化的，

2147
01:10:56,930 --> 01:10:59,390
0,360 360,600 600,1350 1350,1560 1560,2460
-} much more is decentralized,|
|

2148
01:10:59,390 --> 01:11:01,010
0,540 540,690 690,1110 1110,1350 1350,1620
{} but it doesn't really
但它并不真正适用于这些全球唯一的名称，

2149
01:11:01,010 --> 01:11:02,480
0,300 300,510 510,780 780,1170 1170,1470
go for these global unique

2150
01:11:02,480 --> 01:11:03,220
0,540
names,|
|

2151
01:11:03,930 --> 01:11:04,650
0,180 180,300 300,420 420,480 480,720
{} it is the case
你偶尔会知道密钥库的情况，

2152
01:11:04,650 --> 01:11:05,610
0,240 240,390 390,540 540,720 720,960
that you know {keybase -}

2153
01:11:05,610 --> 01:11:06,960
0,180 180,240 240,300 300,690 690,1350
once in a while,| publishers,
|发布者，所有名称的哈希，区块链中所有名称的完整[]树，

2154
01:11:06,960 --> 01:11:08,760
0,390 540,1020 1020,1170 1170,1620 1620,1800
the hash of all the

2155
01:11:08,760 --> 01:11:11,130
0,690 720,1320 1320,1470 1470,1920 1920,2370
names, of the complete []

2156
01:11:11,130 --> 01:11:12,210
0,240 240,360 360,480 480,810 810,1080
tree of all names in

2157
01:11:12,210 --> 01:11:15,300
0,1050 1050,1200 1200,1650 1650,2100 2550,3090
{} in blockchain too {},|
|

2158
01:11:15,300 --> 01:11:16,560
0,150 150,330 330,570 570,1050 1050,1260
so you can verify what
这样你就可以验证你的密钥库实际上不是在玩游戏，

2159
01:11:16,560 --> 01:11:17,520
0,120 120,300 300,540 540,840 840,960
your {keybase -} actually is

2160
01:11:17,520 --> 01:11:20,280
0,480 480,810 810,1290 1710,2580 2580,2760
not playing games,| { -}
|但你知道，这要多得多，

2161
01:11:20,280 --> 01:11:22,260
0,270 270,390 390,1050 1350,1680 1680,1980
but you know, {} it's

2162
01:11:22,260 --> 01:11:23,430
0,240 240,690 690,810 810,990 990,1170
much more,| it doesn't really
|它实际上并没有全球唯一的名称。

2163
01:11:23,430 --> 01:11:24,680
0,120 120,480 480,690 690,1170
have globally unique names.|
|

2164
01:11:30,000 --> 01:11:31,890
0,330 330,570 570,630 630,1320 1320,1890
Sorry, just a clarification question,|
抱歉，我只想问个澄清问题，|

2165
01:11:31,920 --> 01:11:33,600
0,450 450,750 750,990 990,1200 1230,1680
earlier on in the lecture,|
在讲座的前面部分，|

2166
01:11:33,600 --> 01:11:35,640
0,120 120,480 480,960 1170,1800 1800,2040
you mentioned how users have
您提到了用户如何拥有，

2167
01:11:35,640 --> 01:11:37,650
0,450 660,1230 1230,1380 1380,1590 1590,2010
the,| basically they can choose
|基本上，他们可以选择向谁显示他们的数据

2168
01:11:37,650 --> 01:11:38,730
0,150 150,390 390,630 630,780 780,1080
who to show their data

2169
01:11:38,730 --> 01:11:41,040
0,420 660,1260 1260,1440 1440,1860 1860,2310
to| {} or who they
|或者他们也允许谁访问他们的数据，

2170
01:11:41,220 --> 01:11:43,080
0,420 510,1230 1260,1440 1440,1590 1590,1860
give access to their data

2171
01:11:43,080 --> 01:11:44,880
0,390 660,990 990,1080 1080,1410 1470,1800
too,| but I'm not quite
|但我不太确定，我看到了这一点是如何在那个系统中实现的。

2172
01:11:44,880 --> 01:11:46,500
0,240 240,240 240,600 600,1140 1350,1620
sure, I see how that's

2173
01:11:46,500 --> 01:11:49,140
0,630 630,1140 1200,1470 1470,2100
implemented within that system.|
|

2174
01:11:50,750 --> 01:11:52,790
0,270 270,1110 1110,1500 1530,1860 1860,2040
Yeah, there are the way,|
是啊，有办法的，|

2175
01:11:52,790 --> 01:11:53,780
0,270 270,420 420,570 570,750 750,990
one way to do it|
有一种方法可以做到这一点|

2176
01:11:53,780 --> 01:11:55,130
0,180 180,270 270,960 990,1170 1170,1350
and {} I don't know
我不知道区块堆栈到底能做什么，

2177
01:11:55,130 --> 01:11:56,870
0,600 600,810 810,1020 1050,1320 1320,1740
exactly what to blockstack that

2178
01:11:56,870 --> 01:11:58,670
0,330 330,720 720,1020 1020,1350 1350,1800
does is,| that you encrypt
|为不同的用户加密相同的数据，

2179
01:11:58,670 --> 01:12:00,560
0,60 60,330 330,870 1290,1680 1680,1890
the same data {} for

2180
01:12:00,560 --> 01:12:02,180
0,270 270,720 750,900 900,1440 1470,1620
different users,| so if you
|因此，如果您只想与用户1或用户2共享数据，

2181
01:12:02,180 --> 01:12:04,460
0,600 780,1740 1740,1980 1980,2070 2070,2280
wanna {} share your data

2182
01:12:04,460 --> 01:12:05,960
0,330 330,810 840,1230 1230,1440 1440,1500
only with user one or

2183
01:12:05,960 --> 01:12:06,820
0,240 240,660
user two,|
|

2184
01:12:07,050 --> 01:12:08,850
0,450 450,1020 1020,1110 1140,1560 1560,1800
{} then, { -} you
然后，您使用用户1和用户2的公钥进行加密

2185
01:12:08,850 --> 01:12:10,710
0,600 600,720 720,900 900,1260 1260,1860
encrypt, you know with the

2186
01:12:10,740 --> 01:12:12,150
0,540 540,840 840,960 960,1170 1170,1410
public keys of user one

2187
01:12:12,150 --> 01:12:13,890
0,210 210,570 930,1110 1110,1500 1500,1740
user two| and then those
|只有这两个人能破译它，

2188
01:12:13,890 --> 01:12:14,550
0,90 90,150 150,390 390,540 540,660
are the only two that

2189
01:12:14,550 --> 01:12:15,500
0,120 120,510 510,690
can decrypt it,|
|

2190
01:12:18,960 --> 01:12:19,770
0,150 150,240 240,420 420,570 570,810
and so that gives you
这就为您提供了访问控制列表。

2191
01:12:19,770 --> 01:12:21,420
0,270 270,660 660,1080
access control lists.|
|

2192
01:12:25,850 --> 01:12:26,960
0,180 180,480 480,660 660,870 870,1110
I see, so you'd have
我明白了，所以你必须为每个你想要提供数据的人，

2193
01:12:26,960 --> 01:12:28,490
0,300 330,600 600,870 870,1380 1380,1530
to for each person you

2194
01:12:28,490 --> 01:12:29,840
0,510 570,750 750,990 990,1080 1080,1350
wanted to give the data

2195
01:12:29,840 --> 01:12:30,980
0,210 210,360 360,570 570,690 690,1140
to,| you have to encrypt
|你必须用他们的公钥对其加密。

2196
01:12:30,980 --> 01:12:32,780
0,150 180,690 900,1110 1110,1440 1440,1800
it with their public key.|
|

2197
01:12:34,240 --> 01:12:35,020
0,270 270,360 360,480 480,630 630,780
And you can get more
你可以在这方面变得更复杂，

2198
01:12:35,020 --> 01:12:36,520
0,600 600,870 870,1260 1260,1410 1410,1500
sophisticated about this,| you know
|你知道你实际上可以拥有组密钥

2199
01:12:36,520 --> 01:12:37,960
0,150 150,240 240,480 480,630 630,1440
you can actually have {group,keys}|
|

2200
01:12:38,350 --> 01:12:39,940
0,750 750,840 840,990 990,1410 1410,1590
and you know give a
你知道，给一群用户，

2201
01:12:39,940 --> 01:12:41,050
0,180 180,270 270,810 810,900 900,1110
group of users,| you know
|你知道你有一个日志箱，

2202
01:12:41,050 --> 01:12:42,130
0,390 390,570 570,900 900,1020 1020,1080
access to you have a

2203
01:12:42,130 --> 01:12:44,860
0,300 300,810 1200,1860 1860,2580 2580,2730
log box,| that has a
|其中包含组密钥的

2204
01:12:44,860 --> 01:12:45,940
0,210 210,450 450,540 540,840 840,1080
group key in it| and
|并使用您所知道的不同用户的公钥增加日志框

2205
01:12:45,940 --> 01:12:48,190
0,540 1200,1620 1620,1710 1710,1950 1950,2250
you increase the log box

2206
01:12:48,190 --> 01:12:49,510
0,120 120,240 240,510 510,1140 1200,1320
with the different users you

2207
01:12:49,510 --> 01:12:50,920
0,180 180,450 450,960 960,1140 1140,1410
know public keys| and then
|然后他们就可以进入那个日志箱，

2208
01:12:50,920 --> 01:12:51,940
0,180 180,360 360,630 630,750 750,1020
they get access to that

2209
01:12:51,940 --> 01:12:53,020
0,270 270,630 630,810 810,990 990,1080
log box,| they get the
|他们从里面拿到了钥匙

2210
01:12:53,020 --> 01:12:53,740
0,210 210,390 390,510 510,630 630,720
key out of it| and
|然后他们可以装饰钥匙，

2211
01:12:53,740 --> 01:12:54,760
0,120 120,210 210,330 330,750 750,1020
then they can decorate the

2212
01:12:54,760 --> 01:12:55,780
0,210 210,360 360,570 570,780 780,1020
key,| so you only have
|因此，您只需对数据加密一次，而不是多次。

2213
01:12:55,780 --> 01:12:57,310
0,330 570,990 990,1050 1050,1290 1290,1530
to encrypt the data only

2214
01:12:57,310 --> 01:12:59,410
0,510 690,990 990,1110 1110,1650 1650,2100
once instead of multiple times.|
|

2215
01:13:00,320 --> 01:13:01,400
0,150 150,390 390,510 510,630 630,1080
And you have to decrypt
而且您必须以多种类型解密加密的[日志]框。

2216
01:13:01,400 --> 01:13:03,020
0,180 180,720 750,1050 1050,1320 1320,1620
the encrypted [log] box multiple

2217
01:13:03,020 --> 01:13:03,700
0,450
types.|
|

2218
01:13:04,540 --> 01:13:05,540
0,270 270,660
Thank you.|
谢谢。|

2219
01:13:08,040 --> 01:13:09,180
0,330 330,510 510,660 660,750 750,1140
{} That would be down
这将是区域文件的内容级别的下降，对。

2220
01:13:09,180 --> 01:13:10,200
0,180 180,300 300,690 690,870 870,1020
at the level of the

2221
01:13:10,200 --> 01:13:12,540
0,480 480,600 600,720 720,1530 1890,2340
content of the zone file,

2222
01:13:12,540 --> 01:13:13,280
0,450
right.|
|

2223
01:13:13,770 --> 01:13:15,870
0,390 390,840 840,1050 1050,1530 1650,2100
{} Yeah, {presumably -} {}
是的，假设或者可能是区域文件为块盒子构建密钥的密钥，如果你愿意的话。

2224
01:13:15,870 --> 01:13:17,250
0,480 480,630 630,960 960,1050 1050,1380
or may be the key

2225
01:13:17,250 --> 01:13:18,660
0,240 240,750 750,1080 1080,1350 1350,1410
that zone files build a

2226
01:13:18,660 --> 01:13:19,770
0,270 270,480 480,600 600,840 840,1110
key for the block box,

2227
01:13:19,770 --> 01:13:20,580
0,90 90,210 210,510
if you will.|
|

2228
01:13:22,200 --> 01:13:23,370
0,180 180,450 450,720 720,900 900,1170
And again I'm not actually
同样，我也不能百分之百地确定块堆栈块文件系统实际上是如何控制的，

2229
01:13:23,370 --> 01:13:24,360
0,30 30,180 180,420 420,600 600,990
a hundred percent sure exactly

2230
01:13:24,360 --> 01:13:27,260
0,1050 1680,2610
how {}

2231
01:13:30,520 --> 01:13:32,830
0,390 390,630 630,1770 1770,2100 2100,2310
{} blockstack {} block file

2232
01:13:32,830 --> 01:13:34,750
0,570 570,930 930,1440 1440,1770 1770,1920
system does actually control,| what
|它所做的一切，

2233
01:13:34,750 --> 01:13:35,780
0,90 90,240 240,360 360,690
it does it all,|
|

2234
01:13:37,340 --> 01:13:38,750
0,210 210,390 390,630 630,810 810,1410
but other people have done
但其他人也做过这样的设计。

2235
01:13:38,750 --> 01:13:40,120
0,270 270,450 450,540 540,1110
these kinds of designs.|
|

2236
01:13:41,930 --> 01:13:43,550
0,150 150,270 270,630 630,1140 1170,1620
Do you think {} system
你认为这样的系统能够与集中式模式竞争吗

2237
01:13:43,550 --> 01:13:44,240
0,180 180,360 360,450 450,600 600,690
like this be able to

2238
01:13:44,240 --> 01:13:45,830
0,420 420,600 600,810 810,900 900,1590
compete with like the centralized

2239
01:13:45,830 --> 01:13:47,600
0,450 480,660 660,930 930,1080 1080,1770
model| in terms of performance
|在性能或可伸缩性方面，

2240
01:13:47,600 --> 01:13:49,580
0,420 450,1350 1560,1710 1710,1860 1860,1980
or scalability,| and what would
|那要付出什么代价。

2241
01:13:49,580 --> 01:13:52,250
0,60 60,450 1170,1290 1290,2460 2460,2670
it take.| {} I, I
|我不知道，问得好，

2242
01:13:52,250 --> 01:13:54,040
0,450 450,840
don't know,

2243
01:13:54,270 --> 01:13:56,100
0,240 240,870 930,1410 1410,1560 1560,1830
good question,| {} I don't
|我真的不知道答案，

2244
01:13:56,100 --> 01:13:57,420
0,180 180,300 300,450 450,1140 1140,1320
really know the answer,| it's
|这是正确的案例，

2245
01:13:57,420 --> 01:13:58,620
0,90 90,330 330,600 600,780 780,1200
the case correct,| like even
|即使是最简单的尺寸也不是那么容易扩展的，

2246
01:13:58,800 --> 01:13:59,820
0,150 150,540 540,720 720,780 780,1020
the simplest size is not

2247
01:13:59,820 --> 01:14:00,960
0,270 270,450 450,540 540,1020 1050,1140
that easy to scale,| you
|你知道我们已经读了相当多的论文，对吗

2248
01:14:00,960 --> 01:14:02,460
0,210 210,510 510,1200 1200,1470 1470,1500
know we've read quite a

2249
01:14:02,460 --> 01:14:03,600
0,180 180,240 240,720 720,960 960,1140
number of papers, right| to
|了解如何让它们在数百万用户之间进行扩展

2250
01:14:03,600 --> 01:14:06,270
0,720 720,1140 1140,1410 1890,2550 2580,2670
see how a how to

2251
01:14:06,270 --> 01:14:07,860
0,180 180,330 330,810 810,1080 1080,1590
make them {} scale between

2252
01:14:07,860 --> 01:14:10,260
0,330 330,450 450,930 1290,1950 1950,2400
millions of users| {} and
|所以你知道，哦，要让大量的用户获得任何东西并不容易。

2253
01:14:10,260 --> 01:14:11,760
0,270 270,420 420,1320
so you know,

2254
01:14:12,980 --> 01:14:14,600
0,420 420,750 900,1230 1230,1410 1410,1620
oh, { -} it's getting

2255
01:14:14,600 --> 01:14:15,920
0,330 330,450 450,510 510,990 990,1320
anything to a large large

2256
01:14:15,920 --> 01:14:16,790
0,210 210,270 270,540 540,630 630,870
number of users is not

2257
01:14:16,790 --> 01:14:17,360
0,270
easy.|
|

2258
01:14:17,630 --> 01:14:20,390
0,690 690,1320 1320,1620 1620,2130 2130,2760
{} And {} certainly, {}
当然，在去中心化应用程序的情况下，

2259
01:14:20,390 --> 01:14:22,550
0,60 450,570 570,1050 1050,1500 1530,2160
in the case with decentralized

2260
01:14:22,550 --> 01:14:23,660
0,420 420,630 630,750 750,900 900,1110
apps,| not gonna be easy
|这也不容易，

2261
01:14:23,660 --> 01:14:24,770
0,450 450,690 720,780 810,930 930,1110
either,| but on the other
|但另一方面，如果没有字节共享，

2262
01:14:24,770 --> 01:14:25,760
0,270 270,450 450,570 570,720 720,990
hand, like if there's not

2263
01:14:25,760 --> 01:14:27,890
0,270 270,810 1140,1500 1710,1860 1860,2130
byte sharing,| like the user
|就像用户实际上只需要分享就会失去10个其他用户一样，

2264
01:14:27,890 --> 01:14:28,850
0,240 240,540 540,630 630,870 870,960
one actually {} only have

2265
01:14:28,850 --> 01:14:29,870
0,60 60,300 300,420 420,810 810,1020
to share to lose ten

2266
01:14:29,870 --> 01:14:31,490
0,210 210,570 1080,1200 1200,1440 1440,1620
other users,| will probably not
|可能不是什么大问题，

2267
01:14:31,490 --> 01:14:32,750
0,120 120,180 180,480 510,1170 1200,1260
be a big issue,| in
|在某些方面，您可以认为分散的体系结构基本上是按用户划分的，

2268
01:14:33,140 --> 01:14:33,830
0,210 210,360 360,450 450,540 540,690
some ways you can think

2269
01:14:33,830 --> 01:14:35,870
0,180 180,240 240,870 870,1890 1920,2040
about the decentralized architecture is

2270
01:14:35,870 --> 01:14:37,400
0,330 330,750 750,870 870,1320
basically sharded by user,|
|

2271
01:14:42,280 --> 01:14:43,600
0,270 270,420 420,840 840,1050 1050,1320
and each app here runs
这里的每个应用程序都在用户的一台计算机上运行，

2272
01:14:43,600 --> 01:14:45,580
0,60 60,240 240,360 360,1050 1260,1980
in one of user's computers,|
|

2273
01:14:46,380 --> 01:14:47,610
0,390 390,570 570,750 750,1080 1080,1230
so you don't need might
因此，您不需要缓存的数据中心，

2274
01:14:47,610 --> 01:14:48,920
0,300 300,690 690,1080
data centers of

2275
01:14:50,330 --> 01:14:51,320
0,750
caches,|
|

2276
01:14:57,370 --> 01:14:57,970
0,180 180,270 270,390 390,480 480,600
so I don't know what
所以我不知道这个问题的答案是什么，

2277
01:14:57,970 --> 01:14:58,720
0,90 90,270 270,330 330,480 480,750
the answer to that question

2278
01:14:58,720 --> 01:14:59,520
0,240 240,510
actually is,|
|

2279
01:15:00,850 --> 01:15:01,600
0,180 180,300 300,480 480,570 570,750
I will not be able
我不能给你一个不同的答案。

2280
01:15:01,600 --> 01:15:02,290
0,60 60,180 180,300 300,360 360,690
to give you a different

2281
01:15:02,290 --> 01:15:03,000
0,390
answer.|
|

2282
01:15:07,120 --> 01:15:08,200
0,150 150,420 420,480 480,720 720,1080
It's clearly the case that
很明显，人们已经证明了这些集中式设计具有更大的可扩展性，

2283
01:15:08,200 --> 01:15:09,910
0,180 180,270 270,780 780,990 990,1710
people have demonstrated bigger scalability

2284
01:15:09,910 --> 01:15:14,200
0,60 60,2790 2850,3330 3330,3990 4050,4290
of those centralized designs, {}|
|

2285
01:15:14,200 --> 01:15:15,310
0,330 330,540 540,660 660,870 870,1110
at least so far we've
至少到目前为止，我们已经看到了分散化的一次，

2286
01:15:15,310 --> 01:15:17,050
0,300 300,930 930,1020 1020,1560 1560,1740
seen in the decentralized once,|
|

2287
01:15:17,050 --> 01:15:18,130
0,330 330,570 570,810 810,900 900,1080
but one reason of that
但其中一个原因当然是集中式设计被广泛使用，

2288
01:15:18,130 --> 01:15:19,870
0,60 60,300 300,450 450,720 1140,1740
of course is that the

2289
01:15:20,380 --> 01:15:23,170
0,570 570,990 990,1560 1710,2520 2520,2790
centralized designs are widely used,|
|

2290
01:15:23,170 --> 01:15:24,940
0,60 60,330 330,690 690,1380 1440,1770
the most popular, the most
最受欢迎、部署最多的案例。

2291
01:15:24,940 --> 01:15:26,900
0,690 1260,1860
deployed cases.|
|

2292
01:15:28,430 --> 01:15:29,720
0,180 180,570 570,1020 1020,1140 1140,1290
I think the, to me
我认为，对我来说，分散的设计就是有趣的设计

2293
01:15:29,720 --> 01:15:31,250
0,90 90,810 810,1080 1080,1440 1440,1530
the decentralized {} design is

2294
01:15:31,250 --> 01:15:34,700
0,180 180,1350 1350,1920 2340,2970 3150,3450
just intriguing design| and {}
|而且它可以让它发挥作用，

2295
01:15:34,700 --> 01:15:35,660
0,210 210,420 420,600 600,840 840,960
that it could make to

2296
01:15:35,660 --> 01:15:36,830
0,480 480,570 570,810 810,960 960,1170
work,| you know {it,would,be} pretty
|你知道这会很酷的。

2297
01:15:36,830 --> 01:15:37,500
0,420
cool.|
|

2298
01:15:45,980 --> 01:15:47,240
0,240 240,420 420,870 870,1020 1020,1260
Any other thoughts that people
人们可能有的或喜欢争论的任何其他想法。

2299
01:15:47,240 --> 01:15:48,360
0,150 150,450 450,750
might have for,

2300
01:15:51,800 --> 01:15:52,940
0,240 240,360 360,450 450,720 720,1140
or like to argue about.|
|

2301
01:15:59,330 --> 01:16:01,160
0,180 180,600 600,1080 1080,1530 1560,1830
I still feel like the
我仍然觉得在存储方面，

2302
01:16:01,160 --> 01:16:03,240
0,780 780,1830
storage aspect,|
|

2303
01:16:03,760 --> 01:16:05,890
0,720 750,1290 1290,1470 1470,1710 1710,2130
is, like the thing that
就像威廉指出的那样，

2304
01:16:05,980 --> 01:16:07,990
0,480 480,960 960,1410 1410,1740 1740,2010
that William was pointing out,|
|

2305
01:16:07,990 --> 01:16:10,780
0,450 780,1080 1080,1800 2100,2550 2550,2790
where like you maybe have
就像你可能有一个不变的文件，它是用户信息，

2306
01:16:10,780 --> 01:16:12,640
0,60 60,510 510,960 960,1320 1320,1860
an immutable file that's the

2307
01:16:12,670 --> 01:16:14,230
0,180 180,570 570,1290 1290,1440 1440,1560
the user information,| but the
|但是你在其他地方拥有的可变文件，

2308
01:16:14,230 --> 01:16:15,700
0,420 420,780 780,900 900,1050 1050,1470
mutable file that you have

2309
01:16:15,850 --> 01:16:18,820
0,660 660,1350 1800,2070 2070,2310 2310,2970
somewhere else,| is like a
|是个大问题吗？

2310
01:16:18,820 --> 01:16:21,620
0,540 540,1380 1710,2610
huge problem? {}|
|

2311
01:16:22,160 --> 01:16:23,150
0,210 210,360 360,540 540,720 720,990
In so much that,| like
在这种情况下，|像我一样，我真的不明白如何确保您可能拥有的大量可变存储的冗余。

2312
01:16:23,150 --> 01:16:25,400
0,180 180,330 330,660 660,1140 1140,2250
I I don't really understand

2313
01:16:25,730 --> 01:16:27,980
0,420 420,660 660,1020 1020,1470 1470,2250
how you can assure redundancy

2314
01:16:27,980 --> 01:16:31,400
0,660 1200,1860 2070,2820 2820,3120 3120,3420
for a large amount of

2315
01:16:31,430 --> 01:16:33,050
0,600 600,1080 1080,1200 1200,1350 1350,1620
mutable storage that you might

2316
01:16:33,050 --> 01:16:36,440
0,600 1050,1320 1320,1530 1530,1860 1860,3390
have.| Yeah, I think the
|是的，我认为答案是，裁员可能不是那么困难

2317
01:16:36,440 --> 01:16:37,610
0,240 240,330 330,780 780,1020 1020,1170
answer, the redundancy maybe not

2318
01:16:37,610 --> 01:16:38,810
0,180 180,510 540,720 720,870 870,1200
that tough| and I think
|我认为用户对冗余负有责任，

2319
01:16:38,810 --> 01:16:40,010
0,90 90,390 390,480 480,990 990,1200
the user is responsible for

2320
01:16:40,010 --> 01:16:42,380
0,630 1020,1830 1830,2010 2010,2250 2250,2370
redundancy,| {} so if you
|因此，如果您想使用您自己的待办事项列表文件，

2321
01:16:42,380 --> 01:16:44,450
0,330 330,630 630,1260 1620,1830 1830,2070
like to use you own

2322
01:16:44,450 --> 01:16:45,470
0,90 90,180 180,330 330,510 510,1020
it {todo -} list file,|
|

2323
01:16:45,780 --> 01:16:47,220
0,270 270,450 450,870 870,960 960,1440
and your job to replicate
而你的工作是复制它，你知道很多次，

2324
01:16:47,220 --> 01:16:48,330
0,240 240,360 360,480 480,780 780,1110
it, you know multiple times,|
|

2325
01:16:48,330 --> 01:16:50,400
0,180 180,750 960,1320 1320,1590 1590,2070
so the {blockstack -} storage
所以区块堆栈存储服务器可以为您做到这一点，

2326
01:16:50,400 --> 01:16:51,810
0,450 450,600 600,780 780,1050 1050,1410
servers do that for you,|
|

2327
01:16:52,050 --> 01:16:53,340
0,390 390,540 540,690 690,750 750,1290
but you've got to arrange
但你必须安排空间和不同的存储提供商来做到这一点。

2328
01:16:53,340 --> 01:16:55,680
0,90 90,180 180,660 660,1320 1320,2340
you know basically for {}

2329
01:16:55,770 --> 01:16:57,810
0,750 750,1080 1080,1410 1410,1770 1770,2040
space and a different storage

2330
01:16:57,810 --> 01:17:00,150
0,570 570,750 750,1440 1590,2190 2190,2340
providers to { -} do

2331
01:17:00,150 --> 01:17:00,780
0,390
that.|
|

2332
01:17:01,450 --> 01:17:02,050
0,120 120,240 240,300 300,480 480,600
And so I think in
所以我认为在报纸上，

2333
01:17:02,050 --> 01:17:02,920
0,210 210,420 420,510 510,690 690,870
the paper,| they talk about
|他们谈论的是，

2334
01:17:02,920 --> 01:17:04,090
0,120 120,120 120,450 450,930 930,1170
like,| oh you replicated that
|哦，你可能复制了谷歌硬盘和S3，

2335
01:17:04,090 --> 01:17:06,070
0,540 540,1080 1080,1080 1290,1560 1560,1980
maybe {} a Google drive

2336
01:17:06,070 --> 01:17:07,080
0,690
{and,S3},|
|

2337
01:17:07,640 --> 01:17:09,200
0,240 240,570 570,870 870,1260 1260,1560
and presumably S3 internally its
想必S3内部也有自己的复制，对吧，

2338
01:17:09,200 --> 01:17:11,060
0,360 360,930 960,1230 1230,1380 1380,1860
own replication, right,| so hopefully
|所以希望你知道，也许只是真的以为只有S3

2339
01:17:11,060 --> 01:17:12,020
0,60 60,240 240,570 570,750 750,960
you know maybe just actually

2340
01:17:12,020 --> 01:17:13,040
0,210 210,510 510,720 720,900 900,1020
thought only {S3 -}| and
|它应该是相当可靠的，

2341
01:17:13,040 --> 01:17:14,180
0,60 60,210 210,300 300,600 600,1140
it should be pretty reliable,|
|

2342
01:17:14,890 --> 01:17:16,270
0,330 330,540 540,930 930,1050 1050,1380
probably more reliable than storing
可能比将数据存储在固态硬盘和笔记本电脑中更可靠。

2343
01:17:16,270 --> 01:17:17,320
0,240 240,360 360,510 510,960 960,1050
data on your SSD, in

2344
01:17:17,320 --> 01:17:18,340
0,210 210,750
your laptop.|
|

2345
01:17:22,080 --> 01:17:23,370
0,150 150,420 420,780 780,870 870,1290
The zone files are small,|
区域文件很小，|

2346
01:17:23,370 --> 01:17:24,990
0,180 180,390 390,600 600,930 930,1620
so they're just widely replicated|
所以它们只是被广泛复制|

2347
01:17:25,050 --> 01:17:26,250
0,480 480,780 780,990 990,1110 1110,1200
and you don't have to
而且你也不必信任商店供应商。

2348
01:17:26,250 --> 01:17:28,180
0,480 480,810 840,1140 1140,1650
trust the store provider.|
|

2349
01:17:54,240 --> 01:17:55,560
0,210 210,480 480,1020
Any other thoughts?|
还有其他想法吗？|

2350
01:17:58,090 --> 01:17:59,020
0,180 180,360 360,690 690,870 870,930
I was thinking it's a
我在想，这有点浪费，

2351
01:17:59,020 --> 01:18:00,490
0,270 270,480 480,1080 1080,1290 1290,1470
little bit wasteful,| that you
|为了注册一个名字而拥有的

2352
01:18:00,490 --> 01:18:02,080
0,540 570,720 720,900 900,1050 1050,1590
have in order to register

2353
01:18:02,080 --> 01:18:03,010
0,90 90,360 360,540 540,630 630,930
a name| and to use
|要使用这个名字系统，你必须付费。

2354
01:18:03,010 --> 01:18:04,120
0,180 180,420 420,750 750,870 870,1110
this name system, you have

2355
01:18:04,120 --> 01:18:05,840
0,360 630,1230
to pay.|
|

2356
01:18:06,030 --> 01:18:06,960
0,570

2357
01:18:07,440 --> 01:18:08,910
0,300 300,510 510,630 630,810 810,1470
Yeah, so I was thinking
是的，所以我显然是在考虑基于区块链的系统，

2358
01:18:09,270 --> 01:18:12,330
0,690 690,870 870,1500 1710,2550 2550,3060
obviously on a blockchain based

2359
01:18:12,330 --> 01:18:14,280
0,480 480,630 630,990 990,1230 1230,1950
system,| you have to incentivize
|你必须激励矿工，

2360
01:18:14,280 --> 01:18:16,200
0,60 60,660 660,1170 1260,1650 1650,1920
the miners,| but maybe there's
|但也许还有一种不同的更便宜的方式。

2361
01:18:16,200 --> 01:18:18,780
0,90 90,780 960,1830 1830,2190
a different cheaper way.|
|

2362
01:18:19,600 --> 01:18:21,940
0,660 900,1080 1080,1680 1680,2100 2100,2340
Yeah, yeah, I I'm not
是啊，是啊，我我不确定，

2363
01:18:21,940 --> 01:18:23,290
0,510 540,810 810,1080 1080,1140 1140,1350
sure,| it seems in some
|在某种程度上，它似乎是一种货币

2364
01:18:23,290 --> 01:18:26,320
0,420 420,1890 1920,2580 2580,2820 2820,3030
ways {} currency| and this
|这在某种程度上是非常[耦合]的，

2365
01:18:26,320 --> 01:18:27,880
0,90 90,300 300,390 540,990 990,1560
is sort of { -}

2366
01:18:28,000 --> 01:18:30,370
0,540 540,1080 1440,1860 1860,2070 2070,2370
very [coupled],| {as,a} reason, exactly
|作为一个原因，正是因为你提到的原因，

2367
01:18:30,370 --> 01:18:31,480
0,90 90,180 180,720 720,810 810,1110
for the reason you mentioned,|
|

2368
01:18:31,480 --> 01:18:33,100
0,240 240,360 360,690 690,1140 1140,1620
because you have minors and
因为你有未成年人，你必须激励他们。

2369
01:18:33,130 --> 01:18:34,270
0,120 120,270 270,360 360,900 930,1140
you have to incentivize them.|
|

2370
01:18:35,060 --> 01:18:36,230
0,180 180,360 360,420 420,840 840,1170
I think in general with
我认为总的来说，这些交易都很便宜，

2371
01:18:36,230 --> 01:18:37,640
0,180 180,690 690,780 780,1020 1020,1410
these transactions are pretty cheap,|
|

2372
01:18:37,670 --> 01:18:38,780
0,90 90,210 210,690 690,810 810,1110
you know basically you know
你知道，基本上你知道你只需要付足够的钱，对吗，

2373
01:18:38,810 --> 01:18:39,530
0,240 240,360 360,450 450,570 570,720
you have to just pay

2374
01:18:39,530 --> 01:18:41,270
0,300 300,660 660,750 750,1230 1320,1740
enough, correct,| the miners willing
|矿工们愿意把你的交易包括在内。

2375
01:18:41,270 --> 01:18:43,480
0,870 900,1260 1260,1380 1380,1920
to include your transaction.|
|

2376
01:18:44,300 --> 01:18:46,140
0,660 660,1080 1080,1530
{} And {you,know}
你知道，今天，如果你想在域名系统中注册一个名字，你还需要付费，

2377
01:18:46,440 --> 01:18:47,760
0,300 300,420 420,600 600,810 810,1320
today, you also pay for

2378
01:18:47,850 --> 01:18:48,930
0,300 300,450 450,630 630,690 690,1080
if you want to register

2379
01:18:48,930 --> 01:18:50,700
0,30 30,360 360,840 840,1620 1620,1770
a name in {} in

2380
01:18:50,700 --> 01:18:52,470
0,570 570,660 660,990 1020,1560 1560,1770
DNS,| you know actually quite
|你知道，实际上是相当多的钱，不是免费的。

2381
01:18:52,470 --> 01:18:53,280
0,30 30,120 120,180 180,480
a bit of money,

2382
01:18:54,250 --> 01:18:55,260
0,300 300,720
not free.|
|

2383
01:18:58,410 --> 01:18:59,520
0,240 240,420 420,570 570,960 960,1110
I don't know exactly how
我不知道经济学到底会如何运作，

2384
01:18:59,520 --> 01:19:02,010
0,450 450,600 600,810 810,1230 1230,2490
economics would work out,| but
|但很明显，这实际上是一种成本更高的方式，

2385
01:19:02,010 --> 01:19:04,110
0,1410 1410,1740 1740,1860 1860,1980 1980,2100
{the,obviously} clear that this is

2386
01:19:04,110 --> 01:19:05,130
0,240 240,300 300,540 540,690 690,1020
actually a much more expensive

2387
01:19:05,130 --> 01:19:05,910
0,120 120,180 180,390 390,510 540,780
way of doing it,| other
|除了也许你在用电力燃烧地球之外，

2388
01:19:05,910 --> 01:19:07,110
0,180 180,450 450,840 840,1110 1110,1200
than maybe you're burning the

2389
01:19:07,110 --> 01:19:08,800
0,390 390,630 630,1440
planet within electricity,|
|

2390
01:19:09,430 --> 01:19:10,090
0,210 210,360 360,510 510,600 600,660
{} at least in the
至少在比特币的笼子里是这样。

2391
01:19:10,090 --> 01:19:12,070
0,330 330,750 780,1110 1110,1740 1740,1980
Bitcoin cage.| {} But maybe
|但也许你应该使用一个工作状态分类账而不是，

2392
01:19:12,070 --> 01:19:13,750
0,90 90,240 240,510 510,1140 1470,1680
you should use a one

2393
01:19:13,750 --> 01:19:14,740
0,90 90,210 210,450 450,540 540,990
of the state of work

2394
01:19:14,740 --> 01:19:18,880
0,0 1380,2100 2100,2340 2340,2730 3480,4140
{} ledgers instead of the,|
|

2395
01:19:20,360 --> 01:19:22,220
0,840 960,1530
okay, {}
好的，州证明而不是这些工作证明账本。

2396
01:19:22,990 --> 01:19:24,610
0,690 690,960 960,1290 1290,1350 1350,1620
{proof,of} state instead of these

2397
01:19:24,610 --> 01:19:26,380
0,330 330,420 420,840 870,1260 1260,1770
proof of work {} ledgers.|
|

2398
01:19:29,960 --> 01:19:31,130
0,150 150,270 270,390 390,930 930,1170
It will be possible just
只需把它换掉就可以了，

2399
01:19:31,130 --> 01:19:32,840
0,90 90,600 600,750 750,1170 1230,1710
to swap it out,| in
|代替……

2400
01:19:33,110 --> 01:19:35,540
0,510 510,630 660,1200 1230,1950 1980,2430
place of.| I think I
|我想我认为这就是报纸所说的，对吧，

2401
01:19:35,720 --> 01:19:36,440
0,360 360,450 450,510 510,660 660,720
think this is what the

2402
01:19:36,440 --> 01:19:38,060
0,300 300,630 630,1020 1020,1200 1200,1620
papers argue, correct,| their particular
|他们的特定设计真的不是很依赖于底层的区块链

2403
01:19:38,060 --> 01:19:39,260
0,390 390,480 480,690 690,960 960,1200
design is really not very

2404
01:19:39,260 --> 01:19:42,290
0,450 450,720 720,1530 1890,2370 2370,3030
dependent on the underlying blockchain|
|

2405
01:19:42,290 --> 01:19:43,370
0,210 210,300 300,450 450,720 720,1080
and they could easily switch
他们可以很容易地切换到另一个区块链，

2406
01:19:43,370 --> 01:19:44,810
0,120 120,360 360,900 900,1020 1020,1440
to another blockchain,| in fact
|事实上，这是第二个成功的区块链，对吧，

2407
01:19:44,810 --> 01:19:45,950
0,150 150,240 240,360 360,630 630,1140
this is the second blockchain

2408
01:19:45,950 --> 01:19:46,910
0,150 150,450 450,600 600,840 840,960
that worked out, correct,| they
|他们首先使用Namecoin，然后改用比特币，

2409
01:19:46,910 --> 01:19:48,320
0,270 270,450 450,660 660,1080 1260,1410
first use {namecoin -} and

2410
01:19:48,320 --> 01:19:49,490
0,120 120,210 210,510 510,630 630,1170
then they switch to Bitcoin,|
|

2411
01:19:50,120 --> 01:19:50,840
0,150 150,210 210,360 360,420 420,720
and I think the argument
我认为论文中的论点是，我们实际上可以切换到另一个区块链，我们想这样做。

2412
01:19:50,840 --> 01:19:51,770
0,60 60,120 120,360 360,690 690,930
in the {paper,is} making we

2413
01:19:51,770 --> 01:19:52,910
0,150 150,420 420,780 780,900 900,1140
could actually switch to another

2414
01:19:52,910 --> 01:19:54,470
0,210 210,780 780,1170 1170,1320 1320,1560
{ -} blockchain, we wanted

2415
01:19:54,470 --> 01:19:54,920
0,120
to.|
|

2416
01:20:10,080 --> 01:20:11,520
0,330 330,450 450,1020 1020,1110 1110,1440
What in particular is stored
名字历史中具体存储了什么？

2417
01:20:11,520 --> 01:20:12,840
0,90 90,210 210,450 450,1020
in the name history?|
|

2418
01:20:14,570 --> 01:20:15,600
0,300 300,690
In the,|
在,|

2419
01:20:16,610 --> 01:20:18,260
0,300 300,720 720,1170 1170,1590 1590,1650
sorry, what, {} what's the
抱歉，什么，问题到底是什么？

2420
01:20:18,260 --> 01:20:20,060
0,330 330,840 990,1500
question {} really?|
|

2421
01:20:20,230 --> 01:20:21,670
0,300 300,630 630,750 750,960 960,1440
Oh, sorry, the name history
哦，对不起，区块堆栈数据库中的名字历史记录。

2422
01:20:21,670 --> 01:20:23,080
0,90 90,180 180,510 510,810 810,1410
in the {blockstack -} database.|
|

2423
01:20:23,790 --> 01:20:25,080
0,300 300,540 540,720 720,840 840,1290
Yeah, this, this,| {} yeah
对，这，|是啊，我不是说像这三个不同的人。

2424
01:20:25,080 --> 01:20:26,100
0,120 120,270 270,690 690,900 900,1020
I don't really mean like

2425
01:20:26,100 --> 01:20:27,760
0,300 300,660 660,900 900,1410
these three different guys.|
|

2426
01:20:28,100 --> 01:20:29,540
0,720 720,990 990,1230 1230,1320 1320,1440
Yeah.| Different versions of the
嗯。|区域文件的不同版本。

2427
01:20:29,540 --> 01:20:30,480
0,180 180,630
zone file.|
|

2428
01:20:31,610 --> 01:20:33,530
0,420 420,690 690,930 930,1200 1230,1920
Oh, so just like version
哦，所以就像版本号一样。

2429
01:20:33,530 --> 01:20:35,150
0,660 780,990 990,1110 1110,1230 1230,1620
numbers.| Yeah, I think so,
|是的，我想是的，我不是百分之百确定，

2430
01:20:35,210 --> 01:20:36,350
0,120 120,360 360,570 570,810 810,1140
I'm not hundred percent sure,|
|

2431
01:20:37,190 --> 01:20:38,080
0,270 270,600
but the,
但是，但类似于通过区域文件进行的三个更新，对吗，

2432
01:20:38,590 --> 01:20:39,580
0,150 150,300 300,450 450,870 870,990
but like these correspond to

2433
01:20:39,580 --> 01:20:40,720
0,90 90,270 270,780 780,1080 1080,1140
the three updates through the

2434
01:20:40,720 --> 01:20:41,980
0,270 270,540 540,840 840,1080 1080,1260
zone file, correct,| here's number
|这是第一条，这是第二条，

2435
01:20:41,980 --> 01:20:43,400
0,270 270,480 480,690 690,1110
one, here's number two,|
|

2436
01:20:45,350 --> 01:20:46,580
0,360 360,450 450,690 690,930 930,1230
maybe they keep using version
也许他们继续使用区域文件的版本。

2437
01:20:46,580 --> 01:20:47,940
0,120 120,390 390,630 630,1050
of zone file around.|
|

2438
01:20:59,720 --> 01:21:00,680
0,180 180,660
Any other
人们还想提出其他什么话题吗？

2439
01:21:01,940 --> 01:21:02,960
0,510 510,630 630,840 840,960 960,1020
topics that people want to

2440
01:21:02,960 --> 01:21:03,720
0,120 120,450
bring up?|
|

2441
01:21:09,300 --> 01:21:10,890
0,270 270,810 810,990 990,1380 1380,1590
Okay, so {we,end,the} {sort,of} time
好吧，不管怎样，我们都要结束这段时间，

2442
01:21:10,890 --> 01:21:12,450
0,450 870,1050 1050,1140 1140,1350 1350,1560
anyway,| okay, so let's say
|好的，让我们说我们为什么不停在这里，

2443
01:21:12,450 --> 01:21:13,260
0,150 150,240 240,330 330,540 540,810
why don't we stop here,|
|

2444
01:21:13,260 --> 01:21:15,000
0,120 120,390 390,600 600,1110 1140,1740
so people need to need
所以人们需要离开才能离开

2445
01:21:15,000 --> 01:21:17,190
0,90 90,300 300,480 480,840 870,2190
to leave can leave| and
|我希望周四能见到大家，

2446
01:21:17,580 --> 01:21:19,140
0,510 510,690 690,1020 1020,1440 1440,1560
I'll see hopefully everybody on

2447
01:21:19,140 --> 01:21:20,580
0,510 510,840 840,960 960,1020 1020,1440
Thursday,| I'm going to see
|我要去看八个，我们有八个设计，八个项目

2448
01:21:20,580 --> 01:21:22,470
0,390 810,1260 1290,1470 1470,1650 1650,1890
{} eight we have eight

2449
01:21:22,470 --> 01:21:24,540
0,450 450,870 900,1110 1110,1680 1680,2070
design, {} eight projects| and
|因此，八个团队将展示他们所做的第一个想法，而不是实验4

2450
01:21:24,540 --> 01:21:26,460
0,180 180,420 420,780 1110,1470 1470,1920
so the eight teams will

2451
01:21:26,460 --> 01:21:27,690
0,270 270,360 360,600 600,990 990,1230
present the first idea what

2452
01:21:27,690 --> 01:21:30,060
0,210 210,540 1050,1410 1410,1560 1560,2370
they've done instead of lab

2453
01:21:30,060 --> 01:21:30,800
0,600
{}

2454
01:21:31,420 --> 01:21:33,730
0,660 720,1380 1830,1950 1950,2070 2070,2310
{lab,4}| and it should be
|它应该是非常酷和有趣的项目，

2455
01:21:33,730 --> 01:21:34,810
0,150 150,450 450,510 510,840 840,1080
and the the projects quite

2456
01:21:34,810 --> 01:21:36,610
0,420 420,510 510,900 900,1320 1320,1800
cool and interesting,| so hopefully
|所以希望你能从中得到娱乐，

2457
01:21:36,610 --> 01:21:39,220
0,540 900,1110 1110,1230 1230,1770 2190,2610
you will be entertained, {}|
|

2458
01:21:39,220 --> 01:21:40,510
0,480 480,720 720,990 990,1170 1170,1290
and {} that makes {concludes
这就是这堂课的结尾，

2459
01:21:40,540 --> 01:21:42,430
0,270 270,450 450,840 840,1350 1350,1890
-} this lecture,| hopefully a
|希望一点目标就是一点[]

2460
01:21:42,790 --> 01:21:44,530
0,450 450,570 570,1170 1320,1650 1650,1740
bit of {} goal is

2461
01:21:44,530 --> 01:21:46,000
0,60 60,210 210,630 630,1260 1260,1470
a little bit []| and
|你知道，在谈到设计时，分散的设计

2462
01:21:46,000 --> 01:21:47,290
0,120 120,270 270,480 480,660 810,1290
you know sort of talk

2463
01:21:47,290 --> 01:21:50,770
0,600 630,1170 1170,1800 1800,2520 2850,3480
about {} designs {} decentralized

2464
01:21:50,770 --> 01:21:51,850
0,390 390,480 480,540 540,990 990,1080
designs| to the has and
|到HAS，这可能是用户在他们的数据上

2465
01:21:51,850 --> 01:21:53,170
0,270 270,690 690,870 870,1260 1260,1320
that's probably the user on

2466
01:21:53,170 --> 01:21:55,660
0,120 120,600 930,1890 1920,2340 2340,2490
their data| and {} you
|你知道，我们在区块堆栈的背景下至少看到了一个特定的设计，

2467
01:21:55,660 --> 01:21:56,800
0,330 330,600 600,870 870,1080 1080,1140
know and we look in

2468
01:21:56,800 --> 01:21:58,450
0,90 90,480 480,900 900,1230 1230,1650
the context of blockstack at

2469
01:21:58,450 --> 01:22:00,820
0,300 300,720 720,1110 1110,1680 1920,2370
least one particular design,| how
|他们是如何以某种方式命名的，

2470
01:22:00,820 --> 01:22:02,320
0,660 690,840 840,1290 1290,1410 1410,1500
they did naming in a

2471
01:22:02,320 --> 01:22:04,270
0,240 240,810 810,1020 1020,1320 1320,1950
way,| that gives global names,
|这使全球名称、唯一名称和人类可读，好吧。

2472
01:22:04,300 --> 01:22:05,180
0,330 330,810
unique names,

2473
01:22:05,540 --> 01:22:06,980
0,510 510,630 630,1080 1110,1410 1410,1440
and {human -} {readable -

2474
01:22:06,980 --> 01:22:09,440
0,330 1050,1560 1650,2130 2130,2400 2400,2460
-}, okay.| So {that's -}
|这堂课就到此结束，

2475
01:22:09,440 --> 01:22:10,910
0,90 90,300 300,780 810,1200 1200,1470
{the,end,of} this lecture,| and then
|希望周四能见到你，

2476
01:22:10,910 --> 01:22:11,990
0,360 360,510 510,570 570,660 660,1080
hopefully see you on Thursday,|
|

2477
01:22:12,230 --> 01:22:12,770
0,150 150,270 270,390 390,450 450,540
which is going to be
这将是我们最后一次班会。

2478
01:22:12,770 --> 01:22:14,060
0,150 150,420 420,720 720,1020
our final class meeting.|
|

2479
01:22:18,300 --> 01:22:18,840
0,180 180,240 240,300 300,390 390,540
And if you have any
如果你有任何问题，请随时留下来，你可以谈论。

2480
01:22:18,840 --> 01:22:20,460
0,450 450,750 750,960 960,1380 1380,1620
questions, please feel free to

2481
01:22:20,460 --> 01:22:21,860
0,210 210,1050
stick around,

2482
01:22:22,290 --> 01:22:24,180
0,240 240,360 360,660 690,1620
you can talk. {}|
|

2483
01:22:24,500 --> 01:22:27,590
0,240 240,1200 1530,1890 1890,2160 2160,3090
{} Professor, {} for presentation,
教授，为了演示，我们是不是应该做一些更多的演示

2484
01:22:27,860 --> 01:22:29,480
0,510 510,690 690,1170 1200,1560 1560,1620
{} are we supposed to

2485
01:22:29,480 --> 01:22:30,590
0,210 210,600 660,960 960,1020 1020,1110
do something more of a

2486
01:22:30,590 --> 01:22:32,570
0,600 600,1230 1260,1500 1500,1710 1710,1980
demo| or should we have
|或者我们应该准备幻灯片，或者两者兼而有之。

2487
01:22:32,600 --> 01:22:34,580
0,480 480,960 960,1110 1110,1560 1560,1980
slides prepared or combination both.|
|

2488
01:22:34,610 --> 01:22:40,310
0,330 330,660 660,2130 2460,4470 4620,5700
Yeah, we've {} some structures,|
是的，我们有一些结构，|

2489
01:22:42,320 --> 01:22:43,910
0,540 540,990 990,1230 1230,1470 1470,1590
{} you're pretty free to
你可以自由地去做，

2490
01:22:43,910 --> 01:22:45,080
0,120 120,660 660,930 930,990 990,1170
do,| so what you wanna
|所以你想做的是，

2491
01:22:45,080 --> 01:22:46,610
0,330 330,480 480,990 1050,1380 1380,1530
do,| {} do the things
|做你想做的事

2492
01:22:46,610 --> 01:22:47,090
0,60 60,180 180,240 240,360 360,480
you want to do| is
|就是说服你们全班同学，

2493
01:22:47,090 --> 01:22:48,860
0,570 600,1020 1020,1230 1230,1290 1290,1770
to convince you the class,|
|

2494
01:22:48,890 --> 01:22:51,590
0,420 420,780 780,1560 1830,2280 2280,2700
you know what [] did
你知道[]做了什么，为什么很酷。

2495
01:22:51,590 --> 01:22:52,420
0,120 120,330 330,750
and why {is,cool}.|
|

2496
01:22:52,950 --> 01:22:54,030
0,540 540,690 690,960 960,1020 1020,1080
{} Show demo is a
表演演示是个好主意，

2497
01:22:54,030 --> 01:22:56,310
0,150 150,630 900,1860 1860,2160 2160,2280
good idea,| {} yeah you
|是的，你的时间不多了，

2498
01:22:56,310 --> 01:22:56,820
0,150 150,240 240,270 270,450 450,510
don't have a ton of

2499
01:22:56,820 --> 01:22:58,080
0,330 330,720 870,1020 1020,1200 1200,1260
time,| so I think the
|所以我认为最典型的做法是，

2500
01:22:58,080 --> 01:22:58,920
0,270 270,420 420,510 510,690 690,840
typical thing to do is,|
|

2501
01:22:58,920 --> 01:23:00,630
0,360 360,480 480,990 990,1170 1170,1710
people have a few slides
人们有几张幻灯片来解释他们的所作所为，

2502
01:23:00,630 --> 01:23:02,250
0,270 270,720 720,1140 1140,1260 1260,1620
for explaining what they did,|
|

2503
01:23:02,250 --> 01:23:03,300
0,150 150,330 330,690 690,840 840,1050
and then maybe {} cook
然后可能还会制作样片

2504
01:23:03,300 --> 01:23:04,590
0,630 630,750 750,1020 1020,1200 1200,1290
demos| to see how it
|看看它是如何真正实现的。

2505
01:23:04,590 --> 01:23:05,960
0,450 450,1200
actually materialized.|
|

2506
01:23:06,980 --> 01:23:09,260
0,510 750,1470 1470,1950
Great, okay, thanks.|
太好了，好的，谢谢。|

2507
01:23:11,640 --> 01:23:12,600
0,240 240,360 360,510 510,810 810,960
Yeah, we don't expect you
是啊，我们不指望你

2508
01:23:12,600 --> 01:23:14,460
0,150 150,570 570,810 810,1350 1350,1860
to| whatever in hours preparing
|不管在几个小时内为这个做准备，对吗，

2509
01:23:14,460 --> 01:23:16,260
0,120 120,300 300,720 1200,1530 1530,1800
for this, correct,| {} do
|我们要不要试着分享你的所作所为。

2510
01:23:16,260 --> 01:23:17,550
0,360 390,720 720,810 810,1080 1080,1290
we try to share what

2511
01:23:17,550 --> 01:23:18,340
0,120 120,480
you've done.|
|

2512
01:23:20,540 --> 01:23:21,380
0,600
Okay,
好的谢谢。

2513
01:23:23,150 --> 01:23:24,060
0,240 240,630
thank you.|
|

2514
01:23:25,060 --> 01:23:27,010
0,570 1080,1320 1320,1560 1560,1860 1860,1950
{} I just wanted to
我只想问一下，

2515
01:23:27,010 --> 01:23:29,590
0,510 660,990 990,1470 1710,2040 2040,2580
ask,| so it's like what
|所以这就像是什么道理，

2516
01:23:29,590 --> 01:23:30,580
0,120 120,690
is the

2517
01:23:31,070 --> 01:23:34,640
0,660 660,1410 1650,2100 2100,2790 3030,3570
reasoning,| behind just having just
|仅仅在区块链上使用相同的比特币，

2518
01:23:34,640 --> 01:23:37,430
0,300 300,420 420,1140 1200,2190 2400,2790
using the same Bitcoin on

2519
01:23:37,610 --> 01:23:38,840
0,180 180,990
the blockchain,|
|

2520
01:23:39,120 --> 01:23:41,460
0,240 240,480 480,990 1320,2010
and just putting the,
只是把命名的交易记录放在那里，

2521
01:23:41,660 --> 01:23:43,370
0,300 300,900 900,1050 1050,1140 1140,1710
the transactions for the naming

2522
01:23:43,400 --> 01:23:44,580
0,360 360,870
on there,|
|

2523
01:23:44,720 --> 01:23:45,860
0,480 480,630 630,750 750,840 840,1140
together with all the rest
再加上其他所有的东西，对。

2524
01:23:45,860 --> 01:23:48,420
0,60 60,210 210,900 1080,1650
of the things, right.|
|

2525
01:23:48,650 --> 01:23:49,700
0,240 240,480 480,840 840,960 960,1050
I I think these are
我我想这些是报纸，

2526
01:23:49,700 --> 01:23:54,410
0,60 60,540 660,4170 4170,4320 4320,4710
the {papers -},| {} {so,they,started}
|所以他们开始在Namecoin的顶部建造，

2527
01:23:54,410 --> 01:23:55,400
0,330 330,660 660,720 720,930 930,990
out building on top of

2528
01:23:55,400 --> 01:23:56,300
0,240 240,600
{namecoin -},|
|

2529
01:23:56,490 --> 01:23:57,720
0,240 240,360 360,480 480,840 840,1230
which is a special purpose
这是一种用于命名的特殊用途分类账

2530
01:23:57,720 --> 01:24:00,960
0,360 360,510 510,1020 1470,2340 2580,3240
ledger for naming| {} and,
|而且，他们基本上发现了，当然欢迎使用Namecoin的安全问题，

2531
01:24:01,680 --> 01:24:03,750
0,270 270,330 330,780 780,1170 1170,2070
and they discovered basically the,

2532
01:24:04,380 --> 01:24:05,430
0,150 150,300 300,570 570,690 690,1050
{} sure welcome to security

2533
01:24:05,430 --> 01:24:08,250
0,300 300,720 990,1710 1710,2340 2340,2820
issues with {namecoin -} {},|
|

2534
01:24:08,250 --> 01:24:09,930
0,570 570,660 660,810 810,1140 1140,1680
one of them being {}
其中一名矿工实际上并不多，

2535
01:24:09,930 --> 01:24:11,580
0,270 270,690 690,870 870,1410
actually not many miners,|
|

2536
01:24:12,410 --> 01:24:14,840
0,420 750,1410 1410,1440 1440,2040 2040,2430
so, { -} it observes
因此，它观察到基本上有一些次要的池

2537
01:24:14,840 --> 01:24:17,000
0,360 360,750 750,1200 1200,1740 1740,2160
that basically there are minor

2538
01:24:17,000 --> 01:24:18,410
0,240 240,390 390,1050 1050,1230 1230,1410
pools| and basically have more
|并且基本上有50%以上的容量，

2539
01:24:18,410 --> 01:24:20,960
0,90 90,690 690,840 840,1260 1860,2550
than {50%,of -} the {}

2540
01:24:21,370 --> 01:24:22,560
0,900
capacity,|
|

2541
01:24:23,080 --> 01:24:25,420
0,780 810,1140 1140,1350 1350,1860 1860,2340
and {} work capacity, therefore
和工作能力，因此你可以做他们想做的任何事情

2542
01:24:25,420 --> 01:24:26,260
0,120 120,270 270,420 420,750 750,840
you could do anything they

2543
01:24:26,260 --> 01:24:27,610
0,270 270,330 330,690 690,840 840,1350
wanted to do| to the
|从本金到账本。

2544
01:24:27,670 --> 01:24:28,980
0,420 420,540 540,630 630,1020
principal to the ledger.|
|

2545
01:24:29,750 --> 01:24:30,440
0,120 120,270 270,360 360,630 630,690
And so they wanted ton
所以他们想坐在区块链上，这种区块链被广泛使用，非常流行

2546
01:24:30,440 --> 01:24:32,810
0,270 270,540 540,1050 1320,2160 2160,2370
sit on a blockchain that

2547
01:24:32,810 --> 01:24:34,220
0,120 120,510 510,870 870,1080 1080,1410
is widely used very popular|
|

2548
01:24:34,220 --> 01:24:35,240
0,90 90,300 300,450 450,570 570,1020
and not easy to overtake
而且不容易被对手超越。

2549
01:24:35,240 --> 01:24:36,960
0,390 390,750 750,900 900,1440
{} by the adversary.|
|

2550
01:24:38,410 --> 01:24:40,540
0,570 570,660 660,1080 1080,1230 1230,2130
Okay, I remember the {51%
好的，我记得那51%是的，记得。

2551
01:24:40,570 --> 01:24:42,700
0,510 510,840 840,1380
-} yeah, remember.|
|

2552
01:24:42,940 --> 01:24:45,220
0,450 570,930 930,1350 1740,2130 2130,2280
Okay, makes sense.| {} And
好的，说得通。|我还想问一下，

2553
01:24:45,220 --> 01:24:46,330
0,60 60,300 300,570 570,660 660,1110
I also wanted to ask

2554
01:24:46,330 --> 01:24:48,140
0,630 930,1530
about, {}|
|

2555
01:24:48,540 --> 01:24:49,740
0,240 240,480 480,810 810,1020 1020,1200
the {URIs -} there you're
您要写入到区域文件存储系统的URI

2556
01:24:49,740 --> 01:24:51,140
0,450 450,1080
writes to,

2557
01:24:51,540 --> 01:24:53,910
0,240 240,660 720,1410 1500,2010 2010,2370
to the zone file storage

2558
01:24:53,910 --> 01:24:55,580
0,480 480,690 690,990 990,1350
system| not just like
|不只是S3之类的东西，对吧。

2559
01:24:56,080 --> 01:24:58,180
0,300 330,840 840,1200 1200,1680 1710,2100
{} S3 something something, right.|
|

2560
01:24:58,210 --> 01:24:59,650
0,180 180,390 390,720 750,1110 1110,1440
There could be, {} the
可能会有，问题是一些更普遍的东西，

2561
01:24:59,650 --> 01:25:00,760
0,360 360,450 450,930 930,960 960,1110
problem is something a little

2562
01:25:00,760 --> 01:25:01,840
0,150 150,300 300,660 660,930 930,1080
bit more general,| because it's
|因为它实际上是由块堆栈文件系统解释的，

2563
01:25:01,840 --> 01:25:04,810
0,270 270,780 780,1590 1950,2670 2700,2970
actually interpreted by {} by

2564
01:25:04,810 --> 01:25:07,960
0,840 840,1110 1110,1590 1980,3120 3120,3150
blockstack file system,| { -}
|因此并且块堆栈文件系统具有用于不同存储提供商的后端，

2565
01:25:07,960 --> 01:25:09,400
0,330 330,600 600,1080 1080,1350 1350,1440
so and the {blockstack -

2566
01:25:09,400 --> 01:25:10,480
0,210 210,390 390,630 630,900 900,1080
- -} file system has

2567
01:25:10,480 --> 01:25:11,680
0,450 450,600 600,660 660,900 900,1200
backends for the different storage

2568
01:25:11,680 --> 01:25:12,850
0,420 420,600 600,660 660,870 870,1170
provider,| where it {S3 -}
|不管是S3还是谷歌硬盘什么的。

2569
01:25:12,850 --> 01:25:14,890
0,330 330,660 660,1170 1170,1440 1440,2040
or Google drive or whatever.|
|

2570
01:25:15,370 --> 01:25:16,870
0,390 390,750 750,960 960,1200 1200,1500
{} And so there's some
所以有一些命名方案，

2571
01:25:16,870 --> 01:25:20,980
0,390 390,960 960,1980 2220,3090 3510,4110
naming schemes,| {} the blockstack
|区块堆栈文件系统可以解释

2572
01:25:20,980 --> 01:25:22,720
0,210 210,570 570,960 1140,1620 1620,1740
file system can interpret {}|
|

2573
01:25:22,720 --> 01:25:23,680
0,90 90,210 210,510 510,780 780,960
and then figure out how
然后找出如何从正确的后端检索正确的文件。

2574
01:25:23,680 --> 01:25:25,240
0,120 120,600 600,750 750,1080 1080,1560
to retrieve the right file

2575
01:25:25,240 --> 01:25:28,960
0,330 330,1140 1500,2070 2100,2670 2700,3720
from the the correct backend.|
|

2576
01:25:31,130 --> 01:25:32,480
0,210 210,330 330,780 870,1050 1050,1350
This is just to make
这只是为了让它们变得一样。

2577
01:25:32,480 --> 01:25:34,790
0,420 450,600 600,1080 1170,1860 1860,2310
them the same.| Yeah, usually
|是啊，通常应用程序编写者并不是真的想要也不在乎，

2578
01:25:34,790 --> 01:25:36,020
0,90 90,540 540,840 840,1020 1020,1230
an application writer doesn't really

2579
01:25:36,020 --> 01:25:37,790
0,240 360,930 930,1260 1260,1680 1680,1770
want doesn't care,| whether it's
|无论是存储的S3还是谷歌硬盘，

2580
01:25:37,790 --> 01:25:38,900
0,300 300,480 480,720 720,870 870,1110
stored {S3 -} or Google

2581
01:25:38,900 --> 01:25:39,830
0,270 270,330 330,450 450,750 750,930
drive,| or we shoot you
|或者我们在你通常需要处理的地方开枪打你。

2582
01:25:39,830 --> 01:25:41,150
0,420 450,540 540,1110 1110,1230 1230,1320
where you usually have to

2583
01:25:41,150 --> 01:25:41,900
0,180 180,270 270,510
deal with that.|
|

2584
01:25:43,180 --> 01:25:45,660
0,690 690,780 780,930 930,1470
Thank you so much.|
非常感谢。|

2585
01:25:45,860 --> 01:25:46,800
0,600
{You're,welcome}.|
不用谢。|

2586
01:25:47,350 --> 01:25:48,250
0,120 120,210 210,240 240,600 600,900
I had a question about
我有一个问题，为什么三角形有点像，

2587
01:25:48,250 --> 01:25:51,040
0,750 840,1350 1350,1410 1410,2280 2490,2790
why {[] -} triangle is

2588
01:25:51,040 --> 01:25:53,260
0,210 210,330 330,1260 1890,2040 2040,2220
kind of like,| I think
|我认为人们想的很多，比如，

2589
01:25:53,260 --> 01:25:54,010
0,120 120,330 330,540 540,690 690,750
that people think about a

2590
01:25:54,010 --> 01:25:55,060
0,240 240,420 420,720 720,930 930,1050
lot like,| it seems that
|似乎你有一个客户端来解释人类没有意义的数据，

2591
01:25:55,060 --> 01:25:56,320
0,210 210,360 360,510 510,870 870,1260
you have a client side

2592
01:25:56,590 --> 01:25:59,050
0,450 450,540 540,1140 1440,2100 2100,2460
interpret the human non meaningful

2593
01:25:59,050 --> 01:26:00,610
0,540 900,1080 1080,1200 1200,1320 1320,1560
data,| that you can make
|你可以让所有的数据对人类有意义，

2594
01:26:00,610 --> 01:26:01,180
0,150 150,210 210,330 330,390 390,570
kind of all the data

2595
01:26:01,180 --> 01:26:02,920
0,240 240,870 1080,1380 1380,1500 1500,1740
human meaningful,| on the client
|在客户端侧到用户，

2596
01:26:02,920 --> 01:26:03,880
0,390 390,480 480,570 750,870 870,960
side to the to the

2597
01:26:03,880 --> 01:26:04,580
0,570
user,|
|

2598
01:26:04,830 --> 01:26:06,570
0,630 870,1020 1020,1380 1380,1500 1500,1740
{ -} and so I
所以我不能完全确定是什么样子的，

2599
01:26:06,570 --> 01:26:07,740
0,210 210,510 510,690 690,840 840,1170
wasn't completely sure like what,|
|

2600
01:26:08,780 --> 01:26:10,850
0,210 210,690 690,780 780,1500 1800,2070
like what the innovation here
比如这里的创新之处

2601
01:26:10,850 --> 01:26:12,950
0,150 150,420 420,870 870,1500 1680,2100
is| or why people why
|也不知道为什么人们认为这是一种权衡。

2602
01:26:12,950 --> 01:26:14,660
0,180 180,270 270,660 960,1290 1290,1710
this is a trade off.|
|

2603
01:26:15,410 --> 01:26:17,330
0,1080 1080,1350 1350,1590 1590,1770 1770,1920
Yeah, well, I guess this
是的，我想这是我能给你的最好的幻灯片了，

2604
01:26:17,330 --> 01:26:18,470
0,60 60,150 150,570 570,1080 1080,1140
is the best slide, I

2605
01:26:18,470 --> 01:26:19,700
0,120 120,270 270,540 540,1110 1110,1230
can give you,| were I
|如果我能给你举一大堆命名的例子，

2606
01:26:19,700 --> 01:26:20,090
0,90 90,210 210,270 270,300 300,390
can give you a whole

2607
01:26:20,090 --> 01:26:21,470
0,150 150,210 210,450 450,960 960,1380
bunch of naming examples,| basically
|基本上是三个中的两个，但不是所有的三个。

2608
01:26:21,470 --> 01:26:22,820
0,600 600,690 690,870 870,1050 1050,1350
{two,of,three}, but not all three.|
|

2609
01:26:23,680 --> 01:26:26,890
0,960 960,1980 1980,2490 2550,2730 2730,3210
And, {} in for example
例如，就像你知道的那样，

2610
01:26:26,890 --> 01:26:29,530
0,270 270,360 360,720 720,1200 1920,2640
like you know,| {} the
|你知道我们谈过密钥库，对吧，

2611
01:26:30,740 --> 01:26:31,580
0,210 210,330 330,570 570,660 660,840
{} you know we talked

2612
01:26:31,580 --> 01:26:34,280
0,210 210,570 570,840 840,1740 1740,2700
about keybase, correct,| {} decentralized,
|去中心化，你知道不是独一无二的。

2613
01:26:34,670 --> 01:26:35,960
0,390 390,510 510,870 870,1050 1050,1290
{} you knew over not

2614
01:26:35,960 --> 01:26:36,680
0,390
unique.|
|

2615
01:26:38,680 --> 01:26:39,730
0,150 150,300 300,420 420,720 720,1050
And now you're gonna argue,|
现在你会争辩说，|

2616
01:26:39,730 --> 01:26:40,840
0,210 210,390 390,600 600,1050 1050,1110
when it's that important to
当拥有全球唯一的名称变得如此重要时，

2617
01:26:40,840 --> 01:26:42,400
0,120 120,450 450,720 720,1290
have globally unique names,|
|

2618
01:26:42,710 --> 01:26:43,910
0,300 300,510 510,930 930,1140 1140,1200
it's like whatever it's a
它就像是一个全球唯一的名字，

2619
01:26:43,910 --> 01:26:45,140
0,390 390,630 630,840 840,1020 1020,1230
globally unique name,| like {6.824
|比如6.824是什么意思，

2620
01:26:45,140 --> 01:26:46,160
0,180 180,300 300,390 390,690 690,1020
- - - -} what

2621
01:26:46,160 --> 01:26:47,080
0,120 120,210 210,540
does it mean,|
|

2622
01:26:47,780 --> 01:26:49,040
0,150 150,330 330,870 870,1050 1050,1260
and who's associated with it,|
以及与之相关的人，|

2623
01:26:49,160 --> 01:26:50,210
0,240 240,600 600,690 690,900 900,1050
so if you're coming from
所以如果你是从那个角度来的，

2624
01:26:50,210 --> 01:26:51,050
0,150 150,480 480,540 540,690 690,840
that angle,| I think that's
|我认为这是一个非常合理的问题。

2625
01:26:51,050 --> 01:26:52,480
0,30 30,240 240,510 510,990
a very valid question.|
|

2626
01:26:57,190 --> 01:26:58,560
0,240 240,480
Thank you.|
谢谢。|

2627
01:26:59,940 --> 01:27:01,260
0,510 540,750 750,870 870,1020 1020,1320
So one of the things
所以有一件事一直困扰着我，

2628
01:27:01,260 --> 01:27:02,610
0,330 360,690 690,1050 1050,1230 1230,1350
that has always kind of

2629
01:27:02,610 --> 01:27:03,930
0,420 420,570 570,840 840,1020 1020,1320
bothered me,| when we're reading
|当我们通读这些区块链类型的论文时，

2630
01:27:03,930 --> 01:27:05,460
0,150 150,600 630,1230 1230,1440 1440,1530
through these blockchain type of

2631
01:27:05,460 --> 01:27:07,140
0,390 390,630 810,1050 1050,1230 1230,1680
papers is,| like what happens
|就像一百年后发生的事情一样，

2632
01:27:07,140 --> 01:27:08,550
0,150 150,270 270,600 600,1020 1020,1410
in a hundred years,| when
|当账本喜欢上多重恐怖时，

2633
01:27:08,760 --> 01:27:11,070
0,690 690,840 840,1260 1260,1740 1740,2310
{} the ledger gets to

2634
01:27:11,100 --> 01:27:12,540
0,240 240,630 630,1020 1140,1290 1290,1440
like multiple terror,| I don't
|我不知道是不是像几TB之类的。

2635
01:27:12,540 --> 01:27:13,980
0,90 90,420 570,810 810,1110 1110,1440
know if yeah like multiple

2636
01:27:13,980 --> 01:27:15,900
0,540 540,630 630,1140
terabytes or something.|
|

2637
01:27:18,320 --> 01:27:20,150
0,690 690,840 840,1200 1200,1590 1620,1830
Yeah.| Do we not, {do,we}
嗯。|我们不是，我们不是有逃跑计划，

2638
01:27:20,150 --> 01:27:21,410
0,150 150,330 330,720 720,1080 1080,1260
not having escape plan,| like
|比如接下来会发生什么。

2639
01:27:21,410 --> 01:27:23,060
0,420 420,600 600,930 930,1320
what's gonna happen then.|
|

2640
01:27:23,620 --> 01:27:25,860
0,930 960,1230 1230,1590
I don't know.|
我不知道。|

2641
01:27:26,490 --> 01:27:28,320
0,240 240,870 1080,1650 1650,1740 1740,1830
Hard to speculate on the
很难推测未来的一百年。

2642
01:27:28,320 --> 01:27:30,510
0,600 1170,1410 1410,1560 1560,1650 1650,2190
{hundred,years} out into the future.|
|

2643
01:27:30,690 --> 01:27:31,710
0,480 480,720 720,810 810,930 930,1020
I presume, what would you
我想，你会怎么做，

2644
01:27:31,710 --> 01:27:32,700
0,300 300,480 480,660 660,900 900,990
do,| so you put a
|所以你设置了一个检查站，

2645
01:27:32,700 --> 01:27:35,640
0,570 570,1410 1920,2280 2280,2490 2490,2940
checkpoint in,| {} yeah I
|是啊，我能想象出多种摆脱困境的计划，

2646
01:27:35,640 --> 01:27:37,170
0,120 120,450 450,750 750,1140 1140,1530
can imagine multiple schemes for

2647
01:27:37,170 --> 01:27:38,340
0,270 270,420 420,480 480,870 900,1170
getting out of this, {}|
|

2648
01:27:38,340 --> 01:27:39,360
0,330 330,450 450,780 780,930 930,1020
one you could make a
一个你可以在这个州设立检查站的地方，

2649
01:27:39,360 --> 01:27:40,240
0,690
checkpoint

2650
01:27:40,390 --> 01:27:41,890
0,570 570,840 840,960 960,1410 1410,1500
{} of the state,| you
|你知道，建立在账本上

2651
01:27:41,890 --> 01:27:43,120
0,270 270,540 540,630 630,720 720,1230
know build on the ledger|
|

2652
01:27:43,120 --> 01:27:44,710
0,540 540,870 870,930 930,1320 1320,1590
and include the hash that
并将检查点的散列包括到分类帐中

2653
01:27:44,710 --> 01:27:46,960
0,480 480,840 840,990 990,1500 1500,2250
checkpoint into the ledger| and
|然后，只要您可以广泛复制检查点

2654
01:27:46,960 --> 01:27:47,740
0,210 210,360 360,510 510,630 630,780
then as long as you

2655
01:27:47,740 --> 01:27:50,530
0,540 570,1380 1380,1470 1470,2070 2070,2790
can replicate the checkpoint widely|
|

2656
01:27:50,950 --> 01:27:52,390
0,330 330,690 690,840 840,1050 1050,1440
and then you can basically
然后你基本上可以从检查站开始奔跑，省去开头的部分。

2657
01:27:52,390 --> 01:27:53,560
0,270 270,480 480,660 660,720 720,1170
start running from the checkpoint

2658
01:27:53,560 --> 01:27:54,580
0,90 90,330 330,480 480,570 570,1020
to cut out the beginning.|
|

2659
01:27:55,300 --> 01:27:56,140
0,240 240,300 300,510 510,660 660,840
This is like not even
这甚至不像你在实验室里做的那样

2660
01:27:56,140 --> 01:27:57,550
0,330 330,480 480,720 720,1050 1050,1410
like you were doing {in,lab},|
|

2661
01:27:57,790 --> 01:27:59,320
0,240 240,450 450,900 900,1110 1110,1530
you know raft doing, correct.|
你知道木筏在做什么，对吧。|

2662
01:28:01,370 --> 01:28:02,480
0,270 270,390 390,720 720,900 900,1110
Would the party that does
这样做的一方是必须得到信任还是。

2663
01:28:02,480 --> 01:28:03,800
0,210 210,390 390,510 510,600 600,1320
that have to be trusted

2664
01:28:03,890 --> 01:28:04,960
0,750
or.|
|

2665
01:28:05,830 --> 01:28:09,260
0,240 240,1500 2310,3090
What we did,|
我们所做的，|

2666
01:28:10,790 --> 01:28:12,500
0,450 450,840 840,1110 1110,1500 1500,1710
presumably clieng one go have
想必客户一走就得跟着走，

2667
01:28:12,500 --> 01:28:13,780
0,60 60,210 210,720
to go along,|
|

2668
01:28:14,380 --> 01:28:15,790
0,660 660,780 780,1170 1170,1260 1260,1410
and you realize that they
你意识到他们应该得到那个检查站，

2669
01:28:15,790 --> 01:28:17,440
0,240 240,630 630,810 810,1410 1410,1650
should get that checkpoint,| you'll
|你将能够构建你所知道的世界的当前状态。

2670
01:28:17,440 --> 01:28:18,730
0,120 120,330 330,570 570,1200 1200,1290
be able to construct you

2671
01:28:18,730 --> 01:28:19,510
0,120 120,210 210,450 450,690 690,780
know the current state of

2672
01:28:19,510 --> 01:28:20,260
0,60 60,510
the world.|
|

2673
01:28:20,880 --> 01:28:21,990
0,300 300,510 510,750 750,870 870,1110
So I presume that which
因此，我假设这需要一些关键的改变，可能需要一些分叉。

2674
01:28:21,990 --> 01:28:23,940
0,420 420,780 780,1170 1170,1590 1590,1950
requires some critical changes probably

2675
01:28:23,940 --> 01:28:25,400
0,210 210,750
some fork.|
|

2676
01:28:28,990 --> 01:28:29,740
0,150 150,240 240,420 420,510 510,750
This is not a huge
这不是什么大问题，对吧，

2677
01:28:29,740 --> 01:28:31,780
0,330 330,780 1440,1770 1770,1860 1860,2040
issue, correct,| usually the rate
|通常比特币的汇率，

2678
01:28:31,780 --> 01:28:32,920
0,60 60,540 540,870 870,1050 1050,1140
of Bitcoin,| because like you
|因为就像你知道几秒钟的交易数量，你可以做，实际上是很小的，

2679
01:28:32,920 --> 01:28:33,940
0,120 120,240 240,420 420,480 480,1020
know the number of transactions

2680
01:28:33,940 --> 01:28:35,710
0,1020 1050,1440 1440,1530 1530,1620 1620,1770
for seconds, you can do,

2681
01:28:35,710 --> 01:28:37,420
0,150 150,360 360,900 1380,1620 1620,1710
is actually small,| like if
|比如，如果你还记得比特币报纸上的内容，

2682
01:28:37,420 --> 01:28:38,290
0,90 90,390 390,510 510,570 570,870
you remember from the Bitcoin

2683
01:28:38,290 --> 01:28:39,970
0,360 360,570 570,750 750,1440 1440,1680
paper,| there's some calculation like
|有一些计算就像你知道总的大小是多少，

2684
01:28:39,970 --> 01:28:41,350
0,90 90,390 630,840 840,1110 1110,1380
you know what the total

2685
01:28:41,350 --> 01:28:42,430
0,270 270,420 420,810 840,960 960,1080
size would be,| if you
|如果你这样做，而且

2686
01:28:42,430 --> 01:28:43,260
0,150 150,570
do this,

2687
01:28:43,550 --> 01:28:45,140
0,330 330,480 480,570 570,1140 1200,1590
{} {furthermore - -}| and
|你还记得在比特币纸上，

2688
01:28:45,140 --> 01:28:46,490
0,120 120,390 390,810 810,1020 1020,1350
you remember correctly from the

2689
01:28:46,550 --> 01:28:47,870
0,570 570,930 930,1080 1080,1140 1140,1320
Bitcoin paper,| there's a bunch
|有很多优化，你不必真的记住每一枚硬币的每一笔交易，

2690
01:28:47,870 --> 01:28:49,970
0,60 60,810 1050,1500 1770,1950 1950,2100
of optimizations, where you don't

2691
01:28:49,970 --> 01:28:51,320
0,240 240,480 480,600 600,1020 1020,1350
really have to remember every

2692
01:28:51,320 --> 01:28:53,750
0,720 1080,1470 1470,1710 1710,2250 2250,2430
transaction {} for every {}

2693
01:28:53,750 --> 01:28:54,980
0,540 540,660 660,960 960,1140 1140,1230
coin,| you basically have to
|基本上你必须记住每一枚硬币的最后一笔交易

2694
01:28:54,980 --> 01:28:56,960
0,300 300,450 450,1170 1170,1740 1740,1980
remember the last transaction for

2695
01:28:56,960 --> 01:28:58,790
0,240 240,810 1140,1530 1530,1680 1680,1830
every coin| and you could
|您可以通过只记住块头而不是完整的块来做到这一点。

2696
01:28:58,790 --> 01:29:00,290
0,120 120,450 450,720 720,900 900,1500
do that by just remembering

2697
01:29:00,290 --> 01:29:01,020
0,510
the

2698
01:29:01,350 --> 01:29:02,700
0,270 270,600 600,990 990,1290 1290,1350
{} block headers instead of

2699
01:29:02,700 --> 01:29:03,860
0,90 90,450 450,900
the complete block.|
|

2700
01:29:06,970 --> 01:29:07,810
0,300 300,510 510,660 660,720 720,840
So {Bitcoing - -} have
因此，Bitcoing对这个问题有某种内置的解决方案。

2701
01:29:07,810 --> 01:29:08,980
0,180 180,240 240,360 360,780 780,1170
sort of a built-in solution

2702
01:29:08,980 --> 01:29:09,980
0,90 90,270 270,690
to this problem.|
|

2703
01:29:10,860 --> 01:29:12,060
0,150 150,480 510,810 810,960 960,1200
I see, so the main
我明白了，所以主要的瓶颈或多或少是当新机器出现时，

2704
01:29:12,060 --> 01:29:13,440
0,570 570,810 810,1020 1020,1080 1080,1380
bottleneck is more or less

2705
01:29:13,440 --> 01:29:15,180
0,450 510,870 870,1320 1320,1530 1530,1740
when new machines come up,|
|

2706
01:29:15,180 --> 01:29:16,290
0,180 180,360 360,450 450,960 960,1110
they need to verify the
他们需要验证[]，

2707
01:29:16,290 --> 01:29:18,600
0,510 840,1080 1080,1350 1350,1710 1830,2310
[],| but after that then
|但在那之后，事情就相对更优化了。

2708
01:29:18,600 --> 01:29:21,030
0,420 420,600 600,1440 1470,1740 1740,2430
things are relatively more optimized.|
|

2709
01:29:23,170 --> 01:29:24,040
0,240 240,540
Thank you.|
谢谢。|

2710
01:29:35,760 --> 01:29:37,050
0,150 150,420 420,720 720,870 870,1290
{Okay -}, that for today,|
好的，今天的节目，|

2711
01:29:39,270 --> 01:29:40,260
0,270 270,450 450,570 570,810 840,990
{} thank you all, see
谢谢大家，周四见。

2712
01:29:40,260 --> 01:29:41,100
0,90 90,360
you Thursday.

